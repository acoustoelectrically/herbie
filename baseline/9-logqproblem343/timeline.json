[{"memory":[[13008,13008]],"time":0.030029296875,"type":"start"},{"compiler":[[13,9]],"memory":[[847216,847216]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.00048780441284179693,"valid":0.4990239143371582}],[11,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.0009756088256835938,"valid":0.4985361099243164}],[10,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.0019512176513671875,"valid":0.4975605010986328}],[9,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.003902435302734375,"valid":0.4956092834472656}],[8,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.00780487060546875,"valid":0.49170684814453125}],[7,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.0156097412109375,"valid":0.4839019775390625}],[6,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.031219482421875,"valid":0.468292236328125}],[5,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.06243896484375,"valid":0.43707275390625}],[4,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.1248779296875,"valid":0.3746337890625}],[3,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.249755859375,"valid":0.249755859375}],[2,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.49951171875,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.49951171875,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.49951171875,"valid":0.0}]],"time":3.3330078125,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.50048828125,"valid":0.49951171875}],"memory":[[17951584,376602144]],"mixsample":[[191.790283203125,"adjust",800],[66.661865234375,"ival-div",0],[73.375732421875,"ival-div",400],[26.8828125,"ival-sub",1600],[35.004638671875,"ival-div",1600],[5.43701171875,"ival-assert",0],[62.06298828125,"ival-sub",0],[64.73046875,"ival-sub",400],[67.80126953125,"adjust",2000],[57.00927734375,"ival-add",0],[14.635009765625,"ival-add",1600],[69.30615234375,"ival-fabs",0],[0.389404296875,"ival-log",400],[50.690185546875,"ival-add",400],[1542.42578125,"ival-log",0],[1.520263671875,"ival-log",800],[7.3056640625,"exact",0],[28.676513671875,"ival-<",0]],"outcomes":[[1097.966064453125,1,"valid",4821],[1589.5419921875,2,"valid",3142],[25.020263671875,0,"valid",293]],"time":3110.032958984375,"type":"sample"},{"compiler":[[8,6],[25,8],[25,8]],"confusion":[[255,1,0,0]],"explanations":[["log.f64","(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","sensitivity",255,1,[],[[]]]],"fperrors":[["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))",256,0,false,1,[0.013204262534340774]],["(+.f64 #s(literal 1 binary64) eps)",0,0,false,0,false],["eps",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))",0,0,false,0,false],["(-.f64 #s(literal 1 binary64) eps)",0,0,false,0,false]],"freqs":[[1,255],[0,1]],"maybe-confusion":[[255,1,0,0,0,0]],"memory":[[-19866864,50760672]],"mixsample":[[9.74609375,"adjust",800],[3.68603515625,"ival-div",0],[3.240966796875,"ival-add",0],[0.8759765625,"ival-add",1600],[0.993408203125,"ival-sub",1600],[3.880859375,"ival-div",400],[2.5224609375,"ival-div",1600],[0.235595703125,"ival-assert",0],[3.593994140625,"ival-sub",0],[2.671142578125,"ival-add",400],[82.94091796875,"ival-log",0],[0.5322265625,"ival-true",0],[3.10009765625,"ival-sub",400],[0.3603515625,"exact",0],[3.445068359375,"adjust",2000]],"outcomes":[[60.975830078125,1,"valid",302],[85.216552734375,2,"valid",188],[1.536865234375,0,"valid",22]],"time":203.261962890625,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[8,6]],"egraph":[[0,574,8,0.001617672],[10,574,8,0.003566846],[9,528,8,0.004086374],[8,331,8,0.002976023],[7,202,8,0.001871344],[6,129,8,0.00082157],[5,92,8,0.000582876],[4,58,8,0.000517134],[3,35,8,0.000254298],[2,24,8,0.000170771],[1,18,8,0.000127481],[0,10,8,0.000138656],[0,6,8,9.5966e-5],[7,610,17,0.003252177],[6,587,17,0.006180731],[5,317,17,0.003811951],[4,159,17,0.001690002],[3,89,17,0.000782835],[2,44,17,0.000490144],[1,22,17,0.000202631],[0,8,19,0.000140018]],"inputs":[["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))"]],"memory":[[-1562272,6150320]],"method":["egg-herbie"],"outputs":[["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","(log.f64 (/.f64 (-.f64 eps #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) eps)))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1],["saturated",1]],"symmetry":[[]],"time":56.76708984375,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[40816,40816]],"time":0.06494140625,"type":"eval"},{"alts":[["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","next",58.478599800950725,"binary64"]],"compiler":[[8,6]],"memory":[[315552,315552]],"time":0.4619140625,"type":"prune"},{"egraph":[[0,574,23,0.001626166],[10,574,23,0.002950592],[9,528,23,0.004041773],[8,331,23,0.003056247],[7,202,23,0.001825654],[6,129,23,0.000861989],[5,92,23,0.000611247],[4,58,23,0.000522861],[3,35,23,0.000289585],[2,24,23,0.00019326],[1,18,23,0.000147957],[0,10,23,0.000169967],[0,6,23,0.000101557]],"inputs":[["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))","(-.f64 #s(literal 1 binary64) eps)","#s(literal 1 binary64)","eps","(+.f64 #s(literal 1 binary64) eps)"]],"locations":[["(+.f64 #s(literal 1 binary64) eps)","cost-diff",0],["(-.f64 #s(literal 1 binary64) eps)","cost-diff",0],["(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))","cost-diff",0],["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","cost-diff",0]],"memory":[[1382064,1382064]],"method":["egg-herbie"],"outputs":[["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","(log.f64 (/.f64 (-.f64 eps #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) eps)))","(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))","(/.f64 (-.f64 eps #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) eps))","(-.f64 #s(literal 1 binary64) eps)","#s(literal 1 binary64)","eps","(+.f64 #s(literal 1 binary64) eps)","(-.f64 eps #s(literal -1 binary64))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":24.216064453125,"type":"simplify"},{"compiler":[[25,8]],"locations":[["(-.f64 #s(literal 1 binary64) eps)","accuracy",0.0],["(+.f64 #s(literal 1 binary64) eps)","accuracy",0.0],["(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))","accuracy",0.01953125],["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","accuracy",58.4515469739876]],"memory":[[4613696,12696448]],"mixsample":[[4.826171875,"adjust",800],[2.617919921875,"ival-div",0],[1.580322265625,"ival-add",0],[0.36376953125,"ival-add",1600],[0.52978515625,"ival-sub",1600],[1.825927734375,"ival-div",400],[0.9404296875,"ival-div",1600],[0.114990234375,"ival-assert",0],[1.948974609375,"ival-sub",0],[1.169921875,"ival-add",400],[40.657958984375,"ival-log",0],[0.21240234375,"ival-true",0],[1.59033203125,"ival-sub",400],[0.181640625,"exact",0],[1.900146484375,"adjust",2000]],"outcomes":[[29.74267578125,1,"valid",151],[44.71875,2,"valid",94],[1.047607421875,0,"valid",11]],"time":84.174072265625,"type":"localize"},{"count":[[4,26]],"inputs":[["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))","(-.f64 #s(literal 1 binary64) eps)","(+.f64 #s(literal 1 binary64) eps)"]],"memory":[[1193328,1193328]],"outputs":[["(* -2 eps)","(* eps (- (* -2/3 (pow eps 2)) 2))","(* eps (- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2))","(* eps (- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2))","1","(+ 1 (* -2 eps))","(+ 1 (* eps (- (* 2 eps) 2)))","(+ 1 (* eps (- (* eps (+ 2 (* -2 eps))) 2)))","(+ 1 (* -1 eps))","(+ 1 eps)","(log -1)","(- (log -1) (* 2 (/ 1 eps)))","(+ (log -1) (* -1 (/ (+ 2 (* 2/3 (/ 1 (pow eps 2)))) eps)))","(- (+ (log -1) (* -1 (/ (+ 2/3 (* 2/5 (/ 1 (pow eps 2)))) (pow eps 3)))) (* 2 (/ 1 eps)))","-1","(- (* 2 (/ 1 eps)) 1)","(- (* 2 (/ 1 eps)) (+ 1 (/ 2 (pow eps 2))))","(- (+ (* 2 (/ 1 eps)) (* 2 (/ 1 (pow eps 3)))) (+ 1 (/ 2 (pow eps 2))))","(* -1 eps)","(* eps (- (/ 1 eps) 1))","eps","(* eps (+ 1 (/ 1 eps)))","(+ (log -1) (* -1 (/ (+ 2 (+ (/ 2/5 (pow eps 4)) (* 2/3 (/ 1 (pow eps 2))))) eps)))","(- (* -1 (/ (- (* 2 (/ 1 eps)) 2) eps)) 1)","(- (* -1 (/ (- (* -1 (/ (- (* 2 (/ 1 eps)) 2) eps)) 2) eps)) 1)","(* -1 (* eps (- 1 (/ 1 eps))))"]],"series":[[1.037109375,"((log (/ (- 1 eps) (+ 1 eps))) (/ (- 1 eps) (+ 1 eps)) (- 1 eps) (+ 1 eps))","eps","-inf"],[1.095947265625,"((log (/ (- 1 eps) (+ 1 eps))) (/ (- 1 eps) (+ 1 eps)) (- 1 eps) (+ 1 eps))","eps","inf"],[1.23388671875,"((log (/ (- 1 eps) (+ 1 eps))) (/ (- 1 eps) (+ 1 eps)) (- 1 eps) (+ 1 eps))","eps","0"]],"time":3.7509765625,"type":"series"},{"count":[[26,25]],"egraph":[[0,8376,188,0.052555265],[5,6278,200,0.030655753],[4,2881,200,0.031227827],[3,1309,200,0.013905095],[2,488,204,0.004568037],[1,220,212,0.001792767],[0,89,218,0.000779962]],"inputs":[["(* -2 eps)","(* eps (- (* -2/3 (pow eps 2)) 2))","(* eps (- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2))","(* eps (- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2))","1","(+ 1 (* -2 eps))","(+ 1 (* eps (- (* 2 eps) 2)))","(+ 1 (* eps (- (* eps (+ 2 (* -2 eps))) 2)))","(+ 1 (* -1 eps))","(+ 1 eps)","(log -1)","(- (log -1) (* 2 (/ 1 eps)))","(+ (log -1) (* -1 (/ (+ 2 (* 2/3 (/ 1 (pow eps 2)))) eps)))","(- (+ (log -1) (* -1 (/ (+ 2/3 (* 2/5 (/ 1 (pow eps 2)))) (pow eps 3)))) (* 2 (/ 1 eps)))","-1","(- (* 2 (/ 1 eps)) 1)","(- (* 2 (/ 1 eps)) (+ 1 (/ 2 (pow eps 2))))","(- (+ (* 2 (/ 1 eps)) (* 2 (/ 1 (pow eps 3)))) (+ 1 (/ 2 (pow eps 2))))","(* -1 eps)","(* eps (- (/ 1 eps) 1))","eps","(* eps (+ 1 (/ 1 eps)))","(+ (log -1) (* -1 (/ (+ 2 (+ (/ 2/5 (pow eps 4)) (* 2/3 (/ 1 (pow eps 2))))) eps)))","(- (* -1 (/ (- (* 2 (/ 1 eps)) 2) eps)) 1)","(- (* -1 (/ (- (* -1 (/ (- (* 2 (/ 1 eps)) 2) eps)) 2) eps)) 1)","(* -1 (* eps (- 1 (/ 1 eps))))"]],"memory":[[-4620544,26690224]],"method":["egg-herbie"],"outputs":[["(* -2 eps)","(*.f64 #s(literal -2 binary64) eps)","(* eps (- (* -2/3 (pow eps 2)) 2))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps)","(* eps (- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2))","(*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","(* eps (- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","1","#s(literal 1 binary64)","(+ 1 (* -2 eps))","(fma.f64 #s(literal -2 binary64) eps #s(literal 1 binary64))","(+ 1 (* eps (- (* 2 eps) 2)))","(fma.f64 (fma.f64 #s(literal 2 binary64) eps #s(literal -2 binary64)) eps #s(literal 1 binary64))","(+ 1 (* eps (- (* eps (+ 2 (* -2 eps))) 2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) eps #s(literal 2 binary64)) eps #s(literal -2 binary64)) eps #s(literal 1 binary64))","(+ 1 (* -1 eps))","(-.f64 #s(literal 1 binary64) eps)","(+ 1 eps)","(+.f64 #s(literal 1 binary64) eps)","(log -1)","(log.f64 #s(literal -1 binary64))","(- (log -1) (* 2 (/ 1 eps)))","(-.f64 (log.f64 #s(literal -1 binary64)) (/.f64 #s(literal 2 binary64) eps))","(+ (log -1) (* -1 (/ (+ 2 (* 2/3 (/ 1 (pow eps 2)))) eps)))","(-.f64 (log.f64 #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 #s(literal 2/3 binary64) (*.f64 eps eps)) #s(literal -2 binary64)) eps))","(- (+ (log -1) (* -1 (/ (+ 2/3 (* 2/5 (/ 1 (pow eps 2)))) (pow eps 3)))) (* 2 (/ 1 eps)))","(-.f64 (/.f64 #s(literal -2 binary64) eps) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps)) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (log.f64 #s(literal -1 binary64))))","-1","#s(literal -1 binary64)","(- (* 2 (/ 1 eps)) 1)","(-.f64 (/.f64 #s(literal 2 binary64) eps) #s(literal 1 binary64))","(- (* 2 (/ 1 eps)) (+ 1 (/ 2 (pow eps 2))))","(-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) eps) #s(literal 2 binary64)) eps))","(- (+ (* 2 (/ 1 eps)) (* 2 (/ 1 (pow eps 3)))) (+ 1 (/ 2 (pow eps 2))))","(-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) eps) #s(literal 2 binary64)) eps)) eps))","(* -1 eps)","(neg.f64 eps)","(* eps (- (/ 1 eps) 1))","(-.f64 #s(literal 1 binary64) eps)","eps","(* eps (+ 1 (/ 1 eps)))","(+.f64 #s(literal 1 binary64) eps)","(+ (log -1) (* -1 (/ (+ 2 (+ (/ 2/5 (pow eps 4)) (* 2/3 (/ 1 (pow eps 2))))) eps)))","(-.f64 (/.f64 #s(literal -2 binary64) eps) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps)) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (log.f64 #s(literal -1 binary64))))","(- (* -1 (/ (- (* 2 (/ 1 eps)) 2) eps)) 1)","(-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) eps) #s(literal 2 binary64)) eps))","(- (* -1 (/ (- (* -1 (/ (- (* 2 (/ 1 eps)) 2) eps)) 2) eps)) 1)","(-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) eps) #s(literal 2 binary64)) eps)) eps))","(* -1 (* eps (- 1 (/ 1 eps))))","(-.f64 #s(literal 1 binary64) eps)"]],"stop":[["iter limit",1],["node limit",1]],"time":209.11181640625,"type":"simplify"},{"count":[[4,304]],"egraph":[[0,10104,8,0.041342223],[3,4567,8,0.034513176],[2,328,21,0.011883686],[1,44,21,0.001228611],[0,10,21,0.00069066],[0,6,21,9.4516e-5]],"inputs":[["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))","(-.f64 #s(literal 1 binary64) eps)","(+.f64 #s(literal 1 binary64) eps)"]],"memory":[[1359296,33920064]],"outputs":[["#s(literal 0 binary64)","#s(literal 1 binary64)","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 eps eps eps) #s(literal 2 binary64)))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 eps eps eps) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 eps eps eps) (-.f64 (fma.f64 eps eps eps) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(*.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))","(*.f64 (fma.f64 eps eps #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) eps) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))))","(*.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (pow.f64 (-.f64 #s(literal -1 binary64) eps) #s(literal -1 binary64)))","(*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) eps))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (exp.f64 (neg.f64 (log1p.f64 eps))))","(*.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) eps))","(pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) eps) (fma.f64 eps eps #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) #s(literal -1 binary64))","(pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 1 binary64))","(/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) eps))","(/.f64 (*.f64 (+.f64 (pow.f64 eps #s(literal 9 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 eps #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (exp.f64 (neg.f64 (log1p.f64 eps)))) (+.f64 (fma.f64 eps eps (pow.f64 eps #s(literal 4 binary64))) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 4 binary64))) (exp.f64 (neg.f64 (log1p.f64 eps)))) (fma.f64 eps eps #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 9 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 eps #s(literal 3 binary64))))","(/.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 eps eps eps) #s(literal 2 binary64)))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (+.f64 (pow.f64 (fma.f64 eps eps eps) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 eps eps eps) (-.f64 (fma.f64 eps eps eps) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))) #s(literal 2 binary64))) (+.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal -2 binary64)) (pow.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps))) #s(literal 2 binary64))) (+.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -3 binary64)) (*.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -3 binary64)))) (+.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal -3 binary64)) (pow.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps))) #s(literal 3 binary64))) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal -2 binary64)) (+.f64 (pow.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))))","(/.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))","(/.f64 (neg.f64 (fma.f64 eps eps #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) eps))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps))) (-.f64 #s(literal 1 binary64) eps))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 eps #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (fma.f64 eps eps (pow.f64 eps #s(literal 4 binary64))) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) eps)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 4 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 eps eps #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) eps)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 eps eps #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) eps)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 eps eps (pow.f64 eps #s(literal 4 binary64))) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) eps)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) eps))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (fma.f64 eps eps #s(literal -1 binary64))) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) eps)))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 eps eps #s(literal -1 binary64))) (-.f64 #s(literal -1 binary64) eps))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 eps eps eps) #s(literal 2 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (+.f64 (pow.f64 (fma.f64 eps eps eps) #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (fma.f64 eps eps eps) (-.f64 (fma.f64 eps eps eps) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))) #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (+.f64 #s(literal -1 binary64) (*.f64 eps eps))) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) eps)))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))))","(/.f64 (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 3 binary64)))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) (*.f64 eps eps))) (-.f64 #s(literal -1 binary64) eps))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) eps))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (-.f64 #s(literal -1 binary64) eps) (*.f64 (-.f64 #s(literal -1 binary64) eps) (*.f64 eps eps))) (*.f64 (-.f64 #s(literal -1 binary64) eps) (-.f64 #s(literal 1 binary64) eps)))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) eps) (*.f64 eps (fma.f64 eps eps eps))) (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)))","(/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 3 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)))","(/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 eps eps #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 (fma.f64 eps eps (pow.f64 eps #s(literal 4 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 (fma.f64 eps eps #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) eps))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 9 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 (+.f64 (pow.f64 eps #s(literal 9 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (-.f64 #s(literal -1 binary64) eps))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))) (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))) (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) eps) #s(literal -1 binary64)))","(/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) eps))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (neg.f64 (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal -1 binary64) eps) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1 binary64) eps) (fma.f64 eps eps #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 eps))))","(neg.f64 (-.f64 #s(literal -1 binary64) eps))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 eps eps eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (neg.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 (fma.f64 eps eps eps) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (fma.f64 eps eps eps) (-.f64 (fma.f64 eps eps eps) #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))))","(fma.f64 (/.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64)))) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (/.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 9 binary64)))) (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 eps #s(literal 3 binary64))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (pow.f64 (fma.f64 eps eps #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) eps) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 4 binary64)))) (fma.f64 eps eps #s(literal 1 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) eps) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (/.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (+.f64 (pow.f64 eps #s(literal 9 binary64)) #s(literal 1 binary64))) (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 eps #s(literal 3 binary64))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64)))) (+.f64 (fma.f64 eps eps (pow.f64 eps #s(literal 4 binary64))) #s(literal 1 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal -1/2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal -1/2 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (exp.f64 (*.f64 (-.f64 (*.f64 #s(literal 2 binary64) (log1p.f64 eps)) (log1p.f64 (pow.f64 eps #s(literal 3 binary64)))) #s(literal -1 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) eps) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps eps #s(literal 1 binary64)) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) eps))","(fma.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps eps eps) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) #s(literal 1 binary64)))","(fma.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) #s(literal 1 binary64) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps eps eps)))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (fma.f64 eps eps #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 eps (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) eps) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) eps) #s(literal -1 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 #s(literal -1 binary64) (neg.f64 eps) #s(literal 1 binary64))","(fma.f64 #s(literal -1 binary64) eps #s(literal 1 binary64))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (neg.f64 eps) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (fma.f64 eps eps eps) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))))","(fma.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) #s(literal 1 binary64) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (-.f64 #s(literal 1 binary64) eps) (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal -2 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 eps #s(literal -1 binary64) #s(literal 1 binary64))","(fma.f64 eps #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (fma.f64 eps eps eps) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))))","(fma.f64 #s(literal 1 binary64) (neg.f64 eps) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 eps))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 #s(literal 1 binary64) eps #s(literal 1 binary64))","(-.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) #s(literal 1 binary64)) (/.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps))) #s(literal 1 binary64)))","(-.f64 (/.f64 (*.f64 eps eps) (-.f64 #s(literal -1 binary64) eps)) (pow.f64 (-.f64 #s(literal -1 binary64) eps) #s(literal -1 binary64)))","(-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(-.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps))))","(-.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) eps))","(-.f64 #s(literal 1 binary64) (neg.f64 eps))","(-.f64 #s(literal 1 binary64) eps)","(exp.f64 (*.f64 (neg.f64 (log1p.f64 eps)) #s(literal -1 binary64)))","(exp.f64 (log1p.f64 eps))","(+.f64 (*.f64 (fma.f64 eps eps #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))) (*.f64 eps (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))))","(+.f64 (*.f64 (fma.f64 eps eps eps) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))) (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))))","(+.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))) (*.f64 (fma.f64 eps eps eps) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))))","(+.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps eps #s(literal 1 binary64))) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) eps))","(+.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps eps eps)) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps eps eps)))","(+.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))))","(+.f64 (neg.f64 eps) #s(literal 1 binary64))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(+.f64 eps #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (neg.f64 eps))","(+.f64 #s(literal 1 binary64) eps)","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 eps eps eps) #s(literal 2 binary64)))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 eps eps eps) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 eps eps eps) (-.f64 (fma.f64 eps eps eps) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(*.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))","(*.f64 (fma.f64 eps eps #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) eps) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))))","(*.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (pow.f64 (-.f64 #s(literal -1 binary64) eps) #s(literal -1 binary64)))","(*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) eps))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (exp.f64 (neg.f64 (log1p.f64 eps))))","(*.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) eps))","(pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) eps) (fma.f64 eps eps #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) #s(literal -1 binary64))","(pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 1 binary64))","(/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) eps))","(/.f64 (*.f64 (+.f64 (pow.f64 eps #s(literal 9 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 eps #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (exp.f64 (neg.f64 (log1p.f64 eps)))) (+.f64 (fma.f64 eps eps (pow.f64 eps #s(literal 4 binary64))) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 4 binary64))) (exp.f64 (neg.f64 (log1p.f64 eps)))) (fma.f64 eps eps #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 9 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 eps #s(literal 3 binary64))))","(/.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 eps eps eps) #s(literal 2 binary64)))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (+.f64 (pow.f64 (fma.f64 eps eps eps) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 eps eps eps) (-.f64 (fma.f64 eps eps eps) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))) #s(literal 2 binary64))) (+.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal -2 binary64)) (pow.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps))) #s(literal 2 binary64))) (+.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -3 binary64)) (*.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -3 binary64)))) (+.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal -3 binary64)) (pow.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps))) #s(literal 3 binary64))) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal -2 binary64)) (+.f64 (pow.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))))","(/.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))","(/.f64 (neg.f64 (fma.f64 eps eps #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) eps))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps))) (-.f64 #s(literal 1 binary64) eps))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 eps #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (fma.f64 eps eps (pow.f64 eps #s(literal 4 binary64))) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) eps)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 4 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 eps eps #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) eps)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 eps eps #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) eps)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 eps eps (pow.f64 eps #s(literal 4 binary64))) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) eps)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) eps))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (fma.f64 eps eps #s(literal -1 binary64))) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) eps)))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 eps eps #s(literal -1 binary64))) (-.f64 #s(literal -1 binary64) eps))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 eps eps eps) #s(literal 2 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (+.f64 (pow.f64 (fma.f64 eps eps eps) #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (fma.f64 eps eps eps) (-.f64 (fma.f64 eps eps eps) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))) #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (+.f64 #s(literal -1 binary64) (*.f64 eps eps))) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) eps)))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))))","(/.f64 (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 3 binary64)))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) (*.f64 eps eps))) (-.f64 #s(literal -1 binary64) eps))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) eps))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (-.f64 #s(literal -1 binary64) eps) (*.f64 (-.f64 #s(literal -1 binary64) eps) (*.f64 eps eps))) (*.f64 (-.f64 #s(literal -1 binary64) eps) (-.f64 #s(literal 1 binary64) eps)))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) eps) (*.f64 eps (fma.f64 eps eps eps))) (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)))","(/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 3 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)))","(/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 eps eps #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 (fma.f64 eps eps (pow.f64 eps #s(literal 4 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 (fma.f64 eps eps #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) eps))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 9 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 (+.f64 (pow.f64 eps #s(literal 9 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (-.f64 #s(literal -1 binary64) eps))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))) (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))) (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) eps) #s(literal -1 binary64)))","(/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) eps))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (neg.f64 (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal -1 binary64) eps) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1 binary64) eps) (fma.f64 eps eps #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 eps))))","(neg.f64 (-.f64 #s(literal -1 binary64) eps))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 eps eps eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (neg.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 (fma.f64 eps eps eps) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (fma.f64 eps eps eps) (-.f64 (fma.f64 eps eps eps) #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))))","(fma.f64 (/.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64)))) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (/.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 9 binary64)))) (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 eps #s(literal 3 binary64))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (pow.f64 (fma.f64 eps eps #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) eps) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 4 binary64)))) (fma.f64 eps eps #s(literal 1 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) eps) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (/.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (+.f64 (pow.f64 eps #s(literal 9 binary64)) #s(literal 1 binary64))) (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 eps #s(literal 3 binary64))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64)))) (+.f64 (fma.f64 eps eps (pow.f64 eps #s(literal 4 binary64))) #s(literal 1 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal -1/2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal -1/2 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (exp.f64 (*.f64 (-.f64 (*.f64 #s(literal 2 binary64) (log1p.f64 eps)) (log1p.f64 (pow.f64 eps #s(literal 3 binary64)))) #s(literal -1 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) eps) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps eps #s(literal 1 binary64)) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) eps))","(fma.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps eps eps) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) #s(literal 1 binary64)))","(fma.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) #s(literal 1 binary64) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps eps eps)))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (fma.f64 eps eps #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 eps (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) eps) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) eps) #s(literal -1 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 #s(literal -1 binary64) (neg.f64 eps) #s(literal 1 binary64))","(fma.f64 #s(literal -1 binary64) eps #s(literal 1 binary64))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (neg.f64 eps) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (fma.f64 eps eps eps) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))))","(fma.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) #s(literal 1 binary64) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (-.f64 #s(literal 1 binary64) eps) (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal -2 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 eps #s(literal -1 binary64) #s(literal 1 binary64))","(fma.f64 eps #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (fma.f64 eps eps eps) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))))","(fma.f64 #s(literal 1 binary64) (neg.f64 eps) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 eps))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 #s(literal 1 binary64) eps #s(literal 1 binary64))","(-.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) #s(literal 1 binary64)) (/.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps))) #s(literal 1 binary64)))","(-.f64 (/.f64 (*.f64 eps eps) (-.f64 #s(literal -1 binary64) eps)) (pow.f64 (-.f64 #s(literal -1 binary64) eps) #s(literal -1 binary64)))","(-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(-.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps))))","(-.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) eps))","(-.f64 #s(literal 1 binary64) (neg.f64 eps))","(-.f64 #s(literal 1 binary64) eps)","(exp.f64 (*.f64 (neg.f64 (log1p.f64 eps)) #s(literal -1 binary64)))","(exp.f64 (log1p.f64 eps))","(+.f64 (*.f64 (fma.f64 eps eps #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))) (*.f64 eps (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))))","(+.f64 (*.f64 (fma.f64 eps eps eps) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))) (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))))","(+.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))) (*.f64 (fma.f64 eps eps eps) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))))","(+.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps eps #s(literal 1 binary64))) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) eps))","(+.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps eps eps)) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps eps eps)))","(+.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))))","(+.f64 (neg.f64 eps) #s(literal 1 binary64))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(+.f64 eps #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (neg.f64 eps))","(+.f64 #s(literal 1 binary64) eps)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":193.74609375,"type":"rewrite"},{"compiler":[[3731,709]],"memory":[[-2289888,17653744]],"time":42.14990234375,"type":"eval"},{"alts":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","next",0.021816259768442016,"binary64"],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","next",0.06442716844333948,"binary64"],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","next",0.17509604621564734,"binary64"],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","next",0.647823368674164,"binary64"],["#s(literal 0 binary64)","next",60.57221134767748,"binary64"]],"compiler":[[27,16],[22,14],[17,12],[12,9],[1,2],[27,16],[22,14],[17,12],[12,9],[1,2]],"count":[[173,5]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[172,5],"picked":[1,0]}],"memory":[[-260000,8100048]],"min-error":[[0.021816259768442016,"binary64"]],"time":5.42822265625,"type":"prune"},{"egraph":[[0,8120,200,0.112998396],[19,6978,200,0.037896106],[18,6978,200,0.039478805],[17,6978,200,0.040368094],[16,6902,200,0.043329245],[15,6880,200,0.028055569],[14,6880,200,0.015166218],[13,6837,200,0.015253141],[12,6195,200,0.022841164],[11,4315,200,0.023664583],[10,2240,200,0.012898979],[9,2018,200,0.011925133],[8,1651,200,0.009909324],[7,1272,200,0.00832642],[6,1029,200,0.004220138],[5,976,200,0.003202481],[4,662,200,0.003280254],[3,294,200,0.002046651],[2,138,200,0.001048266],[1,78,200,0.000586649],[0,43,200,0.000471708],[0,26,200,0.000270795]],"inputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","(fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64))","(fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))","(fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64))","#s(literal -2/7 binary64)","(*.f64 eps eps)","eps","#s(literal -2/5 binary64)","#s(literal -2/3 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","(*.f64 #s(literal -2 binary64) eps)","#s(literal -2 binary64)","eps","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps)","(fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64))","(*.f64 eps eps)","eps","#s(literal -2/3 binary64)","#s(literal -2 binary64)","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","(*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","(fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64))","(fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64))","#s(literal -2/5 binary64)","(*.f64 eps eps)","eps","#s(literal -2/3 binary64)","#s(literal -2 binary64)"]],"locations":[["(fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64))","cost-diff",0],["(fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64))","cost-diff",0],["(*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","cost-diff",0],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","cost-diff",0],["(*.f64 eps eps)","cost-diff",0],["(fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64))","cost-diff",0],["(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps)","cost-diff",0],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","cost-diff",0],["(*.f64 #s(literal -2 binary64) eps)","cost-diff",0],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","cost-diff",0],["(fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))","cost-diff",0],["(fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64))","cost-diff",0],["(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","cost-diff",0],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","cost-diff",0]],"memory":[[7640896,51812128]],"method":["egg-herbie"],"outputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","(fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64))","(fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64))","(fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))","(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))","(fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64))","(fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64))","#s(literal -2/7 binary64)","(*.f64 eps eps)","eps","#s(literal -2/5 binary64)","#s(literal -2/3 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","(*.f64 #s(literal -2 binary64) eps)","#s(literal -2 binary64)","eps","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64)) eps))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps)","(*.f64 (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64)) eps)","(fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64))","(fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64))","(*.f64 eps eps)","eps","#s(literal -2/3 binary64)","#s(literal -2 binary64)","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","(*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","(fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64))","(fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64))","#s(literal -2/5 binary64)","(*.f64 eps eps)","eps","#s(literal -2/3 binary64)","#s(literal -2 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":580.89794921875,"type":"simplify"},{"compiler":[[172,30]],"locations":[["(*.f64 eps eps)","accuracy",0.0],["(fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64))","accuracy",0.0078125],["(*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","accuracy",0.01953125],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","accuracy",0.048801190986480995],["(fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64))","accuracy",0.0],["(*.f64 eps eps)","accuracy",0.0],["(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps)","accuracy",0.0078125],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","accuracy",0.16728354621564734],["(*.f64 #s(literal -2 binary64) eps)","accuracy",0.0],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","accuracy",0.647823368674164],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","accuracy",0.00390625],["(fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))","accuracy",0.01171875],["(fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64))","accuracy",0.015625],["(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","accuracy",0.01953125]],"memory":[[-3309824,47570976]],"mixsample":[[1.930908203125,"ival-div",0],[15.062255859375,"adjust",800],[2.227783203125,"ival-div",400],[0.5869140625,"ival-sub",1600],[0.1376953125,"ival-assert",0],[0.98046875,"ival-div",1600],[2.046142578125,"ival-sub",0],[18.121337890625,"const",0],[2.488037109375,"ival-sub",400],[7.411376953125,"adjust",2000],[14.648681640625,"ival-add",0],[29.779052734375,"ival-mult",0],[0.373291015625,"ival-add",1600],[1.27392578125,"ival-add",400],[0.242919921875,"ival-true",0],[44.055908203125,"ival-log",0],[0.46142578125,"exact",0]],"outcomes":[[87.999267578125,1,"valid",151],[85.775634765625,2,"valid",94],[2.896240234375,0,"valid",11]],"time":205.184814453125,"type":"localize"},{"count":[[15,47]],"inputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","(fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64))","(fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","(*.f64 #s(literal -2 binary64) eps)","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps)","(fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64))","(*.f64 eps eps)","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","(*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","(fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64))","(fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64))","(fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64))"]],"memory":[[4198016,4198016]],"outputs":[["(* -2 eps)","(* eps (- (* -2/3 (pow eps 2)) 2))","(* eps (- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2))","(* eps (- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2))","-2","(- (* -2/3 (pow eps 2)) 2)","(- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2)","(- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2)","-2/3","(- (* -2/5 (pow eps 2)) 2/3)","(- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)","(pow eps 2)","-2/5","(- (* -2/7 (pow eps 2)) 2/5)","(log -1)","(- (log -1) (* 2 (/ 1 eps)))","(+ (log -1) (* -1 (/ (+ 2 (* 2/3 (/ 1 (pow eps 2)))) eps)))","(- (+ (log -1) (* -1 (/ (+ 2/3 (* 2/5 (/ 1 (pow eps 2)))) (pow eps 3)))) (* 2 (/ 1 eps)))","(* -2/7 (pow eps 7))","(* -1 (* (pow eps 7) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(* (pow eps 7) (- (* -1 (/ (+ 2/5 (* 2/3 (/ 1 (pow eps 2)))) (pow eps 2))) 2/7))","(* (pow eps 7) (- (* -1 (/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 4))) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(* -2/7 (pow eps 6))","(* -1 (* (pow eps 6) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(* (pow eps 6) (- (* -1 (/ (+ 2/5 (* 2/3 (/ 1 (pow eps 2)))) (pow eps 2))) 2/7))","(* (pow eps 6) (- (* -1 (/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 4))) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(* -2/7 (pow eps 4))","(* -1 (* (pow eps 4) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(* (pow eps 4) (- (* -1 (/ (+ 2/5 (* 2/3 (/ 1 (pow eps 2)))) (pow eps 2))) 2/7))","(* -2/3 (pow eps 3))","(* -1 (* (pow eps 3) (+ 2/3 (* 2 (/ 1 (pow eps 2))))))","(* -2/3 (pow eps 2))","(* -1 (* (pow eps 2) (+ 2/3 (* 2 (/ 1 (pow eps 2))))))","(* -2/5 (pow eps 5))","(* -1 (* (pow eps 5) (+ 2/5 (* 2/3 (/ 1 (pow eps 2))))))","(* (pow eps 5) (- (* -1 (/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 2))) 2/5))","(* -2/5 (pow eps 4))","(* -1 (* (pow eps 4) (+ 2/5 (* 2/3 (/ 1 (pow eps 2))))))","(* (pow eps 4) (- (* -1 (/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 2))) 2/5))","(* -2/5 (pow eps 2))","(* -1 (* (pow eps 2) (+ 2/5 (* 2/3 (/ 1 (pow eps 2))))))","(* -2/7 (pow eps 2))","(* -1 (* (pow eps 2) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(+ (log -1) (* -1 (/ (+ 2 (+ (/ 2/5 (pow eps 4)) (* 2/3 (/ 1 (pow eps 2))))) eps)))","(* -1 (* (pow eps 7) (+ 2/7 (+ (/ 2/3 (pow eps 4)) (* 2/5 (/ 1 (pow eps 2)))))))","(* -1 (* (pow eps 7) (+ 2/7 (+ (/ 2/3 (pow eps 4)) (+ (* 2/5 (/ 1 (pow eps 2))) (* 2 (/ 1 (pow eps 6))))))))","(* -1 (* (pow eps 5) (+ 2/5 (+ (* 2/3 (/ 1 (pow eps 2))) (/ 2 (pow eps 4))))))"]],"series":[[2.380859375,"((log (/ (- 1 eps) (+ 1 eps))) (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (log (/ (- 1 eps) (+ 1 eps))) (* -2 eps) (log (/ (- 1 eps) (+ 1 eps))) (* (+ (* (* eps eps) -2/3) -2) eps) (+ (* (* eps eps) -2/3) -2) (* eps eps) (log (/ (- 1 eps) (+ 1 eps))) (* (+ (* (+ (* -2/5 (* eps eps)) -2/3) (* eps eps)) -2) eps) (+ (* (+ (* -2/5 (* eps eps)) -2/3) (* eps eps)) -2) (+ (* -2/5 (* eps eps)) -2/3) (+ (* -2/7 (* eps eps)) -2/5))","eps","-inf"],[3.85009765625,"((log (/ (- 1 eps) (+ 1 eps))) (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (log (/ (- 1 eps) (+ 1 eps))) (* -2 eps) (log (/ (- 1 eps) (+ 1 eps))) (* (+ (* (* eps eps) -2/3) -2) eps) (+ (* (* eps eps) -2/3) -2) (* eps eps) (log (/ (- 1 eps) (+ 1 eps))) (* (+ (* (+ (* -2/5 (* eps eps)) -2/3) (* eps eps)) -2) eps) (+ (* (+ (* -2/5 (* eps eps)) -2/3) (* eps eps)) -2) (+ (* -2/5 (* eps eps)) -2/3) (+ (* -2/7 (* eps eps)) -2/5))","eps","inf"],[2.01904296875,"((log (/ (- 1 eps) (+ 1 eps))) (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (log (/ (- 1 eps) (+ 1 eps))) (* -2 eps) (log (/ (- 1 eps) (+ 1 eps))) (* (+ (* (* eps eps) -2/3) -2) eps) (+ (* (* eps eps) -2/3) -2) (* eps eps) (log (/ (- 1 eps) (+ 1 eps))) (* (+ (* (+ (* -2/5 (* eps eps)) -2/3) (* eps eps)) -2) eps) (+ (* (+ (* -2/5 (* eps eps)) -2/3) (* eps eps)) -2) (+ (* -2/5 (* eps eps)) -2/3) (+ (* -2/7 (* eps eps)) -2/5))","eps","0"]],"time":9.453125,"type":"series"},{"count":[[47,47]],"egraph":[[0,8242,474,0.078599556],[4,7685,494,0.017440442],[3,3580,494,0.026505818],[2,1244,497,0.013176271],[1,353,509,0.004324305],[0,121,512,0.001222025]],"inputs":[["(* -2 eps)","(* eps (- (* -2/3 (pow eps 2)) 2))","(* eps (- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2))","(* eps (- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2))","-2","(- (* -2/3 (pow eps 2)) 2)","(- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2)","(- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2)","-2/3","(- (* -2/5 (pow eps 2)) 2/3)","(- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)","(pow eps 2)","-2/5","(- (* -2/7 (pow eps 2)) 2/5)","(log -1)","(- (log -1) (* 2 (/ 1 eps)))","(+ (log -1) (* -1 (/ (+ 2 (* 2/3 (/ 1 (pow eps 2)))) eps)))","(- (+ (log -1) (* -1 (/ (+ 2/3 (* 2/5 (/ 1 (pow eps 2)))) (pow eps 3)))) (* 2 (/ 1 eps)))","(* -2/7 (pow eps 7))","(* -1 (* (pow eps 7) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(* (pow eps 7) (- (* -1 (/ (+ 2/5 (* 2/3 (/ 1 (pow eps 2)))) (pow eps 2))) 2/7))","(* (pow eps 7) (- (* -1 (/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 4))) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(* -2/7 (pow eps 6))","(* -1 (* (pow eps 6) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(* (pow eps 6) (- (* -1 (/ (+ 2/5 (* 2/3 (/ 1 (pow eps 2)))) (pow eps 2))) 2/7))","(* (pow eps 6) (- (* -1 (/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 4))) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(* -2/7 (pow eps 4))","(* -1 (* (pow eps 4) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(* (pow eps 4) (- (* -1 (/ (+ 2/5 (* 2/3 (/ 1 (pow eps 2)))) (pow eps 2))) 2/7))","(* -2/3 (pow eps 3))","(* -1 (* (pow eps 3) (+ 2/3 (* 2 (/ 1 (pow eps 2))))))","(* -2/3 (pow eps 2))","(* -1 (* (pow eps 2) (+ 2/3 (* 2 (/ 1 (pow eps 2))))))","(* -2/5 (pow eps 5))","(* -1 (* (pow eps 5) (+ 2/5 (* 2/3 (/ 1 (pow eps 2))))))","(* (pow eps 5) (- (* -1 (/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 2))) 2/5))","(* -2/5 (pow eps 4))","(* -1 (* (pow eps 4) (+ 2/5 (* 2/3 (/ 1 (pow eps 2))))))","(* (pow eps 4) (- (* -1 (/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 2))) 2/5))","(* -2/5 (pow eps 2))","(* -1 (* (pow eps 2) (+ 2/5 (* 2/3 (/ 1 (pow eps 2))))))","(* -2/7 (pow eps 2))","(* -1 (* (pow eps 2) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(+ (log -1) (* -1 (/ (+ 2 (+ (/ 2/5 (pow eps 4)) (* 2/3 (/ 1 (pow eps 2))))) eps)))","(* -1 (* (pow eps 7) (+ 2/7 (+ (/ 2/3 (pow eps 4)) (* 2/5 (/ 1 (pow eps 2)))))))","(* -1 (* (pow eps 7) (+ 2/7 (+ (/ 2/3 (pow eps 4)) (+ (* 2/5 (/ 1 (pow eps 2))) (* 2 (/ 1 (pow eps 6))))))))","(* -1 (* (pow eps 5) (+ 2/5 (+ (* 2/3 (/ 1 (pow eps 2))) (/ 2 (pow eps 4))))))"]],"memory":[[1565536,36636512]],"method":["egg-herbie"],"outputs":[["(* -2 eps)","(*.f64 #s(literal -2 binary64) eps)","(* eps (- (* -2/3 (pow eps 2)) 2))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps)","(* eps (- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2))","(*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","(* eps (- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","-2","#s(literal -2 binary64)","(- (* -2/3 (pow eps 2)) 2)","(fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64))","(- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2)","(fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64))","(- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2)","(fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64))","-2/3","#s(literal -2/3 binary64)","(- (* -2/5 (pow eps 2)) 2/3)","(fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64))","(- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)","(fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))","(pow eps 2)","(*.f64 eps eps)","-2/5","#s(literal -2/5 binary64)","(- (* -2/7 (pow eps 2)) 2/5)","(fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64))","(log -1)","(log.f64 #s(literal -1 binary64))","(- (log -1) (* 2 (/ 1 eps)))","(-.f64 (log.f64 #s(literal -1 binary64)) (/.f64 #s(literal 2 binary64) eps))","(+ (log -1) (* -1 (/ (+ 2 (* 2/3 (/ 1 (pow eps 2)))) eps)))","(-.f64 (log.f64 #s(literal -1 binary64)) (/.f64 (+.f64 (/.f64 #s(literal 2/3 binary64) (*.f64 eps eps)) #s(literal 2 binary64)) eps))","(- (+ (log -1) (* -1 (/ (+ 2/3 (* 2/5 (/ 1 (pow eps 2)))) (pow eps 3)))) (* 2 (/ 1 eps)))","(-.f64 (/.f64 #s(literal -2 binary64) eps) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps)) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (log.f64 #s(literal -1 binary64))))","(* -2/7 (pow eps 7))","(*.f64 (pow.f64 eps #s(literal 7 binary64)) #s(literal -2/7 binary64))","(* -1 (* (pow eps 7) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(*.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (pow.f64 eps #s(literal 7 binary64)))","(* (pow eps 7) (- (* -1 (/ (+ 2/5 (* 2/3 (/ 1 (pow eps 2)))) (pow eps 2))) 2/7))","(*.f64 (-.f64 (/.f64 (/.f64 (-.f64 #s(literal -2/5 binary64) (/.f64 #s(literal 2/3 binary64) (*.f64 eps eps))) eps) eps) #s(literal 2/7 binary64)) (pow.f64 eps #s(literal 7 binary64)))","(* (pow eps 7) (- (* -1 (/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 4))) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(*.f64 (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal 2/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (pow.f64 eps #s(literal 7 binary64)))","(* -2/7 (pow eps 6))","(*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -2/7 binary64))","(* -1 (* (pow eps 6) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(*.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (pow.f64 eps #s(literal 6 binary64)))","(* (pow eps 6) (- (* -1 (/ (+ 2/5 (* 2/3 (/ 1 (pow eps 2)))) (pow eps 2))) 2/7))","(*.f64 (pow.f64 eps #s(literal 6 binary64)) (-.f64 (/.f64 (/.f64 (-.f64 #s(literal -2/5 binary64) (/.f64 #s(literal 2/3 binary64) (*.f64 eps eps))) eps) eps) #s(literal 2/7 binary64)))","(* (pow eps 6) (- (* -1 (/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 4))) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(*.f64 (pow.f64 eps #s(literal 6 binary64)) (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal 2/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))))","(* -2/7 (pow eps 4))","(*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal -2/7 binary64))","(* -1 (* (pow eps 4) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(*.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (- (* -1 (/ (+ 2/5 (* 2/3 (/ 1 (pow eps 2)))) (pow eps 2))) 2/7))","(*.f64 (pow.f64 eps #s(literal 4 binary64)) (-.f64 (/.f64 (/.f64 (-.f64 #s(literal -2/5 binary64) (/.f64 #s(literal 2/3 binary64) (*.f64 eps eps))) eps) eps) #s(literal 2/7 binary64)))","(* -2/3 (pow eps 3))","(*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64))","(* -1 (* (pow eps 3) (+ 2/3 (* 2 (/ 1 (pow eps 2))))))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps)","(* -2/3 (pow eps 2))","(*.f64 (*.f64 eps eps) #s(literal -2/3 binary64))","(* -1 (* (pow eps 2) (+ 2/3 (* 2 (/ 1 (pow eps 2))))))","(fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64))","(* -2/5 (pow eps 5))","(*.f64 (pow.f64 eps #s(literal 5 binary64)) #s(literal -2/5 binary64))","(* -1 (* (pow eps 5) (+ 2/5 (* 2/3 (/ 1 (pow eps 2))))))","(*.f64 (-.f64 #s(literal -2/5 binary64) (/.f64 #s(literal 2/3 binary64) (*.f64 eps eps))) (pow.f64 eps #s(literal 5 binary64)))","(* (pow eps 5) (- (* -1 (/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 2))) 2/5))","(*.f64 (-.f64 (/.f64 (/.f64 (-.f64 #s(literal -2/3 binary64) (/.f64 (/.f64 #s(literal 2 binary64) eps) eps)) eps) eps) #s(literal 2/5 binary64)) (pow.f64 eps #s(literal 5 binary64)))","(* -2/5 (pow eps 4))","(*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal -2/5 binary64))","(* -1 (* (pow eps 4) (+ 2/5 (* 2/3 (/ 1 (pow eps 2))))))","(*.f64 (-.f64 #s(literal -2/5 binary64) (/.f64 #s(literal 2/3 binary64) (*.f64 eps eps))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (- (* -1 (/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 2))) 2/5))","(*.f64 (-.f64 (/.f64 (/.f64 (-.f64 #s(literal -2/3 binary64) (/.f64 (/.f64 #s(literal 2 binary64) eps) eps)) eps) eps) #s(literal 2/5 binary64)) (pow.f64 eps #s(literal 4 binary64)))","(* -2/5 (pow eps 2))","(*.f64 #s(literal -2/5 binary64) (*.f64 eps eps))","(* -1 (* (pow eps 2) (+ 2/5 (* 2/3 (/ 1 (pow eps 2))))))","(fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64))","(* -2/7 (pow eps 2))","(*.f64 #s(literal -2/7 binary64) (*.f64 eps eps))","(* -1 (* (pow eps 2) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64))","(+ (log -1) (* -1 (/ (+ 2 (+ (/ 2/5 (pow eps 4)) (* 2/3 (/ 1 (pow eps 2))))) eps)))","(-.f64 (log.f64 #s(literal -1 binary64)) (/.f64 (+.f64 (+.f64 (/.f64 #s(literal 2/5 binary64) (pow.f64 eps #s(literal 4 binary64))) #s(literal 2 binary64)) (/.f64 #s(literal 2/3 binary64) (*.f64 eps eps))) eps))","(* -1 (* (pow eps 7) (+ 2/7 (+ (/ 2/3 (pow eps 4)) (* 2/5 (/ 1 (pow eps 2)))))))","(*.f64 (-.f64 (/.f64 #s(literal -2/3 binary64) (pow.f64 eps #s(literal 4 binary64))) (-.f64 (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps)) #s(literal -2/7 binary64))) (pow.f64 eps #s(literal 7 binary64)))","(* -1 (* (pow eps 7) (+ 2/7 (+ (/ 2/3 (pow eps 4)) (+ (* 2/5 (/ 1 (pow eps 2))) (* 2 (/ 1 (pow eps 6))))))))","(*.f64 (-.f64 (/.f64 #s(literal -2 binary64) (pow.f64 eps #s(literal 6 binary64))) (+.f64 (+.f64 (/.f64 #s(literal 2/3 binary64) (pow.f64 eps #s(literal 4 binary64))) #s(literal 2/7 binary64)) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps)))) (pow.f64 eps #s(literal 7 binary64)))","(* -1 (* (pow eps 5) (+ 2/5 (+ (* 2/3 (/ 1 (pow eps 2))) (/ 2 (pow eps 4))))))","(*.f64 (-.f64 (+.f64 (/.f64 #s(literal -2 binary64) (pow.f64 eps #s(literal 4 binary64))) #s(literal -2/5 binary64)) (/.f64 #s(literal 2/3 binary64) (*.f64 eps eps))) (pow.f64 eps #s(literal 5 binary64)))"]],"stop":[["iter limit",1],["node limit",1]],"time":317.2890625,"type":"simplify"},{"count":[[15,361]],"egraph":[[0,8283,171,0.07629309],[2,1283,179,0.033681772],[1,177,179,0.00701309],[0,42,179,0.001880934],[0,25,179,0.000274623]],"inputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","(fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64))","(fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","(*.f64 #s(literal -2 binary64) eps)","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps)","(fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64))","(*.f64 eps eps)","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","(*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","(fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64))","(fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64))","(fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64))"]],"memory":[[-2978384,54471328]],"outputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","(*.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)) eps) (pow.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)) eps) (pow.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps))) #s(literal -1 binary64)))","(*.f64 (*.f64 eps (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 eps (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64))) (pow.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","(*.f64 eps (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps) (-.f64 (*.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 #s(literal -2 binary64) eps)) (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps) (*.f64 #s(literal -2 binary64) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 eps (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 eps (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps)) (*.f64 eps (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps)) (-.f64 (*.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 #s(literal -2 binary64) eps)) (*.f64 (*.f64 eps (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps)) (*.f64 #s(literal -2 binary64) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 #s(literal -2 binary64) eps) (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps)) (*.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 eps (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps)) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 #s(literal -2 binary64) eps) (-.f64 (*.f64 (*.f64 eps (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps)) (*.f64 eps (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps))) (*.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 eps (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)) eps)) (neg.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)) eps)) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps)))))","(/.f64 (neg.f64 (*.f64 eps (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 eps (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps)))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)) eps) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)) eps) (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps))))","(/.f64 (*.f64 eps (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64))) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)))","(/.f64 (*.f64 eps (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64))) (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps))))","(/.f64 eps (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)) (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)) eps)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps))) (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)) eps)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)) (*.f64 eps (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps))) (*.f64 eps (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)))))","(fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps))","(fma.f64 #s(literal -2 binary64) eps (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps))","(fma.f64 #s(literal -2 binary64) eps (*.f64 eps (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps)))","(fma.f64 eps (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) (*.f64 #s(literal -2 binary64) eps))","(fma.f64 eps #s(literal -2 binary64) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps))","(fma.f64 eps #s(literal -2 binary64) (*.f64 eps (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps)))","(+.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps) (*.f64 #s(literal -2 binary64) eps))","(+.f64 (*.f64 eps (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps)) (*.f64 #s(literal -2 binary64) eps))","(+.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps))","(+.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 eps (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps)))","(*.f64 (-.f64 #s(literal 4 binary64) (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -2 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps))))))","(*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 4 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps))))))","(*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)) (pow.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))) (/.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))) (fma.f64 (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))) (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))) (*.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))) (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 4 binary64) (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))))) (neg.f64 (-.f64 #s(literal -2 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)))) (neg.f64 (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) #s(literal 4 binary64)) #s(literal 16 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4 binary64)) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) #s(literal 6 binary64)) #s(literal 64 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) #s(literal 4 binary64)) (+.f64 #s(literal 16 binary64) (*.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) #s(literal 4 binary64)))) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) #s(literal 6 binary64)) #s(literal 64 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 8 binary64)) (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) #s(literal 9 binary64)) #s(literal -512 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) #s(literal 6 binary64)) (-.f64 #s(literal 64 binary64) (*.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal -2 binary64)) #s(literal 3 binary64))))) (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps)))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)) #s(literal 4 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))))","(/.f64 (-.f64 #s(literal 4 binary64) (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (-.f64 #s(literal -2 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64))) (neg.f64 (+.f64 #s(literal 4 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)) (+.f64 #s(literal 4 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps)))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)) (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -2 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps)) (-.f64 #s(literal 4 binary64) (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 4 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps)))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64))))","(fma.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/9 binary64)) (*.f64 eps eps)) (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64)) #s(literal -1 binary64)) #s(literal -2 binary64))","(fma.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64)) (*.f64 eps eps)) (pow.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) (*.f64 #s(literal -2/3 binary64) eps))) #s(literal -1 binary64)) #s(literal -2 binary64))","(fma.f64 (*.f64 (*.f64 eps eps) (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/9 binary64))) (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64)) #s(literal -1 binary64)) #s(literal -2 binary64))","(fma.f64 (*.f64 (*.f64 eps eps) (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64))) (pow.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) (*.f64 #s(literal -2/3 binary64) eps))) #s(literal -1 binary64)) #s(literal -2 binary64))","(fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps #s(literal -2 binary64))","(fma.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64))","(fma.f64 (*.f64 eps eps) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal -2 binary64))","(fma.f64 eps (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) #s(literal -2 binary64))","(-.f64 (/.f64 #s(literal 4 binary64) (-.f64 #s(literal -2 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps))) (/.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (-.f64 #s(literal -2 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps))))","(-.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))) (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))))","(+.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))) (neg.f64 (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)))))","(+.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) #s(literal -2 binary64))","(+.f64 #s(literal -2 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps))","(*.f64 (-.f64 #s(literal 4/9 binary64) (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -2/3 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/9 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) (*.f64 #s(literal -2/3 binary64) eps))))))","(*.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/9 binary64)) (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 4/9 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) (*.f64 #s(literal -2/3 binary64) eps))))))","(*.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64)) (pow.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) (*.f64 #s(literal -2/3 binary64) eps))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 4/9 binary64) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64))) (/.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64))) (fma.f64 (/.f64 #s(literal 4/9 binary64) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64))) (/.f64 #s(literal 4/9 binary64) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64))) (*.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64))) (/.f64 #s(literal 4/9 binary64) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 4/9 binary64) (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))))) (neg.f64 (-.f64 #s(literal -2/3 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/9 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64)))) (neg.f64 (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) (*.f64 #s(literal -2/3 binary64) eps))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps) #s(literal 4 binary64)) #s(literal 16/81 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps) #s(literal 6 binary64)) #s(literal 64/729 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps) #s(literal 4 binary64)) (+.f64 #s(literal 16/81 binary64) (*.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) #s(literal 4/9 binary64)))) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps) #s(literal 6 binary64)) #s(literal 64/729 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 8/27 binary64)) (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) (*.f64 #s(literal -2/3 binary64) eps)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps) #s(literal 9 binary64)) #s(literal -512/19683 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps) #s(literal 6 binary64)) (-.f64 #s(literal 64/729 binary64) (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 3 binary64)) (*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64))))) (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) (*.f64 #s(literal -2/3 binary64) eps)))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64))) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64)) #s(literal 4/9 binary64))) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64))))","(/.f64 (-.f64 #s(literal 4/9 binary64) (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (-.f64 #s(literal -2/3 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/9 binary64))) (neg.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64))) (neg.f64 (+.f64 #s(literal 4/9 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) (*.f64 #s(literal -2/3 binary64) eps))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) (*.f64 #s(literal -2/3 binary64) eps)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/9 binary64)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64)))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64)) (+.f64 #s(literal 4/9 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) (*.f64 #s(literal -2/3 binary64) eps)))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64)) (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) (*.f64 #s(literal -2/3 binary64) eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -2/3 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps)) (-.f64 #s(literal 4/9 binary64) (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 4/9 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) (*.f64 #s(literal -2/3 binary64) eps)))) (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))))","(fma.f64 (*.f64 (fma.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/25 binary64)) (*.f64 eps eps)) (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal 2/5 binary64)) #s(literal -1 binary64)) #s(literal -2/3 binary64))","(fma.f64 (*.f64 (fma.f64 #s(literal -8/343 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/125 binary64)) (*.f64 eps eps)) (pow.f64 (fma.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 4/25 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/35 binary64)))) #s(literal -1 binary64)) #s(literal -2/3 binary64))","(fma.f64 (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/25 binary64))) (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal 2/5 binary64)) #s(literal -1 binary64)) #s(literal -2/3 binary64))","(fma.f64 (*.f64 (*.f64 eps eps) (fma.f64 #s(literal -8/343 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/125 binary64))) (pow.f64 (fma.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 4/25 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/35 binary64)))) #s(literal -1 binary64)) #s(literal -2/3 binary64))","(fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps #s(literal -2/3 binary64))","(fma.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 4/9 binary64) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64)))))","(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))","(fma.f64 (*.f64 eps eps) (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal -2/3 binary64))","(fma.f64 eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) #s(literal -2/3 binary64))","(-.f64 (/.f64 #s(literal 4/9 binary64) (-.f64 #s(literal -2/3 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps))) (/.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (-.f64 #s(literal -2/3 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps))))","(-.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64))) (/.f64 #s(literal 4/9 binary64) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64))))","(+.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64))) (neg.f64 (/.f64 #s(literal 4/9 binary64) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64)))))","(+.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps) #s(literal -2/3 binary64))","(+.f64 #s(literal -2/3 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","(*.f64 #s(literal -2 binary64) eps)","(*.f64 eps #s(literal -2 binary64))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64)) eps))","(*.f64 (*.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64) #s(literal -4 binary64)) eps) (pow.f64 (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64) #s(literal -8 binary64)) eps) (pow.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64) (-.f64 #s(literal 4 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/3 binary64)))) #s(literal -1 binary64)))","(*.f64 (*.f64 eps (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64) #s(literal -4 binary64))) (pow.f64 (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 eps (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64) #s(literal -8 binary64))) (pow.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64) (-.f64 #s(literal 4 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/3 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64)) eps)","(*.f64 eps (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) eps) (*.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) eps) (-.f64 (*.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 #s(literal -2 binary64) eps)) (*.f64 (*.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) eps) (*.f64 #s(literal -2 binary64) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 eps (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps))) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 eps (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps))) (*.f64 eps (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps))) (-.f64 (*.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 #s(literal -2 binary64) eps)) (*.f64 (*.f64 eps (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps))) (*.f64 #s(literal -2 binary64) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 #s(literal -2 binary64) eps) (-.f64 (*.f64 (*.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) eps) (*.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) eps)) (*.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 eps (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps))) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 #s(literal -2 binary64) eps) (-.f64 (*.f64 (*.f64 eps (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps))) (*.f64 eps (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)))) (*.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 eps (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64) #s(literal -4 binary64)) eps)) (neg.f64 (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64) #s(literal -8 binary64)) eps)) (neg.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64) (-.f64 #s(literal 4 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/3 binary64))))))","(/.f64 (neg.f64 (*.f64 eps (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64) #s(literal -4 binary64)))) (neg.f64 (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 eps (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64) #s(literal -8 binary64)))) (neg.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64) (-.f64 #s(literal 4 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/3 binary64))))))","(/.f64 (*.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64) #s(literal -4 binary64)) eps) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64) #s(literal -8 binary64)) eps) (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64) (-.f64 #s(literal 4 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/3 binary64)))))","(/.f64 (*.f64 eps (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64) #s(literal -4 binary64))) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64)))","(/.f64 (*.f64 eps (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64) #s(literal -8 binary64))) (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64) (-.f64 #s(literal 4 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/3 binary64)))))","(/.f64 eps (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64)) (*.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64) #s(literal -4 binary64)) eps)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64) (-.f64 #s(literal 4 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/3 binary64)))) (*.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64) #s(literal -8 binary64)) eps)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64)) (*.f64 eps (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64) #s(literal -4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64) (-.f64 #s(literal 4 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/3 binary64)))) (*.f64 eps (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64) #s(literal -8 binary64)))))","(fma.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) eps (*.f64 #s(literal -2 binary64) eps))","(fma.f64 #s(literal -2 binary64) eps (*.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) eps))","(fma.f64 #s(literal -2 binary64) eps (*.f64 eps (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps))))","(fma.f64 eps (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) (*.f64 #s(literal -2 binary64) eps))","(fma.f64 eps #s(literal -2 binary64) (*.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) eps))","(fma.f64 eps #s(literal -2 binary64) (*.f64 eps (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps))))","(+.f64 (*.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) eps) (*.f64 #s(literal -2 binary64) eps))","(+.f64 (*.f64 eps (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps))) (*.f64 #s(literal -2 binary64) eps))","(+.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) eps))","(+.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 eps (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps))))","(*.f64 (-.f64 #s(literal 4 binary64) (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -2 binary64) (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64) #s(literal -4 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64) #s(literal -8 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64) (-.f64 #s(literal 4 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/3 binary64)))))))","(*.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64) #s(literal -4 binary64)) (pow.f64 (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64) #s(literal -8 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 4 binary64) (-.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64)) (*.f64 (*.f64 eps eps) #s(literal 4/3 binary64))))))","(*.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64) #s(literal -8 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64) (-.f64 #s(literal 4 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/3 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64)) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 4 binary64) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64)) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64))) (/.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64)) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64))) (fma.f64 (/.f64 #s(literal 4 binary64) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64))) (/.f64 #s(literal 4 binary64) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64))) (*.f64 (/.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64)) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64))) (/.f64 #s(literal 4 binary64) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 4 binary64) (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64)))) (neg.f64 (-.f64 #s(literal -2 binary64) (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64) #s(literal -4 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64) #s(literal -8 binary64)))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64) (-.f64 #s(literal 4 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/3 binary64)))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) #s(literal 4 binary64)) #s(literal 16 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64) #s(literal 4 binary64)) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 3 binary64)) #s(literal 64/729 binary64) #s(literal -64 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) #s(literal 4 binary64)) (+.f64 #s(literal 16 binary64) (*.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64)) #s(literal 4 binary64)))) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 3 binary64)) #s(literal 64/729 binary64) #s(literal -64 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64) #s(literal 8 binary64)) (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64) (-.f64 #s(literal 4 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/3 binary64))))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 3 binary64)) #s(literal -512/19683 binary64) #s(literal -512 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 3 binary64)) #s(literal 64/729 binary64) (-.f64 #s(literal 64 binary64) (*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 64/27 binary64)))) (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64) (-.f64 #s(literal 4 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/3 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64)) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64)) #s(literal 4 binary64))) (*.f64 (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64)) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64))))","(/.f64 (-.f64 #s(literal 4 binary64) (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64))) (-.f64 #s(literal -2 binary64) (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64) #s(literal -4 binary64))) (neg.f64 (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64) #s(literal -8 binary64))) (neg.f64 (+.f64 #s(literal 4 binary64) (-.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64)) (*.f64 (*.f64 eps eps) #s(literal 4/3 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64) #s(literal -8 binary64))) (neg.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64) (-.f64 #s(literal 4 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64)))))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64) #s(literal -4 binary64)) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64)))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64) #s(literal -8 binary64)) (+.f64 #s(literal 4 binary64) (-.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64)) (*.f64 (*.f64 eps eps) #s(literal 4/3 binary64)))))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64) #s(literal -8 binary64)) (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64) (-.f64 #s(literal 4 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -2 binary64) (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps))) (-.f64 #s(literal 4 binary64) (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 4 binary64) (-.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64)) (*.f64 (*.f64 eps eps) #s(literal 4/3 binary64)))) (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64) #s(literal -8 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64))))","(fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal -2 binary64))","(fma.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64)) (pow.f64 (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 4 binary64) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64)))))","(fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64))","(fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64))","(fma.f64 eps (*.f64 #s(literal -2/3 binary64) eps) #s(literal -2 binary64))","(-.f64 (/.f64 #s(literal 4 binary64) (-.f64 #s(literal -2 binary64) (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)))) (/.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64)) (-.f64 #s(literal -2 binary64) (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)))))","(-.f64 (/.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64)) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64))) (/.f64 #s(literal 4 binary64) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64))))","(+.f64 (/.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64)) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64))) (neg.f64 (/.f64 #s(literal 4 binary64) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64)))))","(+.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) #s(literal -2 binary64))","(+.f64 #s(literal -2 binary64) (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)))","(*.f64 (exp.f64 (log.f64 eps)) (exp.f64 (log.f64 eps)))","(*.f64 (neg.f64 eps) (neg.f64 eps))","(*.f64 (*.f64 eps eps) #s(literal 1 binary64))","(*.f64 eps eps)","(*.f64 #s(literal 1 binary64) (*.f64 eps eps))","(pow.f64 (exp.f64 (log.f64 eps)) #s(literal 2 binary64))","(pow.f64 (neg.f64 eps) #s(literal 2 binary64))","(pow.f64 (*.f64 eps eps) #s(literal 1 binary64))","(pow.f64 eps #s(literal 2 binary64))","(exp.f64 (*.f64 (log.f64 eps) #s(literal 2 binary64)))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","(*.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)) eps) (pow.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)) eps) (pow.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps))) #s(literal -1 binary64)))","(*.f64 (*.f64 eps (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 eps (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64))) (pow.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","(*.f64 eps (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps) (-.f64 (*.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 #s(literal -2 binary64) eps)) (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps) (*.f64 #s(literal -2 binary64) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 eps (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 eps (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps)) (*.f64 eps (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps)) (-.f64 (*.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 #s(literal -2 binary64) eps)) (*.f64 (*.f64 eps (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps)) (*.f64 #s(literal -2 binary64) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 #s(literal -2 binary64) eps) (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps)) (*.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 eps (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps)) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 #s(literal -2 binary64) eps) (-.f64 (*.f64 (*.f64 eps (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps)) (*.f64 eps (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps))) (*.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 eps (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)) eps)) (neg.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)) eps)) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps)))))","(/.f64 (neg.f64 (*.f64 eps (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)))) (neg.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 eps (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps)))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)) eps) (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)) eps) (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps))))","(/.f64 (*.f64 eps (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64))) (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)))","(/.f64 (*.f64 eps (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64))) (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps))))","(/.f64 eps (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)) (*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)) eps)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps))) (*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)) eps)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)) (*.f64 eps (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps))) (*.f64 eps (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)))))","(fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps))","(fma.f64 #s(literal -2 binary64) eps (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps))","(fma.f64 #s(literal -2 binary64) eps (*.f64 eps (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps)))","(fma.f64 eps (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) (*.f64 #s(literal -2 binary64) eps))","(fma.f64 eps #s(literal -2 binary64) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps))","(fma.f64 eps #s(literal -2 binary64) (*.f64 eps (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps)))","(+.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps) (*.f64 #s(literal -2 binary64) eps))","(+.f64 (*.f64 eps (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps)) (*.f64 #s(literal -2 binary64) eps))","(+.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps))","(+.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 eps (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps)))","(*.f64 (-.f64 #s(literal 4 binary64) (*.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -2 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps))))))","(*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 4 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps))))))","(*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)) (pow.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))) (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))) (fma.f64 (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))) (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))) (*.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))) (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 4 binary64) (*.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))))) (neg.f64 (-.f64 #s(literal -2 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)))) (neg.f64 (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) #s(literal 4 binary64)) #s(literal 16 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) #s(literal 6 binary64)) #s(literal 64 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) #s(literal 4 binary64)) (+.f64 #s(literal 16 binary64) (*.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) #s(literal 4 binary64)))) (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) #s(literal 6 binary64)) #s(literal 64 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 8 binary64)) (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) #s(literal 9 binary64)) #s(literal -512 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) #s(literal 6 binary64)) (-.f64 #s(literal 64 binary64) (*.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal -2 binary64)) #s(literal 3 binary64))))) (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps)))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)) #s(literal 4 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))))","(/.f64 (-.f64 #s(literal 4 binary64) (*.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (-.f64 #s(literal -2 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64))) (neg.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64))) (neg.f64 (+.f64 #s(literal 4 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)) (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)))","(/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)) (+.f64 #s(literal 4 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps)))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)) (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -2 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps)) (-.f64 #s(literal 4 binary64) (*.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 4 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps)))) (fma.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64))))","(fma.f64 (*.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/25 binary64) #s(literal -4/9 binary64)) (*.f64 eps eps)) (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal 2/3 binary64)) #s(literal -1 binary64)) #s(literal -2 binary64))","(fma.f64 (*.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/125 binary64) #s(literal -8/27 binary64)) (*.f64 eps eps)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/25 binary64) (-.f64 #s(literal 4/9 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/15 binary64)))) #s(literal -1 binary64)) #s(literal -2 binary64))","(fma.f64 (*.f64 (*.f64 eps eps) (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/25 binary64) #s(literal -4/9 binary64))) (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal 2/3 binary64)) #s(literal -1 binary64)) #s(literal -2 binary64))","(fma.f64 (*.f64 (*.f64 eps eps) (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/125 binary64) #s(literal -8/27 binary64))) (pow.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/25 binary64) (-.f64 #s(literal 4/9 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/15 binary64)))) #s(literal -1 binary64)) #s(literal -2 binary64))","(fma.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps #s(literal -2 binary64))","(fma.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)))))","(fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64))","(fma.f64 (*.f64 eps eps) (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal -2 binary64))","(fma.f64 eps (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) #s(literal -2 binary64))","(-.f64 (/.f64 #s(literal 4 binary64) (-.f64 #s(literal -2 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps))) (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (-.f64 #s(literal -2 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps))))","(-.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))) (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))))","(+.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))) (neg.f64 (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)))))","(+.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) #s(literal -2 binary64))","(+.f64 #s(literal -2 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps))","(*.f64 (-.f64 #s(literal 4/9 binary64) (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/25 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -2/3 binary64) (*.f64 #s(literal -2/5 binary64) (*.f64 eps eps)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/25 binary64) #s(literal -4/9 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal 2/3 binary64)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/125 binary64) #s(literal -8/27 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/25 binary64) (-.f64 #s(literal 4/9 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/15 binary64)))))))","(*.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/25 binary64) #s(literal -4/9 binary64)) (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal 2/3 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/125 binary64) #s(literal -8/27 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 4/9 binary64) (-.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/25 binary64)) (*.f64 (*.f64 eps eps) #s(literal 4/15 binary64))))))","(*.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/125 binary64) #s(literal -8/27 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/25 binary64) (-.f64 #s(literal 4/9 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/15 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/25 binary64)) (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal 2/3 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 4/9 binary64) (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal 2/3 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/25 binary64)) (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal 2/3 binary64))) (/.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/25 binary64)) (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal 2/3 binary64))) (fma.f64 (/.f64 #s(literal 4/9 binary64) (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal 2/3 binary64))) (/.f64 #s(literal 4/9 binary64) (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal 2/3 binary64))) (*.f64 (/.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/25 binary64)) (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal 2/3 binary64))) (/.f64 #s(literal 4/9 binary64) (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal 2/3 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 4/9 binary64) (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/25 binary64)))) (neg.f64 (-.f64 #s(literal -2/3 binary64) (*.f64 #s(literal -2/5 binary64) (*.f64 eps eps)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/25 binary64) #s(literal -4/9 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal 2/3 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/125 binary64) #s(literal -8/27 binary64)))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/25 binary64) (-.f64 #s(literal 4/9 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/15 binary64)))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal -2/5 binary64) (*.f64 eps eps)) #s(literal 4 binary64)) #s(literal 16/81 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/25 binary64) #s(literal 4/9 binary64)) (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal 2/3 binary64))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 3 binary64)) #s(literal 64/15625 binary64) #s(literal -64/729 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 #s(literal -2/5 binary64) (*.f64 eps eps)) #s(literal 4 binary64)) (+.f64 #s(literal 16/81 binary64) (*.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/25 binary64)) #s(literal 4/9 binary64)))) (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal 2/3 binary64))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 3 binary64)) #s(literal 64/15625 binary64) #s(literal -64/729 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/125 binary64) #s(literal 8/27 binary64)) (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/25 binary64) (-.f64 #s(literal 4/9 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/15 binary64))))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 3 binary64)) #s(literal -512/1953125 binary64) #s(literal -512/19683 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 3 binary64)) #s(literal 64/15625 binary64) (-.f64 #s(literal 64/729 binary64) (*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 64/3375 binary64)))) (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/25 binary64) (-.f64 #s(literal 4/9 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/15 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/25 binary64)) (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal 2/3 binary64))) (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal 2/3 binary64)) #s(literal 4/9 binary64))) (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal 2/3 binary64)) (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal 2/3 binary64))))","(/.f64 (-.f64 #s(literal 4/9 binary64) (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/25 binary64))) (-.f64 #s(literal -2/3 binary64) (*.f64 #s(literal -2/5 binary64) (*.f64 eps eps))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/25 binary64) #s(literal -4/9 binary64))) (neg.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal 2/3 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/125 binary64) #s(literal -8/27 binary64))) (neg.f64 (+.f64 #s(literal 4/9 binary64) (-.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/25 binary64)) (*.f64 (*.f64 eps eps) #s(literal 4/15 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/125 binary64) #s(literal -8/27 binary64))) (neg.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/25 binary64) (-.f64 #s(literal 4/9 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/15 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)))))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/25 binary64) #s(literal -4/9 binary64)) (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal 2/3 binary64)))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/125 binary64) #s(literal -8/27 binary64)) (+.f64 #s(literal 4/9 binary64) (-.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/25 binary64)) (*.f64 (*.f64 eps eps) #s(literal 4/15 binary64)))))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/125 binary64) #s(literal -8/27 binary64)) (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/25 binary64) (-.f64 #s(literal 4/9 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/15 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -2/3 binary64) (*.f64 #s(literal -2/5 binary64) (*.f64 eps eps))) (-.f64 #s(literal 4/9 binary64) (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/25 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 4/9 binary64) (-.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/25 binary64)) (*.f64 (*.f64 eps eps) #s(literal 4/15 binary64)))) (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/125 binary64) #s(literal -8/27 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64))))","(fma.f64 (*.f64 #s(literal -2/5 binary64) eps) eps #s(literal -2/3 binary64))","(fma.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/25 binary64)) (pow.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal 2/3 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 4/9 binary64) (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal 2/3 binary64)))))","(fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64))","(fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64))","(fma.f64 eps (*.f64 #s(literal -2/5 binary64) eps) #s(literal -2/3 binary64))","(-.f64 (/.f64 #s(literal 4/9 binary64) (-.f64 #s(literal -2/3 binary64) (*.f64 #s(literal -2/5 binary64) (*.f64 eps eps)))) (/.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/25 binary64)) (-.f64 #s(literal -2/3 binary64) (*.f64 #s(literal -2/5 binary64) (*.f64 eps eps)))))","(-.f64 (/.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/25 binary64)) (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal 2/3 binary64))) (/.f64 #s(literal 4/9 binary64) (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal 2/3 binary64))))","(+.f64 (/.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/25 binary64)) (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal 2/3 binary64))) (neg.f64 (/.f64 #s(literal 4/9 binary64) (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal 2/3 binary64)))))","(+.f64 (*.f64 #s(literal -2/5 binary64) (*.f64 eps eps)) #s(literal -2/3 binary64))","(+.f64 #s(literal -2/3 binary64) (*.f64 #s(literal -2/5 binary64) (*.f64 eps eps)))","(*.f64 (-.f64 #s(literal 4/25 binary64) (*.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -2/5 binary64) (*.f64 (*.f64 eps eps) #s(literal -2/7 binary64)))))","(*.f64 (neg.f64 (fma.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/25 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal 2/5 binary64)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -8/343 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/125 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 4/25 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/35 binary64)))))))","(*.f64 (fma.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/25 binary64)) (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal 2/5 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -8/343 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/125 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 4/25 binary64) (-.f64 (*.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 eps eps) #s(literal 4/35 binary64))))))","(*.f64 (fma.f64 #s(literal -8/343 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/125 binary64)) (pow.f64 (fma.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 4/25 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/35 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal 2/5 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 4/25 binary64) (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal 2/5 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal 2/5 binary64))) (/.f64 (*.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal 2/5 binary64))) (fma.f64 (/.f64 #s(literal 4/25 binary64) (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal 2/5 binary64))) (/.f64 #s(literal 4/25 binary64) (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal 2/5 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal 2/5 binary64))) (/.f64 #s(literal 4/25 binary64) (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal 2/5 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 4/25 binary64) (*.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64))))) (neg.f64 (-.f64 #s(literal -2/5 binary64) (*.f64 (*.f64 eps eps) #s(literal -2/7 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/25 binary64)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal 2/5 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -8/343 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/125 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 4/25 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/35 binary64)))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 eps eps) #s(literal -2/7 binary64)) #s(literal 4 binary64)) #s(literal 16/625 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/25 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal 2/5 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal 64/117649 binary64) (pow.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 3 binary64)) #s(literal -64/15625 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 eps eps) #s(literal -2/7 binary64)) #s(literal 4 binary64)) (+.f64 #s(literal 16/625 binary64) (*.f64 (*.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64))) #s(literal 4/25 binary64)))) (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal 2/5 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal 64/117649 binary64) (pow.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 3 binary64)) #s(literal -64/15625 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -8/343 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal 8/125 binary64)) (fma.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 4/25 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/35 binary64))))))","(/.f64 (*.f64 (fma.f64 #s(literal -512/40353607 binary64) (pow.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 3 binary64)) #s(literal -512/1953125 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 64/117649 binary64) (pow.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 3 binary64)) (-.f64 #s(literal 64/15625 binary64) (*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 64/42875 binary64)))) (fma.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 4/25 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/35 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal 2/5 binary64))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal 2/5 binary64)) #s(literal 4/25 binary64))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal 2/5 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal 2/5 binary64))))","(/.f64 (-.f64 #s(literal 4/25 binary64) (*.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64)))) (-.f64 #s(literal -2/5 binary64) (*.f64 (*.f64 eps eps) #s(literal -2/7 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/25 binary64))) (neg.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal 2/5 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal -8/343 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/125 binary64))) (neg.f64 (+.f64 #s(literal 4/25 binary64) (-.f64 (*.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 eps eps) #s(literal 4/35 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -8/343 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/125 binary64))) (neg.f64 (fma.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 4/25 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/35 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)))))","(/.f64 (fma.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/25 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal 2/5 binary64)))","(/.f64 (fma.f64 #s(literal -8/343 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/125 binary64)) (+.f64 #s(literal 4/25 binary64) (-.f64 (*.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 eps eps) #s(literal 4/35 binary64)))))","(/.f64 (fma.f64 #s(literal -8/343 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/125 binary64)) (fma.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 4/25 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/35 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -2/5 binary64) (*.f64 (*.f64 eps eps) #s(literal -2/7 binary64))) (-.f64 #s(literal 4/25 binary64) (*.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 4/25 binary64) (-.f64 (*.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 eps eps) #s(literal 4/35 binary64)))) (fma.f64 #s(literal -8/343 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/125 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64))))","(fma.f64 (*.f64 #s(literal -2/7 binary64) eps) eps #s(literal -2/5 binary64))","(fma.f64 (*.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64))) (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal 2/5 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 4/25 binary64) (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal 2/5 binary64)))))","(fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64))","(fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64))","(fma.f64 eps (*.f64 #s(literal -2/7 binary64) eps) #s(literal -2/5 binary64))","(-.f64 (/.f64 #s(literal 4/25 binary64) (-.f64 #s(literal -2/5 binary64) (*.f64 (*.f64 eps eps) #s(literal -2/7 binary64)))) (/.f64 (*.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64))) (-.f64 #s(literal -2/5 binary64) (*.f64 (*.f64 eps eps) #s(literal -2/7 binary64)))))","(-.f64 (/.f64 (*.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal 2/5 binary64))) (/.f64 #s(literal 4/25 binary64) (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal 2/5 binary64))))","(+.f64 (/.f64 (*.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal 2/5 binary64))) (neg.f64 (/.f64 #s(literal 4/25 binary64) (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal 2/5 binary64)))))","(+.f64 (*.f64 (*.f64 eps eps) #s(literal -2/7 binary64)) #s(literal -2/5 binary64))","(+.f64 #s(literal -2/5 binary64) (*.f64 (*.f64 eps eps) #s(literal -2/7 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":263.37890625,"type":"rewrite"},{"compiler":[[18082,2125]],"memory":[[2315088,48379216]],"time":62.364013671875,"type":"eval"},{"alts":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps)))","next",0.00390625,"binary64"],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps)))","next",0.048801190986480995,"binary64"],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) eps (*.f64 #s(literal -2 binary64) eps)))","next",0.16728354621564734,"binary64"],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","done",0.021816259768442016,"binary64"],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","done",0.06442716844333948,"binary64"],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","done",0.17509604621564734,"binary64"],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","done",0.647823368674164,"binary64"],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) #s(approx (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (*.f64 (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal 2/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (pow.f64 eps #s(literal 7 binary64)))))","next",54.73135761595531,"binary64"],["#s(literal 0 binary64)","done",60.57221134767748,"binary64"]],"compiler":[[29,18],[24,16],[19,13],[27,16],[22,14],[17,12],[12,9],[54,37],[1,2]],"count":[[465,9]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[460,4],"picked":[5,5]}],"memory":[[-6067120,20057568]],"min-error":[[0.0,"binary64"]],"time":78.9208984375,"type":"prune"},{"egraph":[[0,8073,398,0.046624735],[7,6861,406,0.022930567],[6,3533,406,0.030788477],[5,1974,406,0.015851292],[4,1107,406,0.007795541],[3,503,406,0.003902044],[2,250,406,0.001881837],[1,153,406,0.001052006],[0,82,406,0.000778299],[0,51,416,0.000476947]],"inputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) #s(approx (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (*.f64 (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal 2/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (pow.f64 eps #s(literal 7 binary64)))))","#s(approx (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (*.f64 (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal 2/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (pow.f64 eps #s(literal 7 binary64))))","(*.f64 (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal 2/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (pow.f64 eps #s(literal 7 binary64)))","(-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal 2/3 binary64)) (pow.f64 eps #s(literal 4 binary64))))","(-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps)))","#s(literal -2/7 binary64)","(/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))","#s(literal 2/5 binary64)","(*.f64 eps eps)","eps","(/.f64 (+.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal 2/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))","(+.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal 2/3 binary64))","(/.f64 (/.f64 #s(literal 2 binary64) eps) eps)","(/.f64 #s(literal 2 binary64) eps)","#s(literal 2 binary64)","#s(literal 2/3 binary64)","(pow.f64 eps #s(literal 4 binary64))","#s(literal 4 binary64)","(pow.f64 eps #s(literal 7 binary64))","#s(literal 7 binary64)","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) eps (*.f64 #s(literal -2 binary64) eps)))","(fma.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) eps (*.f64 #s(literal -2 binary64) eps))","(*.f64 #s(literal -2/3 binary64) (*.f64 eps eps))","#s(literal -2/3 binary64)","(*.f64 eps eps)","eps","(*.f64 #s(literal -2 binary64) eps)","#s(literal -2 binary64)","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps)))","(fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps))","(*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps)","(*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps)","(fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64))","#s(literal -2/5 binary64)","(*.f64 eps eps)","eps","#s(literal -2/3 binary64)","(*.f64 #s(literal -2 binary64) eps)","#s(literal -2 binary64)","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps)))","(fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps))","(*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps)","(*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps)","(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))","(fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64))","(*.f64 eps eps)","eps","#s(literal -2/7 binary64)","#s(literal -2/5 binary64)","#s(literal -2/3 binary64)","(*.f64 #s(literal -2 binary64) eps)","#s(literal -2 binary64)"]],"locations":[["(*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps)","cost-diff",0],["(*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps)","cost-diff",0],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps)))","cost-diff",0],["(fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps))","cost-diff",2],["(*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps)","cost-diff",0],["(*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps)","cost-diff",0],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps)))","cost-diff",0],["(fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps))","cost-diff",2],["(*.f64 eps eps)","cost-diff",0],["(*.f64 #s(literal -2/3 binary64) (*.f64 eps eps))","cost-diff",0],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) eps (*.f64 #s(literal -2 binary64) eps)))","cost-diff",0],["(fma.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) eps (*.f64 #s(literal -2 binary64) eps))","cost-diff",2],["(-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal 2/3 binary64)) (pow.f64 eps #s(literal 4 binary64))))","cost-diff",0],["(*.f64 (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal 2/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (pow.f64 eps #s(literal 7 binary64)))","cost-diff",0],["#s(approx (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (*.f64 (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal 2/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (pow.f64 eps #s(literal 7 binary64))))","cost-diff",0],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) #s(approx (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (*.f64 (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal 2/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (pow.f64 eps #s(literal 7 binary64)))))","cost-diff",0]],"memory":[[4858224,26473664]],"method":["egg-herbie"],"outputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) #s(approx (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (*.f64 (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal 2/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (pow.f64 eps #s(literal 7 binary64)))))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) #s(approx (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (*.f64 (pow.f64 eps #s(literal 7 binary64)) (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))))))","#s(approx (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (*.f64 (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal 2/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (pow.f64 eps #s(literal 7 binary64))))","#s(approx (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (*.f64 (pow.f64 eps #s(literal 7 binary64)) (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 4 binary64))))))","(*.f64 (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal 2/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (pow.f64 eps #s(literal 7 binary64)))","(*.f64 (pow.f64 eps #s(literal 7 binary64)) (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))))","(-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal 2/3 binary64)) (pow.f64 eps #s(literal 4 binary64))))","(-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 4 binary64))))","(-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps)))","#s(literal -2/7 binary64)","(/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))","#s(literal 2/5 binary64)","(*.f64 eps eps)","eps","(/.f64 (+.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal 2/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))","(/.f64 (-.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))","(+.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal 2/3 binary64))","(-.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal -2/3 binary64))","(/.f64 (/.f64 #s(literal 2 binary64) eps) eps)","(/.f64 #s(literal 2 binary64) eps)","#s(literal 2 binary64)","#s(literal 2/3 binary64)","(pow.f64 eps #s(literal 4 binary64))","#s(literal 4 binary64)","(pow.f64 eps #s(literal 7 binary64))","#s(literal 7 binary64)","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) eps (*.f64 #s(literal -2 binary64) eps)))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","(fma.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) eps (*.f64 #s(literal -2 binary64) eps))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps)","(*.f64 #s(literal -2/3 binary64) (*.f64 eps eps))","(*.f64 (*.f64 eps eps) #s(literal -2/3 binary64))","#s(literal -2/3 binary64)","(*.f64 eps eps)","eps","(*.f64 #s(literal -2 binary64) eps)","#s(literal -2 binary64)","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps)))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) eps) eps #s(literal -2 binary64)) eps))","(fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps))","(*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) eps) eps #s(literal -2 binary64)) eps)","(*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps)","(*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) eps) eps)","(*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps)","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) eps)","(fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64))","(fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64))","#s(literal -2/5 binary64)","(*.f64 eps eps)","eps","#s(literal -2/3 binary64)","(*.f64 #s(literal -2 binary64) eps)","#s(literal -2 binary64)","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps)))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (pow.f64 eps #s(literal 5 binary64)) #s(literal -2/5 binary64) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64) (fma.f64 (pow.f64 eps #s(literal 7 binary64)) #s(literal -2/7 binary64) (*.f64 #s(literal -2 binary64) eps)))))","(fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps))","(fma.f64 (pow.f64 eps #s(literal 5 binary64)) #s(literal -2/5 binary64) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64) (fma.f64 (pow.f64 eps #s(literal 7 binary64)) #s(literal -2/7 binary64) (*.f64 #s(literal -2 binary64) eps))))","(*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps)","(*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps)","(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))","(fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64))","(*.f64 eps eps)","eps","#s(literal -2/7 binary64)","#s(literal -2/5 binary64)","#s(literal -2/3 binary64)","(*.f64 #s(literal -2 binary64) eps)","#s(literal -2 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":199.924072265625,"type":"simplify"},{"compiler":[[316,53]],"locations":[["(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))","accuracy",0.01171875],["(fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64))","accuracy",0.015625],["(*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps)","accuracy",0.1328125],["(*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps)","accuracy",0.3515625],["(fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64))","accuracy",0.0078125],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps)))","accuracy",0.048801190986480995],["(*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps)","accuracy",0.13671875],["(*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps)","accuracy",0.3515625],["(*.f64 eps eps)","accuracy",0.0],["(*.f64 #s(literal -2 binary64) eps)","accuracy",0.0],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) eps (*.f64 #s(literal -2 binary64) eps)))","accuracy",0.16728354621564734],["(*.f64 #s(literal -2/3 binary64) (*.f64 eps eps))","accuracy",0.22265625],["(/.f64 (+.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal 2/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))","accuracy",0.04296875],["(/.f64 (/.f64 #s(literal 2 binary64) eps) eps)","accuracy",0.12890625],["(/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))","accuracy",0.24837875976844204],["(*.f64 (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal 2/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (pow.f64 eps #s(literal 7 binary64)))","accuracy",53.83225646405544]],"memory":[[1188624,84231568]],"mixsample":[[18.63916015625,"ival-div",0],[33.352294921875,"adjust",800],[3.428466796875,"ival-div",400],[0.8935546875,"ival-sub",1600],[0.19189453125,"ival-assert",0],[1.12548828125,"ival-div",1600],[7.779052734375,"ival-sub",0],[29.59521484375,"const",0],[2.36279296875,"ival-sub",400],[39.630126953125,"adjust",2000],[16.687255859375,"ival-pow",0],[28.64794921875,"ival-add",0],[58.258544921875,"ival-mult",0],[0.43359375,"ival-add",1600],[1.366943359375,"ival-add",400],[49.154052734375,"ival-log",0],[0.340087890625,"ival-true",0],[0.857666015625,"exact",0]],"outcomes":[[167.0576171875,1,"valid",151],[182.039306640625,2,"valid",94],[5.40576171875,0,"valid",11]],"time":406.488037109375,"type":"localize"},{"count":[[23,65]],"inputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) #s(approx (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (*.f64 (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal 2/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (pow.f64 eps #s(literal 7 binary64)))))","#s(approx (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (*.f64 (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal 2/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (pow.f64 eps #s(literal 7 binary64))))","(*.f64 (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal 2/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (pow.f64 eps #s(literal 7 binary64)))","(-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal 2/3 binary64)) (pow.f64 eps #s(literal 4 binary64))))","(fma.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) eps (*.f64 #s(literal -2 binary64) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) eps (*.f64 #s(literal -2 binary64) eps)))","(*.f64 #s(literal -2/3 binary64) (*.f64 eps eps))","(*.f64 eps eps)","(fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps)))","(*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps)","(*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps)","(fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps)))","(*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps)","(*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps)","(/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))","(/.f64 (/.f64 #s(literal 2 binary64) eps) eps)","(/.f64 (+.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal 2/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))","(*.f64 #s(literal -2 binary64) eps)","(fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64))","(fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64))","(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))"]],"memory":[[-74656,7510416]],"outputs":[["(* -2 eps)","(* eps (- (* -2/3 (pow eps 2)) 2))","(* eps (- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2))","(* eps (- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2))","(/ -2 (pow eps 6))","(/ (- (* -2/3 (pow eps 2)) 2) (pow eps 6))","(/ (- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2) (pow eps 6))","(/ (- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2) (pow eps 6))","(* -2/3 (pow eps 2))","(pow eps 2)","(* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3))","(* -2/3 eps)","(* eps (- (* -2/5 (pow eps 2)) 2/3))","(* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3))","(* eps (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3))","(/ 2/5 (pow eps 2))","(/ 2 (pow eps 2))","(/ 2 (pow eps 6))","(/ (+ 2 (* 2/3 (pow eps 2))) (pow eps 6))","-2/3","(- (* -2/5 (pow eps 2)) 2/3)","-2/5","(- (* -2/7 (pow eps 2)) 2/5)","(- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)","(log -1)","(- (log -1) (* 2 (/ 1 eps)))","(+ (log -1) (* -1 (/ (+ 2 (* 2/3 (/ 1 (pow eps 2)))) eps)))","(- (+ (log -1) (* -1 (/ (+ 2/3 (* 2/5 (/ 1 (pow eps 2)))) (pow eps 3)))) (* 2 (/ 1 eps)))","(* -2/7 (pow eps 7))","(* -1 (* (pow eps 7) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(* (pow eps 7) (- (* -1 (/ (+ 2/5 (* 2/3 (/ 1 (pow eps 2)))) (pow eps 2))) 2/7))","(* (pow eps 7) (- (* -1 (/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 4))) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","-2/7","(* -1 (+ 2/7 (* 2/5 (/ 1 (pow eps 2)))))","(- (* -1 (/ (+ 2/5 (* 2/3 (/ 1 (pow eps 2)))) (pow eps 2))) 2/7)","(- (* -1 (/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 4))) (+ 2/7 (* 2/5 (/ 1 (pow eps 2)))))","(* -2/3 (pow eps 3))","(* -1 (* (pow eps 3) (+ 2/3 (* 2 (/ 1 (pow eps 2))))))","(* -2/5 (pow eps 5))","(* -1 (* (pow eps 5) (+ 2/5 (* 2/3 (/ 1 (pow eps 2))))))","(* (pow eps 5) (- (* -1 (/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 2))) 2/5))","(* -2/5 (pow eps 4))","(* -1 (* (pow eps 4) (+ 2/5 (* 2/3 (/ 1 (pow eps 2))))))","(* -2/5 (pow eps 3))","(* -1 (* (pow eps 3) (+ 2/5 (* 2/3 (/ 1 (pow eps 2))))))","(* -2/7 (pow eps 6))","(* -1 (* (pow eps 6) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(* (pow eps 6) (- (* -1 (/ (+ 2/5 (* 2/3 (/ 1 (pow eps 2)))) (pow eps 2))) 2/7))","(* -2/7 (pow eps 5))","(* -1 (* (pow eps 5) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(* (pow eps 5) (- (* -1 (/ (+ 2/5 (* 2/3 (/ 1 (pow eps 2)))) (pow eps 2))) 2/7))","(/ 2/3 (pow eps 4))","(/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 4))","(* -2/5 (pow eps 2))","(* -1 (* (pow eps 2) (+ 2/5 (* 2/3 (/ 1 (pow eps 2))))))","(* -2/7 (pow eps 2))","(* -1 (* (pow eps 2) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(* -2/7 (pow eps 4))","(* -1 (* (pow eps 4) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(* (pow eps 4) (- (* -1 (/ (+ 2/5 (* 2/3 (/ 1 (pow eps 2)))) (pow eps 2))) 2/7))","(+ (log -1) (* -1 (/ (+ 2 (+ (/ 2/5 (pow eps 4)) (* 2/3 (/ 1 (pow eps 2))))) eps)))","(* -1 (* (pow eps 7) (+ 2/7 (+ (/ 2/3 (pow eps 4)) (* 2/5 (/ 1 (pow eps 2)))))))","(* -1 (* (pow eps 7) (+ 2/7 (+ (/ 2/3 (pow eps 4)) (+ (* 2/5 (/ 1 (pow eps 2))) (* 2 (/ 1 (pow eps 6))))))))","(* -1 (* (pow eps 5) (+ 2/5 (+ (* 2/3 (/ 1 (pow eps 2))) (/ 2 (pow eps 4))))))","(* -1 (* (pow eps 5) (+ 2/7 (+ (/ 2/3 (pow eps 4)) (* 2/5 (/ 1 (pow eps 2)))))))"]],"series":[[3.48486328125,"((log (/ (- 1 eps) (+ 1 eps))) (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (* (- (- -2/7 (/ 2/5 (* eps eps))) (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4))) (pow eps 7)) (- (- -2/7 (/ 2/5 (* eps eps))) (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4))) (+ (* (* -2/3 (* eps eps)) eps) (* -2 eps)) (log (/ (- 1 eps) (+ 1 eps))) (* -2/3 (* eps eps)) (* eps eps) (+ (* (* (* (+ (* -2/5 (* eps eps)) -2/3) eps) eps) eps) (* -2 eps)) (log (/ (- 1 eps) (+ 1 eps))) (* (* (+ (* -2/5 (* eps eps)) -2/3) eps) eps) (* (+ (* -2/5 (* eps eps)) -2/3) eps) (+ (* (* (* (+ (* (+ (* (* eps eps) -2/7) -2/5) (* eps eps)) -2/3) eps) eps) eps) (* -2 eps)) (log (/ (- 1 eps) (+ 1 eps))) (* (* (+ (* (+ (* (* eps eps) -2/7) -2/5) (* eps eps)) -2/3) eps) eps) (* (+ (* (+ (* (* eps eps) -2/7) -2/5) (* eps eps)) -2/3) eps) (/ 2/5 (* eps eps)) (/ (/ 2 eps) eps) (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (* -2 eps) (+ (* -2/5 (* eps eps)) -2/3) (+ (* (* eps eps) -2/7) -2/5) (+ (* (+ (* (* eps eps) -2/7) -2/5) (* eps eps)) -2/3))","eps","-inf"],[3.85693359375,"((log (/ (- 1 eps) (+ 1 eps))) (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (* (- (- -2/7 (/ 2/5 (* eps eps))) (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4))) (pow eps 7)) (- (- -2/7 (/ 2/5 (* eps eps))) (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4))) (+ (* (* -2/3 (* eps eps)) eps) (* -2 eps)) (log (/ (- 1 eps) (+ 1 eps))) (* -2/3 (* eps eps)) (* eps eps) (+ (* (* (* (+ (* -2/5 (* eps eps)) -2/3) eps) eps) eps) (* -2 eps)) (log (/ (- 1 eps) (+ 1 eps))) (* (* (+ (* -2/5 (* eps eps)) -2/3) eps) eps) (* (+ (* -2/5 (* eps eps)) -2/3) eps) (+ (* (* (* (+ (* (+ (* (* eps eps) -2/7) -2/5) (* eps eps)) -2/3) eps) eps) eps) (* -2 eps)) (log (/ (- 1 eps) (+ 1 eps))) (* (* (+ (* (+ (* (* eps eps) -2/7) -2/5) (* eps eps)) -2/3) eps) eps) (* (+ (* (+ (* (* eps eps) -2/7) -2/5) (* eps eps)) -2/3) eps) (/ 2/5 (* eps eps)) (/ (/ 2 eps) eps) (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (* -2 eps) (+ (* -2/5 (* eps eps)) -2/3) (+ (* (* eps eps) -2/7) -2/5) (+ (* (+ (* (* eps eps) -2/7) -2/5) (* eps eps)) -2/3))","eps","inf"],[5.4189453125,"((log (/ (- 1 eps) (+ 1 eps))) (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (* (- (- -2/7 (/ 2/5 (* eps eps))) (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4))) (pow eps 7)) (- (- -2/7 (/ 2/5 (* eps eps))) (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4))) (+ (* (* -2/3 (* eps eps)) eps) (* -2 eps)) (log (/ (- 1 eps) (+ 1 eps))) (* -2/3 (* eps eps)) (* eps eps) (+ (* (* (* (+ (* -2/5 (* eps eps)) -2/3) eps) eps) eps) (* -2 eps)) (log (/ (- 1 eps) (+ 1 eps))) (* (* (+ (* -2/5 (* eps eps)) -2/3) eps) eps) (* (+ (* -2/5 (* eps eps)) -2/3) eps) (+ (* (* (* (+ (* (+ (* (* eps eps) -2/7) -2/5) (* eps eps)) -2/3) eps) eps) eps) (* -2 eps)) (log (/ (- 1 eps) (+ 1 eps))) (* (* (+ (* (+ (* (* eps eps) -2/7) -2/5) (* eps eps)) -2/3) eps) eps) (* (+ (* (+ (* (* eps eps) -2/7) -2/5) (* eps eps)) -2/3) eps) (/ 2/5 (* eps eps)) (/ (/ 2 eps) eps) (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (* -2 eps) (+ (* -2/5 (* eps eps)) -2/3) (+ (* (* eps eps) -2/7) -2/5) (+ (* (+ (* (* eps eps) -2/7) -2/5) (* eps eps)) -2/3))","eps","0"]],"time":14.248046875,"type":"series"},{"count":[[65,65]],"egraph":[[0,8342,637,0.072518491],[3,3934,664,0.033272909],[2,1423,668,0.014924891],[1,408,678,0.004699222],[0,140,686,0.001437899]],"inputs":[["(* -2 eps)","(* eps (- (* -2/3 (pow eps 2)) 2))","(* eps (- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2))","(* eps (- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2))","(/ -2 (pow eps 6))","(/ (- (* -2/3 (pow eps 2)) 2) (pow eps 6))","(/ (- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2) (pow eps 6))","(/ (- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2) (pow eps 6))","(* -2/3 (pow eps 2))","(pow eps 2)","(* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3))","(* -2/3 eps)","(* eps (- (* -2/5 (pow eps 2)) 2/3))","(* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3))","(* eps (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3))","(/ 2/5 (pow eps 2))","(/ 2 (pow eps 2))","(/ 2 (pow eps 6))","(/ (+ 2 (* 2/3 (pow eps 2))) (pow eps 6))","-2/3","(- (* -2/5 (pow eps 2)) 2/3)","-2/5","(- (* -2/7 (pow eps 2)) 2/5)","(- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)","(log -1)","(- (log -1) (* 2 (/ 1 eps)))","(+ (log -1) (* -1 (/ (+ 2 (* 2/3 (/ 1 (pow eps 2)))) eps)))","(- (+ (log -1) (* -1 (/ (+ 2/3 (* 2/5 (/ 1 (pow eps 2)))) (pow eps 3)))) (* 2 (/ 1 eps)))","(* -2/7 (pow eps 7))","(* -1 (* (pow eps 7) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(* (pow eps 7) (- (* -1 (/ (+ 2/5 (* 2/3 (/ 1 (pow eps 2)))) (pow eps 2))) 2/7))","(* (pow eps 7) (- (* -1 (/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 4))) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","-2/7","(* -1 (+ 2/7 (* 2/5 (/ 1 (pow eps 2)))))","(- (* -1 (/ (+ 2/5 (* 2/3 (/ 1 (pow eps 2)))) (pow eps 2))) 2/7)","(- (* -1 (/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 4))) (+ 2/7 (* 2/5 (/ 1 (pow eps 2)))))","(* -2/3 (pow eps 3))","(* -1 (* (pow eps 3) (+ 2/3 (* 2 (/ 1 (pow eps 2))))))","(* -2/5 (pow eps 5))","(* -1 (* (pow eps 5) (+ 2/5 (* 2/3 (/ 1 (pow eps 2))))))","(* (pow eps 5) (- (* -1 (/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 2))) 2/5))","(* -2/5 (pow eps 4))","(* -1 (* (pow eps 4) (+ 2/5 (* 2/3 (/ 1 (pow eps 2))))))","(* -2/5 (pow eps 3))","(* -1 (* (pow eps 3) (+ 2/5 (* 2/3 (/ 1 (pow eps 2))))))","(* -2/7 (pow eps 6))","(* -1 (* (pow eps 6) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(* (pow eps 6) (- (* -1 (/ (+ 2/5 (* 2/3 (/ 1 (pow eps 2)))) (pow eps 2))) 2/7))","(* -2/7 (pow eps 5))","(* -1 (* (pow eps 5) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(* (pow eps 5) (- (* -1 (/ (+ 2/5 (* 2/3 (/ 1 (pow eps 2)))) (pow eps 2))) 2/7))","(/ 2/3 (pow eps 4))","(/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 4))","(* -2/5 (pow eps 2))","(* -1 (* (pow eps 2) (+ 2/5 (* 2/3 (/ 1 (pow eps 2))))))","(* -2/7 (pow eps 2))","(* -1 (* (pow eps 2) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(* -2/7 (pow eps 4))","(* -1 (* (pow eps 4) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(* (pow eps 4) (- (* -1 (/ (+ 2/5 (* 2/3 (/ 1 (pow eps 2)))) (pow eps 2))) 2/7))","(+ (log -1) (* -1 (/ (+ 2 (+ (/ 2/5 (pow eps 4)) (* 2/3 (/ 1 (pow eps 2))))) eps)))","(* -1 (* (pow eps 7) (+ 2/7 (+ (/ 2/3 (pow eps 4)) (* 2/5 (/ 1 (pow eps 2)))))))","(* -1 (* (pow eps 7) (+ 2/7 (+ (/ 2/3 (pow eps 4)) (+ (* 2/5 (/ 1 (pow eps 2))) (* 2 (/ 1 (pow eps 6))))))))","(* -1 (* (pow eps 5) (+ 2/5 (+ (* 2/3 (/ 1 (pow eps 2))) (/ 2 (pow eps 4))))))","(* -1 (* (pow eps 5) (+ 2/7 (+ (/ 2/3 (pow eps 4)) (* 2/5 (/ 1 (pow eps 2)))))))"]],"memory":[[2356144,36071552]],"method":["egg-herbie"],"outputs":[["(* -2 eps)","(*.f64 #s(literal -2 binary64) eps)","(* eps (- (* -2/3 (pow eps 2)) 2))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps)","(* eps (- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2))","(*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","(* eps (- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","(/ -2 (pow eps 6))","(/.f64 #s(literal -2 binary64) (pow.f64 eps #s(literal 6 binary64)))","(/ (- (* -2/3 (pow eps 2)) 2) (pow eps 6))","(/.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) (pow.f64 eps #s(literal 6 binary64)))","(/ (- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2) (pow eps 6))","(/.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) (pow.f64 eps #s(literal 6 binary64)))","(/ (- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2) (pow eps 6))","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) (pow.f64 eps #s(literal 6 binary64)))","(* -2/3 (pow eps 2))","(*.f64 (*.f64 eps eps) #s(literal -2/3 binary64))","(pow eps 2)","(*.f64 eps eps)","(* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3))","(*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) eps) eps)","(* -2/3 eps)","(*.f64 #s(literal -2/3 binary64) eps)","(* eps (- (* -2/5 (pow eps 2)) 2/3))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) eps)","(* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3))","(*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps)","(* eps (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3))","(*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps)","(/ 2/5 (pow eps 2))","(/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))","(/ 2 (pow eps 2))","(/.f64 (/.f64 #s(literal 2 binary64) eps) eps)","(/ 2 (pow eps 6))","(/.f64 #s(literal 2 binary64) (pow.f64 eps #s(literal 6 binary64)))","(/ (+ 2 (* 2/3 (pow eps 2))) (pow eps 6))","(/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64)))","-2/3","#s(literal -2/3 binary64)","(- (* -2/5 (pow eps 2)) 2/3)","(fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64))","-2/5","#s(literal -2/5 binary64)","(- (* -2/7 (pow eps 2)) 2/5)","(fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64))","(- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)","(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))","(log -1)","(log.f64 #s(literal -1 binary64))","(- (log -1) (* 2 (/ 1 eps)))","(-.f64 (log.f64 #s(literal -1 binary64)) (/.f64 #s(literal 2 binary64) eps))","(+ (log -1) (* -1 (/ (+ 2 (* 2/3 (/ 1 (pow eps 2)))) eps)))","(-.f64 (log.f64 #s(literal -1 binary64)) (/.f64 (+.f64 (/.f64 #s(literal 2/3 binary64) (*.f64 eps eps)) #s(literal 2 binary64)) eps))","(- (+ (log -1) (* -1 (/ (+ 2/3 (* 2/5 (/ 1 (pow eps 2)))) (pow eps 3)))) (* 2 (/ 1 eps)))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (/.f64 (+.f64 (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps)) #s(literal 2/3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 #s(literal 2 binary64) eps))","(* -2/7 (pow eps 7))","(*.f64 (pow.f64 eps #s(literal 7 binary64)) #s(literal -2/7 binary64))","(* -1 (* (pow eps 7) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(*.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (pow.f64 eps #s(literal 7 binary64)))","(* (pow eps 7) (- (* -1 (/ (+ 2/5 (* 2/3 (/ 1 (pow eps 2)))) (pow eps 2))) 2/7))","(*.f64 (-.f64 (/.f64 (/.f64 (-.f64 #s(literal -2/5 binary64) (/.f64 #s(literal 2/3 binary64) (*.f64 eps eps))) eps) eps) #s(literal 2/7 binary64)) (pow.f64 eps #s(literal 7 binary64)))","(* (pow eps 7) (- (* -1 (/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 4))) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(*.f64 (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal 2/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (pow.f64 eps #s(literal 7 binary64)))","-2/7","#s(literal -2/7 binary64)","(* -1 (+ 2/7 (* 2/5 (/ 1 (pow eps 2)))))","(-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps)))","(- (* -1 (/ (+ 2/5 (* 2/3 (/ 1 (pow eps 2)))) (pow eps 2))) 2/7)","(-.f64 (/.f64 (/.f64 (-.f64 #s(literal -2/5 binary64) (/.f64 #s(literal 2/3 binary64) (*.f64 eps eps))) eps) eps) #s(literal 2/7 binary64))","(- (* -1 (/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 4))) (+ 2/7 (* 2/5 (/ 1 (pow eps 2)))))","(-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal 2/3 binary64)) (pow.f64 eps #s(literal 4 binary64))))","(* -2/3 (pow eps 3))","(*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64))","(* -1 (* (pow eps 3) (+ 2/3 (* 2 (/ 1 (pow eps 2))))))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps)","(* -2/5 (pow eps 5))","(*.f64 (pow.f64 eps #s(literal 5 binary64)) #s(literal -2/5 binary64))","(* -1 (* (pow eps 5) (+ 2/5 (* 2/3 (/ 1 (pow eps 2))))))","(*.f64 (-.f64 #s(literal -2/5 binary64) (/.f64 #s(literal 2/3 binary64) (*.f64 eps eps))) (pow.f64 eps #s(literal 5 binary64)))","(* (pow eps 5) (- (* -1 (/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 2))) 2/5))","(*.f64 (-.f64 (/.f64 (/.f64 (-.f64 #s(literal -2/3 binary64) (/.f64 (/.f64 #s(literal 2 binary64) eps) eps)) eps) eps) #s(literal 2/5 binary64)) (pow.f64 eps #s(literal 5 binary64)))","(* -2/5 (pow eps 4))","(*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal -2/5 binary64))","(* -1 (* (pow eps 4) (+ 2/5 (* 2/3 (/ 1 (pow eps 2))))))","(*.f64 (-.f64 #s(literal -2/5 binary64) (/.f64 #s(literal 2/3 binary64) (*.f64 eps eps))) (pow.f64 eps #s(literal 4 binary64)))","(* -2/5 (pow eps 3))","(*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/5 binary64))","(* -1 (* (pow eps 3) (+ 2/5 (* 2/3 (/ 1 (pow eps 2))))))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) eps)","(* -2/7 (pow eps 6))","(*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -2/7 binary64))","(* -1 (* (pow eps 6) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(*.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (pow.f64 eps #s(literal 6 binary64)))","(* (pow eps 6) (- (* -1 (/ (+ 2/5 (* 2/3 (/ 1 (pow eps 2)))) (pow eps 2))) 2/7))","(*.f64 (-.f64 (/.f64 (/.f64 (-.f64 #s(literal -2/5 binary64) (/.f64 #s(literal 2/3 binary64) (*.f64 eps eps))) eps) eps) #s(literal 2/7 binary64)) (pow.f64 eps #s(literal 6 binary64)))","(* -2/7 (pow eps 5))","(*.f64 (pow.f64 eps #s(literal 5 binary64)) #s(literal -2/7 binary64))","(* -1 (* (pow eps 5) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(*.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (pow.f64 eps #s(literal 5 binary64)))","(* (pow eps 5) (- (* -1 (/ (+ 2/5 (* 2/3 (/ 1 (pow eps 2)))) (pow eps 2))) 2/7))","(*.f64 (pow.f64 eps #s(literal 5 binary64)) (-.f64 (/.f64 (/.f64 (-.f64 #s(literal -2/5 binary64) (/.f64 #s(literal 2/3 binary64) (*.f64 eps eps))) eps) eps) #s(literal 2/7 binary64)))","(/ 2/3 (pow eps 4))","(/.f64 #s(literal 2/3 binary64) (pow.f64 eps #s(literal 4 binary64)))","(/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 4))","(/.f64 (+.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal 2/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))","(* -2/5 (pow eps 2))","(*.f64 (*.f64 eps eps) #s(literal -2/5 binary64))","(* -1 (* (pow eps 2) (+ 2/5 (* 2/3 (/ 1 (pow eps 2))))))","(fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64))","(* -2/7 (pow eps 2))","(*.f64 (*.f64 eps eps) #s(literal -2/7 binary64))","(* -1 (* (pow eps 2) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64))","(* -2/7 (pow eps 4))","(*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal -2/7 binary64))","(* -1 (* (pow eps 4) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(*.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (- (* -1 (/ (+ 2/5 (* 2/3 (/ 1 (pow eps 2)))) (pow eps 2))) 2/7))","(*.f64 (pow.f64 eps #s(literal 4 binary64)) (-.f64 (/.f64 (/.f64 (-.f64 #s(literal -2/5 binary64) (/.f64 #s(literal 2/3 binary64) (*.f64 eps eps))) eps) eps) #s(literal 2/7 binary64)))","(+ (log -1) (* -1 (/ (+ 2 (+ (/ 2/5 (pow eps 4)) (* 2/3 (/ 1 (pow eps 2))))) eps)))","(-.f64 (log.f64 #s(literal -1 binary64)) (/.f64 (+.f64 (+.f64 (/.f64 #s(literal 2/5 binary64) (pow.f64 eps #s(literal 4 binary64))) #s(literal 2 binary64)) (/.f64 #s(literal 2/3 binary64) (*.f64 eps eps))) eps))","(* -1 (* (pow eps 7) (+ 2/7 (+ (/ 2/3 (pow eps 4)) (* 2/5 (/ 1 (pow eps 2)))))))","(*.f64 (-.f64 (/.f64 #s(literal -2/3 binary64) (pow.f64 eps #s(literal 4 binary64))) (+.f64 #s(literal 2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps)))) (pow.f64 eps #s(literal 7 binary64)))","(* -1 (* (pow eps 7) (+ 2/7 (+ (/ 2/3 (pow eps 4)) (+ (* 2/5 (/ 1 (pow eps 2))) (* 2 (/ 1 (pow eps 6))))))))","(*.f64 (-.f64 (+.f64 (/.f64 #s(literal -2 binary64) (pow.f64 eps #s(literal 6 binary64))) #s(literal -2/7 binary64)) (+.f64 (/.f64 #s(literal 2/3 binary64) (pow.f64 eps #s(literal 4 binary64))) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps)))) (pow.f64 eps #s(literal 7 binary64)))","(* -1 (* (pow eps 5) (+ 2/5 (+ (* 2/3 (/ 1 (pow eps 2))) (/ 2 (pow eps 4))))))","(*.f64 (-.f64 (+.f64 (/.f64 #s(literal -2 binary64) (pow.f64 eps #s(literal 4 binary64))) #s(literal -2/5 binary64)) (/.f64 #s(literal 2/3 binary64) (*.f64 eps eps))) (pow.f64 eps #s(literal 5 binary64)))","(* -1 (* (pow eps 5) (+ 2/7 (+ (/ 2/3 (pow eps 4)) (* 2/5 (/ 1 (pow eps 2)))))))","(*.f64 (-.f64 (/.f64 #s(literal -2/3 binary64) (pow.f64 eps #s(literal 4 binary64))) (+.f64 #s(literal 2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps)))) (pow.f64 eps #s(literal 5 binary64)))"]],"stop":[["iter limit",1],["node limit",1]],"time":214.175048828125,"type":"simplify"},{"count":[[23,495]],"egraph":[[0,9608,324,0.094514173],[2,2601,349,0.045927219],[1,365,349,0.01067894],[0,82,349,0.00312633],[0,51,359,0.000692158]],"inputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) #s(approx (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (*.f64 (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal 2/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (pow.f64 eps #s(literal 7 binary64)))))","#s(approx (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (*.f64 (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal 2/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (pow.f64 eps #s(literal 7 binary64))))","(*.f64 (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal 2/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (pow.f64 eps #s(literal 7 binary64)))","(-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal 2/3 binary64)) (pow.f64 eps #s(literal 4 binary64))))","(fma.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) eps (*.f64 #s(literal -2 binary64) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) eps (*.f64 #s(literal -2 binary64) eps)))","(*.f64 #s(literal -2/3 binary64) (*.f64 eps eps))","(*.f64 eps eps)","(fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps)))","(*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps)","(*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps)","(fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps)))","(*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps)","(*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps)","(/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))","(/.f64 (/.f64 #s(literal 2 binary64) eps) eps)","(/.f64 (+.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal 2/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))","(*.f64 #s(literal -2 binary64) eps)","(fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64))","(fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64))","(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))"]],"memory":[[-2850736,70998528]],"outputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) #s(approx (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (*.f64 (pow.f64 eps #s(literal 7 binary64)) (-.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))))))","#s(approx (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (*.f64 (pow.f64 eps #s(literal 7 binary64)) (-.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))))))","(*.f64 (*.f64 (-.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))) (pow.f64 eps #s(literal 7/2 binary64))) (pow.f64 eps #s(literal 7/2 binary64)))","(*.f64 (pow.f64 eps #s(literal 7/2 binary64)) (*.f64 (pow.f64 eps #s(literal 7/2 binary64)) (-.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))))))","(*.f64 (pow.f64 eps #s(literal 7 binary64)) (-.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))))","(*.f64 (-.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))) (pow.f64 eps #s(literal 7 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) (pow.f64 eps #s(literal 7 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (pow.f64 eps #s(literal -4 binary64))) (pow.f64 eps #s(literal 7 binary64))) #s(literal 3 binary64))) (fma.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) (pow.f64 eps #s(literal 7 binary64))) (*.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) (pow.f64 eps #s(literal 7 binary64))) (-.f64 (*.f64 (*.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (pow.f64 eps #s(literal -4 binary64))) (pow.f64 eps #s(literal 7 binary64))) (*.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (pow.f64 eps #s(literal -4 binary64))) (pow.f64 eps #s(literal 7 binary64)))) (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) (pow.f64 eps #s(literal 7 binary64))) (*.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (pow.f64 eps #s(literal -4 binary64))) (pow.f64 eps #s(literal 7 binary64)))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 eps #s(literal 7 binary64)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 (pow.f64 eps #s(literal 7 binary64)) (*.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (pow.f64 eps #s(literal -4 binary64)))) #s(literal 3 binary64))) (fma.f64 (*.f64 (pow.f64 eps #s(literal 7 binary64)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (*.f64 (pow.f64 eps #s(literal 7 binary64)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (-.f64 (*.f64 (*.f64 (pow.f64 eps #s(literal 7 binary64)) (*.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (pow.f64 eps #s(literal -4 binary64)))) (*.f64 (pow.f64 eps #s(literal 7 binary64)) (*.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (pow.f64 eps #s(literal -4 binary64))))) (*.f64 (*.f64 (pow.f64 eps #s(literal 7 binary64)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (*.f64 (pow.f64 eps #s(literal 7 binary64)) (*.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (pow.f64 eps #s(literal -4 binary64))))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 eps #s(literal -8 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) #s(literal 2 binary64)))) (pow.f64 eps #s(literal 7 binary64)))) (neg.f64 (fma.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 3 binary64)) (*.f64 (pow.f64 eps #s(literal -12 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) #s(literal 3 binary64)))) (pow.f64 eps #s(literal 7 binary64)))) (neg.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (fma.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 7 binary64)) (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 eps #s(literal -8 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) #s(literal 2 binary64)))))) (neg.f64 (fma.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)))))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 7 binary64)) (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 3 binary64)) (*.f64 (pow.f64 eps #s(literal -12 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) #s(literal 3 binary64)))))) (neg.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (fma.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 eps #s(literal -8 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) #s(literal 2 binary64)))) (pow.f64 eps #s(literal 7 binary64))) (fma.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 3 binary64)) (*.f64 (pow.f64 eps #s(literal -12 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) #s(literal 3 binary64)))) (pow.f64 eps #s(literal 7 binary64))) (fma.f64 (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (fma.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64))))","(/.f64 (*.f64 (pow.f64 eps #s(literal 7 binary64)) (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 eps #s(literal -8 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) #s(literal 2 binary64))))) (fma.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))))","(/.f64 (*.f64 (pow.f64 eps #s(literal 7 binary64)) (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 3 binary64)) (*.f64 (pow.f64 eps #s(literal -12 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) #s(literal 3 binary64))))) (fma.f64 (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (fma.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64))))","(fma.f64 (pow.f64 eps #s(literal 7 binary64)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) (*.f64 (pow.f64 eps #s(literal 7 binary64)) (*.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (pow.f64 eps #s(literal -4 binary64)))))","(fma.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) (pow.f64 eps #s(literal 7 binary64)) (*.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (pow.f64 eps #s(literal -4 binary64))) (pow.f64 eps #s(literal 7 binary64))))","(+.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) (pow.f64 eps #s(literal 7 binary64))) (*.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (pow.f64 eps #s(literal -4 binary64))) (pow.f64 eps #s(literal 7 binary64))))","(+.f64 (*.f64 (pow.f64 eps #s(literal 7 binary64)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (*.f64 (pow.f64 eps #s(literal 7 binary64)) (*.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (pow.f64 eps #s(literal -4 binary64)))))","(*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 eps #s(literal -8 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) #s(literal 2 binary64)))) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 3 binary64)) (*.f64 (pow.f64 eps #s(literal -12 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (fma.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 eps #s(literal -8 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) #s(literal 2 binary64))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (fma.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 3 binary64)) (*.f64 (pow.f64 eps #s(literal -12 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) #s(literal 3 binary64))))) #s(literal -1 binary64))","(/.f64 (fma.f64 (pow.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) #s(literal 3 binary64)) (pow.f64 eps #s(literal -12 binary64)) (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 3 binary64))) (fma.f64 (pow.f64 eps #s(literal -8 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (pow.f64 eps #s(literal -4 binary64))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))))))","(/.f64 (+.f64 #s(literal -8/343 binary64) (pow.f64 (-.f64 (*.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64))) (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))) #s(literal 3 binary64))) (+.f64 #s(literal 4/49 binary64) (-.f64 (*.f64 (-.f64 (*.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64))) (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))) (-.f64 (*.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64))) (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))))) (*.f64 #s(literal -2/7 binary64) (-.f64 (*.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64))) (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))))))))","(/.f64 (+.f64 #s(literal -8/343 binary64) (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) (*.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (pow.f64 eps #s(literal -4 binary64)))) #s(literal 3 binary64))) (+.f64 #s(literal 4/49 binary64) (-.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) (*.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (pow.f64 eps #s(literal -4 binary64)))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) (*.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (pow.f64 eps #s(literal -4 binary64))))) (*.f64 #s(literal -2/7 binary64) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) (*.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (pow.f64 eps #s(literal -4 binary64))))))))","(/.f64 (+.f64 #s(literal -8/343 binary64) (pow.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))))) #s(literal 3 binary64))) (+.f64 #s(literal 4/49 binary64) (-.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))))) (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))))) (*.f64 #s(literal -2/7 binary64) (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))))))))","(/.f64 (neg.f64 (-.f64 #s(literal 4/49 binary64) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))) #s(literal 2 binary64)))) (neg.f64 (+.f64 #s(literal -2/7 binary64) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal -8/343 binary64) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))) #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 4/49 binary64) (+.f64 (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))) #s(literal 2 binary64)) (*.f64 #s(literal -2/7 binary64) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 eps #s(literal -8 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) #s(literal 2 binary64)))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 3 binary64)) (*.f64 (pow.f64 eps #s(literal -12 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) #s(literal 3 binary64)))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (fma.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (*.f64 (-.f64 #s(literal 4/49 binary64) (/.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)))) (neg.f64 (pow.f64 eps #s(literal 4 binary64)))) (*.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(literal -2/7 binary64)) (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))))) (neg.f64 (*.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(literal -2/7 binary64)) (neg.f64 (pow.f64 eps #s(literal 4 binary64))))))","(/.f64 (neg.f64 (-.f64 (*.f64 (-.f64 #s(literal 4/49 binary64) (/.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)))) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(literal -2/7 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))))) (neg.f64 (*.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(literal -2/7 binary64)) (pow.f64 eps #s(literal 4 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (-.f64 #s(literal 4/49 binary64) (/.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)))) (/.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))) (*.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(literal -2/7 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(literal -2/7 binary64)) (/.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))))))","(/.f64 (neg.f64 (-.f64 (*.f64 (-.f64 #s(literal -8/343 binary64) (*.f64 (pow.f64 eps #s(literal -6 binary64)) #s(literal 8/125 binary64))) (neg.f64 (pow.f64 eps #s(literal 4 binary64)))) (*.f64 (+.f64 (fma.f64 #s(literal -4/35 binary64) (pow.f64 eps #s(literal -2 binary64)) (/.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)))) #s(literal 4/49 binary64)) (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))))) (neg.f64 (*.f64 (+.f64 (fma.f64 #s(literal -4/35 binary64) (pow.f64 eps #s(literal -2 binary64)) (/.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)))) #s(literal 4/49 binary64)) (neg.f64 (pow.f64 eps #s(literal 4 binary64))))))","(/.f64 (neg.f64 (-.f64 (*.f64 (-.f64 #s(literal -8/343 binary64) (*.f64 (pow.f64 eps #s(literal -6 binary64)) #s(literal 8/125 binary64))) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (+.f64 (fma.f64 #s(literal -4/35 binary64) (pow.f64 eps #s(literal -2 binary64)) (/.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)))) #s(literal 4/49 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))))) (neg.f64 (*.f64 (+.f64 (fma.f64 #s(literal -4/35 binary64) (pow.f64 eps #s(literal -2 binary64)) (/.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)))) #s(literal 4/49 binary64)) (pow.f64 eps #s(literal 4 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (-.f64 #s(literal -8/343 binary64) (*.f64 (pow.f64 eps #s(literal -6 binary64)) #s(literal 8/125 binary64))) (/.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))) (*.f64 (+.f64 (fma.f64 #s(literal -4/35 binary64) (pow.f64 eps #s(literal -2 binary64)) (/.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)))) #s(literal 4/49 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (+.f64 (fma.f64 #s(literal -4/35 binary64) (pow.f64 eps #s(literal -2 binary64)) (/.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)))) #s(literal 4/49 binary64)) (/.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))))))","(/.f64 (-.f64 #s(literal 4/49 binary64) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))) #s(literal 2 binary64))) (+.f64 #s(literal -2/7 binary64) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))))))","(/.f64 (-.f64 #s(literal -8/343 binary64) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))) #s(literal 3 binary64))) (+.f64 #s(literal 4/49 binary64) (+.f64 (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))) #s(literal 2 binary64)) (*.f64 #s(literal -2/7 binary64) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 eps #s(literal -8 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) #s(literal 2 binary64))))) (neg.f64 (-.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) (*.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (pow.f64 eps #s(literal -4 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 eps #s(literal -8 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) #s(literal 2 binary64))))) (neg.f64 (fma.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 3 binary64)) (*.f64 (pow.f64 eps #s(literal -12 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) #s(literal 3 binary64))))) (neg.f64 (+.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 eps #s(literal -8 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) (*.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (pow.f64 eps #s(literal -4 binary64))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 3 binary64)) (*.f64 (pow.f64 eps #s(literal -12 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (fma.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 4/49 binary64) (/.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)))) (neg.f64 (pow.f64 eps #s(literal 4 binary64)))) (*.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(literal -2/7 binary64)) (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))))) (*.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(literal -2/7 binary64)) (neg.f64 (pow.f64 eps #s(literal 4 binary64)))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 4/49 binary64) (/.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)))) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(literal -2/7 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))) (*.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(literal -2/7 binary64)) (pow.f64 eps #s(literal 4 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 4/49 binary64) (/.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)))) (/.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))) (*.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(literal -2/7 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(literal -2/7 binary64)) (/.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal -8/343 binary64) (*.f64 (pow.f64 eps #s(literal -6 binary64)) #s(literal 8/125 binary64))) (neg.f64 (pow.f64 eps #s(literal 4 binary64)))) (*.f64 (+.f64 (fma.f64 #s(literal -4/35 binary64) (pow.f64 eps #s(literal -2 binary64)) (/.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)))) #s(literal 4/49 binary64)) (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))))) (*.f64 (+.f64 (fma.f64 #s(literal -4/35 binary64) (pow.f64 eps #s(literal -2 binary64)) (/.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)))) #s(literal 4/49 binary64)) (neg.f64 (pow.f64 eps #s(literal 4 binary64)))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal -8/343 binary64) (*.f64 (pow.f64 eps #s(literal -6 binary64)) #s(literal 8/125 binary64))) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (+.f64 (fma.f64 #s(literal -4/35 binary64) (pow.f64 eps #s(literal -2 binary64)) (/.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)))) #s(literal 4/49 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))) (*.f64 (+.f64 (fma.f64 #s(literal -4/35 binary64) (pow.f64 eps #s(literal -2 binary64)) (/.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)))) #s(literal 4/49 binary64)) (pow.f64 eps #s(literal 4 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal -8/343 binary64) (*.f64 (pow.f64 eps #s(literal -6 binary64)) #s(literal 8/125 binary64))) (/.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))) (*.f64 (+.f64 (fma.f64 #s(literal -4/35 binary64) (pow.f64 eps #s(literal -2 binary64)) (/.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)))) #s(literal 4/49 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 (fma.f64 #s(literal -4/35 binary64) (pow.f64 eps #s(literal -2 binary64)) (/.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)))) #s(literal 4/49 binary64)) (/.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 eps #s(literal -8 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) #s(literal 2 binary64)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (fma.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 3 binary64)) (*.f64 (pow.f64 eps #s(literal -12 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) #s(literal 3 binary64)))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 eps #s(literal -8 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) #s(literal 2 binary64)))) (-.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) (*.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (pow.f64 eps #s(literal -4 binary64)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 eps #s(literal -8 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) #s(literal 2 binary64)))) (fma.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))))","(/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 3 binary64)) (*.f64 (pow.f64 eps #s(literal -12 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) #s(literal 3 binary64)))) (+.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 eps #s(literal -8 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) (*.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (pow.f64 eps #s(literal -4 binary64)))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 3 binary64)) (*.f64 (pow.f64 eps #s(literal -12 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) #s(literal 3 binary64)))) (fma.f64 (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (fma.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 eps #s(literal -8 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (fma.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 3 binary64)) (*.f64 (pow.f64 eps #s(literal -12 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) #s(literal 3 binary64))))))","(fma.f64 (/.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))) (/.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) eps) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (*.f64 eps eps)) (/.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) (*.f64 eps eps)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) eps) (/.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)))","(fma.f64 (/.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 eps #s(literal -4 binary64)) #s(literal -4/9 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2/3 binary64)) #s(literal -1 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)))","(fma.f64 (/.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 eps #s(literal -4 binary64)) #s(literal -4/9 binary64)) (*.f64 (neg.f64 eps) eps)) (/.f64 (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2/3 binary64)) #s(literal -1 binary64)) (*.f64 eps eps)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)))","(fma.f64 (/.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 eps #s(literal -4 binary64)) #s(literal -4/9 binary64)) (*.f64 eps eps)) (/.f64 (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2/3 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 eps) eps)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)))","(fma.f64 (/.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 eps #s(literal -6 binary64)) #s(literal 8/27 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 eps #s(literal -4 binary64)) (-.f64 #s(literal 4/9 binary64) (/.f64 #s(literal 4/3 binary64) (*.f64 eps eps)))) #s(literal -1 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)))","(fma.f64 (/.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 eps #s(literal -6 binary64)) #s(literal 8/27 binary64)) (*.f64 (neg.f64 eps) eps)) (/.f64 (pow.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 eps #s(literal -4 binary64)) (-.f64 #s(literal 4/9 binary64) (/.f64 #s(literal 4/3 binary64) (*.f64 eps eps)))) #s(literal -1 binary64)) (*.f64 eps eps)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)))","(fma.f64 (/.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 eps #s(literal -6 binary64)) #s(literal 8/27 binary64)) (*.f64 eps eps)) (/.f64 (pow.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 eps #s(literal -4 binary64)) (-.f64 #s(literal 4/9 binary64) (/.f64 #s(literal 4/3 binary64) (*.f64 eps eps)))) #s(literal -1 binary64)) (*.f64 (neg.f64 eps) eps)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)))","(fma.f64 #s(literal -1 binary64) (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)))","(fma.f64 (-.f64 #s(literal 4/49 binary64) (/.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)))) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(literal -2/7 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (pow.f64 eps #s(literal -4 binary64))))","(fma.f64 (-.f64 #s(literal -8/343 binary64) (*.f64 (pow.f64 eps #s(literal -6 binary64)) #s(literal 8/125 binary64))) (pow.f64 (+.f64 (fma.f64 #s(literal -4/35 binary64) (pow.f64 eps #s(literal -2 binary64)) (/.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)))) #s(literal 4/49 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (pow.f64 eps #s(literal -4 binary64))))","(fma.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (pow.f64 eps #s(literal -4 binary64)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)))","(fma.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) (neg.f64 (pow.f64 eps #s(literal -4 binary64))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)))","(-.f64 (/.f64 #s(literal 4/49 binary64) (+.f64 #s(literal -2/7 binary64) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))))) (/.f64 (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))) #s(literal 2 binary64)) (+.f64 #s(literal -2/7 binary64) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)) (-.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) (*.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (pow.f64 eps #s(literal -4 binary64))))) (/.f64 (*.f64 (pow.f64 eps #s(literal -8 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) #s(literal 2 binary64))) (-.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) (*.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (pow.f64 eps #s(literal -4 binary64))))))","(-.f64 (/.f64 #s(literal -8/343 binary64) (+.f64 #s(literal 4/49 binary64) (+.f64 (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))) #s(literal 2 binary64)) (*.f64 #s(literal -2/7 binary64) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))))))) (/.f64 (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))) #s(literal 3 binary64)) (+.f64 #s(literal 4/49 binary64) (+.f64 (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))) #s(literal 2 binary64)) (*.f64 #s(literal -2/7 binary64) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))))))))","(-.f64 (/.f64 (*.f64 (-.f64 #s(literal 4/49 binary64) (/.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)))) (neg.f64 (pow.f64 eps #s(literal 4 binary64)))) (*.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(literal -2/7 binary64)) (neg.f64 (pow.f64 eps #s(literal 4 binary64))))) (/.f64 (*.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(literal -2/7 binary64)) (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))) (*.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(literal -2/7 binary64)) (neg.f64 (pow.f64 eps #s(literal 4 binary64))))))","(-.f64 (/.f64 (*.f64 (-.f64 #s(literal 4/49 binary64) (/.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)))) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(literal -2/7 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (/.f64 (*.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(literal -2/7 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (*.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(literal -2/7 binary64)) (pow.f64 eps #s(literal 4 binary64)))))","(-.f64 (/.f64 (*.f64 (-.f64 #s(literal 4/49 binary64) (/.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)))) (/.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))) (*.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(literal -2/7 binary64)) (/.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))))) (/.f64 (*.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(literal -2/7 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(literal -2/7 binary64)) (/.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))))))","(-.f64 (/.f64 (*.f64 (-.f64 #s(literal -8/343 binary64) (*.f64 (pow.f64 eps #s(literal -6 binary64)) #s(literal 8/125 binary64))) (neg.f64 (pow.f64 eps #s(literal 4 binary64)))) (*.f64 (+.f64 (fma.f64 #s(literal -4/35 binary64) (pow.f64 eps #s(literal -2 binary64)) (/.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)))) #s(literal 4/49 binary64)) (neg.f64 (pow.f64 eps #s(literal 4 binary64))))) (/.f64 (*.f64 (+.f64 (fma.f64 #s(literal -4/35 binary64) (pow.f64 eps #s(literal -2 binary64)) (/.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)))) #s(literal 4/49 binary64)) (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))) (*.f64 (+.f64 (fma.f64 #s(literal -4/35 binary64) (pow.f64 eps #s(literal -2 binary64)) (/.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)))) #s(literal 4/49 binary64)) (neg.f64 (pow.f64 eps #s(literal 4 binary64))))))","(-.f64 (/.f64 (*.f64 (-.f64 #s(literal -8/343 binary64) (*.f64 (pow.f64 eps #s(literal -6 binary64)) #s(literal 8/125 binary64))) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (+.f64 (fma.f64 #s(literal -4/35 binary64) (pow.f64 eps #s(literal -2 binary64)) (/.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)))) #s(literal 4/49 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (/.f64 (*.f64 (+.f64 (fma.f64 #s(literal -4/35 binary64) (pow.f64 eps #s(literal -2 binary64)) (/.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)))) #s(literal 4/49 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (*.f64 (+.f64 (fma.f64 #s(literal -4/35 binary64) (pow.f64 eps #s(literal -2 binary64)) (/.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)))) #s(literal 4/49 binary64)) (pow.f64 eps #s(literal 4 binary64)))))","(-.f64 (/.f64 (*.f64 (-.f64 #s(literal -8/343 binary64) (*.f64 (pow.f64 eps #s(literal -6 binary64)) #s(literal 8/125 binary64))) (/.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))) (*.f64 (+.f64 (fma.f64 #s(literal -4/35 binary64) (pow.f64 eps #s(literal -2 binary64)) (/.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)))) #s(literal 4/49 binary64)) (/.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))))) (/.f64 (*.f64 (+.f64 (fma.f64 #s(literal -4/35 binary64) (pow.f64 eps #s(literal -2 binary64)) (/.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)))) #s(literal 4/49 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 #s(literal -4/35 binary64) (pow.f64 eps #s(literal -2 binary64)) (/.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)))) #s(literal 4/49 binary64)) (/.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)))) (/.f64 (*.f64 (pow.f64 eps #s(literal -8 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) #s(literal 2 binary64))) (fma.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)))))","(-.f64 (/.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (fma.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)))) (/.f64 (*.f64 (pow.f64 eps #s(literal -12 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (fma.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)))))","(-.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))))","(-.f64 #s(literal -2/7 binary64) (-.f64 (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps)) (*.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (pow.f64 eps #s(literal -4 binary64)))))","(-.f64 #s(literal -2/7 binary64) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))))","(+.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (pow.f64 eps #s(literal -4 binary64))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)))","(+.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) (*.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (pow.f64 eps #s(literal -4 binary64))))","(+.f64 #s(literal -2/7 binary64) (-.f64 (*.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64))) (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))))","(+.f64 #s(literal -2/7 binary64) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) (*.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (pow.f64 eps #s(literal -4 binary64)))))","(+.f64 #s(literal -2/7 binary64) (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))))))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps) eps) (/.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64) (*.f64 #s(literal 2 binary64) eps)) (-.f64 (*.f64 (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal -2 binary64))))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps)","(*.f64 (-.f64 (*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 4/9 binary64)) (*.f64 #s(literal 4 binary64) (*.f64 eps eps))) (pow.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64) (*.f64 #s(literal 2 binary64) eps)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 eps #s(literal 9 binary64)) #s(literal -8/27 binary64) (pow.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 4/9 binary64) (*.f64 (*.f64 #s(literal -2 binary64) eps) (-.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64))))) #s(literal -1 binary64)))","(*.f64 eps (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)))","(pow.f64 (/.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64) (*.f64 #s(literal 2 binary64) eps)) (-.f64 (*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 4/9 binary64)) (*.f64 #s(literal 4 binary64) (*.f64 eps eps)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 4/9 binary64) (*.f64 (*.f64 #s(literal -2 binary64) eps) (-.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64))))) (fma.f64 (pow.f64 eps #s(literal 9 binary64)) #s(literal -8/27 binary64) (pow.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 4 binary64) (*.f64 eps eps)) (*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 4/9 binary64)))) (neg.f64 (-.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 4/9 binary64)) (*.f64 #s(literal 4 binary64) (*.f64 eps eps))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64) (*.f64 #s(literal 2 binary64) eps)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 9 binary64)) #s(literal -8/27 binary64) (pow.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 4/9 binary64) (*.f64 (*.f64 #s(literal -2 binary64) eps) (-.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64))))))))","(/.f64 (-.f64 (*.f64 #s(literal 4 binary64) (*.f64 eps eps)) (*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 4/9 binary64))) (-.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 4/9 binary64)) (*.f64 #s(literal 4 binary64) (*.f64 eps eps)))) (neg.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64) (*.f64 #s(literal 2 binary64) eps))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 9 binary64)) #s(literal -8/27 binary64) (pow.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(literal 4 binary64) (*.f64 eps eps) (-.f64 (*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 4/9 binary64)) (*.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64)) (*.f64 #s(literal -2 binary64) eps))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 9 binary64)) #s(literal -8/27 binary64) (pow.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 4/9 binary64) (*.f64 (*.f64 #s(literal -2 binary64) eps) (-.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64) (*.f64 #s(literal 2 binary64) eps)) (-.f64 (*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 4/9 binary64)) (*.f64 #s(literal 4 binary64) (*.f64 eps eps))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 4/9 binary64) (*.f64 (*.f64 #s(literal -2 binary64) eps) (-.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64))))) (fma.f64 (pow.f64 eps #s(literal 9 binary64)) #s(literal -8/27 binary64) (pow.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 3 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 4/9 binary64)) (*.f64 #s(literal 4 binary64) (*.f64 eps eps))) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64) (*.f64 #s(literal 2 binary64) eps)))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 9 binary64)) #s(literal -8/27 binary64) (pow.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 3 binary64))) (fma.f64 #s(literal 4 binary64) (*.f64 eps eps) (-.f64 (*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 4/9 binary64)) (*.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64)) (*.f64 #s(literal -2 binary64) eps)))))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 9 binary64)) #s(literal -8/27 binary64) (pow.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 3 binary64))) (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 4/9 binary64) (*.f64 (*.f64 #s(literal -2 binary64) eps) (-.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64) (*.f64 #s(literal 2 binary64) eps)) (-.f64 (*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 4/9 binary64)) (*.f64 #s(literal 4 binary64) (*.f64 eps eps)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 4/9 binary64) (*.f64 (*.f64 #s(literal -2 binary64) eps) (-.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64))))) (fma.f64 (pow.f64 eps #s(literal 9 binary64)) #s(literal -8/27 binary64) (pow.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 3 binary64)))))","(fma.f64 (*.f64 #s(literal -2/3 binary64) eps) (*.f64 eps eps) (*.f64 #s(literal -2 binary64) eps))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64) (*.f64 #s(literal -2 binary64) eps))","(fma.f64 (*.f64 (*.f64 eps eps) #s(literal -2/3 binary64)) eps (*.f64 #s(literal -2 binary64) eps))","(fma.f64 (*.f64 eps eps) (*.f64 #s(literal -2/3 binary64) eps) (*.f64 #s(literal -2 binary64) eps))","(fma.f64 #s(literal -2 binary64) eps (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64)))","(fma.f64 #s(literal -2/3 binary64) (pow.f64 eps #s(literal 3 binary64)) (*.f64 #s(literal -2 binary64) eps))","(fma.f64 eps (*.f64 (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 #s(literal -2 binary64) eps))","(fma.f64 eps #s(literal -2 binary64) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64)))","(-.f64 (/.f64 (*.f64 #s(literal 4 binary64) (*.f64 eps eps)) (-.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64)))) (/.f64 (*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 4/9 binary64)) (-.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64)))))","(-.f64 (/.f64 (*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 4/9 binary64)) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64) (*.f64 #s(literal 2 binary64) eps))) (/.f64 (*.f64 #s(literal 4 binary64) (*.f64 eps eps)) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64) (*.f64 #s(literal 2 binary64) eps))))","(+.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64)) (*.f64 #s(literal -2 binary64) eps))","(+.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64)))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","(*.f64 (*.f64 #s(literal -2/3 binary64) eps) eps)","(*.f64 (*.f64 eps eps) #s(literal -2/3 binary64))","(*.f64 #s(literal -2/3 binary64) (*.f64 eps eps))","(*.f64 eps (*.f64 #s(literal -2/3 binary64) eps))","(*.f64 (neg.f64 eps) (neg.f64 eps))","(*.f64 (*.f64 eps eps) #s(literal 1 binary64))","(*.f64 eps eps)","(*.f64 #s(literal 1 binary64) (*.f64 eps eps))","(pow.f64 (neg.f64 eps) #s(literal 2 binary64))","(pow.f64 (*.f64 eps eps) #s(literal 1 binary64))","(pow.f64 eps #s(literal 2 binary64))","(exp.f64 (*.f64 (log.f64 eps) #s(literal 2 binary64)))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) eps) eps #s(literal -2 binary64)) eps) eps) (/.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 3 binary64)) (*.f64 #s(literal 2 binary64) eps)) (-.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) eps) eps) #s(literal -2 binary64))))","(*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) eps) eps #s(literal -2 binary64)) eps)","(*.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))) (*.f64 #s(literal 4 binary64) (*.f64 eps eps))) (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 3 binary64)) (*.f64 #s(literal 2 binary64) eps)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 9 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) eps) (-.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 3 binary64)))))) #s(literal -1 binary64)))","(*.f64 eps (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) eps) eps #s(literal -2 binary64)))","(pow.f64 (/.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 3 binary64)) (*.f64 #s(literal 2 binary64) eps)) (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))) (*.f64 #s(literal 4 binary64) (*.f64 eps eps)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) eps) (-.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 3 binary64)))))) (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 9 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 4 binary64) (*.f64 eps eps)) (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))))) (neg.f64 (-.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 3 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))) (*.f64 #s(literal 4 binary64) (*.f64 eps eps))))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 3 binary64)) (*.f64 #s(literal 2 binary64) eps)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 9 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) eps) (-.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 3 binary64)))))))))","(/.f64 (-.f64 (*.f64 #s(literal 4 binary64) (*.f64 eps eps)) (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64)))) (-.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))) (*.f64 #s(literal 4 binary64) (*.f64 eps eps)))) (neg.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 3 binary64)) (*.f64 #s(literal 2 binary64) eps))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 9 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(literal 4 binary64) (*.f64 eps eps) (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 #s(literal -2 binary64) eps))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 9 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) eps) (-.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 3 binary64))))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 3 binary64)) (*.f64 #s(literal 2 binary64) eps)) (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))) (*.f64 #s(literal 4 binary64) (*.f64 eps eps))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) eps) (-.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 3 binary64)))))) (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 9 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 3 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))) (*.f64 #s(literal 4 binary64) (*.f64 eps eps))) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 3 binary64)) (*.f64 #s(literal 2 binary64) eps)))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 9 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 3 binary64))) (fma.f64 #s(literal 4 binary64) (*.f64 eps eps) (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 #s(literal -2 binary64) eps)))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 9 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 3 binary64))) (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) eps) (-.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 3 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 3 binary64)) (*.f64 #s(literal 2 binary64) eps)) (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))) (*.f64 #s(literal 4 binary64) (*.f64 eps eps)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) eps) (-.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 3 binary64)))))) (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 9 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 3 binary64)))))","(fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps))","(fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) eps) (*.f64 eps eps) (*.f64 #s(literal -2 binary64) eps))","(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 3 binary64)) (*.f64 #s(literal -2 binary64) eps))","(fma.f64 (*.f64 eps eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps))","(fma.f64 #s(literal -2 binary64) eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 3 binary64))))","(fma.f64 eps (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) eps) eps) (*.f64 #s(literal -2 binary64) eps))","(fma.f64 eps #s(literal -2 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 3 binary64))))","(-.f64 (/.f64 (*.f64 #s(literal 4 binary64) (*.f64 eps eps)) (-.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (/.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))) (-.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 3 binary64))))))","(-.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 3 binary64)) (*.f64 #s(literal 2 binary64) eps))) (/.f64 (*.f64 #s(literal 4 binary64) (*.f64 eps eps)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 3 binary64)) (*.f64 #s(literal 2 binary64) eps))))","(+.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 #s(literal -2 binary64) eps))","(+.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 3 binary64))))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) eps) eps #s(literal -2 binary64)) eps))","(*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) eps) eps)","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) (*.f64 eps eps))","(*.f64 (*.f64 eps eps) (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)))","(*.f64 eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) eps))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/9 binary64)) (*.f64 eps eps))) (neg.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal 2/3 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/125 binary64) #s(literal -8/27 binary64)) (*.f64 eps eps))) (neg.f64 (fma.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 4/9 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/15 binary64))))))","(/.f64 (*.f64 (fma.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/9 binary64)) (*.f64 eps eps)) (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal 2/3 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/125 binary64) #s(literal -8/27 binary64)) (*.f64 eps eps)) (fma.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 4/9 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/15 binary64)))))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) eps)","(*.f64 eps (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal -2/5 binary64)) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -2/3 binary64) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal -2/5 binary64)) eps) (*.f64 (*.f64 (*.f64 eps eps) #s(literal -2/5 binary64)) eps) (-.f64 (*.f64 (*.f64 #s(literal -2/3 binary64) eps) (*.f64 #s(literal -2/3 binary64) eps)) (*.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal -2/5 binary64)) eps) (*.f64 #s(literal -2/3 binary64) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 eps (*.f64 (*.f64 eps eps) #s(literal -2/5 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -2/3 binary64) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 eps (*.f64 (*.f64 eps eps) #s(literal -2/5 binary64))) (*.f64 eps (*.f64 (*.f64 eps eps) #s(literal -2/5 binary64))) (-.f64 (*.f64 (*.f64 #s(literal -2/3 binary64) eps) (*.f64 #s(literal -2/3 binary64) eps)) (*.f64 (*.f64 eps (*.f64 (*.f64 eps eps) #s(literal -2/5 binary64))) (*.f64 #s(literal -2/3 binary64) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal -2/3 binary64) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal -2/5 binary64)) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) (*.f64 #s(literal -2/3 binary64) eps) (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal -2/5 binary64)) eps) (*.f64 (*.f64 (*.f64 eps eps) #s(literal -2/5 binary64)) eps)) (*.f64 (*.f64 #s(literal -2/3 binary64) eps) (*.f64 (*.f64 (*.f64 eps eps) #s(literal -2/5 binary64)) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal -2/3 binary64) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 eps (*.f64 (*.f64 eps eps) #s(literal -2/5 binary64))) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) (*.f64 #s(literal -2/3 binary64) eps) (-.f64 (*.f64 (*.f64 eps (*.f64 (*.f64 eps eps) #s(literal -2/5 binary64))) (*.f64 eps (*.f64 (*.f64 eps eps) #s(literal -2/5 binary64)))) (*.f64 (*.f64 #s(literal -2/3 binary64) eps) (*.f64 eps (*.f64 (*.f64 eps eps) #s(literal -2/5 binary64)))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/9 binary64)) eps)) (neg.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal 2/3 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/125 binary64) #s(literal -8/27 binary64)) eps)) (neg.f64 (fma.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 4/9 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/15 binary64))))))","(/.f64 (neg.f64 (*.f64 eps (fma.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/9 binary64)))) (neg.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal 2/3 binary64))))","(/.f64 (neg.f64 (*.f64 eps (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/125 binary64) #s(literal -8/27 binary64)))) (neg.f64 (fma.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 4/9 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/15 binary64))))))","(/.f64 (*.f64 (fma.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/9 binary64)) eps) (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal 2/3 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/125 binary64) #s(literal -8/27 binary64)) eps) (fma.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 4/9 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/15 binary64)))))","(/.f64 (*.f64 eps (fma.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/9 binary64))) (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal 2/3 binary64)))","(/.f64 (*.f64 eps (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/125 binary64) #s(literal -8/27 binary64))) (fma.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 4/9 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/15 binary64)))))","(fma.f64 (*.f64 (*.f64 eps eps) #s(literal -2/5 binary64)) eps (*.f64 #s(literal -2/3 binary64) eps))","(fma.f64 #s(literal -2/3 binary64) eps (*.f64 (*.f64 (*.f64 eps eps) #s(literal -2/5 binary64)) eps))","(fma.f64 #s(literal -2/3 binary64) eps (*.f64 eps (*.f64 (*.f64 eps eps) #s(literal -2/5 binary64))))","(fma.f64 eps (*.f64 (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 #s(literal -2/3 binary64) eps))","(fma.f64 eps #s(literal -2/3 binary64) (*.f64 (*.f64 (*.f64 eps eps) #s(literal -2/5 binary64)) eps))","(fma.f64 eps #s(literal -2/3 binary64) (*.f64 eps (*.f64 (*.f64 eps eps) #s(literal -2/5 binary64))))","(+.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal -2/5 binary64)) eps) (*.f64 #s(literal -2/3 binary64) eps))","(+.f64 (*.f64 eps (*.f64 (*.f64 eps eps) #s(literal -2/5 binary64))) (*.f64 #s(literal -2/3 binary64) eps))","(+.f64 (*.f64 #s(literal -2/3 binary64) eps) (*.f64 (*.f64 (*.f64 eps eps) #s(literal -2/5 binary64)) eps))","(+.f64 (*.f64 #s(literal -2/3 binary64) eps) (*.f64 eps (*.f64 (*.f64 eps eps) #s(literal -2/5 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 #s(literal -2 binary64) eps)) eps) (/.f64 (*.f64 eps (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps #s(literal 2 binary64))) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps #s(literal 2 binary64))))","(*.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))) (*.f64 #s(literal 4 binary64) (*.f64 eps eps))) (pow.f64 (*.f64 eps (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) eps) (-.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)))))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps #s(literal -2 binary64)) eps)","(*.f64 eps (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps #s(literal -2 binary64)))","(pow.f64 (/.f64 (*.f64 eps (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps #s(literal 2 binary64))) (-.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))) (*.f64 #s(literal 4 binary64) (*.f64 eps eps)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) eps) (-.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)))))) (fma.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)) eps)) (neg.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)) eps)) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps)))))","(/.f64 (neg.f64 (*.f64 eps (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)))) (neg.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 eps (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps)))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 4 binary64) (*.f64 eps eps)) (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))))) (neg.f64 (-.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))) (*.f64 #s(literal 4 binary64) (*.f64 eps eps))))) (neg.f64 (neg.f64 (*.f64 eps (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) eps) (-.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)))))))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)) eps) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps #s(literal 2 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)) eps) (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps))))","(/.f64 (*.f64 eps (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64))) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps #s(literal 2 binary64)))","(/.f64 (*.f64 eps (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64))) (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps))))","(/.f64 (-.f64 (*.f64 #s(literal 4 binary64) (*.f64 eps eps)) (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64)))) (-.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))) (*.f64 #s(literal 4 binary64) (*.f64 eps eps)))) (neg.f64 (*.f64 eps (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(literal 4 binary64) (*.f64 eps eps) (-.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))) (*.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))) (*.f64 #s(literal -2 binary64) eps))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) eps) (-.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 eps (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps #s(literal 2 binary64))) (-.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))) (*.f64 #s(literal 4 binary64) (*.f64 eps eps))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) eps) (-.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)))))) (fma.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 3 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))) (*.f64 #s(literal 4 binary64) (*.f64 eps eps))) (*.f64 eps (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps #s(literal 2 binary64))))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 3 binary64))) (fma.f64 #s(literal 4 binary64) (*.f64 eps eps) (-.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))) (*.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))) (*.f64 #s(literal -2 binary64) eps)))))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 3 binary64))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) eps) (-.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 eps (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps #s(literal 2 binary64))) (-.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))) (*.f64 #s(literal 4 binary64) (*.f64 eps eps)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) eps) (-.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)))))) (fma.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 3 binary64)))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 #s(literal -2 binary64) eps))","(fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 eps eps) (*.f64 #s(literal -2 binary64) eps))","(fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 3 binary64)) (*.f64 #s(literal -2 binary64) eps))","(fma.f64 (*.f64 eps eps) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 #s(literal -2 binary64) eps))","(fma.f64 #s(literal -2 binary64) eps (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))))","(fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps))","(fma.f64 eps #s(literal -2 binary64) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))))","(fma.f64 eps (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) (*.f64 #s(literal -2 binary64) eps))","(-.f64 (/.f64 (*.f64 #s(literal 4 binary64) (*.f64 eps eps)) (-.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))))) (/.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))) (-.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))))))","(-.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))) (*.f64 eps (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps #s(literal 2 binary64)))) (*.f64 (/.f64 (*.f64 eps eps) eps) (/.f64 #s(literal 4 binary64) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps #s(literal 2 binary64)))))","(+.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))) (*.f64 #s(literal -2 binary64) eps))","(+.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 #s(literal -2 binary64) eps)))","(*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps)","(*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps))","(*.f64 (*.f64 eps eps) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)))","(*.f64 eps (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps) (*.f64 eps eps)) #s(literal 3 binary64)) (*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64))) (fma.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps) (*.f64 eps eps)) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps) (*.f64 eps eps)) (-.f64 (pow.f64 (*.f64 (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps) (*.f64 eps eps)) (*.f64 (*.f64 eps eps) #s(literal -2/3 binary64))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps)) #s(literal 3 binary64)) (*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64))) (fma.f64 (*.f64 (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps)) (*.f64 (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps)) (-.f64 (pow.f64 (*.f64 (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps)) (*.f64 (*.f64 eps eps) #s(literal -2/3 binary64))))))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64) (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps) (*.f64 eps eps)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps) (*.f64 eps eps)) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps) (*.f64 eps eps))) (*.f64 (*.f64 (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps) (*.f64 eps eps))))))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64) (pow.f64 (*.f64 (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps)) (*.f64 (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps))) (*.f64 (*.f64 (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/9 binary64)) (*.f64 eps eps))) (neg.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64)) (*.f64 eps eps))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) (*.f64 #s(literal -2/3 binary64) eps)))))","(/.f64 (neg.f64 (*.f64 (*.f64 eps eps) (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/9 binary64)))) (neg.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64))))","(/.f64 (neg.f64 (*.f64 (*.f64 eps eps) (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64)))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) (*.f64 #s(literal -2/3 binary64) eps)))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/9 binary64)) (*.f64 eps eps)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64)) (*.f64 eps eps)) (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) (*.f64 #s(literal -2/3 binary64) eps))))","(/.f64 (*.f64 (*.f64 eps eps) (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/9 binary64))) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64)))","(/.f64 (*.f64 (*.f64 eps eps) (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64))) (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) (*.f64 #s(literal -2/3 binary64) eps))))","(fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps) (*.f64 eps eps)))","(fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps (*.f64 (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps)))","(fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps) (*.f64 eps eps) (*.f64 (*.f64 eps eps) #s(literal -2/3 binary64)))","(fma.f64 (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps) (*.f64 (*.f64 eps eps) #s(literal -2/3 binary64)))","(fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps) (*.f64 eps eps)))","(fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) (*.f64 (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps)))","(fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps) (*.f64 eps eps)))","(fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) (*.f64 (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps)))","(fma.f64 eps (*.f64 #s(literal -2/3 binary64) eps) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps) (*.f64 eps eps)))","(fma.f64 eps (*.f64 #s(literal -2/3 binary64) eps) (*.f64 (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps)))","(+.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps) (*.f64 eps eps)) (*.f64 (*.f64 eps eps) #s(literal -2/3 binary64)))","(+.f64 (*.f64 (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps)) (*.f64 (*.f64 eps eps) #s(literal -2/3 binary64)))","(+.f64 (*.f64 (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps) (*.f64 eps eps)))","(+.f64 (*.f64 (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps)))","(*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps)","(*.f64 eps (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -2/3 binary64) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps) eps) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps) eps) (-.f64 (*.f64 (*.f64 #s(literal -2/3 binary64) eps) (*.f64 #s(literal -2/3 binary64) eps)) (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps) eps) (*.f64 #s(literal -2/3 binary64) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 eps (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -2/3 binary64) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 eps (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps)) (*.f64 eps (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps)) (-.f64 (*.f64 (*.f64 #s(literal -2/3 binary64) eps) (*.f64 #s(literal -2/3 binary64) eps)) (*.f64 (*.f64 eps (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps)) (*.f64 #s(literal -2/3 binary64) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal -2/3 binary64) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) (*.f64 #s(literal -2/3 binary64) eps) (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps) eps) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps) eps)) (*.f64 (*.f64 #s(literal -2/3 binary64) eps) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal -2/3 binary64) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 eps (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps)) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) (*.f64 #s(literal -2/3 binary64) eps) (-.f64 (*.f64 (*.f64 eps (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps)) (*.f64 eps (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps))) (*.f64 (*.f64 #s(literal -2/3 binary64) eps) (*.f64 eps (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/9 binary64)) eps)) (neg.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64)) eps)) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) (*.f64 #s(literal -2/3 binary64) eps)))))","(/.f64 (neg.f64 (*.f64 eps (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/9 binary64)))) (neg.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64))))","(/.f64 (neg.f64 (*.f64 eps (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64)))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) (*.f64 #s(literal -2/3 binary64) eps)))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/9 binary64)) eps) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64)) eps) (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) (*.f64 #s(literal -2/3 binary64) eps))))","(/.f64 (*.f64 eps (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/9 binary64))) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64)))","(/.f64 (*.f64 eps (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64))) (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) (*.f64 #s(literal -2/3 binary64) eps))))","(fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps) eps (*.f64 #s(literal -2/3 binary64) eps))","(fma.f64 #s(literal -2/3 binary64) eps (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps) eps))","(fma.f64 #s(literal -2/3 binary64) eps (*.f64 eps (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps)))","(fma.f64 eps (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps) (*.f64 #s(literal -2/3 binary64) eps))","(fma.f64 eps #s(literal -2/3 binary64) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps) eps))","(fma.f64 eps #s(literal -2/3 binary64) (*.f64 eps (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps)))","(+.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps) eps) (*.f64 #s(literal -2/3 binary64) eps))","(+.f64 (*.f64 eps (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps)) (*.f64 #s(literal -2/3 binary64) eps))","(+.f64 (*.f64 #s(literal -2/3 binary64) eps) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps) eps))","(+.f64 (*.f64 #s(literal -2/3 binary64) eps) (*.f64 eps (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps)))","(*.f64 (/.f64 #s(literal 2/5 binary64) eps) (/.f64 (pow.f64 eps #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal 2/5 binary64) eps) (pow.f64 eps #s(literal -1 binary64)))","(*.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64))","(*.f64 (pow.f64 eps #s(literal -1 binary64)) (/.f64 #s(literal 2/5 binary64) eps))","(*.f64 #s(literal 2/5 binary64) (pow.f64 eps #s(literal -2 binary64)))","(*.f64 #s(literal -2/5 binary64) (pow.f64 (*.f64 (neg.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps)))","(pow.f64 (/.f64 eps (/.f64 #s(literal 2/5 binary64) eps)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (*.f64 eps eps) #s(literal 5/2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (*.f64 eps eps) #s(literal 5/2 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (/.f64 #s(literal 2/5 binary64) eps))) (neg.f64 (neg.f64 eps)))","(/.f64 (neg.f64 (/.f64 #s(literal 2/5 binary64) eps)) (neg.f64 eps))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 eps (/.f64 #s(literal 2/5 binary64) eps))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (*.f64 eps eps) #s(literal 5/2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (*.f64 eps eps) #s(literal 5/2 binary64))))","(/.f64 (/.f64 #s(literal 2/5 binary64) eps) eps)","(/.f64 #s(literal 2/5 binary64) (neg.f64 (*.f64 (neg.f64 eps) eps)))","(/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))","(/.f64 #s(literal -2/5 binary64) (neg.f64 (neg.f64 (*.f64 (neg.f64 eps) eps))))","(/.f64 #s(literal -2/5 binary64) (*.f64 (neg.f64 eps) eps))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (*.f64 eps eps) #s(literal 5/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 eps (/.f64 #s(literal 2/5 binary64) eps)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 eps eps) #s(literal 5/2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (*.f64 eps eps) #s(literal 5/2 binary64)))","(neg.f64 (*.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64))))","(exp.f64 (*.f64 (log.f64 (*.f64 (*.f64 eps eps) #s(literal 5/2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) #s(literal 1 binary64)) (pow.f64 eps #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 eps #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) eps))","(*.f64 (pow.f64 (/.f64 eps #s(literal -2 binary64)) #s(literal -1 binary64)) (pow.f64 (neg.f64 eps) #s(literal -1 binary64)))","(*.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64))","(*.f64 (pow.f64 eps #s(literal -1 binary64)) (/.f64 (pow.f64 eps #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 eps #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal 2 binary64) eps) #s(literal 1 binary64)))","(*.f64 (pow.f64 eps #s(literal -1 binary64)) (/.f64 #s(literal 2 binary64) eps))","(*.f64 (/.f64 #s(literal -2 binary64) eps) (/.f64 (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -2 binary64) eps) (pow.f64 (neg.f64 eps) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal 1 binary64))","(*.f64 (/.f64 #s(literal 2 binary64) eps) (/.f64 (pow.f64 eps #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal 2 binary64) eps) (pow.f64 eps #s(literal -1 binary64)))","(*.f64 #s(literal 2 binary64) (pow.f64 eps #s(literal -2 binary64)))","(*.f64 #s(literal -2 binary64) (/.f64 (neg.f64 (pow.f64 eps #s(literal -1 binary64))) eps))","(*.f64 #s(literal -2 binary64) (/.f64 (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) eps))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 2 binary64) eps) eps))","(pow.f64 (/.f64 (*.f64 eps eps) #s(literal 2 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 eps (/.f64 #s(literal 2 binary64) eps)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 eps (/.f64 #s(literal 2 binary64) eps)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 2 binary64) eps) #s(literal 1 binary64))) (neg.f64 eps))","(/.f64 (neg.f64 (pow.f64 eps #s(literal -1 binary64))) (neg.f64 (*.f64 eps #s(literal 1/2 binary64))))","(/.f64 (*.f64 (/.f64 #s(literal 2 binary64) eps) #s(literal 1 binary64)) eps)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 eps eps) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 eps (/.f64 #s(literal 2 binary64) eps)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 eps (/.f64 #s(literal 2 binary64) eps))))","(/.f64 (pow.f64 eps #s(literal -1 binary64)) (*.f64 eps #s(literal 1/2 binary64)))","(/.f64 (/.f64 #s(literal -2 binary64) eps) (neg.f64 (neg.f64 (neg.f64 eps))))","(/.f64 (/.f64 #s(literal -2 binary64) eps) (neg.f64 eps))","(/.f64 (/.f64 #s(literal 2 binary64) eps) (neg.f64 (neg.f64 eps)))","(/.f64 (/.f64 #s(literal 2 binary64) eps) eps)","(/.f64 #s(literal 2 binary64) (neg.f64 (*.f64 (neg.f64 eps) eps)))","(/.f64 #s(literal 2 binary64) (*.f64 eps eps))","(/.f64 #s(literal -2 binary64) (*.f64 (neg.f64 eps) eps))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 eps (/.f64 #s(literal 2 binary64) eps)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 eps eps) #s(literal 2 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 eps (/.f64 #s(literal 2 binary64) eps)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 eps (/.f64 #s(literal 2 binary64) eps)))","(neg.f64 (*.f64 #s(literal -2 binary64) (pow.f64 eps #s(literal -2 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 eps)) (*.f64 #s(literal -2 binary64) (pow.f64 eps #s(literal -2 binary64))))","(exp.f64 (*.f64 (log.f64 (/.f64 eps (/.f64 #s(literal 2 binary64) eps))) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 eps #s(literal -4 binary64)) #s(literal -4/9 binary64)) (pow.f64 eps #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2/3 binary64)) #s(literal -1 binary64)) eps))","(*.f64 (/.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 eps #s(literal -6 binary64)) #s(literal 8/27 binary64)) (pow.f64 eps #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 eps #s(literal -4 binary64)) (-.f64 #s(literal 4/9 binary64) (/.f64 #s(literal 4/3 binary64) (*.f64 eps eps)))) #s(literal -1 binary64)) eps))","(*.f64 (/.f64 #s(literal -1 binary64) (*.f64 eps eps)) (/.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) (*.f64 (neg.f64 eps) eps)))","(*.f64 (/.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 eps #s(literal -4 binary64)) #s(literal -4/9 binary64)) (*.f64 eps eps)) (/.f64 (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2/3 binary64)) #s(literal -1 binary64)) (*.f64 eps eps)))","(*.f64 (/.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 eps #s(literal -6 binary64)) #s(literal 8/27 binary64)) (*.f64 eps eps)) (/.f64 (pow.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 eps #s(literal -4 binary64)) (-.f64 #s(literal 4/9 binary64) (/.f64 #s(literal 4/3 binary64) (*.f64 eps eps)))) #s(literal -1 binary64)) (*.f64 eps eps)))","(*.f64 (/.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) eps) (pow.f64 eps #s(literal -3 binary64)))","(*.f64 (/.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 eps #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 eps #s(literal -4 binary64)) #s(literal -4/9 binary64)) eps) (/.f64 (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2/3 binary64)) #s(literal -1 binary64)) (pow.f64 eps #s(literal 3 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 eps #s(literal -6 binary64)) #s(literal 8/27 binary64)) eps) (/.f64 (pow.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 eps #s(literal -4 binary64)) (-.f64 #s(literal 4/9 binary64) (/.f64 #s(literal 4/3 binary64) (*.f64 eps eps)))) #s(literal -1 binary64)) (pow.f64 eps #s(literal 3 binary64))))","(*.f64 (pow.f64 (/.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 #s(literal 4 binary64) (pow.f64 eps #s(literal -4 binary64)) #s(literal -4/9 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2/3 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 #s(literal 8 binary64) (pow.f64 eps #s(literal -6 binary64)) #s(literal 8/27 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 eps #s(literal -4 binary64)) (-.f64 #s(literal 4/9 binary64) (/.f64 #s(literal 4/3 binary64) (*.f64 eps eps)))) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) (*.f64 eps eps)) (pow.f64 eps #s(literal -2 binary64)))","(*.f64 (pow.f64 eps #s(literal -2 binary64)) (pow.f64 (/.f64 (*.f64 eps eps) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 eps #s(literal -2 binary64)) (/.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) (*.f64 eps eps)))","(*.f64 (pow.f64 eps #s(literal -4 binary64)) (pow.f64 (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))","(*.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (pow.f64 (neg.f64 (pow.f64 eps #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) (pow.f64 eps #s(literal -4 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 eps #s(literal -4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))))","(pow.f64 (/.f64 (/.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) (*.f64 eps eps))) (*.f64 (neg.f64 eps) eps))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 eps #s(literal -4 binary64)) #s(literal -4/9 binary64)) (pow.f64 eps #s(literal -4 binary64)))) (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2/3 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 eps #s(literal -6 binary64)) #s(literal 8/27 binary64)) (pow.f64 eps #s(literal -4 binary64)))) (neg.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 eps #s(literal -4 binary64)) (-.f64 #s(literal 4/9 binary64) (/.f64 #s(literal 4/3 binary64) (*.f64 eps eps))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 eps #s(literal -4 binary64)) #s(literal -4/9 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 eps #s(literal -6 binary64)) #s(literal 8/27 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 eps #s(literal -4 binary64)) (-.f64 #s(literal 4/9 binary64) (/.f64 #s(literal 4/3 binary64) (*.f64 eps eps)))) (pow.f64 eps #s(literal 4 binary64)))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))))) (neg.f64 (neg.f64 (neg.f64 (pow.f64 eps #s(literal 4 binary64))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) #s(literal 1 binary64))) (neg.f64 (pow.f64 eps #s(literal 4 binary64))))","(/.f64 (/.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) (*.f64 eps eps)) (*.f64 eps eps))","(/.f64 (*.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 eps #s(literal -4 binary64)) #s(literal -4/9 binary64)) (pow.f64 eps #s(literal -4 binary64))) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2/3 binary64)))","(/.f64 (*.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 eps #s(literal -6 binary64)) #s(literal 8/27 binary64)) (pow.f64 eps #s(literal -4 binary64))) (fma.f64 #s(literal 4 binary64) (pow.f64 eps #s(literal -4 binary64)) (-.f64 #s(literal 4/9 binary64) (/.f64 #s(literal 4/3 binary64) (*.f64 eps eps)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 eps #s(literal -4 binary64)) #s(literal -4/9 binary64))) (neg.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2/3 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 eps #s(literal -6 binary64)) #s(literal 8/27 binary64))) (neg.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 #s(literal 4 binary64) (pow.f64 eps #s(literal -4 binary64)) (-.f64 #s(literal 4/9 binary64) (/.f64 #s(literal 4/3 binary64) (*.f64 eps eps)))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))) (neg.f64 (neg.f64 (pow.f64 eps #s(literal 4 binary64)))))","(/.f64 (*.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 eps #s(literal -4 binary64)) #s(literal -4/9 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 4 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 eps #s(literal -6 binary64)) #s(literal 8/27 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 eps #s(literal -4 binary64)) (-.f64 #s(literal 4/9 binary64) (/.f64 #s(literal 4/3 binary64) (*.f64 eps eps)))) (pow.f64 eps #s(literal 4 binary64))))","(/.f64 (*.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) #s(literal 1 binary64)) (pow.f64 eps #s(literal 4 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))))","(/.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 eps #s(literal -4 binary64)) #s(literal -4/9 binary64)) (*.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2/3 binary64))))","(/.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 eps #s(literal -6 binary64)) #s(literal 8/27 binary64)) (*.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 #s(literal 4 binary64) (pow.f64 eps #s(literal -4 binary64)) (-.f64 #s(literal 4/9 binary64) (/.f64 #s(literal 4/3 binary64) (*.f64 eps eps))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (neg.f64 (pow.f64 eps #s(literal 4 binary64))))","(/.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))))","(neg.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (pow.f64 eps #s(literal -4 binary64))))","(-.f64 (/.f64 (/.f64 #s(literal 4 binary64) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2/3 binary64)))) (/.f64 #s(literal 4/9 binary64) (*.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2/3 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (pow.f64 eps #s(literal 4 binary64)))) (*.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64))) (pow.f64 eps #s(literal -4 binary64))))","(-.f64 (/.f64 (/.f64 (/.f64 #s(literal 4 binary64) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2/3 binary64))) (pow.f64 eps #s(literal 4 binary64))) (/.f64 (/.f64 #s(literal 4/9 binary64) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2/3 binary64))) (pow.f64 eps #s(literal 4 binary64))))","(exp.f64 (*.f64 (log.f64 (/.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2/3 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal -2 binary64) eps)","(*.f64 eps #s(literal -2 binary64))","(*.f64 (fma.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/9 binary64)) (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal 2/3 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/125 binary64) #s(literal -8/27 binary64)) (pow.f64 (fma.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 4/9 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/15 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal 2/3 binary64)) (fma.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/9 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 4/9 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/15 binary64)))) (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/125 binary64) #s(literal -8/27 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 4/9 binary64) (*.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64))))) (neg.f64 (-.f64 #s(literal -2/3 binary64) (*.f64 (*.f64 eps eps) #s(literal -2/5 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/9 binary64)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal 2/3 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/125 binary64) #s(literal -8/27 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 4/9 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/15 binary64)))))))","(/.f64 (-.f64 #s(literal 4/9 binary64) (*.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)))) (-.f64 #s(literal -2/3 binary64) (*.f64 (*.f64 eps eps) #s(literal -2/5 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/9 binary64))) (neg.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal 2/3 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/125 binary64) #s(literal -8/27 binary64))) (neg.f64 (+.f64 #s(literal 4/9 binary64) (-.f64 (*.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 eps eps) #s(literal 4/15 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/125 binary64) #s(literal -8/27 binary64))) (neg.f64 (fma.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 4/9 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/15 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal 2/3 binary64)) (fma.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/9 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 4/9 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/15 binary64)))) (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/125 binary64) #s(literal -8/27 binary64)))))","(/.f64 (fma.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/9 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal 2/3 binary64)))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/125 binary64) #s(literal -8/27 binary64)) (+.f64 #s(literal 4/9 binary64) (-.f64 (*.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 eps eps) #s(literal 4/15 binary64)))))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/125 binary64) #s(literal -8/27 binary64)) (fma.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 4/9 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/15 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal 2/3 binary64)) (fma.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/9 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 4/9 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/15 binary64)))) (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/125 binary64) #s(literal -8/27 binary64))))","(fma.f64 (*.f64 #s(literal -2/5 binary64) eps) eps #s(literal -2/3 binary64))","(fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64))","(fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64))","(fma.f64 eps (*.f64 #s(literal -2/5 binary64) eps) #s(literal -2/3 binary64))","(-.f64 (/.f64 #s(literal 4/9 binary64) (-.f64 #s(literal -2/3 binary64) (*.f64 (*.f64 eps eps) #s(literal -2/5 binary64)))) (/.f64 (*.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64))) (-.f64 #s(literal -2/3 binary64) (*.f64 (*.f64 eps eps) #s(literal -2/5 binary64)))))","(-.f64 (/.f64 (*.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal 2/3 binary64))) (/.f64 #s(literal 4/9 binary64) (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal 2/3 binary64))))","(+.f64 (*.f64 (*.f64 eps eps) #s(literal -2/5 binary64)) #s(literal -2/3 binary64))","(+.f64 #s(literal -2/3 binary64) (*.f64 (*.f64 eps eps) #s(literal -2/5 binary64)))","(*.f64 (fma.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/25 binary64)) (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal 2/5 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/343 binary64) #s(literal -8/125 binary64)) (pow.f64 (fma.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 4/25 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/35 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal 2/5 binary64)) (fma.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/25 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 4/25 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/35 binary64)))) (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/343 binary64) #s(literal -8/125 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 4/25 binary64) (*.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64))))) (neg.f64 (-.f64 #s(literal -2/5 binary64) (*.f64 (*.f64 eps eps) #s(literal -2/7 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/25 binary64)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal 2/5 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/343 binary64) #s(literal -8/125 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 4/25 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/35 binary64)))))))","(/.f64 (-.f64 #s(literal 4/25 binary64) (*.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64)))) (-.f64 #s(literal -2/5 binary64) (*.f64 (*.f64 eps eps) #s(literal -2/7 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/25 binary64))) (neg.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal 2/5 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/343 binary64) #s(literal -8/125 binary64))) (neg.f64 (+.f64 #s(literal 4/25 binary64) (-.f64 (*.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 eps eps) #s(literal 4/35 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/343 binary64) #s(literal -8/125 binary64))) (neg.f64 (fma.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 4/25 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/35 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal 2/5 binary64)) (fma.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/25 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 4/25 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/35 binary64)))) (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/343 binary64) #s(literal -8/125 binary64)))))","(/.f64 (fma.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/25 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal 2/5 binary64)))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/343 binary64) #s(literal -8/125 binary64)) (+.f64 #s(literal 4/25 binary64) (-.f64 (*.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 eps eps) #s(literal 4/35 binary64)))))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/343 binary64) #s(literal -8/125 binary64)) (fma.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 4/25 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/35 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal 2/5 binary64)) (fma.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/25 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 4/25 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/35 binary64)))) (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/343 binary64) #s(literal -8/125 binary64))))","(fma.f64 (*.f64 #s(literal -2/7 binary64) eps) eps #s(literal -2/5 binary64))","(fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64))","(fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64))","(fma.f64 eps (*.f64 #s(literal -2/7 binary64) eps) #s(literal -2/5 binary64))","(-.f64 (/.f64 #s(literal 4/25 binary64) (-.f64 #s(literal -2/5 binary64) (*.f64 (*.f64 eps eps) #s(literal -2/7 binary64)))) (/.f64 (*.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64))) (-.f64 #s(literal -2/5 binary64) (*.f64 (*.f64 eps eps) #s(literal -2/7 binary64)))))","(-.f64 (/.f64 (*.f64 #s(literal 4/49 binary64) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal 2/5 binary64))) (/.f64 #s(literal 4/25 binary64) (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal 2/5 binary64))))","(+.f64 (*.f64 (*.f64 eps eps) #s(literal -2/7 binary64)) #s(literal -2/5 binary64))","(+.f64 #s(literal -2/5 binary64) (*.f64 (*.f64 eps eps) #s(literal -2/7 binary64)))","(*.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/9 binary64)) (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64)) (pow.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) (*.f64 #s(literal -2/3 binary64) eps))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64)) (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/9 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) (*.f64 #s(literal -2/3 binary64) eps))) (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 4/9 binary64) (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))))) (neg.f64 (-.f64 #s(literal -2/3 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/9 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64)))) (neg.f64 (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) (*.f64 #s(literal -2/3 binary64) eps))))))","(/.f64 (-.f64 #s(literal 4/9 binary64) (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (-.f64 #s(literal -2/3 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/9 binary64))) (neg.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64))) (neg.f64 (+.f64 #s(literal 4/9 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) (*.f64 #s(literal -2/3 binary64) eps))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) (*.f64 #s(literal -2/3 binary64) eps)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64)) (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/9 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) (*.f64 #s(literal -2/3 binary64) eps))) (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64)))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/9 binary64)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64)))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64)) (+.f64 #s(literal 4/9 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) (*.f64 #s(literal -2/3 binary64) eps)))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64)) (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) (*.f64 #s(literal -2/3 binary64) eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64)) (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4/9 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4/9 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) (*.f64 #s(literal -2/3 binary64) eps))) (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8/27 binary64))))","(fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps #s(literal -2/3 binary64))","(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))","(fma.f64 (*.f64 eps eps) (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal -2/3 binary64))","(fma.f64 eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) #s(literal -2/3 binary64))","(-.f64 (/.f64 #s(literal 4/9 binary64) (-.f64 #s(literal -2/3 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps))) (/.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (-.f64 #s(literal -2/3 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps))))","(-.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64))) (/.f64 #s(literal 4/9 binary64) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64))))","(+.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps) #s(literal -2/3 binary64))","(+.f64 #s(literal -2/3 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) eps) eps))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":352.98779296875,"type":"rewrite"},{"compiler":[[29472,3175]],"memory":[[-3669808,55511744]],"time":159.503173828125,"type":"eval"},{"alts":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps)))","done",0.00390625,"binary64"],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps)))","done",0.048801190986480995,"binary64"],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) eps (*.f64 #s(literal -2 binary64) eps)))","done",0.16728354621564734,"binary64"],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","done",0.021816259768442016,"binary64"],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","done",0.06442716844333948,"binary64"],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","done",0.17509604621564734,"binary64"],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","done",0.647823368674164,"binary64"],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) #s(approx (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (*.f64 (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))))) (pow.f64 eps #s(literal 7 binary64)))))","next",54.69782260618687,"binary64"],["#s(literal 0 binary64)","done",60.57221134767748,"binary64"]],"compiler":[[29,18],[24,16],[19,13],[27,16],[22,14],[17,12],[12,9],[65,45],[1,2]],"count":[[605,9]],"kept":[{"done":[5,5],"fresh":[0,0],"new":[596,1],"picked":[4,3]}],"memory":[[4814128,24205136]],"min-error":[[0.0,"binary64"]],"time":26.867919921875,"type":"prune"},{"egraph":[[0,8371,245,0.075707715],[9,7944,254,0.019929652],[8,4533,254,0.048230052],[7,3183,254,0.037067773],[6,2155,254,0.024491255],[5,1724,254,0.0196388],[4,937,254,0.011322427],[3,374,254,0.004048172],[2,157,254,0.002764024],[1,89,254,0.00346402],[0,53,254,0.000809114],[0,42,254,0.000523065]],"inputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) #s(approx (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (*.f64 (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))))) (pow.f64 eps #s(literal 7 binary64)))))","#s(approx (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (*.f64 (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))))) (pow.f64 eps #s(literal 7 binary64))))","(*.f64 (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))))) (pow.f64 eps #s(literal 7 binary64)))","(-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64)))))","(-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps)))","#s(literal -2/7 binary64)","(/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))","#s(literal 2/5 binary64)","(*.f64 eps eps)","eps","#s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64)))","(fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))","(*.f64 #s(literal 2/3 binary64) eps)","#s(literal 2/3 binary64)","#s(literal 2 binary64)","(pow.f64 eps #s(literal 6 binary64))","#s(literal 6 binary64)","(pow.f64 eps #s(literal 7 binary64))","#s(literal 7 binary64)"]],"locations":[["(-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64)))))","cost-diff",0],["#s(approx (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (*.f64 (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))))) (pow.f64 eps #s(literal 7 binary64))))","cost-diff",0],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) #s(approx (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (*.f64 (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))))) (pow.f64 eps #s(literal 7 binary64)))))","cost-diff",0],["(*.f64 (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))))) (pow.f64 eps #s(literal 7 binary64)))","cost-diff",1]],"memory":[[-4441088,28012704]],"method":["egg-herbie"],"outputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) #s(approx (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (*.f64 (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))))) (pow.f64 eps #s(literal 7 binary64)))))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) #s(approx (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (fma.f64 (-.f64 #s(literal -2/7 binary64) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))))) (pow.f64 eps #s(literal 7 binary64)) (*.f64 (pow.f64 eps #s(literal 5 binary64)) #s(literal -2/5 binary64)))))","#s(approx (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (*.f64 (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))))) (pow.f64 eps #s(literal 7 binary64))))","#s(approx (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (fma.f64 (-.f64 #s(literal -2/7 binary64) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))))) (pow.f64 eps #s(literal 7 binary64)) (*.f64 (pow.f64 eps #s(literal 5 binary64)) #s(literal -2/5 binary64))))","(*.f64 (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))))) (pow.f64 eps #s(literal 7 binary64)))","(fma.f64 (-.f64 #s(literal -2/7 binary64) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))))) (pow.f64 eps #s(literal 7 binary64)) (*.f64 (pow.f64 eps #s(literal 5 binary64)) #s(literal -2/5 binary64)))","(-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64)))))","(-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps)))","#s(literal -2/7 binary64)","(/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))","#s(literal 2/5 binary64)","(*.f64 eps eps)","eps","#s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64)))","(fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))","(*.f64 #s(literal 2/3 binary64) eps)","#s(literal 2/3 binary64)","#s(literal 2 binary64)","(pow.f64 eps #s(literal 6 binary64))","#s(literal 6 binary64)","(pow.f64 eps #s(literal 7 binary64))","#s(literal 7 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":369.85107421875,"type":"simplify"},{"compiler":[[133,41]],"locations":[["(/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64)))","accuracy",0.02734375],["(/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))","accuracy",0.24837875976844204],["(*.f64 #s(literal 2/3 binary64) eps)","accuracy",0.36328125],["(*.f64 (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))))) (pow.f64 eps #s(literal 7 binary64)))","accuracy",53.83225646405544]],"memory":[[6146048,53584080]],"mixsample":[[19.746826171875,"ival-div",0],[27.869140625,"adjust",800],[2.25537109375,"ival-div",400],[0.751953125,"ival-sub",1600],[0.162353515625,"ival-assert",0],[1.03369140625,"ival-div",1600],[7.22705078125,"ival-sub",0],[30.290283203125,"const",0],[2.428466796875,"ival-sub",400],[9.15185546875,"adjust",2000],[21.7568359375,"ival-pow",0],[13.361572265625,"ival-add",0],[22.010986328125,"ival-mult",0],[0.431884765625,"ival-add",1600],[1.545166015625,"ival-add",400],[47.82861328125,"ival-log",0],[0.281005859375,"ival-true",0],[0.9736328125,"exact",0]],"outcomes":[[124.556640625,1,"valid",151],[114.75927734375,2,"valid",94],[4.065673828125,0,"valid",11]],"time":288.123046875,"type":"localize"},{"count":[[7,29]],"inputs":[["(*.f64 (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))))) (pow.f64 eps #s(literal 7 binary64)))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) #s(approx (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (*.f64 (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))))) (pow.f64 eps #s(literal 7 binary64)))))","#s(approx (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (*.f64 (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))))) (pow.f64 eps #s(literal 7 binary64))))","(-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64)))))","(*.f64 #s(literal 2/3 binary64) eps)","(/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))","(/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64)))"]],"memory":[[3241488,3241488]],"outputs":[["(* -2 eps)","(* eps (- (* -2/3 (pow eps 2)) 2))","(* eps (- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2))","(* eps (- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2))","(/ -2 (pow eps 6))","(/ (- (* -2/3 (pow eps 2)) 2) (pow eps 6))","(/ (- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2) (pow eps 6))","(/ (- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2) (pow eps 6))","(* 2/3 eps)","(/ 2/5 (pow eps 2))","(/ 2 (pow eps 6))","(/ (+ 2 (* 2/3 (pow eps 2))) (pow eps 6))","(* -2/7 (pow eps 7))","(* -1 (* (pow eps 7) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(* (pow eps 7) (- (* -1 (/ (+ 2/5 (* 2/3 (/ 1 (pow eps 2)))) (pow eps 2))) 2/7))","(* (pow eps 7) (- (* -1 (/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 4))) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(log -1)","(- (log -1) (* 2 (/ 1 eps)))","(+ (log -1) (* -1 (/ (+ 2 (* 2/3 (/ 1 (pow eps 2)))) eps)))","(- (+ (log -1) (* -1 (/ (+ 2/3 (* 2/5 (/ 1 (pow eps 2)))) (pow eps 3)))) (* 2 (/ 1 eps)))","-2/7","(* -1 (+ 2/7 (* 2/5 (/ 1 (pow eps 2)))))","(- (* -1 (/ (+ 2/5 (* 2/3 (/ 1 (pow eps 2)))) (pow eps 2))) 2/7)","(- (* -1 (/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 4))) (+ 2/7 (* 2/5 (/ 1 (pow eps 2)))))","(/ 2/3 (pow eps 4))","(/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 4))","(* -1 (* (pow eps 7) (+ 2/7 (+ (/ 2/3 (pow eps 4)) (* 2/5 (/ 1 (pow eps 2)))))))","(* -1 (* (pow eps 7) (+ 2/7 (+ (/ 2/3 (pow eps 4)) (+ (* 2/5 (/ 1 (pow eps 2))) (* 2 (/ 1 (pow eps 6))))))))","(+ (log -1) (* -1 (/ (+ 2 (+ (/ 2/5 (pow eps 4)) (* 2/3 (/ 1 (pow eps 2))))) eps)))"]],"series":[[1.552978515625,"((* (- (- -2/7 (/ 2/5 (* eps eps))) (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4))) (pow eps 7)) (log (/ (- 1 eps) (+ 1 eps))) (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (- (- -2/7 (/ 2/5 (* eps eps))) (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4))) (* 2/3 eps) (/ 2/5 (* eps eps)) (/ (+ (* (* 2/3 eps) eps) 2) (pow eps 6)))","eps","-inf"],[2.116943359375,"((* (- (- -2/7 (/ 2/5 (* eps eps))) (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4))) (pow eps 7)) (log (/ (- 1 eps) (+ 1 eps))) (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (- (- -2/7 (/ 2/5 (* eps eps))) (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4))) (* 2/3 eps) (/ 2/5 (* eps eps)) (/ (+ (* (* 2/3 eps) eps) 2) (pow eps 6)))","eps","inf"],[1.83203125,"((* (- (- -2/7 (/ 2/5 (* eps eps))) (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4))) (pow eps 7)) (log (/ (- 1 eps) (+ 1 eps))) (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (- (- -2/7 (/ 2/5 (* eps eps))) (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4))) (* 2/3 eps) (/ 2/5 (* eps eps)) (/ (+ (* (* 2/3 eps) eps) 2) (pow eps 6)))","eps","0"]],"time":6.5078125,"type":"series"},{"count":[[29,29]],"egraph":[[0,8020,323,0.08544912],[5,7022,336,0.018945969],[4,3588,336,0.03333906],[3,1650,336,0.015492436],[2,640,337,0.005368357],[1,234,342,0.002148499],[0,96,347,0.001151023]],"inputs":[["(* -2 eps)","(* eps (- (* -2/3 (pow eps 2)) 2))","(* eps (- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2))","(* eps (- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2))","(/ -2 (pow eps 6))","(/ (- (* -2/3 (pow eps 2)) 2) (pow eps 6))","(/ (- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2) (pow eps 6))","(/ (- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2) (pow eps 6))","(* 2/3 eps)","(/ 2/5 (pow eps 2))","(/ 2 (pow eps 6))","(/ (+ 2 (* 2/3 (pow eps 2))) (pow eps 6))","(* -2/7 (pow eps 7))","(* -1 (* (pow eps 7) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(* (pow eps 7) (- (* -1 (/ (+ 2/5 (* 2/3 (/ 1 (pow eps 2)))) (pow eps 2))) 2/7))","(* (pow eps 7) (- (* -1 (/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 4))) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(log -1)","(- (log -1) (* 2 (/ 1 eps)))","(+ (log -1) (* -1 (/ (+ 2 (* 2/3 (/ 1 (pow eps 2)))) eps)))","(- (+ (log -1) (* -1 (/ (+ 2/3 (* 2/5 (/ 1 (pow eps 2)))) (pow eps 3)))) (* 2 (/ 1 eps)))","-2/7","(* -1 (+ 2/7 (* 2/5 (/ 1 (pow eps 2)))))","(- (* -1 (/ (+ 2/5 (* 2/3 (/ 1 (pow eps 2)))) (pow eps 2))) 2/7)","(- (* -1 (/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 4))) (+ 2/7 (* 2/5 (/ 1 (pow eps 2)))))","(/ 2/3 (pow eps 4))","(/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 4))","(* -1 (* (pow eps 7) (+ 2/7 (+ (/ 2/3 (pow eps 4)) (* 2/5 (/ 1 (pow eps 2)))))))","(* -1 (* (pow eps 7) (+ 2/7 (+ (/ 2/3 (pow eps 4)) (+ (* 2/5 (/ 1 (pow eps 2))) (* 2 (/ 1 (pow eps 6))))))))","(+ (log -1) (* -1 (/ (+ 2 (+ (/ 2/5 (pow eps 4)) (* 2/3 (/ 1 (pow eps 2))))) eps)))"]],"memory":[[-6071360,37206784]],"method":["egg-herbie"],"outputs":[["(* -2 eps)","(*.f64 #s(literal -2 binary64) eps)","(* eps (- (* -2/3 (pow eps 2)) 2))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps)","(* eps (- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2))","(*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","(* eps (- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","(/ -2 (pow eps 6))","(/.f64 #s(literal -2 binary64) (pow.f64 eps #s(literal 6 binary64)))","(/ (- (* -2/3 (pow eps 2)) 2) (pow eps 6))","(/.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) (pow.f64 eps #s(literal 6 binary64)))","(/ (- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2) (pow eps 6))","(/.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/5 binary64) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) (pow.f64 eps #s(literal 6 binary64)))","(/ (- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2) (pow eps 6))","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) (pow.f64 eps #s(literal 6 binary64)))","(* 2/3 eps)","(*.f64 #s(literal 2/3 binary64) eps)","(/ 2/5 (pow eps 2))","(/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))","(/ 2 (pow eps 6))","(/.f64 #s(literal 2 binary64) (pow.f64 eps #s(literal 6 binary64)))","(/ (+ 2 (* 2/3 (pow eps 2))) (pow eps 6))","(/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64)))","(* -2/7 (pow eps 7))","(*.f64 (pow.f64 eps #s(literal 7 binary64)) #s(literal -2/7 binary64))","(* -1 (* (pow eps 7) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(*.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (pow.f64 eps #s(literal 7 binary64)))","(* (pow eps 7) (- (* -1 (/ (+ 2/5 (* 2/3 (/ 1 (pow eps 2)))) (pow eps 2))) 2/7))","(*.f64 (-.f64 (-.f64 (/.f64 #s(literal -2/3 binary64) (pow.f64 eps #s(literal 4 binary64))) #s(literal 2/7 binary64)) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (pow.f64 eps #s(literal 7 binary64)))","(* (pow eps 7) (- (* -1 (/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 4))) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(*.f64 (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 eps eps)) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (pow.f64 eps #s(literal 7 binary64)))","(log -1)","(log.f64 #s(literal -1 binary64))","(- (log -1) (* 2 (/ 1 eps)))","(-.f64 (log.f64 #s(literal -1 binary64)) (/.f64 #s(literal 2 binary64) eps))","(+ (log -1) (* -1 (/ (+ 2 (* 2/3 (/ 1 (pow eps 2)))) eps)))","(-.f64 (log.f64 #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 #s(literal 2/3 binary64) (*.f64 eps eps)) #s(literal -2 binary64)) eps))","(- (+ (log -1) (* -1 (/ (+ 2/3 (* 2/5 (/ 1 (pow eps 2)))) (pow eps 3)))) (* 2 (/ 1 eps)))","(-.f64 (/.f64 #s(literal -2 binary64) eps) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps)) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (log.f64 #s(literal -1 binary64))))","-2/7","#s(literal -2/7 binary64)","(* -1 (+ 2/7 (* 2/5 (/ 1 (pow eps 2)))))","(-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps)))","(- (* -1 (/ (+ 2/5 (* 2/3 (/ 1 (pow eps 2)))) (pow eps 2))) 2/7)","(-.f64 (-.f64 (/.f64 #s(literal -2/3 binary64) (pow.f64 eps #s(literal 4 binary64))) #s(literal 2/7 binary64)) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps)))","(- (* -1 (/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 4))) (+ 2/7 (* 2/5 (/ 1 (pow eps 2)))))","(-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 eps eps)) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 4 binary64))))","(/ 2/3 (pow eps 4))","(/.f64 #s(literal 2/3 binary64) (pow.f64 eps #s(literal 4 binary64)))","(/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 4))","(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 eps eps)) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))","(* -1 (* (pow eps 7) (+ 2/7 (+ (/ 2/3 (pow eps 4)) (* 2/5 (/ 1 (pow eps 2)))))))","(*.f64 (-.f64 (-.f64 (/.f64 #s(literal -2/3 binary64) (pow.f64 eps #s(literal 4 binary64))) #s(literal 2/7 binary64)) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (pow.f64 eps #s(literal 7 binary64)))","(* -1 (* (pow eps 7) (+ 2/7 (+ (/ 2/3 (pow eps 4)) (+ (* 2/5 (/ 1 (pow eps 2))) (* 2 (/ 1 (pow eps 6))))))))","(*.f64 (-.f64 (-.f64 (/.f64 #s(literal -2/3 binary64) (pow.f64 eps #s(literal 4 binary64))) #s(literal 2/7 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 eps #s(literal 6 binary64))) (/.f64 #s(literal -2/5 binary64) (*.f64 eps eps)))) (pow.f64 eps #s(literal 7 binary64)))","(+ (log -1) (* -1 (/ (+ 2 (+ (/ 2/5 (pow eps 4)) (* 2/3 (/ 1 (pow eps 2))))) eps)))","(-.f64 (/.f64 #s(literal -2 binary64) eps) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps)) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (log.f64 #s(literal -1 binary64))))"]],"stop":[["iter limit",1],["node limit",1]],"time":250.35498046875,"type":"simplify"},{"count":[[7,138]],"egraph":[[0,9033,187,0.085313675],[2,1922,203,0.034377914],[1,255,203,0.008238609],[0,53,203,0.001961087],[0,42,203,0.000262867]],"inputs":[["(*.f64 (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))))) (pow.f64 eps #s(literal 7 binary64)))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) #s(approx (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (*.f64 (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))))) (pow.f64 eps #s(literal 7 binary64)))))","#s(approx (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (*.f64 (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))))) (pow.f64 eps #s(literal 7 binary64))))","(-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64)))))","(*.f64 #s(literal 2/3 binary64) eps)","(/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))","(/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64)))"]],"memory":[[310224,52526704]],"outputs":[["(*.f64 (*.f64 (-.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))) (pow.f64 eps #s(literal 7/2 binary64))) (pow.f64 eps #s(literal 7/2 binary64)))","(*.f64 (pow.f64 eps #s(literal 7/2 binary64)) (*.f64 (pow.f64 eps #s(literal 7/2 binary64)) (-.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))))))","(*.f64 (pow.f64 eps #s(literal 7 binary64)) (-.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))))","(*.f64 (-.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))) (pow.f64 eps #s(literal 7 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) (pow.f64 eps #s(literal 7 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 (neg.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))) (pow.f64 eps #s(literal 7 binary64))) #s(literal 3 binary64))) (fma.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) (pow.f64 eps #s(literal 7 binary64))) (*.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) (pow.f64 eps #s(literal 7 binary64))) (-.f64 (*.f64 (*.f64 (neg.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))) (pow.f64 eps #s(literal 7 binary64))) (*.f64 (neg.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))) (pow.f64 eps #s(literal 7 binary64)))) (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) (pow.f64 eps #s(literal 7 binary64))) (*.f64 (neg.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))) (pow.f64 eps #s(literal 7 binary64)))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 eps #s(literal 7 binary64)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 (pow.f64 eps #s(literal 7 binary64)) (neg.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))))) #s(literal 3 binary64))) (fma.f64 (*.f64 (pow.f64 eps #s(literal 7 binary64)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (*.f64 (pow.f64 eps #s(literal 7 binary64)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (-.f64 (*.f64 (*.f64 (pow.f64 eps #s(literal 7 binary64)) (neg.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))))) (*.f64 (pow.f64 eps #s(literal 7 binary64)) (neg.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))))) (*.f64 (*.f64 (pow.f64 eps #s(literal 7 binary64)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (*.f64 (pow.f64 eps #s(literal 7 binary64)) (neg.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)) (pow.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) #s(literal 2 binary64))) (pow.f64 eps #s(literal 7 binary64)))) (neg.f64 (+.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 3 binary64)) (pow.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) #s(literal 3 binary64))) (pow.f64 eps #s(literal 7 binary64)))) (neg.f64 (fma.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (+.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 7 binary64)) (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)) (pow.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) #s(literal 2 binary64))))) (neg.f64 (+.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)))))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 7 binary64)) (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 3 binary64)) (pow.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) #s(literal 3 binary64))))) (neg.f64 (fma.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (+.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)) (pow.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) #s(literal 2 binary64))) (pow.f64 eps #s(literal 7 binary64))) (+.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 3 binary64)) (pow.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) #s(literal 3 binary64))) (pow.f64 eps #s(literal 7 binary64))) (fma.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (+.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64))))","(/.f64 (*.f64 (pow.f64 eps #s(literal 7 binary64)) (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)) (pow.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) #s(literal 2 binary64)))) (+.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))))","(/.f64 (*.f64 (pow.f64 eps #s(literal 7 binary64)) (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 3 binary64)) (pow.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) #s(literal 3 binary64)))) (fma.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (+.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64))))","(fma.f64 (pow.f64 eps #s(literal 7 binary64)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) (*.f64 (pow.f64 eps #s(literal 7 binary64)) (neg.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))))))","(fma.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) (pow.f64 eps #s(literal 7 binary64)) (*.f64 (neg.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))) (pow.f64 eps #s(literal 7 binary64))))","(+.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) (pow.f64 eps #s(literal 7 binary64))) (*.f64 (neg.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))) (pow.f64 eps #s(literal 7 binary64))))","(+.f64 (*.f64 (pow.f64 eps #s(literal 7 binary64)) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (*.f64 (pow.f64 eps #s(literal 7 binary64)) (neg.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))))))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) #s(approx (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (*.f64 (pow.f64 eps #s(literal 7 binary64)) (-.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))))))","#s(approx (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (*.f64 (pow.f64 eps #s(literal 7 binary64)) (-.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))))))","(*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)) (pow.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 3 binary64)) (pow.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) #s(literal 3 binary64))) (pow.f64 (fma.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (+.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)) (pow.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (+.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 3 binary64)) (pow.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) #s(literal 2 binary64)) (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)) (*.f64 (neg.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))))))","(/.f64 (+.f64 #s(literal -8/343 binary64) (pow.f64 (-.f64 (*.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64))) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))) #s(literal 3 binary64))) (+.f64 #s(literal 4/49 binary64) (-.f64 (*.f64 (-.f64 (*.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64))) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))) (-.f64 (*.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64))) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))))) (*.f64 #s(literal -2/7 binary64) (-.f64 (*.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64))) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))))))))","(/.f64 (+.f64 #s(literal -8/343 binary64) (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) (neg.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))))) #s(literal 3 binary64))) (+.f64 #s(literal 4/49 binary64) (-.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) (neg.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) (neg.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))))) (*.f64 #s(literal -2/7 binary64) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) (neg.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))))))))","(/.f64 (+.f64 #s(literal -8/343 binary64) (pow.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))))) #s(literal 3 binary64))) (+.f64 #s(literal 4/49 binary64) (-.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))))) (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))))) (*.f64 #s(literal -2/7 binary64) (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))))))))","(/.f64 (neg.f64 (-.f64 #s(literal 4/49 binary64) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))) #s(literal 2 binary64)))) (neg.f64 (+.f64 #s(literal -2/7 binary64) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))))))","(/.f64 (neg.f64 (-.f64 #s(literal -8/343 binary64) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))) #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 4/49 binary64) (+.f64 (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))) #s(literal 2 binary64)) (*.f64 #s(literal -2/7 binary64) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)) (pow.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 3 binary64)) (pow.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (+.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)))) (*.f64 (+.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (pow.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) #s(literal 2 binary64)))) (*.f64 (+.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (+.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (+.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (+.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64))) (pow.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) #s(literal 3 binary64)))) (*.f64 (fma.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (+.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64))) (fma.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (+.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)))))","(/.f64 (-.f64 #s(literal 4/49 binary64) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))) #s(literal 2 binary64))) (+.f64 #s(literal -2/7 binary64) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))))))","(/.f64 (-.f64 #s(literal -8/343 binary64) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))) #s(literal 3 binary64))) (+.f64 #s(literal 4/49 binary64) (+.f64 (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))) #s(literal 2 binary64)) (*.f64 #s(literal -2/7 binary64) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)) (pow.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) #s(literal 2 binary64)))) (neg.f64 (-.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) (neg.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)) (pow.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) #s(literal 2 binary64)))) (neg.f64 (+.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 3 binary64)) (pow.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) (neg.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 3 binary64)) (pow.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (+.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)) (pow.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (+.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 3 binary64)) (pow.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) #s(literal 3 binary64))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)) (pow.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) #s(literal 2 binary64))) (-.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) (neg.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)) (pow.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) #s(literal 2 binary64))) (+.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))))","(/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 3 binary64)) (pow.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) (neg.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 3 binary64)) (pow.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) #s(literal 3 binary64))) (fma.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (+.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)) (pow.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (+.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 3 binary64)) (pow.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) #s(literal 3 binary64)))))","(fma.f64 #s(literal -1 binary64) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)))","(fma.f64 (-.f64 #s(literal 4/49 binary64) (/.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)))) (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(literal -2/7 binary64)) #s(literal -1 binary64)) (neg.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))))","(fma.f64 (+.f64 #s(literal -8/343 binary64) (*.f64 #s(literal -8/125 binary64) (pow.f64 eps #s(literal -6 binary64)))) (pow.f64 (+.f64 (fma.f64 #s(literal -4/35 binary64) (pow.f64 eps #s(literal -2 binary64)) (/.f64 #s(literal 4/25 binary64) (pow.f64 eps #s(literal 4 binary64)))) #s(literal 4/49 binary64)) #s(literal -1 binary64)) (neg.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))))","(-.f64 (/.f64 #s(literal 4/49 binary64) (+.f64 #s(literal -2/7 binary64) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))))) (/.f64 (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))) #s(literal 2 binary64)) (+.f64 #s(literal -2/7 binary64) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)) (-.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) (neg.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))))) (/.f64 (pow.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) #s(literal 2 binary64)) (-.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) (neg.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))))))","(-.f64 (/.f64 #s(literal -8/343 binary64) (+.f64 #s(literal 4/49 binary64) (+.f64 (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))) #s(literal 2 binary64)) (*.f64 #s(literal -2/7 binary64) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))))))) (/.f64 (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))) #s(literal 3 binary64)) (+.f64 #s(literal 4/49 binary64) (+.f64 (pow.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))) #s(literal 2 binary64)) (*.f64 #s(literal -2/7 binary64) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)))) (/.f64 (pow.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) #s(literal 2 binary64)) (+.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)))))","(-.f64 (/.f64 (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (+.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) #s(literal 3 binary64)) (fma.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (+.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64))) (pow.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(literal 2 binary64)))))","(-.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))))","(-.f64 #s(literal -2/7 binary64) (-.f64 (*.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64)) (neg.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))))))","(-.f64 #s(literal -2/7 binary64) (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))))","(+.f64 (neg.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)))","(+.f64 (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) #s(literal -2/7 binary64)) (neg.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))))","(+.f64 #s(literal -2/7 binary64) (-.f64 (*.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64))) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))))","(+.f64 #s(literal -2/7 binary64) (fma.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64)) (neg.f64 #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))))))","(+.f64 #s(literal -2/7 binary64) (neg.f64 (fma.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))))))","(*.f64 #s(literal 2/3 binary64) eps)","(*.f64 eps #s(literal 2/3 binary64))","(*.f64 (/.f64 #s(literal 2/5 binary64) eps) (/.f64 (pow.f64 eps #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal 2/5 binary64) eps) (pow.f64 eps #s(literal -1 binary64)))","(*.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64))","(*.f64 (pow.f64 eps #s(literal -1 binary64)) (/.f64 #s(literal 2/5 binary64) eps))","(*.f64 #s(literal -2/5 binary64) (pow.f64 (*.f64 (neg.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2/5 binary64)))","(*.f64 #s(literal 2/5 binary64) (pow.f64 eps #s(literal -2 binary64)))","(pow.f64 (/.f64 eps (/.f64 #s(literal 2/5 binary64) eps)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (*.f64 eps eps) #s(literal 5/2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (*.f64 eps eps) #s(literal 5/2 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (/.f64 #s(literal 2/5 binary64) eps))) (neg.f64 (neg.f64 eps)))","(/.f64 (neg.f64 (/.f64 #s(literal 2/5 binary64) eps)) (neg.f64 eps))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 eps (/.f64 #s(literal 2/5 binary64) eps))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (*.f64 eps eps) #s(literal 5/2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (*.f64 eps eps) #s(literal 5/2 binary64))))","(/.f64 (/.f64 #s(literal 2/5 binary64) eps) eps)","(/.f64 #s(literal -2/5 binary64) (neg.f64 (neg.f64 (*.f64 (neg.f64 eps) eps))))","(/.f64 #s(literal -2/5 binary64) (*.f64 (neg.f64 eps) eps))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (*.f64 eps eps) #s(literal 5/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 eps (/.f64 #s(literal 2/5 binary64) eps)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 eps eps) #s(literal 5/2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (*.f64 eps eps) #s(literal 5/2 binary64)))","(/.f64 #s(literal 2/5 binary64) (neg.f64 (*.f64 (neg.f64 eps) eps)))","(/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))","(neg.f64 (*.f64 #s(literal -2/5 binary64) (pow.f64 eps #s(literal -2 binary64))))","(exp.f64 (*.f64 (log.f64 (*.f64 (*.f64 eps eps) #s(literal 5/2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)) (pow.f64 eps #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 2/3 binary64) #s(literal -2 binary64)) #s(literal -1 binary64)) (pow.f64 eps #s(literal 3 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 8/27 binary64) #s(literal 8 binary64)) (pow.f64 eps #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 (*.f64 (*.f64 eps eps) #s(literal 2/3 binary64)) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 eps #s(literal 3 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))) (/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 (neg.f64 eps) #s(literal 3 binary64))))","(*.f64 (pow.f64 (/.f64 (pow.f64 eps #s(literal 6 binary64)) (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 2/3 binary64) #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 eps #s(literal 6 binary64)) (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 8/27 binary64) #s(literal 8 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 (*.f64 (*.f64 eps eps) #s(literal 2/3 binary64)) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 eps #s(literal -3 binary64)))","(*.f64 (pow.f64 eps #s(literal -3 binary64)) (pow.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 eps #s(literal -3 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 eps #s(literal 3 binary64))))","(*.f64 (pow.f64 eps #s(literal -6 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))","(*.f64 (neg.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))) (pow.f64 (neg.f64 (pow.f64 eps #s(literal 6 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 eps #s(literal -6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))","(*.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 eps #s(literal -6 binary64)))","(pow.f64 (/.f64 (/.f64 (pow.f64 eps #s(literal 6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 eps #s(literal 6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)) (pow.f64 eps #s(literal -6 binary64)))) (neg.f64 (fma.f64 (*.f64 eps eps) #s(literal 2/3 binary64) #s(literal -2 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 8/27 binary64) #s(literal 8 binary64)) (pow.f64 eps #s(literal -6 binary64)))) (neg.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 (*.f64 (*.f64 eps eps) #s(literal 2/3 binary64)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (pow.f64 eps #s(literal 6 binary64))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))) (neg.f64 (neg.f64 (neg.f64 (pow.f64 eps #s(literal 6 binary64))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 2/3 binary64) #s(literal -2 binary64)) (pow.f64 eps #s(literal 6 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 8/27 binary64) #s(literal 8 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 (*.f64 (*.f64 eps eps) #s(literal 2/3 binary64)) #s(literal 2 binary64)))) (pow.f64 eps #s(literal 6 binary64)))))","(/.f64 (/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 eps #s(literal 3 binary64)))","(/.f64 (*.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)) (pow.f64 eps #s(literal -6 binary64))) (fma.f64 (*.f64 eps eps) #s(literal 2/3 binary64) #s(literal -2 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 8/27 binary64) #s(literal 8 binary64)) (pow.f64 eps #s(literal -6 binary64))) (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 (*.f64 (*.f64 eps eps) #s(literal 2/3 binary64)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 eps #s(literal 6 binary64)))","(/.f64 (neg.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64))) (neg.f64 (*.f64 (pow.f64 eps #s(literal 6 binary64)) (fma.f64 (*.f64 eps eps) #s(literal 2/3 binary64) #s(literal -2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 8/27 binary64) #s(literal 8 binary64))) (neg.f64 (*.f64 (pow.f64 eps #s(literal 6 binary64)) (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 (*.f64 (*.f64 eps eps) #s(literal 2/3 binary64)) #s(literal 2 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) (neg.f64 (neg.f64 (pow.f64 eps #s(literal 6 binary64)))))","(/.f64 (*.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 2/3 binary64) #s(literal -2 binary64)) (pow.f64 eps #s(literal 6 binary64))))","(/.f64 (*.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 8/27 binary64) #s(literal 8 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 (*.f64 (*.f64 eps eps) #s(literal 2/3 binary64)) #s(literal 2 binary64)))) (pow.f64 eps #s(literal 6 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (pow.f64 eps #s(literal 6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 eps #s(literal 6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)) (*.f64 (pow.f64 eps #s(literal 6 binary64)) (fma.f64 (*.f64 eps eps) #s(literal 2/3 binary64) #s(literal -2 binary64))))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 8/27 binary64) #s(literal 8 binary64)) (*.f64 (pow.f64 eps #s(literal 6 binary64)) (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 (*.f64 (*.f64 eps eps) #s(literal 2/3 binary64)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))) (neg.f64 (pow.f64 eps #s(literal 6 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (pow.f64 eps #s(literal 6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (pow.f64 eps #s(literal 6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 eps #s(literal 6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64)))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64))) (pow.f64 eps #s(literal 6 binary64))))","(neg.f64 (/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (neg.f64 (pow.f64 eps #s(literal 6 binary64)))))","(-.f64 (/.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (pow.f64 eps #s(literal 6 binary64)) (fma.f64 (*.f64 eps eps) #s(literal 2/3 binary64) #s(literal -2 binary64)))) (/.f64 #s(literal 4 binary64) (*.f64 (pow.f64 eps #s(literal 6 binary64)) (fma.f64 (*.f64 eps eps) #s(literal 2/3 binary64) #s(literal -2 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (pow.f64 eps #s(literal 6 binary64)))) (/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (neg.f64 (pow.f64 eps #s(literal 6 binary64)))))","(-.f64 (/.f64 (/.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (*.f64 eps eps) #s(literal 2/3 binary64) #s(literal -2 binary64))) (pow.f64 eps #s(literal 6 binary64))) (/.f64 (/.f64 #s(literal 4 binary64) (fma.f64 (*.f64 eps eps) #s(literal 2/3 binary64) #s(literal -2 binary64))) (pow.f64 eps #s(literal 6 binary64))))","(exp.f64 (*.f64 (log.f64 (/.f64 (pow.f64 eps #s(literal 6 binary64)) (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)))) #s(literal -1 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":328.041015625,"type":"rewrite"},{"compiler":[[13992,1102]],"memory":[[-2324480,13096576]],"time":17.201171875,"type":"eval"},{"alts":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps)))","done",0.00390625,"binary64"],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps)))","done",0.048801190986480995,"binary64"],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) eps (*.f64 #s(literal -2 binary64) eps)))","done",0.16728354621564734,"binary64"],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","done",0.021816259768442016,"binary64"],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","done",0.06442716844333948,"binary64"],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","done",0.17509604621564734,"binary64"],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","done",0.647823368674164,"binary64"],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) #s(approx (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (*.f64 (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))))) (pow.f64 eps #s(literal 7 binary64)))))","done",54.69782260618687,"binary64"],["#s(literal 0 binary64)","done",60.57221134767748,"binary64"]],"compiler":[[278,91],[29,18],[24,16],[19,13],[27,16],[22,14],[17,12],[12,9],[65,45],[1,2]],"count":[[174,9]],"kept":[{"done":[8,8],"fresh":[0,0],"new":[165,0],"picked":[1,1]}],"memory":[[-1105440,9438320]],"min-error":[[0.0,"binary64"]],"time":8.432861328125,"type":"prune"},{"accuracy":[0.00390625],"baseline":[0.00390625],"branch":[["eps",0.00390625,1,"binary64"],["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))",0.00390625,1,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))",0.00390625,1,"binary64"]],"compiler":[[1,1],[8,6],[7,5]],"count":[[11,1]],"inputs":[["#s(literal 0 binary64)","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) eps (*.f64 #s(literal -2 binary64) eps)))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps)))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps)))","(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) #s(approx (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (*.f64 (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) #s(approx (/ (+ (/ (/ 2 eps) eps) 2/3) (pow eps 4)) (/.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) eps #s(literal 2 binary64)) (pow.f64 eps #s(literal 6 binary64))))) (pow.f64 eps #s(literal 7 binary64)))))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) #s(approx (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (*.f64 (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal 2/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (pow.f64 eps #s(literal 7 binary64)))))"]],"memory":[[-1607616,6565520]],"oracle":[63.661163575268716],"outputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps)))"]],"repr":["binary64"],"time":9.566162109375,"times":[[3.596923828125,"eps"],[2.5078125,"(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))"],[2.565185546875,"(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))"]],"type":"regimes"},{"accuracy":[0.021816259768442016],"baseline":[0.021816259768442016],"branch":[["eps",0.021816259768442016,1,"binary64"],["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))",0.021816259768442016,1,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))",0.021816259768442016,1,"binary64"]],"compiler":[[1,1],[8,6],[7,5]],"count":[[7,1]],"inputs":[["#s(literal 0 binary64)","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) eps (*.f64 #s(literal -2 binary64) eps)))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps)))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))"]],"memory":[[5283472,5283472]],"oracle":[60.57221134767748],"outputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))"]],"repr":["binary64"],"time":6.67578125,"times":[[2.27294921875,"eps"],[1.759033203125,"(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))"],[1.884033203125,"(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))"]],"type":"regimes"},{"accuracy":[0.048801190986480995],"baseline":[0.048801190986480995],"branch":[["eps",0.048801190986480995,1,"binary64"],["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))",0.048801190986480995,1,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))",0.048801190986480995,1,"binary64"]],"compiler":[[1,1],[8,6],[7,5]],"count":[[6,1]],"inputs":[["#s(literal 0 binary64)","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) eps (*.f64 #s(literal -2 binary64) eps)))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps)))"]],"memory":[[-3115552,5073312]],"oracle":[60.57221134767748],"outputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps)))"]],"repr":["binary64"],"time":6.171142578125,"times":[[2.10595703125,"eps"],[1.80810546875,"(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))"],[1.642822265625,"(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))"]],"type":"regimes"},{"accuracy":[0.06442716844333948],"baseline":[0.06442716844333948],"branch":[["eps",0.06442716844333948,1,"binary64"],["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))",0.06442716844333948,1,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))",0.06442716844333948,1,"binary64"]],"compiler":[[1,1],[8,6],[7,5]],"count":[[5,1]],"inputs":[["#s(literal 0 binary64)","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) eps (*.f64 #s(literal -2 binary64) eps)))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))"]],"memory":[[4758992,4758992]],"oracle":[60.57221134767748],"outputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))"]],"repr":["binary64"],"time":5.6640625,"times":[[1.81591796875,"eps"],[1.50390625,"(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))"],[1.7138671875,"(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))"]],"type":"regimes"},{"accuracy":[0.16728354621564734],"baseline":[0.16728354621564734],"branch":[["eps",0.16728354621564734,1,"binary64"],["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))",0.16728354621564734,1,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))",0.16728354621564734,1,"binary64"]],"compiler":[[1,1],[8,6],[7,5]],"count":[[4,1]],"inputs":[["#s(literal 0 binary64)","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) eps (*.f64 #s(literal -2 binary64) eps)))"]],"memory":[[-3730400,4572992]],"oracle":[60.57221134767748],"outputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) eps (*.f64 #s(literal -2 binary64) eps)))"]],"repr":["binary64"],"time":5.091796875,"times":[[1.697021484375,"eps"],[1.35693359375,"(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))"],[1.490966796875,"(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))"]],"type":"regimes"},{"accuracy":[0.17509604621564734],"baseline":[0.17509604621564734],"branch":[["eps",0.17509604621564734,1,"binary64"],["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))",0.17509604621564734,1,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))",0.17509604621564734,1,"binary64"]],"compiler":[[1,1],[8,6],[7,5]],"count":[[3,1]],"inputs":[["#s(literal 0 binary64)","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))"]],"memory":[[4241184,4241184]],"oracle":[60.57221134767748],"outputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))"]],"repr":["binary64"],"time":4.836181640625,"times":[[1.60498046875,"eps"],[1.251953125,"(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))"],[1.46923828125,"(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))"]],"type":"regimes"},{"accuracy":[0.6478233686741639],"baseline":[0.647823368674164],"branch":[["eps",0.6478233686741639,1,"binary64"],["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))",0.6478233686741639,1,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))",0.6478233686741639,1,"binary64"]],"compiler":[[1,1],[8,6],[7,5]],"count":[[2,1]],"inputs":[["#s(literal 0 binary64)","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))"]],"memory":[[-6786000,3940480]],"oracle":[60.57221134767748],"outputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))"]],"repr":["binary64"],"time":6.243896484375,"times":[[1.447021484375,"eps"],[1.841796875,"(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))"],[2.39111328125,"(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))"]],"type":"regimes"},{"accuracy":[60.57221134767748],"baseline":[60.57221134767748],"branch":[["eps",60.57221134767748,1,"binary64"],["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))",60.57221134767748,1,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))",60.57221134767748,1,"binary64"]],"compiler":[[1,1],[8,6],[7,5]],"count":[[1,1]],"inputs":[["#s(literal 0 binary64)"]],"link":["."],"memory":[[3766048,3766048]],"name":["logq (problem 3.4.3)"],"oracle":[60.57221134767748],"outputs":[["#s(literal 0 binary64)"]],"repr":["binary64"],"time":3.509033203125,"times":[[1.014892578125,"eps"],[0.919921875,"(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))"],[1.030029296875,"(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))"]],"type":"regimes"},{"egraph":[[12,1579,151,0.004432419],[11,1579,151,0.004317215],[10,1554,151,0.005702209],[9,1505,151,0.005481595],[8,1225,151,0.008034568],[7,451,151,0.006477406],[6,223,151,0.001979361],[5,136,151,0.001267194],[4,93,151,0.001000324],[3,64,151,0.000832772],[2,52,151,0.000756365],[1,46,151,0.000685331],[0,39,151,0.000728603]],"inputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps)))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps)))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) eps (*.f64 #s(literal -2 binary64) eps)))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","#s(literal 0 binary64)"]],"memory":[[-2396720,5923776]],"method":["egg-herbie"],"outputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps)))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps)))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) eps (*.f64 #s(literal -2 binary64) eps)))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","#s(literal 0 binary64)"]],"stop":[["saturated",1]],"time":53.285888671875,"type":"simplify"},{"compiler":[[151,39],[3,3],[8,6],[17,12],[8,6],[13,8],[22,14],[13,8],[0,1],[27,16],[0,1]],"egraph":[[0,8283,171,0.067325248],[2,1283,179,0.028760773],[1,177,179,0.005445532],[0,42,179,0.001542003],[0,25,179,0.000460419],[0,10104,8,0.040783579],[3,4567,8,0.038821781],[2,328,21,0.012816849],[1,44,21,0.00115186],[0,10,21,0.000626642],[0,6,21,0.00010797],[0,8376,188,0.053109173],[5,6278,200,0.030061177],[4,2881,200,0.037769305],[3,1309,200,0.015213927],[2,488,204,0.004962356],[1,220,212,0.001710424],[0,89,218,0.000825109]],"memory":[[-2888800,5309664]],"stop":[["done",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1]],"time":1609.77099609375,"type":"soundness"},{"compiler":[[151,39],[151,39],[6,5],[6,5],[8,6],[8,6]],"memory":[[1767872,33204112]],"remove-preprocessing":[[],[],[],[],[],[],[],[],[]],"time":48.876220703125,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.010009765625,"type":"end"}]