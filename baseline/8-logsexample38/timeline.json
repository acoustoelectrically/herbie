[{"memory":[[18832,18832]],"time":0.034912109375,"type":"start"},{"compiler":[[19,12]],"memory":[[84912,84912]],"method":["search"],"sampling":[[1,{"invalid":0.0,"precondition":0.7628198006136451,"unknown":0.0,"valid":0.23718019938635493}],[0,{"invalid":0.0,"precondition":0.7628198006136451,"unknown":0.23718019938635493,"valid":0.0}]],"time":0.409912109375,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.7628198006136451,"valid":0.23718019938635493}],"memory":[[-90720400,473217888]],"mixsample":[[16.822265625,"ival-sub",1200],[10.501220703125,"ival-add",1200],[316.087890625,"adjust",800],[27.57763671875,"ival-mult",1200],[150.080322265625,"ival-log",2800],[166.647705078125,"ival-log1p",2800],[37.632568359375,"ival-mult",2000],[28.577392578125,"ival-mult",2800],[5.59130859375,"ival-assert",0],[139.920654296875,"ival-sub",0],[135.801513671875,"ival-log1p",1600],[120.150146484375,"ival-log",1600],[10.660888671875,"ival-sub",400],[91.26123046875,"ival-log1p",1200],[146.171630859375,"ival-log",2000],[81.119873046875,"ival-log",1200],[197.331298828125,"ival-add",0],[21.82177734375,"ival-add",1600],[136.741455078125,"ival-mult",0],[21.61376953125,"ival-sub",800],[161.649658203125,"ival-log1p",2000],[34.48095703125,"ival-mult",1600],[9.581298828125,"ival-add",2800],[13.26708984375,"ival-add",2000],[190.20556640625,"ival-log1p",2400],[129.268310546875,"ival-log",0],[178.277099609375,"ival-log1p",0],[12.96044921875,"ival-add",2400],[40.39697265625,"ival-mult",2400],[31.85791015625,"ival->",0],[13.482421875,"exact",0],[175.03125,"ival-log",2400]],"outcomes":[[3182.223388671875,1,"valid",8256]],"time":3613.256103515625,"type":"sample"},{"compiler":[[15,9],[53,11],[53,11]],"confusion":[[256,0,0,0]],"explanations":[["-.f64","(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))","nan-rescue",3,0,[["(*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64))))","overflow",3],["(*.f64 n (log.f64 n))","overflow",3]],[[1]]],["-.f64","(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))","cancellation",253,0,[],[[1]]]],"fperrors":[["(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))",256,0,false,0,false],["n",0,0,false,0,false],["(*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64))))",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(+.f64 n #s(literal 1 binary64))",0,0,false,0,false],["(log.f64 n)",0,0,false,0,false],["(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))",0,0,false,0,false],["(*.f64 n (log.f64 n))",0,0,false,0,false],["(log.f64 (+.f64 n #s(literal 1 binary64)))",0,0,false,0,false]],"freqs":[[1,256]],"maybe-confusion":[[256,0,0,0,0,0]],"memory":[[-15139696,78599168]],"mixsample":[[0.5712890625,"ival-add",1200],[1.4150390625,"ival-sub",1200],[22.146484375,"adjust",800],[1.929443359375,"ival-mult",1200],[10.265869140625,"ival-log",2800],[9.824462890625,"ival-log1p",2800],[2.5234375,"ival-mult",2000],[1.793212890625,"ival-mult",2800],[0.367431640625,"ival-assert",0],[9.18505859375,"ival-sub",0],[6.936767578125,"ival-log1p",1600],[7.539306640625,"ival-log",1600],[0.666015625,"ival-sub",400],[5.586181640625,"ival-log1p",1200],[10.228271484375,"ival-log",2000],[5.731201171875,"ival-log",1200],[4.058349609375,"ival-add",0],[0.603271484375,"ival-add",1600],[9.4306640625,"ival-mult",0],[1.228759765625,"ival-sub",800],[10.285888671875,"ival-log1p",2000],[1.857666015625,"ival-mult",1600],[0.674072265625,"ival-add",2800],[0.822509765625,"ival-add",2000],[17.78271484375,"ival-log1p",2400],[12.6396484375,"ival-log",0],[0.82861328125,"ival-true",0],[11.372802734375,"ival-log1p",0],[1.058349609375,"ival-add",2400],[3.197265625,"ival-mult",2400],[0.501953125,"exact",0],[15.950439453125,"ival-log",2400]],"outcomes":[[228.3701171875,1,"valid",512]],"time":360.10595703125,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[15,9]],"egraph":[[0,1670,11,0.008681059],[9,1670,15,0.009876536],[8,1638,15,0.011099425],[7,1344,15,0.012963141],[6,891,15,0.008656855],[5,499,15,0.005691198],[4,258,15,0.002779699],[3,123,15,0.000985232],[2,59,15,0.000502339],[1,31,15,0.00024434],[0,16,15,0.000226862],[0,9,15,0.000126551],[7,2004,32,0.01208688],[6,1986,32,0.013026996],[5,1462,32,0.019704737],[4,807,32,0.009646787],[3,290,32,0.00381735],[2,88,32,0.001514729],[1,33,33,0.000550565],[0,11,37,0.000335673]],"inputs":[["(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))"]],"memory":[[1575216,9494496]],"method":["egg-herbie"],"outputs":[["(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","(fma.f64 (-.f64 (log1p.f64 n) (log.f64 n)) n (-.f64 (log1p.f64 n) #s(literal 1 binary64)))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1],["saturated",1]],"symmetry":[[]],"time":157.281982421875,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[41072,41072]],"time":0.06689453125,"type":"eval"},{"alts":[["(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","next",63.01608950605436,"binary64"]],"compiler":[[15,9]],"memory":[[343216,343216]],"time":0.502197265625,"type":"prune"},{"egraph":[[0,1670,39,0.012055842],[9,1670,51,0.011174588],[8,1638,51,0.010777895],[7,1344,51,0.011885227],[6,891,51,0.008878906],[5,499,51,0.003821516],[4,258,51,0.002014779],[3,123,51,0.00091722],[2,59,51,0.000428042],[1,31,51,0.000242716],[0,16,51,0.000258432],[0,9,51,0.000121991]],"inputs":[["(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))","(*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64))))","(+.f64 n #s(literal 1 binary64))","n","#s(literal 1 binary64)","(log.f64 (+.f64 n #s(literal 1 binary64)))","(*.f64 n (log.f64 n))","(log.f64 n)"]],"locations":[["(*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64))))","cost-diff",0],["(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","cost-diff",0],["(log.f64 (+.f64 n #s(literal 1 binary64)))","cost-diff",2],["(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))","cost-diff",2]],"memory":[[4635856,4635856]],"method":["egg-herbie"],"outputs":[["(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","(fma.f64 (-.f64 (log1p.f64 n) (log.f64 n)) n (-.f64 (log1p.f64 n) #s(literal 1 binary64)))","(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))","(fma.f64 (-.f64 (log1p.f64 n) (log.f64 n)) n (log1p.f64 n))","(*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64))))","(fma.f64 (log1p.f64 n) n (log1p.f64 n))","(+.f64 n #s(literal 1 binary64))","(-.f64 n #s(literal -1 binary64))","n","#s(literal 1 binary64)","(log.f64 (+.f64 n #s(literal 1 binary64)))","(log1p.f64 n)","(*.f64 n (log.f64 n))","(*.f64 (log.f64 n) n)","(log.f64 n)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":81.52490234375,"type":"simplify"},{"compiler":[[53,11]],"locations":[["(log.f64 n)","accuracy",0.0],["(*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64))))","accuracy",0.25390625],["(*.f64 n (log.f64 n))","accuracy",0.25390625],["(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))","accuracy",62.00997180805491]],"memory":[[-346304,17343360]],"mixsample":[[0.2265625,"ival-add",1200],[0.498779296875,"ival-sub",1200],[7.840087890625,"adjust",800],[0.76123046875,"ival-mult",1200],[4.227294921875,"ival-log",2800],[4.33740234375,"ival-log1p",2800],[0.777099609375,"ival-mult",2000],[0.663330078125,"ival-mult",2800],[0.1103515625,"ival-assert",0],[3.955322265625,"ival-sub",0],[2.96240234375,"ival-log1p",1600],[2.591552734375,"ival-log",1600],[0.20068359375,"ival-sub",400],[2.474365234375,"ival-log1p",1200],[3.798583984375,"ival-log",2000],[2.0556640625,"ival-log",1200],[1.577392578125,"ival-add",0],[0.247314453125,"ival-add",1600],[3.302001953125,"ival-mult",0],[0.49658203125,"ival-sub",800],[4.205810546875,"ival-log1p",2000],[0.624267578125,"ival-mult",1600],[0.218017578125,"ival-add",2800],[0.28955078125,"ival-add",2000],[6.545166015625,"ival-log1p",2400],[14.815673828125,"ival-log",0],[0.19189453125,"ival-true",0],[4.555908203125,"ival-log1p",0],[0.478759765625,"ival-add",2400],[1.057373046875,"ival-mult",2400],[0.15185546875,"exact",0],[6.1376953125,"ival-log",2400]],"outcomes":[[96.03857421875,1,"valid",256]],"time":106.3701171875,"type":"localize"},{"count":[[6,47]],"inputs":[["(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))","(log.f64 (+.f64 n #s(literal 1 binary64)))","(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","(*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64))))","(*.f64 n (log.f64 n))","(log.f64 n)"]],"memory":[[2421456,25490832]],"outputs":[["(* n (- 1 (log n)))","(* n (- (+ 1 (* 1/2 n)) (log n)))","(* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n)))","(* n (- (+ 1 (* n (+ 1/2 (* n (- (* 1/12 n) 1/6))))) (log n)))","n","(* n (+ 1 (* -1/2 n)))","(* n (+ 1 (* n (- (* 1/3 n) 1/2))))","(* n (+ 1 (* n (- (* n (+ 1/3 (* -1/4 n))) 1/2))))","-1","(- (* n (- 1 (log n))) 1)","(- (* n (- (+ 1 (* 1/2 n)) (log n))) 1)","(- (* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n))) 1)","(* n (+ 1 (* 1/2 n)))","(* n (+ 1 (* n (+ 1/2 (* -1/6 n)))))","(* n (+ 1 (* n (+ 1/2 (* n (- (* 1/12 n) 1/6))))))","(* n (log n))","(log n)","(+ 1 (* -1 (log (/ 1 n))))","(+ 1 (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))))","(- (+ 1 (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))) (/ 1/6 (pow n 2)))","(- (+ 1 (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3)))))) (/ 1/6 (pow n 2)))","(* -1 (log (/ 1 n)))","(+ (* -1 (log (/ 1 n))) (/ 1 n))","(- (+ (* -1 (log (/ 1 n))) (/ 1 n)) (/ 1/2 (pow n 2)))","(- (+ (* -1 (log (/ 1 n))) (+ (/ 1 n) (* 1/3 (/ 1 (pow n 3))))) (/ 1/2 (pow n 2)))","(+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))","(- (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))) (/ 1/6 (pow n 2)))","(- (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3))))) (/ 1/6 (pow n 2)))","(* -1 (* n (log (/ 1 n))))","(* n (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (/ 1 n))))","(* n (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (+ (/ 1/2 (pow n 2)) (/ 1 n)))))","(* n (- (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (+ (/ 1/2 (pow n 2)) (/ 1 n)))) (* 1/6 (/ 1 (pow n 3)))))","(+ 1 (+ (log -1) (* -1 (log (/ -1 n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n)))))","(+ (log -1) (* -1 (log (/ -1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (/ 1 n)))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/2 (/ 1 n)) 1) n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 n)) 1/2) n)) 1) n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n))))","(* n (+ (log -1) (* -1 (log (/ -1 n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))) n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n))))) n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n))))) n)))))"]],"series":[[14.260009765625,"((- (* (+ n 1) (log (+ n 1))) (* n (log n))) (log (+ n 1)) (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (* (+ n 1) (log (+ n 1))) (* n (log n)) (log n))","n","-inf"],[12.18017578125,"((- (* (+ n 1) (log (+ n 1))) (* n (log n))) (log (+ n 1)) (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (* (+ n 1) (log (+ n 1))) (* n (log n)) (log n))","n","inf"],[45.470947265625,"((- (* (+ n 1) (log (+ n 1))) (* n (log n))) (log (+ n 1)) (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (* (+ n 1) (log (+ n 1))) (* n (log n)) (log n))","n","0"]],"time":72.6298828125,"type":"series"},{"count":[[47,46]],"egraph":[[0,8301,519,0.07766088],[3,4960,548,0.030666015],[2,1424,564,0.018050057],[1,486,589,0.005103289],[0,154,649,0.001600515]],"inputs":[["(* n (- 1 (log n)))","(* n (- (+ 1 (* 1/2 n)) (log n)))","(* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n)))","(* n (- (+ 1 (* n (+ 1/2 (* n (- (* 1/12 n) 1/6))))) (log n)))","n","(* n (+ 1 (* -1/2 n)))","(* n (+ 1 (* n (- (* 1/3 n) 1/2))))","(* n (+ 1 (* n (- (* n (+ 1/3 (* -1/4 n))) 1/2))))","-1","(- (* n (- 1 (log n))) 1)","(- (* n (- (+ 1 (* 1/2 n)) (log n))) 1)","(- (* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n))) 1)","(* n (+ 1 (* 1/2 n)))","(* n (+ 1 (* n (+ 1/2 (* -1/6 n)))))","(* n (+ 1 (* n (+ 1/2 (* n (- (* 1/12 n) 1/6))))))","(* n (log n))","(log n)","(+ 1 (* -1 (log (/ 1 n))))","(+ 1 (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))))","(- (+ 1 (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))) (/ 1/6 (pow n 2)))","(- (+ 1 (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3)))))) (/ 1/6 (pow n 2)))","(* -1 (log (/ 1 n)))","(+ (* -1 (log (/ 1 n))) (/ 1 n))","(- (+ (* -1 (log (/ 1 n))) (/ 1 n)) (/ 1/2 (pow n 2)))","(- (+ (* -1 (log (/ 1 n))) (+ (/ 1 n) (* 1/3 (/ 1 (pow n 3))))) (/ 1/2 (pow n 2)))","(+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))","(- (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))) (/ 1/6 (pow n 2)))","(- (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3))))) (/ 1/6 (pow n 2)))","(* -1 (* n (log (/ 1 n))))","(* n (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (/ 1 n))))","(* n (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (+ (/ 1/2 (pow n 2)) (/ 1 n)))))","(* n (- (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (+ (/ 1/2 (pow n 2)) (/ 1 n)))) (* 1/6 (/ 1 (pow n 3)))))","(+ 1 (+ (log -1) (* -1 (log (/ -1 n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n)))))","(+ (log -1) (* -1 (log (/ -1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (/ 1 n)))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/2 (/ 1 n)) 1) n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 n)) 1/2) n)) 1) n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n))))","(* n (+ (log -1) (* -1 (log (/ -1 n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))) n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n))))) n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n))))) n)))))"]],"memory":[[-3145344,36844112]],"method":["egg-herbie"],"outputs":[["(* n (- 1 (log n)))","(fma.f64 (neg.f64 n) (log.f64 n) n)","(* n (- (+ 1 (* 1/2 n)) (log n)))","(*.f64 (-.f64 (fma.f64 #s(literal 1/2 binary64) n #s(literal 1 binary64)) (log.f64 n)) n)","(* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n)))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) n #s(literal 1/2 binary64)) n (-.f64 #s(literal 1 binary64) (log.f64 n))) n)","(* n (- (+ 1 (* n (+ 1/2 (* n (- (* 1/12 n) 1/6))))) (log n)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) n #s(literal -1/6 binary64)) n #s(literal 1/2 binary64)) n (-.f64 #s(literal 1 binary64) (log.f64 n))) n)","n","(* n (+ 1 (* -1/2 n)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) n #s(literal 1 binary64)) n)","(* n (+ 1 (* n (- (* 1/3 n) 1/2))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) n #s(literal -1/2 binary64)) n #s(literal 1 binary64)) n)","(* n (+ 1 (* n (- (* n (+ 1/3 (* -1/4 n))) 1/2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) n #s(literal 1/3 binary64)) n #s(literal -1/2 binary64)) n #s(literal 1 binary64)) n)","-1","#s(literal -1 binary64)","(- (* n (- 1 (log n))) 1)","(fma.f64 (-.f64 #s(literal 1 binary64) (log.f64 n)) n #s(literal -1 binary64))","(- (* n (- (+ 1 (* 1/2 n)) (log n))) 1)","(fma.f64 (-.f64 (fma.f64 #s(literal 1/2 binary64) n #s(literal 1 binary64)) (log.f64 n)) n #s(literal -1 binary64))","(- (* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n))) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) n #s(literal 1/2 binary64)) n (-.f64 #s(literal 1 binary64) (log.f64 n))) n #s(literal -1 binary64))","(* n (+ 1 (* 1/2 n)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) n #s(literal 1 binary64)) n)","(* n (+ 1 (* n (+ 1/2 (* -1/6 n)))))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) n #s(literal 1/2 binary64)) n #s(literal 1 binary64)) n)","(* n (+ 1 (* n (+ 1/2 (* n (- (* 1/12 n) 1/6))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) n #s(literal -1/6 binary64)) n #s(literal 1/2 binary64)) n #s(literal 1 binary64)) n)","(* n (log n))","(*.f64 (log.f64 n) n)","(log n)","(log.f64 n)","(+ 1 (* -1 (log (/ 1 n))))","(+.f64 (log.f64 n) #s(literal 1 binary64))","(+ 1 (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))))","(+.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1 binary64)) (log.f64 n))","(- (+ 1 (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))) (/ 1/6 (pow n 2)))","(-.f64 (+.f64 (log.f64 n) #s(literal 1 binary64)) (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) n))","(- (+ 1 (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3)))))) (/ 1/6 (pow n 2)))","(+.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) n) #s(literal 1/6 binary64)) n)) n)) (log.f64 n))","(* -1 (log (/ 1 n)))","(log.f64 n)","(+ (* -1 (log (/ 1 n))) (/ 1 n))","(+.f64 (log.f64 n) (/.f64 #s(literal 1 binary64) n))","(- (+ (* -1 (log (/ 1 n))) (/ 1 n)) (/ 1/2 (pow n 2)))","(-.f64 (log.f64 n) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1 binary64)) n))","(- (+ (* -1 (log (/ 1 n))) (+ (/ 1 n) (* 1/3 (/ 1 (pow n 3))))) (/ 1/2 (pow n 2)))","(+.f64 (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) n) #s(literal 1/2 binary64)) n) #s(literal -1 binary64)) n) (log.f64 n))","(+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))","(+.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))","(- (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))) (/ 1/6 (pow n 2)))","(-.f64 (log.f64 n) (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) n))","(- (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3))))) (/ 1/6 (pow n 2)))","(+.f64 (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) n) #s(literal 1/6 binary64)) n) #s(literal -1/2 binary64)) n) (log.f64 n))","(* -1 (* n (log (/ 1 n))))","(*.f64 (log.f64 n) n)","(* n (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (/ 1 n))))","(fma.f64 (log.f64 n) n (+.f64 (log.f64 n) #s(literal 1 binary64)))","(* n (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (+ (/ 1/2 (pow n 2)) (/ 1 n)))))","(fma.f64 (log.f64 n) n (fma.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) n (+.f64 (log.f64 n) #s(literal 1 binary64))))","(* n (- (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (+ (/ 1/2 (pow n 2)) (/ 1 n)))) (* 1/6 (/ 1 (pow n 3)))))","(fma.f64 (/.f64 #s(literal -1/6 binary64) (pow.f64 n #s(literal 3 binary64))) n (fma.f64 (log.f64 n) n (fma.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) n (+.f64 (log.f64 n) #s(literal 1 binary64)))))","(+ 1 (+ (log -1) (* -1 (log (/ -1 n)))))","(-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) n)))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n)))))","(+.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) n))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n)))))","(-.f64 (-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) n))) (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) n))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n)))))","(-.f64 (-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) n))) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) n) #s(literal 1/6 binary64)) n)) n))","(+ (log -1) (* -1 (log (/ -1 n))))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) n)))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (/ 1 n)))","(-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) n)) (log.f64 (/.f64 #s(literal -1 binary64) n)))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/2 (/ 1 n)) 1) n))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1 binary64)) n)) (log.f64 (/.f64 #s(literal -1 binary64) n)))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 n)) 1/2) n)) 1) n))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) n) #s(literal 1/2 binary64)) n)) n)) (log.f64 (/.f64 #s(literal -1 binary64) n)))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n))))","(+.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 (/.f64 #s(literal -1 binary64) n))) (log.f64 #s(literal -1 binary64)))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) n))) (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) n))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) n))) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) n) #s(literal 1/6 binary64)) n)) n))","(* n (+ (log -1) (* -1 (log (/ -1 n)))))","(*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) n))) n)","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))) n)))))","(fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) n))) n (-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) n))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n))))) n)))))","(-.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) n))) n) (-.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) n) #s(literal -1 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n))))) n)))))","(-.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) n))) n) (-.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 1 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) n)))))"]],"stop":[["iter limit",1],["node limit",1]],"time":267.824951171875,"type":"simplify"},{"count":[[6,434]],"egraph":[[0,8430,37,0.07638205],[2,520,46,0.023921205],[1,66,46,0.001727244],[0,16,46,0.000773323],[0,9,46,0.00012786]],"inputs":[["(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))","(log.f64 (+.f64 n #s(literal 1 binary64)))","(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","(*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64))))","(*.f64 n (log.f64 n))","(log.f64 n)"]],"memory":[[5122608,62023488]],"outputs":[["(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))) (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)))) (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (*.f64 (*.f64 (log.f64 n) n) (-.f64 (*.f64 (log.f64 n) n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64))) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) #s(literal 2 binary64)))) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (*.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))))))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 6 binary64)) (pow.f64 (*.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) #s(literal 3 binary64)))) (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) (-.f64 (*.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))))))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)))) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))","(*.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)))) (pow.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64)) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))))","(*.f64 (pow.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))))))","(*.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))) (*.f64 (pow.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))) (pow.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))) (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64))) (*.f64 (pow.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))) (*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n n)) (neg.f64 (log.f64 n))))))","(*.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 4 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 4 binary64))) (pow.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64))) (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 6 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 6 binary64))) (pow.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 4 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 4 binary64))) (pow.f64 (*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n n)) (log.f64 n)) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 6 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 6 binary64))) (pow.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))) #s(literal -1 binary64))) (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 9 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 9 binary64))) (pow.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 6 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 6 binary64))) (pow.f64 (*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n n)) (log.f64 n)) #s(literal 3 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))))) (*.f64 (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))))) (+.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))))) (*.f64 (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))))) (+.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))) (-.f64 (*.f64 (neg.f64 n) (log.f64 n)) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) (fma.f64 (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) (*.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))) (fma.f64 (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))) (*.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (*.f64 (*.f64 (neg.f64 n) (log.f64 n)) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))))))","(/.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)))) #s(literal 1 binary64)) (neg.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))))","(/.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)))) #s(literal 1 binary64)) (neg.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))))) (neg.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)))) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)))) (-.f64 (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))) (*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n n)) (neg.f64 (log.f64 n)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)))) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 4 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 6 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 4 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 4 binary64))) (pow.f64 (*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n n)) (log.f64 n)) #s(literal 2 binary64))) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 6 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64))) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 9 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 6 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 6 binary64))) (pow.f64 (*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n n)) (log.f64 n)) #s(literal 3 binary64))) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) (*.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)))) (pow.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))) (*.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 6 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 6 binary64))) (*.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (+.f64 (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 4 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 4 binary64))) (pow.f64 (*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n n)) (log.f64 n)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 6 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 6 binary64))) (*.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))) (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 4 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 4 binary64))) (*.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 9 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 9 binary64))) (*.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))) (+.f64 (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 6 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 6 binary64))) (pow.f64 (*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n n)) (log.f64 n)) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))) (*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n n)) (neg.f64 (log.f64 n))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64))) (-.f64 (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))) (*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n n)) (neg.f64 (log.f64 n)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64))) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))) (*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n n)) (neg.f64 (log.f64 n)))) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)))) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)))) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))) (neg.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64))) (neg.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))))))","(fma.f64 (/.f64 (*.f64 (fma.f64 n n #s(literal -1 binary64)) (log1p.f64 n)) (-.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (+.f64 #s(literal 1 binary64) n) n #s(literal 1 binary64)) (*.f64 (neg.f64 n) (log.f64 n)))","(fma.f64 (/.f64 (*.f64 (fma.f64 n n #s(literal -1 binary64)) (log1p.f64 n)) (fma.f64 n n #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) n) (*.f64 (neg.f64 n) (log.f64 n)))","(fma.f64 (/.f64 (*.f64 (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)) (log1p.f64 n)) (-.f64 (pow.f64 n #s(literal 4 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) n) #s(literal 2 binary64)))) (+.f64 (fma.f64 n n #s(literal -1 binary64)) n) (*.f64 (neg.f64 n) (log.f64 n)))","(fma.f64 (/.f64 (*.f64 (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)) (log1p.f64 n)) (+.f64 (pow.f64 n #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) n) #s(literal 3 binary64)))) (+.f64 (pow.f64 n #s(literal 4 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) n) (-.f64 (-.f64 #s(literal 1 binary64) n) (*.f64 n n)))) (*.f64 (neg.f64 n) (log.f64 n)))","(fma.f64 (/.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (-.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (+.f64 #s(literal 1 binary64) n) n #s(literal 1 binary64)) (*.f64 (neg.f64 n) (log.f64 n)))","(fma.f64 (/.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (fma.f64 n n #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) n) (*.f64 (neg.f64 n) (log.f64 n)))","(fma.f64 (/.f64 (*.f64 (log1p.f64 n) (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 (pow.f64 n #s(literal 4 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) n) #s(literal 2 binary64)))) (+.f64 (fma.f64 n n #s(literal -1 binary64)) n) (*.f64 (neg.f64 n) (log.f64 n)))","(fma.f64 (/.f64 (*.f64 (log1p.f64 n) (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 (pow.f64 n #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) n) #s(literal 3 binary64)))) (+.f64 (pow.f64 n #s(literal 4 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) n) (-.f64 (-.f64 #s(literal 1 binary64) n) (*.f64 n n)))) (*.f64 (neg.f64 n) (log.f64 n)))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) #s(literal 2 binary64)))) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (*.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))))) (neg.f64 (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 6 binary64)) (pow.f64 (*.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) #s(literal 3 binary64)))) (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) (-.f64 (*.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))))) (neg.f64 (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)))) (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (*.f64 (*.f64 (log.f64 n) n) (-.f64 (*.f64 (log.f64 n) n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))) (neg.f64 (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))))))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)))) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (neg.f64 (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))))))","(fma.f64 (*.f64 (neg.f64 (log.f64 n)) #s(literal 1 binary64)) n (*.f64 #s(literal 1 binary64) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))","(fma.f64 (*.f64 (neg.f64 (log.f64 n)) #s(literal 1 binary64)) n (*.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(fma.f64 (*.f64 (neg.f64 (log.f64 n)) #s(literal 1 binary64)) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))","(fma.f64 (*.f64 (log.f64 n) #s(literal -1 binary64)) n (*.f64 #s(literal 1 binary64) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))","(fma.f64 (*.f64 (log.f64 n) #s(literal -1 binary64)) n (*.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(fma.f64 (*.f64 (log.f64 n) #s(literal -1 binary64)) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))","(fma.f64 (*.f64 (fma.f64 n n #s(literal -1 binary64)) (log1p.f64 n)) (pow.f64 (-.f64 n #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 n) (log.f64 n)))","(fma.f64 (*.f64 (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)) (log1p.f64 n)) (pow.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n)) #s(literal -1 binary64)) (*.f64 (neg.f64 n) (log.f64 n)))","(fma.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (pow.f64 (-.f64 n #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 n) (log.f64 n)))","(fma.f64 (*.f64 (log1p.f64 n) (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n)) #s(literal -1 binary64)) (*.f64 (neg.f64 n) (log.f64 n)))","(fma.f64 (*.f64 (log1p.f64 n) n) #s(literal 1 binary64) (-.f64 (log1p.f64 n) (*.f64 (log.f64 n) n)))","(fma.f64 (*.f64 (log1p.f64 n) n) #s(literal 1 binary64) (+.f64 (log1p.f64 n) (*.f64 (neg.f64 n) (log.f64 n))))","(fma.f64 (neg.f64 (log.f64 n)) n (*.f64 #s(literal 1 binary64) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))","(fma.f64 (neg.f64 (log.f64 n)) n (*.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(fma.f64 (neg.f64 (log.f64 n)) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))","(fma.f64 (neg.f64 n) (log.f64 n) (*.f64 #s(literal 1 binary64) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))","(fma.f64 (neg.f64 n) (log.f64 n) (*.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))","(fma.f64 (fma.f64 n n #s(literal -1 binary64)) (*.f64 (pow.f64 (-.f64 n #s(literal 1 binary64)) #s(literal -1 binary64)) (log1p.f64 n)) (*.f64 (neg.f64 n) (log.f64 n)))","(fma.f64 (*.f64 (neg.f64 n) (log.f64 n)) #s(literal 1 binary64) (*.f64 #s(literal 1 binary64) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))","(fma.f64 (*.f64 (neg.f64 n) (log.f64 n)) #s(literal 1 binary64) (*.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(fma.f64 (*.f64 (neg.f64 n) (log.f64 n)) #s(literal 1 binary64) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))","(fma.f64 #s(literal -1 binary64) (*.f64 (log.f64 n) n) (*.f64 #s(literal 1 binary64) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))","(fma.f64 #s(literal -1 binary64) (*.f64 (log.f64 n) n) (*.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(fma.f64 #s(literal -1 binary64) (*.f64 (log.f64 n) n) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))","(fma.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))))))","(fma.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))))))","(fma.f64 (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n)) #s(literal -1 binary64)) (log1p.f64 n)) (*.f64 (neg.f64 n) (log.f64 n)))","(fma.f64 (log.f64 n) (neg.f64 n) (*.f64 #s(literal 1 binary64) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))","(fma.f64 (log.f64 n) (neg.f64 n) (*.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(fma.f64 (log.f64 n) (neg.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))","(fma.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64) (*.f64 (neg.f64 n) (log.f64 n)))","(fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (*.f64 (neg.f64 n) (log.f64 n)))","(fma.f64 (log1p.f64 n) #s(literal 1 binary64) (-.f64 (*.f64 n (log1p.f64 n)) (*.f64 (log.f64 n) n)))","(fma.f64 (log1p.f64 n) #s(literal 1 binary64) (-.f64 (*.f64 (log1p.f64 n) n) (*.f64 (log.f64 n) n)))","(fma.f64 (log1p.f64 n) #s(literal 1 binary64) (fma.f64 n (log1p.f64 n) (*.f64 (neg.f64 n) (log.f64 n))))","(fma.f64 (log1p.f64 n) #s(literal 1 binary64) (fma.f64 (log1p.f64 n) n (*.f64 (neg.f64 n) (log.f64 n))))","(fma.f64 (log1p.f64 n) n (-.f64 (log1p.f64 n) (*.f64 (log.f64 n) n)))","(fma.f64 (log1p.f64 n) n (+.f64 (log1p.f64 n) (*.f64 (neg.f64 n) (log.f64 n))))","(fma.f64 (+.f64 #s(literal 1 binary64) n) (log1p.f64 n) (*.f64 (neg.f64 n) (log.f64 n)))","(fma.f64 #s(literal 1 binary64) (*.f64 n (log1p.f64 n)) (-.f64 (log1p.f64 n) (*.f64 (log.f64 n) n)))","(fma.f64 #s(literal 1 binary64) (*.f64 n (log1p.f64 n)) (+.f64 (log1p.f64 n) (*.f64 (neg.f64 n) (log.f64 n))))","(fma.f64 #s(literal 1 binary64) (*.f64 (neg.f64 n) (log.f64 n)) (*.f64 #s(literal 1 binary64) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))","(fma.f64 #s(literal 1 binary64) (*.f64 (neg.f64 n) (log.f64 n)) (*.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(fma.f64 #s(literal 1 binary64) (*.f64 (neg.f64 n) (log.f64 n)) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))","(fma.f64 #s(literal 1 binary64) (fma.f64 (log1p.f64 n) n (log1p.f64 n)) (*.f64 (neg.f64 n) (log.f64 n)))","(fma.f64 #s(literal 1 binary64) (log1p.f64 n) (-.f64 (*.f64 n (log1p.f64 n)) (*.f64 (log.f64 n) n)))","(fma.f64 #s(literal 1 binary64) (log1p.f64 n) (-.f64 (*.f64 (log1p.f64 n) n) (*.f64 (log.f64 n) n)))","(fma.f64 #s(literal 1 binary64) (log1p.f64 n) (fma.f64 n (log1p.f64 n) (*.f64 (neg.f64 n) (log.f64 n))))","(fma.f64 #s(literal 1 binary64) (log1p.f64 n) (fma.f64 (log1p.f64 n) n (*.f64 (neg.f64 n) (log.f64 n))))","(fma.f64 n (*.f64 #s(literal 1 binary64) (neg.f64 (log.f64 n))) (*.f64 #s(literal 1 binary64) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))","(fma.f64 n (*.f64 #s(literal 1 binary64) (neg.f64 (log.f64 n))) (*.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(fma.f64 n (*.f64 #s(literal 1 binary64) (neg.f64 (log.f64 n))) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))","(fma.f64 n (neg.f64 (log.f64 n)) (*.f64 #s(literal 1 binary64) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))","(fma.f64 n (neg.f64 (log.f64 n)) (*.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(fma.f64 n (neg.f64 (log.f64 n)) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))","(fma.f64 n (log1p.f64 n) (-.f64 (log1p.f64 n) (*.f64 (log.f64 n) n)))","(fma.f64 n (log1p.f64 n) (+.f64 (log1p.f64 n) (*.f64 (neg.f64 n) (log.f64 n))))","(-.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 0 binary64)) (*.f64 (log.f64 n) n))","(-.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))))","(-.f64 #s(literal 0 binary64) (-.f64 (*.f64 (log.f64 n) n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))","(-.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) (*.f64 (log.f64 n) n))","(+.f64 (fma.f64 (neg.f64 (log.f64 n)) n (*.f64 n (log1p.f64 n))) (log1p.f64 n))","(+.f64 (fma.f64 (neg.f64 (log.f64 n)) n (log1p.f64 n)) (*.f64 n (log1p.f64 n)))","(+.f64 (fma.f64 (neg.f64 (log.f64 n)) n (log1p.f64 n)) (*.f64 (log1p.f64 n) n))","(+.f64 (fma.f64 (neg.f64 (log.f64 n)) n (*.f64 (log1p.f64 n) n)) (log1p.f64 n))","(+.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (*.f64 (neg.f64 n) (log.f64 n)))","(+.f64 (*.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)) (*.f64 (neg.f64 n) (log.f64 n)))","(+.f64 (*.f64 n (log1p.f64 n)) (-.f64 (log1p.f64 n) (*.f64 (log.f64 n) n)))","(+.f64 (*.f64 n (log1p.f64 n)) (+.f64 (log1p.f64 n) (*.f64 (neg.f64 n) (log.f64 n))))","(+.f64 (*.f64 (log1p.f64 n) n) (-.f64 (log1p.f64 n) (*.f64 (log.f64 n) n)))","(+.f64 (*.f64 (log1p.f64 n) n) (+.f64 (log1p.f64 n) (*.f64 (neg.f64 n) (log.f64 n))))","(+.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) (neg.f64 (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))))))","(+.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))))))","(+.f64 (*.f64 (neg.f64 n) (log.f64 n)) (*.f64 #s(literal 1 binary64) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))","(+.f64 (*.f64 (neg.f64 n) (log.f64 n)) (*.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(+.f64 (*.f64 (neg.f64 n) (log.f64 n)) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))","(+.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) (*.f64 (neg.f64 n) (log.f64 n)))","(+.f64 (log1p.f64 n) (-.f64 (*.f64 n (log1p.f64 n)) (*.f64 (log.f64 n) n)))","(+.f64 (log1p.f64 n) (-.f64 (*.f64 (log1p.f64 n) n) (*.f64 (log.f64 n) n)))","(+.f64 (log1p.f64 n) (fma.f64 n (log1p.f64 n) (*.f64 (neg.f64 n) (log.f64 n))))","(+.f64 (log1p.f64 n) (fma.f64 (log1p.f64 n) n (*.f64 (neg.f64 n) (log.f64 n))))","(*.f64 (log1p.f64 n) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (log1p.f64 n))","(log1p.f64 n)","(/.f64 (-.f64 (*.f64 (log.f64 (fma.f64 n n #s(literal -1 binary64))) (log.f64 (fma.f64 n n #s(literal -1 binary64)))) (*.f64 (log.f64 (-.f64 n #s(literal 1 binary64))) (log.f64 (-.f64 n #s(literal 1 binary64))))) (+.f64 (log.f64 (fma.f64 n n #s(literal -1 binary64))) (log.f64 (-.f64 n #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 (log1p.f64 (pow.f64 n #s(literal 3 binary64))) (log1p.f64 (pow.f64 n #s(literal 3 binary64)))) (*.f64 (log1p.f64 (fma.f64 #s(literal -1 binary64) n (*.f64 n n))) (log1p.f64 (fma.f64 #s(literal -1 binary64) n (*.f64 n n))))) (+.f64 (log1p.f64 (pow.f64 n #s(literal 3 binary64))) (log1p.f64 (fma.f64 #s(literal -1 binary64) n (*.f64 n n)))))","(/.f64 (-.f64 (pow.f64 (log.f64 (fma.f64 n n #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (log.f64 (-.f64 n #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (log.f64 (fma.f64 n n #s(literal -1 binary64))) (log.f64 (fma.f64 n n #s(literal -1 binary64))) (fma.f64 (log.f64 (-.f64 n #s(literal 1 binary64))) (log.f64 (-.f64 n #s(literal 1 binary64))) (*.f64 (log.f64 (fma.f64 n n #s(literal -1 binary64))) (log.f64 (-.f64 n #s(literal 1 binary64)))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 n #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (fma.f64 #s(literal -1 binary64) n (*.f64 n n))) #s(literal 3 binary64))) (fma.f64 (log1p.f64 (pow.f64 n #s(literal 3 binary64))) (log1p.f64 (pow.f64 n #s(literal 3 binary64))) (fma.f64 (log1p.f64 (fma.f64 #s(literal -1 binary64) n (*.f64 n n))) (log1p.f64 (fma.f64 #s(literal -1 binary64) n (*.f64 n n))) (*.f64 (log1p.f64 (pow.f64 n #s(literal 3 binary64))) (log1p.f64 (fma.f64 #s(literal -1 binary64) n (*.f64 n n)))))))","(neg.f64 (log.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) n))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 n) n)) (log1p.f64 (neg.f64 n)))","(-.f64 (log.f64 (neg.f64 (fma.f64 n n #s(literal -1 binary64)))) (log.f64 (fma.f64 #s(literal -1 binary64) n #s(literal 1 binary64))))","(-.f64 (log.f64 (neg.f64 (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)))) (log.f64 (neg.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n)))))","(-.f64 (log.f64 (fma.f64 n n #s(literal -1 binary64))) (log.f64 (-.f64 n #s(literal 1 binary64))))","(-.f64 (log1p.f64 (pow.f64 n #s(literal 3 binary64))) (log1p.f64 (*.f64 n (-.f64 n #s(literal 1 binary64)))))","(-.f64 (log1p.f64 (pow.f64 n #s(literal 3 binary64))) (log1p.f64 (fma.f64 #s(literal -1 binary64) n (*.f64 n n))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) n))))","(+.f64 (log.f64 (fma.f64 n n #s(literal -1 binary64))) (neg.f64 (log.f64 (-.f64 n #s(literal 1 binary64)))))","(+.f64 (log.f64 (fma.f64 n n #s(literal -1 binary64))) (log.f64 (pow.f64 (-.f64 n #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (log1p.f64 (pow.f64 n #s(literal 3 binary64))) (neg.f64 (log1p.f64 (fma.f64 #s(literal -1 binary64) n (*.f64 n n)))))","(+.f64 (log1p.f64 (pow.f64 n #s(literal 3 binary64))) (log.f64 (pow.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n)) #s(literal -1 binary64))))","(log.f64 (+.f64 #s(literal 1 binary64) n))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64))))))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 4 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal 2 binary64)))) (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 6 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal 3 binary64)))) (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 4 binary64)) (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) (-.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64))))))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) #s(literal 1 binary64))) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64)))) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (fma.f64 (log.f64 n) n #s(literal 1 binary64)))))","(*.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (*.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) (+.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))))))","(*.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) #s(literal -1 binary64)) (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) #s(literal 1 binary64)))","(*.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))))))","(*.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64))) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64))))))","(*.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64))))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64)))) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal -1 binary64))) (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal -1 binary64))) (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) #s(literal -1 binary64))) (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 9 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) #s(literal -1 binary64))) (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64)))) (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))))) (*.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64)))) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64))))) (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))))) (*.f64 (pow.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64))))) (pow.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)))) (-.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64)))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64)))) (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64)))) (fma.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64)))) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64))))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64))))) (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64))))) (fma.f64 (pow.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64))))) (pow.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (*.f64 #s(literal -1 binary64) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))))))","(/.f64 (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64))) (*.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (fma.f64 (log.f64 n) n #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (*.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) (+.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)))) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64)))) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64)))) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64))))) (*.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 n n #s(literal -1 binary64)) (log1p.f64 n)) (fma.f64 (log.f64 n) n #s(literal -1 binary64))) (*.f64 (-.f64 n #s(literal 1 binary64)) (-.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) #s(literal 1 binary64)))) (*.f64 (-.f64 n #s(literal 1 binary64)) (fma.f64 (log.f64 n) n #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 n n #s(literal -1 binary64)) (log1p.f64 n)) (-.f64 (+.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (log.f64 n) n))) (*.f64 (-.f64 n #s(literal 1 binary64)) (+.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)) #s(literal 1 binary64)))) (*.f64 (-.f64 n #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (log.f64 n) n))))","(/.f64 (-.f64 (*.f64 (*.f64 (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)) (log1p.f64 n)) (fma.f64 (log.f64 n) n #s(literal -1 binary64))) (*.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n)) (-.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) #s(literal 1 binary64)))) (*.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n)) (fma.f64 (log.f64 n) n #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)) (log1p.f64 n)) (-.f64 (+.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (log.f64 n) n))) (*.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n)) (+.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)) #s(literal 1 binary64)))) (*.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n)) (-.f64 (+.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (log.f64 n) n))))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (fma.f64 (log.f64 n) n #s(literal -1 binary64))) (*.f64 (-.f64 n #s(literal 1 binary64)) (-.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) #s(literal 1 binary64)))) (*.f64 (-.f64 n #s(literal 1 binary64)) (fma.f64 (log.f64 n) n #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (log.f64 n) n))) (*.f64 (-.f64 n #s(literal 1 binary64)) (+.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)) #s(literal 1 binary64)))) (*.f64 (-.f64 n #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (log.f64 n) n))))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 n) (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (log.f64 n) n #s(literal -1 binary64))) (*.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n)) (-.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) #s(literal 1 binary64)))) (*.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n)) (fma.f64 (log.f64 n) n #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 n) (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 (+.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (log.f64 n) n))) (*.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n)) (+.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)) #s(literal 1 binary64)))) (*.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n)) (-.f64 (+.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (log.f64 n) n))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) #s(literal 2 binary64))) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (fma.f64 (log.f64 n) n #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (*.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) (+.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64)))) (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 9 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64)))) (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 9 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64))) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (fma.f64 (log.f64 n) n #s(literal 1 binary64))) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (*.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) (+.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64)))) (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64)))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) #s(literal 1 binary64))) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64)))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64))))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) #s(literal 1 binary64)) (neg.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) #s(literal 1 binary64)) (neg.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))))))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 4 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal 2 binary64)))) (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64)))) (neg.f64 (pow.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 6 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal 3 binary64)))) (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 4 binary64)) (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) (-.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64))))) (neg.f64 (pow.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) (neg.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) (neg.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64))))) (neg.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) #s(literal 1 binary64))) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64))) (neg.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal -1 binary64))))","(fma.f64 (/.f64 (*.f64 (fma.f64 n n #s(literal -1 binary64)) (log1p.f64 n)) (-.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (+.f64 #s(literal 1 binary64) n) n #s(literal 1 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)))","(fma.f64 (/.f64 (*.f64 (fma.f64 n n #s(literal -1 binary64)) (log1p.f64 n)) (fma.f64 n n #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) n) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)))","(fma.f64 (/.f64 (*.f64 (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)) (log1p.f64 n)) (-.f64 (pow.f64 n #s(literal 4 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) n) #s(literal 2 binary64)))) (+.f64 (fma.f64 n n #s(literal -1 binary64)) n) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)))","(fma.f64 (/.f64 (*.f64 (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)) (log1p.f64 n)) (+.f64 (pow.f64 n #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) n) #s(literal 3 binary64)))) (+.f64 (pow.f64 n #s(literal 4 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) n) (-.f64 (-.f64 #s(literal 1 binary64) n) (*.f64 n n)))) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)))","(fma.f64 (/.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (-.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (+.f64 #s(literal 1 binary64) n) n #s(literal 1 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)))","(fma.f64 (/.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (fma.f64 n n #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) n) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)))","(fma.f64 (/.f64 (*.f64 (log1p.f64 n) (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 (pow.f64 n #s(literal 4 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) n) #s(literal 2 binary64)))) (+.f64 (fma.f64 n n #s(literal -1 binary64)) n) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)))","(fma.f64 (/.f64 (*.f64 (log1p.f64 n) (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 (pow.f64 n #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) n) #s(literal 3 binary64)))) (+.f64 (pow.f64 n #s(literal 4 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) n) (-.f64 (-.f64 #s(literal 1 binary64) n) (*.f64 n n)))) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)))","(fma.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))) (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)))) (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (*.f64 (*.f64 (log.f64 n) n) (-.f64 (*.f64 (log.f64 n) n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))) #s(literal -1 binary64))","(fma.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64))) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) #s(literal 2 binary64)))) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (*.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))))) #s(literal -1 binary64))","(fma.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 6 binary64)) (pow.f64 (*.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) #s(literal 3 binary64)))) (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) (-.f64 (*.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))))) #s(literal -1 binary64))","(fma.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)))) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64))","(fma.f64 (*.f64 (neg.f64 (log.f64 n)) #s(literal 1 binary64)) n (-.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(fma.f64 (*.f64 (neg.f64 (log.f64 n)) #s(literal 1 binary64)) n (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64)))","(fma.f64 (*.f64 (log.f64 n) #s(literal -1 binary64)) n (-.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(fma.f64 (*.f64 (log.f64 n) #s(literal -1 binary64)) n (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64)))","(fma.f64 (/.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64)))) (/.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 1 binary64)) (neg.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal -1 binary64))))","(fma.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)))) (pow.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (*.f64 (fma.f64 n n #s(literal -1 binary64)) (log1p.f64 n)) (pow.f64 (-.f64 n #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)))","(fma.f64 (*.f64 (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)) (log1p.f64 n)) (pow.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n)) #s(literal -1 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)))","(fma.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (pow.f64 (-.f64 n #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)))","(fma.f64 (*.f64 (log1p.f64 n) (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n)) #s(literal -1 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)))","(fma.f64 (*.f64 (log1p.f64 n) n) #s(literal 1 binary64) (-.f64 (log1p.f64 n) (fma.f64 (log.f64 n) n #s(literal 1 binary64))))","(fma.f64 (*.f64 (log1p.f64 n) n) #s(literal 1 binary64) (+.f64 (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64))))","(fma.f64 (neg.f64 (log.f64 n)) n (-.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(fma.f64 (neg.f64 (log.f64 n)) n (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64)) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))) #s(literal -1 binary64))","(fma.f64 (pow.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64))) #s(literal -1 binary64))","(fma.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))))) #s(literal -1 binary64))","(fma.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))))) #s(literal -1 binary64))","(fma.f64 (neg.f64 n) (log.f64 n) (-.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64)))","(fma.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64))) #s(literal -1 binary64))","(fma.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))) (*.f64 (pow.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(fma.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))) (pow.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (fma.f64 n n #s(literal -1 binary64)) (*.f64 (pow.f64 (-.f64 n #s(literal 1 binary64)) #s(literal -1 binary64)) (log1p.f64 n)) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)))","(fma.f64 (*.f64 (neg.f64 n) (log.f64 n)) #s(literal 1 binary64) (-.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(fma.f64 (*.f64 (neg.f64 n) (log.f64 n)) #s(literal 1 binary64) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (fma.f64 (log.f64 n) n #s(literal 1 binary64)) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))","(fma.f64 #s(literal -1 binary64) (*.f64 (log.f64 n) n) (-.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(fma.f64 #s(literal -1 binary64) (*.f64 (log.f64 n) n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64)))","(fma.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))) (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))) #s(literal -1 binary64))) #s(literal -1 binary64))","(fma.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64))) (*.f64 (pow.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(fma.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))) (*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n n)) (neg.f64 (log.f64 n))))) #s(literal -1 binary64))","(fma.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) (pow.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) #s(literal -1 binary64))))","(fma.f64 (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n)) #s(literal -1 binary64)) (log1p.f64 n)) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)))","(fma.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 (log.f64 n) (neg.f64 n) (-.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(fma.f64 (log.f64 n) (neg.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64)))","(fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)))","(fma.f64 (log1p.f64 n) #s(literal 1 binary64) (-.f64 (*.f64 n (log1p.f64 n)) (fma.f64 (log.f64 n) n #s(literal 1 binary64))))","(fma.f64 (log1p.f64 n) #s(literal 1 binary64) (-.f64 (*.f64 (log1p.f64 n) n) (fma.f64 (log.f64 n) n #s(literal 1 binary64))))","(fma.f64 (log1p.f64 n) #s(literal 1 binary64) (fma.f64 n (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64))))","(fma.f64 (log1p.f64 n) #s(literal 1 binary64) (fma.f64 (log1p.f64 n) n (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64))))","(fma.f64 (log1p.f64 n) n (-.f64 (log1p.f64 n) (fma.f64 (log.f64 n) n #s(literal 1 binary64))))","(fma.f64 (log1p.f64 n) n (+.f64 (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64))))","(fma.f64 (+.f64 #s(literal 1 binary64) n) (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (*.f64 n (log1p.f64 n)) (-.f64 (log1p.f64 n) (fma.f64 (log.f64 n) n #s(literal 1 binary64))))","(fma.f64 #s(literal 1 binary64) (*.f64 n (log1p.f64 n)) (+.f64 (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (*.f64 (neg.f64 n) (log.f64 n)) (-.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(fma.f64 #s(literal 1 binary64) (*.f64 (neg.f64 n) (log.f64 n)) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) (log1p.f64 n) (-.f64 (*.f64 n (log1p.f64 n)) (fma.f64 (log.f64 n) n #s(literal 1 binary64))))","(fma.f64 #s(literal 1 binary64) (log1p.f64 n) (-.f64 (*.f64 (log1p.f64 n) n) (fma.f64 (log.f64 n) n #s(literal 1 binary64))))","(fma.f64 #s(literal 1 binary64) (log1p.f64 n) (fma.f64 n (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (log1p.f64 n) (fma.f64 (log1p.f64 n) n (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64))))","(fma.f64 n (*.f64 #s(literal 1 binary64) (neg.f64 (log.f64 n))) (-.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(fma.f64 n (*.f64 #s(literal 1 binary64) (neg.f64 (log.f64 n))) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64)))","(fma.f64 n (neg.f64 (log.f64 n)) (-.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(fma.f64 n (neg.f64 (log.f64 n)) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64)))","(fma.f64 n (log1p.f64 n) (-.f64 (log1p.f64 n) (fma.f64 (log.f64 n) n #s(literal 1 binary64))))","(fma.f64 n (log1p.f64 n) (+.f64 (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64))))","(-.f64 (-.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)) (*.f64 (log.f64 n) n))","(-.f64 (+.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))))) (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))))","(-.f64 (+.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))))) (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))))","(-.f64 (+.f64 #s(literal -1 binary64) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (*.f64 (log.f64 n) n))","(-.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (fma.f64 (log.f64 n) n #s(literal 1 binary64)))) (/.f64 (pow.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) #s(literal 2 binary64)) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (fma.f64 (log.f64 n) n #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (*.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) (+.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))))) (/.f64 (pow.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) #s(literal 3 binary64)) (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (*.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) (+.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64))))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) (+.f64 (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) (-.f64 (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))) (+.f64 (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))) #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))) (-.f64 (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64)))) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64))))) (pow.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(-.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 1 binary64))","(-.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) (fma.f64 (log.f64 n) n #s(literal 1 binary64)))","(+.f64 (+.f64 #s(literal -1 binary64) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (*.f64 (neg.f64 n) (log.f64 n)))","(+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))","(+.f64 (*.f64 n (log1p.f64 n)) (-.f64 (log1p.f64 n) (fma.f64 (log.f64 n) n #s(literal 1 binary64))))","(+.f64 (*.f64 n (log1p.f64 n)) (+.f64 (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64))))","(+.f64 (*.f64 (log1p.f64 n) n) (-.f64 (log1p.f64 n) (fma.f64 (log.f64 n) n #s(literal 1 binary64))))","(+.f64 (*.f64 (log1p.f64 n) n) (+.f64 (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64)))) (neg.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64))))) (neg.f64 (pow.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) #s(literal -1 binary64))))","(+.f64 (*.f64 (neg.f64 n) (log.f64 n)) (-.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(+.f64 (*.f64 (neg.f64 n) (log.f64 n)) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64)))","(+.f64 #s(literal -1 binary64) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))","(+.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64))","(+.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)))","(+.f64 (log1p.f64 n) (-.f64 (*.f64 n (log1p.f64 n)) (fma.f64 (log.f64 n) n #s(literal 1 binary64))))","(+.f64 (log1p.f64 n) (-.f64 (*.f64 (log1p.f64 n) n) (fma.f64 (log.f64 n) n #s(literal 1 binary64))))","(+.f64 (log1p.f64 n) (fma.f64 n (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64))))","(+.f64 (log1p.f64 n) (fma.f64 (log1p.f64 n) n (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64))))","(*.f64 (/.f64 (*.f64 (fma.f64 n n #s(literal -1 binary64)) (log1p.f64 n)) (-.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (+.f64 #s(literal 1 binary64) n) n #s(literal 1 binary64)))","(*.f64 (/.f64 (*.f64 (fma.f64 n n #s(literal -1 binary64)) (log1p.f64 n)) (fma.f64 n n #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) n))","(*.f64 (/.f64 (*.f64 (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)) (log1p.f64 n)) (-.f64 (pow.f64 n #s(literal 4 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) n) #s(literal 2 binary64)))) (+.f64 (fma.f64 n n #s(literal -1 binary64)) n))","(*.f64 (/.f64 (*.f64 (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)) (log1p.f64 n)) (+.f64 (pow.f64 n #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) n) #s(literal 3 binary64)))) (+.f64 (pow.f64 n #s(literal 4 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) n) (-.f64 (-.f64 #s(literal 1 binary64) n) (*.f64 n n)))))","(*.f64 (/.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (-.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (+.f64 #s(literal 1 binary64) n) n #s(literal 1 binary64)))","(*.f64 (/.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (fma.f64 n n #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) n))","(*.f64 (/.f64 (*.f64 (log1p.f64 n) (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 (pow.f64 n #s(literal 4 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) n) #s(literal 2 binary64)))) (+.f64 (fma.f64 n n #s(literal -1 binary64)) n))","(*.f64 (/.f64 (*.f64 (log1p.f64 n) (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 (pow.f64 n #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) n) #s(literal 3 binary64)))) (+.f64 (pow.f64 n #s(literal 4 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) n) (-.f64 (-.f64 #s(literal 1 binary64) n) (*.f64 n n)))))","(*.f64 (*.f64 (fma.f64 n n #s(literal -1 binary64)) (log1p.f64 n)) (pow.f64 (-.f64 n #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)) (log1p.f64 n)) (pow.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n)) #s(literal -1 binary64)))","(*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (pow.f64 (-.f64 n #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (log1p.f64 n) (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n)) #s(literal -1 binary64)))","(*.f64 (fma.f64 n n #s(literal -1 binary64)) (*.f64 (pow.f64 (-.f64 n #s(literal 1 binary64)) #s(literal -1 binary64)) (log1p.f64 n)))","(*.f64 (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n)) #s(literal -1 binary64)) (log1p.f64 n)))","(*.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n))","(*.f64 (+.f64 #s(literal 1 binary64) n) (log1p.f64 n))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 n n)) (log1p.f64 n)) (-.f64 #s(literal 1 binary64) n))","(/.f64 (*.f64 (neg.f64 (fma.f64 n n #s(literal -1 binary64))) (log1p.f64 n)) (fma.f64 #s(literal -1 binary64) n #s(literal 1 binary64)))","(/.f64 (*.f64 (neg.f64 (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64))) (log1p.f64 n)) (neg.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n))))","(/.f64 (*.f64 (log1p.f64 n) (-.f64 #s(literal 1 binary64) (*.f64 n n))) (-.f64 #s(literal 1 binary64) n))","(/.f64 (*.f64 (log1p.f64 n) (neg.f64 (fma.f64 n n #s(literal -1 binary64)))) (fma.f64 #s(literal -1 binary64) n #s(literal 1 binary64)))","(/.f64 (*.f64 (log1p.f64 n) (neg.f64 (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 n) #s(literal 2 binary64)) (*.f64 (*.f64 n (log1p.f64 n)) (*.f64 n (log1p.f64 n)))) (-.f64 (log1p.f64 n) (*.f64 n (log1p.f64 n))))","(/.f64 (-.f64 (*.f64 (*.f64 n (log1p.f64 n)) (*.f64 n (log1p.f64 n))) (pow.f64 (log1p.f64 n) #s(literal 2 binary64))) (-.f64 (*.f64 n (log1p.f64 n)) (log1p.f64 n)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 n) #s(literal 2 binary64)) (*.f64 (*.f64 (log1p.f64 n) n) (*.f64 (log1p.f64 n) n))) (-.f64 (log1p.f64 n) (*.f64 (log1p.f64 n) n)))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 n) n) (*.f64 (log1p.f64 n) n)) (pow.f64 (log1p.f64 n) #s(literal 2 binary64))) (-.f64 (*.f64 (log1p.f64 n) n) (log1p.f64 n)))","(/.f64 (+.f64 (pow.f64 (log1p.f64 n) #s(literal 3 binary64)) (pow.f64 (*.f64 n (log1p.f64 n)) #s(literal 3 binary64))) (fma.f64 (log1p.f64 n) (log1p.f64 n) (-.f64 (*.f64 (*.f64 n (log1p.f64 n)) (*.f64 n (log1p.f64 n))) (*.f64 (log1p.f64 n) (*.f64 n (log1p.f64 n))))))","(/.f64 (+.f64 (pow.f64 (*.f64 n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 n) #s(literal 3 binary64))) (fma.f64 (*.f64 n (log1p.f64 n)) (*.f64 n (log1p.f64 n)) (-.f64 (pow.f64 (log1p.f64 n) #s(literal 2 binary64)) (*.f64 (*.f64 n (log1p.f64 n)) (log1p.f64 n)))))","(/.f64 (+.f64 (pow.f64 (log1p.f64 n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log1p.f64 n) n) #s(literal 3 binary64))) (fma.f64 (log1p.f64 n) (log1p.f64 n) (-.f64 (*.f64 (*.f64 (log1p.f64 n) n) (*.f64 (log1p.f64 n) n)) (*.f64 (log1p.f64 n) (*.f64 (log1p.f64 n) n)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (log1p.f64 n) n) #s(literal 3 binary64)) (pow.f64 (log1p.f64 n) #s(literal 3 binary64))) (fma.f64 (*.f64 (log1p.f64 n) n) (*.f64 (log1p.f64 n) n) (-.f64 (pow.f64 (log1p.f64 n) #s(literal 2 binary64)) (*.f64 (*.f64 (log1p.f64 n) n) (log1p.f64 n)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 n n #s(literal -1 binary64)) (log1p.f64 n))) (fma.f64 #s(literal -1 binary64) n #s(literal 1 binary64)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)) (log1p.f64 n))) (neg.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n))))","(/.f64 (neg.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64)))) (fma.f64 #s(literal -1 binary64) n #s(literal 1 binary64)))","(/.f64 (neg.f64 (*.f64 (log1p.f64 n) (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n))))","(/.f64 (*.f64 (fma.f64 n n #s(literal -1 binary64)) (log1p.f64 n)) (-.f64 n #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)) (log1p.f64 n)) (+.f64 #s(literal 1 binary64) (*.f64 n (-.f64 n #s(literal 1 binary64)))))","(/.f64 (*.f64 (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)) (log1p.f64 n)) (fma.f64 n n (-.f64 #s(literal 1 binary64) n)))","(/.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (-.f64 n #s(literal 1 binary64)))","(/.f64 (*.f64 (log1p.f64 n) (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 #s(literal 1 binary64) (*.f64 n (-.f64 n #s(literal 1 binary64)))))","(/.f64 (*.f64 (log1p.f64 n) (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 n n (-.f64 #s(literal 1 binary64) n)))","(/.f64 (log1p.f64 n) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) n)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 n #s(literal 1 binary64)) (*.f64 (fma.f64 n n #s(literal -1 binary64)) (log1p.f64 n))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n)) (*.f64 (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)) (log1p.f64 n))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 n #s(literal 1 binary64)) (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n)) (*.f64 (log1p.f64 n) (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)))))","(fma.f64 (*.f64 (log1p.f64 n) n) #s(literal 1 binary64) (log1p.f64 n))","(fma.f64 (log1p.f64 n) #s(literal 1 binary64) (*.f64 n (log1p.f64 n)))","(fma.f64 (log1p.f64 n) #s(literal 1 binary64) (*.f64 (log1p.f64 n) n))","(fma.f64 (log1p.f64 n) n (log1p.f64 n))","(fma.f64 #s(literal 1 binary64) (*.f64 n (log1p.f64 n)) (log1p.f64 n))","(fma.f64 #s(literal 1 binary64) (log1p.f64 n) (*.f64 n (log1p.f64 n)))","(fma.f64 #s(literal 1 binary64) (log1p.f64 n) (*.f64 (log1p.f64 n) n))","(fma.f64 n (log1p.f64 n) (log1p.f64 n))","(+.f64 (*.f64 n (log1p.f64 n)) (log1p.f64 n))","(+.f64 (*.f64 (log1p.f64 n) n) (log1p.f64 n))","(+.f64 (log1p.f64 n) (*.f64 n (log1p.f64 n)))","(+.f64 (log1p.f64 n) (*.f64 (log1p.f64 n) n))","(*.f64 (*.f64 (log.f64 n) #s(literal 1 binary64)) n)","(*.f64 (*.f64 (log.f64 n) n) #s(literal 1 binary64))","(*.f64 (log.f64 n) n)","(*.f64 #s(literal 1 binary64) (*.f64 (log.f64 n) n))","(*.f64 n (*.f64 #s(literal 1 binary64) (log.f64 n)))","(*.f64 n (*.f64 (log.f64 n) #s(literal 1 binary64)))","(*.f64 n (log.f64 n))","(+.f64 #s(literal 0 binary64) (log.f64 n))","(+.f64 (log.f64 n) #s(literal 0 binary64))","(log.f64 n)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":253.7861328125,"type":"rewrite"},{"compiler":[[16022,1515]],"memory":[[510640,45127264]],"time":64.059814453125,"type":"eval"},{"alts":[["(-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64))","next",0.0,"binary64"],["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))","next",63.00443156229303,"binary64"]],"compiler":[[20,13],[17,11]],"count":[[481,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[480,2],"picked":[1,0]}],"memory":[[-1887008,18020496]],"min-error":[[0.0,"binary64"]],"time":7.318115234375,"type":"prune"},{"egraph":[[0,1706,52,0.00760192],[11,1706,64,0.009946864],[10,1699,64,0.010623199],[9,1684,64,0.010505218],[8,1642,64,0.010668274],[7,1338,64,0.012388598],[6,892,64,0.01066361],[5,503,64,0.004790351],[4,264,64,0.002277388],[3,130,64,0.000889075],[2,63,64,0.000441619],[1,34,64,0.000244441],[0,18,64,0.000234641],[0,15,64,0.000118115]],"inputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))","#s(literal -1 binary64)","(-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))","(+.f64 (log.f64 n) #s(literal 1 binary64))","(log.f64 n)","n","#s(literal 1 binary64)"]],"locations":[["(log.f64 n)","cost-diff",0],["(+.f64 (log.f64 n) #s(literal 1 binary64))","cost-diff",0],["#s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))","cost-diff",0],["(-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64))","cost-diff",0],["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))","cost-diff",0]],"memory":[[4717248,4717248]],"method":["egg-herbie"],"outputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))","#s(literal -1 binary64)","(-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64))","(-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (-.f64 (log.f64 n) #s(literal -1 binary64))) #s(literal 1 binary64))","#s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))","#s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (-.f64 (log.f64 n) #s(literal -1 binary64)))","(+.f64 (log.f64 n) #s(literal 1 binary64))","(-.f64 (log.f64 n) #s(literal -1 binary64))","(log.f64 n)","n","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":97.25,"type":"simplify"},{"compiler":[[54,13]],"locations":[["(-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64))","accuracy",0.0],["(+.f64 (log.f64 n) #s(literal 1 binary64))","accuracy",0.0],["(log.f64 n)","accuracy",0.0],["#s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))","accuracy",0.0],["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))","accuracy",63.00443156229303]],"memory":[[1701376,17834688]],"mixsample":[[0.249755859375,"ival-add",1200],[0.5498046875,"ival-sub",1200],[19.236572265625,"adjust",800],[0.658203125,"ival-mult",1200],[4.0380859375,"ival-log",2800],[4.612060546875,"ival-log1p",2800],[0.8642578125,"ival-mult",2000],[0.65966796875,"ival-mult",2800],[0.1298828125,"ival-assert",0],[3.543212890625,"ival-sub",0],[3.299560546875,"ival-log1p",1600],[2.80908203125,"ival-log",1600],[0.212646484375,"ival-sub",400],[2.440185546875,"ival-log1p",1200],[3.955810546875,"ival-log",2000],[2.146728515625,"ival-log",1200],[3.994873046875,"ival-add",0],[0.317626953125,"ival-add",1600],[3.989013671875,"ival-mult",0],[0.494873046875,"ival-sub",800],[4.61279296875,"ival-log1p",2000],[1.13720703125,"ival-mult",1600],[0.3212890625,"ival-add",2800],[0.349365234375,"ival-add",2000],[7.15869140625,"ival-log1p",2400],[3.60595703125,"ival-log",0],[0.197998046875,"ival-true",0],[4.857421875,"ival-log1p",0],[0.41943359375,"ival-add",2400],[1.07666015625,"ival-mult",2400],[0.315673828125,"exact",0],[6.2080078125,"ival-log",2400]],"outcomes":[[102.125732421875,1,"valid",256]],"time":115.677001953125,"type":"localize"},{"count":[[5,26]],"inputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))","(-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))","(+.f64 (log.f64 n) #s(literal 1 binary64))","(log.f64 n)"]],"memory":[[-4558192,17368704]],"outputs":[["-1","(- (* n (- 1 (log n))) 1)","(- (* n (- (+ 1 (* 1/2 n)) (log n))) 1)","(- (* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n))) 1)","(* n (- 1 (log n)))","(* n (- (+ 1 (* 1/2 n)) (log n)))","(* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n)))","(* n (- (+ 1 (* n (+ 1/2 (* n (- (* 1/12 n) 1/6))))) (log n)))","(+ 1 (log n))","(log n)","(* -1 (log (/ 1 n)))","(+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))","(- (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))) (/ 1/6 (pow n 2)))","(- (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3))))) (/ 1/6 (pow n 2)))","(+ 1 (* -1 (log (/ 1 n))))","(+ 1 (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))))","(- (+ 1 (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))) (/ 1/6 (pow n 2)))","(- (+ 1 (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3)))))) (/ 1/6 (pow n 2)))","(+ (log -1) (* -1 (log (/ -1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n))))","(+ 1 (+ (log -1) (* -1 (log (/ -1 n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n)))))"]],"series":[[7.60400390625,"((- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+ (log n) 1) (log n))","n","-inf"],[45.273193359375,"((- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+ (log n) 1) (log n))","n","inf"],[11.2890625,"((- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+ (log n) 1) (log n))","n","0"]],"time":64.7919921875,"type":"series"},{"count":[[26,26]],"egraph":[[0,8130,255,0.105794527],[5,6954,267,0.030708227],[4,4519,267,0.036830949],[3,1579,275,0.022724972],[2,550,279,0.005494474],[1,211,289,0.001755268],[0,79,313,0.000809083]],"inputs":[["-1","(- (* n (- 1 (log n))) 1)","(- (* n (- (+ 1 (* 1/2 n)) (log n))) 1)","(- (* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n))) 1)","(* n (- 1 (log n)))","(* n (- (+ 1 (* 1/2 n)) (log n)))","(* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n)))","(* n (- (+ 1 (* n (+ 1/2 (* n (- (* 1/12 n) 1/6))))) (log n)))","(+ 1 (log n))","(log n)","(* -1 (log (/ 1 n)))","(+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))","(- (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))) (/ 1/6 (pow n 2)))","(- (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3))))) (/ 1/6 (pow n 2)))","(+ 1 (* -1 (log (/ 1 n))))","(+ 1 (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))))","(- (+ 1 (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))) (/ 1/6 (pow n 2)))","(- (+ 1 (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3)))))) (/ 1/6 (pow n 2)))","(+ (log -1) (* -1 (log (/ -1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n))))","(+ 1 (+ (log -1) (* -1 (log (/ -1 n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n)))))"]],"memory":[[-7009056,34148416]],"method":["egg-herbie"],"outputs":[["-1","#s(literal -1 binary64)","(- (* n (- 1 (log n))) 1)","(fma.f64 (-.f64 #s(literal 1 binary64) (log.f64 n)) n #s(literal -1 binary64))","(- (* n (- (+ 1 (* 1/2 n)) (log n))) 1)","(fma.f64 (fma.f64 #s(literal 1/2 binary64) n (-.f64 #s(literal 1 binary64) (log.f64 n))) n #s(literal -1 binary64))","(- (* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n))) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) n #s(literal 1/2 binary64)) n (-.f64 #s(literal 1 binary64) (log.f64 n))) n #s(literal -1 binary64))","(* n (- 1 (log n)))","(*.f64 (-.f64 #s(literal 1 binary64) (log.f64 n)) n)","(* n (- (+ 1 (* 1/2 n)) (log n)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) n (-.f64 #s(literal 1 binary64) (log.f64 n))) n)","(* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n)))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) n #s(literal 1/2 binary64)) n (-.f64 #s(literal 1 binary64) (log.f64 n))) n)","(* n (- (+ 1 (* n (+ 1/2 (* n (- (* 1/12 n) 1/6))))) (log n)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) n #s(literal -1/6 binary64)) n #s(literal 1/2 binary64)) n (-.f64 #s(literal 1 binary64) (log.f64 n))) n)","(+ 1 (log n))","(+.f64 (log.f64 n) #s(literal 1 binary64))","(log n)","(log.f64 n)","(* -1 (log (/ 1 n)))","(log.f64 n)","(+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))","(-.f64 (log.f64 n) (/.f64 #s(literal -1/2 binary64) n))","(- (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))) (/ 1/6 (pow n 2)))","(-.f64 (log.f64 n) (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) n))","(- (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3))))) (/ 1/6 (pow n 2)))","(-.f64 (log.f64 n) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) n) #s(literal 1/6 binary64)) n)) n))","(+ 1 (* -1 (log (/ 1 n))))","(+.f64 (log.f64 n) #s(literal 1 binary64))","(+ 1 (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))))","(-.f64 (+.f64 (log.f64 n) #s(literal 1 binary64)) (/.f64 #s(literal -1/2 binary64) n))","(- (+ 1 (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))) (/ 1/6 (pow n 2)))","(-.f64 (+.f64 (log.f64 n) #s(literal 1 binary64)) (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) n))","(- (+ 1 (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3)))))) (/ 1/6 (pow n 2)))","(-.f64 (+.f64 (log.f64 n) #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) n) #s(literal 1/6 binary64)) n)) n))","(+ (log -1) (* -1 (log (/ -1 n))))","(+.f64 (log.f64 (neg.f64 n)) (log.f64 #s(literal -1 binary64)))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n))))","(-.f64 (+.f64 (log.f64 (neg.f64 n)) (log.f64 #s(literal -1 binary64))) (/.f64 #s(literal -1/2 binary64) n))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n))))","(-.f64 (+.f64 (log.f64 (neg.f64 n)) (log.f64 #s(literal -1 binary64))) (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) n))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n))))","(-.f64 (+.f64 (log.f64 (neg.f64 n)) (log.f64 #s(literal -1 binary64))) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) n) #s(literal 1/6 binary64)) n)) n))","(+ 1 (+ (log -1) (* -1 (log (/ -1 n)))))","(+.f64 (+.f64 (log.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) (log.f64 (neg.f64 n)))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n)))))","(-.f64 (+.f64 (+.f64 (log.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) (log.f64 (neg.f64 n))) (/.f64 #s(literal -1/2 binary64) n))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n)))))","(-.f64 (+.f64 (+.f64 (log.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) (log.f64 (neg.f64 n))) (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) n))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n)))))","(-.f64 (+.f64 (+.f64 (log.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) (log.f64 (neg.f64 n))) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) n) #s(literal 1/6 binary64)) n)) n))"]],"stop":[["iter limit",1],["node limit",1]],"time":392.6630859375,"type":"simplify"},{"count":[[5,103]],"egraph":[[0,8354,54,0.11394865],[2,730,61,0.038355822],[1,89,61,0.003737321],[0,18,61,0.00084123],[0,15,61,0.000200887]],"inputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))","(-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))","(+.f64 (log.f64 n) #s(literal 1 binary64))","(log.f64 n)"]],"memory":[[3576064,43890096]],"outputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))","(*.f64 (/.f64 (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))) (/.f64 (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)))))","(*.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64)))))","(*.f64 (-.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))))))","(*.f64 (-.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)))) (*.f64 (pow.f64 (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64))) (/.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64)))) (*.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))) (fma.f64 (pow.f64 (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64))) (/.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64))) (fma.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 #s(literal -1 binary64) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)))) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)))) (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)))) (-.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64))))","(neg.f64 (/.f64 (-.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (neg.f64 (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)))))","(neg.f64 (/.f64 (-.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (neg.f64 (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64)))))","(fma.f64 (/.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))) (/.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))","(-.f64 (/.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))))))","(-.f64 (/.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64))","(+.f64 (/.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64))) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))))","(*.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))))","#s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (log.f64 n) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (log.f64 n))))","(*.f64 (neg.f64 (fma.f64 (log.f64 n) (log.f64 n) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 n) #s(literal -1 binary64) #s(literal 1 binary64))))","(*.f64 (neg.f64 (+.f64 (pow.f64 (log.f64 n) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (log.f64 n) (log.f64 n) (-.f64 #s(literal 1 binary64) (log.f64 n))))))","(*.f64 (fma.f64 (log.f64 n) (log.f64 n) #s(literal -1 binary64)) (pow.f64 (-.f64 (log.f64 n) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (log.f64 n) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (log.f64 n) #s(literal 2 binary64))) (log.f64 n))))","(*.f64 (+.f64 (pow.f64 (log.f64 n) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (log.f64 n) (log.f64 n) (-.f64 #s(literal 1 binary64) (log.f64 n))) #s(literal -1 binary64)))","(*.f64 (+.f64 (log.f64 n) #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (+.f64 (log.f64 n) #s(literal 1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) (-.f64 (log.f64 n) #s(literal 1 binary64))) (/.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) (-.f64 (log.f64 n) #s(literal 1 binary64)))) (*.f64 (pow.f64 (-.f64 (log.f64 n) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (log.f64 n) #s(literal 1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) (-.f64 (log.f64 n) #s(literal 1 binary64))) (pow.f64 (-.f64 (log.f64 n) #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) (-.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (-.f64 (log.f64 n) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) (-.f64 (log.f64 n) #s(literal 1 binary64))) (/.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) (-.f64 (log.f64 n) #s(literal 1 binary64))) (fma.f64 (pow.f64 (-.f64 (log.f64 n) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (log.f64 n) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) (-.f64 (log.f64 n) #s(literal 1 binary64))) (pow.f64 (-.f64 (log.f64 n) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (log.f64 n) (log.f64 n) #s(literal -1 binary64)))) (neg.f64 (fma.f64 (log.f64 n) #s(literal -1 binary64) #s(literal 1 binary64))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (log.f64 n) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (log.f64 n) (log.f64 n) (-.f64 #s(literal 1 binary64) (log.f64 n))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (log.f64 n) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (log.f64 n))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log.f64 n) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (log.f64 n) (log.f64 n) #s(literal 1 binary64)) (-.f64 (log.f64 n) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log.f64 n) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (log.f64 n) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (log.f64 n) #s(literal 2 binary64))) (-.f64 (log.f64 n) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log.f64 n) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (log.f64 n) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (log.f64 n) (log.f64 n) (-.f64 #s(literal 1 binary64) (log.f64 n)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (log.f64 n) #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (+.f64 (pow.f64 (log.f64 n) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (log.f64 n) #s(literal 3 binary64))) (fma.f64 (log.f64 n) (log.f64 n) (-.f64 #s(literal 1 binary64) (log.f64 n)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) (-.f64 (log.f64 n) #s(literal 1 binary64))) (*.f64 (-.f64 (log.f64 n) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 (log.f64 n) #s(literal 1 binary64)) (-.f64 (log.f64 n) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (log.f64 n) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (log.f64 n)))","(/.f64 (neg.f64 (fma.f64 (log.f64 n) (log.f64 n) #s(literal -1 binary64))) (fma.f64 (log.f64 n) #s(literal -1 binary64) #s(literal 1 binary64)))","(/.f64 (neg.f64 (+.f64 (pow.f64 (log.f64 n) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (log.f64 n) #s(literal 2 binary64))) (log.f64 n))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (log.f64 n) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (log.f64 n) (log.f64 n) (-.f64 #s(literal 1 binary64) (log.f64 n)))))","(/.f64 (fma.f64 (log.f64 n) (log.f64 n) #s(literal -1 binary64)) (-.f64 (log.f64 n) #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 (log.f64 n) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (log.f64 n) #s(literal 2 binary64))) (log.f64 n)))","(/.f64 (+.f64 (pow.f64 (log.f64 n) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (log.f64 n) (log.f64 n) (-.f64 #s(literal 1 binary64) (log.f64 n))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 (log.f64 n) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 n)) (-.f64 #s(literal 1 binary64) (pow.f64 (log.f64 n) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (log.f64 n) #s(literal 2 binary64))) (log.f64 n)) (+.f64 (pow.f64 (log.f64 n) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (+.f64 (log.f64 n) #s(literal 1 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (log.f64 n) (log.f64 n) #s(literal -1 binary64))) (-.f64 (log.f64 n) #s(literal 1 binary64))))","(neg.f64 (/.f64 (neg.f64 (+.f64 (pow.f64 (log.f64 n) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (log.f64 n) (log.f64 n) (-.f64 #s(literal 1 binary64) (log.f64 n)))))","(neg.f64 (/.f64 (fma.f64 (log.f64 n) (log.f64 n) #s(literal -1 binary64)) (fma.f64 (log.f64 n) #s(literal -1 binary64) #s(literal 1 binary64))))","(neg.f64 (/.f64 (+.f64 (pow.f64 (log.f64 n) #s(literal 3 binary64)) #s(literal 1 binary64)) (neg.f64 (fma.f64 (log.f64 n) (log.f64 n) (-.f64 #s(literal 1 binary64) (log.f64 n))))))","(fma.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) (pow.f64 (-.f64 (log.f64 n) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 (log.f64 n) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (log.f64 n) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (log.f64 n) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (log.f64 n))) (/.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (log.f64 n))))","(-.f64 (/.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) (-.f64 (log.f64 n) #s(literal 1 binary64))) (pow.f64 (-.f64 (log.f64 n) #s(literal 1 binary64)) #s(literal -1 binary64)))","(+.f64 (/.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) (-.f64 (log.f64 n) #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 (log.f64 n) #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (log.f64 n) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (log.f64 n))","(*.f64 (log.f64 n) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (log.f64 n))","(fma.f64 (log.f64 n) #s(literal 1 binary64) #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) (log.f64 n) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (log.f64 n))","(+.f64 (log.f64 n) #s(literal 0 binary64))","(log.f64 n)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":308.0419921875,"type":"rewrite"},{"compiler":[[6276,475]],"memory":[[5179696,12920896]],"time":20.35986328125,"type":"eval"},{"alts":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n))","next",0.0,"binary64"],["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))","done",63.00443156229303,"binary64"]],"compiler":[[18,11],[17,11]],"count":[[129,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[127,1],"picked":[2,1]}],"memory":[[-5939504,5279008]],"min-error":[[0.0,"binary64"]],"time":3.923095703125,"type":"prune"},{"egraph":[[0,1654,17,0.010861096],[9,1654,21,0.015007597],[8,1622,21,0.016214263],[7,1329,21,0.013814884],[6,877,21,0.008766397],[5,492,21,0.007397201],[4,256,21,0.004506806],[3,122,21,0.002047719],[2,55,21,0.000705565],[1,27,21,0.000358361],[0,12,21,0.000328607],[0,11,21,9.9108e-5]],"inputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n))","(log.f64 n)","n"]],"locations":[["(log.f64 n)","cost-diff",0],["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n))","cost-diff",0]],"memory":[[4423600,4423600]],"method":["egg-herbie"],"outputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n))","(log.f64 n)","n"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":100.08203125,"type":"simplify"},{"compiler":[[20,11]],"locations":[["(log.f64 n)","accuracy",0.0],["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n))","accuracy",0.0]],"memory":[[-1438016,14702256]],"mixsample":[[0.28076171875,"ival-add",1200],[0.603515625,"ival-sub",1200],[10.980224609375,"adjust",800],[0.83642578125,"ival-mult",1200],[5.20166015625,"ival-log",2800],[5.142333984375,"ival-log1p",2800],[1.172607421875,"ival-mult",2000],[0.921875,"ival-mult",2800],[0.1826171875,"ival-assert",0],[4.6806640625,"ival-sub",0],[3.85302734375,"ival-log1p",1600],[3.232421875,"ival-log",1600],[0.238525390625,"ival-sub",400],[2.785888671875,"ival-log1p",1200],[4.38720703125,"ival-log",2000],[2.5615234375,"ival-log",1200],[1.98388671875,"ival-add",0],[0.397216796875,"ival-add",1600],[4.578857421875,"ival-mult",0],[0.56640625,"ival-sub",800],[5.16162109375,"ival-log1p",2000],[1.0908203125,"ival-mult",1600],[0.325439453125,"ival-add",2800],[0.39990234375,"ival-add",2000],[8.208984375,"ival-log1p",2400],[15.63623046875,"ival-log",0],[0.254150390625,"ival-true",0],[6.167724609375,"ival-log1p",0],[0.583740234375,"ival-add",2400],[1.389404296875,"ival-mult",2400],[0.22314453125,"exact",0],[6.980712890625,"ival-log",2400]],"outcomes":[[115.283935546875,1,"valid",256]],"time":130.011962890625,"type":"localize"},{"count":[[2,13]],"inputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n))","(log.f64 n)"]],"memory":[[390368,17161600]],"outputs":[["-1","(- (* n (- 1 (log n))) 1)","(- (* n (- (+ 1 (* 1/2 n)) (log n))) 1)","(- (* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n))) 1)","(log n)","(* -1 (log (/ 1 n)))","(+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))","(- (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))) (/ 1/6 (pow n 2)))","(- (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3))))) (/ 1/6 (pow n 2)))","(+ (log -1) (* -1 (log (/ -1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n))))"]],"series":[[47.047119140625,"((- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log n))","n","-inf"],[15.126953125,"((- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log n))","n","inf"],[12.410888671875,"((- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log n))","n","0"]],"time":75.403076171875,"type":"series"},{"count":[[13,13]],"egraph":[[0,8026,113,0.080210946],[9,7964,119,0.013703102],[8,7746,119,0.022134434],[7,7329,119,0.03700229],[6,6293,119,0.036223121],[5,5084,119,0.036126669],[4,2652,119,0.045327764],[3,976,123,0.016349032],[2,382,125,0.004500209],[1,159,130,0.001868216],[0,61,142,0.000633516]],"inputs":[["-1","(- (* n (- 1 (log n))) 1)","(- (* n (- (+ 1 (* 1/2 n)) (log n))) 1)","(- (* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n))) 1)","(log n)","(* -1 (log (/ 1 n)))","(+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))","(- (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))) (/ 1/6 (pow n 2)))","(- (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3))))) (/ 1/6 (pow n 2)))","(+ (log -1) (* -1 (log (/ -1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n))))"]],"memory":[[-1712656,32001616]],"method":["egg-herbie"],"outputs":[["-1","#s(literal -1 binary64)","(- (* n (- 1 (log n))) 1)","(fma.f64 (-.f64 #s(literal 1 binary64) (log.f64 n)) n #s(literal -1 binary64))","(- (* n (- (+ 1 (* 1/2 n)) (log n))) 1)","(fma.f64 (fma.f64 #s(literal 1/2 binary64) n (-.f64 #s(literal 1 binary64) (log.f64 n))) n #s(literal -1 binary64))","(- (* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n))) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) n #s(literal 1/2 binary64)) n (-.f64 #s(literal 1 binary64) (log.f64 n))) n #s(literal -1 binary64))","(log n)","(log.f64 n)","(* -1 (log (/ 1 n)))","(log.f64 n)","(+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))","(-.f64 (log.f64 n) (/.f64 #s(literal -1/2 binary64) n))","(- (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))) (/ 1/6 (pow n 2)))","(-.f64 (log.f64 n) (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) n))","(- (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3))))) (/ 1/6 (pow n 2)))","(-.f64 (log.f64 n) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) n) #s(literal 1/6 binary64)) n)) n))","(+ (log -1) (* -1 (log (/ -1 n))))","(+.f64 (log.f64 (neg.f64 n)) (log.f64 #s(literal -1 binary64)))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n))))","(-.f64 (+.f64 (log.f64 (neg.f64 n)) (log.f64 #s(literal -1 binary64))) (/.f64 #s(literal -1/2 binary64) n))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n))))","(-.f64 (+.f64 (log.f64 (neg.f64 n)) (log.f64 #s(literal -1 binary64))) (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) n))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n))))","(-.f64 (+.f64 (log.f64 (neg.f64 n)) (log.f64 #s(literal -1 binary64))) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) n) #s(literal 1/6 binary64)) n)) n))"]],"stop":[["iter limit",1],["node limit",1]],"time":429.751953125,"type":"simplify"},{"count":[[2,4]],"egraph":[[0,8394,17,0.08616582],[2,516,20,0.033354375],[1,62,20,0.001807148],[0,12,20,0.000855377],[0,11,20,6.7815e-5]],"inputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n))","(log.f64 n)"]],"memory":[[2354288,43009168]],"outputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n))","(+.f64 #s(literal 0 binary64) (log.f64 n))","(+.f64 (log.f64 n) #s(literal 0 binary64))","(log.f64 n)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":226.97998046875,"type":"rewrite"},{"compiler":[[382,62]],"memory":[[1353968,1353968]],"time":1.925048828125,"type":"eval"},{"alts":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n))","done",0.0,"binary64"],["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))","done",63.00443156229303,"binary64"]],"compiler":[[70,23],[18,11],[17,11]],"count":[[18,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[16,0],"picked":[1,1]}],"memory":[[-6100784,1974672]],"min-error":[[0.0,"binary64"]],"time":3.2998046875,"type":"prune"},{"accuracy":[0.0],"baseline":[0.0],"branch":[["n",0.0,1,"binary64"],["(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))",0.0,1,"binary64"],["(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))",0.0,1,"binary64"]],"compiler":[[1,1],[15,9],[13,8]],"count":[[4,1]],"inputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))","#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n))","(-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64))","(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))"]],"memory":[[4548416,4548416]],"oracle":[63.01608950605436],"outputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n))"]],"repr":["binary64"],"time":5.84716796875,"times":[[1.619873046875,"n"],[2.06591796875,"(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))"],[1.552001953125,"(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))"]],"type":"regimes"},{"accuracy":[63.00443156229303],"baseline":[63.00443156229303],"branch":[["n",63.004431562293036,1,"binary64"],["(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))",63.00443156229303,1,"binary64"],["(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))",63.00443156229303,1,"binary64"]],"compiler":[[1,1],[15,9],[13,8]],"count":[[1,1]],"inputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))"]],"link":["."],"memory":[[-4578288,3763504]],"name":["logs (example 3.8)"],"oracle":[63.00443156229303],"outputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))"]],"repr":["binary64"],"time":3.90087890625,"times":[[1.10498046875,"n"],[0.939208984375,"(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))"],[1.06884765625,"(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))"]],"type":"regimes"},{"egraph":[[8,7955,35,0.032172684],[7,4421,35,0.063727628],[6,1847,35,0.016231209],[5,768,35,0.008553334],[4,341,35,0.003072354],[3,151,35,0.001017164],[2,57,35,0.000509821],[1,27,35,0.000261944],[0,13,35,0.000241418]],"inputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n))","#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))"]],"memory":[[-497200,9945968]],"method":["egg-herbie"],"outputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n))","#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))"]],"stop":[["node limit",1]],"time":146.0771484375,"type":"simplify"},{"compiler":[[35,13],[1,2],[2,2],[1,2]],"egraph":[[0,8130,255,0.089760538],[5,6954,267,0.033075247],[4,4519,267,0.03951236],[3,1579,275,0.025310007],[2,550,279,0.006643239],[1,211,289,0.002900105],[0,79,313,0.001354501],[0,8301,519,0.102498628],[3,4960,548,0.031872861],[2,1424,564,0.01719142],[1,486,589,0.004361064],[0,154,649,0.001468795]],"memory":[[1265648,1265648]],"stop":[["done",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1]],"time":666.538818359375,"type":"soundness"},{"compiler":[[35,13],[35,13],[24,17],[24,17],[15,9],[15,9]],"memory":[[2867120,18569072]],"remove-preprocessing":[[],[],[]],"time":107.336181640625,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.0078125,"type":"end"}]