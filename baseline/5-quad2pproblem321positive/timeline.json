[{"memory":[[16672,16672]],"time":0.06201171875,"type":"start"},{"compiler":[[15,12]],"memory":[[1557840,37505696]],"method":["search"],"sampling":[[12,{"invalid":0.15065800012661157,"precondition":0.0014641286106780171,"unknown":0.24232047269555324,"valid":0.6055573985671572}],[11,{"invalid":0.12969264735818342,"precondition":0.0014641286106780171,"unknown":0.28181334651515044,"valid":0.5870298775159881}],[10,{"invalid":0.11116512630701436,"precondition":0.0014641286106780171,"unknown":0.3529980326591158,"valid":0.5343727124231918}],[9,{"invalid":0.08191114569990532,"precondition":0.0014641286106780171,"unknown":0.4173567899947557,"valid":0.499267935694661}],[8,{"invalid":0.054607430466603546,"precondition":0.0014641286106780171,"unknown":0.4602626282185156,"valid":0.48366581270420284}],[7,{"invalid":0.04680636897137447,"precondition":0.0014641286106780171,"unknown":0.5460743046660355,"valid":0.40565519775191206}],[6,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.6240849196183262,"valid":0.37445095177099574}],[5,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.6240849196183262,"valid":0.37445095177099574}],[4,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.7489019035419915,"valid":0.2496339678473305}],[3,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[2,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}]],"time":225.365966796875,"type":"analyze"},{"bogosity":[{"infinite":0.06219531587073689,"invalid":0.24672836358726666,"precondition":0.0014641286106780171,"valid":0.6896121919313185}],"memory":[[16829728,375567808]],"mixsample":[[6.997314453125,"ival-sub",1200],[68.007080078125,"adjust",800],[117.722900390625,"ival-div",0],[0.16064453125,"ival-sub",4800],[4.7294921875,"ival-mult",1200],[0.009033203125,"ival-sqrt",3200],[0.0068359375,"ival-div",400],[3.307861328125,"ival-sub",1600],[4.546875,"ival-assert",0],[0.026611328125,"ival-sub",3600],[12.121826171875,"ival-sqrt",1200],[58.54248046875,"ival-sub",0],[0.428955078125,"ival-sqrt",4800],[88.22021484375,"ival-sqrt",0],[5.1181640625,"ival-sub",400],[82.693115234375,"ival-add",0],[5.7548828125,"ival-mult",800],[0.480224609375,"ival-sub",4400],[11.609619140625,"ival-sub",800],[0.680419921875,"ival-mult",1600],[0.004150390625,"ival-add",400],[2.6748046875,"adjust",2800],[0.09228515625,"ival-sqrt",3600],[0.2197265625,"ival-sub",4000],[8.98876953125,"ival-sqrt",400],[5.5537109375,"ival-sqrt",2000],[0.052978515625,"ival-mult",2000],[9.20654296875,"ival-sqrt",800],[2.80859375,"ival-sub",2000],[0.004150390625,"ival-sub",3200],[0.483642578125,"ival-sqrt",4000],[1.20947265625,"ival-sqrt",4400],[25.730224609375,"adjust",2000],[3.582275390625,"ival-sub",2400],[158.700439453125,"ival-mult",0],[6.267578125,"ival-mult",400],[5.374755859375,"ival-sqrt",1600],[0.04345703125,"ival-div",800],[8.098876953125,"ival-true",0],[6.407958984375,"ival-sqrt",2400],[0.030517578125,"ival-add",800],[58.781982421875,"ival-neg",0]],"outcomes":[[215.79345703125,1,"valid",1351],[280.9794921875,2,"valid",1244],[91.257080078125,0,"invalid",1055],[47.5380859375,3,"valid",164],[465.255126953125,0,"valid",5497]],"time":1530.151123046875,"type":"sample"},{"compiler":[[13,10],[52,12],[52,12]],"confusion":[[125,1,19,111]],"explanations":[["-.f64","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","nan-rescue",2,0,[["(*.f64 b_2 b_2)","overflow",89],["(*.f64 a c)","overflow",26]],[[1,2,1]]],["sqrt.f64","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","uflow-rescue",5,0,[["(*.f64 b_2 b_2)","underflow",36],["(*.f64 a c)","underflow",38],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","underflow",5]],[[1,2]]],["/.f64","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","u/n",11,0,[["(*.f64 b_2 b_2)","underflow",36],["(+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","underflow",23],["(*.f64 a c)","underflow",38],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","underflow",5]],[[]]],["+.f64","(+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","cancellation",57,0,[],[[1]]],["sqrt.f64","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","oflow-rescue",107,0,[["(*.f64 b_2 b_2)","overflow",89],["(*.f64 a c)","overflow",26],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","overflow",107]],[[1,2]]]],"fperrors":[["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))",2,0,false,0,false],["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))",112,0,false,0,false],["(+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))",57,0,false,0,false],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",12,0,false,1,[1.1549146731448696e-40,1.6731424964554726e-5,3.7288197468166095e-278]],["(*.f64 b_2 b_2)",0,0,false,0,false],["a",0,0,false,0,false],["(neg.f64 b_2)",0,0,false,0,false],["b_2",0,0,false,0,false],["(*.f64 a c)",0,0,false,0,false],["c",0,0,false,0,false]],"freqs":[[3,1],[2,36],[1,107],[0,112]],"maybe-confusion":[[125,0,1,19,0,111]],"memory":[[-20088304,65978272]],"mixsample":[[0.489013671875,"ival-sub",1200],[0.009765625,"ival-sub",4800],[0.23291015625,"ival-sqrt",2000],[5.582763671875,"ival-div",0],[3.67431640625,"adjust",800],[0.300537109375,"ival-mult",1200],[0.12646484375,"ival-sub",1600],[0.386962890625,"ival-sqrt",800],[0.12158203125,"ival-sub",2000],[0.236083984375,"ival-assert",0],[0.026123046875,"ival-sqrt",4800],[2.74462890625,"ival-sub",0],[0.779296875,"ival-sqrt",1200],[0.177978515625,"ival-sub",400],[4.081787109375,"ival-sqrt",0],[0.0771484375,"ival-sqrt",4400],[1.164794921875,"adjust",2000],[0.23046875,"ival-sub",2400],[0.21435546875,"ival-mult",800],[3.976318359375,"ival-add",0],[0.03125,"ival-sub",4400],[0.216552734375,"ival-sqrt",1600],[0.198974609375,"ival-sub",800],[0.260986328125,"ival-mult",400],[7.895263671875,"ival-mult",0],[0.044677734375,"ival-mult",1600],[0.48388671875,"ival-true",0],[0.1123046875,"adjust",2800],[0.463623046875,"ival-sqrt",2400],[0.401611328125,"ival-sqrt",400],[2.494140625,"ival-neg",0]],"outcomes":[[13.7568359375,1,"valid",82],[15.543212890625,2,"valid",70],[2.38818359375,3,"valid",8],[29.79443359375,0,"valid",352]],"time":144.2578125,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[13,10]],"egraph":[[0,986,12,0.003125598],[12,986,12,0.006152129],[11,985,12,0.00562289],[10,974,12,0.007382202],[9,942,12,0.006659593],[8,828,12,0.006393051],[7,475,12,0.004545074],[6,322,12,0.003146924],[5,189,12,0.002673955],[4,113,12,0.001377102],[3,74,12,0.000649721],[2,45,12,0.000420512],[1,28,12,0.00021753],[0,17,13,0.000208951],[0,10,13,0.000147932],[10,4167,109,0.026824223],[9,4167,109,0.018943386],[8,4135,109,0.020886039],[7,4043,109,0.021405797],[6,3950,109,0.021662585],[5,3264,109,0.028212603],[4,1777,109,0.022949258],[3,685,109,0.011144438],[2,245,109,0.003103256],[1,114,111,0.000939875],[0,44,118,0.000404419]],"inputs":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"]],"memory":[[136464,8119904]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2) a)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1],["saturated",1]],"symmetry":[[]],"time":262.900146484375,"type":"preprocess"},{"compiler":[[0,3]],"memory":[[50880,50880]],"time":0.074951171875,"type":"eval"},{"alts":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","next",30.16699886602001,"binary64"]],"compiler":[[13,10]],"memory":[[340080,340080]],"time":0.534912109375,"type":"prune"},{"egraph":[[0,986,48,0.003123628],[12,986,48,0.005418854],[11,985,48,0.005396564],[10,974,48,0.006051293],[9,942,48,0.008685784],[8,828,48,0.006855937],[7,475,48,0.004528026],[6,322,48,0.002932534],[5,189,48,0.001659329],[4,113,48,0.000976204],[3,74,48,0.000584118],[2,45,48,0.000335368],[1,28,48,0.000225635],[0,17,50,0.000211949],[0,10,50,0.000129421]],"inputs":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(neg.f64 b_2)","b_2","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","(*.f64 b_2 b_2)","(*.f64 a c)","a","c"]],"locations":[["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","cost-diff",0],["(neg.f64 b_2)","cost-diff",0],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","cost-diff",0],["(+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","cost-diff",1]],"memory":[[2202016,2202016]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2) a)","(+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2)","(neg.f64 b_2)","b_2","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","(fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))","(*.f64 b_2 b_2)","(*.f64 a c)","(*.f64 c a)","a","c"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":57.51708984375,"type":"simplify"},{"compiler":[[52,12]],"locations":[["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","accuracy",0.40234375000000006],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","accuracy",2.737771909408055],["(+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","accuracy",13.392238629486883],["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","accuracy",26.11467062552949]],"memory":[[4982480,13081072]],"mixsample":[[0.23291015625,"ival-sub",1200],[0.005859375,"ival-sub",4800],[0.119873046875,"ival-sqrt",2000],[2.968017578125,"ival-div",0],[1.754150390625,"adjust",800],[0.154052734375,"ival-mult",1200],[0.070556640625,"ival-sub",1600],[0.202392578125,"ival-sqrt",800],[0.065185546875,"ival-sub",2000],[0.103271484375,"ival-assert",0],[0.01416015625,"ival-sqrt",4800],[5.7587890625,"ival-sub",0],[0.4140625,"ival-sqrt",1200],[0.07177734375,"ival-sub",400],[1.9892578125,"ival-sqrt",0],[0.0419921875,"ival-sqrt",4400],[0.916259765625,"adjust",2000],[0.11669921875,"ival-sub",2400],[0.111083984375,"ival-mult",800],[1.9765625,"ival-add",0],[0.014892578125,"ival-sub",4400],[0.109130859375,"ival-sqrt",1600],[0.114501953125,"ival-sub",800],[0.101318359375,"ival-mult",400],[3.742919921875,"ival-mult",0],[0.020751953125,"ival-mult",1600],[0.184814453125,"ival-true",0],[0.055908203125,"adjust",2800],[0.232177734375,"ival-sqrt",2400],[0.1298828125,"ival-sqrt",400],[1.36474609375,"ival-neg",0]],"outcomes":[[7.03759765625,1,"valid",41],[8.68310546875,2,"valid",35],[1.142822265625,3,"valid",4],[18.955810546875,0,"valid",176]],"time":45.47705078125,"type":"localize"},{"count":[[5,98]],"inputs":[["(+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(neg.f64 b_2)","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))"]],"memory":[[-2282320,7123296]],"outputs":[["(* -1/2 (/ (* a c) b_2))","(* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5)))))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5)))))))))","(* -1/2 (/ c b_2))","(+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5))))))))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a c))","(* a (- (/ (pow b_2 2) a) c))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a))) a)))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(+ (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(- (pow b_2 2) (* a c))","(/ (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2)","(/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6)))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4)))))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(* -2 b_2)","(* -1 (* b_2 (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -2 (/ b_2 a))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 2 (/ 1 a))))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 2 (/ 1 a)))))))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3)))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5)))))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow a 3) (pow b_2 5)))))))))","(* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) (* a b_2))) (* -1/16 (/ (pow a 2) (pow b_2 5))))))) (* 1/2 (/ 1 b_2))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b_2 c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (- (/ (pow b_2 2) c) a))","(* -1 (* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))"]],"series":[[2.06201171875,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","c","-inf"],[2.001953125,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","c","inf"],[2.89501953125,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","c","0"],[1.260009765625,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","b_2","-inf"],[2.694091796875,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","b_2","inf"],[2.318115234375,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","b_2","0"],[3.074951171875,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","a","-inf"],[2.302001953125,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","a","inf"],[4.93701171875,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","a","0"]],"time":25.762939453125,"type":"series"},{"count":[[98,97]],"egraph":[[0,8048,2611,0.103057194],[2,5550,2747,0.028518421],[1,1606,2798,0.017998447],[0,508,2832,0.005283567]],"inputs":[["(* -1/2 (/ (* a c) b_2))","(* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5)))))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5)))))))))","(* -1/2 (/ c b_2))","(+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5))))))))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a c))","(* a (- (/ (pow b_2 2) a) c))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a))) a)))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(+ (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(- (pow b_2 2) (* a c))","(/ (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2)","(/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6)))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4)))))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(* -2 b_2)","(* -1 (* b_2 (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -2 (/ b_2 a))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 2 (/ 1 a))))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 2 (/ 1 a)))))))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3)))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5)))))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow a 3) (pow b_2 5)))))))))","(* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) (* a b_2))) (* -1/16 (/ (pow a 2) (pow b_2 5))))))) (* 1/2 (/ 1 b_2))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b_2 c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (- (/ (pow b_2 2) c) a))","(* -1 (* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))"]],"memory":[[4694032,48983792]],"method":["egg-herbie"],"outputs":[["(* -1/2 (/ (* a c) b_2))","(*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)","(* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a)","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 a #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a)","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5)))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 #s(literal 5/64 binary64) b_2)) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -1/16 binary64)) (pow.f64 b_2 #s(literal 5 binary64)))) a (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a)","(* -1/2 (/ c b_2))","(*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))","(+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))","(fma.f64 (*.f64 #s(literal -1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))","(fma.f64 (fma.f64 (*.f64 a #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 #s(literal 5/64 binary64) b_2)) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -1/16 binary64)) (pow.f64 b_2 #s(literal 5 binary64)))) a (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a b_2)","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 a #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a b_2)","(pow b_2 2)","(*.f64 b_2 b_2)","(+ (* -1 (* a c)) (pow b_2 2))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(* (sqrt (* a c)) (sqrt -1))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a)))","(* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a)) a)","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a)))","(*.f64 (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a))) a)","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a)))) a)","(* (sqrt (/ c a)) (sqrt -1))","(*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a))","(+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a)))","(+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))) a)","(* -1 (* a c))","(*.f64 (neg.f64 a) c)","(* a (- (/ (pow b_2 2) a) c))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a)))","(* -1 (* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(*.f64 (neg.f64 a) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 a)))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (-.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (neg.f64 b_2)) a)))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (+.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2)) (*.f64 #s(literal -1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b_2 #s(literal 4 binary64)))))) a) b_2) a)))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(neg.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(neg.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) b_2) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a))) a)))","(neg.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (-.f64 b_2 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal 1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2))))) a)) a)))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) #s(literal 1/2 binary64)) (*.f64 b_2 b_2) (sqrt.f64 (/.f64 c a)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) #s(literal 1/2 binary64)) (*.f64 b_2 b_2) (sqrt.f64 (/.f64 c a))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) #s(literal 1/16 binary64)) (pow.f64 b_2 #s(literal 6 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) #s(literal 1/2 binary64)) (*.f64 b_2 b_2) (sqrt.f64 (/.f64 c a))))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)","(+ (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a)) (neg.f64 b_2))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) #s(literal -1 binary64)) b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) b_2 #s(literal -1 binary64)) b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -1 binary64) a)) b_2 (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) b_2 (/.f64 #s(literal -1 binary64) a)) b_2 (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(* -1 b_2)","(neg.f64 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(fma.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 b_2 (/.f64 b_2 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64))) (*.f64 b_2 b_2) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a))))","(- (pow b_2 2) (* a c))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(/ (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2)))) b_2)","(/.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) b_2) (*.f64 (*.f64 c a) #s(literal -1/2 binary64))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))))) b_2)","(/.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) b_2) (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (*.f64 c a) #s(literal -1/2 binary64)))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2)","(/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (/.f64 #s(literal 5/64 binary64) (pow.f64 b_2 #s(literal 6 binary64))) (*.f64 c a)) (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) b_2)))) b_2)","(/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2)","(/.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2)","(/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))))) b_2)","(/.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (fma.f64 (*.f64 (*.f64 a a) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 #s(literal -1/2 binary64) c))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6)))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4)))))) b_2)","(/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 #s(literal 5/64 binary64) a) c) (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (/.f64 (*.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) #s(literal -1/16 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(*.f64 (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal -1/2 binary64) #s(literal 1 binary64)) b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal -1/2 binary64) #s(literal 1 binary64))) b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 (/.f64 c b_2) b_2) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) a) a) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) b_2 b_2)","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)","(* -2 b_2)","(*.f64 #s(literal -2 binary64) b_2)","(* -1 (* b_2 (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal -1/2 binary64) #s(literal 2 binary64)))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal -1/2 binary64) #s(literal 2 binary64))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(*.f64 (neg.f64 b_2) (+.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal -1/2 binary64) #s(literal 2 binary64))) (*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))))))","(* -2 (/ b_2 a))","(*.f64 #s(literal -2 binary64) (/.f64 b_2 a))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 c b_2) b_2) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a)))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 2 (/ 1 a))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 c b_2) (fma.f64 (*.f64 (*.f64 c c) (/.f64 a (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal -1/8 binary64) (/.f64 #s(literal 2 binary64) a))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 2 (/ 1 a)))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 c b_2) (fma.f64 (*.f64 #s(literal -1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 4 binary64)))) (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -1/16 binary64) (/.f64 #s(literal 2 binary64) a)))))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal -1/2 binary64) #s(literal 1 binary64)))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal -1/2 binary64) #s(literal 1 binary64))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(neg.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 (/.f64 c b_2) b_2) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) a) a) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) b_2 b_2))","(* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3)))))","(*.f64 (fma.f64 (*.f64 c #s(literal -1/8 binary64)) (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c)","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 a a) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c)","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow a 3) (pow b_2 5)))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) #s(literal -1/16 binary64) (*.f64 (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 5/64 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 c b_2)) #s(literal -1/2 binary64))) c (/.f64 (*.f64 (*.f64 a a) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c)","(* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (*.f64 c #s(literal -1/8 binary64)) (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 #s(literal -1/2 binary64) b_2)) c)","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (fma.f64 (*.f64 c #s(literal -1/16 binary64)) (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 5 binary64)))) (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64))) c (/.f64 #s(literal -1/2 binary64) b_2)) c)","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) (* a b_2))) (* -1/16 (/ (pow a 2) (pow b_2 5))))))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 5/64 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 c b_2)) (/.f64 (*.f64 (*.f64 a a) #s(literal -1/16 binary64)) (pow.f64 b_2 #s(literal 5 binary64)))) c (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64))) c (/.f64 #s(literal -1/2 binary64) b_2)) c)","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(fma.f64 (fma.f64 (*.f64 c #s(literal -1/8 binary64)) (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c b_2)","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 a a) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c b_2)","(* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 (neg.f64 c))) c)","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b_2 c)))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 (neg.f64 c)))) c)","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 (neg.f64 c))))) c)","(* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) (*.f64 c a))) c)","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) (*.f64 c a)))) c)","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) (*.f64 c a))))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))) c)","(* c (- (/ (pow b_2 2) c) a))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 c)) a) c)","(* -1 (* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c)) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (neg.f64 b_2)) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (+.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (*.f64 b_2 b_2)) (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))))))) c) b_2) c)) (neg.f64 c))","(* -1 (* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 c) a)) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (/.f64 (neg.f64 b_2) a)) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (+.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 b_2)) (*.f64 #s(literal -1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b_2 #s(literal 4 binary64)))))) c) (/.f64 b_2 a)) c)) (neg.f64 c))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) #s(literal 1/2 binary64)) (*.f64 b_2 b_2) (sqrt.f64 (/.f64 a c)))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) #s(literal 1/2 binary64)) (*.f64 b_2 b_2) (sqrt.f64 (/.f64 a c))))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) #s(literal 1/16 binary64)) (pow.f64 b_2 #s(literal 6 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) #s(literal 1/2 binary64)) (*.f64 b_2 b_2) (sqrt.f64 (/.f64 a c))))) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 c)) a) c)"]],"stop":[["iter limit",1],["node limit",1]],"time":272.77587890625,"type":"simplify"},{"count":[[5,449]],"egraph":[[0,8644,34,0.048364839],[3,5920,38,0.037707482],[2,463,38,0.01632994],[1,64,39,0.0023239],[0,17,41,0.000980433],[0,10,41,0.000153858]],"inputs":[["(+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(neg.f64 b_2)","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))"]],"memory":[[-1656048,42211712]],"outputs":[["(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64))) (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (fma.f64 (fma.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 b_2 #s(literal 4 binary64))))","(*.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(*.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1 binary64)) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (pow.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)) (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))","(*.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64))))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(*.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (pow.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64))))","(*.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2)))))","(*.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (pow.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (neg.f64 (pow.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64))))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal 1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (neg.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal 1 binary64))","(/.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)))","(/.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (pow.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)))","(/.f64 (*.f64 (pow.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64)) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64))) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64))) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 b_2 #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64))) (pow.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64))) (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 9/2 binary64)) (pow.f64 b_2 #s(literal 9 binary64))) (pow.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64))) (fma.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 6 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) #s(literal 2 binary64)) (pow.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) #s(literal 2 binary64))) (fma.f64 b_2 (/.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 #s(literal 0 binary64) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) #s(literal 3 binary64)) (pow.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) #s(literal 2 binary64)) (*.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))))))","(/.f64 (*.f64 (pow.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal 3 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 b_2 #s(literal 4 binary64))) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 9/2 binary64)) (pow.f64 b_2 #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))","(/.f64 (-.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) b_2) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(/.f64 (-.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2)))","(/.f64 (-.f64 (*.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) b_2) (*.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a)) (*.f64 b_2 b_2))) (*.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a)) b_2))","(/.f64 (-.f64 (*.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 b_2 b_2)) (*.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a)) (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a)) (*.f64 b_2 b_2)))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a))) (*.f64 b_2 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))) (*.f64 b_2 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a))))","(/.f64 (-.f64 (*.f64 (pow.f64 b_2 #s(literal 3 binary64)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (*.f64 (pow.f64 b_2 #s(literal 3 binary64)) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a))) (*.f64 (*.f64 b_2 b_2) (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))) (*.f64 (*.f64 b_2 b_2) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a))))","(/.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) b_2 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(/.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2)))","(/.f64 (fma.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) b_2 (*.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a)) (*.f64 b_2 b_2))) (*.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a)) b_2))","(/.f64 (fma.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 b_2 b_2) (*.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a)) (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a)) (*.f64 b_2 b_2)))","(/.f64 (fma.f64 (*.f64 b_2 b_2) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(/.f64 (fma.f64 (*.f64 b_2 b_2) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a)) (*.f64 b_2 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))) (*.f64 b_2 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a))))","(/.f64 (fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a)) (*.f64 (*.f64 b_2 b_2) (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))) (*.f64 (*.f64 b_2 b_2) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a))))","(/.f64 (pow.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64))) (*.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))))","(/.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 9/2 binary64)) (pow.f64 b_2 #s(literal 9 binary64))) (*.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 6 binary64)))))","(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))))","(neg.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(fma.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))))","(fma.f64 (/.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (neg.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))))","(fma.f64 (neg.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64))) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) b_2)","(fma.f64 (pow.f64 b_2 #s(literal 1/2 binary64)) (pow.f64 b_2 #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)))","(fma.f64 (pow.f64 b_2 #s(literal 1/2 binary64)) (pow.f64 b_2 #s(literal 1/2 binary64)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(fma.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) (neg.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64))) b_2)","(fma.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) b_2)","(fma.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a)) #s(literal -1 binary64)) b_2)","(fma.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/2 binary64)) b_2)","(fma.f64 #s(literal -1 binary64) (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) (neg.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)","(fma.f64 #s(literal -1 binary64) b_2 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(fma.f64 #s(literal 1 binary64) (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) (neg.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))))","(fma.f64 #s(literal 1 binary64) b_2 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) b_2 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (*.f64 b_2 b_2) #s(literal -1 binary64)) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)))","(fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (*.f64 b_2 b_2) #s(literal -1 binary64)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(fma.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64) b_2)","(fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)) b_2)","(fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1/2 binary64)) b_2)","(fma.f64 (*.f64 b_2 b_2) (pow.f64 b_2 #s(literal -1 binary64)) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)))","(fma.f64 (*.f64 b_2 b_2) (pow.f64 b_2 #s(literal -1 binary64)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(fma.f64 (*.f64 b_2 b_2) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)) (neg.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))))","(fma.f64 b_2 (/.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) (neg.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))))","(fma.f64 b_2 #s(literal -1 binary64) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)))","(fma.f64 b_2 #s(literal -1 binary64) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(fma.f64 b_2 #s(literal 1 binary64) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)))","(fma.f64 b_2 #s(literal 1 binary64) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(-.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 0 binary64)) b_2)","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2)))) (/.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2)))))","(-.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)))","(-.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)))","(-.f64 #s(literal 0 binary64) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)","(-.f64 b_2 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (-.f64 #s(literal 0 binary64) (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)))","(+.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)) b_2)","(+.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 0 binary64)) b_2)","(+.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) (neg.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))))","(+.f64 #s(literal 0 binary64) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(+.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)","(+.f64 b_2 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)))","(+.f64 b_2 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 (/.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 (/.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) a) (pow.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64))) (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) a) (+.f64 (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (fma.f64 (fma.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 b_2 #s(literal 4 binary64))))","(*.f64 (pow.f64 (/.f64 a (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 a (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 a (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) #s(literal -1/2 binary64)) (pow.f64 (/.f64 a (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) a) (/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2)))))","(*.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) a) (pow.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) a) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)) (neg.f64 a)))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64))))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a) #s(literal -1 binary64)))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)) a))","(*.f64 #s(literal -1 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a))","(*.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) a)))","(*.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 (pow.f64 a #s(literal -1 binary64)) (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2)))))","(*.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)) (neg.f64 a)))","(*.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (pow.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 (*.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) a) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a) (/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)))","(*.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a) #s(literal 1 binary64))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a)))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (/.f64 #s(literal -1 binary64) a))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (pow.f64 a #s(literal -1 binary64)))","(pow.f64 (pow.f64 (/.f64 a (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a)) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) a)) #s(literal -1 binary64))","(pow.f64 (/.f64 a (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a) #s(literal 1 binary64))","(/.f64 (pow.f64 (/.f64 a (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(/.f64 (pow.f64 (/.f64 a (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1 binary64)) (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))))","(/.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)) a)","(/.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 #s(literal -1 binary64) a)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) a)) (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) a)) (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))))","(/.f64 (neg.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(/.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) a)) (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))))","(/.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 a)))","(/.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(/.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) a) (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))))","(/.f64 (pow.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64)) (*.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64))) (*.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64))) (*.f64 (*.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) a) (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))))","(/.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 9/2 binary64)) (pow.f64 b_2 #s(literal 9 binary64))) (*.f64 (*.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) a) (fma.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 6 binary64)))))","(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a)))","(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (neg.f64 a) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)))","(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (neg.f64 a)))","(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a))","(/.f64 #s(literal -1 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)))","(/.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) a)))","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)))","(/.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (neg.f64 (*.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) a)))","(/.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (neg.f64 a) (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 a)))","(/.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) a))","(/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (neg.f64 a))","(/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a)","(neg.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (pow.f64 a #s(literal -1 binary64)) b_2))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) b_2 (*.f64 (pow.f64 a #s(literal -1 binary64)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(fma.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 a #s(literal -1 binary64)) (*.f64 b_2 (pow.f64 a #s(literal -1 binary64))))","(fma.f64 b_2 (pow.f64 a #s(literal -1 binary64)) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 a #s(literal -1 binary64))))","(-.f64 (/.f64 (*.f64 b_2 b_2) (*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a)) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a)))","(-.f64 (/.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) a) (/.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) a))","(-.f64 (/.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) a) (/.f64 b_2 a))","(-.f64 (/.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) (neg.f64 a)) (/.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) (neg.f64 a)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a))","(-.f64 (/.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 a)) (/.f64 b_2 (neg.f64 a)))","(-.f64 (/.f64 #s(literal 0 binary64) a) (/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a))","(-.f64 #s(literal 0 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a))","(exp.f64 (*.f64 (log.f64 (/.f64 a (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))) #s(literal -1 binary64)))","(+.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 a #s(literal -1 binary64))) (*.f64 b_2 (pow.f64 a #s(literal -1 binary64))))","(+.f64 (*.f64 b_2 (pow.f64 a #s(literal -1 binary64))) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 a #s(literal -1 binary64))))","(+.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (pow.f64 a #s(literal -1 binary64)) b_2))","(+.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) b_2) (*.f64 (pow.f64 a #s(literal -1 binary64)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(*.f64 (pow.f64 b_2 #s(literal 1/2 binary64)) (pow.f64 b_2 #s(literal 1/2 binary64)))","(*.f64 #s(literal -1 binary64) b_2)","(*.f64 #s(literal 1 binary64) b_2)","(*.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (*.f64 b_2 b_2) #s(literal -1 binary64)))","(*.f64 (*.f64 b_2 b_2) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 b_2 #s(literal -1 binary64))","(*.f64 b_2 #s(literal 1 binary64))","(pow.f64 (pow.f64 b_2 #s(literal 1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 b_2 (*.f64 b_2 b_2)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 b_2 b_2) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1 binary64))","(pow.f64 b_2 #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 b_2 (*.f64 b_2 b_2)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 b_2 b_2) (pow.f64 b_2 #s(literal 3 binary64))))","(/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (-.f64 (*.f64 b_2 b_2) #s(literal 0 binary64))))","(/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (*.f64 b_2 b_2))","(/.f64 (*.f64 b_2 b_2) b_2)","(neg.f64 b_2)","(fma.f64 (pow.f64 b_2 #s(literal 1/2 binary64)) (pow.f64 b_2 #s(literal 1/2 binary64)) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) b_2 #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) b_2 #s(literal 0 binary64))","(fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (*.f64 b_2 b_2) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 b_2 b_2) (pow.f64 b_2 #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 b_2 #s(literal -1 binary64) #s(literal 0 binary64))","(fma.f64 b_2 #s(literal 1 binary64) #s(literal 0 binary64))","(-.f64 (/.f64 #s(literal 0 binary64) b_2) b_2)","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 b_2 b_2)) b_2)","(-.f64 #s(literal 0 binary64) b_2)","(exp.f64 (*.f64 (*.f64 (log.f64 b_2) #s(literal 1 binary64)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 b_2) #s(literal 1 binary64)))","(+.f64 #s(literal 0 binary64) b_2)","(+.f64 b_2 #s(literal 0 binary64))","b_2","(*.f64 (neg.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64))) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64)))","(*.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) (neg.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64))))","(*.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64)))","(*.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a)) #s(literal -1 binary64)))","(*.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/2 binary64)))","(*.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)))","(*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1/2 binary64)))","(pow.f64 (/.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64))","(pow.f64 (/.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a)) (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1/2 binary64)) #s(literal -1 binary64))","(pow.f64 (-.f64 (pow.f64 b_2 #s(literal 8 binary64)) (pow.f64 (*.f64 c a) #s(literal 4 binary64))) #s(literal 1/8 binary64))","(pow.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1 binary64))","(pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/2 binary64))","(/.f64 (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 0 binary64)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 0 binary64)))","(/.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) #s(literal 0 binary64)) (+.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 #s(literal 0 binary64) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 0 binary64)))))","(/.f64 (neg.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (neg.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a))))","(/.f64 (neg.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a)))","(/.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (neg.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a))))","(/.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a)))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 c a (*.f64 b_2 b_2))))","(/.f64 #s(literal 1 binary64) (/.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a)) (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1/2 binary64)))","(/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(neg.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(fma.f64 (neg.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64))) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) (neg.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64))) #s(literal 0 binary64))","(fma.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) #s(literal 0 binary64))","(fma.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a)) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/2 binary64)) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 0 binary64))","(fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1/2 binary64)) #s(literal 0 binary64))","(sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))","(-.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(fabs.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))) #s(literal 1/2 binary64)) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 2 binary64)) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1 binary64)) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))) #s(literal 1/4 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(+.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(+.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 0 binary64))","(*.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 2 binary64))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 12 binary64)))) (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) (-.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) (pow.f64 b_2 #s(literal 4 binary64))) (pow.f64 b_2 #s(literal 8 binary64))))","(*.f64 (/.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))) (fma.f64 c a (*.f64 b_2 b_2)))","(*.f64 (/.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))","(*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64)))","(*.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) (*.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(*.f64 (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))","(*.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)))","(*.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (fma.f64 c a (*.f64 b_2 b_2)))","(*.f64 #s(literal 1 binary64) (fma.f64 c a (*.f64 b_2 b_2)))","(*.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))))","(*.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (neg.f64 (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64))))","(pow.f64 (/.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (neg.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (-.f64 (pow.f64 b_2 #s(literal 8 binary64)) (pow.f64 (*.f64 c a) #s(literal 4 binary64))) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) #s(literal 4 binary64))","(pow.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64))","(pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1 binary64))","(/.f64 (/.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)))","(/.f64 (/.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 8 binary64)) (pow.f64 (*.f64 c a) #s(literal 4 binary64))) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64))) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 8 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64))) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 18 binary64)) (pow.f64 (*.f64 c a) #s(literal 9 binary64))) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64))) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 12 binary64))))","(/.f64 (*.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a)))","(/.f64 (*.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (fma.f64 c a (*.f64 b_2 b_2))) (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a)))","(/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64))) (+.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal 2 binary64))) (+.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 c a (*.f64 b_2 b_2)))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 8 binary64)) (pow.f64 (*.f64 c a) #s(literal 4 binary64))) #s(literal 1 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 8 binary64))) (fma.f64 c a (*.f64 b_2 b_2))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 18 binary64)) (pow.f64 (*.f64 c a) #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 12 binary64))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 (pow.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a)) #s(literal 2 binary64)))","(/.f64 (*.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (*.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 2 binary64)))","(/.f64 (hypot.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (hypot.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) (pow.f64 b_2 #s(literal 4 binary64))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 8 binary64)) (pow.f64 (*.f64 c a) #s(literal 4 binary64))) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (+.f64 (pow.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 8 binary64)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) (*.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 18 binary64)) (pow.f64 (*.f64 c a) #s(literal 9 binary64))) (*.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 12 binary64)))))","(/.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 c a) b_2) b_2))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))","(/.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))","(fma.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 2 binary64))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))))","(fma.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (+.f64 (pow.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 12 binary64)))) (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) (-.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) (pow.f64 b_2 #s(literal 4 binary64))) (pow.f64 b_2 #s(literal 8 binary64))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))))","(fma.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))))","(fma.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))) (fma.f64 c a (*.f64 b_2 b_2)) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))))","(fma.f64 (*.f64 c #s(literal -1 binary64)) a (*.f64 b_2 b_2))","(fma.f64 (exp.f64 (log.f64 b_2)) (exp.f64 (log.f64 b_2)) (*.f64 (neg.f64 (neg.f64 c)) a))","(fma.f64 (exp.f64 (log.f64 b_2)) (exp.f64 (log.f64 b_2)) (*.f64 #s(literal 1 binary64) (*.f64 c a)))","(fma.f64 (exp.f64 (log.f64 b_2)) (exp.f64 (log.f64 b_2)) (*.f64 (neg.f64 c) (neg.f64 a)))","(fma.f64 (exp.f64 (log.f64 b_2)) (exp.f64 (log.f64 b_2)) (*.f64 (neg.f64 a) (neg.f64 c)))","(fma.f64 (exp.f64 (log.f64 b_2)) (exp.f64 (log.f64 b_2)) (neg.f64 (*.f64 (neg.f64 a) c)))","(fma.f64 (exp.f64 (log.f64 b_2)) (exp.f64 (log.f64 b_2)) (*.f64 (neg.f64 a) c))","(fma.f64 (exp.f64 (log.f64 b_2)) (exp.f64 (log.f64 b_2)) (*.f64 c a))","(fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))","(fma.f64 #s(literal -1 binary64) (*.f64 c a) (*.f64 b_2 b_2))","(fma.f64 #s(literal -1 binary64) (*.f64 b_2 b_2) (*.f64 (neg.f64 (neg.f64 c)) a))","(fma.f64 #s(literal -1 binary64) (*.f64 b_2 b_2) (*.f64 #s(literal 1 binary64) (*.f64 c a)))","(fma.f64 #s(literal -1 binary64) (*.f64 b_2 b_2) (*.f64 (neg.f64 c) (neg.f64 a)))","(fma.f64 #s(literal -1 binary64) (*.f64 b_2 b_2) (*.f64 (neg.f64 a) (neg.f64 c)))","(fma.f64 #s(literal -1 binary64) (*.f64 b_2 b_2) (neg.f64 (*.f64 (neg.f64 a) c)))","(fma.f64 #s(literal -1 binary64) (*.f64 b_2 b_2) (*.f64 (neg.f64 a) c))","(fma.f64 #s(literal -1 binary64) (*.f64 b_2 b_2) (*.f64 c a))","(fma.f64 #s(literal 1 binary64) (*.f64 b_2 b_2) (*.f64 (neg.f64 (neg.f64 c)) a))","(fma.f64 #s(literal 1 binary64) (*.f64 b_2 b_2) (*.f64 #s(literal 1 binary64) (*.f64 c a)))","(fma.f64 #s(literal 1 binary64) (*.f64 b_2 b_2) (*.f64 (neg.f64 c) (neg.f64 a)))","(fma.f64 #s(literal 1 binary64) (*.f64 b_2 b_2) (*.f64 (neg.f64 a) (neg.f64 c)))","(fma.f64 #s(literal 1 binary64) (*.f64 b_2 b_2) (neg.f64 (*.f64 (neg.f64 a) c)))","(fma.f64 #s(literal 1 binary64) (*.f64 b_2 b_2) (*.f64 (neg.f64 a) c))","(fma.f64 #s(literal 1 binary64) (*.f64 b_2 b_2) (*.f64 c a))","(fma.f64 (pow.f64 b_2 #s(literal 4 binary64)) (/.f64 (*.f64 b_2 b_2) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))))","(fma.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))))","(fma.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))))","(fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))))","(fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (/.f64 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(fma.f64 (*.f64 c a) #s(literal -1 binary64) (*.f64 b_2 b_2))","(fma.f64 c (neg.f64 a) (*.f64 b_2 b_2))","(fma.f64 c a (*.f64 b_2 b_2))","(fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))","(fma.f64 a c (*.f64 b_2 b_2))","(fma.f64 (*.f64 b_2 b_2) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))))","(fma.f64 (*.f64 b_2 b_2) (/.f64 (*.f64 b_2 b_2) (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))))","(fma.f64 (*.f64 b_2 b_2) #s(literal -1 binary64) (*.f64 (neg.f64 (neg.f64 c)) a))","(fma.f64 (*.f64 b_2 b_2) #s(literal -1 binary64) (*.f64 #s(literal 1 binary64) (*.f64 c a)))","(fma.f64 (*.f64 b_2 b_2) #s(literal -1 binary64) (*.f64 (neg.f64 c) (neg.f64 a)))","(fma.f64 (*.f64 b_2 b_2) #s(literal -1 binary64) (*.f64 (neg.f64 a) (neg.f64 c)))","(fma.f64 (*.f64 b_2 b_2) #s(literal -1 binary64) (neg.f64 (*.f64 (neg.f64 a) c)))","(fma.f64 (*.f64 b_2 b_2) #s(literal -1 binary64) (*.f64 (neg.f64 a) c))","(fma.f64 (*.f64 b_2 b_2) #s(literal -1 binary64) (*.f64 c a))","(fma.f64 (*.f64 b_2 b_2) #s(literal 1 binary64) (*.f64 (neg.f64 (neg.f64 c)) a))","(fma.f64 (*.f64 b_2 b_2) #s(literal 1 binary64) (*.f64 #s(literal 1 binary64) (*.f64 c a)))","(fma.f64 (*.f64 b_2 b_2) #s(literal 1 binary64) (*.f64 (neg.f64 c) (neg.f64 a)))","(fma.f64 (*.f64 b_2 b_2) #s(literal 1 binary64) (*.f64 (neg.f64 a) (neg.f64 c)))","(fma.f64 (*.f64 b_2 b_2) #s(literal 1 binary64) (neg.f64 (*.f64 (neg.f64 a) c)))","(fma.f64 (*.f64 b_2 b_2) #s(literal 1 binary64) (*.f64 (neg.f64 a) c))","(fma.f64 (*.f64 b_2 b_2) #s(literal 1 binary64) (*.f64 c a))","(fma.f64 b_2 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))))","(fma.f64 b_2 b_2 (*.f64 (neg.f64 (neg.f64 c)) a))","(fma.f64 b_2 b_2 (*.f64 #s(literal 1 binary64) (*.f64 c a)))","(fma.f64 b_2 b_2 (*.f64 (neg.f64 c) (neg.f64 a)))","(fma.f64 b_2 b_2 (*.f64 (neg.f64 a) (neg.f64 c)))","(fma.f64 b_2 b_2 (neg.f64 (*.f64 (neg.f64 a) c)))","(fma.f64 b_2 b_2 (*.f64 (neg.f64 a) c))","(fma.f64 b_2 b_2 (*.f64 c a))","(sqrt.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2))))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))))","(-.f64 #s(literal 0 binary64) (fma.f64 c a (*.f64 b_2 b_2)))","(-.f64 (*.f64 (neg.f64 a) c) (*.f64 b_2 b_2))","(-.f64 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 a) c))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(fabs.f64 (fma.f64 c a (*.f64 b_2 b_2)))","(hypot.f64 (pow.f64 (*.f64 c a) #s(literal 1 binary64)) (*.f64 b_2 b_2))","(hypot.f64 (*.f64 (neg.f64 a) c) (*.f64 b_2 b_2))","(hypot.f64 (*.f64 c a) (*.f64 b_2 b_2))","(hypot.f64 (*.f64 b_2 b_2) (pow.f64 (*.f64 c a) #s(literal 1 binary64)))","(hypot.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 a) c))","(hypot.f64 (*.f64 b_2 b_2) (*.f64 c a))","(exp.f64 (*.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))) #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 2 binary64)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1 binary64)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (neg.f64 (log.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(+.f64 (-.f64 (*.f64 b_2 b_2) #s(literal 0 binary64)) (*.f64 c a))","(+.f64 (neg.f64 (*.f64 (neg.f64 a) c)) (*.f64 b_2 b_2))","(+.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))))","(+.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))))","(+.f64 (*.f64 (neg.f64 a) c) (*.f64 b_2 b_2))","(+.f64 (*.f64 c a) (*.f64 b_2 b_2))","(+.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 (neg.f64 c)) a))","(+.f64 (*.f64 b_2 b_2) (*.f64 #s(literal 1 binary64) (*.f64 c a)))","(+.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 c) (neg.f64 a)))","(+.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 a) (neg.f64 c)))","(+.f64 (*.f64 b_2 b_2) (neg.f64 (*.f64 (neg.f64 a) c)))","(+.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 a) c))","(+.f64 (*.f64 b_2 b_2) (*.f64 c a))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":246.10498046875,"type":"rewrite"},{"compiler":[[15289,2194]],"memory":[[1962576,44150928]],"time":85.05908203125,"type":"eval"},{"alts":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (+.f64 (pow.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 8 binary64))))))) a)","fresh",58.14579448403206,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (/.f64 (-.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))))) a)","fresh",52.023129411253436,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","done",30.16699886602001,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))))) a)","next",52.059678181124355,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)))))) a)","fresh",52.59266572985193,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)))) a)","next",31.104321425054025,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","fresh",42.032803427762936,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","next",46.12342833269573,"binary64"],["(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","fresh",46.5292107025933,"binary64"],["(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a)","fresh",41.27830321212375,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (fma.f64 (*.f64 c #s(literal -1/8 binary64)) (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 #s(literal -1/2 binary64) b_2)) c))","fresh",43.119285734933456,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","fresh",42.75010113736626,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 c b_2) b_2) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a))))","next",41.32320681325518,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","next",41.27830321212375,"binary64"]],"compiler":[[39,23],[38,19],[13,10],[31,21],[45,23],[23,15],[18,13],[17,12],[21,15],[17,13],[28,20],[19,14],[27,19],[19,14],[39,23],[38,19],[31,21],[45,23],[23,15],[18,13],[17,12],[21,15],[17,13],[28,20],[19,14],[27,19],[19,14]],"count":[[544,14]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[543,13],"picked":[1,1]}],"memory":[[-8855824,26106016]],"min-error":[[5.739735799167429,"binary64"]],"time":20.260986328125,"type":"prune"},{"egraph":[[0,8054,416,0.047498693],[6,6187,418,0.031111015],[5,3704,418,0.026067878],[4,2248,428,0.015414262],[3,868,432,0.011322733],[2,296,432,0.003025363],[1,135,440,0.001251766],[0,83,448,0.00076822],[0,51,448,0.000514962]],"inputs":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)))) a)","(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a))))","(neg.f64 b_2)","b_2","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)","(-.f64 (*.f64 b_2 (/.f64 b_2 a)) c)","(*.f64 b_2 (/.f64 b_2 a))","(/.f64 b_2 a)","a","c","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","(*.f64 #s(literal -2 binary64) (/.f64 b_2 a))","#s(literal -2 binary64)","(/.f64 b_2 a)","b_2","a","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))","(neg.f64 b_2)","b_2","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))","(*.f64 b_2 b_2)","a","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 c b_2) b_2) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 c b_2) b_2) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a)))","(neg.f64 b_2)","b_2","(fma.f64 (/.f64 (/.f64 c b_2) b_2) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a))","(/.f64 (/.f64 c b_2) b_2)","(/.f64 c b_2)","c","#s(literal -1/2 binary64)","(/.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","a","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))))) a)","(+.f64 (neg.f64 b_2) (sqrt.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))))","(neg.f64 b_2)","b_2","(sqrt.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))))","(*.f64 (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))","(pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64))","(fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))","(fma.f64 c a (*.f64 b_2 b_2))","c","a","(*.f64 b_2 b_2)","(*.f64 c a)","(pow.f64 b_2 #s(literal 4 binary64))","#s(literal 4 binary64)","#s(literal -1 binary64)","(-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))","(pow.f64 b_2 #s(literal 6 binary64))","#s(literal 6 binary64)","(pow.f64 (*.f64 c a) #s(literal 3 binary64))","#s(literal 3 binary64)"]],"locations":[["(neg.f64 b_2)","cost-diff",0],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))))) a)","cost-diff",0],["(+.f64 (neg.f64 b_2) (sqrt.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))))","cost-diff",1],["(*.f64 (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))","cost-diff",2],["(fma.f64 (/.f64 (/.f64 c b_2) b_2) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a))","cost-diff",0],["(neg.f64 b_2)","cost-diff",0],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 c b_2) b_2) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a))))","cost-diff",0],["(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 c b_2) b_2) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a)))","cost-diff",3],["(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))","cost-diff",0],["(neg.f64 b_2)","cost-diff",0],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","cost-diff",0],["(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))","cost-diff",1],["(/.f64 b_2 a)","cost-diff",0],["(*.f64 #s(literal -2 binary64) (/.f64 b_2 a))","cost-diff",0],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","cost-diff",0],["(neg.f64 b_2)","cost-diff",0],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)))) a)","cost-diff",0],["(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a))))","cost-diff",1],["(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)","cost-diff",2]],"memory":[[7407664,21574656]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)))) a)","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) b_2) a)","(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a))))","(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) b_2)","(neg.f64 b_2)","b_2","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)))","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a))","#s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 (/.f64 b_2 a)) c)","(-.f64 (*.f64 (/.f64 b_2 a) b_2) c)","(*.f64 b_2 (/.f64 b_2 a))","(*.f64 (/.f64 b_2 a) b_2)","(/.f64 b_2 a)","a","c","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","(*.f64 #s(literal -2 binary64) (/.f64 b_2 a))","#s(literal -2 binary64)","(/.f64 b_2 a)","b_2","a","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2) a)","(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))","(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2)","(neg.f64 b_2)","b_2","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))","(*.f64 b_2 b_2)","a","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 c b_2) b_2) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 c b_2) b_2) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a)))","(fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","(neg.f64 b_2)","b_2","(fma.f64 (/.f64 (/.f64 c b_2) b_2) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a))","(fma.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2) (/.f64 #s(literal 2 binary64) a))","(/.f64 (/.f64 c b_2) b_2)","(/.f64 c b_2)","c","#s(literal -1/2 binary64)","(/.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","a","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))))) a)","(/.f64 (-.f64 (sqrt.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))))) b_2) a)","(+.f64 (neg.f64 b_2) (sqrt.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))))","(-.f64 (sqrt.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))))) b_2)","(neg.f64 b_2)","b_2","(sqrt.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))))","(sqrt.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64)))))","(*.f64 (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))))","(pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64))","(pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64))","(fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))","(fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64)))","(fma.f64 c a (*.f64 b_2 b_2))","c","a","(*.f64 b_2 b_2)","(*.f64 c a)","(pow.f64 b_2 #s(literal 4 binary64))","#s(literal 4 binary64)","#s(literal -1 binary64)","(-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))","(pow.f64 b_2 #s(literal 6 binary64))","#s(literal 6 binary64)","(pow.f64 (*.f64 c a) #s(literal 3 binary64))","#s(literal 3 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":200.632080078125,"type":"simplify"},{"compiler":[[389,43]],"locations":[["(fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))","accuracy",10.232753759768443],["(+.f64 (neg.f64 b_2) (sqrt.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))))","accuracy",13.392238629486883],["(sqrt.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))))","accuracy",26.11467062552949],["(*.f64 (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))","accuracy",42.64101572365025],["(fma.f64 (/.f64 (/.f64 c b_2) b_2) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a))","accuracy",0.0078125],["(/.f64 (/.f64 c b_2) b_2)","accuracy",0.09765625],["(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 c b_2) b_2) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a)))","accuracy",6.016883354734431],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 c b_2) b_2) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a))))","accuracy",41.22720841843829],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","accuracy",2.737771909408055],["(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))","accuracy",13.392238629486883],["#s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))","accuracy",20.357544727326314],["(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))","accuracy",26.11467062552949],["(/.f64 b_2 a)","accuracy",0.0],["(*.f64 #s(literal -2 binary64) (/.f64 b_2 a))","accuracy",0.0078125],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","accuracy",41.27830321212375],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)))) a)","accuracy",2.737771909408055],["(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)","accuracy",3.0892566026785433],["(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a))))","accuracy",13.392238629486883],["(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)))","accuracy",26.11467062552949]],"memory":[[-5633648,54316976]],"mixsample":[[2.96533203125,"ival-sub",1200],[0.010009765625,"ival-sub",4800],[14.758544921875,"ival-div",0],[7.775390625,"adjust",800],[0.00390625,"ival-add",4800],[0.3125,"ival-mult",1200],[0.150634765625,"ival-sub",1600],[0.640625,"ival-pow",1600],[0.150390625,"ival-assert",0],[0.02392578125,"ival-sqrt",4800],[4.5556640625,"ival-sub",0],[0.76123046875,"ival-sqrt",1200],[0.02587890625,"ival-mult",4400],[4.2265625,"ival-sqrt",0],[0.186279296875,"ival-sub",400],[0.75244140625,"ival-pow",800],[43.5,"ival-pow",0],[0.037353515625,"ival-sub",4400],[8.92431640625,"ival-add",0],[0.3173828125,"ival-mult",800],[0.235107421875,"ival-sub",800],[0.0078125,"ival-mult",4800],[0.0966796875,"ival-mult",1600],[0.06591796875,"ival-pow",4400],[0.180908203125,"ival-add",400],[0.342041015625,"adjust",2800],[0.179443359375,"ival-mult",2400],[0.115234375,"ival-add",2400],[0.68505859375,"ival-pow",400],[0.442626953125,"ival-pow",2400],[0.277587890625,"ival-sqrt",400],[0.19970703125,"ival-add",1200],[0.22802734375,"ival-sqrt",2000],[0.431396484375,"ival-sqrt",800],[0.1298828125,"ival-sub",2000],[0.092041015625,"ival-mult",2000],[0.18603515625,"ival-pow",2000],[0.078857421875,"ival-sqrt",4400],[3.633056640625,"adjust",2000],[0.296630859375,"ival-sub",2400],[1.660888671875,"ival-pow",1200],[0.084228515625,"ival-add",1600],[0.232177734375,"ival-sqrt",1600],[20.355224609375,"ival-mult",0],[0.295166015625,"ival-mult",400],[0.02001953125,"ival-pow",4800],[0.049560546875,"ival-add",2000],[0.30126953125,"ival-true",0],[0.502685546875,"ival-sqrt",2400],[1.034423828125,"exact",0],[0.1591796875,"ival-add",800],[0.013916015625,"ival-add",4400],[1.56591796875,"ival-neg",0]],"outcomes":[[33.248291015625,1,"valid",41],[35.992431640625,2,"valid",35],[4.59033203125,3,"valid",4],[92.48583984375,0,"valid",176]],"time":213.31298828125,"type":"localize"},{"count":[[21,193]],"inputs":[["(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)","(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a))))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)))) a)","(neg.f64 b_2)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","(*.f64 #s(literal -2 binary64) (/.f64 b_2 a))","(/.f64 b_2 a)","(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 c b_2) b_2) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 c b_2) b_2) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a))))","(fma.f64 (/.f64 (/.f64 c b_2) b_2) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a))","(*.f64 (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))","(+.f64 (neg.f64 b_2) (sqrt.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))))) a)","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))","(/.f64 (/.f64 c b_2) b_2)","(sqrt.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))))","(fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))"]],"memory":[[6885712,22080784]],"outputs":[["(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","(* -1/2 (/ (* a c) b_2))","(* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5)))))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5)))))))))","(* -1/2 (/ c b_2))","(+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5))))))))","(* -2 (/ b_2 a))","(/ b_2 a)","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/ 2 a)","(/ (+ 2 (* -1/2 (/ (* a c) (pow b_2 2)))) a)","(+ (* a (- (* -1 (* a (+ (* -1 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2))))) c)) (pow b_2 2))","(+ (* a (- (* a (- (/ (* a (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2))))) (pow b_2 2)) (+ (* -1 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2))))) c)) (pow b_2 2))","(* a (+ (* -1/2 (/ c b_2)) (* -1/2 (/ (* a (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2))))) b_2))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/2 (/ (* a (+ (* -1 (/ (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) (pow b_2 2))) (* 1/2 (/ (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2))))) (pow b_2 2))))) b_2)) (* -1/2 (/ (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) b_2))))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/2 (/ (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) b_2)) (* a (+ (* -1/2 (/ (* a (+ (* -1 (/ (* (pow c 2) (+ (* -1 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) (pow b_2 4))) (+ (* 1/4 (/ (pow (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) 2) (pow b_2 2))) (+ (* 1/2 (/ (* c (+ (* -1 (/ (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) (pow b_2 2))) (* 1/2 (/ (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2))))) (pow b_2 2))))) (pow b_2 2))) (/ (* (pow c 2) (+ (* -1 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) (pow b_2 4)))))) b_2)) (* -1/2 (/ (+ (* -1 (/ (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) (pow b_2 2))) (* 1/2 (/ (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2))))) (pow b_2 2)))) b_2))))))))","(+ (* -1/2 (/ c b_2)) (* -1/2 (/ (* a (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2))))) b_2)))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/2 (/ (* a (+ (* -1 (/ (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) (pow b_2 2))) (* 1/2 (/ (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2))))) (pow b_2 2))))) b_2)) (* -1/2 (/ (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) b_2)))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/2 (/ (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) b_2)) (* a (+ (* -1/2 (/ (* a (+ (* -1 (/ (* (pow c 2) (+ (* -1 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) (pow b_2 4))) (+ (* 1/4 (/ (pow (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) 2) (pow b_2 2))) (+ (* 1/2 (/ (* c (+ (* -1 (/ (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) (pow b_2 2))) (* 1/2 (/ (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2))))) (pow b_2 2))))) (pow b_2 2))) (/ (* (pow c 2) (+ (* -1 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) (pow b_2 4)))))) b_2)) (* -1/2 (/ (+ (* -1 (/ (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) (pow b_2 2))) (* 1/2 (/ (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2))))) (pow b_2 2)))) b_2)))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/2 (/ (* a (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2))))) b_2)))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/2 (/ (* a (+ (* -1 (/ (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) (pow b_2 2))) (* 1/2 (/ (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2))))) (pow b_2 2))))) b_2)) (* -1/2 (/ (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) b_2)))))))","(pow b_2 4)","(+ (* a (* (pow b_2 2) c)) (pow b_2 4))","(+ (* a (+ (* a (pow c 2)) (* (pow b_2 2) c))) (pow b_2 4))","(* -1 (* a c))","(* a (+ (* -1 c) (/ (pow b_2 2) a)))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* 1/2 (/ c b_2))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(* -1/2 (/ c (pow b_2 2)))","(+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))","(* a (- (+ (* -1 c) (* -1 (/ (+ (* -1 (/ (pow b_2 4) c)) (/ (pow b_2 4) c)) (pow a 2)))) (* -1 (/ (pow b_2 2) a))))","(* a (- (+ (* -1 c) (/ (* (pow b_2 2) (+ (* -1 (/ (pow b_2 4) c)) (/ (pow b_2 4) c))) (* (pow a 3) c))) (+ (* -1 (/ (pow b_2 2) a)) (+ (* -1 (/ (pow b_2 4) (* (pow a 2) c))) (/ (pow b_2 4) (* (pow a 2) c))))))","(* a (- (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 5) c))) (/ (+ (* -1 (/ (pow b_2 4) c)) (/ (pow b_2 4) c)) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(+ (* -1 (/ b_2 a)) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 5) c))) (/ (+ (* -1 (/ (pow b_2 4) c)) (/ (pow b_2 4) c)) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (- (/ (pow b_2 2) a) c))","(* a (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 5) c))) (/ (+ (* -1 (/ (pow b_2 4) c)) (/ (pow b_2 4) c)) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 5) c))) (/ (+ (* -1 (/ (pow b_2 4) c)) (/ (pow b_2 4) c)) (sqrt -1)))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 7) c))) (/ (+ (* -1 (/ (* (pow b_2 2) (+ (* -1 (/ (pow b_2 4) c)) (/ (pow b_2 4) c))) c)) (* 1/4 (/ (* a (pow b_2 4)) (* c (pow (sqrt -1) 2))))) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* (pow a 2) (pow c 2))","(* (pow a 2) (+ (/ (* (pow b_2 2) c) a) (pow c 2)))","(* (pow a 2) (+ (/ (* (pow b_2 2) c) a) (+ (/ (pow b_2 4) (pow a 2)) (pow c 2))))","(* -1 (* a (+ c (* -1 (/ (pow b_2 2) a)))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a))) a)))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ c (* -1 (/ (- (+ (* -1 (/ (pow b_2 4) (* a c))) (/ (pow b_2 4) (* a c))) (* -1 (pow b_2 2))) a)))))","(* -1 (* a (+ c (* -1 (/ (- (* -1 (/ (- (/ (* (pow b_2 2) (+ (* -1 (/ (pow b_2 4) c)) (/ (pow b_2 4) c))) (* a c)) (+ (* -1 (/ (pow b_2 4) c)) (/ (pow b_2 4) c))) a)) (* -1 (pow b_2 2))) a)))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (* (sqrt -1) (+ (* -1 (/ (pow b_2 4) c)) (/ (pow b_2 4) c))))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (* (sqrt -1) (+ (* -1 (/ (pow b_2 4) c)) (/ (pow b_2 4) c))))) (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 5) c))) (* (sqrt -1) (+ (* -1 (/ (pow b_2 4) c)) (/ (pow b_2 4) c))))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (sqrt -1) (+ (* -1 (/ (pow b_2 4) c)) (/ (pow b_2 4) c))))) (* 1/2 (* (sqrt (/ 1 (* a c))) (* (sqrt -1) (+ (* -1/4 (/ (* a (pow b_2 4)) c)) (/ (* (pow b_2 2) (+ (* -1 (/ (pow b_2 4) c)) (/ (pow b_2 4) c))) c)))))) (pow a 3))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* (pow a 2) (+ (* -1 (/ (+ (* -1 (* (pow b_2 2) c)) (* -1 (/ (pow b_2 4) a))) a)) (pow c 2)))","(+ (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(/ (+ (* -2 (/ (pow b_2 2) a)) (* 1/2 c)) b_2)","(/ (+ (* -1/2 c) (* 2 (/ (pow b_2 2) a))) (pow b_2 2))","(- (pow b_2 2) (* a c))","(/ c (pow b_2 2))","(+ (* a (* (pow b_2 2) c)) (* (pow a 2) (pow c 2)))","(+ (* (pow a 2) (pow c 2)) (* (pow b_2 2) (+ (* a c) (pow b_2 2))))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(/ (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2)","(/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6)))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4)))))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(* (pow b_2 2) (- (+ 1 (* -1 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2))) (pow b_2 4)))) (/ (* a c) (pow b_2 2))))","(* (pow b_2 2) (- (+ 1 (/ (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2))))) (pow b_2 6))) (+ (* -1 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ (/ (* a c) (pow b_2 2)) (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(/ (+ (* -1/2 (* a c)) (* -1/2 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* -1 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))) (* 1/2 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))))) (pow b_2 4))) (* -1/2 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) (pow b_2 2))))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* -1 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))) (* 1/2 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))))) (pow b_2 4))) (+ (* -1/2 (/ (+ (* -1 (* (pow a 2) (* (pow c 2) (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))) (+ (* 1/4 (pow (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) 2)) (+ (* 1/2 (* a (* c (+ (* -1 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))) (* 1/2 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2))))))))))) (* (pow a 2) (* (pow c 2) (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))))) (pow b_2 6))) (* -1/2 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) (pow b_2 2)))))) b_2)","(/ (+ (* -1/2 c) (* -1/2 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) (* a (pow b_2 2))))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* -1 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))) (* 1/2 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))))) (* a (pow b_2 4)))) (* -1/2 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) (* a (pow b_2 2)))))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* -1 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))) (* 1/2 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))))) (* a (pow b_2 4)))) (+ (* -1/2 (/ (+ (* -1 (* (pow a 2) (* (pow c 2) (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))) (+ (* 1/4 (pow (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) 2)) (+ (* 1/2 (* a (* c (+ (* -1 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))) (* 1/2 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2))))))))))) (* (pow a 2) (* (pow c 2) (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))))) (* a (pow b_2 6)))) (* -1/2 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) (* a (pow b_2 2))))))) b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/2 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/2 (/ (+ (* -1 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))) (* 1/2 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))))) (pow b_2 6))) (* -1/2 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) (pow b_2 4)))))))","(* (pow b_2 4) (+ 1 (/ (* a c) (pow b_2 2))))","(* (pow b_2 4) (+ 1 (+ (/ (* a c) (pow b_2 2)) (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))","(* -2 b_2)","(* -1 (* b_2 (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 2 (/ 1 a))))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 2 (/ 1 a)))))))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/2 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) (pow b_2 4)))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/2 (/ (+ (* -1 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))) (* 1/2 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))))) (pow b_2 6))) (* -1/2 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) (pow b_2 4))))))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/2 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) (* a (pow b_2 4)))) (* 2 (/ 1 a))))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/2 (/ (+ (* -1 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))) (* 1/2 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))))) (* a (pow b_2 6)))) (+ (* -1/2 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) (* a (pow b_2 4)))) (* 2 (/ 1 a)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/2 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/2 (/ (+ (* -1 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))) (* 1/2 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))))) (pow b_2 6))) (* -1/2 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) (pow b_2 4))))))))","(* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3)))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5)))))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow a 3) (pow b_2 5)))))))))","(* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) (* a b_2))) (* -1/16 (/ (pow a 2) (pow b_2 5))))))) (* 1/2 (/ 1 b_2))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(+ (* c (- (* -1 (* c (+ (* -1 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2))))) a)) (pow b_2 2))","(+ (* c (- (* c (- (/ (* a (* c (+ (* -1 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2))))) (pow b_2 2)) (+ (* -1 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2))))) a)) (pow b_2 2))","(* c (+ (* -1/2 (/ a b_2)) (* -1/2 (/ (* c (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2))))) b_2))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/2 (/ (* c (+ (* -1 (/ (* a (+ (* -1 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) (pow b_2 2))) (* 1/2 (/ (* a (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2))))) (pow b_2 2))))) b_2)) (* -1/2 (/ (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) b_2))))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/2 (/ (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) b_2)) (* c (+ (* -1/2 (/ (* c (+ (* -1 (/ (* (pow a 2) (+ (* -1 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) (pow b_2 4))) (+ (* 1/4 (/ (pow (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) 2) (pow b_2 2))) (+ (* 1/2 (/ (* a (+ (* -1 (/ (* a (+ (* -1 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) (pow b_2 2))) (* 1/2 (/ (* a (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2))))) (pow b_2 2))))) (pow b_2 2))) (/ (* (pow a 2) (+ (* -1 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) (pow b_2 4)))))) b_2)) (* -1/2 (/ (+ (* -1 (/ (* a (+ (* -1 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) (pow b_2 2))) (* 1/2 (/ (* a (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2))))) (pow b_2 2)))) b_2))))))))","(* c (- (* -1/2 (/ (* c (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2))))) (* a b_2))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/2 (/ (* c (+ (* -1 (/ (* a (+ (* -1 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) (pow b_2 2))) (* 1/2 (/ (* a (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2))))) (pow b_2 2))))) (* a b_2))) (* -1/2 (/ (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) (* a b_2))))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/2 (/ (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) (* a b_2))) (* c (+ (* -1/2 (/ (* c (+ (* -1 (/ (* (pow a 2) (+ (* -1 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) (pow b_2 4))) (+ (* 1/4 (/ (pow (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) 2) (pow b_2 2))) (+ (* 1/2 (/ (* a (+ (* -1 (/ (* a (+ (* -1 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) (pow b_2 2))) (* 1/2 (/ (* a (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2))))) (pow b_2 2))))) (pow b_2 2))) (/ (* (pow a 2) (+ (* -1 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) (pow b_2 4)))))) (* a b_2))) (* -1/2 (/ (+ (* -1 (/ (* a (+ (* -1 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) (pow b_2 2))) (* 1/2 (/ (* a (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2))))) (pow b_2 2)))) (* a b_2))))))) (* 1/2 (/ 1 b_2))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/2 (/ (* c (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2))))) b_2)))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/2 (/ (* c (+ (* -1 (/ (* a (+ (* -1 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) (pow b_2 2))) (* 1/2 (/ (* a (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2))))) (pow b_2 2))))) b_2)) (* -1/2 (/ (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) b_2)))))))","(+ (* c (+ (* a (pow b_2 2)) (* (pow a 2) c))) (pow b_2 4))","(* c (+ (* -1 a) (/ (pow b_2 2) c)))","(* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b_2 c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (+ (* -2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2))))","(* c (- (* 2 (/ 1 (* a c))) (* 1/2 (/ 1 (pow b_2 2)))))","(* c (- (+ (* -1 a) (* -1 (/ (+ (* -1 (/ (pow b_2 4) a)) (/ (pow b_2 4) a)) (pow c 2)))) (* -1 (/ (pow b_2 2) c))))","(* c (- (+ (* -1 a) (/ (* (pow b_2 2) (+ (* -1 (/ (pow b_2 4) a)) (/ (pow b_2 4) a))) (* a (pow c 3)))) (+ (* -1 (/ (pow b_2 2) c)) (+ (* -1 (/ (pow b_2 4) (* a (pow c 2)))) (/ (pow b_2 4) (* a (pow c 2)))))))","(* c (- (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 5)))) (/ (+ (* -1 (/ (pow b_2 4) a)) (/ (pow b_2 4) a)) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (+ (* -1 (/ (pow b_2 4) a)) (/ (pow b_2 4) a)) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* c (- (/ (pow b_2 2) c) a))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 5)))) (/ (+ (* -1 (/ (pow b_2 4) a)) (/ (pow b_2 4) a)) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 5)))) (/ (+ (* -1 (/ (pow b_2 4) a)) (/ (pow b_2 4) a)) (sqrt -1)))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 7)))) (/ (+ (* -1 (/ (* (pow b_2 2) (+ (* -1 (/ (pow b_2 4) a)) (/ (pow b_2 4) a))) a)) (* 1/4 (/ (* (pow b_2 4) c) (* a (pow (sqrt -1) 2))))) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* (pow c 2) (+ (/ (* a (pow b_2 2)) c) (pow a 2)))","(* (pow c 2) (+ (/ (* a (pow b_2 2)) c) (+ (/ (pow b_2 4) (pow c 2)) (pow a 2))))","(* -1 (* c (+ a (* -1 (/ (pow b_2 2) c)))))","(* -1 (* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (- (* 2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2)))))","(* -1 (* c (- (* 1/2 (/ 1 (pow b_2 2))) (* 2 (/ 1 (* a c))))))","(* -1 (* c (+ a (* -1 (/ (- (+ (* -1 (/ (pow b_2 4) (* a c))) (/ (pow b_2 4) (* a c))) (* -1 (pow b_2 2))) c)))))","(* -1 (* c (+ a (* -1 (/ (- (* -1 (/ (- (/ (* (pow b_2 2) (+ (* -1 (/ (pow b_2 4) a)) (/ (pow b_2 4) a))) (* a c)) (+ (* -1 (/ (pow b_2 4) a)) (/ (pow b_2 4) a))) c)) (* -1 (pow b_2 2))) c)))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (* (sqrt -1) (+ (* -1 (/ (pow b_2 4) a)) (/ (pow b_2 4) a))))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (sqrt -1) (+ (* -1 (/ (pow b_2 4) a)) (/ (pow b_2 4) a))))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 5)))) (* (sqrt -1) (+ (* -1 (/ (pow b_2 4) a)) (/ (pow b_2 4) a))))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ c a)) (* (sqrt -1) (+ (* -1 (/ (pow b_2 4) a)) (/ (pow b_2 4) a))))) (* 1/2 (* (sqrt (/ 1 (* a c))) (* (sqrt -1) (+ (* -1/4 (/ (* (pow b_2 4) c) a)) (/ (* (pow b_2 2) (+ (* -1 (/ (pow b_2 4) a)) (/ (pow b_2 4) a))) a)))))) (pow c 3))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* (pow c 2) (+ (* -1 (/ (+ (* -1 (* a (pow b_2 2))) (* -1 (/ (pow b_2 4) c))) c)) (pow a 2)))"]],"series":[[5.02685546875,"((* (- (* b_2 (/ b_2 a)) c) a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -2 (/ b_2 a)) (/ b_2 a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (sqrt (- (* b_2 b_2) (* a c))) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (* (pow (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)) -1) (- (pow b_2 6) (pow (* c a) 3))) (+ (neg b_2) (sqrt (* (pow (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)) -1) (- (pow b_2 6) (pow (* c a) 3))))) (/ (+ (neg b_2) (sqrt (* (pow (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)) -1) (- (pow b_2 6) (pow (* c a) 3))))) a) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (/ (/ c b_2) b_2) (sqrt (* (pow (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)) -1) (- (pow b_2 6) (pow (* c a) 3)))) (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)))","c","-inf"],[16.135986328125,"((* (- (* b_2 (/ b_2 a)) c) a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -2 (/ b_2 a)) (/ b_2 a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (sqrt (- (* b_2 b_2) (* a c))) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (* (pow (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)) -1) (- (pow b_2 6) (pow (* c a) 3))) (+ (neg b_2) (sqrt (* (pow (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)) -1) (- (pow b_2 6) (pow (* c a) 3))))) (/ (+ (neg b_2) (sqrt (* (pow (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)) -1) (- (pow b_2 6) (pow (* c a) 3))))) a) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (/ (/ c b_2) b_2) (sqrt (* (pow (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)) -1) (- (pow b_2 6) (pow (* c a) 3)))) (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)))","c","inf"],[10.5009765625,"((* (- (* b_2 (/ b_2 a)) c) a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -2 (/ b_2 a)) (/ b_2 a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (sqrt (- (* b_2 b_2) (* a c))) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (* (pow (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)) -1) (- (pow b_2 6) (pow (* c a) 3))) (+ (neg b_2) (sqrt (* (pow (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)) -1) (- (pow b_2 6) (pow (* c a) 3))))) (/ (+ (neg b_2) (sqrt (* (pow (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)) -1) (- (pow b_2 6) (pow (* c a) 3))))) a) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (/ (/ c b_2) b_2) (sqrt (* (pow (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)) -1) (- (pow b_2 6) (pow (* c a) 3)))) (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)))","c","0"],[6.244873046875,"((* (- (* b_2 (/ b_2 a)) c) a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -2 (/ b_2 a)) (/ b_2 a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (sqrt (- (* b_2 b_2) (* a c))) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (* (pow (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)) -1) (- (pow b_2 6) (pow (* c a) 3))) (+ (neg b_2) (sqrt (* (pow (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)) -1) (- (pow b_2 6) (pow (* c a) 3))))) (/ (+ (neg b_2) (sqrt (* (pow (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)) -1) (- (pow b_2 6) (pow (* c a) 3))))) a) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (/ (/ c b_2) b_2) (sqrt (* (pow (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)) -1) (- (pow b_2 6) (pow (* c a) 3)))) (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)))","b_2","-inf"],[10.658935546875,"((* (- (* b_2 (/ b_2 a)) c) a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -2 (/ b_2 a)) (/ b_2 a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (sqrt (- (* b_2 b_2) (* a c))) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (* (pow (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)) -1) (- (pow b_2 6) (pow (* c a) 3))) (+ (neg b_2) (sqrt (* (pow (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)) -1) (- (pow b_2 6) (pow (* c a) 3))))) (/ (+ (neg b_2) (sqrt (* (pow (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)) -1) (- (pow b_2 6) (pow (* c a) 3))))) a) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (/ (/ c b_2) b_2) (sqrt (* (pow (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)) -1) (- (pow b_2 6) (pow (* c a) 3)))) (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)))","b_2","inf"],[7.943115234375,"((* (- (* b_2 (/ b_2 a)) c) a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -2 (/ b_2 a)) (/ b_2 a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (sqrt (- (* b_2 b_2) (* a c))) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (* (pow (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)) -1) (- (pow b_2 6) (pow (* c a) 3))) (+ (neg b_2) (sqrt (* (pow (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)) -1) (- (pow b_2 6) (pow (* c a) 3))))) (/ (+ (neg b_2) (sqrt (* (pow (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)) -1) (- (pow b_2 6) (pow (* c a) 3))))) a) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (/ (/ c b_2) b_2) (sqrt (* (pow (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)) -1) (- (pow b_2 6) (pow (* c a) 3)))) (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)))","b_2","0"],[7.02587890625,"((* (- (* b_2 (/ b_2 a)) c) a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -2 (/ b_2 a)) (/ b_2 a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (sqrt (- (* b_2 b_2) (* a c))) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (* (pow (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)) -1) (- (pow b_2 6) (pow (* c a) 3))) (+ (neg b_2) (sqrt (* (pow (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)) -1) (- (pow b_2 6) (pow (* c a) 3))))) (/ (+ (neg b_2) (sqrt (* (pow (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)) -1) (- (pow b_2 6) (pow (* c a) 3))))) a) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (/ (/ c b_2) b_2) (sqrt (* (pow (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)) -1) (- (pow b_2 6) (pow (* c a) 3)))) (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)))","a","-inf"],[10.4150390625,"((* (- (* b_2 (/ b_2 a)) c) a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -2 (/ b_2 a)) (/ b_2 a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (sqrt (- (* b_2 b_2) (* a c))) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (* (pow (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)) -1) (- (pow b_2 6) (pow (* c a) 3))) (+ (neg b_2) (sqrt (* (pow (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)) -1) (- (pow b_2 6) (pow (* c a) 3))))) (/ (+ (neg b_2) (sqrt (* (pow (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)) -1) (- (pow b_2 6) (pow (* c a) 3))))) a) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (/ (/ c b_2) b_2) (sqrt (* (pow (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)) -1) (- (pow b_2 6) (pow (* c a) 3)))) (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)))","a","inf"],[11.865966796875,"((* (- (* b_2 (/ b_2 a)) c) a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -2 (/ b_2 a)) (/ b_2 a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (sqrt (- (* b_2 b_2) (* a c))) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (* (pow (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)) -1) (- (pow b_2 6) (pow (* c a) 3))) (+ (neg b_2) (sqrt (* (pow (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)) -1) (- (pow b_2 6) (pow (* c a) 3))))) (/ (+ (neg b_2) (sqrt (* (pow (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)) -1) (- (pow b_2 6) (pow (* c a) 3))))) a) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (/ (/ c b_2) b_2) (sqrt (* (pow (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)) -1) (- (pow b_2 6) (pow (* c a) 3)))) (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)))","a","0"]],"time":93.009033203125,"type":"series"},{"count":[[193,192]],"egraph":[[0,8360,5744,0.102347699],[1,3590,6040,0.032497314],[0,1050,7265,0.012248153]],"inputs":[["(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","(* -1/2 (/ (* a c) b_2))","(* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5)))))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5)))))))))","(* -1/2 (/ c b_2))","(+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5))))))))","(* -2 (/ b_2 a))","(/ b_2 a)","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/ 2 a)","(/ (+ 2 (* -1/2 (/ (* a c) (pow b_2 2)))) a)","(+ (* a (- (* -1 (* a (+ (* -1 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2))))) c)) (pow b_2 2))","(+ (* a (- (* a (- (/ (* a (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2))))) (pow b_2 2)) (+ (* -1 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2))))) c)) (pow b_2 2))","(* a (+ (* -1/2 (/ c b_2)) (* -1/2 (/ (* a (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2))))) b_2))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/2 (/ (* a (+ (* -1 (/ (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) (pow b_2 2))) (* 1/2 (/ (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2))))) (pow b_2 2))))) b_2)) (* -1/2 (/ (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) b_2))))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/2 (/ (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) b_2)) (* a (+ (* -1/2 (/ (* a (+ (* -1 (/ (* (pow c 2) (+ (* -1 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) (pow b_2 4))) (+ (* 1/4 (/ (pow (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) 2) (pow b_2 2))) (+ (* 1/2 (/ (* c (+ (* -1 (/ (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) (pow b_2 2))) (* 1/2 (/ (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2))))) (pow b_2 2))))) (pow b_2 2))) (/ (* (pow c 2) (+ (* -1 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) (pow b_2 4)))))) b_2)) (* -1/2 (/ (+ (* -1 (/ (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) (pow b_2 2))) (* 1/2 (/ (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2))))) (pow b_2 2)))) b_2))))))))","(+ (* -1/2 (/ c b_2)) (* -1/2 (/ (* a (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2))))) b_2)))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/2 (/ (* a (+ (* -1 (/ (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) (pow b_2 2))) (* 1/2 (/ (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2))))) (pow b_2 2))))) b_2)) (* -1/2 (/ (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) b_2)))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/2 (/ (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) b_2)) (* a (+ (* -1/2 (/ (* a (+ (* -1 (/ (* (pow c 2) (+ (* -1 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) (pow b_2 4))) (+ (* 1/4 (/ (pow (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) 2) (pow b_2 2))) (+ (* 1/2 (/ (* c (+ (* -1 (/ (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) (pow b_2 2))) (* 1/2 (/ (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2))))) (pow b_2 2))))) (pow b_2 2))) (/ (* (pow c 2) (+ (* -1 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) (pow b_2 4)))))) b_2)) (* -1/2 (/ (+ (* -1 (/ (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) (pow b_2 2))) (* 1/2 (/ (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2))))) (pow b_2 2)))) b_2)))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/2 (/ (* a (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2))))) b_2)))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/2 (/ (* a (+ (* -1 (/ (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) (pow b_2 2))) (* 1/2 (/ (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2))))) (pow b_2 2))))) b_2)) (* -1/2 (/ (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) b_2)))))))","(pow b_2 4)","(+ (* a (* (pow b_2 2) c)) (pow b_2 4))","(+ (* a (+ (* a (pow c 2)) (* (pow b_2 2) c))) (pow b_2 4))","(* -1 (* a c))","(* a (+ (* -1 c) (/ (pow b_2 2) a)))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* 1/2 (/ c b_2))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(* -1/2 (/ c (pow b_2 2)))","(+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))","(* a (- (+ (* -1 c) (* -1 (/ (+ (* -1 (/ (pow b_2 4) c)) (/ (pow b_2 4) c)) (pow a 2)))) (* -1 (/ (pow b_2 2) a))))","(* a (- (+ (* -1 c) (/ (* (pow b_2 2) (+ (* -1 (/ (pow b_2 4) c)) (/ (pow b_2 4) c))) (* (pow a 3) c))) (+ (* -1 (/ (pow b_2 2) a)) (+ (* -1 (/ (pow b_2 4) (* (pow a 2) c))) (/ (pow b_2 4) (* (pow a 2) c))))))","(* a (- (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 5) c))) (/ (+ (* -1 (/ (pow b_2 4) c)) (/ (pow b_2 4) c)) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(+ (* -1 (/ b_2 a)) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 5) c))) (/ (+ (* -1 (/ (pow b_2 4) c)) (/ (pow b_2 4) c)) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (- (/ (pow b_2 2) a) c))","(* a (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 5) c))) (/ (+ (* -1 (/ (pow b_2 4) c)) (/ (pow b_2 4) c)) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 5) c))) (/ (+ (* -1 (/ (pow b_2 4) c)) (/ (pow b_2 4) c)) (sqrt -1)))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 7) c))) (/ (+ (* -1 (/ (* (pow b_2 2) (+ (* -1 (/ (pow b_2 4) c)) (/ (pow b_2 4) c))) c)) (* 1/4 (/ (* a (pow b_2 4)) (* c (pow (sqrt -1) 2))))) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* (pow a 2) (pow c 2))","(* (pow a 2) (+ (/ (* (pow b_2 2) c) a) (pow c 2)))","(* (pow a 2) (+ (/ (* (pow b_2 2) c) a) (+ (/ (pow b_2 4) (pow a 2)) (pow c 2))))","(* -1 (* a (+ c (* -1 (/ (pow b_2 2) a)))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a))) a)))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ c (* -1 (/ (- (+ (* -1 (/ (pow b_2 4) (* a c))) (/ (pow b_2 4) (* a c))) (* -1 (pow b_2 2))) a)))))","(* -1 (* a (+ c (* -1 (/ (- (* -1 (/ (- (/ (* (pow b_2 2) (+ (* -1 (/ (pow b_2 4) c)) (/ (pow b_2 4) c))) (* a c)) (+ (* -1 (/ (pow b_2 4) c)) (/ (pow b_2 4) c))) a)) (* -1 (pow b_2 2))) a)))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (* (sqrt -1) (+ (* -1 (/ (pow b_2 4) c)) (/ (pow b_2 4) c))))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (* (sqrt -1) (+ (* -1 (/ (pow b_2 4) c)) (/ (pow b_2 4) c))))) (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 5) c))) (* (sqrt -1) (+ (* -1 (/ (pow b_2 4) c)) (/ (pow b_2 4) c))))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (sqrt -1) (+ (* -1 (/ (pow b_2 4) c)) (/ (pow b_2 4) c))))) (* 1/2 (* (sqrt (/ 1 (* a c))) (* (sqrt -1) (+ (* -1/4 (/ (* a (pow b_2 4)) c)) (/ (* (pow b_2 2) (+ (* -1 (/ (pow b_2 4) c)) (/ (pow b_2 4) c))) c)))))) (pow a 3))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* (pow a 2) (+ (* -1 (/ (+ (* -1 (* (pow b_2 2) c)) (* -1 (/ (pow b_2 4) a))) a)) (pow c 2)))","(+ (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(/ (+ (* -2 (/ (pow b_2 2) a)) (* 1/2 c)) b_2)","(/ (+ (* -1/2 c) (* 2 (/ (pow b_2 2) a))) (pow b_2 2))","(- (pow b_2 2) (* a c))","(/ c (pow b_2 2))","(+ (* a (* (pow b_2 2) c)) (* (pow a 2) (pow c 2)))","(+ (* (pow a 2) (pow c 2)) (* (pow b_2 2) (+ (* a c) (pow b_2 2))))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(/ (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2)","(/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6)))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4)))))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(* (pow b_2 2) (- (+ 1 (* -1 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2))) (pow b_2 4)))) (/ (* a c) (pow b_2 2))))","(* (pow b_2 2) (- (+ 1 (/ (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2))))) (pow b_2 6))) (+ (* -1 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ (/ (* a c) (pow b_2 2)) (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(/ (+ (* -1/2 (* a c)) (* -1/2 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* -1 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))) (* 1/2 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))))) (pow b_2 4))) (* -1/2 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) (pow b_2 2))))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* -1 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))) (* 1/2 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))))) (pow b_2 4))) (+ (* -1/2 (/ (+ (* -1 (* (pow a 2) (* (pow c 2) (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))) (+ (* 1/4 (pow (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) 2)) (+ (* 1/2 (* a (* c (+ (* -1 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))) (* 1/2 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2))))))))))) (* (pow a 2) (* (pow c 2) (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))))) (pow b_2 6))) (* -1/2 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) (pow b_2 2)))))) b_2)","(/ (+ (* -1/2 c) (* -1/2 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) (* a (pow b_2 2))))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* -1 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))) (* 1/2 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))))) (* a (pow b_2 4)))) (* -1/2 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) (* a (pow b_2 2)))))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* -1 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))) (* 1/2 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))))) (* a (pow b_2 4)))) (+ (* -1/2 (/ (+ (* -1 (* (pow a 2) (* (pow c 2) (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))) (+ (* 1/4 (pow (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) 2)) (+ (* 1/2 (* a (* c (+ (* -1 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))) (* 1/2 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2))))))))))) (* (pow a 2) (* (pow c 2) (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))))) (* a (pow b_2 6)))) (* -1/2 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) (* a (pow b_2 2))))))) b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/2 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/2 (/ (+ (* -1 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))) (* 1/2 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))))) (pow b_2 6))) (* -1/2 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) (pow b_2 4)))))))","(* (pow b_2 4) (+ 1 (/ (* a c) (pow b_2 2))))","(* (pow b_2 4) (+ 1 (+ (/ (* a c) (pow b_2 2)) (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))","(* -2 b_2)","(* -1 (* b_2 (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 2 (/ 1 a))))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 2 (/ 1 a)))))))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/2 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) (pow b_2 4)))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/2 (/ (+ (* -1 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))) (* 1/2 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))))) (pow b_2 6))) (* -1/2 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) (pow b_2 4))))))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/2 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) (* a (pow b_2 4)))) (* 2 (/ 1 a))))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/2 (/ (+ (* -1 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))) (* 1/2 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))))) (* a (pow b_2 6)))) (+ (* -1/2 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) (* a (pow b_2 4)))) (* 2 (/ 1 a)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/2 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/2 (/ (+ (* -1 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))) (* 1/2 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))))) (pow b_2 6))) (* -1/2 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) (pow b_2 4))))))))","(* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3)))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5)))))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow a 3) (pow b_2 5)))))))))","(* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) (* a b_2))) (* -1/16 (/ (pow a 2) (pow b_2 5))))))) (* 1/2 (/ 1 b_2))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(+ (* c (- (* -1 (* c (+ (* -1 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2))))) a)) (pow b_2 2))","(+ (* c (- (* c (- (/ (* a (* c (+ (* -1 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2))))) (pow b_2 2)) (+ (* -1 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2))))) a)) (pow b_2 2))","(* c (+ (* -1/2 (/ a b_2)) (* -1/2 (/ (* c (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2))))) b_2))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/2 (/ (* c (+ (* -1 (/ (* a (+ (* -1 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) (pow b_2 2))) (* 1/2 (/ (* a (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2))))) (pow b_2 2))))) b_2)) (* -1/2 (/ (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) b_2))))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/2 (/ (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) b_2)) (* c (+ (* -1/2 (/ (* c (+ (* -1 (/ (* (pow a 2) (+ (* -1 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) (pow b_2 4))) (+ (* 1/4 (/ (pow (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) 2) (pow b_2 2))) (+ (* 1/2 (/ (* a (+ (* -1 (/ (* a (+ (* -1 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) (pow b_2 2))) (* 1/2 (/ (* a (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2))))) (pow b_2 2))))) (pow b_2 2))) (/ (* (pow a 2) (+ (* -1 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) (pow b_2 4)))))) b_2)) (* -1/2 (/ (+ (* -1 (/ (* a (+ (* -1 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) (pow b_2 2))) (* 1/2 (/ (* a (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2))))) (pow b_2 2)))) b_2))))))))","(* c (- (* -1/2 (/ (* c (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2))))) (* a b_2))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/2 (/ (* c (+ (* -1 (/ (* a (+ (* -1 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) (pow b_2 2))) (* 1/2 (/ (* a (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2))))) (pow b_2 2))))) (* a b_2))) (* -1/2 (/ (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) (* a b_2))))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/2 (/ (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) (* a b_2))) (* c (+ (* -1/2 (/ (* c (+ (* -1 (/ (* (pow a 2) (+ (* -1 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) (pow b_2 4))) (+ (* 1/4 (/ (pow (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) 2) (pow b_2 2))) (+ (* 1/2 (/ (* a (+ (* -1 (/ (* a (+ (* -1 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) (pow b_2 2))) (* 1/2 (/ (* a (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2))))) (pow b_2 2))))) (pow b_2 2))) (/ (* (pow a 2) (+ (* -1 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) (pow b_2 4)))))) (* a b_2))) (* -1/2 (/ (+ (* -1 (/ (* a (+ (* -1 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) (pow b_2 2))) (* 1/2 (/ (* a (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2))))) (pow b_2 2)))) (* a b_2))))))) (* 1/2 (/ 1 b_2))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/2 (/ (* c (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2))))) b_2)))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/2 (/ (* c (+ (* -1 (/ (* a (+ (* -1 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) (pow b_2 2))) (* 1/2 (/ (* a (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2))))) (pow b_2 2))))) b_2)) (* -1/2 (/ (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) b_2)))))))","(+ (* c (+ (* a (pow b_2 2)) (* (pow a 2) c))) (pow b_2 4))","(* c (+ (* -1 a) (/ (pow b_2 2) c)))","(* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b_2 c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (+ (* -2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2))))","(* c (- (* 2 (/ 1 (* a c))) (* 1/2 (/ 1 (pow b_2 2)))))","(* c (- (+ (* -1 a) (* -1 (/ (+ (* -1 (/ (pow b_2 4) a)) (/ (pow b_2 4) a)) (pow c 2)))) (* -1 (/ (pow b_2 2) c))))","(* c (- (+ (* -1 a) (/ (* (pow b_2 2) (+ (* -1 (/ (pow b_2 4) a)) (/ (pow b_2 4) a))) (* a (pow c 3)))) (+ (* -1 (/ (pow b_2 2) c)) (+ (* -1 (/ (pow b_2 4) (* a (pow c 2)))) (/ (pow b_2 4) (* a (pow c 2)))))))","(* c (- (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 5)))) (/ (+ (* -1 (/ (pow b_2 4) a)) (/ (pow b_2 4) a)) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (+ (* -1 (/ (pow b_2 4) a)) (/ (pow b_2 4) a)) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* c (- (/ (pow b_2 2) c) a))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 5)))) (/ (+ (* -1 (/ (pow b_2 4) a)) (/ (pow b_2 4) a)) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 5)))) (/ (+ (* -1 (/ (pow b_2 4) a)) (/ (pow b_2 4) a)) (sqrt -1)))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 7)))) (/ (+ (* -1 (/ (* (pow b_2 2) (+ (* -1 (/ (pow b_2 4) a)) (/ (pow b_2 4) a))) a)) (* 1/4 (/ (* (pow b_2 4) c) (* a (pow (sqrt -1) 2))))) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* (pow c 2) (+ (/ (* a (pow b_2 2)) c) (pow a 2)))","(* (pow c 2) (+ (/ (* a (pow b_2 2)) c) (+ (/ (pow b_2 4) (pow c 2)) (pow a 2))))","(* -1 (* c (+ a (* -1 (/ (pow b_2 2) c)))))","(* -1 (* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (- (* 2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2)))))","(* -1 (* c (- (* 1/2 (/ 1 (pow b_2 2))) (* 2 (/ 1 (* a c))))))","(* -1 (* c (+ a (* -1 (/ (- (+ (* -1 (/ (pow b_2 4) (* a c))) (/ (pow b_2 4) (* a c))) (* -1 (pow b_2 2))) c)))))","(* -1 (* c (+ a (* -1 (/ (- (* -1 (/ (- (/ (* (pow b_2 2) (+ (* -1 (/ (pow b_2 4) a)) (/ (pow b_2 4) a))) (* a c)) (+ (* -1 (/ (pow b_2 4) a)) (/ (pow b_2 4) a))) c)) (* -1 (pow b_2 2))) c)))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (* (sqrt -1) (+ (* -1 (/ (pow b_2 4) a)) (/ (pow b_2 4) a))))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (sqrt -1) (+ (* -1 (/ (pow b_2 4) a)) (/ (pow b_2 4) a))))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 5)))) (* (sqrt -1) (+ (* -1 (/ (pow b_2 4) a)) (/ (pow b_2 4) a))))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ c a)) (* (sqrt -1) (+ (* -1 (/ (pow b_2 4) a)) (/ (pow b_2 4) a))))) (* 1/2 (* (sqrt (/ 1 (* a c))) (* (sqrt -1) (+ (* -1/4 (/ (* (pow b_2 4) c) a)) (/ (* (pow b_2 2) (+ (* -1 (/ (pow b_2 4) a)) (/ (pow b_2 4) a))) a)))))) (pow c 3))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* (pow c 2) (+ (* -1 (/ (+ (* -1 (* a (pow b_2 2))) (* -1 (/ (pow b_2 4) c))) c)) (pow a 2)))"]],"memory":[[558832,57017024]],"method":["egg-herbie"],"outputs":[["(pow b_2 2)","(*.f64 b_2 b_2)","(+ (* -1 (* a c)) (pow b_2 2))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(* -1/2 (/ (* a c) b_2))","(*.f64 (/.f64 (*.f64 c a) b_2) #s(literal -1/2 binary64))","(* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a)","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5)))))))","(*.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) (pow.f64 b_2 #s(literal 5 binary64))) #s(literal -1/16 binary64) (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a)","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5)))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 a (/.f64 (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal 5/64 binary64)) b_2)) #s(literal -1/2 binary64) (/.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 5 binary64)))) a (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a)","(* -1/2 (/ c b_2))","(*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))","(+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))","(fma.f64 (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))","(fma.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) (pow.f64 b_2 #s(literal 5 binary64))) #s(literal -1/16 binary64) (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 a (/.f64 (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal 5/64 binary64)) b_2)) #s(literal -1/2 binary64) (/.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 5 binary64)))) a (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","(* -2 (/ b_2 a))","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(/ b_2 a)","(/.f64 b_2 a)","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(fma.f64 (/.f64 (*.f64 c a) b_2) #s(literal -1/2 binary64) b_2)","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a b_2)","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) (pow.f64 b_2 #s(literal 5 binary64))) #s(literal -1/16 binary64) (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a b_2)","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (*.f64 c a) b_2) (*.f64 #s(literal -2 binary64) b_2)) a)","(/ 2 a)","(/.f64 #s(literal 2 binary64) a)","(/ (+ 2 (* -1/2 (/ (* a c) (pow b_2 2)))) a)","(/.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 c a) b_2) #s(literal 2 binary64)) a)","(+ (* a (- (* -1 (* a (+ (* -1 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2))))) c)) (pow b_2 2))","(fma.f64 (neg.f64 (fma.f64 #s(literal 0 binary64) a c)) a (*.f64 b_2 b_2))","(+ (* a (- (* a (- (/ (* a (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2))))) (pow b_2 2)) (+ (* -1 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2))))) c)) (pow b_2 2))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 #s(literal 0 binary64) c) b_2) (/.f64 a b_2) #s(literal 0 binary64)) a (neg.f64 c)) a (*.f64 b_2 b_2))","(* a (+ (* -1/2 (/ c b_2)) (* -1/2 (/ (* a (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2))))) b_2))))","(*.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 a (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) b_2) (/.f64 (*.f64 c c) b_2)) b_2) (/.f64 c b_2))) a)","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/2 (/ (* a (+ (* -1 (/ (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) (pow b_2 2))) (* 1/2 (/ (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2))))) (pow b_2 2))))) b_2)) (* -1/2 (/ (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) b_2))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 a (/.f64 (fma.f64 (*.f64 c (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) b_2) (/.f64 (*.f64 c c) b_2)) (*.f64 b_2 b_2))) #s(literal 1/2 binary64) (*.f64 (/.f64 #s(literal 0 binary64) b_2) (/.f64 c b_2))) b_2) (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) b_2) (/.f64 (*.f64 c c) b_2)) b_2))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a)","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/2 (/ (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) b_2)) (* a (+ (* -1/2 (/ (* a (+ (* -1 (/ (* (pow c 2) (+ (* -1 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) (pow b_2 4))) (+ (* 1/4 (/ (pow (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) 2) (pow b_2 2))) (+ (* 1/2 (/ (* c (+ (* -1 (/ (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) (pow b_2 2))) (* 1/2 (/ (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2))))) (pow b_2 2))))) (pow b_2 2))) (/ (* (pow c 2) (+ (* -1 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) (pow b_2 4)))))) b_2)) (* -1/2 (/ (+ (* -1 (/ (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) (pow b_2 2))) (* 1/2 (/ (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2))))) (pow b_2 2)))) b_2))))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 a (/.f64 (fma.f64 (*.f64 c c) (/.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal 1/4 binary64) b_2) (/.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) b_2) (/.f64 (*.f64 c c) b_2)) #s(literal 2 binary64)) b_2) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 (*.f64 (fma.f64 (*.f64 c (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) b_2) (/.f64 (*.f64 c c) b_2)) (*.f64 b_2 b_2))) #s(literal 1/2 binary64) (*.f64 (/.f64 #s(literal 0 binary64) b_2) (/.f64 c b_2))) c) b_2) (*.f64 (*.f64 c c) (/.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 4 binary64))))))) b_2) (/.f64 (fma.f64 (*.f64 c (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) b_2) (/.f64 (*.f64 c c) b_2)) (*.f64 b_2 b_2))) #s(literal 1/2 binary64) (*.f64 (/.f64 #s(literal 0 binary64) b_2) (/.f64 c b_2))) b_2))) a (*.f64 (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) b_2) (/.f64 (*.f64 c c) b_2)) b_2) #s(literal -1/2 binary64))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a)","(+ (* -1/2 (/ c b_2)) (* -1/2 (/ (* a (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2))))) b_2)))","(*.f64 #s(literal -1/2 binary64) (fma.f64 a (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) b_2) (/.f64 (*.f64 c c) b_2)) b_2) (/.f64 c b_2)))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/2 (/ (* a (+ (* -1 (/ (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) (pow b_2 2))) (* 1/2 (/ (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2))))) (pow b_2 2))))) b_2)) (* -1/2 (/ (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) b_2)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 a (/.f64 (fma.f64 (*.f64 c (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) b_2) (/.f64 (*.f64 c c) b_2)) (*.f64 b_2 b_2))) #s(literal 1/2 binary64) (*.f64 (/.f64 #s(literal 0 binary64) b_2) (/.f64 c b_2))) b_2) (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) b_2) (/.f64 (*.f64 c c) b_2)) b_2))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/2 (/ (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) b_2)) (* a (+ (* -1/2 (/ (* a (+ (* -1 (/ (* (pow c 2) (+ (* -1 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) (pow b_2 4))) (+ (* 1/4 (/ (pow (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) 2) (pow b_2 2))) (+ (* 1/2 (/ (* c (+ (* -1 (/ (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) (pow b_2 2))) (* 1/2 (/ (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2))))) (pow b_2 2))))) (pow b_2 2))) (/ (* (pow c 2) (+ (* -1 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) (pow b_2 4)))))) b_2)) (* -1/2 (/ (+ (* -1 (/ (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) (pow b_2 2))) (* 1/2 (/ (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2))))) (pow b_2 2)))) b_2)))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 a (/.f64 (fma.f64 (*.f64 c c) (/.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal 1/4 binary64) b_2) (/.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) b_2) (/.f64 (*.f64 c c) b_2)) #s(literal 2 binary64)) b_2) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 (*.f64 (fma.f64 (*.f64 c (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) b_2) (/.f64 (*.f64 c c) b_2)) (*.f64 b_2 b_2))) #s(literal 1/2 binary64) (*.f64 (/.f64 #s(literal 0 binary64) b_2) (/.f64 c b_2))) c) b_2) (*.f64 (*.f64 c c) (/.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 4 binary64))))))) b_2) (/.f64 (fma.f64 (*.f64 c (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) b_2) (/.f64 (*.f64 c c) b_2)) (*.f64 b_2 b_2))) #s(literal 1/2 binary64) (*.f64 (/.f64 #s(literal 0 binary64) b_2) (/.f64 c b_2))) b_2))) a (*.f64 (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) b_2) (/.f64 (*.f64 c c) b_2)) b_2) #s(literal -1/2 binary64))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/2 (/ (* a (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2))))) b_2)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 a (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) b_2) (/.f64 (*.f64 c c) b_2)) b_2) (/.f64 c b_2))) a b_2)","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/2 (/ (* a (+ (* -1 (/ (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) (pow b_2 2))) (* 1/2 (/ (* c (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2))))) (pow b_2 2))))) b_2)) (* -1/2 (/ (+ (* -1 (/ (pow c 2) (pow b_2 2))) (+ (* 1/4 (/ (pow c 2) (pow b_2 2))) (/ (pow c 2) (pow b_2 2)))) b_2)))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 a (/.f64 (fma.f64 (*.f64 c (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) b_2) (/.f64 (*.f64 c c) b_2)) (*.f64 b_2 b_2))) #s(literal 1/2 binary64) (*.f64 (/.f64 #s(literal 0 binary64) b_2) (/.f64 c b_2))) b_2) (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) b_2) (/.f64 (*.f64 c c) b_2)) b_2))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a b_2)","(pow b_2 4)","(pow.f64 b_2 #s(literal 4 binary64))","(+ (* a (* (pow b_2 2) c)) (pow b_2 4))","(fma.f64 (*.f64 (*.f64 b_2 b_2) c) a (pow.f64 b_2 #s(literal 4 binary64)))","(+ (* a (+ (* a (pow c 2)) (* (pow b_2 2) c))) (pow b_2 4))","(fma.f64 (fma.f64 (*.f64 c c) a (*.f64 (*.f64 b_2 b_2) c)) a (pow.f64 b_2 #s(literal 4 binary64)))","(* -1 (* a c))","(*.f64 (neg.f64 a) c)","(* a (+ (* -1 c) (/ (pow b_2 2) a)))","(*.f64 (-.f64 (/.f64 (*.f64 b_2 b_2) a) c) a)","(* (sqrt (* a c)) (sqrt -1))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a)))","(* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a)) a)","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a)))","(*.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a))) a)","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(*.f64 (fma.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a)))) a)","(* (sqrt (/ c a)) (sqrt -1))","(*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a))","(+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a)))","(+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(fma.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))) a)","(* 1/2 (/ c b_2))","(*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(* -1/2 (/ c (pow b_2 2)))","(*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64))","(+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))","(fma.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a))","(* a (- (+ (* -1 c) (* -1 (/ (+ (* -1 (/ (pow b_2 4) c)) (/ (pow b_2 4) c)) (pow a 2)))) (* -1 (/ (pow b_2 2) a))))","(*.f64 (+.f64 (-.f64 (/.f64 #s(literal 0 binary64) (*.f64 a a)) c) (/.f64 (*.f64 b_2 b_2) a)) a)","(* a (- (+ (* -1 c) (/ (* (pow b_2 2) (+ (* -1 (/ (pow b_2 4) c)) (/ (pow b_2 4) c))) (* (pow a 3) c))) (+ (* -1 (/ (pow b_2 2) a)) (+ (* -1 (/ (pow b_2 4) (* (pow a 2) c))) (/ (pow b_2 4) (* (pow a 2) c))))))","(*.f64 (+.f64 (fma.f64 (/.f64 #s(literal 0 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (*.f64 b_2 b_2) c) (neg.f64 c)) (/.f64 (*.f64 b_2 b_2) a)) a)","(* a (- (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 5) c))) (/ (+ (* -1 (/ (pow b_2 4) c)) (/ (pow b_2 4) c)) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(*.f64 (fma.f64 (*.f64 (/.f64 #s(literal 0 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c)))) #s(literal -1/2 binary64) (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a)))) a)","(+ (* -1 (/ b_2 a)) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 5) c))) (/ (+ (* -1 (/ (pow b_2 4) c)) (/ (pow b_2 4) c)) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(fma.f64 (*.f64 (/.f64 #s(literal 0 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c)))) #s(literal -1/2 binary64) (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a))))","(* a (- (/ (pow b_2 2) a) c))","(*.f64 (-.f64 (/.f64 (*.f64 b_2 b_2) a) c) a)","(* a (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 5) c))) (/ (+ (* -1 (/ (pow b_2 4) c)) (/ (pow b_2 4) c)) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (/.f64 #s(literal 0 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c)))) #s(literal -1/2 binary64) (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))) a)","(* a (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 5) c))) (/ (+ (* -1 (/ (pow b_2 4) c)) (/ (pow b_2 4) c)) (sqrt -1)))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 7) c))) (/ (+ (* -1 (/ (* (pow b_2 2) (+ (* -1 (/ (pow b_2 4) c)) (/ (pow b_2 4) c))) c)) (* 1/4 (/ (* a (pow b_2 4)) (* c (pow (sqrt -1) 2))))) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 (/.f64 #s(literal 0 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (*.f64 (/.f64 (fma.f64 (*.f64 a (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) c)) #s(literal -1/4 binary64) (/.f64 (*.f64 #s(literal 0 binary64) (*.f64 b_2 b_2)) (neg.f64 c))) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 7 binary64)) c))))) (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))) a)","(* (pow a 2) (pow c 2))","(*.f64 (*.f64 a a) (*.f64 c c))","(* (pow a 2) (+ (/ (* (pow b_2 2) c) a) (pow c 2)))","(*.f64 (fma.f64 c c (/.f64 (*.f64 (*.f64 b_2 b_2) c) a)) (*.f64 a a))","(* (pow a 2) (+ (/ (* (pow b_2 2) c) a) (+ (/ (pow b_2 4) (pow a 2)) (pow c 2))))","(*.f64 (fma.f64 (*.f64 b_2 b_2) (/.f64 c a) (fma.f64 c c (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 a a)))) (*.f64 a a))","(* -1 (* a (+ c (* -1 (/ (pow b_2 2) a)))))","(*.f64 (neg.f64 a) (-.f64 c (/.f64 (*.f64 b_2 b_2) a)))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a)))","(* -1 (* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(*.f64 (neg.f64 a) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 a)))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b_2 b_2)) (neg.f64 b_2)) (neg.f64 a))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 a c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b_2 b_2)) (*.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (neg.f64 a)) b_2) (neg.f64 a))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(neg.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(neg.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b_2 b_2)) b_2) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a))) a)))","(neg.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (-.f64 b_2 (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 a c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b_2 b_2)) (*.f64 (*.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) a)) a)))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))))","(* -1 (* a (+ c (* -1 (/ (- (+ (* -1 (/ (pow b_2 4) (* a c))) (/ (pow b_2 4) (* a c))) (* -1 (pow b_2 2))) a)))))","(*.f64 (neg.f64 a) (-.f64 c (/.f64 (*.f64 b_2 b_2) a)))","(* -1 (* a (+ c (* -1 (/ (- (* -1 (/ (- (/ (* (pow b_2 2) (+ (* -1 (/ (pow b_2 4) c)) (/ (pow b_2 4) c))) (* a c)) (+ (* -1 (/ (pow b_2 4) c)) (/ (pow b_2 4) c))) a)) (* -1 (pow b_2 2))) a)))))","(*.f64 (neg.f64 a) (-.f64 c (/.f64 (+.f64 (/.f64 (fma.f64 (/.f64 #s(literal 0 binary64) c) (/.f64 (*.f64 b_2 b_2) a) #s(literal 0 binary64)) (neg.f64 a)) (*.f64 b_2 b_2)) a)))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (* (sqrt -1) (+ (* -1 (/ (pow b_2 4) c)) (/ (pow b_2 4) c))))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 0 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c))))) (neg.f64 a)) b_2) (neg.f64 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (* (sqrt -1) (+ (* -1 (/ (pow b_2 4) c)) (/ (pow b_2 4) c))))) (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)))","(neg.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (-.f64 b_2 (/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 0 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c))))) a)) a)))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(*.f64 (neg.f64 a) (-.f64 c (/.f64 (*.f64 b_2 b_2) a)))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 5) c))) (* (sqrt -1) (+ (* -1 (/ (pow b_2 4) c)) (/ (pow b_2 4) c))))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 #s(literal 1/2 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 0 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))))) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* a (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (sqrt -1) (+ (* -1 (/ (pow b_2 4) c)) (/ (pow b_2 4) c))))) (* 1/2 (* (sqrt (/ 1 (* a c))) (* (sqrt -1) (+ (* -1/4 (/ (* a (pow b_2 4)) c)) (/ (* (pow b_2 2) (+ (* -1 (/ (pow b_2 4) c)) (/ (pow b_2 4) c))) c)))))) (pow a 3))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (-.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 a c))) (*.f64 #s(literal 0 binary64) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c))) (*.f64 (fma.f64 (*.f64 a (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) c)) #s(literal -1/4 binary64) (/.f64 (*.f64 #s(literal 0 binary64) (*.f64 b_2 b_2)) c)) (sqrt.f64 #s(literal -1 binary64))))) (pow.f64 a #s(literal 3 binary64)))))","(* (pow a 2) (+ (* -1 (/ (+ (* -1 (* (pow b_2 2) c)) (* -1 (/ (pow b_2 4) a))) a)) (pow c 2)))","(*.f64 (fma.f64 c c (/.f64 (neg.f64 (fma.f64 (*.f64 b_2 b_2) c (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) a))) (neg.f64 a))) (*.f64 a a))","(+ (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a)) (neg.f64 b_2))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (*.f64 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c))) #s(literal 1/2 binary64) #s(literal -1 binary64)) b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (/.f64 b_2 #s(literal -1 binary64)) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) b_2 #s(literal -1 binary64)) b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (fma.f64 (*.f64 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (/.f64 #s(literal -1 binary64) a)) b_2 (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (/.f64 b_2 #s(literal -1 binary64)) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) b_2 (/.f64 #s(literal -1 binary64) a)) b_2 (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(* -1 b_2)","(neg.f64 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 (/.f64 b_2 #s(literal -1 binary64)) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64))))) (/.f64 (*.f64 b_2 b_2) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))) #s(literal -1/8 binary64))) (*.f64 b_2 b_2) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a))))","(/ (+ (* -2 (/ (pow b_2 2) a)) (* 1/2 c)) b_2)","(/.f64 (fma.f64 (/.f64 (*.f64 b_2 b_2) a) #s(literal -2 binary64) (*.f64 #s(literal 1/2 binary64) c)) b_2)","(/ (+ (* -1/2 c) (* 2 (/ (pow b_2 2) a))) (pow b_2 2))","(/.f64 (fma.f64 (/.f64 (*.f64 b_2 b_2) a) #s(literal 2 binary64) (*.f64 #s(literal -1/2 binary64) c)) (*.f64 b_2 b_2))","(- (pow b_2 2) (* a c))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(/ c (pow b_2 2))","(/.f64 c (*.f64 b_2 b_2))","(+ (* a (* (pow b_2 2) c)) (* (pow a 2) (pow c 2)))","(fma.f64 (*.f64 (*.f64 b_2 b_2) a) c (*.f64 (*.f64 a a) (*.f64 c c)))","(+ (* (pow a 2) (pow c 2)) (* (pow b_2 2) (+ (* a c) (pow b_2 2))))","(fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2) (*.f64 (*.f64 a a) (*.f64 c c)))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(*.f64 (fma.f64 (/.f64 (neg.f64 a) b_2) (/.f64 c b_2) #s(literal 1 binary64)) (*.f64 b_2 b_2))","(/ (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2)))) b_2)","(/.f64 (fma.f64 (*.f64 (/.f64 (*.f64 a a) b_2) (/.f64 (*.f64 c c) b_2)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (*.f64 c a))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))))) b_2)","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) a) c (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/16 binary64) (*.f64 (*.f64 (/.f64 (*.f64 a a) b_2) (/.f64 (*.f64 c c) b_2)) #s(literal -1/8 binary64)))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2)","(/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 c a (/.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) #s(literal 5/64 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/16 binary64) (*.f64 (*.f64 (/.f64 (*.f64 a a) b_2) (/.f64 (*.f64 c c) b_2)) #s(literal -1/8 binary64)))) b_2)","(/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2)","(/.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2)","(/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))))) b_2)","(/.f64 (fma.f64 #s(literal -1/2 binary64) c (fma.f64 (/.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/16 binary64) (*.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2)))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6)))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4)))))) b_2)","(/.f64 (fma.f64 #s(literal -1/2 binary64) (+.f64 c (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 #s(literal 5/64 binary64) a))) (fma.f64 (/.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/16 binary64) (*.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2)))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 c a) b_2) #s(literal 1 binary64)) b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (*.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 c a) b_2))) b_2 b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(fma.f64 (fma.f64 (*.f64 (/.f64 a b_2) (/.f64 c b_2)) #s(literal -1/2 binary64) (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -1/16 binary64) (*.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64)))) b_2 b_2)","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 c b_2) (/.f64 #s(literal -2 binary64) a)) b_2)","(* (pow b_2 2) (- (+ 1 (* -1 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2))) (pow b_2 4)))) (/ (* a c) (pow b_2 2))))","(*.f64 (-.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 4 binary64)))) (*.f64 (/.f64 a b_2) (/.f64 c b_2))) (*.f64 b_2 b_2))","(* (pow b_2 2) (- (+ 1 (/ (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2))))) (pow b_2 6))) (+ (* -1 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ (/ (* a c) (pow b_2 2)) (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(*.f64 (-.f64 (fma.f64 a (/.f64 (*.f64 #s(literal 0 binary64) c) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal 1 binary64)) (fma.f64 (neg.f64 (*.f64 a a)) (/.f64 (*.f64 c c) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (/.f64 a b_2) (/.f64 c b_2) (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (pow.f64 b_2 #s(literal 4 binary64)))))) (*.f64 b_2 b_2))","(/ (+ (* -1/2 (* a c)) (* -1/2 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) (pow b_2 2)))) b_2)","(/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 c a (/.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) (*.f64 c c)) (*.f64 b_2 b_2)))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* -1 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))) (* 1/2 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))))) (pow b_2 4))) (* -1/2 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) (pow b_2 2))))) b_2)","(/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 c a (+.f64 (/.f64 (fma.f64 (*.f64 (*.f64 c a) (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) (*.f64 c c))) #s(literal 1/2 binary64) (*.f64 (*.f64 c a) #s(literal 0 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) (/.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) (*.f64 c c)) (*.f64 b_2 b_2))))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* -1 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))) (* 1/2 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))))) (pow b_2 4))) (+ (* -1/2 (/ (+ (* -1 (* (pow a 2) (* (pow c 2) (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))) (+ (* 1/4 (pow (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) 2)) (+ (* 1/2 (* a (* c (+ (* -1 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))) (* 1/2 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2))))))))))) (* (pow a 2) (* (pow c 2) (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))))) (pow b_2 6))) (* -1/2 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) (pow b_2 2)))))) b_2)","(/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 c a (/.f64 (fma.f64 (*.f64 (*.f64 c a) (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) (*.f64 c c))) #s(literal 1/2 binary64) (*.f64 (*.f64 c a) #s(literal 0 binary64))) (pow.f64 b_2 #s(literal 4 binary64)))) (*.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) (*.f64 c c)) (*.f64 b_2 b_2)) (/.f64 (fma.f64 (*.f64 #s(literal 0 binary64) (*.f64 c c)) (*.f64 a a) (fma.f64 (pow.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) (*.f64 c c)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 (fma.f64 (*.f64 (*.f64 c a) (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) (*.f64 c c))) #s(literal 1/2 binary64) (*.f64 (*.f64 c a) #s(literal 0 binary64))) c) (*.f64 (*.f64 #s(literal 0 binary64) (*.f64 c c)) (*.f64 a a))))) (pow.f64 b_2 #s(literal 6 binary64)))))) b_2)","(/ (+ (* -1/2 c) (* -1/2 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) (* a (pow b_2 2))))) b_2)","(/.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) (*.f64 c c)) (*.f64 (*.f64 b_2 b_2) a)) c)) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* -1 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))) (* 1/2 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))))) (* a (pow b_2 4)))) (* -1/2 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) (* a (pow b_2 2)))))) b_2)","(/.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (*.f64 c a) (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) (*.f64 c c))) #s(literal 1/2 binary64) (*.f64 (*.f64 c a) #s(literal 0 binary64))) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) a)) (/.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) (*.f64 c c)) (*.f64 (*.f64 b_2 b_2) a))) c)) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* -1 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))) (* 1/2 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))))) (* a (pow b_2 4)))) (+ (* -1/2 (/ (+ (* -1 (* (pow a 2) (* (pow c 2) (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))) (+ (* 1/4 (pow (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) 2)) (+ (* 1/2 (* a (* c (+ (* -1 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))) (* 1/2 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2))))))))))) (* (pow a 2) (* (pow c 2) (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))))) (* a (pow b_2 6)))) (* -1/2 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) (* a (pow b_2 2))))))) b_2)","(/.f64 (fma.f64 #s(literal -1/2 binary64) (+.f64 c (/.f64 (fma.f64 (*.f64 (*.f64 c a) (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) (*.f64 c c))) #s(literal 1/2 binary64) (*.f64 (*.f64 c a) #s(literal 0 binary64))) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) a))) (*.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) (*.f64 c c)) (*.f64 (*.f64 b_2 b_2) a)) (/.f64 (fma.f64 (*.f64 #s(literal 0 binary64) (*.f64 c c)) (*.f64 a a) (fma.f64 (pow.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) (*.f64 c c)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 (fma.f64 (*.f64 (*.f64 c a) (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) (*.f64 c c))) #s(literal 1/2 binary64) (*.f64 (*.f64 c a) #s(literal 0 binary64))) c) (*.f64 (*.f64 #s(literal 0 binary64) (*.f64 c c)) (*.f64 a a))))) (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) a))))) b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/2 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) (pow b_2 4))))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 (/.f64 a b_2) (/.f64 c b_2) (/.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) (*.f64 c c)) (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal 1 binary64)) b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/2 (/ (+ (* -1 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))) (* 1/2 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))))) (pow b_2 6))) (* -1/2 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) (pow b_2 4)))))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 (/.f64 a b_2) (/.f64 c b_2) (+.f64 (/.f64 (fma.f64 (*.f64 (*.f64 c a) (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) (*.f64 c c))) #s(literal 1/2 binary64) (*.f64 (*.f64 c a) #s(literal 0 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) (*.f64 c c)) (pow.f64 b_2 #s(literal 4 binary64))))) #s(literal 1 binary64)) b_2)","(* (pow b_2 4) (+ 1 (/ (* a c) (pow b_2 2))))","(*.f64 (fma.f64 a (/.f64 c (*.f64 b_2 b_2)) #s(literal 1 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))","(* (pow b_2 4) (+ 1 (+ (/ (* a c) (pow b_2 2)) (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))","(*.f64 (+.f64 (fma.f64 a (/.f64 c (*.f64 b_2 b_2)) #s(literal 1 binary64)) (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (pow.f64 b_2 #s(literal 4 binary64)))) (pow.f64 b_2 #s(literal 4 binary64)))","(* -2 b_2)","(*.f64 #s(literal -2 binary64) b_2)","(* -1 (* b_2 (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 c a) b_2) #s(literal 2 binary64)))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(*.f64 (neg.f64 b_2) (+.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 c a) b_2) #s(literal 2 binary64)) (*.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(*.f64 (neg.f64 b_2) (+.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 c a) b_2) #s(literal 2 binary64)) (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -1/16 binary64) (*.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64)))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a)))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 2 (/ 1 a))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 c b_2) (fma.f64 (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (/.f64 #s(literal 2 binary64) a))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 2 (/ 1 a)))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 c b_2) (fma.f64 (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -1/16 binary64) (/.f64 #s(literal 2 binary64) a)))))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 c a) b_2) #s(literal 1 binary64)))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(neg.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (*.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 c a) b_2))) b_2 b_2))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(neg.f64 (fma.f64 (fma.f64 (*.f64 (/.f64 a b_2) (/.f64 c b_2)) #s(literal -1/2 binary64) (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -1/16 binary64) (*.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64)))) b_2 b_2))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/2 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) (pow b_2 4)))))))","(*.f64 (neg.f64 b_2) (fma.f64 #s(literal -1/2 binary64) (fma.f64 (/.f64 a b_2) (/.f64 c b_2) (/.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) (*.f64 c c)) (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal 2 binary64)))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/2 (/ (+ (* -1 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))) (* 1/2 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))))) (pow b_2 6))) (* -1/2 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) (pow b_2 4))))))))","(*.f64 (neg.f64 b_2) (fma.f64 #s(literal -1/2 binary64) (fma.f64 (/.f64 a b_2) (/.f64 c b_2) (+.f64 (/.f64 (fma.f64 (*.f64 (*.f64 c a) (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) (*.f64 c c))) #s(literal 1/2 binary64) (*.f64 (*.f64 c a) #s(literal 0 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) (*.f64 c c)) (pow.f64 b_2 #s(literal 4 binary64))))) #s(literal 2 binary64)))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/2 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) (* a (pow b_2 4)))) (* 2 (/ 1 a))))))","(*.f64 (neg.f64 b_2) (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 c (*.f64 b_2 b_2)) (/.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) (*.f64 c c)) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) a))) (/.f64 #s(literal 2 binary64) a)))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/2 (/ (+ (* -1 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))) (* 1/2 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))))) (* a (pow b_2 6)))) (+ (* -1/2 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) (* a (pow b_2 4)))) (* 2 (/ 1 a)))))))","(*.f64 (neg.f64 b_2) (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 c (*.f64 b_2 b_2)) (/.f64 (fma.f64 (*.f64 (*.f64 c a) (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) (*.f64 c c))) #s(literal 1/2 binary64) (*.f64 (*.f64 c a) #s(literal 0 binary64))) (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) a))) (fma.f64 (/.f64 #s(literal -1/2 binary64) a) (/.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) (*.f64 c c)) (pow.f64 b_2 #s(literal 4 binary64))) (/.f64 #s(literal 2 binary64) a))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/2 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) (pow b_2 4)))))))","(*.f64 (neg.f64 b_2) (fma.f64 #s(literal -1/2 binary64) (fma.f64 (/.f64 a b_2) (/.f64 c b_2) (/.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) (*.f64 c c)) (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal 1 binary64)))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/2 (/ (+ (* -1 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))) (* 1/2 (* a (* c (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))))))) (pow b_2 6))) (* -1/2 (/ (+ (* -1 (* (pow a 2) (pow c 2))) (+ (* 1/4 (* (pow a 2) (pow c 2))) (* (pow a 2) (pow c 2)))) (pow b_2 4))))))))","(*.f64 (neg.f64 b_2) (fma.f64 #s(literal -1/2 binary64) (fma.f64 (/.f64 a b_2) (/.f64 c b_2) (+.f64 (/.f64 (fma.f64 (*.f64 (*.f64 c a) (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) (*.f64 c c))) #s(literal 1/2 binary64) (*.f64 (*.f64 c a) #s(literal 0 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) (*.f64 c c)) (pow.f64 b_2 #s(literal 4 binary64))))) #s(literal 1 binary64)))","(* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3)))))","(*.f64 (fma.f64 (*.f64 (*.f64 a a) (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1/8 binary64) (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c)","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64)))) #s(literal -1/16 binary64) (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 a a)) (pow.f64 b_2 #s(literal 3 binary64)))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c)","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow a 3) (pow b_2 5)))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 c (/.f64 (*.f64 (/.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal 5/64 binary64)) b_2)) #s(literal -1/2 binary64) (/.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 5 binary64)))) c (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 a a)) (pow.f64 b_2 #s(literal 3 binary64)))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c)","(* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (*.f64 a (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1/8 binary64) (/.f64 #s(literal -1/2 binary64) b_2)) c)","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 a a) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64)))) #s(literal -1/16 binary64) (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64))) c (/.f64 #s(literal -1/2 binary64) b_2)) c)","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) (* a b_2))) (* -1/16 (/ (pow a 2) (pow b_2 5))))))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) a) (*.f64 c (/.f64 (*.f64 (/.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal 5/64 binary64)) b_2)) (/.f64 (*.f64 #s(literal -1/16 binary64) (*.f64 a a)) (pow.f64 b_2 #s(literal 5 binary64)))) c (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64))) c (/.f64 #s(literal -1/2 binary64) b_2)) c)","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 a a) (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1/8 binary64) (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c b_2)","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64)))) #s(literal -1/16 binary64) (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 a a)) (pow.f64 b_2 #s(literal 3 binary64)))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c b_2)","(+ (* c (- (* -1 (* c (+ (* -1 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2))))) a)) (pow b_2 2))","(fma.f64 (-.f64 (*.f64 #s(literal 0 binary64) c) a) c (*.f64 b_2 b_2))","(+ (* c (- (* c (- (/ (* a (* c (+ (* -1 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2))))) (pow b_2 2)) (+ (* -1 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2))))) a)) (pow b_2 2))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 #s(literal 0 binary64) c) b_2) (/.f64 a b_2) #s(literal 0 binary64)) c (neg.f64 a)) c (*.f64 b_2 b_2))","(* c (+ (* -1/2 (/ a b_2)) (* -1/2 (/ (* c (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2))))) b_2))))","(*.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 c (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) b_2) (/.f64 (*.f64 a a) b_2)) b_2) (/.f64 a b_2))) c)","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/2 (/ (* c (+ (* -1 (/ (* a (+ (* -1 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) (pow b_2 2))) (* 1/2 (/ (* a (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2))))) (pow b_2 2))))) b_2)) (* -1/2 (/ (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) b_2))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 c (/.f64 (fma.f64 (*.f64 a (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) b_2) (/.f64 (*.f64 a a) b_2)) (*.f64 b_2 b_2))) #s(literal 1/2 binary64) (*.f64 (/.f64 #s(literal 0 binary64) b_2) (/.f64 a b_2))) b_2) (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) b_2) (/.f64 (*.f64 a a) b_2)) b_2))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c)","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/2 (/ (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) b_2)) (* c (+ (* -1/2 (/ (* c (+ (* -1 (/ (* (pow a 2) (+ (* -1 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) (pow b_2 4))) (+ (* 1/4 (/ (pow (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) 2) (pow b_2 2))) (+ (* 1/2 (/ (* a (+ (* -1 (/ (* a (+ (* -1 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) (pow b_2 2))) (* 1/2 (/ (* a (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2))))) (pow b_2 2))))) (pow b_2 2))) (/ (* (pow a 2) (+ (* -1 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) (pow b_2 4)))))) b_2)) (* -1/2 (/ (+ (* -1 (/ (* a (+ (* -1 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) (pow b_2 2))) (* 1/2 (/ (* a (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2))))) (pow b_2 2)))) b_2))))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 c (/.f64 (fma.f64 (*.f64 a a) (/.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal 1/4 binary64) b_2) (/.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) b_2) (/.f64 (*.f64 a a) b_2)) #s(literal 2 binary64)) b_2) (fma.f64 (*.f64 (/.f64 (fma.f64 (*.f64 a (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) b_2) (/.f64 (*.f64 a a) b_2)) (*.f64 b_2 b_2))) #s(literal 1/2 binary64) (*.f64 (/.f64 #s(literal 0 binary64) b_2) (/.f64 a b_2))) b_2) (/.f64 a b_2)) #s(literal 1/2 binary64) (*.f64 (*.f64 a a) (/.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 4 binary64))))))) b_2) (/.f64 (fma.f64 (*.f64 a (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) b_2) (/.f64 (*.f64 a a) b_2)) (*.f64 b_2 b_2))) #s(literal 1/2 binary64) (*.f64 (/.f64 #s(literal 0 binary64) b_2) (/.f64 a b_2))) b_2))) c (*.f64 (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) b_2) (/.f64 (*.f64 a a) b_2)) b_2) #s(literal -1/2 binary64))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c)","(* c (- (* -1/2 (/ (* c (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2))))) (* a b_2))) (* 1/2 (/ 1 b_2))))","(*.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 c (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) b_2) (/.f64 (*.f64 a a) b_2)) (*.f64 a b_2)) (/.f64 #s(literal 1 binary64) b_2))) c)","(* c (- (* c (+ (* -1/2 (/ (* c (+ (* -1 (/ (* a (+ (* -1 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) (pow b_2 2))) (* 1/2 (/ (* a (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2))))) (pow b_2 2))))) (* a b_2))) (* -1/2 (/ (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) (* a b_2))))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 (/.f64 (fma.f64 (*.f64 a (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) b_2) (/.f64 (*.f64 a a) b_2)) (*.f64 b_2 b_2))) #s(literal 1/2 binary64) (*.f64 (/.f64 #s(literal 0 binary64) b_2) (/.f64 a b_2))) a) (/.f64 c b_2) (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) b_2) (/.f64 (*.f64 a a) b_2)) (*.f64 a b_2)))) c (/.f64 #s(literal -1/2 binary64) b_2)) c)","(* c (- (* c (+ (* -1/2 (/ (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) (* a b_2))) (* c (+ (* -1/2 (/ (* c (+ (* -1 (/ (* (pow a 2) (+ (* -1 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) (pow b_2 4))) (+ (* 1/4 (/ (pow (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) 2) (pow b_2 2))) (+ (* 1/2 (/ (* a (+ (* -1 (/ (* a (+ (* -1 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) (pow b_2 2))) (* 1/2 (/ (* a (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2))))) (pow b_2 2))))) (pow b_2 2))) (/ (* (pow a 2) (+ (* -1 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) (pow b_2 4)))))) (* a b_2))) (* -1/2 (/ (+ (* -1 (/ (* a (+ (* -1 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) (pow b_2 2))) (* 1/2 (/ (* a (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2))))) (pow b_2 2)))) (* a b_2))))))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 (/.f64 (fma.f64 (*.f64 a a) (/.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal 1/4 binary64) b_2) (/.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) b_2) (/.f64 (*.f64 a a) b_2)) #s(literal 2 binary64)) b_2) (fma.f64 (*.f64 (/.f64 (fma.f64 (*.f64 a (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) b_2) (/.f64 (*.f64 a a) b_2)) (*.f64 b_2 b_2))) #s(literal 1/2 binary64) (*.f64 (/.f64 #s(literal 0 binary64) b_2) (/.f64 a b_2))) b_2) (/.f64 a b_2)) #s(literal 1/2 binary64) (*.f64 (*.f64 a a) (/.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 4 binary64))))))) a) (/.f64 c b_2) (/.f64 (fma.f64 (*.f64 a (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) b_2) (/.f64 (*.f64 a a) b_2)) (*.f64 b_2 b_2))) #s(literal 1/2 binary64) (*.f64 (/.f64 #s(literal 0 binary64) b_2) (/.f64 a b_2))) (*.f64 a b_2)))) c (*.f64 (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) b_2) (/.f64 (*.f64 a a) b_2)) (*.f64 a b_2)) #s(literal -1/2 binary64))) c (/.f64 #s(literal -1/2 binary64) b_2)) c)","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/2 (/ (* c (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2))))) b_2)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 c (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) b_2) (/.f64 (*.f64 a a) b_2)) b_2) (/.f64 a b_2))) c b_2)","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/2 (/ (* c (+ (* -1 (/ (* a (+ (* -1 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) (pow b_2 2))) (* 1/2 (/ (* a (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2))))) (pow b_2 2))))) b_2)) (* -1/2 (/ (+ (* -1 (/ (pow a 2) (pow b_2 2))) (+ (* 1/4 (/ (pow a 2) (pow b_2 2))) (/ (pow a 2) (pow b_2 2)))) b_2)))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 c (/.f64 (fma.f64 (*.f64 a (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) b_2) (/.f64 (*.f64 a a) b_2)) (*.f64 b_2 b_2))) #s(literal 1/2 binary64) (*.f64 (/.f64 #s(literal 0 binary64) b_2) (/.f64 a b_2))) b_2) (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) b_2) (/.f64 (*.f64 a a) b_2)) b_2))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c b_2)","(+ (* c (+ (* a (pow b_2 2)) (* (pow a 2) c))) (pow b_2 4))","(fma.f64 (fma.f64 (*.f64 a a) c (*.f64 (*.f64 b_2 b_2) a)) c (pow.f64 b_2 #s(literal 4 binary64)))","(* c (+ (* -1 a) (/ (pow b_2 2) c)))","(*.f64 (-.f64 (/.f64 (*.f64 b_2 b_2) c) a) c)","(* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 (neg.f64 c))) c)","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b_2 c)))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 (neg.f64 c)))) c)","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 (neg.f64 c))))) c)","(* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) (*.f64 c a))) c)","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (-.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -1 binary64)))) (/.f64 (/.f64 b_2 a) c)) c)","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(*.f64 (-.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -1 binary64))))) (/.f64 (/.f64 b_2 a) c)) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))) c)","(* c (+ (* -2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2)) c)","(* c (- (* 2 (/ 1 (* a c))) (* 1/2 (/ 1 (pow b_2 2)))))","(*.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 c a)) (/.f64 #s(literal 1/2 binary64) (*.f64 b_2 b_2))) c)","(* c (- (+ (* -1 a) (* -1 (/ (+ (* -1 (/ (pow b_2 4) a)) (/ (pow b_2 4) a)) (pow c 2)))) (* -1 (/ (pow b_2 2) c))))","(*.f64 (+.f64 (-.f64 (/.f64 #s(literal 0 binary64) (*.f64 c c)) a) (/.f64 (*.f64 b_2 b_2) c)) c)","(* c (- (+ (* -1 a) (/ (* (pow b_2 2) (+ (* -1 (/ (pow b_2 4) a)) (/ (pow b_2 4) a))) (* a (pow c 3)))) (+ (* -1 (/ (pow b_2 2) c)) (+ (* -1 (/ (pow b_2 4) (* a (pow c 2)))) (/ (pow b_2 4) (* a (pow c 2)))))))","(*.f64 (+.f64 (fma.f64 (/.f64 #s(literal 0 binary64) (pow.f64 c #s(literal 3 binary64))) (/.f64 (*.f64 b_2 b_2) a) (neg.f64 a)) (/.f64 (*.f64 b_2 b_2) c)) c)","(* c (- (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 5)))) (/ (+ (* -1 (/ (pow b_2 4) a)) (/ (pow b_2 4) a)) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(*.f64 (fma.f64 (*.f64 (/.f64 #s(literal 0 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 5 binary64)) a)))) #s(literal -1/2 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 (neg.f64 c))))) c)","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (+ (* -1 (/ (pow b_2 4) a)) (/ (pow b_2 4) a)) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(*.f64 (-.f64 (fma.f64 (*.f64 (/.f64 #s(literal 0 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal -1/2 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -1 binary64))))) (/.f64 (/.f64 b_2 a) c)) c)","(* c (- (/ (pow b_2 2) c) a))","(*.f64 (-.f64 (/.f64 (*.f64 b_2 b_2) c) a) c)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 5)))) (/ (+ (* -1 (/ (pow b_2 4) a)) (/ (pow b_2 4) a)) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (/.f64 #s(literal 0 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 5 binary64)) a)))) #s(literal -1/2 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) c)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 5)))) (/ (+ (* -1 (/ (pow b_2 4) a)) (/ (pow b_2 4) a)) (sqrt -1)))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 7)))) (/ (+ (* -1 (/ (* (pow b_2 2) (+ (* -1 (/ (pow b_2 4) a)) (/ (pow b_2 4) a))) a)) (* 1/4 (/ (* (pow b_2 4) c) (* a (pow (sqrt -1) 2))))) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 (/.f64 #s(literal 0 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 5 binary64)) a))) (*.f64 (/.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) c) a) #s(literal -1/4 binary64) (*.f64 (*.f64 (neg.f64 b_2) b_2) (/.f64 #s(literal 0 binary64) a))) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 7 binary64)) a))))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) c)","(* (pow c 2) (+ (/ (* a (pow b_2 2)) c) (pow a 2)))","(*.f64 (*.f64 a (+.f64 (/.f64 (*.f64 b_2 b_2) c) a)) (*.f64 c c))","(* (pow c 2) (+ (/ (* a (pow b_2 2)) c) (+ (/ (pow b_2 4) (pow c 2)) (pow a 2))))","(*.f64 (fma.f64 a (/.f64 (*.f64 b_2 b_2) c) (fma.f64 a a (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 c c)))) (*.f64 c c))","(* -1 (* c (+ a (* -1 (/ (pow b_2 2) c)))))","(*.f64 (-.f64 a (/.f64 (*.f64 b_2 b_2) c)) (neg.f64 c))","(* -1 (* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c)) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b_2 b_2)) (neg.f64 b_2)) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 c a))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b_2 b_2)))) (neg.f64 c)) b_2) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 a) c)) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/2 binary64) (/.f64 (neg.f64 b_2) a)) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64))))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b_2 b_2)))) (neg.f64 c)) (/.f64 b_2 a)) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))) (neg.f64 c))","(* -1 (* c (- (* 2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2)))))","(*.f64 (fma.f64 (/.f64 #s(literal 2 binary64) c) (/.f64 b_2 a) (/.f64 #s(literal -1/2 binary64) b_2)) (neg.f64 c))","(* -1 (* c (- (* 1/2 (/ 1 (pow b_2 2))) (* 2 (/ 1 (* a c))))))","(*.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 b_2 b_2)) (/.f64 #s(literal 2 binary64) (*.f64 c a))) (neg.f64 c))","(* -1 (* c (+ a (* -1 (/ (- (+ (* -1 (/ (pow b_2 4) (* a c))) (/ (pow b_2 4) (* a c))) (* -1 (pow b_2 2))) c)))))","(*.f64 (-.f64 a (/.f64 (*.f64 b_2 b_2) c)) (neg.f64 c))","(* -1 (* c (+ a (* -1 (/ (- (* -1 (/ (- (/ (* (pow b_2 2) (+ (* -1 (/ (pow b_2 4) a)) (/ (pow b_2 4) a))) (* a c)) (+ (* -1 (/ (pow b_2 4) a)) (/ (pow b_2 4) a))) c)) (* -1 (pow b_2 2))) c)))))","(*.f64 (-.f64 a (/.f64 (+.f64 (/.f64 (fma.f64 (/.f64 #s(literal 0 binary64) c) (/.f64 (*.f64 b_2 b_2) a) #s(literal 0 binary64)) (neg.f64 c)) (*.f64 b_2 b_2)) c)) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (* (sqrt -1) (+ (* -1 (/ (pow b_2 4) a)) (/ (pow b_2 4) a))))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 0 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c))))) (neg.f64 c)) b_2) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (sqrt -1) (+ (* -1 (/ (pow b_2 4) a)) (/ (pow b_2 4) a))))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 0 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))))) (neg.f64 c)) (/.f64 b_2 a)) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))","(*.f64 (-.f64 a (/.f64 (*.f64 b_2 b_2) c)) (neg.f64 c))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 5)))) (* (sqrt -1) (+ (* -1 (/ (pow b_2 4) a)) (/ (pow b_2 4) a))))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 0 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 5 binary64)) a))))) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ c a)) (* (sqrt -1) (+ (* -1 (/ (pow b_2 4) a)) (/ (pow b_2 4) a))))) (* 1/2 (* (sqrt (/ 1 (* a c))) (* (sqrt -1) (+ (* -1/4 (/ (* (pow b_2 4) c) a)) (/ (* (pow b_2 2) (+ (* -1 (/ (pow b_2 4) a)) (/ (pow b_2 4) a))) a)))))) (pow c 3))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (-.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) (/.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -1 binary64))) (fma.f64 (/.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) c) a) #s(literal -1/4 binary64) (/.f64 (*.f64 #s(literal 0 binary64) (*.f64 b_2 b_2)) a))) #s(literal 1/2 binary64) (*.f64 (*.f64 (*.f64 #s(literal 0 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a))) #s(literal -1/2 binary64))) (pow.f64 c #s(literal 3 binary64)))) (neg.f64 c))","(* (pow c 2) (+ (* -1 (/ (+ (* -1 (* a (pow b_2 2))) (* -1 (/ (pow b_2 4) c))) c)) (pow a 2)))","(*.f64 (fma.f64 a a (/.f64 (neg.f64 (fma.f64 (*.f64 b_2 b_2) a (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) c))) (neg.f64 c))) (*.f64 c c))"]],"stop":[["iter limit",1],["node limit",1]],"time":326.594970703125,"type":"simplify"},{"count":[[21,750]],"egraph":[[0,8353,254,0.084465153],[2,2512,254,0.047100013],[1,323,254,0.010717867],[0,83,334,0.003107035],[0,51,334,0.000494242]],"inputs":[["(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)","(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a))))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)))) a)","(neg.f64 b_2)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","(*.f64 #s(literal -2 binary64) (/.f64 b_2 a))","(/.f64 b_2 a)","(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 c b_2) b_2) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 c b_2) b_2) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a))))","(fma.f64 (/.f64 (/.f64 c b_2) b_2) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a))","(*.f64 (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))","(+.f64 (neg.f64 b_2) (sqrt.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))))) a)","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))","(/.f64 (/.f64 c b_2) b_2)","(sqrt.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))))","(fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))"]],"memory":[[2766816,62634544]],"outputs":[["(*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)","(*.f64 a (-.f64 (*.f64 (/.f64 b_2 a) b_2) c))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 a #s(literal -2 binary64)) (*.f64 (neg.f64 c) c)) a)) (neg.f64 (fma.f64 (/.f64 b_2 a) b_2 c)))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 a #s(literal -3 binary64)) (pow.f64 (neg.f64 c) #s(literal 3 binary64))) a)) (neg.f64 (fma.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 a #s(literal -2 binary64)) (*.f64 c (fma.f64 (/.f64 b_2 a) b_2 c)))))","(/.f64 (neg.f64 (*.f64 a (fma.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 a #s(literal -2 binary64)) (*.f64 (neg.f64 c) c)))) (neg.f64 (fma.f64 (/.f64 b_2 a) b_2 c)))","(/.f64 (neg.f64 (*.f64 a (fma.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 a #s(literal -3 binary64)) (pow.f64 (neg.f64 c) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 a #s(literal -2 binary64)) (*.f64 c (fma.f64 (/.f64 b_2 a) b_2 c)))))","(/.f64 (*.f64 (fma.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 a #s(literal -2 binary64)) (*.f64 (neg.f64 c) c)) a) (fma.f64 (/.f64 b_2 a) b_2 c))","(/.f64 (*.f64 (fma.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 a #s(literal -3 binary64)) (pow.f64 (neg.f64 c) #s(literal 3 binary64))) a) (fma.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 a #s(literal -2 binary64)) (*.f64 c (fma.f64 (/.f64 b_2 a) b_2 c))))","(/.f64 (*.f64 a (fma.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 a #s(literal -2 binary64)) (*.f64 (neg.f64 c) c))) (fma.f64 (/.f64 b_2 a) b_2 c))","(/.f64 (*.f64 a (fma.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 a #s(literal -3 binary64)) (pow.f64 (neg.f64 c) #s(literal 3 binary64)))) (fma.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 a #s(literal -2 binary64)) (*.f64 c (fma.f64 (/.f64 b_2 a) b_2 c))))","(fma.f64 (*.f64 (/.f64 b_2 a) b_2) a (*.f64 (neg.f64 c) a))","(fma.f64 a (*.f64 (/.f64 b_2 a) b_2) (*.f64 (neg.f64 c) a))","(+.f64 (*.f64 (*.f64 (/.f64 b_2 a) b_2) a) (*.f64 (neg.f64 c) a))","(+.f64 (*.f64 a (*.f64 (/.f64 b_2 a) b_2)) (*.f64 (neg.f64 c) a))","(*.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) (pow.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) #s(literal 3/2 binary64))) (pow.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))))) (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) (*.f64 b_2 b_2))) (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) (neg.f64 b_2))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))))) (neg.f64 (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))))))))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))))))","(/.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) (neg.f64 b_2)))","(/.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) #s(literal 3/2 binary64)))) (neg.f64 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) (-.f64 (*.f64 b_2 b_2) (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) (neg.f64 b_2))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))))))))","(/.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))))","(/.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) #s(literal 3/2 binary64))) (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) (-.f64 (*.f64 b_2 b_2) (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) (neg.f64 b_2)))))","(/.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) #s(literal 3/2 binary64))) (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))))) (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) #s(literal 3/2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))))) (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) #s(literal 3/2 binary64))))))","(fma.f64 (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (neg.f64 b_2))","(fma.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) #s(literal 1/4 binary64)) (neg.f64 b_2))","(fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))))","(fma.f64 b_2 #s(literal -1 binary64) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))))","(-.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) #s(literal 0 binary64)) b_2)","(-.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))))) (/.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))))))","(-.f64 #s(literal 0 binary64) (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))))","(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2)","(+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) (neg.f64 b_2))","(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))))","(*.f64 (pow.f64 (/.f64 a (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 a (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) #s(literal 3/2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2))","(*.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2)) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) a))","(*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) (pow.f64 a #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) (pow.f64 a #s(literal -1 binary64)))) (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) #s(literal 3/2 binary64))) (pow.f64 a #s(literal -1 binary64)))) (neg.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) #s(literal 1 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2)))) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) a)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) #s(literal 3/2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))))) a)))","(/.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) (pow.f64 a #s(literal -1 binary64))) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))))","(/.f64 (*.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) #s(literal 3/2 binary64))) (pow.f64 a #s(literal -1 binary64))) (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))))))","(/.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) #s(literal 1 binary64)) a)","(/.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (neg.f64 (*.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) #s(literal 3/2 binary64)))) (neg.f64 (*.f64 a (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))))))))","(/.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) #s(literal 1 binary64)) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) a))","(/.f64 (*.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) #s(literal 3/2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))))) a))","(/.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) (*.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))))))","(/.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) #s(literal 3/2 binary64))) (*.f64 a (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))))))))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2)) (neg.f64 a))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2))))","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) a)","(neg.f64 (/.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2)) a))","(neg.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) (neg.f64 a)))","(exp.f64 (*.f64 (log.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) b_2)","(*.f64 b_2 #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (*.f64 b_2 b_2))) (neg.f64 (+.f64 #s(literal 0 binary64) b_2)))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 b_2 b_2)) (+.f64 #s(literal 0 binary64) b_2))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))))","(neg.f64 b_2)","(-.f64 #s(literal 0 binary64) b_2)","(+.f64 #s(literal 0 binary64) (neg.f64 b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","(*.f64 (*.f64 (neg.f64 b_2) #s(literal 2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal 2 binary64) a) #s(literal -1 binary64)) b_2)","(*.f64 (*.f64 #s(literal -2 binary64) b_2) (pow.f64 a #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (*.f64 b_2 (/.f64 #s(literal 2 binary64) a)))","(*.f64 (/.f64 #s(literal 2 binary64) a) (neg.f64 b_2))","(*.f64 #s(literal 2 binary64) (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 b_2)))","(*.f64 #s(literal -2 binary64) (/.f64 b_2 a))","(*.f64 (neg.f64 b_2) (/.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(*.f64 b_2 (*.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal -2 binary64)))","(pow.f64 (/.f64 a (*.f64 #s(literal -2 binary64) b_2)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (neg.f64 b_2))) (neg.f64 (*.f64 a #s(literal 1/2 binary64))))","(/.f64 (neg.f64 (*.f64 #s(literal 2 binary64) (neg.f64 b_2))) (neg.f64 a))","(/.f64 (neg.f64 (*.f64 (neg.f64 b_2) #s(literal 1 binary64))) (neg.f64 (*.f64 a #s(literal 1/2 binary64))))","(/.f64 (neg.f64 (*.f64 (neg.f64 b_2) #s(literal -2 binary64))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 #s(literal -2 binary64) (neg.f64 b_2))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (neg.f64 b_2) #s(literal 2 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (neg.f64 (*.f64 #s(literal -2 binary64) b_2))) (neg.f64 (neg.f64 a)))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 b_2)) (*.f64 a #s(literal 1/2 binary64)))","(/.f64 (*.f64 #s(literal 2 binary64) (neg.f64 b_2)) a)","(/.f64 (*.f64 (neg.f64 b_2) #s(literal 1 binary64)) (*.f64 a #s(literal 1/2 binary64)))","(/.f64 (*.f64 (neg.f64 b_2) #s(literal -2 binary64)) (neg.f64 a))","(/.f64 (*.f64 #s(literal -2 binary64) (neg.f64 b_2)) (neg.f64 a))","(/.f64 (*.f64 (neg.f64 b_2) #s(literal 2 binary64)) a)","(/.f64 (neg.f64 (*.f64 #s(literal -2 binary64) b_2)) (neg.f64 a))","(/.f64 (neg.f64 (neg.f64 b_2)) (neg.f64 (*.f64 a #s(literal 1/2 binary64))))","(/.f64 (*.f64 #s(literal -2 binary64) b_2) a)","(/.f64 #s(literal 1 binary64) (/.f64 a (*.f64 #s(literal -2 binary64) b_2)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (*.f64 #s(literal -2 binary64) b_2))))","(/.f64 #s(literal 2 binary64) (neg.f64 (/.f64 a b_2)))","(/.f64 #s(literal -2 binary64) (/.f64 a b_2))","(/.f64 (neg.f64 b_2) (*.f64 a #s(literal 1/2 binary64)))","(neg.f64 (*.f64 (/.f64 #s(literal 2 binary64) a) b_2))","(neg.f64 (*.f64 b_2 (/.f64 #s(literal 2 binary64) a)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 b_2 #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) b_2)","(*.f64 #s(literal 1 binary64) (/.f64 b_2 a))","(*.f64 #s(literal -1 binary64) (/.f64 b_2 (neg.f64 a)))","(*.f64 (neg.f64 b_2) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 b_2 (pow.f64 a #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 a b_2) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 a b_2) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (neg.f64 b_2))) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 b_2 #s(literal 1 binary64))) (neg.f64 a))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 a)) (*.f64 (neg.f64 a) b_2)) (*.f64 a a))","(/.f64 (neg.f64 (neg.f64 b_2)) (neg.f64 (neg.f64 a)))","(/.f64 (*.f64 b_2 #s(literal 1 binary64)) a)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 a b_2))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a b_2) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 a b_2))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 a b_2) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a b_2)))","(/.f64 (neg.f64 b_2) (neg.f64 a))","(/.f64 b_2 a)","(neg.f64 (/.f64 (neg.f64 b_2) a))","(neg.f64 (/.f64 b_2 (neg.f64 a)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 a)) (/.f64 b_2 (neg.f64 a)))","(exp.f64 (*.f64 (log.f64 (/.f64 a b_2)) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (pow.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64))) (pow.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))) (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) (*.f64 b_2 b_2))) (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (neg.f64 b_2))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) (neg.f64 (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))))))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))))","(/.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (neg.f64 b_2)))","(/.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)))) (neg.f64 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) (-.f64 (*.f64 b_2 b_2) (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (neg.f64 b_2))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))))))","(/.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(/.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64))) (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) (-.f64 (*.f64 b_2 b_2) (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (neg.f64 b_2)))))","(/.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64))) (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))) (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))) (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64))))))","(fma.f64 (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) (neg.f64 b_2))","(fma.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) (neg.f64 b_2))","(fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))","(fma.f64 b_2 #s(literal -1 binary64) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))","(-.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) #s(literal 0 binary64)) b_2)","(-.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) (/.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))))","(-.f64 #s(literal 0 binary64) (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2)","(+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (neg.f64 b_2))","(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))","(*.f64 (pow.f64 (/.f64 a (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 a (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2))","(*.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2)) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2) a))","(*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2) (pow.f64 a #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (pow.f64 a #s(literal -1 binary64)))) (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64))) (pow.f64 a #s(literal -1 binary64)))) (neg.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2) #s(literal 1 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2)))) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))) a)))","(/.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (pow.f64 a #s(literal -1 binary64))) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(/.f64 (*.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64))) (pow.f64 a #s(literal -1 binary64))) (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))))","(/.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2) #s(literal 1 binary64)) a)","(/.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) (neg.f64 (*.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)))) (neg.f64 (*.f64 a (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))))))","(/.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) #s(literal 1 binary64)) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a))","(/.f64 (*.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))) a))","(/.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (*.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))))","(/.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64))) (*.f64 a (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))))))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2)) (neg.f64 a))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2))))","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2) a)","(neg.f64 (/.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2)) a))","(neg.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2) (neg.f64 a)))","(exp.f64 (*.f64 (log.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2))) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(*.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 1/4 binary64)))","(pow.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) #s(literal 1 binary64))","(pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))","(fabs.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))","(exp.f64 (log.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(*.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2) (/.f64 #s(literal 2 binary64) a)) #s(literal -1 binary64)) b_2)","(*.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2) (/.f64 #s(literal 2 binary64) a)) b_2))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2) (/.f64 #s(literal 2 binary64) a)) (neg.f64 b_2))","(*.f64 (neg.f64 b_2) (fma.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2) (/.f64 #s(literal 2 binary64) a)))","(*.f64 b_2 (neg.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2) (/.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))) (neg.f64 b_2))) (neg.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)) (/.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 (*.f64 (/.f64 b_2 c) b_2) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) a) #s(literal 3 binary64))) (neg.f64 b_2))) (neg.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 b_2 c) b_2) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (/.f64 #s(literal 2 binary64) a) (-.f64 (/.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)))))))","(/.f64 (neg.f64 (*.f64 (neg.f64 b_2) (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))) (neg.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)) (/.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (neg.f64 b_2) (fma.f64 #s(literal -1/8 binary64) (pow.f64 (*.f64 (/.f64 b_2 c) b_2) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) a) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 b_2 c) b_2) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (/.f64 #s(literal 2 binary64) a) (-.f64 (/.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 b_2) #s(literal -1/2 binary64)) (/.f64 (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b_2) #s(literal -1/2 binary64)) (/.f64 (/.f64 c b_2) b_2)) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (neg.f64 b_2) (/.f64 (/.f64 c b_2) b_2)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -8 binary64) (pow.f64 (/.f64 a b_2) #s(literal -3 binary64))))) (neg.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 b_2) #s(literal -1/2 binary64)) (/.f64 (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (neg.f64 b_2) #s(literal -1/2 binary64)) (/.f64 (/.f64 c b_2) b_2)) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (neg.f64 b_2)) b_2 (*.f64 (*.f64 a #s(literal 1/2 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)) (neg.f64 b_2)))) (*.f64 (*.f64 a #s(literal 1/2 binary64)) b_2))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (neg.f64 b_2)) b_2 (*.f64 (*.f64 a #s(literal 1/2 binary64)) (*.f64 (neg.f64 b_2) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))))) (*.f64 (*.f64 a #s(literal 1/2 binary64)) b_2))","(/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (neg.f64 b_2)) b_2 (*.f64 a (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)) (neg.f64 b_2)))) (*.f64 a b_2))","(/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (neg.f64 b_2)) b_2 (*.f64 a (*.f64 (neg.f64 b_2) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))))) (*.f64 a b_2))","(/.f64 (fma.f64 (*.f64 (neg.f64 b_2) #s(literal 1 binary64)) b_2 (*.f64 (*.f64 a #s(literal 1/2 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)) (neg.f64 b_2)))) (*.f64 (*.f64 a #s(literal 1/2 binary64)) b_2))","(/.f64 (fma.f64 (*.f64 (neg.f64 b_2) #s(literal 1 binary64)) b_2 (*.f64 (*.f64 a #s(literal 1/2 binary64)) (*.f64 (neg.f64 b_2) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))))) (*.f64 (*.f64 a #s(literal 1/2 binary64)) b_2))","(/.f64 (fma.f64 (*.f64 (neg.f64 b_2) #s(literal -2 binary64)) b_2 (*.f64 (neg.f64 a) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)) (neg.f64 b_2)))) (*.f64 (neg.f64 a) b_2))","(/.f64 (fma.f64 (*.f64 (neg.f64 b_2) #s(literal -2 binary64)) b_2 (*.f64 (neg.f64 a) (*.f64 (neg.f64 b_2) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))))) (*.f64 (neg.f64 a) b_2))","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (neg.f64 b_2)) b_2 (*.f64 (neg.f64 a) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)) (neg.f64 b_2)))) (*.f64 (neg.f64 a) b_2))","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (neg.f64 b_2)) b_2 (*.f64 (neg.f64 a) (*.f64 (neg.f64 b_2) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))))) (*.f64 (neg.f64 a) b_2))","(/.f64 (fma.f64 (*.f64 (neg.f64 b_2) #s(literal 2 binary64)) b_2 (*.f64 a (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)) (neg.f64 b_2)))) (*.f64 a b_2))","(/.f64 (fma.f64 (*.f64 (neg.f64 b_2) #s(literal 2 binary64)) b_2 (*.f64 a (*.f64 (neg.f64 b_2) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))))) (*.f64 a b_2))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -2 binary64) b_2)) b_2 (*.f64 (neg.f64 a) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)) (neg.f64 b_2)))) (*.f64 (neg.f64 a) b_2))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -2 binary64) b_2)) b_2 (*.f64 (neg.f64 a) (*.f64 (neg.f64 b_2) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))))) (*.f64 (neg.f64 a) b_2))","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) b_2) b_2 (*.f64 a (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)) (neg.f64 b_2)))) (*.f64 a b_2))","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) b_2) b_2 (*.f64 a (*.f64 (neg.f64 b_2) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))))) (*.f64 a b_2))","(/.f64 (fma.f64 #s(literal 1 binary64) b_2 (*.f64 (/.f64 a (*.f64 #s(literal -2 binary64) b_2)) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)) (neg.f64 b_2)))) (*.f64 (/.f64 a (*.f64 #s(literal -2 binary64) b_2)) b_2))","(/.f64 (fma.f64 #s(literal 1 binary64) b_2 (*.f64 (/.f64 a (*.f64 #s(literal -2 binary64) b_2)) (*.f64 (neg.f64 b_2) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))))) (*.f64 (/.f64 a (*.f64 #s(literal -2 binary64) b_2)) b_2))","(/.f64 (fma.f64 #s(literal -2 binary64) b_2 (*.f64 (/.f64 a b_2) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)) (neg.f64 b_2)))) (*.f64 (/.f64 a b_2) b_2))","(/.f64 (fma.f64 #s(literal -2 binary64) b_2 (*.f64 (/.f64 a b_2) (*.f64 (neg.f64 b_2) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))))) (*.f64 (/.f64 a b_2) b_2))","(/.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 (*.f64 a #s(literal 1/2 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)) (neg.f64 b_2)))) (*.f64 (*.f64 a #s(literal 1/2 binary64)) b_2))","(/.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 (*.f64 a #s(literal 1/2 binary64)) (*.f64 (neg.f64 b_2) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))))) (*.f64 (*.f64 a #s(literal 1/2 binary64)) b_2))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)) (neg.f64 b_2)) (*.f64 a #s(literal 1/2 binary64)) (*.f64 b_2 (*.f64 #s(literal 1 binary64) (neg.f64 b_2)))) (*.f64 b_2 (*.f64 a #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)) (neg.f64 b_2)) a (*.f64 b_2 (*.f64 #s(literal 2 binary64) (neg.f64 b_2)))) (*.f64 b_2 a))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)) (neg.f64 b_2)) (*.f64 a #s(literal 1/2 binary64)) (*.f64 b_2 (*.f64 (neg.f64 b_2) #s(literal 1 binary64)))) (*.f64 b_2 (*.f64 a #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)) (neg.f64 b_2)) (neg.f64 a) (*.f64 b_2 (*.f64 (neg.f64 b_2) #s(literal -2 binary64)))) (*.f64 b_2 (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)) (neg.f64 b_2)) (neg.f64 a) (*.f64 b_2 (*.f64 #s(literal -2 binary64) (neg.f64 b_2)))) (*.f64 b_2 (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)) (neg.f64 b_2)) a (*.f64 b_2 (*.f64 (neg.f64 b_2) #s(literal 2 binary64)))) (*.f64 b_2 a))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)) (neg.f64 b_2)) (neg.f64 a) (*.f64 b_2 (neg.f64 (*.f64 #s(literal -2 binary64) b_2)))) (*.f64 b_2 (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)) (neg.f64 b_2)) a (*.f64 b_2 (*.f64 #s(literal -2 binary64) b_2))) (*.f64 b_2 a))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)) (neg.f64 b_2)) (/.f64 a (*.f64 #s(literal -2 binary64) b_2)) (*.f64 b_2 #s(literal 1 binary64))) (*.f64 b_2 (/.f64 a (*.f64 #s(literal -2 binary64) b_2))))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)) (neg.f64 b_2)) (/.f64 a b_2) (*.f64 #s(literal -2 binary64) b_2)) (*.f64 b_2 (/.f64 a b_2)))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)) (neg.f64 b_2)) (*.f64 a #s(literal 1/2 binary64)) (*.f64 b_2 (neg.f64 b_2))) (*.f64 b_2 (*.f64 a #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 b_2) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) (*.f64 a #s(literal 1/2 binary64)) (*.f64 b_2 (*.f64 #s(literal 1 binary64) (neg.f64 b_2)))) (*.f64 b_2 (*.f64 a #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 b_2) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) a (*.f64 b_2 (*.f64 #s(literal 2 binary64) (neg.f64 b_2)))) (*.f64 b_2 a))","(/.f64 (fma.f64 (*.f64 (neg.f64 b_2) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) (*.f64 a #s(literal 1/2 binary64)) (*.f64 b_2 (*.f64 (neg.f64 b_2) #s(literal 1 binary64)))) (*.f64 b_2 (*.f64 a #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 b_2) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) (neg.f64 a) (*.f64 b_2 (*.f64 (neg.f64 b_2) #s(literal -2 binary64)))) (*.f64 b_2 (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (neg.f64 b_2) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) (neg.f64 a) (*.f64 b_2 (*.f64 #s(literal -2 binary64) (neg.f64 b_2)))) (*.f64 b_2 (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (neg.f64 b_2) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) a (*.f64 b_2 (*.f64 (neg.f64 b_2) #s(literal 2 binary64)))) (*.f64 b_2 a))","(/.f64 (fma.f64 (*.f64 (neg.f64 b_2) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) (neg.f64 a) (*.f64 b_2 (neg.f64 (*.f64 #s(literal -2 binary64) b_2)))) (*.f64 b_2 (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (neg.f64 b_2) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) a (*.f64 b_2 (*.f64 #s(literal -2 binary64) b_2))) (*.f64 b_2 a))","(/.f64 (fma.f64 (*.f64 (neg.f64 b_2) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) (/.f64 a (*.f64 #s(literal -2 binary64) b_2)) (*.f64 b_2 #s(literal 1 binary64))) (*.f64 b_2 (/.f64 a (*.f64 #s(literal -2 binary64) b_2))))","(/.f64 (fma.f64 (*.f64 (neg.f64 b_2) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) (/.f64 a b_2) (*.f64 #s(literal -2 binary64) b_2)) (*.f64 b_2 (/.f64 a b_2)))","(/.f64 (fma.f64 (*.f64 (neg.f64 b_2) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) (*.f64 a #s(literal 1/2 binary64)) (*.f64 b_2 (neg.f64 b_2))) (*.f64 b_2 (*.f64 a #s(literal 1/2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))) (neg.f64 b_2)) (-.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)) (/.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 (*.f64 (/.f64 b_2 c) b_2) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) a) #s(literal 3 binary64))) (neg.f64 b_2)) (fma.f64 (pow.f64 (*.f64 (/.f64 b_2 c) b_2) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (/.f64 #s(literal 2 binary64) a) (-.f64 (/.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2))))))","(/.f64 (*.f64 (neg.f64 b_2) (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))) (-.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)) (/.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (neg.f64 b_2) (fma.f64 #s(literal -1/8 binary64) (pow.f64 (*.f64 (/.f64 b_2 c) b_2) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) a) #s(literal 3 binary64)))) (fma.f64 (pow.f64 (*.f64 (/.f64 b_2 c) b_2) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (/.f64 #s(literal 2 binary64) a) (-.f64 (/.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 b_2) #s(literal -1/2 binary64)) (/.f64 (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)) #s(literal 2 binary64))) (-.f64 (*.f64 (*.f64 (neg.f64 b_2) #s(literal -1/2 binary64)) (/.f64 (/.f64 c b_2) b_2)) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (neg.f64 b_2) (/.f64 (/.f64 c b_2) b_2)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -8 binary64) (pow.f64 (/.f64 a b_2) #s(literal -3 binary64)))) (+.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 b_2) #s(literal -1/2 binary64)) (/.f64 (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (neg.f64 b_2) #s(literal -1/2 binary64)) (/.f64 (/.f64 c b_2) b_2)) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))))))","(neg.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2) (/.f64 #s(literal 2 binary64) a)) b_2))","(fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)) #s(literal -1 binary64)) b_2 (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","(fma.f64 (*.f64 (neg.f64 b_2) #s(literal 2 binary64)) (pow.f64 a #s(literal -1 binary64)) (*.f64 (*.f64 (neg.f64 b_2) #s(literal -1/2 binary64)) (/.f64 (/.f64 c b_2) b_2)))","(fma.f64 (*.f64 (neg.f64 b_2) #s(literal -1/2 binary64)) (/.f64 (/.f64 c b_2) b_2) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","(fma.f64 (*.f64 (neg.f64 b_2) (/.f64 (/.f64 c b_2) b_2)) #s(literal -1/2 binary64) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","(fma.f64 (*.f64 (/.f64 #s(literal 2 binary64) a) #s(literal -1 binary64)) b_2 (*.f64 (*.f64 (neg.f64 b_2) #s(literal -1/2 binary64)) (/.f64 (/.f64 c b_2) b_2)))","(fma.f64 (*.f64 #s(literal -2 binary64) b_2) (pow.f64 a #s(literal -1 binary64)) (*.f64 (*.f64 (neg.f64 b_2) #s(literal -1/2 binary64)) (/.f64 (/.f64 c b_2) b_2)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)) (neg.f64 b_2) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","(fma.f64 #s(literal -1 binary64) (*.f64 b_2 (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2))) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","(fma.f64 #s(literal -1 binary64) (*.f64 b_2 (/.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 (neg.f64 b_2) #s(literal -1/2 binary64)) (/.f64 (/.f64 c b_2) b_2)))","(fma.f64 (/.f64 #s(literal 2 binary64) a) (neg.f64 b_2) (*.f64 (*.f64 (neg.f64 b_2) #s(literal -1/2 binary64)) (/.f64 (/.f64 c b_2) b_2)))","(fma.f64 #s(literal 2 binary64) (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 b_2)) (*.f64 (*.f64 (neg.f64 b_2) #s(literal -1/2 binary64)) (/.f64 (/.f64 c b_2) b_2)))","(fma.f64 #s(literal -1/2 binary64) (*.f64 (/.f64 (/.f64 c b_2) b_2) (neg.f64 b_2)) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","(fma.f64 (/.f64 (/.f64 c b_2) b_2) (*.f64 #s(literal -1/2 binary64) (neg.f64 b_2)) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","(fma.f64 #s(literal -2 binary64) (/.f64 b_2 a) (*.f64 (*.f64 (neg.f64 b_2) #s(literal -1/2 binary64)) (/.f64 (/.f64 c b_2) b_2)))","(fma.f64 (neg.f64 b_2) (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","(fma.f64 (neg.f64 b_2) (/.f64 #s(literal 2 binary64) a) (*.f64 (*.f64 (neg.f64 b_2) #s(literal -1/2 binary64)) (/.f64 (/.f64 c b_2) b_2)))","(fma.f64 (/.f64 b_2 a) #s(literal -2 binary64) (*.f64 (*.f64 (neg.f64 b_2) #s(literal -1/2 binary64)) (/.f64 (/.f64 c b_2) b_2)))","(fma.f64 b_2 (*.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal -2 binary64)) (*.f64 (*.f64 (neg.f64 b_2) #s(literal -1/2 binary64)) (/.f64 (/.f64 c b_2) b_2)))","(-.f64 #s(literal 0 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2) (/.f64 #s(literal 2 binary64) a)) b_2))","(+.f64 (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)) (*.f64 (*.f64 (neg.f64 b_2) #s(literal -1/2 binary64)) (/.f64 (/.f64 c b_2) b_2)))","(+.f64 (*.f64 (*.f64 (neg.f64 b_2) #s(literal -1/2 binary64)) (/.f64 (/.f64 c b_2) b_2)) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2) (/.f64 #s(literal 2 binary64) a)) (neg.f64 b_2)))","(*.f64 (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))) (pow.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)) (/.f64 #s(literal 2 binary64) a)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 (*.f64 (/.f64 b_2 c) b_2) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) a) #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 b_2 c) b_2) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (/.f64 #s(literal 2 binary64) a) (-.f64 (/.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2))))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)) (/.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 b_2 c) b_2) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (/.f64 #s(literal 2 binary64) a) (-.f64 (/.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2))))) (fma.f64 #s(literal -1/8 binary64) (pow.f64 (*.f64 (/.f64 b_2 c) b_2) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) a) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)) (/.f64 #s(literal 2 binary64) a)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 (*.f64 (/.f64 b_2 c) b_2) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) a) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 b_2 c) b_2) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (/.f64 #s(literal 2 binary64) a) (-.f64 (/.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2))))))))","(/.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)) (*.f64 a #s(literal 1/2 binary64)) (*.f64 b_2 #s(literal 1 binary64)))) (neg.f64 (*.f64 b_2 (*.f64 a #s(literal 1/2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)) a (*.f64 b_2 #s(literal 2 binary64)))) (neg.f64 (*.f64 b_2 a)))","(/.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)) (neg.f64 a) (*.f64 #s(literal -2 binary64) b_2))) (neg.f64 (*.f64 b_2 (neg.f64 a))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) b_2 (*.f64 (*.f64 a #s(literal 1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))))) (neg.f64 (*.f64 (*.f64 a #s(literal 1/2 binary64)) b_2)))","(/.f64 (neg.f64 (fma.f64 #s(literal 2 binary64) b_2 (*.f64 a (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))))) (neg.f64 (*.f64 a b_2)))","(/.f64 (neg.f64 (fma.f64 #s(literal -2 binary64) b_2 (*.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))))) (neg.f64 (*.f64 (neg.f64 a) b_2)))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)) (/.f64 #s(literal 2 binary64) a))) (*.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)) (/.f64 #s(literal 2 binary64) a)) (pow.f64 (/.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))) (*.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)) (/.f64 #s(literal 2 binary64) a)) (-.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)) (/.f64 #s(literal 2 binary64) a))))","(/.f64 (fma.f64 (*.f64 (/.f64 (neg.f64 c) b_2) #s(literal -1/2 binary64)) (/.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 b_2) #s(literal 1 binary64))) (*.f64 (neg.f64 b_2) (/.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (/.f64 (neg.f64 c) b_2) #s(literal -1/2 binary64)) (*.f64 a #s(literal 1/2 binary64)) (*.f64 (neg.f64 b_2) #s(literal 1 binary64))) (*.f64 (neg.f64 b_2) (*.f64 a #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (*.f64 (/.f64 (neg.f64 c) b_2) #s(literal -1/2 binary64)) (neg.f64 (*.f64 a #s(literal 1/2 binary64))) (*.f64 (neg.f64 b_2) #s(literal -1 binary64))) (*.f64 (neg.f64 b_2) (neg.f64 (*.f64 a #s(literal 1/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (/.f64 (neg.f64 c) b_2) #s(literal -1/2 binary64)) (neg.f64 (neg.f64 a)) (*.f64 (neg.f64 b_2) #s(literal 2 binary64))) (*.f64 (neg.f64 b_2) (neg.f64 (neg.f64 a))))","(/.f64 (fma.f64 (*.f64 (/.f64 (neg.f64 c) b_2) #s(literal -1/2 binary64)) a (*.f64 (neg.f64 b_2) #s(literal 2 binary64))) (*.f64 (neg.f64 b_2) a))","(/.f64 (fma.f64 (*.f64 (/.f64 (neg.f64 c) b_2) #s(literal -1/2 binary64)) (neg.f64 a) (*.f64 (neg.f64 b_2) #s(literal -2 binary64))) (*.f64 (neg.f64 b_2) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 c #s(literal -1/2 binary64)) (/.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 1 binary64)) (*.f64 b_2 b_2)) (*.f64 (*.f64 b_2 b_2) (/.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 c #s(literal -1/2 binary64)) (*.f64 a #s(literal 1/2 binary64)) (*.f64 b_2 b_2)) (*.f64 (*.f64 b_2 b_2) (*.f64 a #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (*.f64 c #s(literal -1/2 binary64)) (neg.f64 (*.f64 a #s(literal 1/2 binary64))) (*.f64 (*.f64 b_2 b_2) #s(literal -1 binary64))) (*.f64 (*.f64 b_2 b_2) (neg.f64 (*.f64 a #s(literal 1/2 binary64)))))","(/.f64 (fma.f64 (*.f64 c #s(literal -1/2 binary64)) (neg.f64 (neg.f64 a)) (*.f64 (*.f64 b_2 b_2) #s(literal 2 binary64))) (*.f64 (*.f64 b_2 b_2) (neg.f64 (neg.f64 a))))","(/.f64 (fma.f64 (*.f64 c #s(literal -1/2 binary64)) a (*.f64 (*.f64 b_2 b_2) #s(literal 2 binary64))) (*.f64 (*.f64 b_2 b_2) a))","(/.f64 (fma.f64 (*.f64 c #s(literal -1/2 binary64)) (neg.f64 a) (*.f64 (*.f64 b_2 b_2) #s(literal -2 binary64))) (*.f64 (*.f64 b_2 b_2) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (neg.f64 c) b_2)) (/.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 b_2) #s(literal 1 binary64))) (*.f64 (neg.f64 b_2) (/.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (neg.f64 c) b_2)) (*.f64 a #s(literal 1/2 binary64)) (*.f64 (neg.f64 b_2) #s(literal 1 binary64))) (*.f64 (neg.f64 b_2) (*.f64 a #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (neg.f64 c) b_2)) (neg.f64 (*.f64 a #s(literal 1/2 binary64))) (*.f64 (neg.f64 b_2) #s(literal -1 binary64))) (*.f64 (neg.f64 b_2) (neg.f64 (*.f64 a #s(literal 1/2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (neg.f64 c) b_2)) (neg.f64 (neg.f64 a)) (*.f64 (neg.f64 b_2) #s(literal 2 binary64))) (*.f64 (neg.f64 b_2) (neg.f64 (neg.f64 a))))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (neg.f64 c) b_2)) a (*.f64 (neg.f64 b_2) #s(literal 2 binary64))) (*.f64 (neg.f64 b_2) a))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (neg.f64 c) b_2)) (neg.f64 a) (*.f64 (neg.f64 b_2) #s(literal -2 binary64))) (*.f64 (neg.f64 b_2) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 1 binary64)) (*.f64 b_2 b_2)) (*.f64 (*.f64 b_2 b_2) (/.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 a #s(literal 1/2 binary64)) (*.f64 b_2 b_2)) (*.f64 (*.f64 b_2 b_2) (*.f64 a #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (neg.f64 (*.f64 a #s(literal 1/2 binary64))) (*.f64 (*.f64 b_2 b_2) #s(literal -1 binary64))) (*.f64 (*.f64 b_2 b_2) (neg.f64 (*.f64 a #s(literal 1/2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (neg.f64 (neg.f64 a)) (*.f64 (*.f64 b_2 b_2) #s(literal 2 binary64))) (*.f64 (*.f64 b_2 b_2) (neg.f64 (neg.f64 a))))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) c) a (*.f64 (*.f64 b_2 b_2) #s(literal 2 binary64))) (*.f64 (*.f64 b_2 b_2) a))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (neg.f64 a) (*.f64 (*.f64 b_2 b_2) #s(literal -2 binary64))) (*.f64 (*.f64 b_2 b_2) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) (/.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 b_2) #s(literal 1 binary64))) (*.f64 (neg.f64 b_2) (/.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) (*.f64 a #s(literal 1/2 binary64)) (*.f64 (neg.f64 b_2) #s(literal 1 binary64))) (*.f64 (neg.f64 b_2) (*.f64 a #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) (neg.f64 (*.f64 a #s(literal 1/2 binary64))) (*.f64 (neg.f64 b_2) #s(literal -1 binary64))) (*.f64 (neg.f64 b_2) (neg.f64 (*.f64 a #s(literal 1/2 binary64)))))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) (neg.f64 (neg.f64 a)) (*.f64 (neg.f64 b_2) #s(literal 2 binary64))) (*.f64 (neg.f64 b_2) (neg.f64 (neg.f64 a))))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) a (*.f64 (neg.f64 b_2) #s(literal 2 binary64))) (*.f64 (neg.f64 b_2) a))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) (neg.f64 a) (*.f64 (neg.f64 b_2) #s(literal -2 binary64))) (*.f64 (neg.f64 b_2) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)) (/.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 1 binary64)) (*.f64 b_2 #s(literal 1 binary64))) (*.f64 b_2 (/.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)) (neg.f64 (*.f64 a #s(literal 1/2 binary64))) (neg.f64 b_2)) (*.f64 b_2 (neg.f64 (*.f64 a #s(literal 1/2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)) (neg.f64 (neg.f64 a)) (*.f64 b_2 #s(literal 2 binary64))) (*.f64 b_2 (neg.f64 (neg.f64 a))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) #s(literal 1 binary64))) (*.f64 (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) (/.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 a #s(literal 1/2 binary64)) (*.f64 (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) #s(literal 1 binary64))) (*.f64 (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) (*.f64 a #s(literal 1/2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (*.f64 a #s(literal 1/2 binary64))) (*.f64 (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) #s(literal -1 binary64))) (*.f64 (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) (neg.f64 (*.f64 a #s(literal 1/2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 a)) (*.f64 (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) #s(literal 2 binary64))) (*.f64 (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) (neg.f64 (neg.f64 a))))","(/.f64 (fma.f64 #s(literal 1 binary64) a (*.f64 (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) #s(literal 2 binary64))) (*.f64 (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) a))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) #s(literal -2 binary64))) (*.f64 (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (/.f64 b_2 c) b_2) #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 b_2 c) b_2) (/.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 a #s(literal 1/2 binary64)) (*.f64 (*.f64 (/.f64 b_2 c) b_2) #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 b_2 c) b_2) (*.f64 a #s(literal 1/2 binary64))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (neg.f64 (*.f64 a #s(literal 1/2 binary64))) (*.f64 (*.f64 (/.f64 b_2 c) b_2) #s(literal -1 binary64))) (*.f64 (*.f64 (/.f64 b_2 c) b_2) (neg.f64 (*.f64 a #s(literal 1/2 binary64)))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (neg.f64 (neg.f64 a)) (*.f64 (*.f64 (/.f64 b_2 c) b_2) #s(literal 2 binary64))) (*.f64 (*.f64 (/.f64 b_2 c) b_2) (neg.f64 (neg.f64 a))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) a (*.f64 (*.f64 (/.f64 b_2 c) b_2) #s(literal 2 binary64))) (*.f64 (*.f64 (/.f64 b_2 c) b_2) a))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (neg.f64 a) (*.f64 (*.f64 (/.f64 b_2 c) b_2) #s(literal -2 binary64))) (*.f64 (*.f64 (/.f64 b_2 c) b_2) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 b_2) (*.f64 (/.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 (neg.f64 c) b_2) #s(literal -1/2 binary64)))) (*.f64 (/.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 1 binary64)) (neg.f64 b_2)))","(/.f64 (fma.f64 b_2 b_2 (*.f64 (/.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 1 binary64)) (*.f64 c #s(literal -1/2 binary64)))) (*.f64 (/.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 1 binary64)) (*.f64 b_2 b_2)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 b_2) (*.f64 (/.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 (neg.f64 c) b_2)))) (*.f64 (/.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 1 binary64)) (neg.f64 b_2)))","(/.f64 (fma.f64 b_2 b_2 (*.f64 (/.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal -1/2 binary64) c))) (*.f64 (/.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 1 binary64)) (*.f64 b_2 b_2)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 b_2) (*.f64 (/.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 1 binary64)) (neg.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))))) (*.f64 (/.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 1 binary64)) (neg.f64 b_2)))","(/.f64 (fma.f64 #s(literal 1 binary64) b_2 (*.f64 (/.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))) (*.f64 (/.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 1 binary64)) b_2))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) (*.f64 (/.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 1 binary64)) (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (/.f64 b_2 c) b_2) (*.f64 (/.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 1 binary64)) #s(literal -1/2 binary64))) (*.f64 (/.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 b_2 c) b_2)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 b_2) (*.f64 (*.f64 a #s(literal 1/2 binary64)) (*.f64 (/.f64 (neg.f64 c) b_2) #s(literal -1/2 binary64)))) (*.f64 (*.f64 a #s(literal 1/2 binary64)) (neg.f64 b_2)))","(/.f64 (fma.f64 b_2 b_2 (*.f64 (*.f64 a #s(literal 1/2 binary64)) (*.f64 c #s(literal -1/2 binary64)))) (*.f64 (*.f64 a #s(literal 1/2 binary64)) (*.f64 b_2 b_2)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 b_2) (*.f64 (*.f64 a #s(literal 1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 (neg.f64 c) b_2)))) (*.f64 (*.f64 a #s(literal 1/2 binary64)) (neg.f64 b_2)))","(/.f64 (fma.f64 b_2 b_2 (*.f64 (*.f64 a #s(literal 1/2 binary64)) (*.f64 #s(literal -1/2 binary64) c))) (*.f64 (*.f64 a #s(literal 1/2 binary64)) (*.f64 b_2 b_2)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 b_2) (*.f64 (*.f64 a #s(literal 1/2 binary64)) (neg.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))))) (*.f64 (*.f64 a #s(literal 1/2 binary64)) (neg.f64 b_2)))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) (*.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 a #s(literal 1/2 binary64)) (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (/.f64 b_2 c) b_2) (*.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal -1/2 binary64))) (*.f64 (*.f64 a #s(literal 1/2 binary64)) (*.f64 (/.f64 b_2 c) b_2)))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 b_2) (*.f64 (neg.f64 (*.f64 a #s(literal 1/2 binary64))) (*.f64 (/.f64 (neg.f64 c) b_2) #s(literal -1/2 binary64)))) (*.f64 (neg.f64 (*.f64 a #s(literal 1/2 binary64))) (neg.f64 b_2)))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 b_2 b_2) (*.f64 (neg.f64 (*.f64 a #s(literal 1/2 binary64))) (*.f64 c #s(literal -1/2 binary64)))) (*.f64 (neg.f64 (*.f64 a #s(literal 1/2 binary64))) (*.f64 b_2 b_2)))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 b_2) (*.f64 (neg.f64 (*.f64 a #s(literal 1/2 binary64))) (*.f64 #s(literal -1/2 binary64) (/.f64 (neg.f64 c) b_2)))) (*.f64 (neg.f64 (*.f64 a #s(literal 1/2 binary64))) (neg.f64 b_2)))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 b_2 b_2) (*.f64 (neg.f64 (*.f64 a #s(literal 1/2 binary64))) (*.f64 #s(literal -1/2 binary64) c))) (*.f64 (neg.f64 (*.f64 a #s(literal 1/2 binary64))) (*.f64 b_2 b_2)))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 b_2) (*.f64 (neg.f64 (*.f64 a #s(literal 1/2 binary64))) (neg.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))))) (*.f64 (neg.f64 (*.f64 a #s(literal 1/2 binary64))) (neg.f64 b_2)))","(/.f64 (+.f64 (neg.f64 b_2) (*.f64 (neg.f64 (*.f64 a #s(literal 1/2 binary64))) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))) (*.f64 (neg.f64 (*.f64 a #s(literal 1/2 binary64))) b_2))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) (*.f64 (neg.f64 (*.f64 a #s(literal 1/2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (*.f64 a #s(literal 1/2 binary64))) (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (/.f64 b_2 c) b_2) (*.f64 (neg.f64 (*.f64 a #s(literal 1/2 binary64))) #s(literal -1/2 binary64))) (*.f64 (neg.f64 (*.f64 a #s(literal 1/2 binary64))) (*.f64 (/.f64 b_2 c) b_2)))","(/.f64 (fma.f64 #s(literal 2 binary64) (neg.f64 b_2) (*.f64 (neg.f64 (neg.f64 a)) (*.f64 (/.f64 (neg.f64 c) b_2) #s(literal -1/2 binary64)))) (*.f64 (neg.f64 (neg.f64 a)) (neg.f64 b_2)))","(/.f64 (fma.f64 #s(literal 2 binary64) (*.f64 b_2 b_2) (*.f64 (neg.f64 (neg.f64 a)) (*.f64 c #s(literal -1/2 binary64)))) (*.f64 (neg.f64 (neg.f64 a)) (*.f64 b_2 b_2)))","(/.f64 (fma.f64 #s(literal 2 binary64) (neg.f64 b_2) (*.f64 (neg.f64 (neg.f64 a)) (*.f64 #s(literal -1/2 binary64) (/.f64 (neg.f64 c) b_2)))) (*.f64 (neg.f64 (neg.f64 a)) (neg.f64 b_2)))","(/.f64 (fma.f64 #s(literal 2 binary64) (*.f64 b_2 b_2) (*.f64 (neg.f64 (neg.f64 a)) (*.f64 #s(literal -1/2 binary64) c))) (*.f64 (neg.f64 (neg.f64 a)) (*.f64 b_2 b_2)))","(/.f64 (fma.f64 #s(literal 2 binary64) (neg.f64 b_2) (*.f64 (neg.f64 (neg.f64 a)) (neg.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))))) (*.f64 (neg.f64 (neg.f64 a)) (neg.f64 b_2)))","(/.f64 (fma.f64 #s(literal 2 binary64) b_2 (*.f64 (neg.f64 (neg.f64 a)) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))) (*.f64 (neg.f64 (neg.f64 a)) b_2))","(/.f64 (fma.f64 #s(literal 2 binary64) (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) (*.f64 (neg.f64 (neg.f64 a)) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 a)) (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))))","(/.f64 (fma.f64 #s(literal 2 binary64) (*.f64 (/.f64 b_2 c) b_2) (*.f64 (neg.f64 (neg.f64 a)) #s(literal -1/2 binary64))) (*.f64 (neg.f64 (neg.f64 a)) (*.f64 (/.f64 b_2 c) b_2)))","(/.f64 (fma.f64 #s(literal 2 binary64) (neg.f64 b_2) (*.f64 a (*.f64 (/.f64 (neg.f64 c) b_2) #s(literal -1/2 binary64)))) (*.f64 a (neg.f64 b_2)))","(/.f64 (fma.f64 #s(literal 2 binary64) (*.f64 b_2 b_2) (*.f64 a (*.f64 c #s(literal -1/2 binary64)))) (*.f64 a (*.f64 b_2 b_2)))","(/.f64 (fma.f64 #s(literal 2 binary64) (neg.f64 b_2) (*.f64 a (*.f64 #s(literal -1/2 binary64) (/.f64 (neg.f64 c) b_2)))) (*.f64 a (neg.f64 b_2)))","(/.f64 (fma.f64 #s(literal 2 binary64) (*.f64 b_2 b_2) (*.f64 a (*.f64 #s(literal -1/2 binary64) c))) (*.f64 a (*.f64 b_2 b_2)))","(/.f64 (fma.f64 #s(literal 2 binary64) (neg.f64 b_2) (*.f64 a (neg.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))))) (*.f64 a (neg.f64 b_2)))","(/.f64 (fma.f64 #s(literal 2 binary64) (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))))","(/.f64 (fma.f64 #s(literal 2 binary64) (*.f64 (/.f64 b_2 c) b_2) (*.f64 a #s(literal -1/2 binary64))) (*.f64 a (*.f64 (/.f64 b_2 c) b_2)))","(/.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 b_2) (*.f64 (neg.f64 a) (*.f64 (/.f64 (neg.f64 c) b_2) #s(literal -1/2 binary64)))) (*.f64 (neg.f64 a) (neg.f64 b_2)))","(/.f64 (fma.f64 #s(literal -2 binary64) (*.f64 b_2 b_2) (*.f64 (neg.f64 a) (*.f64 c #s(literal -1/2 binary64)))) (*.f64 (neg.f64 a) (*.f64 b_2 b_2)))","(/.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 b_2) (*.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) (/.f64 (neg.f64 c) b_2)))) (*.f64 (neg.f64 a) (neg.f64 b_2)))","(/.f64 (fma.f64 #s(literal -2 binary64) (*.f64 b_2 b_2) (*.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) c))) (*.f64 (neg.f64 a) (*.f64 b_2 b_2)))","(/.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 b_2) (*.f64 (neg.f64 a) (neg.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))))) (*.f64 (neg.f64 a) (neg.f64 b_2)))","(/.f64 (fma.f64 #s(literal -2 binary64) (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))))","(/.f64 (fma.f64 #s(literal -2 binary64) (*.f64 (/.f64 b_2 c) b_2) (*.f64 (neg.f64 a) #s(literal -1/2 binary64))) (*.f64 (neg.f64 a) (*.f64 (/.f64 b_2 c) b_2)))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)) #s(literal 2 binary64))) (-.f64 (/.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)) (/.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 (*.f64 (/.f64 b_2 c) b_2) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) a) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 a #s(literal -2 binary64)) #s(literal 4 binary64) (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)) (/.f64 #s(literal 2 binary64) a))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 (*.f64 (/.f64 b_2 c) b_2) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) a) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 b_2 c) b_2) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (/.f64 #s(literal 2 binary64) a) (-.f64 (/.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)))))))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)) (*.f64 a #s(literal 1/2 binary64)) (*.f64 b_2 #s(literal 1 binary64))) (*.f64 b_2 (*.f64 a #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)) a (*.f64 b_2 #s(literal 2 binary64))) (*.f64 b_2 a))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)) (neg.f64 a) (*.f64 #s(literal -2 binary64) b_2)) (*.f64 b_2 (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) b_2 (*.f64 (*.f64 a #s(literal 1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))) (*.f64 (*.f64 a #s(literal 1/2 binary64)) b_2))","(/.f64 (fma.f64 #s(literal 2 binary64) b_2 (*.f64 a (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))) (*.f64 a b_2))","(/.f64 (fma.f64 #s(literal -2 binary64) b_2 (*.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))) (*.f64 (neg.f64 a) b_2))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))) (-.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)) (/.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 (*.f64 (/.f64 b_2 c) b_2) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) a) #s(literal 3 binary64))) (fma.f64 (pow.f64 a #s(literal -2 binary64)) #s(literal 4 binary64) (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)) (/.f64 #s(literal 2 binary64) a)))))","(/.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 (*.f64 (/.f64 b_2 c) b_2) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) a) #s(literal 3 binary64))) (fma.f64 (pow.f64 (*.f64 (/.f64 b_2 c) b_2) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (/.f64 #s(literal 2 binary64) a) (-.f64 (/.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)) (/.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 b_2 c) b_2) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (/.f64 #s(literal 2 binary64) a) (-.f64 (/.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2))))) (fma.f64 #s(literal -1/8 binary64) (pow.f64 (*.f64 (/.f64 b_2 c) b_2) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) a) #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)) (/.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 b_2 c) b_2) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (/.f64 #s(literal 2 binary64) a) (-.f64 (/.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2))))) (fma.f64 #s(literal -1/8 binary64) (pow.f64 (*.f64 (/.f64 b_2 c) b_2) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) a) #s(literal 3 binary64))))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)) (pow.f64 b_2 #s(literal -1 binary64)) (/.f64 #s(literal 2 binary64) a))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal 2 binary64) (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)))","(fma.f64 #s(literal 2 binary64) (pow.f64 a #s(literal -1 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)))","(fma.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2) (/.f64 #s(literal 2 binary64) a))","(fma.f64 (/.f64 (/.f64 c b_2) b_2) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a))","(fma.f64 (/.f64 c b_2) (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 #s(literal 2 binary64) a))","(fma.f64 (/.f64 c b_2) (*.f64 (pow.f64 b_2 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (/.f64 #s(literal 2 binary64) a))","(fma.f64 #s(literal -2 binary64) (pow.f64 (neg.f64 a) #s(literal -1 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)) (/.f64 #s(literal 2 binary64) a))) (/.f64 (pow.f64 (/.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)) (/.f64 #s(literal 2 binary64) a))))","(+.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)) (/.f64 #s(literal 2 binary64) a))","(+.f64 (/.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 c b_2) b_2)))","(*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal 1 binary64)) (pow.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) #s(literal 1 binary64)) (pow.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/2 binary64))) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/2 binary64))) #s(literal 1 binary64)) (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)))","(*.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))","(*.f64 (*.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/2 binary64))) (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))))","(*.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/2 binary64))) (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/2 binary64)))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/2 binary64)) (pow.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/2 binary64)) (pow.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/2 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/2 binary64)) (sqrt.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))","(*.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/2 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))))","(*.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))","(pow.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) #s(literal 2 binary64))","(pow.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) #s(literal 1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)))) (neg.f64 (+.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 18 binary64)) (pow.f64 (*.f64 c a) #s(literal 9 binary64))) (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)))) (neg.f64 (+.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) (pow.f64 b_2 #s(literal 12 binary64)))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))))) (neg.f64 (+.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 18 binary64)) (pow.f64 (*.f64 c a) #s(literal 9 binary64))))) (neg.f64 (+.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) (pow.f64 b_2 #s(literal 12 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 18 binary64)) (pow.f64 (*.f64 c a) #s(literal 9 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) (pow.f64 b_2 #s(literal 12 binary64))) (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))))) (neg.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) (+.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 b_2 #s(literal 18 binary64)) (pow.f64 (*.f64 c a) #s(literal 9 binary64))))) (neg.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) (+.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) (pow.f64 b_2 #s(literal 12 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64)))) (*.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64))) (+.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 18 binary64)) (pow.f64 (*.f64 c a) #s(literal 9 binary64))) (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64))) (+.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) (pow.f64 b_2 #s(literal 12 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))))","(/.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64)))) (+.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))))","(/.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 18 binary64)) (pow.f64 (*.f64 c a) #s(literal 9 binary64)))) (+.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) (pow.f64 b_2 #s(literal 12 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 c) a))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (*.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 c) a))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 18 binary64)) (pow.f64 (*.f64 c a) #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) (pow.f64 b_2 #s(literal 12 binary64))) (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64)))) (*.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) (+.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 b_2 #s(literal 18 binary64)) (pow.f64 (*.f64 c a) #s(literal 9 binary64)))) (*.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) (+.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) (pow.f64 b_2 #s(literal 12 binary64)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (-.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 c) a)))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (fma.f64 c a (*.f64 b_2 b_2)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (+.f64 (pow.f64 b_2 #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (*.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 c) a)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))))","(fma.f64 (*.f64 (neg.f64 b_2) #s(literal -1 binary64)) b_2 (*.f64 (neg.f64 c) a))","(fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(fma.f64 #s(literal 1 binary64) (*.f64 b_2 b_2) (*.f64 (neg.f64 c) a))","(fma.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (*.f64 (pow.f64 (*.f64 (neg.f64 c) a) #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (pow.f64 b_2 #s(literal 6 binary64)) (*.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (pow.f64 (*.f64 (neg.f64 c) a) #s(literal 3 binary64))))","(fma.f64 #s(literal -1 binary64) (*.f64 b_2 (neg.f64 b_2)) (*.f64 (neg.f64 c) a))","(fma.f64 #s(literal -1 binary64) (*.f64 c a) (*.f64 b_2 b_2))","(fma.f64 (*.f64 b_2 b_2) #s(literal 1 binary64) (*.f64 (neg.f64 c) a))","(fma.f64 (neg.f64 b_2) (neg.f64 b_2) (*.f64 (neg.f64 c) a))","(fma.f64 c (neg.f64 a) (*.f64 b_2 b_2))","(fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))","(fma.f64 b_2 b_2 (*.f64 (neg.f64 c) a))","(sqrt.f64 (pow.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) #s(literal 2 binary64)))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2))))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64)))))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(fabs.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) #s(literal 2 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))","(+.f64 (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64))) (*.f64 (pow.f64 (*.f64 (neg.f64 c) a) #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64))))","(+.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (*.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (pow.f64 (*.f64 (neg.f64 c) a) #s(literal 3 binary64))))","(+.f64 (*.f64 (neg.f64 c) a) (*.f64 b_2 b_2))","(+.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 c) a))","(*.f64 (-.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) (pow.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) #s(literal 3/2 binary64))) (pow.f64 (fma.f64 b_2 b_2 (+.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (*.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (-.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b_2 b_2 (+.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (*.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (*.f64 b_2 b_2))) (neg.f64 (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) (neg.f64 b_2))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) (neg.f64 (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (fma.f64 b_2 b_2 (+.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (*.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))","(/.f64 (fma.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (+.f64 #s(literal 0 binary64) b_2) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (-.f64 #s(literal 0 binary64) (*.f64 b_2 b_2)))) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (+.f64 #s(literal 0 binary64) b_2)))","(/.f64 (fma.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))))) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))))","(/.f64 (fma.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (+.f64 #s(literal 0 binary64) b_2) (*.f64 (sqrt.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64)))) (-.f64 #s(literal 0 binary64) (*.f64 b_2 b_2)))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64)))) (+.f64 #s(literal 0 binary64) b_2)))","(/.f64 (fma.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64)))) (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64)))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (*.f64 b_2 b_2)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (*.f64 b_2 b_2)) (sqrt.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64)))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) (sqrt.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (sqrt.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64)))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (sqrt.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 (-.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) (neg.f64 b_2)))","(/.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)))) (neg.f64 (+.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (-.f64 (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) (neg.f64 b_2))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 b_2 b_2 (+.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (*.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))))","(/.f64 (-.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))","(/.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) #s(literal 3/2 binary64))) (+.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (-.f64 (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) (neg.f64 b_2)))))","(/.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) #s(literal 3/2 binary64))) (fma.f64 b_2 b_2 (+.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (*.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (-.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b_2 b_2 (+.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (*.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (-.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 b_2 b_2 (+.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (*.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) #s(literal 3/2 binary64))))))","(fma.f64 (sqrt.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (sqrt.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) (neg.f64 b_2))","(fma.f64 (sqrt.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))))) (hypot.f64 (*.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (*.f64 c a)) (neg.f64 b_2))","(fma.f64 (sqrt.f64 (*.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/2 binary64)))) (sqrt.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))) (neg.f64 b_2))","(fma.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/2 binary64)))) (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/4 binary64)) (neg.f64 b_2))","(fma.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (sqrt.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (neg.f64 b_2))","(fma.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal 1/2 binary64)) (pow.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)) #s(literal 1/2 binary64)) (neg.f64 b_2))","(fma.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) #s(literal 1/2 binary64)) (pow.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) #s(literal 1/2 binary64)) (neg.f64 b_2))","(fma.f64 (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/2 binary64))) #s(literal 1/2 binary64)) (pow.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) #s(literal 1/2 binary64)) (neg.f64 b_2))","(fma.f64 (pow.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/2 binary64))) #s(literal 1/2 binary64)) (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/4 binary64)) (neg.f64 b_2))","(fma.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/4 binary64)) (sqrt.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) (neg.f64 b_2))","(fma.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/4 binary64)) (sqrt.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/2 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))) (neg.f64 b_2))","(fma.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/4 binary64)) (pow.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) #s(literal 1/2 binary64)) (neg.f64 b_2))","(fma.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/4 binary64)) (pow.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/2 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) #s(literal 1/2 binary64)) (neg.f64 b_2))","(fma.f64 (pow.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) (neg.f64 b_2))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64))) (neg.f64 b_2))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (pow.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b_2))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/2 binary64)) (neg.f64 b_2))","(fma.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/2 binary64)) (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (neg.f64 b_2))","(fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))","(fma.f64 b_2 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))","(-.f64 (+.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) #s(literal 0 binary64)) b_2)","(-.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) (/.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))","(-.f64 #s(literal 0 binary64) (-.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))","(-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2)","(+.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) (neg.f64 b_2))","(+.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))","(*.f64 (pow.f64 (/.f64 a (-.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 a (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b_2 b_2 (+.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (*.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2))","(*.f64 (neg.f64 (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2)) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2) a))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2) (pow.f64 a #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) (pow.f64 a #s(literal -1 binary64)))) (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) #s(literal 3/2 binary64))) (pow.f64 a #s(literal -1 binary64)))) (neg.f64 (fma.f64 b_2 b_2 (+.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (*.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2) #s(literal 1 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2)))) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) a)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) #s(literal 3/2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b_2 b_2 (+.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (*.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) a)))","(/.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) (pow.f64 a #s(literal -1 binary64))) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))","(/.f64 (*.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) #s(literal 3/2 binary64))) (pow.f64 a #s(literal -1 binary64))) (fma.f64 b_2 b_2 (+.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (*.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2) #s(literal 1 binary64)) a)","(/.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (neg.f64 (*.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)))) (neg.f64 (*.f64 a (fma.f64 b_2 b_2 (+.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (*.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))))","(/.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) #s(literal 1 binary64)) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) a))","(/.f64 (*.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) #s(literal 3/2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b_2 b_2 (+.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (*.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) a))","(/.f64 (-.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) (*.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))","(/.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) #s(literal 3/2 binary64))) (*.f64 a (fma.f64 b_2 b_2 (+.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (*.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2)) (neg.f64 a))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2)))","(/.f64 (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2) a)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2)) a))","(neg.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2) (neg.f64 a)))","(exp.f64 (*.f64 (log.f64 (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2))) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))))","(*.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) #s(literal 1/4 binary64)))","(pow.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) #s(literal 1 binary64))","(pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))","(fabs.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))))","(exp.f64 (log.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))))","(*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))","(pow.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) #s(literal 2 binary64))","(pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 1 binary64))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))","(sqrt.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 2 binary64)))","(fabs.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))","(exp.f64 (*.f64 (log.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 2 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) #s(literal 1 binary64)))","(exp.f64 (log.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))","(*.f64 (pow.f64 (/.f64 b_2 (neg.f64 c)) #s(literal -1 binary64)) (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)))","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (/.f64 c b_2))","(*.f64 (/.f64 (neg.f64 c) b_2) (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 c b_2) b_2))","(*.f64 (/.f64 c b_2) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 c (/.f64 (pow.f64 b_2 #s(literal -1 binary64)) b_2))","(*.f64 c (pow.f64 b_2 #s(literal -2 binary64)))","(pow.f64 (/.f64 (*.f64 (/.f64 b_2 c) b_2) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 b_2 b_2) c) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 b_2 c) b_2) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (/.f64 c b_2) #s(literal 1 binary64))) (neg.f64 b_2))","(/.f64 (neg.f64 (*.f64 (/.f64 c b_2) #s(literal 1 binary64))) (neg.f64 b_2))","(/.f64 (neg.f64 (*.f64 (neg.f64 c) #s(literal 1 binary64))) (*.f64 b_2 b_2))","(/.f64 (neg.f64 (*.f64 c #s(literal 1 binary64))) (neg.f64 (*.f64 b_2 b_2)))","(/.f64 (/.f64 (/.f64 c b_2) #s(literal 1 binary64)) b_2)","(/.f64 (*.f64 (/.f64 c b_2) #s(literal 1 binary64)) b_2)","(/.f64 (neg.f64 (pow.f64 b_2 #s(literal -1 binary64))) (neg.f64 (/.f64 b_2 c)))","(/.f64 (neg.f64 (neg.f64 c)) (neg.f64 (neg.f64 (*.f64 b_2 b_2))))","(/.f64 (neg.f64 (neg.f64 c)) (*.f64 b_2 b_2))","(/.f64 (*.f64 (neg.f64 c) #s(literal 1 binary64)) (*.f64 (neg.f64 b_2) b_2))","(/.f64 (*.f64 c #s(literal 1 binary64)) (*.f64 b_2 b_2))","(/.f64 (pow.f64 b_2 #s(literal -1 binary64)) (/.f64 b_2 c))","(/.f64 (/.f64 (neg.f64 c) b_2) (neg.f64 (neg.f64 (neg.f64 b_2))))","(/.f64 (/.f64 (neg.f64 c) b_2) (neg.f64 b_2))","(/.f64 (neg.f64 c) (*.f64 b_2 (neg.f64 b_2)))","(/.f64 (neg.f64 c) (neg.f64 (*.f64 b_2 b_2)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (/.f64 b_2 c) b_2))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (/.f64 b_2 c) b_2) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 b_2 b_2) c))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 b_2 c) b_2))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (/.f64 b_2 c) b_2) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 b_2 b_2) c)))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 b_2 c) b_2)))","(/.f64 (/.f64 c b_2) (neg.f64 (neg.f64 b_2)))","(/.f64 (/.f64 c b_2) b_2)","(/.f64 c (*.f64 b_2 b_2))","(neg.f64 (/.f64 (/.f64 (neg.f64 c) b_2) b_2))","(exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 b_2 c) b_2)) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (sqrt.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))))","(*.f64 (sqrt.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))))) (hypot.f64 (*.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (*.f64 c a)))","(*.f64 (sqrt.f64 (*.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/2 binary64)))) (sqrt.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))))","(*.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/2 binary64)))) (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/4 binary64)))","(*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (sqrt.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))","(*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal 1/2 binary64)) (pow.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) #s(literal 1/2 binary64)) (pow.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/2 binary64))) #s(literal 1/2 binary64)) (pow.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/2 binary64))) #s(literal 1/2 binary64)) (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/4 binary64)))","(*.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/4 binary64)) (sqrt.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))","(*.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/4 binary64)) (sqrt.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/2 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))))","(*.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/4 binary64)) (pow.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/4 binary64)) (pow.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/2 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (pow.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/2 binary64)) (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))))","(pow.f64 (pow.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) #s(literal 1 binary64))","(pow.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) #s(literal 1/2 binary64))","(/.f64 (neg.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (neg.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)))) (hypot.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (*.f64 c a) #s(literal 3/2 binary64))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 18 binary64)) (pow.f64 (*.f64 c a) #s(literal 9 binary64))) (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)))) (sqrt.f64 (+.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) (pow.f64 b_2 #s(literal 12 binary64)))))","(/.f64 (sqrt.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))) (sqrt.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) #s(literal 1 binary64))) (sqrt.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 (sqrt.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))))) (hypot.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (*.f64 c a) #s(literal 3/2 binary64))))","(/.f64 (sqrt.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 18 binary64)) (pow.f64 (*.f64 c a) #s(literal 9 binary64))))) (sqrt.f64 (+.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) (pow.f64 b_2 #s(literal 12 binary64)))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) #s(literal 1 binary64))) (sqrt.f64 (*.f64 (+.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 18 binary64)) (pow.f64 (*.f64 c a) #s(literal 9 binary64))) #s(literal 1 binary64))) (sqrt.f64 (*.f64 (+.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) (pow.f64 b_2 #s(literal 12 binary64))) (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 (sqrt.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))))) (sqrt.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) (+.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))))))","(/.f64 (sqrt.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 b_2 #s(literal 18 binary64)) (pow.f64 (*.f64 c a) #s(literal 9 binary64))))) (sqrt.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) (+.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) (pow.f64 b_2 #s(literal 12 binary64))))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 c) a))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (sqrt.f64 (+.f64 (pow.f64 b_2 #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (*.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 c) a))))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (sqrt.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64))) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))))","(sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))","(fabs.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))","(exp.f64 (log.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))","(*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 8 binary64))) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 b_2 #s(literal 4 binary64)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c)) (pow.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) (pow.f64 b_2 #s(literal 4 binary64))) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 8 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 b_2 #s(literal 4 binary64)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c)) (pow.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) #s(literal 2 binary64))) (+.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 8 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) #s(literal 2 binary64)))) (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 8 binary64))))) (neg.f64 (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 b_2 #s(literal 4 binary64)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c)) (pow.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) (pow.f64 b_2 #s(literal 4 binary64)))) (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) (pow.f64 b_2 #s(literal 4 binary64))) (pow.f64 b_2 #s(literal 8 binary64)))) (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) (pow.f64 b_2 #s(literal 4 binary64))) (-.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 (exp.f64 (log.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 8 binary64))))) (exp.f64 (log.f64 (-.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 (exp.f64 (log.f64 (+.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) #s(literal 3 binary64))))) (exp.f64 (log.f64 (fma.f64 (pow.f64 b_2 #s(literal 4 binary64)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c)) (pow.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 8 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) #s(literal 2 binary64))) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 8 binary64)))) (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 8 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) c) (*.f64 a (pow.f64 b_2 #s(literal 4 binary64))))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 b_2 #s(literal 4 binary64)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c)) (pow.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 8 binary64))) (-.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) (pow.f64 b_2 #s(literal 4 binary64))))","(/.f64 (+.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) #s(literal 3 binary64))) (+.f64 (pow.f64 b_2 #s(literal 8 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) c) (*.f64 a (pow.f64 b_2 #s(literal 4 binary64)))))))","(/.f64 (+.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) #s(literal 3 binary64))) (fma.f64 (pow.f64 b_2 #s(literal 4 binary64)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c)) (pow.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) (pow.f64 b_2 #s(literal 4 binary64))) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 8 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 b_2 #s(literal 4 binary64)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c)) (pow.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) #s(literal 2 binary64))) (+.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) (pow.f64 b_2 #s(literal 4 binary64))) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 8 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 b_2 #s(literal 4 binary64)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c)) (pow.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) #s(literal 2 binary64))) (+.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) #s(literal 3 binary64))))))","(fma.f64 (pow.f64 (*.f64 (neg.f64 b_2) #s(literal -1 binary64)) #s(literal 2 binary64)) (*.f64 b_2 b_2) (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c))","(fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64)))","(fma.f64 (*.f64 b_2 (neg.f64 b_2)) (*.f64 b_2 (neg.f64 b_2)) (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c))","(fma.f64 (*.f64 (neg.f64 b_2) b_2) (*.f64 (neg.f64 b_2) b_2) (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c))","(fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) c) a (pow.f64 b_2 #s(literal 4 binary64)))","(fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) b_2 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c))","(fma.f64 #s(literal 1 binary64) (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c))","(fma.f64 (*.f64 c a) (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64)))","(fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))","(fma.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2) (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c))","(fma.f64 c (*.f64 a (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 b_2 #s(literal 4 binary64)))","(fma.f64 a (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) c) (pow.f64 b_2 #s(literal 4 binary64)))","(fma.f64 b_2 (pow.f64 b_2 #s(literal 3 binary64)) (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) (pow.f64 b_2 #s(literal 4 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 8 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) (pow.f64 b_2 #s(literal 4 binary64)))))","(exp.f64 (log.f64 (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c (pow.f64 b_2 #s(literal 4 binary64)))))","(+.f64 (+.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (*.f64 (*.f64 (*.f64 b_2 b_2) c) a))","(+.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c) (pow.f64 b_2 #s(literal 4 binary64)))","(+.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a) c))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":296.303955078125,"type":"rewrite"},{"compiler":[[37582,4568]],"memory":[[-339040,96146496]],"time":178.77001953125,"type":"eval"},{"alts":[["(/.f64 (/.f64 (-.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) (neg.f64 b_2))) a)","fresh",45.74154122753899,"binary64"],["(/.f64 (-.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) (*.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))","next",48.68829855138888,"binary64"],["(/.f64 (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2) a)","next",30.155303139911183,"binary64"],["(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) a)","fresh",31.104321425054025,"binary64"],["(/.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64))) (*.f64 a (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))))))","fresh",62.65884900713957,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","next",42.032803427762936,"binary64"],["(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (/.f64 (*.f64 c a) b_2) #s(literal -1/2 binary64))) a)","fresh",46.74257838793888,"binary64"],["(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","fresh",46.5292107025933,"binary64"],["(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a)","fresh",41.27830321212375,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2)))","fresh",30.220088149679626,"binary64"],["(exp.f64 (*.f64 (log.f64 (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2))) #s(literal -1 binary64)))","fresh",48.618362225827795,"binary64"],["(exp.f64 (*.f64 (log.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2))) #s(literal -1 binary64)))","fresh",55.77977668311934,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -2 binary64) (/.f64 a b_2)))","fresh",41.33299229447682,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","fresh",42.75010113736626,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (neg.f64 b_2) #s(approx (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64)))))","next",56.06875827405116,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","done",41.27830321212375,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (exp.f64 (*.f64 (log.f64 (/.f64 a b_2)) #s(literal -1 binary64)))))","fresh",53.873258640317715,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))))","fresh",41.22720841843829,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2)) c)))","fresh",44.32413818741188,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))))","next",56.01103967021622,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (* (pow (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)) -1) (- (pow b_2 6) (pow (* c a) 3))))) a) (*.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 c (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) b_2) (/.f64 (*.f64 a a) b_2)) (*.f64 a b_2)) (/.f64 #s(literal 1 binary64) b_2))) c))","fresh",48.22168256792732,"binary64"]],"compiler":[[25,12],[25,12],[12,9],[22,14],[49,19],[18,13],[21,15],[21,15],[17,13],[14,11],[16,13],[20,15],[19,14],[19,14],[36,25],[19,14],[23,18],[39,26],[41,27],[34,23],[56,36],[25,12],[25,12],[12,9],[22,14],[49,19],[18,13],[21,15],[21,15],[17,13],[14,11],[16,13],[20,15],[19,14],[19,14],[36,25],[23,18],[39,26],[41,27],[34,23],[56,36]],"count":[[1011,21]],"kept":[{"done":[1,0],"fresh":[8,4],"new":[997,16],"picked":[5,1]}],"memory":[[3686640,46989504]],"min-error":[[5.690897906458858,"binary64"]],"time":35.39111328125,"type":"prune"},{"egraph":[[0,8041,327,0.045700281],[5,7127,332,0.023121735],[4,2645,332,0.038713577],[3,755,336,0.016938866],[2,279,340,0.002939919],[1,128,358,0.001097756],[0,68,360,0.000666065],[0,45,362,0.000413697]],"inputs":[["(/.f64 (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2) a)","(-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2)","(sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))","(fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))","(neg.f64 c)","c","a","(*.f64 b_2 b_2)","b_2","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))))","#s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)))","(*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))","#s(literal 1/2 binary64)","(/.f64 c b_2)","c","b_2","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (neg.f64 b_2) #s(approx (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64)))))","(*.f64 (neg.f64 b_2) #s(approx (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64))))","(neg.f64 b_2)","b_2","#s(approx (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64)))","(*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64))","(/.f64 c (*.f64 b_2 b_2))","c","(*.f64 b_2 b_2)","#s(literal -1/2 binary64)","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","(neg.f64 b_2)","b_2","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))","(*.f64 (neg.f64 a) c)","(neg.f64 a)","a","c","(/.f64 (-.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) (*.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))","(-.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))","(*.f64 b_2 b_2)","b_2","(fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))","(neg.f64 c)","c","a","(*.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))","(-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))","(neg.f64 b_2)","(sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))"]],"locations":[["(fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))","cost-diff",0],["(*.f64 b_2 b_2)","cost-diff",0],["(/.f64 (-.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) (*.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))","cost-diff",4],["(-.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))","cost-diff",8],["(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","cost-diff",0],["(neg.f64 b_2)","cost-diff",0],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","cost-diff",0],["(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","cost-diff",1],["#s(approx (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64)))","cost-diff",0],["(neg.f64 b_2)","cost-diff",0],["(*.f64 (neg.f64 b_2) #s(approx (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64))))","cost-diff",0],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (neg.f64 b_2) #s(approx (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64)))))","cost-diff",0],["(/.f64 c b_2)","cost-diff",0],["(*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))","cost-diff",0],["#s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)))","cost-diff",0],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))))","cost-diff",0],["(fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))","cost-diff",0],["(sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))","cost-diff",0],["(-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2)","cost-diff",0],["(/.f64 (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2) a)","cost-diff",0]],"memory":[[2477472,24709088]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2) a)","(/.f64 (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) a)","(-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2)","(-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2)","(sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))","(sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))","(fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))","(fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))","(neg.f64 c)","c","a","(*.f64 b_2 b_2)","b_2","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))))","#s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)))","#s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)))","(*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))","(*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","(/.f64 c b_2)","c","b_2","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (neg.f64 b_2) #s(approx (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64)))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(approx (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) b_2) b_2) c)) (neg.f64 b_2)))","(*.f64 (neg.f64 b_2) #s(approx (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64))))","(*.f64 #s(approx (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) b_2) b_2) c)) (neg.f64 b_2))","(neg.f64 b_2)","b_2","#s(approx (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64)))","#s(approx (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) b_2) b_2) c))","(*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64))","(*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) b_2) b_2) c)","(/.f64 c (*.f64 b_2 b_2))","(/.f64 (/.f64 c b_2) b_2)","c","(*.f64 b_2 b_2)","#s(literal -1/2 binary64)","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) a)","(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2)","(neg.f64 b_2)","b_2","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))","(*.f64 (neg.f64 a) c)","(neg.f64 a)","a","c","(/.f64 (-.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) (*.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))","(/.f64 (neg.f64 c) (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2))","(-.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))","(*.f64 a c)","(*.f64 b_2 b_2)","b_2","(fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))","(fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))","(neg.f64 c)","c","a","(*.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))","(*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a)","(-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))","(-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))","(neg.f64 b_2)","(sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))","(sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":197.972900390625,"type":"simplify"},{"compiler":[[289,36]],"locations":[["(-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))","accuracy",13.874041657555372],["(/.f64 (-.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) (*.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))","accuracy",21.530572867628663],["(sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))","accuracy",26.11467062552949],["(-.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))","accuracy",35.051428018774054],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","accuracy",2.737771909408055],["(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","accuracy",13.392238629486883],["(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","accuracy",26.11467062552949],["#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))","accuracy",38.976179372446616],["(*.f64 (neg.f64 b_2) #s(approx (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64))))","accuracy",6.016883354734431],["(/.f64 c (*.f64 b_2 b_2))","accuracy",8.419399012708725],["#s(approx (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64)))","accuracy",40.11151827717901],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (neg.f64 b_2) #s(approx (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64)))))","accuracy",41.22720841843829],["(/.f64 c b_2)","accuracy",0.0],["(*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))","accuracy",0.0],["#s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)))","accuracy",40.45568710884955],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))))","accuracy",41.22720841843829],["(neg.f64 c)","accuracy",0.0],["(/.f64 (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2) a)","accuracy",2.737771909408055],["(-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2)","accuracy",13.392238629486883],["(sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))","accuracy",26.11467062552949]],"memory":[[-1633600,49836944]],"mixsample":[[0.1630859375,"ival-sub",1200],[0.007080078125,"ival-sub",4800],[17.6337890625,"ival-div",0],[9.669921875,"adjust",800],[0.093994140625,"ival-mult",1200],[0.0556640625,"ival-sub",1600],[0.126220703125,"ival-assert",0],[0.052978515625,"ival-sqrt",4800],[8.8115234375,"ival-sub",0],[1.247314453125,"ival-sqrt",1200],[4.35107421875,"ival-sqrt",0],[0.068603515625,"ival-sub",400],[0.009033203125,"ival-add",5200],[0.0302734375,"ival-mult",800],[5.3359375,"ival-add",0],[0.015869140625,"ival-sub",4400],[0.08935546875,"ival-sub",800],[0.28955078125,"ival-add",400],[0.704345703125,"adjust",2800],[0.307373046875,"ival-add",2400],[0.550048828125,"ival-sqrt",400],[0.152587890625,"ival-add",1200],[0.344970703125,"ival-sqrt",2000],[0.008056640625,"ival-add",5600],[0.048828125,"ival-sub",2000],[0.5341796875,"ival-sqrt",800],[0.015869140625,"ival-sqrt",4000],[0.181396484375,"ival-sqrt",4400],[0.042724609375,"ival-add",3600],[0.043701171875,"ival-add",3200],[4.14306640625,"adjust",2000],[0.091552734375,"ival-sub",2400],[0.33447265625,"ival-add",1600],[0.369384765625,"ival-sqrt",1600],[19.1298828125,"ival-mult",0],[0.036376953125,"ival-mult",400],[0.08203125,"ival-add",2800],[0.305908203125,"ival-add",2000],[0.256591796875,"ival-true",0],[0.713134765625,"ival-sqrt",2400],[0.441162109375,"exact",0],[0.123779296875,"ival-add",800],[3.92529296875,"ival-neg",0]],"outcomes":[[74.82177734375,1,"valid",83],[46.388671875,2,"valid",69],[10.260986328125,3,"valid",12],[24.98974609375,0,"valid",92]],"time":188.989013671875,"type":"localize"},{"count":[[22,165]],"inputs":[["(/.f64 (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2) a)","(-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2)","(sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))","(fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))))","#s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)))","(*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))","(/.f64 c b_2)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (neg.f64 b_2) #s(approx (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64)))))","(*.f64 (neg.f64 b_2) #s(approx (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64))))","(neg.f64 b_2)","#s(approx (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64)))","(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","(-.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))","(/.f64 (-.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) (*.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))","(*.f64 b_2 b_2)","(neg.f64 c)","(/.f64 c (*.f64 b_2 b_2))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))","(-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))"]],"memory":[[-4363840,16794080]],"outputs":[["(* -1/2 (/ c b_2))","(+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5))))))))","(* -1/2 (/ (* a c) b_2))","(* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5)))))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5)))))))))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","(* -2 (/ b_2 a))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/ 2 a)","(/ (+ 2 (* -1/2 (/ (* a c) (pow b_2 2)))) a)","(* a c)","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/16 (/ (pow c 3) (pow b_2 5))) (* a (+ (* -1/32 (/ (pow c 4) (pow b_2 7))) (* -1/128 (/ (pow c 4) (pow b_2 7))))))))))","(* -2 b_2)","(- (* 1/2 (/ (* a c) b_2)) (* 2 b_2))","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a c))","(* a (+ (* -1 c) (/ (pow b_2 2) a)))","(* 1/2 (/ c b_2))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(* -1/2 (/ c (pow b_2 2)))","(+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))","(* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1))))","(/ (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (/ b_2 (pow (sqrt -1) 2))) a)","(/ (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (/ b_2 (pow (sqrt -1) 2))))) a)","(/ (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (+ (* -1 (* (sqrt (/ 1 (* (pow a 5) c))) (/ (* b_2 (+ (* -1 (* (sqrt (/ (pow a 3) c)) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (sqrt -1)))) (+ (* -1/2 (/ (pow b_2 3) (* a (* c (pow (sqrt -1) 4))))) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (/ b_2 (pow (sqrt -1) 2))))))) a)","(* a (- (/ (pow b_2 2) a) c))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* a (- (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a))) a)))","(* -1 (* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ c (* -1 (/ (pow b_2 2) a)))))","(* -1 (/ (+ b_2 (* -1 (* (sqrt (* a c)) (sqrt -1)))) a))","(* -1 (/ (+ (* -1 (* (sqrt (* a c)) (sqrt -1))) (* -1 (/ (+ (* -1 (* a b_2)) (* -1 (/ (+ (* -1 (* (sqrt (/ (pow a 3) c)) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow a 3) c)) (* (pow b_2 2) (sqrt -1))))) a))) a))) a))","(* -1 (/ (+ (* -1 (* (sqrt (* a c)) (sqrt -1))) (* -1 (/ (+ (* -1 (* a b_2)) (* -1 (/ (+ (* -1 (* (sqrt (/ (pow a 3) c)) (* (pow b_2 2) (sqrt -1)))) (+ (* -1 (/ (+ (* -1 (* (sqrt (/ a c)) (* b_2 (* (sqrt -1) (+ (* -1 (* (sqrt (/ (pow a 3) c)) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow a 3) c)) (* (pow b_2 2) (sqrt -1))))))))) (* -1/2 (/ (* (pow a 2) (pow b_2 3)) c))) a)) (* 1/2 (* (sqrt (/ (pow a 3) c)) (* (pow b_2 2) (sqrt -1)))))) a))) a))) a))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(* -1 (* a (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(/ (+ (* -2 (/ (pow b_2 2) a)) (* 1/2 c)) b_2)","(/ c b_2)","(* -1 b_2)","(/ (+ (* -1/2 c) (* 2 (/ (pow b_2 2) a))) (pow b_2 2))","(+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (/ b_2 (* a (pow (sqrt -1) 2))))","(+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (* b_2 (+ (* b_2 (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -1) 3)))))) (/ 1 (* a (pow (sqrt -1) 2))))))","(+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (* b_2 (+ (* b_2 (+ (* -1 (* b_2 (- (* 1/2 (/ 1 (* (pow a 2) (* c (pow (sqrt -1) 4))))) (* -1 (* (sqrt (/ 1 (* a c))) (/ (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -1) 3))))) (sqrt -1))))))) (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -1) 3))))))) (/ 1 (* a (pow (sqrt -1) 2))))))","(/ c (pow b_2 2))","(- (pow b_2 2) (* a c))","(- (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6)))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4)))))) b_2)","(/ (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* -1/32 (/ (* (pow a 3) (pow c 4)) (pow b_2 6))) (* -1/128 (/ (* (pow a 3) (pow c 4)) (pow b_2 6))))))) b_2)","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 2))","(* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 2 (/ 1 a))))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 2 (/ 1 a)))))))","(* -1 (* b_2 (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -1 (* b_2 (- (+ (* -1 (/ (+ (* -1/8 (* a (pow c 2))) (* 1/4 (* a (pow c 2)))) (pow b_2 4))) (* 2 (/ 1 a))) (* 1/2 (/ c (pow b_2 2))))))","(* -1 (* b_2 (- (+ (* -1 (/ (+ (* -1/4 (* a (* c (+ (* -1/8 (* a (pow c 2))) (* 1/4 (* a (pow c 2))))))) (+ (* -1/16 (* (pow a 2) (pow c 3))) (* 2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* (pow a 2) c))))) (pow b_2 6))) (* 2 (/ 1 a))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* 1/4 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))))))","(* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/2 (* a c))) b_2))","(* -1 (/ (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))) (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))))) b_2))","(* -1 (/ (- (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2))","(* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) (* a b_2))) (* -1/16 (/ (pow a 2) (pow b_2 5))))))) (* 1/2 (/ 1 b_2))))","(* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3)))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5)))))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow a 3) (pow b_2 5)))))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* c (+ (* -1/16 (/ (pow a 2) (pow b_2 5))) (* c (+ (* -1/32 (/ (pow a 3) (pow b_2 7))) (* -1/128 (/ (pow a 3) (pow b_2 7))))))))) (* 1/2 (/ 1 b_2))))","(* -1 c)","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b_2 c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (+ (* -1 a) (/ (pow b_2 2) c)))","(* c (+ (* -2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2))))","(* c (- (* 2 (/ 1 (* a c))) (* 1/2 (/ 1 (pow b_2 2)))))","(- (+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (* -1 (/ (+ (* -1/2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (pow c 2)))) (* -1 (/ b_2 (* a (pow (sqrt -1) 2)))))","(- (+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (* -1 (/ (+ (* -1 (* (sqrt (/ c a)) (/ (* b_2 (+ (* -1/2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b_2 2) (pow (sqrt -1) 3))))) (sqrt -1)))) (* 1/2 (/ (* (pow b_2 3) (pow c 2)) (* (pow a 2) (pow (sqrt -1) 4))))) (pow c 3)))) (+ (* -1 (/ b_2 (* a (pow (sqrt -1) 2)))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (pow (sqrt -1) 3))))))","(* c (- (/ (pow b_2 2) c) a))","(* c (- (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c)))))","(* -1 (* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ a (* -1 (/ (pow b_2 2) c)))))","(* -1 (* c (- (* 2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2)))))","(* -1 (* c (- (* 1/2 (/ 1 (pow b_2 2))) (* 2 (/ 1 (* a c))))))","(+ (* -1 (/ (- (+ (* -1 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) (* -1 (/ (* b_2 c) a))) c)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (- (* -1 (/ (- (+ (* -1 (* (sqrt (/ 1 (* a c))) (* b_2 (* (sqrt -1) (+ (* -1 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b_2 2) (sqrt -1))))))))) (* -1/2 (/ (* (pow b_2 3) c) (pow a 2)))) (+ (* -1 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b_2 2) (sqrt -1)))))) c)) (* -1 (/ (* b_2 c) a))) c)) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))","(* -1 (* c (- (/ b_2 c) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))"]],"series":[[4.85888671875,"((/ (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) a) (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) (sqrt (+ (* (neg c) a) (* b_2 b_2))) (+ (* (neg c) a) (* b_2 b_2)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (* 1/2 (/ c b_2)) (/ c b_2) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (+ (* (neg c) a) (* b_2 b_2))) (/ (- (* b_2 b_2) (+ (* (neg c) a) (* b_2 b_2))) (* a (- (neg b_2) (sqrt (+ (* (neg c) a) (* b_2 b_2)))))) (* b_2 b_2) (neg c) (/ c (* b_2 b_2)) (- (* b_2 b_2) (* a c)) (- (neg b_2) (sqrt (+ (* (neg c) a) (* b_2 b_2)))))","c","-inf"],[5.211181640625,"((/ (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) a) (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) (sqrt (+ (* (neg c) a) (* b_2 b_2))) (+ (* (neg c) a) (* b_2 b_2)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (* 1/2 (/ c b_2)) (/ c b_2) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (+ (* (neg c) a) (* b_2 b_2))) (/ (- (* b_2 b_2) (+ (* (neg c) a) (* b_2 b_2))) (* a (- (neg b_2) (sqrt (+ (* (neg c) a) (* b_2 b_2)))))) (* b_2 b_2) (neg c) (/ c (* b_2 b_2)) (- (* b_2 b_2) (* a c)) (- (neg b_2) (sqrt (+ (* (neg c) a) (* b_2 b_2)))))","c","inf"],[4.278076171875,"((/ (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) a) (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) (sqrt (+ (* (neg c) a) (* b_2 b_2))) (+ (* (neg c) a) (* b_2 b_2)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (* 1/2 (/ c b_2)) (/ c b_2) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (+ (* (neg c) a) (* b_2 b_2))) (/ (- (* b_2 b_2) (+ (* (neg c) a) (* b_2 b_2))) (* a (- (neg b_2) (sqrt (+ (* (neg c) a) (* b_2 b_2)))))) (* b_2 b_2) (neg c) (/ c (* b_2 b_2)) (- (* b_2 b_2) (* a c)) (- (neg b_2) (sqrt (+ (* (neg c) a) (* b_2 b_2)))))","c","0"],[4.039794921875,"((/ (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) a) (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) (sqrt (+ (* (neg c) a) (* b_2 b_2))) (+ (* (neg c) a) (* b_2 b_2)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (* 1/2 (/ c b_2)) (/ c b_2) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (+ (* (neg c) a) (* b_2 b_2))) (/ (- (* b_2 b_2) (+ (* (neg c) a) (* b_2 b_2))) (* a (- (neg b_2) (sqrt (+ (* (neg c) a) (* b_2 b_2)))))) (* b_2 b_2) (neg c) (/ c (* b_2 b_2)) (- (* b_2 b_2) (* a c)) (- (neg b_2) (sqrt (+ (* (neg c) a) (* b_2 b_2)))))","b_2","-inf"],[3.77099609375,"((/ (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) a) (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) (sqrt (+ (* (neg c) a) (* b_2 b_2))) (+ (* (neg c) a) (* b_2 b_2)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (* 1/2 (/ c b_2)) (/ c b_2) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (+ (* (neg c) a) (* b_2 b_2))) (/ (- (* b_2 b_2) (+ (* (neg c) a) (* b_2 b_2))) (* a (- (neg b_2) (sqrt (+ (* (neg c) a) (* b_2 b_2)))))) (* b_2 b_2) (neg c) (/ c (* b_2 b_2)) (- (* b_2 b_2) (* a c)) (- (neg b_2) (sqrt (+ (* (neg c) a) (* b_2 b_2)))))","b_2","inf"],[3.681884765625,"((/ (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) a) (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) (sqrt (+ (* (neg c) a) (* b_2 b_2))) (+ (* (neg c) a) (* b_2 b_2)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (* 1/2 (/ c b_2)) (/ c b_2) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (+ (* (neg c) a) (* b_2 b_2))) (/ (- (* b_2 b_2) (+ (* (neg c) a) (* b_2 b_2))) (* a (- (neg b_2) (sqrt (+ (* (neg c) a) (* b_2 b_2)))))) (* b_2 b_2) (neg c) (/ c (* b_2 b_2)) (- (* b_2 b_2) (* a c)) (- (neg b_2) (sqrt (+ (* (neg c) a) (* b_2 b_2)))))","b_2","0"],[3.409912109375,"((/ (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) a) (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) (sqrt (+ (* (neg c) a) (* b_2 b_2))) (+ (* (neg c) a) (* b_2 b_2)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (* 1/2 (/ c b_2)) (/ c b_2) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (+ (* (neg c) a) (* b_2 b_2))) (/ (- (* b_2 b_2) (+ (* (neg c) a) (* b_2 b_2))) (* a (- (neg b_2) (sqrt (+ (* (neg c) a) (* b_2 b_2)))))) (* b_2 b_2) (neg c) (/ c (* b_2 b_2)) (- (* b_2 b_2) (* a c)) (- (neg b_2) (sqrt (+ (* (neg c) a) (* b_2 b_2)))))","a","-inf"],[6.8330078125,"((/ (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) a) (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) (sqrt (+ (* (neg c) a) (* b_2 b_2))) (+ (* (neg c) a) (* b_2 b_2)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (* 1/2 (/ c b_2)) (/ c b_2) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (+ (* (neg c) a) (* b_2 b_2))) (/ (- (* b_2 b_2) (+ (* (neg c) a) (* b_2 b_2))) (* a (- (neg b_2) (sqrt (+ (* (neg c) a) (* b_2 b_2)))))) (* b_2 b_2) (neg c) (/ c (* b_2 b_2)) (- (* b_2 b_2) (* a c)) (- (neg b_2) (sqrt (+ (* (neg c) a) (* b_2 b_2)))))","a","inf"],[2.655029296875,"((/ (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) a) (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) (sqrt (+ (* (neg c) a) (* b_2 b_2))) (+ (* (neg c) a) (* b_2 b_2)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (* 1/2 (/ c b_2)) (/ c b_2) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (+ (* (neg c) a) (* b_2 b_2))) (/ (- (* b_2 b_2) (+ (* (neg c) a) (* b_2 b_2))) (* a (- (neg b_2) (sqrt (+ (* (neg c) a) (* b_2 b_2)))))) (* b_2 b_2) (neg c) (/ c (* b_2 b_2)) (- (* b_2 b_2) (* a c)) (- (neg b_2) (sqrt (+ (* (neg c) a) (* b_2 b_2)))))","a","0"]],"time":43.346923828125,"type":"series"},{"count":[[165,164]],"egraph":[[0,8818,4413,0.110351898],[1,2855,4611,0.031559023],[0,871,4794,0.009515209]],"inputs":[["(* -1/2 (/ c b_2))","(+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5))))))))","(* -1/2 (/ (* a c) b_2))","(* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5)))))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5)))))))))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","(* -2 (/ b_2 a))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/ 2 a)","(/ (+ 2 (* -1/2 (/ (* a c) (pow b_2 2)))) a)","(* a c)","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/16 (/ (pow c 3) (pow b_2 5))) (* a (+ (* -1/32 (/ (pow c 4) (pow b_2 7))) (* -1/128 (/ (pow c 4) (pow b_2 7))))))))))","(* -2 b_2)","(- (* 1/2 (/ (* a c) b_2)) (* 2 b_2))","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a c))","(* a (+ (* -1 c) (/ (pow b_2 2) a)))","(* 1/2 (/ c b_2))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(* -1/2 (/ c (pow b_2 2)))","(+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))","(* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1))))","(/ (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (/ b_2 (pow (sqrt -1) 2))) a)","(/ (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (/ b_2 (pow (sqrt -1) 2))))) a)","(/ (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (+ (* -1 (* (sqrt (/ 1 (* (pow a 5) c))) (/ (* b_2 (+ (* -1 (* (sqrt (/ (pow a 3) c)) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (sqrt -1)))) (+ (* -1/2 (/ (pow b_2 3) (* a (* c (pow (sqrt -1) 4))))) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (/ b_2 (pow (sqrt -1) 2))))))) a)","(* a (- (/ (pow b_2 2) a) c))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* a (- (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a))) a)))","(* -1 (* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ c (* -1 (/ (pow b_2 2) a)))))","(* -1 (/ (+ b_2 (* -1 (* (sqrt (* a c)) (sqrt -1)))) a))","(* -1 (/ (+ (* -1 (* (sqrt (* a c)) (sqrt -1))) (* -1 (/ (+ (* -1 (* a b_2)) (* -1 (/ (+ (* -1 (* (sqrt (/ (pow a 3) c)) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow a 3) c)) (* (pow b_2 2) (sqrt -1))))) a))) a))) a))","(* -1 (/ (+ (* -1 (* (sqrt (* a c)) (sqrt -1))) (* -1 (/ (+ (* -1 (* a b_2)) (* -1 (/ (+ (* -1 (* (sqrt (/ (pow a 3) c)) (* (pow b_2 2) (sqrt -1)))) (+ (* -1 (/ (+ (* -1 (* (sqrt (/ a c)) (* b_2 (* (sqrt -1) (+ (* -1 (* (sqrt (/ (pow a 3) c)) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow a 3) c)) (* (pow b_2 2) (sqrt -1))))))))) (* -1/2 (/ (* (pow a 2) (pow b_2 3)) c))) a)) (* 1/2 (* (sqrt (/ (pow a 3) c)) (* (pow b_2 2) (sqrt -1)))))) a))) a))) a))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(* -1 (* a (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(/ (+ (* -2 (/ (pow b_2 2) a)) (* 1/2 c)) b_2)","(/ c b_2)","(* -1 b_2)","(/ (+ (* -1/2 c) (* 2 (/ (pow b_2 2) a))) (pow b_2 2))","(+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (/ b_2 (* a (pow (sqrt -1) 2))))","(+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (* b_2 (+ (* b_2 (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -1) 3)))))) (/ 1 (* a (pow (sqrt -1) 2))))))","(+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (* b_2 (+ (* b_2 (+ (* -1 (* b_2 (- (* 1/2 (/ 1 (* (pow a 2) (* c (pow (sqrt -1) 4))))) (* -1 (* (sqrt (/ 1 (* a c))) (/ (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -1) 3))))) (sqrt -1))))))) (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -1) 3))))))) (/ 1 (* a (pow (sqrt -1) 2))))))","(/ c (pow b_2 2))","(- (pow b_2 2) (* a c))","(- (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6)))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4)))))) b_2)","(/ (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* -1/32 (/ (* (pow a 3) (pow c 4)) (pow b_2 6))) (* -1/128 (/ (* (pow a 3) (pow c 4)) (pow b_2 6))))))) b_2)","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 2))","(* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 2 (/ 1 a))))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 2 (/ 1 a)))))))","(* -1 (* b_2 (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -1 (* b_2 (- (+ (* -1 (/ (+ (* -1/8 (* a (pow c 2))) (* 1/4 (* a (pow c 2)))) (pow b_2 4))) (* 2 (/ 1 a))) (* 1/2 (/ c (pow b_2 2))))))","(* -1 (* b_2 (- (+ (* -1 (/ (+ (* -1/4 (* a (* c (+ (* -1/8 (* a (pow c 2))) (* 1/4 (* a (pow c 2))))))) (+ (* -1/16 (* (pow a 2) (pow c 3))) (* 2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* (pow a 2) c))))) (pow b_2 6))) (* 2 (/ 1 a))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* 1/4 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))))))","(* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/2 (* a c))) b_2))","(* -1 (/ (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))) (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))))) b_2))","(* -1 (/ (- (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2))","(* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) (* a b_2))) (* -1/16 (/ (pow a 2) (pow b_2 5))))))) (* 1/2 (/ 1 b_2))))","(* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3)))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5)))))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow a 3) (pow b_2 5)))))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* c (+ (* -1/16 (/ (pow a 2) (pow b_2 5))) (* c (+ (* -1/32 (/ (pow a 3) (pow b_2 7))) (* -1/128 (/ (pow a 3) (pow b_2 7))))))))) (* 1/2 (/ 1 b_2))))","(* -1 c)","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b_2 c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (+ (* -1 a) (/ (pow b_2 2) c)))","(* c (+ (* -2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2))))","(* c (- (* 2 (/ 1 (* a c))) (* 1/2 (/ 1 (pow b_2 2)))))","(- (+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (* -1 (/ (+ (* -1/2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (pow c 2)))) (* -1 (/ b_2 (* a (pow (sqrt -1) 2)))))","(- (+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (* -1 (/ (+ (* -1 (* (sqrt (/ c a)) (/ (* b_2 (+ (* -1/2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b_2 2) (pow (sqrt -1) 3))))) (sqrt -1)))) (* 1/2 (/ (* (pow b_2 3) (pow c 2)) (* (pow a 2) (pow (sqrt -1) 4))))) (pow c 3)))) (+ (* -1 (/ b_2 (* a (pow (sqrt -1) 2)))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (pow (sqrt -1) 3))))))","(* c (- (/ (pow b_2 2) c) a))","(* c (- (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c)))))","(* -1 (* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ a (* -1 (/ (pow b_2 2) c)))))","(* -1 (* c (- (* 2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2)))))","(* -1 (* c (- (* 1/2 (/ 1 (pow b_2 2))) (* 2 (/ 1 (* a c))))))","(+ (* -1 (/ (- (+ (* -1 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) (* -1 (/ (* b_2 c) a))) c)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (- (* -1 (/ (- (+ (* -1 (* (sqrt (/ 1 (* a c))) (* b_2 (* (sqrt -1) (+ (* -1 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b_2 2) (sqrt -1))))))))) (* -1/2 (/ (* (pow b_2 3) c) (pow a 2)))) (+ (* -1 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b_2 2) (sqrt -1)))))) c)) (* -1 (/ (* b_2 c) a))) c)) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))","(* -1 (* c (- (/ b_2 c) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))"]],"memory":[[6003168,59056240]],"method":["egg-herbie"],"outputs":[["(* -1/2 (/ c b_2))","(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","(+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))","(fma.f64 (*.f64 a #s(literal -1/8 binary64)) (/.f64 (*.f64 c c) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (*.f64 #s(literal 5/64 binary64) a)) b_2) #s(literal -1/2 binary64) (/.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 5 binary64)))) a (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","(* -1/2 (/ (* a c) b_2))","(*.f64 (*.f64 a (/.f64 c b_2)) #s(literal -1/2 binary64))","(* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))))","(*.f64 (fma.f64 (*.f64 a #s(literal -1/8 binary64)) (/.f64 (*.f64 c c) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) a)","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) a)","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5)))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (*.f64 #s(literal 5/64 binary64) a)) b_2) #s(literal -1/2 binary64) (/.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 5 binary64)))) a (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) a)","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(fma.f64 (fma.f64 (*.f64 a #s(literal -1/8 binary64)) (/.f64 (*.f64 c c) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) a b_2)","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) a b_2)","(pow b_2 2)","(*.f64 b_2 b_2)","(+ (* -1 (* a c)) (pow b_2 2))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(* -2 (/ b_2 a))","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/.f64 (fma.f64 #s(literal -2 binary64) b_2 (*.f64 #s(literal 1/2 binary64) (*.f64 a (/.f64 c b_2)))) a)","(/ 2 a)","(/.f64 #s(literal 2 binary64) a)","(/ (+ 2 (* -1/2 (/ (* a c) (pow b_2 2)))) a)","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c (*.f64 b_2 b_2)) #s(literal 2 binary64)) a)","(* a c)","(*.f64 a c)","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/16 (/ (pow c 3) (pow b_2 5))) (* a (+ (* -1/32 (/ (pow c 4) (pow b_2 7))) (* -1/128 (/ (pow c 4) (pow b_2 7))))))))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b_2 #s(literal 7 binary64))) (*.f64 #s(literal -5/128 binary64) a) (/.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 5 binary64)))) a (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","(* -2 b_2)","(*.f64 #s(literal -2 binary64) b_2)","(- (* 1/2 (/ (* a c) b_2)) (* 2 b_2))","(fma.f64 #s(literal -2 binary64) b_2 (*.f64 #s(literal 1/2 binary64) (*.f64 a (/.f64 c b_2))))","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) a) (/.f64 (*.f64 c c) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))) a (*.f64 #s(literal -2 binary64) b_2))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (*.f64 #s(literal 1/8 binary64) (/.f64 (*.f64 c c) (pow.f64 b_2 #s(literal 3 binary64))))) a (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))) a (*.f64 #s(literal -2 binary64) b_2))","(* (sqrt (/ c a)) (sqrt -1))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b_2) a))","(+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b_2) a)))","(+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b_2) a))))","(* (sqrt (* a c)) (sqrt -1))","(*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))","(* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b_2) a)) a)","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a)))","(*.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b_2) a))) a)","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b_2) a)))) a)","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))))) a)","(* -1 (* a c))","(*.f64 (neg.f64 a) c)","(* a (+ (* -1 c) (/ (pow b_2 2) a)))","(*.f64 (-.f64 (/.f64 (*.f64 b_2 b_2) a) c) a)","(* 1/2 (/ c b_2))","(*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(* -1/2 (/ c (pow b_2 2)))","(*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64))","(+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))","(fma.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a))","(* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1))))","(/.f64 (sqrt.f64 (/.f64 c a)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))","(/ (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (/ b_2 (pow (sqrt -1) 2))) a)","(/.f64 (-.f64 (/.f64 b_2 #s(literal -1 binary64)) (/.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) a)","(/ (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (/ b_2 (pow (sqrt -1) 2))))) a)","(/.f64 (fma.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (*.f64 b_2 b_2) #s(literal -1 binary64))) #s(literal -1/2 binary64) (-.f64 (/.f64 b_2 #s(literal -1 binary64)) (/.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) a)","(/ (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (+ (* -1 (* (sqrt (/ 1 (* (pow a 5) c))) (/ (* b_2 (+ (* -1 (* (sqrt (/ (pow a 3) c)) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (sqrt -1)))) (+ (* -1/2 (/ (pow b_2 3) (* a (* c (pow (sqrt -1) 4))))) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (/ b_2 (pow (sqrt -1) 2))))))) a)","(/.f64 (-.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c)))) b_2) (/.f64 (*.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c)) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (*.f64 b_2 b_2) #s(literal -1 binary64))) #s(literal -1/2 binary64)) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64)) c)) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) a))) (fma.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (*.f64 b_2 b_2) #s(literal -1 binary64))) #s(literal -1/2 binary64) (/.f64 b_2 #s(literal -1 binary64)))) (/.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) a)","(* a (- (/ (pow b_2 2) a) c))","(*.f64 (-.f64 (/.f64 (*.f64 b_2 b_2) a) c) a)","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 a c)))","(* a (- (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (neg.f64 a) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))) a)","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))))","(*.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))) a)","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) b_2) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a))) a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (-.f64 b_2 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)))) a)) a)))","(* -1 (* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(*.f64 (neg.f64 a) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (neg.f64 b_2)) (neg.f64 a))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)))) (neg.f64 a)) b_2) (neg.f64 a))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))))))","(* -1 (* a (+ c (* -1 (/ (pow b_2 2) a)))))","(*.f64 (-.f64 (/.f64 (*.f64 b_2 b_2) a) c) a)","(* -1 (/ (+ b_2 (* -1 (* (sqrt (* a c)) (sqrt -1)))) a))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 a c)) b_2) (neg.f64 a))","(* -1 (/ (+ (* -1 (* (sqrt (* a c)) (sqrt -1))) (* -1 (/ (+ (* -1 (* a b_2)) (* -1 (/ (+ (* -1 (* (sqrt (/ (pow a 3) c)) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow a 3) c)) (* (pow b_2 2) (sqrt -1))))) a))) a))) a))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 (fma.f64 b_2 a (/.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c)) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64))) a))) a))) (neg.f64 a))","(* -1 (/ (+ (* -1 (* (sqrt (* a c)) (sqrt -1))) (* -1 (/ (+ (* -1 (* a b_2)) (* -1 (/ (+ (* -1 (* (sqrt (/ (pow a 3) c)) (* (pow b_2 2) (sqrt -1)))) (+ (* -1 (/ (+ (* -1 (* (sqrt (/ a c)) (* b_2 (* (sqrt -1) (+ (* -1 (* (sqrt (/ (pow a 3) c)) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow a 3) c)) (* (pow b_2 2) (sqrt -1))))))))) (* -1/2 (/ (* (pow a 2) (pow b_2 3)) c))) a)) (* 1/2 (* (sqrt (/ (pow a 3) c)) (* (pow b_2 2) (sqrt -1)))))) a))) a))) a))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 (fma.f64 b_2 a (/.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c)) (sqrt.f64 #s(literal -1 binary64))) (*.f64 b_2 b_2)) #s(literal -1/2 binary64) (/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 a a)) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c)) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64))))) (neg.f64 a))) a))) a))) (neg.f64 a))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(*.f64 (-.f64 (/.f64 (*.f64 b_2 b_2) a) c) a)","(* -1 (* a (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (-.f64 (/.f64 b_2 a) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))))","(* -1 (* a (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (-.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b_2)) (neg.f64 a)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (-.f64 (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)))) (neg.f64 a)) b_2) (neg.f64 a)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -1 binary64) a)) b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) b_2 (/.f64 #s(literal -1 binary64) a)) b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))","(+ (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (neg.f64 b_2))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) #s(literal -1 binary64)) b_2 (*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 #s(literal -1 binary64)))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) b_2 #s(literal -1 binary64)) b_2 (*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 #s(literal -1 binary64)))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (*.f64 b_2 b_2) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))) #s(literal -1/8 binary64))) (*.f64 b_2 b_2) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))","(/ (+ (* -2 (/ (pow b_2 2) a)) (* 1/2 c)) b_2)","(/.f64 (fma.f64 (/.f64 (*.f64 b_2 b_2) a) #s(literal -2 binary64) (*.f64 #s(literal 1/2 binary64) c)) b_2)","(/ c b_2)","(/.f64 c b_2)","(* -1 b_2)","(neg.f64 b_2)","(/ (+ (* -1/2 c) (* 2 (/ (pow b_2 2) a))) (pow b_2 2))","(/.f64 (fma.f64 (/.f64 (*.f64 b_2 b_2) a) #s(literal 2 binary64) (*.f64 #s(literal -1/2 binary64) c)) (*.f64 b_2 b_2))","(+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (/ b_2 (* a (pow (sqrt -1) 2))))","(-.f64 (/.f64 (neg.f64 b_2) a) (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (* b_2 (+ (* b_2 (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -1) 3)))))) (/ 1 (* a (pow (sqrt -1) 2))))))","(fma.f64 (fma.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 #s(literal -1/2 binary64) b_2) (/.f64 #s(literal -1 binary64) a)) b_2 (/.f64 (sqrt.f64 (/.f64 c a)) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))))","(+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (* b_2 (+ (* b_2 (+ (* -1 (* b_2 (- (* 1/2 (/ 1 (* (pow a 2) (* c (pow (sqrt -1) 4))))) (* -1 (* (sqrt (/ 1 (* a c))) (/ (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -1) 3))))) (sqrt -1))))))) (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -1) 3))))))) (/ 1 (* a (pow (sqrt -1) 2))))))","(fma.f64 (fma.f64 (fma.f64 (neg.f64 b_2) (+.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (*.f64 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64)) c) a) a)) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))) #s(literal -1/2 binary64))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))) #s(literal -1/2 binary64))) b_2 (/.f64 #s(literal -1 binary64) a)) b_2 (/.f64 (sqrt.f64 (/.f64 c a)) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))))","(/ c (pow b_2 2))","(/.f64 c (*.f64 b_2 b_2))","(- (pow b_2 2) (* a c))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(- (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(-.f64 (neg.f64 b_2) (*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))","(- (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) #s(literal -1 binary64)) b_2 (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 a c))))","(- (* b_2 (- (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/2 binary64))) b_2 #s(literal -1 binary64)) b_2 (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 a c))))","(/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2)","(/.f64 (fma.f64 (/.f64 (*.f64 #s(literal -1/8 binary64) a) b_2) (/.f64 (*.f64 c c) b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2)","(/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))))) b_2)","(/.f64 (fma.f64 (/.f64 (*.f64 #s(literal -1/8 binary64) a) b_2) (/.f64 (*.f64 c c) b_2) (fma.f64 (*.f64 #s(literal -1/16 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 #s(literal -1/2 binary64) c))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6)))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4)))))) b_2)","(/.f64 (fma.f64 #s(literal -1/2 binary64) (+.f64 c (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (*.f64 (pow.f64 c #s(literal 4 binary64)) #s(literal 5/64 binary64))) (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) a))) (fma.f64 (/.f64 (*.f64 #s(literal -1/8 binary64) a) b_2) (/.f64 (*.f64 c c) b_2) (/.f64 (*.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) #s(literal -1/16 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) b_2)","(/ (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2)))) b_2)","(/.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) b_2) (*.f64 (*.f64 #s(literal -1/2 binary64) c) a)) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))))) b_2)","(/.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) b_2) (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (*.f64 #s(literal -1/2 binary64) c) a))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2)","(/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 a c (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (*.f64 (pow.f64 c #s(literal 4 binary64)) #s(literal 5/64 binary64))) (pow.f64 b_2 #s(literal 6 binary64)))) (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) a) a) (*.f64 (/.f64 c b_2) (/.f64 c b_2)) (*.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(*.f64 (fma.f64 a (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64)) #s(literal 1 binary64)) b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 a (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64)) #s(literal 1 binary64))) b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) a) a) (/.f64 (*.f64 c c) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (*.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c (*.f64 b_2 b_2))))) b_2 b_2)","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(*.f64 (fma.f64 (/.f64 (neg.f64 a) b_2) (/.f64 c b_2) #s(literal 1 binary64)) (*.f64 b_2 b_2))","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 c b_2) (/.f64 #s(literal -2 binary64) a)) b_2)","(/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* -1/32 (/ (* (pow a 3) (pow c 4)) (pow b_2 6))) (* -1/128 (/ (* (pow a 3) (pow c 4)) (pow b_2 6))))))) b_2)","(/.f64 (fma.f64 #s(literal -1/2 binary64) c (fma.f64 (*.f64 #s(literal -1/8 binary64) a) (*.f64 (/.f64 c b_2) (/.f64 c b_2)) (fma.f64 (*.f64 #s(literal -1/16 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) #s(literal -5/128 binary64))))) b_2)","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 2))","(*.f64 (fma.f64 a (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal 1/2 binary64)) #s(literal -2 binary64)) b_2)","(* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (-.f64 (/.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (*.f64 (*.f64 c c) a) a)) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c (*.f64 b_2 b_2)) #s(literal 2 binary64))) b_2)","(* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(*.f64 (-.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c (*.f64 b_2 b_2)) (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (*.f64 (*.f64 c c) a) a)) (pow.f64 b_2 #s(literal 4 binary64))))) b_2)","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a)))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 2 (/ 1 a))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 c b_2) (fma.f64 (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (/.f64 #s(literal 2 binary64) a))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 2 (/ 1 a)))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 c b_2) (fma.f64 (*.f64 #s(literal -1/16 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (/.f64 #s(literal 2 binary64) a)))))","(* -1 (* b_2 (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (neg.f64 b_2) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c (*.f64 b_2 b_2)) #s(literal 2 binary64)))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(*.f64 (neg.f64 b_2) (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) a) a) (/.f64 (*.f64 c c) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c (*.f64 b_2 b_2)) #s(literal 2 binary64))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(*.f64 (neg.f64 b_2) (+.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) a) a) (/.f64 (*.f64 c c) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c (*.f64 b_2 b_2)) #s(literal 2 binary64))))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (neg.f64 b_2) (fma.f64 a (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 a (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64)) #s(literal 1 binary64))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(neg.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) a) a) (/.f64 (*.f64 c c) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (*.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c (*.f64 b_2 b_2))))) b_2 b_2))","(* -1 (* b_2 (- (+ (* -1 (/ (+ (* -1/8 (* a (pow c 2))) (* 1/4 (* a (pow c 2)))) (pow b_2 4))) (* 2 (/ 1 a))) (* 1/2 (/ c (pow b_2 2))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) #s(literal 1/8 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64) (fma.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a))))","(* -1 (* b_2 (- (+ (* -1 (/ (+ (* -1/4 (* a (* c (+ (* -1/8 (* a (pow c 2))) (* 1/4 (* a (pow c 2))))))) (+ (* -1/16 (* (pow a 2) (pow c 3))) (* 2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* (pow a 2) c))))) (pow b_2 6))) (* 2 (/ 1 a))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* 1/4 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))))))","(*.f64 (neg.f64 b_2) (-.f64 (-.f64 (/.f64 #s(literal 2 binary64) a) (/.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) #s(literal 1/8 binary64))) a (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (*.f64 (pow.f64 c #s(literal 4 binary64)) #s(literal 5/64 binary64))) (*.f64 (*.f64 a a) c)) #s(literal 2 binary64) (*.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) #s(literal -1/16 binary64)))) (pow.f64 b_2 #s(literal 6 binary64)))) (fma.f64 (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/8 binary64) (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal 1/2 binary64)))))","(* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/2 (* a c))) b_2))","(/.f64 (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) b_2) (*.f64 (*.f64 #s(literal 1/2 binary64) c) a)) (neg.f64 b_2))","(* -1 (/ (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))) (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))))) b_2))","(/.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/16 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) c) a)) (*.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) b_2))) (neg.f64 b_2))","(* -1 (/ (- (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2))","(/.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (*.f64 (pow.f64 c #s(literal 4 binary64)) #s(literal 5/64 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal 1/2 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) c) a)) (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) a) a) (*.f64 (/.f64 c b_2) (/.f64 c b_2)) (*.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))))) (neg.f64 b_2))","(* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) a) (/.f64 c (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 #s(literal -1/2 binary64) b_2)) c)","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (*.f64 a a)) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64))) c (/.f64 #s(literal -1/2 binary64) b_2)) c)","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) (* a b_2))) (* -1/16 (/ (pow a 2) (pow b_2 5))))))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 a a) (pow.f64 b_2 #s(literal 5 binary64))) #s(literal -1/16 binary64) (*.f64 (/.f64 (*.f64 (/.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (*.f64 #s(literal 5/64 binary64) c)) (*.f64 b_2 a)) #s(literal -1/2 binary64))) c (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64))) c (/.f64 #s(literal -1/2 binary64) b_2)) c)","(* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3)))))","(*.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) a) a) (/.f64 c (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c)","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) a) a) (pow.f64 b_2 #s(literal 3 binary64)))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c)","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow a 3) (pow b_2 5)))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (/.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (*.f64 #s(literal 5/64 binary64) c)) b_2) #s(literal -1/2 binary64) (/.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 5 binary64)))) c (/.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) a) a) (pow.f64 b_2 #s(literal 3 binary64)))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c)","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) a) a) (/.f64 c (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c b_2)","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) a) a) (pow.f64 b_2 #s(literal 3 binary64)))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c b_2)","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* c (+ (* -1/16 (/ (pow a 2) (pow b_2 5))) (* c (+ (* -1/32 (/ (pow a 3) (pow b_2 7))) (* -1/128 (/ (pow a 3) (pow b_2 7))))))))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 7 binary64))) (*.f64 #s(literal -5/128 binary64) c) (/.f64 (*.f64 #s(literal -1/16 binary64) (*.f64 a a)) (pow.f64 b_2 #s(literal 5 binary64)))) c (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64))) c (/.f64 #s(literal -1/2 binary64) b_2)) c)","(* -1 c)","(neg.f64 c)","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 a a)) (/.f64 c (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64))) c (*.f64 #s(literal -2 binary64) b_2))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (*.f64 (/.f64 (*.f64 a a) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64))) c (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64))) c (*.f64 #s(literal -2 binary64) b_2))","(* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) (*.f64 a c))) c)","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) (*.f64 a c)))) c)","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) (*.f64 a c))))) c)","(* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 (neg.f64 c))) c)","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b_2 c)))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 (neg.f64 c)))) c)","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 (neg.f64 c))))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))) c)","(* c (+ (* -1 a) (/ (pow b_2 2) c)))","(*.f64 (-.f64 (/.f64 (*.f64 b_2 b_2) c) a) c)","(* c (+ (* -2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2)) c)","(* c (- (* 2 (/ 1 (* a c))) (* 1/2 (/ 1 (pow b_2 2)))))","(*.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 a c)) (/.f64 #s(literal 1/2 binary64) (*.f64 b_2 b_2))) c)","(- (+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (* -1 (/ (+ (* -1/2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (pow c 2)))) (* -1 (/ b_2 (* a (pow (sqrt -1) 2)))))","(-.f64 (neg.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) c) (/.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 #s(literal -1 binary64)))) c) (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))) (/.f64 b_2 a))","(- (+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (* -1 (/ (+ (* -1 (* (sqrt (/ c a)) (/ (* b_2 (+ (* -1/2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b_2 2) (pow (sqrt -1) 3))))) (sqrt -1)))) (* 1/2 (/ (* (pow b_2 3) (pow c 2)) (* (pow a 2) (pow (sqrt -1) 4))))) (pow c 3)))) (+ (* -1 (/ b_2 (* a (pow (sqrt -1) 2)))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (pow (sqrt -1) 3))))))","(-.f64 (-.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (*.f64 a a))) (/.f64 (*.f64 c c) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (/.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 c a)) b_2) (*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))))) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (neg.f64 (pow.f64 c #s(literal 3 binary64)))) (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) (fma.f64 #s(literal 1/2 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (*.f64 b_2 b_2) #s(literal -1 binary64))) (/.f64 b_2 a)))","(* c (- (/ (pow b_2 2) c) a))","(*.f64 (-.f64 (/.f64 (*.f64 b_2 b_2) c) a) c)","(* c (- (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c)) (neg.f64 c))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c)))) c)","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c)))))","(*.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64))))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c)))) c)","(* -1 (* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 a) c)) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (/.f64 (neg.f64 b_2) a)) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)))) (neg.f64 c)) #s(literal -1 binary64) (/.f64 b_2 a)) c)) (neg.f64 c))","(* -1 (* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c)) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (neg.f64 b_2)) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)))) (neg.f64 c)) b_2) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))) (neg.f64 c))","(* -1 (* c (+ a (* -1 (/ (pow b_2 2) c)))))","(*.f64 (-.f64 (/.f64 (*.f64 b_2 b_2) c) a) c)","(* -1 (* c (- (* 2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2)))))","(*.f64 (fma.f64 (/.f64 #s(literal 2 binary64) c) (/.f64 b_2 a) (/.f64 #s(literal -1/2 binary64) b_2)) (neg.f64 c))","(* -1 (* c (- (* 1/2 (/ 1 (pow b_2 2))) (* 2 (/ 1 (* a c))))))","(*.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 b_2 b_2)) (/.f64 #s(literal 2 binary64) (*.f64 a c))) (neg.f64 c))","(+ (* -1 (/ (- (+ (* -1 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) (* -1 (/ (* b_2 c) a))) c)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (*.f64 b_2 (/.f64 c a))) (neg.f64 c)))","(+ (* -1 (/ (- (* -1 (/ (- (+ (* -1 (* (sqrt (/ 1 (* a c))) (* b_2 (* (sqrt -1) (+ (* -1 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b_2 2) (sqrt -1))))))))) (* -1/2 (/ (* (pow b_2 3) c) (pow a 2)))) (+ (* -1 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b_2 2) (sqrt -1)))))) c)) (* -1 (/ (* b_2 c) a))) c)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (/.f64 (fma.f64 (*.f64 (neg.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c))) (*.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (-.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) a) (/.f64 c a)) (*.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2))))) c) #s(literal -1 binary64) (*.f64 b_2 (/.f64 c a))) (neg.f64 c)))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))","(*.f64 (-.f64 (/.f64 (*.f64 b_2 b_2) c) a) c)","(* -1 (* c (- (/ b_2 c) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (-.f64 (/.f64 b_2 c) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (-.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b_2)) (neg.f64 c)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (-.f64 (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (pow.f64 b_2 #s(literal 4 binary64)))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) (*.f64 b_2 b_2)) #s(literal -1/2 binary64))) (neg.f64 c)) b_2) (neg.f64 c)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))"]],"stop":[["iter limit",1],["node limit",1]],"time":284.799072265625,"type":"simplify"},{"count":[[22,694]],"egraph":[[0,9504,271,0.085665917],[2,2188,277,0.032434977],[1,267,277,0.007686855],[0,68,279,0.001878653],[0,45,294,0.000431596]],"inputs":[["(/.f64 (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2) a)","(-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2)","(sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))","(fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))))","#s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)))","(*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))","(/.f64 c b_2)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (neg.f64 b_2) #s(approx (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64)))))","(*.f64 (neg.f64 b_2) #s(approx (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64))))","(neg.f64 b_2)","#s(approx (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64)))","(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","(-.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))","(/.f64 (-.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) (*.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))","(*.f64 b_2 b_2)","(neg.f64 c)","(/.f64 c (*.f64 b_2 b_2))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))","(-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))"]],"memory":[[-4311312,75713216]],"outputs":[["(*.f64 (pow.f64 (/.f64 a (-.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (*.f64 b_2 b_2))) #s(literal -1 binary64)) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 a (-.f64 (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 a (-.f64 (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b_2 b_2 (+.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b_2 b_2 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) #s(literal -1 binary64)) (/.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)) a))","(*.f64 (/.f64 (/.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)) a) (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2))) (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2))","(*.f64 (/.f64 (/.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)) a) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)))) (fma.f64 b_2 b_2 (fma.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(*.f64 (/.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)) a) (pow.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)) (pow.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) #s(literal -1 binary64)) (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) a))","(*.f64 (neg.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2))) (pow.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2)) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) (pow.f64 a #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 a (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (/.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)) a)) #s(literal -1 binary64))","(pow.f64 (/.f64 a (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (/.f64 (*.f64 b_2 b_2) a))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (*.f64 (fma.f64 b_2 b_2 (*.f64 a c)) a) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (/.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) a))","(/.f64 (-.f64 (*.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 b_2 b_2))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) #s(literal 1 binary64))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 b_2 b_2))))","(/.f64 (-.f64 (*.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 (neg.f64 b_2) b_2))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a))))","(/.f64 (-.f64 (*.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a)) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 b_2 b_2))) (pow.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) a))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) a) a) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) a) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 b_2 b_2 (*.f64 a c)))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 b_2 b_2 (*.f64 a c)))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) a) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (-.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) a) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) a) (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) #s(literal 1 binary64))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) a) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) a) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) a) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a)) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (*.f64 a (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) a))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) a) (*.f64 a (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 b_2 b_2 (*.f64 a c)))) (*.f64 a (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))) (*.f64 a (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 b_2 b_2 (*.f64 a c)))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)))) (*.f64 a (-.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (*.f64 a (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a))) (*.f64 a (neg.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (*.f64 a (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))))) (*.f64 a (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))))) (*.f64 a (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))) (*.f64 a (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))))) (*.f64 a (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a)) (*.f64 a (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (*.f64 a (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (*.f64 (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 b_2 b_2)) (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) a))) (*.f64 (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 b_2 b_2)) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 b_2 b_2)) (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))))) (*.f64 (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 b_2 b_2)) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 b_2 b_2 (*.f64 a c)))) (*.f64 (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 b_2 b_2)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))) (*.f64 (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 b_2 b_2)) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 b_2 b_2 (*.f64 a c)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)))) (*.f64 (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 b_2 b_2)) (-.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (*.f64 (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 b_2 b_2)) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a))) (*.f64 (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 b_2 b_2)) (neg.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (*.f64 (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 b_2 b_2)) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (*.f64 (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 b_2 b_2)) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 b_2 b_2)) (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))))) (*.f64 (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 b_2 b_2)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))))) (*.f64 (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 b_2 b_2)) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))) (*.f64 (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 b_2 b_2)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))))) (*.f64 (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 b_2 b_2)) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a)) (*.f64 (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 b_2 b_2)) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (*.f64 (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 b_2 b_2)) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a)))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b_2) b_2) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)) (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) a))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b_2) b_2) a) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)) (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)) a))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b_2) b_2) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 b_2 b_2 (*.f64 a c)))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 b_2 b_2 (*.f64 a c)))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b_2) b_2) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)) (-.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b_2) b_2) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)) (neg.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b_2) b_2) (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)) #s(literal 1 binary64))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)) (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b_2) b_2) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b_2) b_2) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b_2) b_2) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a)) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a)))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) a))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) a) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) a))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 b_2 b_2 (*.f64 a c)))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 b_2 b_2 (*.f64 a c)))))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (-.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)))))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (neg.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a))))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) #s(literal 1 binary64))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (/.f64 a b_2)) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 a b_2)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)) (*.f64 (neg.f64 a) (neg.f64 b_2))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 (neg.f64 a) b_2)) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 a b_2)) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) #s(literal 1 binary64))) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (/.f64 a b_2)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 a)) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 b_2))) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) b_2)) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (/.f64 a b_2)) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 a b_2)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (neg.f64 a)) (*.f64 a (neg.f64 b_2))) (*.f64 a (neg.f64 a)))","(/.f64 (-.f64 (*.f64 (neg.f64 b_2) b_2) (neg.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)))","(/.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 b_2)) (neg.f64 a))","(/.f64 (/.f64 (neg.f64 (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2)) #s(literal -1 binary64)) a)","(/.f64 (*.f64 (-.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 a #s(literal -1 binary64))) (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 a #s(literal -1 binary64))) (fma.f64 b_2 (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 a #s(literal -1 binary64))) (fma.f64 b_2 b_2 (+.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 2 binary64))) (pow.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) #s(literal -1 binary64))) (fma.f64 b_2 b_2 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3 binary64))) (pow.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) #s(literal -1 binary64))) (fma.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (pow.f64 b_2 #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) #s(literal 1 binary64)) a)","(/.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (*.f64 b_2 b_2) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) #s(literal 2 binary64)) (pow.f64 (/.f64 (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) #s(literal 2 binary64))) (fma.f64 (/.f64 b_2 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (/.f64 b_2 a) (/.f64 (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) a) #s(literal 2 binary64)) (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64))) (+.f64 (/.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) a) (/.f64 b_2 a)))","(/.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (*.f64 b_2 b_2) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) #s(literal 3 binary64)) (pow.f64 (/.f64 (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (/.f64 (*.f64 b_2 b_2) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) #s(literal 2 binary64)) (*.f64 (/.f64 (/.f64 (*.f64 b_2 b_2) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (/.f64 (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) a) #s(literal 3 binary64)) (pow.f64 (/.f64 b_2 a) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) a) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) a) (/.f64 b_2 a)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (/.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)) a)) (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)))) (neg.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a))))","(/.f64 (*.f64 (-.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) #s(literal 1 binary64)) (*.f64 (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) a))","(/.f64 (*.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)) #s(literal 1 binary64)) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) a))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b_2 b_2 (+.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2))) a))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b_2 b_2 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a)))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a)) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (pow.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) a) (*.f64 a b_2)) (*.f64 a a))","(/.f64 (/.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 2 binary64))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 b_2 b_2 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (*.f64 a (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2)))","(/.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (/.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)) a)))","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2)))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3 binary64))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 a (fma.f64 b_2 (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 a (fma.f64 b_2 b_2 (+.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2)))))","(/.f64 (neg.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2)) (neg.f64 a))","(/.f64 (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) a)","(neg.f64 (/.f64 (neg.f64 (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2)) a))","(neg.f64 (/.f64 (neg.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a)))","(neg.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) (neg.f64 a)))","(neg.f64 (/.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a))))","(fma.f64 (/.f64 b_2 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (/.f64 b_2 a) (neg.f64 (/.f64 (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))))","(fma.f64 (/.f64 b_2 a) (/.f64 b_2 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (neg.f64 (/.f64 (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))))","(fma.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (pow.f64 a #s(literal -1 binary64)) (neg.f64 (/.f64 b_2 a)))","(fma.f64 (*.f64 b_2 b_2) (pow.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) #s(literal -1 binary64)) (neg.f64 (/.f64 (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))))","(fma.f64 b_2 (/.f64 b_2 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a)) (neg.f64 (/.f64 (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))))","(-.f64 (/.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a)) (/.f64 (/.f64 (*.f64 b_2 b_2) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))))","(-.f64 (/.f64 (/.f64 (*.f64 b_2 b_2) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (/.f64 (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))))","(-.f64 (/.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) a) (/.f64 b_2 a))","(exp.f64 (*.f64 (log.f64 (/.f64 a (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2))) #s(literal -1 binary64)))","(+.f64 (/.f64 (/.f64 (*.f64 b_2 b_2) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (neg.f64 (/.f64 (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))))","(+.f64 (/.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) a) (neg.f64 (/.f64 b_2 a)))","(*.f64 (/.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)) (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2))) (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2))","(*.f64 (/.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)))) (fma.f64 b_2 b_2 (fma.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(*.f64 (-.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)))","(*.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)) (pow.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 (fma.f64 b_2 b_2 (+.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) (-.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (*.f64 b_2 b_2))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (-.f64 (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b_2 b_2 (+.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2))) (-.f64 (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2)) (*.f64 (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) (*.f64 b_2 b_2))) (*.f64 (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2)))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (*.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (fma.f64 b_2 (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 a c))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 a c) #s(literal 2 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 a c)))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (sqrt.f64 (-.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (sqrt.f64 (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64)))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (hypot.f64 (pow.f64 (*.f64 a c) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (sqrt.f64 (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (sqrt.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64)))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (hypot.f64 (pow.f64 (*.f64 a c) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (sqrt.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 b_2) b_2) (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 a c))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 a c) #s(literal 2 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 a c)))))","(/.f64 (fma.f64 (*.f64 (neg.f64 b_2) b_2) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) (sqrt.f64 (-.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)))))","(/.f64 (fma.f64 (*.f64 (neg.f64 b_2) b_2) (sqrt.f64 (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64)))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) (hypot.f64 (pow.f64 (*.f64 a c) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) (sqrt.f64 (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 b_2) b_2) (sqrt.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64)))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) (hypot.f64 (pow.f64 (*.f64 a c) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) (sqrt.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))))","(/.f64 (fma.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 a c) #s(literal 2 binary64)))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (*.f64 (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 a c))) (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))))) (*.f64 (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 a c))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))))","(/.f64 (fma.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 a c) #s(literal 2 binary64)))) (+.f64 #s(literal 0 binary64) b_2) (*.f64 (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 a c))) (*.f64 (neg.f64 b_2) b_2))) (*.f64 (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 a c))) (+.f64 #s(literal 0 binary64) b_2)))","(/.f64 (fma.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (*.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2))) (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))))) (*.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))))","(/.f64 (fma.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (+.f64 #s(literal 0 binary64) b_2) (*.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2))) (*.f64 (neg.f64 b_2) b_2))) (*.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2))) (+.f64 #s(literal 0 binary64) b_2)))","(/.f64 (fma.f64 (hypot.f64 (pow.f64 (*.f64 a c) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64)))) (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64)))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))))","(/.f64 (fma.f64 (hypot.f64 (pow.f64 (*.f64 a c) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) b_2) (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64)))) (*.f64 (neg.f64 b_2) b_2))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64)))) (+.f64 #s(literal 0 binary64) b_2)))","(/.f64 (fma.f64 (hypot.f64 (pow.f64 (*.f64 a c) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64)))) (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64)))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))))","(/.f64 (fma.f64 (hypot.f64 (pow.f64 (*.f64 a c) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) b_2) (*.f64 (sqrt.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64)))) (*.f64 (neg.f64 b_2) b_2))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64)))) (+.f64 #s(literal 0 binary64) b_2)))","(/.f64 (neg.f64 (-.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (*.f64 b_2 b_2))) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (neg.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (neg.f64 (fma.f64 b_2 b_2 (+.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2)))))","(/.f64 (-.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (neg.f64 b_2)))","(/.f64 (-.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2))","(/.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) (-.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (*.f64 b_2 b_2))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (-.f64 (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b_2 b_2 (+.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2))) (-.f64 (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (-.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (fma.f64 b_2 (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))","(/.f64 (-.f64 (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (fma.f64 b_2 b_2 (+.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2))))","(/.f64 (neg.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2))) (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))))","(fma.f64 (sqrt.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (sqrt.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 b_2))","(fma.f64 (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) (neg.f64 b_2))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 a c) #s(literal 2 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) #s(literal -1 binary64))) (neg.f64 b_2))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 a c) #s(literal 2 binary64)))) (pow.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b_2))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)) #s(literal -1 binary64))) (neg.f64 b_2))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (pow.f64 (pow.f64 (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b_2))","(fma.f64 (hypot.f64 (pow.f64 (*.f64 a c) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64))) (neg.f64 b_2))","(fma.f64 (hypot.f64 (pow.f64 (*.f64 a c) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))) #s(literal -1 binary64))) (neg.f64 b_2))","(fma.f64 (hypot.f64 (pow.f64 (*.f64 a c) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 (pow.f64 (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b_2))","(fma.f64 (hypot.f64 (pow.f64 (*.f64 a c) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 (pow.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b_2))","(fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))","(fma.f64 b_2 #s(literal -1 binary64) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))","(-.f64 (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) #s(literal 0 binary64)) b_2)","(-.f64 (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2)) (/.f64 (*.f64 b_2 b_2) (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2)))","(-.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(-.f64 #s(literal 0 binary64) (-.f64 b_2 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2)","(+.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))","(+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (neg.f64 b_2))","(*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (sqrt.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(*.f64 (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 a c) #s(literal 2 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 a c) #s(literal 2 binary64)))) (pow.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (pow.f64 (pow.f64 (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (hypot.f64 (pow.f64 (*.f64 a c) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (hypot.f64 (pow.f64 (*.f64 a c) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (hypot.f64 (pow.f64 (*.f64 a c) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 (pow.f64 (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (hypot.f64 (pow.f64 (*.f64 a c) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 (pow.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(pow.f64 (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) #s(literal 1 binary64))","(pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 1/2 binary64))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 b_2 b_2 (*.f64 a c)))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 a c) #s(literal 2 binary64)))) (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 a c))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2))))","(/.f64 (hypot.f64 (pow.f64 (*.f64 a c) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (sqrt.f64 (+.f64 (pow.f64 b_2 #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (neg.f64 a) c) b_2) b_2)))))","(/.f64 (hypot.f64 (pow.f64 (*.f64 a c) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (sqrt.f64 (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 (hypot.f64 (pow.f64 (*.f64 a c) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (sqrt.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)) (-.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))))))","(sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))","(fabs.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))","(exp.f64 (log.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(*.f64 (pow.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))) (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (pow.f64 (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))","(pow.f64 (/.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 a c) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)) (-.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (neg.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) #s(literal 2 binary64))","(pow.f64 (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) #s(literal 2 binary64))","(pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 1 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 b_2 b_2 (*.f64 a c))) (*.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64)))) (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2))) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)) (pow.f64 b_2 #s(literal 4 binary64)))) (pow.f64 (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64)))) (*.f64 (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))) (pow.f64 (*.f64 a c) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 2 binary64)))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 a c))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (sqrt.f64 (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (sqrt.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64)))))","(/.f64 (sqrt.f64 (*.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))) (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 a c))))","(/.f64 (sqrt.f64 (*.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (-.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2))))","(/.f64 (sqrt.f64 (*.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))))) (sqrt.f64 (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 (sqrt.f64 (*.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))))) (sqrt.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64)))))","(/.f64 (sqrt.f64 (pow.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))) #s(literal 2 binary64))) (sqrt.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) #s(literal 2 binary64))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (sqrt.f64 (*.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))))) (sqrt.f64 (*.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))))) (sqrt.f64 (*.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))) (sqrt.f64 (*.f64 (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)) (fma.f64 b_2 b_2 (*.f64 a c)))))","(/.f64 (sqrt.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 2 binary64))) (sqrt.f64 (pow.f64 (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)) #s(literal 2 binary64))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))))) (sqrt.f64 (*.f64 (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)) (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))))) (sqrt.f64 (*.f64 (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)) (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))) (sqrt.f64 (*.f64 (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 b_2 b_2 (*.f64 a c)))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))) (sqrt.f64 (*.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))) (fma.f64 b_2 b_2 (*.f64 a c)))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))) (-.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (sqrt.f64 (*.f64 (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))) (-.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (sqrt.f64 (*.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))) (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)))))","(/.f64 (sqrt.f64 (pow.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))) #s(literal 2 binary64))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 2 binary64))))","(/.f64 (sqrt.f64 (pow.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))) #s(literal 2 binary64))) (sqrt.f64 (*.f64 (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))))","(/.f64 (sqrt.f64 (pow.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))) #s(literal 2 binary64))) (sqrt.f64 (*.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))) (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 (sqrt.f64 (pow.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))) #s(literal 2 binary64))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 a c) #s(literal 2 binary64)))) (neg.f64 (fma.f64 b_2 b_2 (*.f64 a c))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (neg.f64 (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))) (fma.f64 b_2 b_2 (*.f64 a c)))","(/.f64 (-.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 a c) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)) (-.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))) (+.f64 (pow.f64 b_2 #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (neg.f64 a) c) b_2) b_2))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))) (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))) (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))","(fma.f64 (exp.f64 (log.f64 b_2)) (exp.f64 (log.f64 b_2)) (*.f64 (neg.f64 a) c))","(fma.f64 (*.f64 (neg.f64 b_2) #s(literal -1 binary64)) b_2 (*.f64 (neg.f64 a) c))","(fma.f64 #s(literal -1 binary64) (*.f64 (neg.f64 b_2) b_2) (*.f64 (neg.f64 a) c))","(fma.f64 #s(literal -1 binary64) (*.f64 a c) (*.f64 b_2 b_2))","(fma.f64 #s(literal 1 binary64) (*.f64 b_2 b_2) (*.f64 (neg.f64 a) c))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(fma.f64 (neg.f64 b_2) (neg.f64 b_2) (*.f64 (neg.f64 a) c))","(fma.f64 (*.f64 b_2 b_2) #s(literal 1 binary64) (*.f64 (neg.f64 a) c))","(fma.f64 b_2 b_2 (*.f64 (neg.f64 a) c))","(fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))","(fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))","(fma.f64 c (neg.f64 a) (*.f64 b_2 b_2))","(sqrt.f64 (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 2 binary64)))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 b_2 b_2 (*.f64 a c))) (/.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (fma.f64 b_2 b_2 (*.f64 a c))))","(-.f64 (/.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2))))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64)))))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","(fabs.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 2 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))","(+.f64 (*.f64 (neg.f64 a) c) (*.f64 b_2 b_2))","(+.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 a) c))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))))","#s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)))","(*.f64 (*.f64 #s(literal 1/2 binary64) c) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))","(*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))","(*.f64 c (*.f64 (pow.f64 b_2 #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(pow.f64 (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) #s(literal -1 binary64))","(/.f64 (*.f64 (neg.f64 c) #s(literal 1/2 binary64)) (neg.f64 b_2))","(/.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 c)) (neg.f64 b_2))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2))","(/.f64 (*.f64 #s(literal 1/2 binary64) c) b_2)","(/.f64 #s(literal 1 binary64) (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)))","(/.f64 #s(literal 1/2 binary64) (/.f64 b_2 c))","(*.f64 #s(literal -1 binary64) (/.f64 (neg.f64 c) b_2))","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (pow.f64 (pow.f64 c #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) c)","(*.f64 #s(literal 1 binary64) (/.f64 c b_2))","(*.f64 (neg.f64 c) (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)))","(*.f64 c (pow.f64 b_2 #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 b_2 c) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 b_2 c) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 b_2)) (*.f64 (neg.f64 b_2) (neg.f64 (neg.f64 c)))) (*.f64 b_2 b_2))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (/.f64 b_2 c)) (*.f64 (neg.f64 b_2) #s(literal -1 binary64))) (*.f64 (neg.f64 b_2) (/.f64 b_2 c)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 (/.f64 b_2 c))) (*.f64 (neg.f64 b_2) #s(literal 1 binary64))) (*.f64 (neg.f64 b_2) (neg.f64 (/.f64 b_2 c))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 (neg.f64 b_2))) (*.f64 (neg.f64 b_2) (neg.f64 c))) (*.f64 (neg.f64 b_2) (neg.f64 (neg.f64 b_2))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) b_2) (*.f64 (neg.f64 b_2) (neg.f64 c))) (*.f64 (neg.f64 b_2) b_2))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 b_2)) (*.f64 (neg.f64 b_2) c)) (*.f64 b_2 b_2))","(/.f64 (-.f64 #s(literal 0 binary64) (neg.f64 (neg.f64 c))) (neg.f64 b_2))","(/.f64 (/.f64 (neg.f64 c) #s(literal -1 binary64)) b_2)","(/.f64 (neg.f64 (neg.f64 c)) (neg.f64 (neg.f64 b_2)))","(/.f64 (*.f64 c #s(literal 1 binary64)) b_2)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 b_2 c)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b_2 c) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 b_2 c))","(/.f64 (neg.f64 c) (neg.f64 b_2))","(/.f64 c b_2)","(neg.f64 (/.f64 (neg.f64 c) b_2))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 b_2)) (/.f64 (neg.f64 c) b_2))","(exp.f64 (*.f64 (log.f64 (/.f64 b_2 c)) #s(literal -1 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(approx (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (*.f64 (*.f64 #s(literal -1/2 binary64) c) (pow.f64 b_2 #s(literal -2 binary64)))) (neg.f64 b_2)))","(*.f64 (*.f64 #s(approx (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (*.f64 (*.f64 #s(literal -1/2 binary64) c) (pow.f64 b_2 #s(literal -2 binary64)))) #s(literal -1 binary64)) b_2)","(*.f64 #s(literal -1 binary64) (*.f64 #s(approx (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (*.f64 (*.f64 #s(literal -1/2 binary64) c) (pow.f64 b_2 #s(literal -2 binary64)))) b_2))","(*.f64 #s(approx (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (*.f64 (*.f64 #s(literal -1/2 binary64) c) (pow.f64 b_2 #s(literal -2 binary64)))) (neg.f64 b_2))","(*.f64 (neg.f64 b_2) #s(approx (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (*.f64 (*.f64 #s(literal -1/2 binary64) c) (pow.f64 b_2 #s(literal -2 binary64)))))","(*.f64 b_2 (neg.f64 #s(approx (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (*.f64 (*.f64 #s(literal -1/2 binary64) c) (pow.f64 b_2 #s(literal -2 binary64))))))","(neg.f64 (*.f64 #s(approx (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (*.f64 (*.f64 #s(literal -1/2 binary64) c) (pow.f64 b_2 #s(literal -2 binary64)))) b_2))","(-.f64 #s(literal 0 binary64) (*.f64 #s(approx (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (*.f64 (*.f64 #s(literal -1/2 binary64) c) (pow.f64 b_2 #s(literal -2 binary64)))) b_2))","(*.f64 #s(literal -1 binary64) b_2)","(*.f64 b_2 #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))))","(/.f64 (*.f64 (neg.f64 b_2) b_2) (+.f64 #s(literal 0 binary64) b_2))","(neg.f64 b_2)","(-.f64 #s(literal 0 binary64) b_2)","(+.f64 #s(literal 0 binary64) (neg.f64 b_2))","#s(approx (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (*.f64 (*.f64 #s(literal -1/2 binary64) c) (pow.f64 b_2 #s(literal -2 binary64))))","(*.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (pow.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64))) (pow.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))) (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(/.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (neg.f64 b_2)))","(/.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))))","(/.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))) (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64)))))","(/.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64))) (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) (-.f64 (*.f64 b_2 b_2) (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (neg.f64 b_2)))))","(/.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64))) (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))))","(fma.f64 (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (neg.f64 b_2))","(fma.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 1/4 binary64)) (neg.f64 b_2))","(fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","(fma.f64 b_2 #s(literal -1 binary64) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","(-.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) #s(literal 0 binary64)) b_2)","(-.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) (/.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(-.f64 #s(literal 0 binary64) (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2)","(+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (neg.f64 b_2))","(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","(*.f64 (pow.f64 (/.f64 a (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 a (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) a))","(*.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2)) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) (pow.f64 a #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2)) #s(literal -1 binary64))","(/.f64 (/.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2)) #s(literal -1 binary64)) a)","(/.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (pow.f64 a #s(literal -1 binary64))) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(/.f64 (*.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64))) (pow.f64 a #s(literal -1 binary64))) (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))))","(/.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) #s(literal 1 binary64)) a)","(/.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2))) (neg.f64 (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) #s(literal 1 binary64)) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a))","(/.f64 (*.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))) a))","(/.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (*.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2)))","(/.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64))) (*.f64 a (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2)) (neg.f64 a))","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) a)","(neg.f64 (/.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2)) a))","(neg.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) (neg.f64 a)))","(exp.f64 (*.f64 (log.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2))) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(*.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 1/4 binary64)))","(pow.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) #s(literal 1 binary64))","(pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","(fabs.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","(exp.f64 (log.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 2 binary64))) (pow.f64 (fma.f64 b_2 b_2 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(pow.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (pow.f64 b_2 #s(literal 4 binary64))) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 b_2 b_2 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (*.f64 (fma.f64 b_2 b_2 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 2 binary64)))) (*.f64 (fma.f64 b_2 b_2 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (fma.f64 b_2 b_2 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (fma.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (pow.f64 b_2 #s(literal 4 binary64)))) (*.f64 (fma.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (pow.f64 b_2 #s(literal 4 binary64))) (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3 binary64)))) (*.f64 (fma.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (+.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)))","(/.f64 (-.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (+.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) #s(literal 2 binary64)) (+.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 2 binary64))) (-.f64 (*.f64 b_2 b_2) (neg.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 2 binary64))) (fma.f64 b_2 b_2 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b_2 b_2 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (pow.f64 b_2 #s(literal 4 binary64))) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3 binary64))) (+.f64 (pow.f64 b_2 #s(literal 4 binary64)) (-.f64 (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 2 binary64)) (*.f64 (*.f64 b_2 b_2) (neg.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3 binary64))) (fma.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (pow.f64 b_2 #s(literal 4 binary64))))","(fma.f64 (exp.f64 (log.f64 b_2)) (exp.f64 (log.f64 b_2)) (*.f64 (neg.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(fma.f64 (exp.f64 (log.f64 b_2)) (exp.f64 (log.f64 b_2)) (neg.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))","(fma.f64 (*.f64 (neg.f64 b_2) #s(literal -1 binary64)) b_2 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(fma.f64 (*.f64 (neg.f64 b_2) #s(literal -1 binary64)) b_2 (neg.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))","(fma.f64 #s(literal -1 binary64) (*.f64 (neg.f64 b_2) b_2) (*.f64 (neg.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(fma.f64 #s(literal -1 binary64) (*.f64 (neg.f64 b_2) b_2) (neg.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))","(fma.f64 #s(literal -1 binary64) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (*.f64 b_2 b_2))","(fma.f64 #s(literal 1 binary64) (*.f64 b_2 b_2) (*.f64 (neg.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(fma.f64 #s(literal 1 binary64) (*.f64 b_2 b_2) (neg.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))","(fma.f64 (neg.f64 b_2) (neg.f64 b_2) (*.f64 (neg.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(fma.f64 (neg.f64 b_2) (neg.f64 b_2) (neg.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))","(fma.f64 (*.f64 b_2 b_2) #s(literal 1 binary64) (*.f64 (neg.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(fma.f64 (*.f64 b_2 b_2) #s(literal 1 binary64) (neg.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))","(fma.f64 b_2 b_2 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(fma.f64 b_2 b_2 (neg.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))","(-.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) c))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 b_2 b_2 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (/.f64 (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 2 binary64)) (fma.f64 b_2 b_2 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (fma.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (pow.f64 b_2 #s(literal 4 binary64)))) (/.f64 (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3 binary64)) (fma.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (pow.f64 b_2 #s(literal 4 binary64)))))","(-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))","(+.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2)) (*.f64 a c))","(+.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 (neg.f64 b_2) b_2))","(+.f64 (neg.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (*.f64 b_2 b_2))","(+.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(+.f64 (*.f64 b_2 b_2) (neg.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))","(*.f64 (pow.f64 (/.f64 a (-.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (*.f64 b_2 b_2))) #s(literal -1 binary64)) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 a (-.f64 (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 a (-.f64 (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b_2 b_2 (+.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b_2 b_2 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) #s(literal -1 binary64)) (/.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)) a))","(*.f64 (/.f64 (/.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)) a) (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2))) (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2))","(*.f64 (/.f64 (/.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)) a) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)))) (fma.f64 b_2 b_2 (fma.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(*.f64 (/.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)) a) (pow.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)) (pow.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) #s(literal -1 binary64)) (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) a))","(*.f64 (neg.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2))) (pow.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2)) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) (pow.f64 a #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 a (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (/.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)) a)) #s(literal -1 binary64))","(pow.f64 (/.f64 a (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (/.f64 (*.f64 b_2 b_2) a))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (*.f64 (fma.f64 b_2 b_2 (*.f64 a c)) a) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (/.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) a))","(/.f64 (-.f64 (*.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 b_2 b_2))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) #s(literal 1 binary64))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 b_2 b_2))))","(/.f64 (-.f64 (*.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 (neg.f64 b_2) b_2))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a))))","(/.f64 (-.f64 (*.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a)) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 b_2 b_2))) (pow.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) a))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) a) a) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) a) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 b_2 b_2 (*.f64 a c)))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 b_2 b_2 (*.f64 a c)))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) a) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (-.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) a) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) a) (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) #s(literal 1 binary64))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) a) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) a) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) a) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a)) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (*.f64 a (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) a))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) a) (*.f64 a (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 b_2 b_2 (*.f64 a c)))) (*.f64 a (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))) (*.f64 a (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 b_2 b_2 (*.f64 a c)))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)))) (*.f64 a (-.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (*.f64 a (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a))) (*.f64 a (neg.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (*.f64 a (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))))) (*.f64 a (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))))) (*.f64 a (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))) (*.f64 a (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))))) (*.f64 a (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a)) (*.f64 a (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (*.f64 a (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (*.f64 (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 b_2 b_2)) (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) a))) (*.f64 (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 b_2 b_2)) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 b_2 b_2)) (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))))) (*.f64 (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 b_2 b_2)) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 b_2 b_2 (*.f64 a c)))) (*.f64 (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 b_2 b_2)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))) (*.f64 (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 b_2 b_2)) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 b_2 b_2 (*.f64 a c)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)))) (*.f64 (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 b_2 b_2)) (-.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (*.f64 (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 b_2 b_2)) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a))) (*.f64 (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 b_2 b_2)) (neg.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (*.f64 (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 b_2 b_2)) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (*.f64 (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 b_2 b_2)) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 b_2 b_2)) (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))))) (*.f64 (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 b_2 b_2)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))))) (*.f64 (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 b_2 b_2)) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))) (*.f64 (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 b_2 b_2)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))))) (*.f64 (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 b_2 b_2)) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a)) (*.f64 (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 b_2 b_2)) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (*.f64 (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 b_2 b_2)) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a)))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b_2) b_2) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)) (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) a))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b_2) b_2) a) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)) (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)) a))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b_2) b_2) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 b_2 b_2 (*.f64 a c)))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 b_2 b_2 (*.f64 a c)))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b_2) b_2) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)) (-.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b_2) b_2) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)) (neg.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b_2) b_2) (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)) #s(literal 1 binary64))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)) (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b_2) b_2) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b_2) b_2) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b_2) b_2) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a)) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a)))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) a))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) a) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) a))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 b_2 b_2 (*.f64 a c)))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 b_2 b_2 (*.f64 a c)))))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (-.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)))))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (neg.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a))))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) #s(literal 1 binary64))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 a c) #s(literal 3 binary64))))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (/.f64 a b_2)) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 a b_2)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)) (*.f64 (neg.f64 a) (neg.f64 b_2))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (*.f64 (neg.f64 a) b_2)) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 a b_2)) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) #s(literal 1 binary64))) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (/.f64 a b_2)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 a)) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 b_2))) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) b_2)) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (/.f64 a b_2)) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 a b_2)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (neg.f64 a)) (*.f64 a (neg.f64 b_2))) (*.f64 a (neg.f64 a)))","(/.f64 (-.f64 (*.f64 (neg.f64 b_2) b_2) (neg.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)))","(/.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 b_2)) (neg.f64 a))","(/.f64 (/.f64 (neg.f64 (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2)) #s(literal -1 binary64)) a)","(/.f64 (*.f64 (-.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 a #s(literal -1 binary64))) (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 a #s(literal -1 binary64))) (fma.f64 b_2 (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 a #s(literal -1 binary64))) (fma.f64 b_2 b_2 (+.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 2 binary64))) (pow.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) #s(literal -1 binary64))) (fma.f64 b_2 b_2 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3 binary64))) (pow.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) #s(literal -1 binary64))) (fma.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (pow.f64 b_2 #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) #s(literal 1 binary64)) a)","(/.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (*.f64 b_2 b_2) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) #s(literal 2 binary64)) (pow.f64 (/.f64 (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) #s(literal 2 binary64))) (fma.f64 (/.f64 b_2 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (/.f64 b_2 a) (/.f64 (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) a) #s(literal 2 binary64)) (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64))) (+.f64 (/.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) a) (/.f64 b_2 a)))","(/.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (*.f64 b_2 b_2) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) #s(literal 3 binary64)) (pow.f64 (/.f64 (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (/.f64 (*.f64 b_2 b_2) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) #s(literal 2 binary64)) (*.f64 (/.f64 (/.f64 (*.f64 b_2 b_2) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (/.f64 (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) a) #s(literal 3 binary64)) (pow.f64 (/.f64 b_2 a) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) a) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) a) (/.f64 b_2 a)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (/.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)) a)) (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)))) (neg.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a))))","(/.f64 (*.f64 (-.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) #s(literal 1 binary64)) (*.f64 (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) a))","(/.f64 (*.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)) #s(literal 1 binary64)) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) a))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b_2 b_2 (+.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2))) a))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b_2 b_2 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a)))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a)) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (pow.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) a) (*.f64 a b_2)) (*.f64 a a))","(/.f64 (/.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 2 binary64))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 b_2 b_2 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (*.f64 a (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2)))","(/.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (/.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)) a)))","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2)))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3 binary64))) (*.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) (fma.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 a (fma.f64 b_2 (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 a (fma.f64 b_2 b_2 (+.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2)))))","(/.f64 (neg.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a)))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2)) (neg.f64 a))","(/.f64 (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) a)","(neg.f64 (/.f64 (neg.f64 (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2)) a))","(neg.f64 (/.f64 (neg.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a)))","(neg.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) (neg.f64 a)))","(neg.f64 (/.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 a))))","(fma.f64 (/.f64 b_2 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (/.f64 b_2 a) (neg.f64 (/.f64 (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))))","(fma.f64 (/.f64 b_2 a) (/.f64 b_2 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (neg.f64 (/.f64 (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))))","(fma.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (pow.f64 a #s(literal -1 binary64)) (neg.f64 (/.f64 b_2 a)))","(fma.f64 (*.f64 b_2 b_2) (pow.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a) #s(literal -1 binary64)) (neg.f64 (/.f64 (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))))","(fma.f64 b_2 (/.f64 b_2 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a)) (neg.f64 (/.f64 (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))))","(-.f64 (/.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) a)) (/.f64 (/.f64 (*.f64 b_2 b_2) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))))","(-.f64 (/.f64 (/.f64 (*.f64 b_2 b_2) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (/.f64 (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))))","(-.f64 (/.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) a) (/.f64 b_2 a))","(exp.f64 (*.f64 (log.f64 (/.f64 a (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2))) #s(literal -1 binary64)))","(+.f64 (/.f64 (/.f64 (*.f64 b_2 b_2) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (neg.f64 (/.f64 (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))))","(+.f64 (/.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) a) (neg.f64 (/.f64 b_2 a)))","(*.f64 (exp.f64 (log.f64 b_2)) (exp.f64 (log.f64 b_2)))","(*.f64 (*.f64 (neg.f64 b_2) #s(literal -1 binary64)) b_2)","(*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 b_2) b_2))","(*.f64 #s(literal 1 binary64) (*.f64 b_2 b_2))","(*.f64 (neg.f64 b_2) (neg.f64 b_2))","(*.f64 (*.f64 b_2 b_2) #s(literal 1 binary64))","(*.f64 b_2 b_2)","(pow.f64 (exp.f64 (log.f64 b_2)) #s(literal 2 binary64))","(pow.f64 (neg.f64 b_2) #s(literal 2 binary64))","(pow.f64 (*.f64 b_2 b_2) #s(literal 1 binary64))","(pow.f64 b_2 #s(literal 2 binary64))","(neg.f64 (*.f64 (neg.f64 b_2) b_2))","(exp.f64 (*.f64 (log.f64 (neg.f64 b_2)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 b_2) #s(literal 2 binary64)))","(*.f64 #s(literal -1 binary64) c)","(*.f64 c #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 c c)) (+.f64 #s(literal 0 binary64) c))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 c #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 c c (*.f64 #s(literal 0 binary64) c))))","(neg.f64 c)","(-.f64 #s(literal 0 binary64) c)","(+.f64 #s(literal 0 binary64) (neg.f64 c))","(*.f64 (pow.f64 (/.f64 b_2 (neg.f64 c)) #s(literal -1 binary64)) (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 c (*.f64 (neg.f64 b_2) b_2)))","(*.f64 (pow.f64 b_2 #s(literal -2 binary64)) (pow.f64 (pow.f64 c #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 b_2 #s(literal -2 binary64)) c)","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (/.f64 c b_2))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 c b_2) b_2))","(*.f64 (/.f64 (neg.f64 c) b_2) (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)))","(*.f64 (/.f64 c b_2) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 (neg.f64 c) (pow.f64 (*.f64 (neg.f64 b_2) b_2) #s(literal -1 binary64)))","(*.f64 c (pow.f64 b_2 #s(literal -2 binary64)))","(pow.f64 (/.f64 (/.f64 (*.f64 b_2 b_2) c) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 b_2 b_2) c) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (neg.f64 b_2) b_2)) (*.f64 (*.f64 (neg.f64 b_2) b_2) c)) (pow.f64 b_2 #s(literal 4 binary64)))","(/.f64 (/.f64 (/.f64 (neg.f64 c) b_2) #s(literal -1 binary64)) b_2)","(/.f64 (*.f64 (/.f64 c b_2) #s(literal 1 binary64)) b_2)","(/.f64 (neg.f64 (neg.f64 c)) (*.f64 b_2 b_2))","(/.f64 (*.f64 (neg.f64 c) #s(literal 1 binary64)) (*.f64 (neg.f64 b_2) b_2))","(/.f64 (*.f64 c #s(literal 1 binary64)) (*.f64 b_2 b_2))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 b_2 b_2) c)))","(/.f64 (pow.f64 b_2 #s(literal -1 binary64)) (/.f64 b_2 c))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 b_2 b_2) c) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 b_2 b_2) c))","(/.f64 (/.f64 (neg.f64 c) b_2) (neg.f64 b_2))","(/.f64 (/.f64 c b_2) (neg.f64 (neg.f64 b_2)))","(/.f64 (/.f64 c b_2) b_2)","(/.f64 (neg.f64 c) (*.f64 (neg.f64 b_2) b_2))","(/.f64 c (*.f64 b_2 b_2))","(neg.f64 (/.f64 (/.f64 (neg.f64 c) b_2) b_2))","(neg.f64 (/.f64 (neg.f64 c) (*.f64 b_2 b_2)))","(neg.f64 (/.f64 (/.f64 c b_2) (neg.f64 b_2)))","(neg.f64 (/.f64 c (*.f64 (neg.f64 b_2) b_2)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (neg.f64 b_2) b_2)) (/.f64 c (*.f64 (neg.f64 b_2) b_2)))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 b_2 b_2) c)) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","(pow.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) #s(literal 2 binary64))","(pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 1 binary64))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))","(sqrt.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 2 binary64)))","(fabs.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","(exp.f64 (*.f64 (log.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 2 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) #s(literal 1 binary64)))","(exp.f64 (log.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","(*.f64 (/.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)) (-.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (*.f64 b_2 b_2))) (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2))","(*.f64 (/.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)) (-.f64 (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (fma.f64 b_2 (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))","(*.f64 (/.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)) (-.f64 (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (fma.f64 b_2 b_2 (+.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2))))","(*.f64 (/.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)) (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2))) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(*.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3/2 binary64))) (pow.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2)))","(/.f64 (-.f64 (*.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 b_2 (fma.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)))) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (fma.f64 b_2 b_2 (fma.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 a c)))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 a c) #s(literal 2 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 a c)))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (sqrt.f64 (-.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (sqrt.f64 (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (hypot.f64 (pow.f64 (*.f64 a c) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (sqrt.f64 (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (sqrt.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (hypot.f64 (pow.f64 (*.f64 a c) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (sqrt.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b_2) b_2) (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 a c)))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 a c) #s(literal 2 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 a c)))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b_2) b_2) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) (sqrt.f64 (-.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2)))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b_2) b_2) (sqrt.f64 (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) (hypot.f64 (pow.f64 (*.f64 a c) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) (sqrt.f64 (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b_2) b_2) (sqrt.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) (hypot.f64 (pow.f64 (*.f64 a c) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) (sqrt.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (*.f64 a c) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)) (-.f64 (neg.f64 b_2) (neg.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2) (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3/2 binary64))) (fma.f64 b_2 b_2 (-.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (*.f64 (neg.f64 b_2) (neg.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3/2 binary64))) (fma.f64 b_2 b_2 (fma.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(/.f64 (neg.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2))) (neg.f64 (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2)))","(neg.f64 (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (neg.f64 b_2))","(fma.f64 #s(literal -1 binary64) b_2 (neg.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(fma.f64 b_2 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 b_2 (fma.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (/.f64 (pow.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))))","(-.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2)) (/.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2)))","(-.f64 #s(literal 0 binary64) (-.f64 b_2 (neg.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))))","(-.f64 #s(literal 0 binary64) (+.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) b_2))","(-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))","(+.f64 (neg.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) (neg.f64 b_2))","(+.f64 (neg.f64 b_2) (neg.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":352.927001953125,"type":"rewrite"},{"compiler":[[40793,4066]],"memory":[[4621440,87962160]],"time":123.90087890625,"type":"eval"},{"alts":[["(/.f64 (/.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) a)","fresh",42.68521364535678,"binary64"],["(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) a) (*.f64 a b_2)) (*.f64 a a))","fresh",41.733316406681006,"binary64"],["(/.f64 (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2) a)","done",30.155303139911183,"binary64"],["(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) a)","next",31.104321425054025,"binary64"],["(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) a)","next",42.032803427762936,"binary64"],["(/.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64))) (*.f64 a (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))))))","fresh",62.65884900713957,"binary64"],["(/.f64 #s(approx (- (* b_2 b_2) (+ (* (neg c) a) (* b_2 b_2))) (*.f64 a c)) (*.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))","fresh",37.63878306731001,"binary64"],["(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","fresh",46.5292107025933,"binary64"],["(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a)","fresh",41.27830321212375,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2)))","fresh",42.058383258328156,"binary64"],["(*.f64 (pow.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) #s(literal -1 binary64)) (/.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)) a))","fresh",45.76613064409217,"binary64"],["(exp.f64 (*.f64 (log.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2))) #s(literal -1 binary64)))","fresh",54.044563117703284,"binary64"],["(exp.f64 (*.f64 (log.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2))) #s(literal -1 binary64)))","fresh",55.77977668311934,"binary64"],["#s(approx (/ (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","next",42.75010113736626,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -2 binary64) (/.f64 a b_2)))","fresh",41.33299229447682,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (neg.f64 b_2) #s(approx (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64)))))","done",56.06875827405116,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","done",41.27830321212375,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (exp.f64 (*.f64 (log.f64 (/.f64 a b_2)) #s(literal -1 binary64)))))","fresh",53.873258640317715,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))))","fresh",41.22720841843829,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (/.f64 #s(literal 1/2 binary64) (/.f64 b_2 c))))","fresh",56.01103961005704,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2)) c)))","next",44.32413818741188,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (*.f64 #s(literal 1/2 binary64) c) (pow.f64 b_2 #s(literal -1 binary64)))))","next",56.01103967021622,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))))","done",56.01103967021622,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 #s(literal 1/2 binary64) (exp.f64 (*.f64 (log.f64 (/.f64 b_2 c)) #s(literal -1 binary64))))))","fresh",60.11047543754036,"binary64"]],"compiler":[[35,16],[18,12],[12,9],[22,14],[17,12],[49,19],[30,18],[21,15],[17,13],[19,14],[26,16],[21,16],[20,15],[19,14],[19,14],[36,25],[19,14],[23,18],[39,26],[34,23],[41,27],[36,25],[34,23],[38,27],[35,16],[18,12],[22,14],[17,12],[49,19],[30,18],[21,15],[17,13],[19,14],[26,16],[21,16],[20,15],[19,14],[19,14],[23,18],[39,26],[34,23],[41,27],[36,25],[38,27]],"count":[[1064,24]],"kept":[{"done":[1,1],"fresh":[15,9],"new":[1043,11],"picked":[5,3]}],"memory":[[-7561952,49694912]],"min-error":[[5.686991656458858,"binary64"]],"time":33.544189453125,"type":"prune"},{"egraph":[[0,8136,340,0.036190199],[6,5687,347,0.023985404],[5,3041,347,0.022153941],[4,1399,347,0.015094551],[3,575,368,0.005798921],[2,253,368,0.002114451],[1,139,378,0.000992468],[0,77,378,0.000644319],[0,55,381,0.000402276]],"inputs":[["(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) a)","(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2)","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))","(*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)","(-.f64 (*.f64 (/.f64 b_2 a) b_2) c)","(*.f64 (/.f64 b_2 a) b_2)","(/.f64 b_2 a)","b_2","a","c","#s(approx (/ (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","#s(literal -1/2 binary64)","(/.f64 c b_2)","c","b_2","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) a)","(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2)","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))","(*.f64 (neg.f64 a) c)","(neg.f64 a)","a","c","b_2","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2)) c)))","#s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2)) c))","(*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2)) c)","(fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2))","(/.f64 (/.f64 b_2 a) c)","(/.f64 b_2 a)","b_2","a","c","#s(literal -2 binary64)","(/.f64 #s(literal 1/2 binary64) b_2)","#s(literal 1/2 binary64)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (*.f64 #s(literal 1/2 binary64) c) (pow.f64 b_2 #s(literal -1 binary64)))))","#s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (*.f64 #s(literal 1/2 binary64) c) (pow.f64 b_2 #s(literal -1 binary64))))","(*.f64 (*.f64 #s(literal 1/2 binary64) c) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 #s(literal 1/2 binary64) c)","#s(literal 1/2 binary64)","c","(pow.f64 b_2 #s(literal -1 binary64))","b_2","#s(literal -1 binary64)"]],"locations":[["(*.f64 #s(literal 1/2 binary64) c)","cost-diff",0],["#s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (*.f64 #s(literal 1/2 binary64) c) (pow.f64 b_2 #s(literal -1 binary64))))","cost-diff",0],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (*.f64 #s(literal 1/2 binary64) c) (pow.f64 b_2 #s(literal -1 binary64)))))","cost-diff",0],["(*.f64 (*.f64 #s(literal 1/2 binary64) c) (pow.f64 b_2 #s(literal -1 binary64)))","cost-diff",2],["(fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2))","cost-diff",0],["#s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2)) c))","cost-diff",0],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2)) c)))","cost-diff",0],["(*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2)) c)","cost-diff",2],["#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))","cost-diff",0],["(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","cost-diff",0],["(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2)","cost-diff",0],["(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) a)","cost-diff",0],["(/.f64 c b_2)","cost-diff",0],["(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","cost-diff",0],["#s(approx (/ (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","cost-diff",0],["(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))","cost-diff",0],["(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2)","cost-diff",0],["(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) a)","cost-diff",0],["(*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)","cost-diff",2]],"memory":[[3120304,19261376]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) a)","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) b_2) a)","(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2)","(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) b_2)","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))","#s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))","(*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(-.f64 (*.f64 (/.f64 b_2 a) b_2) c)","(*.f64 (/.f64 b_2 a) b_2)","(/.f64 b_2 a)","b_2","a","c","#s(approx (/ (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","#s(approx (/ (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","(*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))","#s(literal -1/2 binary64)","(/.f64 c b_2)","c","b_2","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) a)","(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2)","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))","(*.f64 (neg.f64 a) c)","(neg.f64 a)","a","c","b_2","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2)) c)))","#s(approx (/ (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (fma.f64 (/.f64 #s(literal -2 binary64) a) b_2 (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c))))","#s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2)) c))","#s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (fma.f64 (/.f64 #s(literal -2 binary64) a) b_2 (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c)))","(*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2)) c)","(fma.f64 (/.f64 #s(literal -2 binary64) a) b_2 (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c))","(fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2))","(fma.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c) (/.f64 #s(literal 1/2 binary64) b_2))","(/.f64 (/.f64 b_2 a) c)","(/.f64 b_2 a)","b_2","a","c","#s(literal -2 binary64)","(/.f64 #s(literal 1/2 binary64) b_2)","#s(literal 1/2 binary64)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (*.f64 #s(literal 1/2 binary64) c) (pow.f64 b_2 #s(literal -1 binary64)))))","#s(approx (/ (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c)))","#s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (*.f64 #s(literal 1/2 binary64) c) (pow.f64 b_2 #s(literal -1 binary64))))","#s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c))","(*.f64 (*.f64 #s(literal 1/2 binary64) c) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c)","(*.f64 #s(literal 1/2 binary64) c)","#s(literal 1/2 binary64)","c","(pow.f64 b_2 #s(literal -1 binary64))","b_2","#s(literal -1 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":184.991943359375,"type":"simplify"},{"compiler":[[247,46]],"locations":[["(*.f64 #s(literal 1/2 binary64) c)","accuracy",0.0],["(*.f64 (*.f64 #s(literal 1/2 binary64) c) (pow.f64 b_2 #s(literal -1 binary64)))","accuracy",0.203125],["#s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (*.f64 #s(literal 1/2 binary64) c) (pow.f64 b_2 #s(literal -1 binary64))))","accuracy",40.45568710884955],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (*.f64 #s(literal 1/2 binary64) c) (pow.f64 b_2 #s(literal -1 binary64)))))","accuracy",41.22720841843829],["(fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2))","accuracy",0.0078125],["(/.f64 (/.f64 b_2 a) c)","accuracy",4.714241680385021],["(*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2)) c)","accuracy",5.1099468416207],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2)) c)))","accuracy",41.22720841843829],["(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) a)","accuracy",2.737771909408055],["(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2)","accuracy",13.392238629486883],["(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","accuracy",26.11467062552949],["#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))","accuracy",38.976179372446616],["(/.f64 c b_2)","accuracy",0.0],["(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","accuracy",0.0],["#s(approx (/ (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","accuracy",42.75010113736626],["(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) a)","accuracy",2.737771909408055],["(*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)","accuracy",3.0892566026785433],["(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2)","accuracy",13.392238629486883],["(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))","accuracy",26.11467062552949]],"memory":[[1194992,49684576]],"mixsample":[[0.257568359375,"ival-sub",1200],[0.005126953125,"ival-sub",4800],[20.805419921875,"ival-div",0],[6.1318359375,"adjust",800],[0.0048828125,"ival-add",4800],[0.18701171875,"ival-mult",1200],[0.0771484375,"ival-sub",1600],[0.141357421875,"ival-assert",0],[0.02490234375,"ival-sqrt",4800],[6.69091796875,"ival-sub",0],[0.73779296875,"ival-sqrt",1200],[4.1748046875,"ival-sqrt",0],[0.080810546875,"ival-sub",400],[7.293701171875,"ival-pow",0],[0.138671875,"ival-mult",800],[0.023193359375,"ival-sub",4400],[6.1162109375,"ival-add",0],[0.11669921875,"ival-sub",800],[0.039794921875,"ival-mult",1600],[0.0732421875,"ival-add",400],[0.282958984375,"adjust",2800],[0.096435546875,"ival-add",2400],[0.261474609375,"ival-sqrt",400],[0.178955078125,"ival-add",1200],[0.205078125,"ival-sqrt",2000],[0.06591796875,"ival-sub",2000],[0.393310546875,"ival-sqrt",800],[0.07470703125,"ival-sqrt",4400],[2.382080078125,"adjust",2000],[0.138427734375,"ival-sub",2400],[0.057861328125,"ival-add",1600],[0.231689453125,"ival-sqrt",1600],[24.322509765625,"ival-mult",0],[0.151123046875,"ival-mult",400],[0.051513671875,"ival-add",2000],[0.4970703125,"ival-sqrt",2400],[0.247314453125,"ival-true",0],[0.604736328125,"exact",0],[0.080322265625,"ival-add",800],[0.012939453125,"ival-add",4400],[3.44384765625,"ival-neg",0]],"outcomes":[[26.123046875,1,"valid",41],[28.203857421875,2,"valid",35],[4.14990234375,3,"valid",4],[64.207763671875,0,"valid",176]],"time":158.14697265625,"type":"localize"},{"count":[[20,120]],"inputs":[["(*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) a)","(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2)","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))","#s(approx (/ (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","(/.f64 c b_2)","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) a)","(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2)","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))","(*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2)) c)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2)) c)))","#s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2)) c))","(fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2))","(*.f64 (*.f64 #s(literal 1/2 binary64) c) (pow.f64 b_2 #s(literal -1 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (*.f64 #s(literal 1/2 binary64) c) (pow.f64 b_2 #s(literal -1 binary64)))))","#s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (*.f64 #s(literal 1/2 binary64) c) (pow.f64 b_2 #s(literal -1 binary64))))","(*.f64 #s(literal 1/2 binary64) c)","(/.f64 (/.f64 b_2 a) c)"]],"memory":[[-1277536,16387856]],"outputs":[["(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","(* -1/2 (/ c b_2))","(+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5))))))))","(* -1/2 (/ (* a c) b_2))","(* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5)))))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5)))))))))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(* -2 (/ b_2 a))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(* -2 (/ b_2 (* a c)))","(/ (+ (* -2 (/ b_2 c)) (* 1/2 (/ a b_2))) a)","(/ b_2 (* a c))","(* -1 (* a c))","(* a (+ (* -1 c) (/ (pow b_2 2) a)))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* a (- (/ (pow b_2 2) a) c))","(* 1/2 (/ c b_2))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(/ 1/2 b_2)","(+ (* -2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2)))","(* -1 (* a (+ c (* -1 (/ (pow b_2 2) a)))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a))) a)))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(/ c b_2)","(- (pow b_2 2) (* a c))","(/ (+ (* -2 (/ (pow b_2 2) a)) (* 1/2 c)) b_2)","(/ (+ 1/2 (* -2 (/ (pow b_2 2) (* a c)))) b_2)","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6)))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4)))))) b_2)","(/ (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(* b_2 (- (* 1/2 (/ 1 (pow b_2 2))) (* 2 (/ 1 (* a c)))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 2 (/ 1 a))))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 2 (/ 1 a)))))))","(* -2 b_2)","(* -1 (* b_2 (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -1 b_2)","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -1 (* b_2 (- (* 2 (/ 1 (* a c))) (* 1/2 (/ 1 (pow b_2 2))))))","(* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) (* a b_2))) (* -1/16 (/ (pow a 2) (pow b_2 5))))))) (* 1/2 (/ 1 b_2))))","(* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3)))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5)))))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow a 3) (pow b_2 5)))))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(/ (+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2))) c)","(* 1/2 c)","(* c (+ (* -1 a) (/ (pow b_2 2) c)))","(* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b_2 c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (- (/ (pow b_2 2) c) a))","(* c (+ (* -2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2))))","(* -1 (* c (+ a (* -1 (/ (pow b_2 2) c)))))","(* -1 (* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))","(* -1 (* c (- (* 2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2)))))"]],"series":[[5.196044921875,"((* (- (* (/ b_2 a) b_2) c) a) (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) a) (* -1/2 (/ c b_2)) (/ c b_2) (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (* (+ (* (/ (/ b_2 a) c) -2) (/ 1/2 b_2)) c) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (+ (* (/ (/ b_2 a) c) -2) (/ 1/2 b_2)) (* (* 1/2 c) (pow b_2 -1)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (* 1/2 c) (/ (/ b_2 a) c))","c","-inf"],[5.643798828125,"((* (- (* (/ b_2 a) b_2) c) a) (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) a) (* -1/2 (/ c b_2)) (/ c b_2) (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (* (+ (* (/ (/ b_2 a) c) -2) (/ 1/2 b_2)) c) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (+ (* (/ (/ b_2 a) c) -2) (/ 1/2 b_2)) (* (* 1/2 c) (pow b_2 -1)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (* 1/2 c) (/ (/ b_2 a) c))","c","inf"],[4.093017578125,"((* (- (* (/ b_2 a) b_2) c) a) (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) a) (* -1/2 (/ c b_2)) (/ c b_2) (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (* (+ (* (/ (/ b_2 a) c) -2) (/ 1/2 b_2)) c) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (+ (* (/ (/ b_2 a) c) -2) (/ 1/2 b_2)) (* (* 1/2 c) (pow b_2 -1)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (* 1/2 c) (/ (/ b_2 a) c))","c","0"],[4.505859375,"((* (- (* (/ b_2 a) b_2) c) a) (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) a) (* -1/2 (/ c b_2)) (/ c b_2) (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (* (+ (* (/ (/ b_2 a) c) -2) (/ 1/2 b_2)) c) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (+ (* (/ (/ b_2 a) c) -2) (/ 1/2 b_2)) (* (* 1/2 c) (pow b_2 -1)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (* 1/2 c) (/ (/ b_2 a) c))","b_2","-inf"],[5.68408203125,"((* (- (* (/ b_2 a) b_2) c) a) (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) a) (* -1/2 (/ c b_2)) (/ c b_2) (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (* (+ (* (/ (/ b_2 a) c) -2) (/ 1/2 b_2)) c) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (+ (* (/ (/ b_2 a) c) -2) (/ 1/2 b_2)) (* (* 1/2 c) (pow b_2 -1)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (* 1/2 c) (/ (/ b_2 a) c))","b_2","inf"],[5.1201171875,"((* (- (* (/ b_2 a) b_2) c) a) (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) a) (* -1/2 (/ c b_2)) (/ c b_2) (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (* (+ (* (/ (/ b_2 a) c) -2) (/ 1/2 b_2)) c) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (+ (* (/ (/ b_2 a) c) -2) (/ 1/2 b_2)) (* (* 1/2 c) (pow b_2 -1)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (* 1/2 c) (/ (/ b_2 a) c))","b_2","0"],[3.367919921875,"((* (- (* (/ b_2 a) b_2) c) a) (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) a) (* -1/2 (/ c b_2)) (/ c b_2) (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (* (+ (* (/ (/ b_2 a) c) -2) (/ 1/2 b_2)) c) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (+ (* (/ (/ b_2 a) c) -2) (/ 1/2 b_2)) (* (* 1/2 c) (pow b_2 -1)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (* 1/2 c) (/ (/ b_2 a) c))","a","-inf"],[3.14892578125,"((* (- (* (/ b_2 a) b_2) c) a) (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) a) (* -1/2 (/ c b_2)) (/ c b_2) (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (* (+ (* (/ (/ b_2 a) c) -2) (/ 1/2 b_2)) c) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (+ (* (/ (/ b_2 a) c) -2) (/ 1/2 b_2)) (* (* 1/2 c) (pow b_2 -1)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (* 1/2 c) (/ (/ b_2 a) c))","a","inf"],[3.2119140625,"((* (- (* (/ b_2 a) b_2) c) a) (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) a) (* -1/2 (/ c b_2)) (/ c b_2) (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (* (+ (* (/ (/ b_2 a) c) -2) (/ 1/2 b_2)) c) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (+ (* (/ (/ b_2 a) c) -2) (/ 1/2 b_2)) (* (* 1/2 c) (pow b_2 -1)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (* 1/2 c) (/ (/ b_2 a) c))","a","0"]],"time":43.64306640625,"type":"series"},{"count":[[120,119]],"egraph":[[0,8221,2854,0.134879379],[2,5922,2999,0.036048566],[1,1751,3014,0.022553903],[0,555,3048,0.007219978]],"inputs":[["(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","(* -1/2 (/ c b_2))","(+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5))))))))","(* -1/2 (/ (* a c) b_2))","(* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5)))))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5)))))))))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(* -2 (/ b_2 a))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(* -2 (/ b_2 (* a c)))","(/ (+ (* -2 (/ b_2 c)) (* 1/2 (/ a b_2))) a)","(/ b_2 (* a c))","(* -1 (* a c))","(* a (+ (* -1 c) (/ (pow b_2 2) a)))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* a (- (/ (pow b_2 2) a) c))","(* 1/2 (/ c b_2))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(/ 1/2 b_2)","(+ (* -2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2)))","(* -1 (* a (+ c (* -1 (/ (pow b_2 2) a)))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a))) a)))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(/ c b_2)","(- (pow b_2 2) (* a c))","(/ (+ (* -2 (/ (pow b_2 2) a)) (* 1/2 c)) b_2)","(/ (+ 1/2 (* -2 (/ (pow b_2 2) (* a c)))) b_2)","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6)))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4)))))) b_2)","(/ (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(* b_2 (- (* 1/2 (/ 1 (pow b_2 2))) (* 2 (/ 1 (* a c)))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 2 (/ 1 a))))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 2 (/ 1 a)))))))","(* -2 b_2)","(* -1 (* b_2 (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -1 b_2)","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -1 (* b_2 (- (* 2 (/ 1 (* a c))) (* 1/2 (/ 1 (pow b_2 2))))))","(* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) (* a b_2))) (* -1/16 (/ (pow a 2) (pow b_2 5))))))) (* 1/2 (/ 1 b_2))))","(* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3)))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5)))))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow a 3) (pow b_2 5)))))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(/ (+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2))) c)","(* 1/2 c)","(* c (+ (* -1 a) (/ (pow b_2 2) c)))","(* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b_2 c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (- (/ (pow b_2 2) c) a))","(* c (+ (* -2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2))))","(* -1 (* c (+ a (* -1 (/ (pow b_2 2) c)))))","(* -1 (* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))","(* -1 (* c (- (* 2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2)))))"]],"memory":[[-2074272,49079696]],"method":["egg-herbie"],"outputs":[["(pow b_2 2)","(*.f64 b_2 b_2)","(+ (* -1 (* a c)) (pow b_2 2))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(* -1/2 (/ c b_2))","(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","(+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))","(fma.f64 (*.f64 #s(literal -1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))","(fma.f64 (fma.f64 (*.f64 a #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 #s(literal 5/64 binary64) b_2)) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -1/16 binary64)) (pow.f64 b_2 #s(literal 5 binary64)))) a (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","(* -1/2 (/ (* a c) b_2))","(*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)","(* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) a)","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 a #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) a)","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5)))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 #s(literal 5/64 binary64) b_2)) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -1/16 binary64)) (pow.f64 b_2 #s(literal 5 binary64)))) a (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) a)","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) a b_2)","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 a #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) a b_2)","(* -2 (/ b_2 a))","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (/.f64 c b_2) a) (*.f64 #s(literal -2 binary64) b_2)) a)","(* -2 (/ b_2 (* a c)))","(*.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64))","(/ (+ (* -2 (/ b_2 c)) (* 1/2 (/ a b_2))) a)","(/.f64 (fma.f64 (/.f64 a b_2) #s(literal 1/2 binary64) (*.f64 (/.f64 b_2 c) #s(literal -2 binary64))) a)","(/ b_2 (* a c))","(/.f64 (/.f64 b_2 a) c)","(* -1 (* a c))","(*.f64 (neg.f64 a) c)","(* a (+ (* -1 c) (/ (pow b_2 2) a)))","(*.f64 (fma.f64 b_2 (/.f64 b_2 a) (neg.f64 c)) a)","(* (sqrt (/ c a)) (sqrt -1))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b_2) a))","(+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b_2) a)))","(+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b_2) a))))","(* (sqrt (* a c)) (sqrt -1))","(*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))","(* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b_2) a)) a)","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a)))","(*.f64 (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b_2) a))) a)","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b_2) a)))) a)","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))))) a)","(* a (- (/ (pow b_2 2) a) c))","(*.f64 (fma.f64 b_2 (/.f64 b_2 a) (neg.f64 c)) a)","(* 1/2 (/ c b_2))","(*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(/ 1/2 b_2)","(/.f64 #s(literal 1/2 binary64) b_2)","(+ (* -2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2)))","(fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2))","(* -1 (* a (+ c (* -1 (/ (pow b_2 2) a)))))","(*.f64 (fma.f64 b_2 (/.f64 b_2 a) (neg.f64 c)) a)","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) b_2) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a))) a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (-.f64 b_2 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)))) a)) a)))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (sqrt.f64 (*.f64 c a)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))","(* -1 (* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(*.f64 (neg.f64 a) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (neg.f64 b_2)) a)))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)))) a) b_2) a)))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(*.f64 (fma.f64 b_2 (/.f64 b_2 a) (neg.f64 c)) a)","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -1 binary64) a)) b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) b_2 (/.f64 #s(literal -1 binary64) a)) b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))","(+ (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (neg.f64 b_2))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) #s(literal -1 binary64)) b_2 (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) b_2 #s(literal -1 binary64)) b_2 (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 b_2 (/.f64 b_2 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64))) (*.f64 b_2 b_2) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(/ c b_2)","(/.f64 c b_2)","(- (pow b_2 2) (* a c))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(/ (+ (* -2 (/ (pow b_2 2) a)) (* 1/2 c)) b_2)","(/.f64 (fma.f64 (*.f64 b_2 (/.f64 b_2 a)) #s(literal -2 binary64) (*.f64 #s(literal 1/2 binary64) c)) b_2)","(/ (+ 1/2 (* -2 (/ (pow b_2 2) (* a c)))) b_2)","(/.f64 (fma.f64 (*.f64 b_2 (/.f64 (/.f64 b_2 a) c)) #s(literal -2 binary64) #s(literal 1/2 binary64)) b_2)","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (*.f64 (/.f64 c b_2) a) b_2)) b_2) b_2)","(/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2)","(/.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2)","(/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))))) b_2)","(/.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (fma.f64 (*.f64 (*.f64 a a) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 #s(literal -1/2 binary64) c))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6)))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4)))))) b_2)","(/.f64 (fma.f64 #s(literal -1/2 binary64) (+.f64 c (*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (/.f64 #s(literal 5/64 binary64) (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) a)))) (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (/.f64 (*.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) #s(literal -1/16 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) b_2)","(/ (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2)))) b_2)","(/.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) b_2) (*.f64 (*.f64 #s(literal -1/2 binary64) c) a)) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))))) b_2)","(/.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) b_2) (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (*.f64 #s(literal -1/2 binary64) c) a))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2)","(/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 c a (*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (/.f64 #s(literal 5/64 binary64) (pow.f64 b_2 #s(literal 6 binary64))))) (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) b_2)))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(*.f64 (fma.f64 (/.f64 (*.f64 (/.f64 c b_2) a) b_2) #s(literal -1/2 binary64) #s(literal 1 binary64)) b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (*.f64 (/.f64 c b_2) a) b_2) #s(literal -1/2 binary64) #s(literal 1 binary64))) b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 a a) #s(literal -1/8 binary64)) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 4 binary64)))) (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (*.f64 (/.f64 (*.f64 (/.f64 c b_2) a) b_2) #s(literal -1/2 binary64)))) b_2 b_2)","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(*.f64 (fma.f64 (/.f64 (/.f64 c b_2) b_2) #s(literal 1/2 binary64) (/.f64 #s(literal -2 binary64) a)) b_2)","(* b_2 (- (* 1/2 (/ 1 (pow b_2 2))) (* 2 (/ 1 (* a c)))))","(*.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) b_2) b_2) (/.f64 (/.f64 #s(literal 2 binary64) a) c)) b_2)","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 c b_2) b_2) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a)))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 2 (/ 1 a))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 c b_2) (fma.f64 (*.f64 (*.f64 c c) (/.f64 a (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal -1/8 binary64) (/.f64 #s(literal 2 binary64) a))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 2 (/ 1 a)))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 c b_2) (fma.f64 (*.f64 #s(literal -1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 4 binary64)))) (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -1/16 binary64) (/.f64 #s(literal 2 binary64) a)))))","(* -2 b_2)","(*.f64 #s(literal -2 binary64) b_2)","(* -1 (* b_2 (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (*.f64 (/.f64 c b_2) a) b_2) #s(literal -1/2 binary64) #s(literal 2 binary64)))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (*.f64 (/.f64 c b_2) a) b_2) #s(literal -1/2 binary64) #s(literal 2 binary64))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(*.f64 (neg.f64 b_2) (+.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (*.f64 (/.f64 c b_2) a) b_2) #s(literal -1/2 binary64) #s(literal 2 binary64))) (*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))))))","(* -1 b_2)","(neg.f64 b_2)","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (*.f64 (/.f64 c b_2) a) b_2) #s(literal -1/2 binary64) #s(literal 1 binary64)))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (*.f64 (/.f64 c b_2) a) b_2) #s(literal -1/2 binary64) #s(literal 1 binary64))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(neg.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 a a) #s(literal -1/8 binary64)) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 4 binary64)))) (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (*.f64 (/.f64 (*.f64 (/.f64 c b_2) a) b_2) #s(literal -1/2 binary64)))) b_2 b_2))","(* -1 (* b_2 (- (* 2 (/ 1 (* a c))) (* 1/2 (/ 1 (pow b_2 2))))))","(*.f64 (fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1/2 binary64) (*.f64 b_2 b_2)) (/.f64 (/.f64 #s(literal -2 binary64) a) c)) b_2)","(* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (*.f64 c #s(literal -1/8 binary64)) (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 #s(literal -1/2 binary64) b_2)) c)","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (fma.f64 (*.f64 c #s(literal -1/16 binary64)) (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 5 binary64)))) (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64))) c (/.f64 #s(literal -1/2 binary64) b_2)) c)","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) (* a b_2))) (* -1/16 (/ (pow a 2) (pow b_2 5))))))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c a)) (*.f64 (/.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 #s(literal 5/64 binary64) b_2)) (/.f64 (*.f64 (*.f64 a a) #s(literal -1/16 binary64)) (pow.f64 b_2 #s(literal 5 binary64)))) c (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64))) c (/.f64 #s(literal -1/2 binary64) b_2)) c)","(* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3)))))","(*.f64 (fma.f64 (*.f64 (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1/8 binary64)) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c)","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (*.f64 (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1/8 binary64))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c)","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow a 3) (pow b_2 5)))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) #s(literal -1/16 binary64) (*.f64 (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 5/64 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 c b_2)) #s(literal -1/2 binary64))) c (*.f64 (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1/8 binary64))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c)","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1/8 binary64)) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c b_2)","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (*.f64 (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1/8 binary64))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c b_2)","(/ (+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2))) c)","(/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))) c)","(* 1/2 c)","(*.f64 #s(literal 1/2 binary64) c)","(* c (+ (* -1 a) (/ (pow b_2 2) c)))","(*.f64 (fma.f64 b_2 (/.f64 b_2 c) (neg.f64 a)) c)","(* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 (neg.f64 b_2) c) a)) c)","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 (neg.f64 b_2) c) a))) c)","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 (neg.f64 b_2) c) a)))) c)","(* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) c)) c)","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b_2 c)))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) c))) c)","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) c)))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))) c)","(* c (- (/ (pow b_2 2) c) a))","(*.f64 (fma.f64 b_2 (/.f64 b_2 c) (neg.f64 a)) c)","(* c (+ (* -2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2)) c)","(* -1 (* c (+ a (* -1 (/ (pow b_2 2) c)))))","(*.f64 (fma.f64 b_2 (/.f64 b_2 c) (neg.f64 a)) c)","(* -1 (* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 a) c)) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (/.f64 (neg.f64 b_2) a)) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)))) c) (/.f64 b_2 a)) c)) (neg.f64 c))","(* -1 (* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c)) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (neg.f64 b_2)) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)))) c) b_2) c)) (neg.f64 c))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))","(*.f64 (fma.f64 b_2 (/.f64 b_2 c) (neg.f64 a)) c)","(* -1 (* c (- (* 2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2)))))","(*.f64 (fma.f64 (/.f64 #s(literal 2 binary64) c) (/.f64 b_2 a) (/.f64 #s(literal -1/2 binary64) b_2)) (neg.f64 c))"]],"stop":[["iter limit",1],["node limit",1]],"time":360.3779296875,"type":"simplify"},{"count":[[20,544]],"egraph":[[0,9570,303,0.093891276],[2,2387,307,0.044883769],[1,306,307,0.009236701],[0,77,307,0.002269904],[0,55,316,0.000748055]],"inputs":[["(*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) a)","(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2)","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))","#s(approx (/ (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","(/.f64 c b_2)","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) a)","(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2)","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))","(*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2)) c)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2)) c)))","#s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2)) c))","(fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2))","(*.f64 (*.f64 #s(literal 1/2 binary64) c) (pow.f64 b_2 #s(literal -1 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (*.f64 #s(literal 1/2 binary64) c) (pow.f64 b_2 #s(literal -1 binary64)))))","#s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (*.f64 #s(literal 1/2 binary64) c) (pow.f64 b_2 #s(literal -1 binary64))))","(*.f64 #s(literal 1/2 binary64) c)","(/.f64 (/.f64 b_2 a) c)"]],"memory":[[9524672,64296400]],"outputs":[["(*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)","(*.f64 a (-.f64 (*.f64 (/.f64 b_2 a) b_2) c))","(/.f64 (*.f64 (fma.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 a #s(literal -2 binary64)) (*.f64 (neg.f64 c) c)) a) (fma.f64 (/.f64 b_2 a) b_2 c))","(/.f64 (*.f64 (fma.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 a #s(literal -3 binary64)) (pow.f64 (neg.f64 c) #s(literal 3 binary64))) a) (fma.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 a #s(literal -2 binary64)) (*.f64 c (fma.f64 (/.f64 b_2 a) b_2 c))))","(/.f64 (*.f64 a (fma.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 a #s(literal -2 binary64)) (*.f64 (neg.f64 c) c))) (fma.f64 (/.f64 b_2 a) b_2 c))","(/.f64 (*.f64 a (fma.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 a #s(literal -3 binary64)) (pow.f64 (neg.f64 c) #s(literal 3 binary64)))) (fma.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 a #s(literal -2 binary64)) (*.f64 c (fma.f64 (/.f64 b_2 a) b_2 c))))","(fma.f64 (*.f64 (/.f64 b_2 a) b_2) a (*.f64 (neg.f64 c) a))","(fma.f64 a (*.f64 (/.f64 b_2 a) b_2) (*.f64 (neg.f64 c) a))","(+.f64 (*.f64 (*.f64 (/.f64 b_2 a) b_2) a) (*.f64 (neg.f64 c) a))","(+.f64 (*.f64 a (*.f64 (/.f64 b_2 a) b_2)) (*.f64 (neg.f64 c) a))","(*.f64 (pow.f64 (/.f64 a (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) (*.f64 b_2 b_2))) #s(literal -1 binary64)) (pow.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 a (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2))","(*.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2)) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) a))","(*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) (pow.f64 a #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) a) (*.f64 (neg.f64 a) (/.f64 (neg.f64 b_2) #s(literal -1 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (neg.f64 (neg.f64 a))) (*.f64 (neg.f64 a) (neg.f64 (neg.f64 b_2)))) (*.f64 (neg.f64 a) (neg.f64 (neg.f64 a))))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) a) (*.f64 (neg.f64 a) (*.f64 b_2 #s(literal 1 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (/.f64 (/.f64 a b_2) #s(literal 1 binary64))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 (/.f64 a b_2) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (/.f64 a b_2)) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 a b_2)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (neg.f64 (/.f64 a b_2))) (*.f64 (neg.f64 a) #s(literal -1 binary64))) (*.f64 (neg.f64 a) (neg.f64 (/.f64 a b_2))))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (neg.f64 a)) (*.f64 (neg.f64 a) (neg.f64 b_2))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) a) (*.f64 (neg.f64 a) b_2)) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (/.f64 (neg.f64 b_2) #s(literal -1 binary64)))) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 a))) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (neg.f64 (neg.f64 b_2)))) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (neg.f64 (neg.f64 a))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (*.f64 b_2 #s(literal 1 binary64)))) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (/.f64 a b_2) #s(literal 1 binary64))) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) #s(literal 1 binary64))) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (/.f64 (/.f64 a b_2) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 a b_2)) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) #s(literal 1 binary64))) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (/.f64 a b_2)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 a b_2))) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) #s(literal -1 binary64))) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (neg.f64 (/.f64 a b_2))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 a)) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (neg.f64 b_2))) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (neg.f64 a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) b_2)) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) a))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) a) (*.f64 a (/.f64 (neg.f64 b_2) #s(literal -1 binary64)))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) (neg.f64 (neg.f64 a))) (*.f64 a (neg.f64 (neg.f64 b_2)))) (*.f64 a (neg.f64 (neg.f64 a))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) a) (*.f64 a (*.f64 b_2 #s(literal 1 binary64)))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) (/.f64 (/.f64 a b_2) #s(literal 1 binary64))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 (/.f64 a b_2) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) (neg.f64 (/.f64 a b_2))) (neg.f64 a)) (*.f64 a (neg.f64 (/.f64 a b_2))))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (neg.f64 a) (*.f64 (neg.f64 a) (neg.f64 (neg.f64 b_2)))) (*.f64 a a))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (neg.f64 (/.f64 a b_2)) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (neg.f64 (/.f64 a b_2))))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (/.f64 a b_2) (*.f64 (neg.f64 a) #s(literal -1 binary64))) (*.f64 (neg.f64 a) (/.f64 a b_2)))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (neg.f64 (neg.f64 a)) (*.f64 (neg.f64 a) (neg.f64 b_2))) (*.f64 (neg.f64 a) (neg.f64 (neg.f64 a))))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) a (*.f64 (neg.f64 a) (neg.f64 b_2))) (*.f64 (neg.f64 a) a))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (neg.f64 a) (*.f64 (neg.f64 a) b_2)) (*.f64 a a))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (neg.f64 (neg.f64 b_2)))) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (/.f64 a b_2)) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) #s(literal 1 binary64))) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (neg.f64 (/.f64 a b_2))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 a b_2) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) #s(literal -1 binary64))) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (/.f64 a b_2)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 a)) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (neg.f64 b_2))) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (neg.f64 (neg.f64 a))))","(/.f64 (fma.f64 #s(literal 1 binary64) a (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (neg.f64 b_2))) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) a))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) b_2)) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (neg.f64 a)))","(/.f64 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) (neg.f64 a) (*.f64 a (neg.f64 (neg.f64 b_2)))) (*.f64 a (neg.f64 a)))","(/.f64 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) (neg.f64 (/.f64 a b_2)) (*.f64 a #s(literal 1 binary64))) (*.f64 a (neg.f64 (/.f64 a b_2))))","(/.f64 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) (/.f64 a b_2) (neg.f64 a)) (*.f64 a (/.f64 a b_2)))","(/.f64 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) (neg.f64 (neg.f64 a)) (*.f64 a (neg.f64 b_2))) (*.f64 a (neg.f64 (neg.f64 a))))","(/.f64 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) a (*.f64 a (neg.f64 b_2))) (*.f64 a a))","(/.f64 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) (neg.f64 a) (*.f64 a b_2)) (*.f64 a (neg.f64 a)))","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) (/.f64 (neg.f64 b_2) #s(literal -1 binary64))) a)","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) (*.f64 b_2 #s(literal 1 binary64))) a)","(/.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (neg.f64 b_2)) (neg.f64 a))","(/.f64 (/.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2)) #s(literal -1 binary64)) a)","(/.f64 (*.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) (*.f64 b_2 b_2)) (pow.f64 a #s(literal -1 binary64))) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 a #s(literal -1 binary64))) (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))))","(/.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) #s(literal 1 binary64)) a)","(/.f64 (-.f64 (pow.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) a) #s(literal 2 binary64)) (pow.f64 (/.f64 a b_2) #s(literal -2 binary64))) (+.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) a) (/.f64 b_2 a)))","(/.f64 (-.f64 (pow.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) a) #s(literal 3 binary64)) (pow.f64 (/.f64 a b_2) #s(literal -3 binary64))) (+.f64 (pow.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) a) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 a b_2) #s(literal -2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) a) (/.f64 b_2 a)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2))) (neg.f64 (neg.f64 a)))","(/.f64 (*.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) (*.f64 b_2 b_2)) #s(literal 1 binary64)) (*.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) a))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) a))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) (/.f64 a b_2)) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 a b_2)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) (neg.f64 a)) (*.f64 a (neg.f64 b_2))) (*.f64 a (neg.f64 a)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) a) (*.f64 a b_2)) (*.f64 a a))","(/.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) (*.f64 b_2 b_2)) (*.f64 a (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2)))","(/.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 a (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2)) (neg.f64 a))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2))))","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) a)","(neg.f64 (/.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2)) a))","(neg.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) (neg.f64 a)))","(fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) (pow.f64 a #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a))","(-.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) a) (/.f64 b_2 a))","(exp.f64 (*.f64 (log.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2))) #s(literal -1 binary64)))","(+.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) a) (/.f64 (neg.f64 b_2) a))","(*.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) (*.f64 b_2 b_2)) (pow.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) (*.f64 b_2 b_2))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2)) (*.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) (*.f64 b_2 b_2))) (*.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2)))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) #s(literal 3/2 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (*.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))))","(/.f64 (neg.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) (*.f64 b_2 b_2))) (neg.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2)))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (neg.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))))","(/.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) (neg.f64 b_2)))","(/.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) (*.f64 b_2 b_2)) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2))","(/.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) (-.f64 (*.f64 b_2 b_2) (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) (neg.f64 b_2)))))","(/.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) (*.f64 b_2 b_2))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))))","(fma.f64 (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (neg.f64 b_2))","(fma.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) #s(literal 1/4 binary64)) (neg.f64 b_2))","(fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))))","(fma.f64 b_2 #s(literal -1 binary64) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))))","(-.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) #s(literal 0 binary64)) b_2)","(-.f64 (/.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2)) (/.f64 (*.f64 b_2 b_2) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2)))","(-.f64 (/.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) #s(literal 3/2 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))))","(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2)","(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))))","(+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) (neg.f64 b_2))","(*.f64 (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))) (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))))","(*.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) #s(literal 1/4 binary64)))","(pow.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) #s(literal 1 binary64))","(pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))","(fabs.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))))","(exp.f64 (log.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a)))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","(*.f64 (*.f64 #s(literal -1/2 binary64) c) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))","(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","(*.f64 c (*.f64 (pow.f64 b_2 #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(pow.f64 (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) c)) #s(literal -1 binary64))","(/.f64 (*.f64 (neg.f64 c) #s(literal -1/2 binary64)) (neg.f64 b_2))","(/.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 c)) (neg.f64 b_2))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) c)) (neg.f64 b_2))","(/.f64 (*.f64 #s(literal -1/2 binary64) c) b_2)","(/.f64 #s(literal 1 binary64) (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) c)))","(/.f64 #s(literal -1/2 binary64) (/.f64 b_2 c))","(*.f64 (*.f64 c (pow.f64 b_2 #s(literal -1/2 binary64))) (pow.f64 b_2 #s(literal -1/2 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 c b_2))","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (pow.f64 (pow.f64 c #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) c)","(*.f64 #s(literal -1 binary64) (/.f64 c b_2))","(*.f64 (neg.f64 c) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 c (neg.f64 (pow.f64 b_2 #s(literal -1 binary64))))","(*.f64 c (pow.f64 b_2 #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 b_2 c) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (neg.f64 (/.f64 b_2 c)) #s(literal -1 binary64))","(pow.f64 (/.f64 b_2 c) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 b_2)) (*.f64 (neg.f64 b_2) (neg.f64 (neg.f64 c)))) (*.f64 b_2 b_2))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 (/.f64 b_2 c))) (*.f64 (neg.f64 b_2) #s(literal 1 binary64))) (*.f64 (neg.f64 b_2) (neg.f64 (/.f64 b_2 c))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (/.f64 b_2 c)) (*.f64 (neg.f64 b_2) #s(literal -1 binary64))) (*.f64 (neg.f64 b_2) (/.f64 b_2 c)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 (neg.f64 b_2))) (*.f64 (neg.f64 b_2) (neg.f64 c))) (*.f64 (neg.f64 b_2) (neg.f64 (neg.f64 b_2))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) b_2) (*.f64 (neg.f64 b_2) (neg.f64 c))) (*.f64 (neg.f64 b_2) b_2))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 b_2)) (*.f64 (neg.f64 b_2) c)) (*.f64 b_2 b_2))","(/.f64 (-.f64 #s(literal 0 binary64) (neg.f64 (neg.f64 c))) (neg.f64 b_2))","(/.f64 (/.f64 (neg.f64 c) #s(literal -1 binary64)) b_2)","(/.f64 (neg.f64 (neg.f64 c)) (neg.f64 (neg.f64 b_2)))","(/.f64 (neg.f64 (neg.f64 c)) (neg.f64 b_2))","(/.f64 (*.f64 c #s(literal 1 binary64)) b_2)","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b_2 c) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 b_2 c)))","(/.f64 #s(literal 1 binary64) (/.f64 b_2 c))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 b_2 c)))","(/.f64 #s(literal -1 binary64) (/.f64 b_2 c))","(/.f64 (neg.f64 c) (neg.f64 (neg.f64 b_2)))","(/.f64 (neg.f64 c) (neg.f64 b_2))","(/.f64 (neg.f64 c) b_2)","(/.f64 c (neg.f64 b_2))","(/.f64 c b_2)","(neg.f64 (/.f64 c b_2))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 b_2)) (/.f64 c b_2))","(-.f64 #s(literal 0 binary64) (/.f64 c b_2))","(exp.f64 (*.f64 (log.f64 (/.f64 b_2 c)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 a (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)) (*.f64 b_2 b_2))) #s(literal -1 binary64)) (pow.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 a (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2))","(*.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2)) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2) a))","(*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2) (pow.f64 a #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) a) (*.f64 (neg.f64 a) (/.f64 (neg.f64 b_2) #s(literal -1 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) (neg.f64 (neg.f64 a))) (*.f64 (neg.f64 a) (neg.f64 (neg.f64 b_2)))) (*.f64 (neg.f64 a) (neg.f64 (neg.f64 a))))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) a) (*.f64 (neg.f64 a) (*.f64 b_2 #s(literal 1 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) (/.f64 (/.f64 a b_2) #s(literal 1 binary64))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 (/.f64 a b_2) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) (/.f64 a b_2)) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 a b_2)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) (neg.f64 (/.f64 a b_2))) (*.f64 (neg.f64 a) #s(literal -1 binary64))) (*.f64 (neg.f64 a) (neg.f64 (/.f64 a b_2))))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) (neg.f64 a)) (*.f64 (neg.f64 a) (neg.f64 b_2))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) a) (*.f64 (neg.f64 a) b_2)) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) (/.f64 (neg.f64 b_2) #s(literal -1 binary64)))) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 a))) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) (neg.f64 (neg.f64 b_2)))) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) (neg.f64 (neg.f64 a))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) (*.f64 b_2 #s(literal 1 binary64)))) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (/.f64 a b_2) #s(literal 1 binary64))) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) #s(literal 1 binary64))) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) (/.f64 (/.f64 a b_2) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 a b_2)) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) #s(literal 1 binary64))) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) (/.f64 a b_2)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 a b_2))) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) #s(literal -1 binary64))) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) (neg.f64 (/.f64 a b_2))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 a)) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) (neg.f64 b_2))) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) (neg.f64 a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) b_2)) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) a))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) a) (*.f64 a (/.f64 (neg.f64 b_2) #s(literal -1 binary64)))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) (neg.f64 (neg.f64 a))) (*.f64 a (neg.f64 (neg.f64 b_2)))) (*.f64 a (neg.f64 (neg.f64 a))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) a) (*.f64 a (*.f64 b_2 #s(literal 1 binary64)))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) (/.f64 (/.f64 a b_2) #s(literal 1 binary64))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 (/.f64 a b_2) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) (neg.f64 (/.f64 a b_2))) (neg.f64 a)) (*.f64 a (neg.f64 (/.f64 a b_2))))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) (neg.f64 a) (*.f64 (neg.f64 a) (neg.f64 (neg.f64 b_2)))) (*.f64 a a))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) (neg.f64 (/.f64 a b_2)) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (neg.f64 (/.f64 a b_2))))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) (/.f64 a b_2) (*.f64 (neg.f64 a) #s(literal -1 binary64))) (*.f64 (neg.f64 a) (/.f64 a b_2)))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) (neg.f64 (neg.f64 a)) (*.f64 (neg.f64 a) (neg.f64 b_2))) (*.f64 (neg.f64 a) (neg.f64 (neg.f64 a))))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) a (*.f64 (neg.f64 a) (neg.f64 b_2))) (*.f64 (neg.f64 a) a))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) (neg.f64 a) (*.f64 (neg.f64 a) b_2)) (*.f64 a a))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) (neg.f64 (neg.f64 b_2)))) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (/.f64 a b_2)) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) #s(literal 1 binary64))) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) (neg.f64 (/.f64 a b_2))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 a b_2) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) #s(literal -1 binary64))) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) (/.f64 a b_2)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 a)) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) (neg.f64 b_2))) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) (neg.f64 (neg.f64 a))))","(/.f64 (fma.f64 #s(literal 1 binary64) a (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) (neg.f64 b_2))) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) a))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) b_2)) (*.f64 (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) (neg.f64 a)))","(/.f64 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) (neg.f64 a) (*.f64 a (neg.f64 (neg.f64 b_2)))) (*.f64 a (neg.f64 a)))","(/.f64 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) (neg.f64 (/.f64 a b_2)) (*.f64 a #s(literal 1 binary64))) (*.f64 a (neg.f64 (/.f64 a b_2))))","(/.f64 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) (/.f64 a b_2) (neg.f64 a)) (*.f64 a (/.f64 a b_2)))","(/.f64 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) (neg.f64 (neg.f64 a)) (*.f64 a (neg.f64 b_2))) (*.f64 a (neg.f64 (neg.f64 a))))","(/.f64 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) a (*.f64 a (neg.f64 b_2))) (*.f64 a a))","(/.f64 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) (neg.f64 a) (*.f64 a b_2)) (*.f64 a (neg.f64 a)))","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) (/.f64 (neg.f64 b_2) #s(literal -1 binary64))) a)","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) (*.f64 b_2 #s(literal 1 binary64))) a)","(/.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) (neg.f64 b_2)) (neg.f64 a))","(/.f64 (/.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2)) #s(literal -1 binary64)) a)","(/.f64 (*.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)) (*.f64 b_2 b_2)) (pow.f64 a #s(literal -1 binary64))) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 a #s(literal -1 binary64))) (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))))","(/.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2) #s(literal 1 binary64)) a)","(/.f64 (-.f64 (pow.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) a) #s(literal 2 binary64)) (pow.f64 (/.f64 a b_2) #s(literal -2 binary64))) (+.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) a) (/.f64 b_2 a)))","(/.f64 (-.f64 (pow.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) a) #s(literal 3 binary64)) (pow.f64 (/.f64 a b_2) #s(literal -3 binary64))) (+.f64 (pow.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) a) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 a b_2) #s(literal -2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) a) (/.f64 b_2 a)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2))) (neg.f64 (neg.f64 a)))","(/.f64 (*.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)) (*.f64 b_2 b_2)) #s(literal 1 binary64)) (*.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2) a))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) a))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) (/.f64 a b_2)) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 a b_2)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) (neg.f64 a)) (*.f64 a (neg.f64 b_2))) (*.f64 a (neg.f64 a)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) a) (*.f64 a b_2)) (*.f64 a a))","(/.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)) (*.f64 b_2 b_2)) (*.f64 a (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2)))","(/.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 a (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2)) (neg.f64 a))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2))))","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2) a)","(neg.f64 (/.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2)) a))","(neg.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2) (neg.f64 a)))","(fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) (pow.f64 a #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a))","(-.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) a) (/.f64 b_2 a))","(exp.f64 (*.f64 (log.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2))) #s(literal -1 binary64)))","(+.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) a) (/.f64 (neg.f64 b_2) a))","(*.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)) (*.f64 b_2 b_2)) (pow.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2) (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)) (*.f64 b_2 b_2))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2)) (*.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2) (*.f64 b_2 b_2))) (*.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2)))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)) #s(literal 3/2 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) (*.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))))","(/.f64 (neg.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)) (*.f64 b_2 b_2))) (neg.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2)))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (neg.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))))","(/.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)) (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) (neg.f64 b_2)))","(/.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)) (*.f64 b_2 b_2)) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2))","(/.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)) (-.f64 (*.f64 b_2 b_2) (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) (neg.f64 b_2)))))","(/.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2) (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)) (*.f64 b_2 b_2))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))))","(fma.f64 (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) (neg.f64 b_2))","(fma.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)) #s(literal 1/4 binary64)) (neg.f64 b_2))","(fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))))","(fma.f64 b_2 #s(literal -1 binary64) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))))","(-.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) #s(literal 0 binary64)) b_2)","(-.f64 (/.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2)) (/.f64 (*.f64 b_2 b_2) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2)))","(-.f64 (/.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)) #s(literal 3/2 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))))","(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2)","(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))))","(+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) (neg.f64 b_2))","(*.f64 (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))))","(*.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)) #s(literal 1/4 binary64)))","(pow.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) #s(literal 1 binary64))","(pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))","(fabs.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))))","(exp.f64 (log.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))))","(*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))))","(pow.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) #s(literal 2 binary64))","(pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)) #s(literal 1 binary64))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))","(sqrt.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)) #s(literal 2 binary64)))","(fabs.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))","(exp.f64 (*.f64 (log.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)) #s(literal 2 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) #s(literal 1 binary64)))","(exp.f64 (log.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))))","(*.f64 (fma.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c) (/.f64 #s(literal 1/2 binary64) b_2)) c)","(*.f64 c (fma.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c) (/.f64 #s(literal 1/2 binary64) b_2)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal 1/2 binary64) b_2) #s(literal 2 binary64))) c) (fma.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c) (/.f64 #s(literal 1/2 binary64) b_2)))","(/.f64 (*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal -3 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) #s(literal 3 binary64))) c) (fma.f64 (pow.f64 (*.f64 (/.f64 c b_2) a) #s(literal -2 binary64)) #s(literal 4 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) (-.f64 (/.f64 #s(literal 1/2 binary64) b_2) (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c))))))","(/.f64 (*.f64 c (-.f64 (pow.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal 1/2 binary64) b_2) #s(literal 2 binary64)))) (fma.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c) (/.f64 #s(literal 1/2 binary64) b_2)))","(/.f64 (*.f64 c (fma.f64 #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal -3 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) #s(literal 3 binary64)))) (fma.f64 (pow.f64 (*.f64 (/.f64 c b_2) a) #s(literal -2 binary64)) #s(literal 4 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) (-.f64 (/.f64 #s(literal 1/2 binary64) b_2) (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c))))))","(fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) c) (pow.f64 b_2 #s(literal -1/2 binary64))) (pow.f64 b_2 #s(literal -1/2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) c))","(fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) c) (pow.f64 b_2 #s(literal -1/2 binary64))) (pow.f64 b_2 #s(literal -1/2 binary64)) (*.f64 c (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c))))","(fma.f64 (pow.f64 b_2 #s(literal -1/2 binary64)) (*.f64 (pow.f64 b_2 #s(literal -1/2 binary64)) (*.f64 #s(literal 1/2 binary64) c)) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) c))","(fma.f64 (pow.f64 b_2 #s(literal -1/2 binary64)) (*.f64 (pow.f64 b_2 #s(literal -1/2 binary64)) (*.f64 #s(literal 1/2 binary64) c)) (*.f64 c (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c))))","(fma.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) c (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c))","(fma.f64 (pow.f64 b_2 #s(literal -1 binary64)) (*.f64 #s(literal 1/2 binary64) c) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) c))","(fma.f64 (pow.f64 b_2 #s(literal -1 binary64)) (*.f64 #s(literal 1/2 binary64) c) (*.f64 c (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) c) (pow.f64 b_2 #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) c))","(fma.f64 (*.f64 #s(literal 1/2 binary64) c) (pow.f64 b_2 #s(literal -1 binary64)) (*.f64 c (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) c))","(fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 c (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c))))","(fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) c))","(fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 c (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c))))","(fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) c))","(fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 c (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c))))","(fma.f64 c (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c))","(fma.f64 c (/.f64 #s(literal 1/2 binary64) b_2) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) c))","(fma.f64 c (/.f64 #s(literal 1/2 binary64) b_2) (*.f64 c (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c))))","(+.f64 (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) c) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c))","(+.f64 (*.f64 c (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c))) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c))","(+.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) c))","(+.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c) (*.f64 c (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (fma.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c) (/.f64 #s(literal 1/2 binary64) b_2)) c)))","#s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (fma.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c) (/.f64 #s(literal 1/2 binary64) b_2)) c))","(*.f64 (-.f64 (pow.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal 1/2 binary64) b_2) #s(literal 2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c) (/.f64 #s(literal 1/2 binary64) b_2)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal -3 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 c b_2) a) #s(literal -2 binary64)) #s(literal 4 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) (-.f64 (/.f64 #s(literal 1/2 binary64) b_2) (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c))))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c) (/.f64 #s(literal 1/2 binary64) b_2)) (-.f64 (pow.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal 1/2 binary64) b_2) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 c b_2) a) #s(literal -2 binary64)) #s(literal 4 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) (-.f64 (/.f64 #s(literal 1/2 binary64) b_2) (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c))))) (fma.f64 #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal -3 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) #s(literal 2 binary64)) (fma.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c) (/.f64 #s(literal 1/2 binary64) b_2))) (*.f64 (fma.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c) (/.f64 #s(literal 1/2 binary64) b_2)) (pow.f64 (/.f64 #s(literal 1/2 binary64) b_2) #s(literal 2 binary64)))) (-.f64 (pow.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal 1/2 binary64) b_2) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 (neg.f64 b_2) a) #s(literal -2 binary64)) (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (neg.f64 c) #s(literal 1 binary64))) (*.f64 (neg.f64 c) (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 (neg.f64 b_2) a) #s(literal -2 binary64)) (*.f64 b_2 #s(literal 2 binary64))) (*.f64 (neg.f64 c) #s(literal 1 binary64))) (*.f64 (neg.f64 c) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 (neg.f64 b_2) a) #s(literal -2 binary64)) (neg.f64 (*.f64 b_2 #s(literal 2 binary64)))) (*.f64 (neg.f64 c) #s(literal -1 binary64))) (*.f64 (neg.f64 c) (neg.f64 (*.f64 b_2 #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 (neg.f64 b_2) a) #s(literal -2 binary64)) (neg.f64 (neg.f64 b_2))) (*.f64 (neg.f64 c) #s(literal 1/2 binary64))) (*.f64 (neg.f64 c) (neg.f64 (neg.f64 b_2))))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 (neg.f64 b_2) a) #s(literal -2 binary64)) b_2) (*.f64 (neg.f64 c) #s(literal 1/2 binary64))) (*.f64 (neg.f64 c) b_2))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 (neg.f64 b_2) a) #s(literal -2 binary64)) (neg.f64 b_2)) (*.f64 (neg.f64 c) #s(literal -1/2 binary64))) (*.f64 (neg.f64 c) (neg.f64 b_2)))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 (neg.f64 b_2) a)) (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (neg.f64 c) #s(literal 1 binary64))) (*.f64 (neg.f64 c) (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 (neg.f64 b_2) a)) (*.f64 b_2 #s(literal 2 binary64))) (*.f64 (neg.f64 c) #s(literal 1 binary64))) (*.f64 (neg.f64 c) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 (neg.f64 b_2) a)) (neg.f64 (*.f64 b_2 #s(literal 2 binary64)))) (*.f64 (neg.f64 c) #s(literal -1 binary64))) (*.f64 (neg.f64 c) (neg.f64 (*.f64 b_2 #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 (neg.f64 b_2) a)) (neg.f64 (neg.f64 b_2))) (*.f64 (neg.f64 c) #s(literal 1/2 binary64))) (*.f64 (neg.f64 c) (neg.f64 (neg.f64 b_2))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 (neg.f64 b_2) a)) b_2) (*.f64 (neg.f64 c) #s(literal 1/2 binary64))) (*.f64 (neg.f64 c) b_2))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 (neg.f64 b_2) a)) (neg.f64 b_2)) (*.f64 (neg.f64 c) #s(literal -1/2 binary64))) (*.f64 (neg.f64 c) (neg.f64 b_2)))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (neg.f64 c) #s(literal 1 binary64))) (*.f64 (neg.f64 c) (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (*.f64 b_2 #s(literal 2 binary64))) (*.f64 (neg.f64 c) #s(literal 1 binary64))) (*.f64 (neg.f64 c) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (neg.f64 (*.f64 b_2 #s(literal 2 binary64)))) (*.f64 (neg.f64 c) #s(literal -1 binary64))) (*.f64 (neg.f64 c) (neg.f64 (*.f64 b_2 #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (neg.f64 (neg.f64 b_2))) (*.f64 (neg.f64 c) #s(literal 1/2 binary64))) (*.f64 (neg.f64 c) (neg.f64 (neg.f64 b_2))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) b_2) (*.f64 (neg.f64 c) #s(literal 1/2 binary64))) (*.f64 (neg.f64 c) b_2))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (neg.f64 b_2)) (*.f64 (neg.f64 c) #s(literal -1/2 binary64))) (*.f64 (neg.f64 c) (neg.f64 b_2)))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -2 binary64) b_2) (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 c a) #s(literal 1 binary64))) (*.f64 (*.f64 c a) (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -2 binary64) b_2) (*.f64 b_2 #s(literal 2 binary64))) (*.f64 (*.f64 c a) #s(literal 1 binary64))) (*.f64 (*.f64 c a) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -2 binary64) b_2) (neg.f64 (*.f64 b_2 #s(literal 2 binary64)))) (*.f64 (*.f64 c a) #s(literal -1 binary64))) (*.f64 (*.f64 c a) (neg.f64 (*.f64 b_2 #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -2 binary64) b_2) (neg.f64 (neg.f64 b_2))) (*.f64 (*.f64 c a) #s(literal 1/2 binary64))) (*.f64 (*.f64 c a) (neg.f64 (neg.f64 b_2))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -2 binary64) b_2) b_2) (*.f64 (*.f64 c a) #s(literal 1/2 binary64))) (*.f64 (*.f64 c a) b_2))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -2 binary64) b_2) (neg.f64 b_2)) (*.f64 (*.f64 c a) #s(literal -1/2 binary64))) (*.f64 (*.f64 c a) (neg.f64 b_2)))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 #s(literal -2 binary64)) (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 c a) #s(literal 1 binary64))) (*.f64 (*.f64 c a) (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 #s(literal -2 binary64)) (*.f64 b_2 #s(literal 2 binary64))) (*.f64 (*.f64 c a) #s(literal 1 binary64))) (*.f64 (*.f64 c a) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 #s(literal -2 binary64)) (neg.f64 (*.f64 b_2 #s(literal 2 binary64)))) (*.f64 (*.f64 c a) #s(literal -1 binary64))) (*.f64 (*.f64 c a) (neg.f64 (*.f64 b_2 #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 #s(literal -2 binary64)) (neg.f64 (neg.f64 b_2))) (*.f64 (*.f64 c a) #s(literal 1/2 binary64))) (*.f64 (*.f64 c a) (neg.f64 (neg.f64 b_2))))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 #s(literal -2 binary64)) b_2) (*.f64 (*.f64 c a) #s(literal 1/2 binary64))) (*.f64 (*.f64 c a) b_2))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 #s(literal -2 binary64)) (neg.f64 b_2)) (*.f64 (*.f64 c a) #s(literal -1/2 binary64))) (*.f64 (*.f64 c a) (neg.f64 b_2)))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)) (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 c #s(literal 1 binary64))) (*.f64 c (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)) (neg.f64 (*.f64 b_2 #s(literal 2 binary64)))) (neg.f64 c)) (*.f64 c (neg.f64 (*.f64 b_2 #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)) (neg.f64 (neg.f64 b_2))) (*.f64 #s(literal 1/2 binary64) c)) (*.f64 c (neg.f64 (neg.f64 b_2))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) #s(literal 1 binary64))) (*.f64 (/.f64 c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 b_2 #s(literal 2 binary64))) (*.f64 (/.f64 c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) #s(literal 1 binary64))) (*.f64 (/.f64 c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (*.f64 b_2 #s(literal 2 binary64)))) (*.f64 (/.f64 c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) #s(literal -1 binary64))) (*.f64 (/.f64 c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (neg.f64 (*.f64 b_2 #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 b_2))) (*.f64 (/.f64 c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) #s(literal 1/2 binary64))) (*.f64 (/.f64 c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (neg.f64 (neg.f64 b_2))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) b_2) (*.f64 (/.f64 c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) #s(literal 1/2 binary64))) (*.f64 (/.f64 c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) b_2))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 b_2)) (*.f64 (/.f64 c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) #s(literal -1/2 binary64))) (*.f64 (/.f64 c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (neg.f64 b_2)))","(/.f64 (-.f64 (*.f64 #s(literal -2 binary64) (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 c b_2) a) #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 c b_2) a) (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -2 binary64) (*.f64 b_2 #s(literal 2 binary64))) (*.f64 (*.f64 (/.f64 c b_2) a) #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 c b_2) a) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -2 binary64) (neg.f64 (*.f64 b_2 #s(literal 2 binary64)))) (*.f64 (*.f64 (/.f64 c b_2) a) #s(literal -1 binary64))) (*.f64 (*.f64 (/.f64 c b_2) a) (neg.f64 (*.f64 b_2 #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal -2 binary64) (neg.f64 (neg.f64 b_2))) (*.f64 (*.f64 (/.f64 c b_2) a) #s(literal 1/2 binary64))) (*.f64 (*.f64 (/.f64 c b_2) a) (neg.f64 (neg.f64 b_2))))","(/.f64 (-.f64 (*.f64 #s(literal -2 binary64) b_2) (*.f64 (*.f64 (/.f64 c b_2) a) #s(literal 1/2 binary64))) (*.f64 (*.f64 (/.f64 c b_2) a) b_2))","(/.f64 (-.f64 (*.f64 #s(literal -2 binary64) (neg.f64 b_2)) (*.f64 (*.f64 (/.f64 c b_2) a) #s(literal -1/2 binary64))) (*.f64 (*.f64 (/.f64 c b_2) a) (neg.f64 b_2)))","(/.f64 (fma.f64 (*.f64 (/.f64 (neg.f64 b_2) a) #s(literal -2 binary64)) (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 c) #s(literal 1 binary64))) (*.f64 (neg.f64 c) (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (/.f64 (neg.f64 b_2) a) #s(literal -2 binary64)) (*.f64 b_2 #s(literal 2 binary64)) (*.f64 (neg.f64 c) #s(literal 1 binary64))) (*.f64 (neg.f64 c) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (/.f64 (neg.f64 b_2) a) #s(literal -2 binary64)) (neg.f64 (*.f64 b_2 #s(literal 2 binary64))) (*.f64 (neg.f64 c) #s(literal -1 binary64))) (*.f64 (neg.f64 c) (neg.f64 (*.f64 b_2 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (/.f64 (neg.f64 b_2) a) #s(literal -2 binary64)) (neg.f64 (neg.f64 b_2)) (*.f64 (neg.f64 c) #s(literal 1/2 binary64))) (*.f64 (neg.f64 c) (neg.f64 (neg.f64 b_2))))","(/.f64 (fma.f64 (*.f64 (/.f64 (neg.f64 b_2) a) #s(literal -2 binary64)) b_2 (*.f64 (neg.f64 c) #s(literal 1/2 binary64))) (*.f64 (neg.f64 c) b_2))","(/.f64 (fma.f64 (*.f64 (/.f64 (neg.f64 b_2) a) #s(literal -2 binary64)) (neg.f64 b_2) (*.f64 (neg.f64 c) #s(literal -1/2 binary64))) (*.f64 (neg.f64 c) (neg.f64 b_2)))","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (/.f64 (neg.f64 b_2) a)) (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 c) #s(literal 1 binary64))) (*.f64 (neg.f64 c) (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (/.f64 (neg.f64 b_2) a)) (*.f64 b_2 #s(literal 2 binary64)) (*.f64 (neg.f64 c) #s(literal 1 binary64))) (*.f64 (neg.f64 c) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (/.f64 (neg.f64 b_2) a)) (neg.f64 (*.f64 b_2 #s(literal 2 binary64))) (*.f64 (neg.f64 c) #s(literal -1 binary64))) (*.f64 (neg.f64 c) (neg.f64 (*.f64 b_2 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (/.f64 (neg.f64 b_2) a)) (neg.f64 (neg.f64 b_2)) (*.f64 (neg.f64 c) #s(literal 1/2 binary64))) (*.f64 (neg.f64 c) (neg.f64 (neg.f64 b_2))))","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (/.f64 (neg.f64 b_2) a)) b_2 (*.f64 (neg.f64 c) #s(literal 1/2 binary64))) (*.f64 (neg.f64 c) b_2))","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (/.f64 (neg.f64 b_2) a)) (neg.f64 b_2) (*.f64 (neg.f64 c) #s(literal -1/2 binary64))) (*.f64 (neg.f64 c) (neg.f64 b_2)))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 c) #s(literal 1 binary64))) (*.f64 (neg.f64 c) (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (*.f64 b_2 #s(literal 2 binary64)) (*.f64 (neg.f64 c) #s(literal 1 binary64))) (*.f64 (neg.f64 c) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (neg.f64 (*.f64 b_2 #s(literal 2 binary64))) (*.f64 (neg.f64 c) #s(literal -1 binary64))) (*.f64 (neg.f64 c) (neg.f64 (*.f64 b_2 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (neg.f64 (neg.f64 b_2)) (*.f64 (neg.f64 c) #s(literal 1/2 binary64))) (*.f64 (neg.f64 c) (neg.f64 (neg.f64 b_2))))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) b_2 (*.f64 (neg.f64 c) #s(literal 1/2 binary64))) (*.f64 (neg.f64 c) b_2))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (neg.f64 b_2) (*.f64 (neg.f64 c) #s(literal -1/2 binary64))) (*.f64 (neg.f64 c) (neg.f64 b_2)))","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) b_2) (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 c a) #s(literal 1 binary64))) (*.f64 (*.f64 c a) (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) b_2) (*.f64 b_2 #s(literal 2 binary64)) (*.f64 (*.f64 c a) #s(literal 1 binary64))) (*.f64 (*.f64 c a) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) b_2) (neg.f64 (*.f64 b_2 #s(literal 2 binary64))) (*.f64 (*.f64 c a) #s(literal -1 binary64))) (*.f64 (*.f64 c a) (neg.f64 (*.f64 b_2 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) b_2) (neg.f64 (neg.f64 b_2)) (*.f64 (*.f64 c a) #s(literal 1/2 binary64))) (*.f64 (*.f64 c a) (neg.f64 (neg.f64 b_2))))","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) b_2) b_2 (*.f64 (*.f64 c a) #s(literal 1/2 binary64))) (*.f64 (*.f64 c a) b_2))","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) b_2) (neg.f64 b_2) (*.f64 (*.f64 c a) #s(literal -1/2 binary64))) (*.f64 (*.f64 c a) (neg.f64 b_2)))","(/.f64 (fma.f64 (*.f64 b_2 #s(literal -2 binary64)) (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 c a) #s(literal 1 binary64))) (*.f64 (*.f64 c a) (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 b_2 #s(literal -2 binary64)) (*.f64 b_2 #s(literal 2 binary64)) (*.f64 (*.f64 c a) #s(literal 1 binary64))) (*.f64 (*.f64 c a) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 b_2 #s(literal -2 binary64)) (neg.f64 (*.f64 b_2 #s(literal 2 binary64))) (*.f64 (*.f64 c a) #s(literal -1 binary64))) (*.f64 (*.f64 c a) (neg.f64 (*.f64 b_2 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 b_2 #s(literal -2 binary64)) (neg.f64 (neg.f64 b_2)) (*.f64 (*.f64 c a) #s(literal 1/2 binary64))) (*.f64 (*.f64 c a) (neg.f64 (neg.f64 b_2))))","(/.f64 (fma.f64 (*.f64 b_2 #s(literal -2 binary64)) b_2 (*.f64 (*.f64 c a) #s(literal 1/2 binary64))) (*.f64 (*.f64 c a) b_2))","(/.f64 (fma.f64 (*.f64 b_2 #s(literal -2 binary64)) (neg.f64 b_2) (*.f64 (*.f64 c a) #s(literal -1/2 binary64))) (*.f64 (*.f64 c a) (neg.f64 b_2)))","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)) (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 c #s(literal 1 binary64))) (*.f64 c (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)) (neg.f64 (*.f64 b_2 #s(literal 2 binary64))) (neg.f64 c)) (*.f64 c (neg.f64 (*.f64 b_2 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)) (neg.f64 (neg.f64 b_2)) (*.f64 #s(literal 1/2 binary64) c)) (*.f64 c (neg.f64 (neg.f64 b_2))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) #s(literal 1 binary64))) (*.f64 (/.f64 c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 b_2 #s(literal 2 binary64)) (*.f64 (/.f64 c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) #s(literal 1 binary64))) (*.f64 (/.f64 c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (*.f64 b_2 #s(literal 2 binary64))) (*.f64 (/.f64 c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) #s(literal -1 binary64))) (*.f64 (/.f64 c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (neg.f64 (*.f64 b_2 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 b_2)) (*.f64 (/.f64 c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) #s(literal 1/2 binary64))) (*.f64 (/.f64 c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (neg.f64 (neg.f64 b_2))))","(/.f64 (fma.f64 #s(literal 1 binary64) b_2 (*.f64 (/.f64 c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) #s(literal 1/2 binary64))) (*.f64 (/.f64 c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) b_2))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 b_2) (*.f64 (/.f64 c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) #s(literal -1/2 binary64))) (*.f64 (/.f64 c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (neg.f64 b_2)))","(/.f64 (fma.f64 #s(literal -2 binary64) (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (/.f64 c b_2) a) #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 c b_2) a) (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal -2 binary64) (*.f64 b_2 #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 c b_2) a) #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 c b_2) a) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (*.f64 b_2 #s(literal 2 binary64))) (*.f64 (*.f64 (/.f64 c b_2) a) #s(literal -1 binary64))) (*.f64 (*.f64 (/.f64 c b_2) a) (neg.f64 (*.f64 b_2 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (neg.f64 b_2)) (*.f64 (*.f64 (/.f64 c b_2) a) #s(literal 1/2 binary64))) (*.f64 (*.f64 (/.f64 c b_2) a) (neg.f64 (neg.f64 b_2))))","(/.f64 (fma.f64 #s(literal -2 binary64) b_2 (*.f64 (*.f64 (/.f64 c b_2) a) #s(literal 1/2 binary64))) (*.f64 (*.f64 (/.f64 c b_2) a) b_2))","(/.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 b_2) (*.f64 (*.f64 (/.f64 c b_2) a) #s(literal -1/2 binary64))) (*.f64 (*.f64 (/.f64 c b_2) a) (neg.f64 b_2)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 c) (*.f64 (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 (neg.f64 b_2) a) #s(literal -2 binary64)))) (*.f64 (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64)) (neg.f64 c)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 c) (*.f64 (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal -2 binary64) (/.f64 (neg.f64 b_2) a)))) (*.f64 (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64)) (neg.f64 c)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 c) (*.f64 (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64)) (neg.f64 (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))))) (*.f64 (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64)) (neg.f64 c)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 c a) (*.f64 (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal -2 binary64) b_2))) (*.f64 (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 c a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 c a) (*.f64 (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 b_2 #s(literal -2 binary64)))) (*.f64 (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 c a)))","(/.f64 (fma.f64 #s(literal 1 binary64) c (*.f64 (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))) (*.f64 (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64)) c))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (*.f64 (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) a) (*.f64 (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -2 binary64))) (*.f64 (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 c b_2) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 c) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 (/.f64 (neg.f64 b_2) a) #s(literal -2 binary64)))) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (neg.f64 c)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 c) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) (/.f64 (neg.f64 b_2) a)))) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (neg.f64 c)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 c) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (neg.f64 (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))))) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (neg.f64 c)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 c a) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) b_2))) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 c a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 c a) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 b_2 #s(literal -2 binary64)))) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 c a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (/.f64 c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) a) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal -2 binary64))) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 (/.f64 c b_2) a)))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 c) (*.f64 (neg.f64 (*.f64 b_2 #s(literal 2 binary64))) (*.f64 (/.f64 (neg.f64 b_2) a) #s(literal -2 binary64)))) (*.f64 (neg.f64 (*.f64 b_2 #s(literal 2 binary64))) (neg.f64 c)))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 c) (*.f64 (neg.f64 (*.f64 b_2 #s(literal 2 binary64))) (*.f64 #s(literal -2 binary64) (/.f64 (neg.f64 b_2) a)))) (*.f64 (neg.f64 (*.f64 b_2 #s(literal 2 binary64))) (neg.f64 c)))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 c) (*.f64 (neg.f64 (*.f64 b_2 #s(literal 2 binary64))) (neg.f64 (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))))) (*.f64 (neg.f64 (*.f64 b_2 #s(literal 2 binary64))) (neg.f64 c)))","(/.f64 (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 (*.f64 b_2 #s(literal 2 binary64))) (*.f64 #s(literal -2 binary64) b_2))) (*.f64 (neg.f64 (*.f64 b_2 #s(literal 2 binary64))) (*.f64 c a)))","(/.f64 (fma.f64 (neg.f64 a) c (*.f64 (neg.f64 (*.f64 b_2 #s(literal 2 binary64))) (*.f64 b_2 #s(literal -2 binary64)))) (*.f64 (neg.f64 (*.f64 b_2 #s(literal 2 binary64))) (*.f64 c a)))","(/.f64 (+.f64 (neg.f64 c) (*.f64 (neg.f64 (*.f64 b_2 #s(literal 2 binary64))) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))) (*.f64 (neg.f64 (*.f64 b_2 #s(literal 2 binary64))) c))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (*.f64 (neg.f64 (*.f64 b_2 #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (*.f64 b_2 #s(literal 2 binary64))) (/.f64 c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (/.f64 c b_2) a) (*.f64 (neg.f64 (*.f64 b_2 #s(literal 2 binary64))) #s(literal -2 binary64))) (*.f64 (neg.f64 (*.f64 b_2 #s(literal 2 binary64))) (*.f64 (/.f64 c b_2) a)))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (neg.f64 c) (*.f64 (neg.f64 (neg.f64 b_2)) (*.f64 (/.f64 (neg.f64 b_2) a) #s(literal -2 binary64)))) (*.f64 (neg.f64 (neg.f64 b_2)) (neg.f64 c)))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (neg.f64 c) (*.f64 (neg.f64 (neg.f64 b_2)) (*.f64 #s(literal -2 binary64) (/.f64 (neg.f64 b_2) a)))) (*.f64 (neg.f64 (neg.f64 b_2)) (neg.f64 c)))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (neg.f64 c) (*.f64 (neg.f64 (neg.f64 b_2)) (neg.f64 (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))))) (*.f64 (neg.f64 (neg.f64 b_2)) (neg.f64 c)))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 c a) (*.f64 (neg.f64 (neg.f64 b_2)) (*.f64 #s(literal -2 binary64) b_2))) (*.f64 (neg.f64 (neg.f64 b_2)) (*.f64 c a)))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 c a) (*.f64 (neg.f64 (neg.f64 b_2)) (*.f64 b_2 #s(literal -2 binary64)))) (*.f64 (neg.f64 (neg.f64 b_2)) (*.f64 c a)))","(/.f64 (fma.f64 #s(literal 1/2 binary64) c (*.f64 (neg.f64 (neg.f64 b_2)) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))) (*.f64 (neg.f64 (neg.f64 b_2)) c))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (*.f64 (neg.f64 (neg.f64 b_2)) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 b_2)) (/.f64 c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (/.f64 c b_2) a) (*.f64 (neg.f64 (neg.f64 b_2)) #s(literal -2 binary64))) (*.f64 (neg.f64 (neg.f64 b_2)) (*.f64 (/.f64 c b_2) a)))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (neg.f64 c) (*.f64 b_2 (*.f64 (/.f64 (neg.f64 b_2) a) #s(literal -2 binary64)))) (*.f64 b_2 (neg.f64 c)))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (neg.f64 c) (*.f64 b_2 (*.f64 #s(literal -2 binary64) (/.f64 (neg.f64 b_2) a)))) (*.f64 b_2 (neg.f64 c)))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (neg.f64 c) (*.f64 b_2 (neg.f64 (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))))) (*.f64 b_2 (neg.f64 c)))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 c a) (*.f64 b_2 (*.f64 #s(literal -2 binary64) b_2))) (*.f64 b_2 (*.f64 c a)))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 c a) (*.f64 b_2 (*.f64 b_2 #s(literal -2 binary64)))) (*.f64 b_2 (*.f64 c a)))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (*.f64 b_2 #s(literal 1 binary64))) (*.f64 b_2 (/.f64 c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (/.f64 c b_2) a) (*.f64 b_2 #s(literal -2 binary64))) (*.f64 b_2 (*.f64 (/.f64 c b_2) a)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (neg.f64 c) (*.f64 (neg.f64 b_2) (*.f64 (/.f64 (neg.f64 b_2) a) #s(literal -2 binary64)))) (*.f64 (neg.f64 b_2) (neg.f64 c)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (neg.f64 c) (*.f64 (neg.f64 b_2) (*.f64 #s(literal -2 binary64) (/.f64 (neg.f64 b_2) a)))) (*.f64 (neg.f64 b_2) (neg.f64 c)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (neg.f64 c) (*.f64 (neg.f64 b_2) (neg.f64 (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))))) (*.f64 (neg.f64 b_2) (neg.f64 c)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 c a) (*.f64 (neg.f64 b_2) (*.f64 #s(literal -2 binary64) b_2))) (*.f64 (neg.f64 b_2) (*.f64 c a)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 c a) (*.f64 (neg.f64 b_2) (*.f64 b_2 #s(literal -2 binary64)))) (*.f64 (neg.f64 b_2) (*.f64 c a)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (*.f64 (neg.f64 b_2) #s(literal 1 binary64))) (*.f64 (neg.f64 b_2) (/.f64 c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 (/.f64 c b_2) a) (*.f64 (neg.f64 b_2) #s(literal -2 binary64))) (*.f64 (neg.f64 b_2) (*.f64 (/.f64 c b_2) a)))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) b_2) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) #s(literal 2 binary64))) (-.f64 (/.f64 #s(literal 1/2 binary64) b_2) (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c))))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/2 binary64) b_2) #s(literal 3 binary64))) (fma.f64 (pow.f64 (*.f64 (/.f64 c b_2) a) #s(literal -2 binary64)) #s(literal 4 binary64) (fma.f64 (pow.f64 b_2 #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) (/.f64 #s(literal 1/2 binary64) b_2)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal 1/2 binary64) b_2) #s(literal 2 binary64)))) (neg.f64 (fma.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c) (/.f64 #s(literal 1/2 binary64) b_2))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal -3 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 c b_2) a) #s(literal -2 binary64)) #s(literal 4 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) (-.f64 (/.f64 #s(literal 1/2 binary64) b_2) (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)) (*.f64 b_2 #s(literal 2 binary64))) (*.f64 c #s(literal 1 binary64))) (*.f64 c (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)) b_2) (*.f64 #s(literal 1/2 binary64) c)) (*.f64 c b_2))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)) (neg.f64 b_2)) (*.f64 #s(literal -1/2 binary64) c)) (*.f64 c (neg.f64 b_2)))","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)) (*.f64 b_2 #s(literal 2 binary64)) (*.f64 c #s(literal 1 binary64))) (*.f64 c (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)) b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 c b_2))","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)) (neg.f64 b_2) (*.f64 #s(literal -1/2 binary64) c)) (*.f64 c (neg.f64 b_2)))","(/.f64 (fma.f64 #s(literal 1 binary64) c (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) c))","(/.f64 (fma.f64 #s(literal 1/2 binary64) c (*.f64 b_2 (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))) (*.f64 b_2 c))","(/.f64 (fma.f64 #s(literal -1/2 binary64) c (*.f64 (neg.f64 b_2) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))) (*.f64 (neg.f64 b_2) c))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal 1/2 binary64) b_2) #s(literal 2 binary64))) (fma.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c) (/.f64 #s(literal 1/2 binary64) b_2)))","(/.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal -3 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) #s(literal 3 binary64))) (fma.f64 (pow.f64 b_2 #s(literal -2 binary64)) #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) (/.f64 #s(literal 1/2 binary64) b_2)))))","(/.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal -3 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) #s(literal 3 binary64))) (fma.f64 (pow.f64 (*.f64 (/.f64 c b_2) a) #s(literal -2 binary64)) #s(literal 4 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) (-.f64 (/.f64 #s(literal 1/2 binary64) b_2) (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c) (/.f64 #s(literal 1/2 binary64) b_2)) (-.f64 (pow.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal 1/2 binary64) b_2) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 c b_2) a) #s(literal -2 binary64)) #s(literal 4 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) (-.f64 (/.f64 #s(literal 1/2 binary64) b_2) (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c))))) (fma.f64 #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal -3 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) #s(literal 3 binary64)))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 b_2 #s(literal -1/2 binary64))) (pow.f64 b_2 #s(literal -1/2 binary64)) (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)))","(fma.f64 (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)) (pow.f64 c #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/2 binary64) b_2)))","(fma.f64 (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)) (pow.f64 c #s(literal -1 binary64)) (/.f64 #s(literal 1/2 binary64) b_2))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) b_2) (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)))","(fma.f64 (pow.f64 b_2 #s(literal -1 binary64)) #s(literal 1/2 binary64) (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)))","(fma.f64 #s(literal 1/2 binary64) (pow.f64 b_2 #s(literal -1 binary64)) (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)))","(fma.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c) (neg.f64 (/.f64 #s(literal 1/2 binary64) b_2)))","(fma.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c) (/.f64 #s(literal 1/2 binary64) b_2))","(fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (neg.f64 (/.f64 #s(literal 1/2 binary64) b_2)))","(fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2))","(fma.f64 #s(literal -1/2 binary64) (pow.f64 b_2 #s(literal -1 binary64)) (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)))","(fma.f64 (/.f64 b_2 a) (/.f64 #s(literal -2 binary64) c) (neg.f64 (/.f64 #s(literal 1/2 binary64) b_2)))","(fma.f64 (/.f64 b_2 a) (/.f64 #s(literal -2 binary64) c) (/.f64 #s(literal 1/2 binary64) b_2))","(fma.f64 (/.f64 b_2 a) (*.f64 (pow.f64 c #s(literal -1 binary64)) #s(literal -2 binary64)) (neg.f64 (/.f64 #s(literal 1/2 binary64) b_2)))","(fma.f64 (/.f64 b_2 a) (*.f64 (pow.f64 c #s(literal -1 binary64)) #s(literal -2 binary64)) (/.f64 #s(literal 1/2 binary64) b_2))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) #s(literal 2 binary64)) (fma.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c) (/.f64 #s(literal 1/2 binary64) b_2))) (/.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) b_2) #s(literal 2 binary64)) (fma.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c) (/.f64 #s(literal 1/2 binary64) b_2))))","(-.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) (/.f64 #s(literal 1/2 binary64) b_2))","(+.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) (neg.f64 (/.f64 #s(literal 1/2 binary64) b_2)))","(+.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) (/.f64 #s(literal 1/2 binary64) b_2))","(+.f64 (/.f64 #s(literal 1/2 binary64) b_2) (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)))","(*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) c) (pow.f64 b_2 #s(literal -1/2 binary64))) (pow.f64 b_2 #s(literal -1/2 binary64)))","(*.f64 (pow.f64 b_2 #s(literal -1/2 binary64)) (*.f64 (pow.f64 b_2 #s(literal -1/2 binary64)) (*.f64 #s(literal 1/2 binary64) c)))","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (*.f64 #s(literal 1/2 binary64) c))","(*.f64 (*.f64 #s(literal 1/2 binary64) c) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c)","(*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))","(*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))","(*.f64 c (/.f64 #s(literal 1/2 binary64) b_2))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) c)) b_2)","(/.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) c) #s(literal 1 binary64)) b_2)","(/.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 c)) (neg.f64 b_2))","(/.f64 (*.f64 #s(literal 1/2 binary64) c) b_2)","(/.f64 #s(literal 1/2 binary64) (/.f64 b_2 c))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c)))","#s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c))","(*.f64 #s(literal 1/2 binary64) c)","(*.f64 c #s(literal 1/2 binary64))","(*.f64 (pow.f64 c #s(literal -1 binary64)) (/.f64 b_2 a))","(*.f64 (/.f64 b_2 c) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 (/.f64 b_2 c) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 b_2) a) (pow.f64 (neg.f64 c) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 b_2 a) c))","(*.f64 (/.f64 b_2 a) (pow.f64 c #s(literal -1 binary64)))","(*.f64 b_2 (/.f64 (pow.f64 a #s(literal -1 binary64)) c))","(*.f64 b_2 (pow.f64 (*.f64 c a) #s(literal -1 binary64)))","(pow.f64 (/.f64 (*.f64 (/.f64 c b_2) a) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 c a) b_2) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 a b_2) c) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 c b_2) a) #s(literal -1 binary64))","(/.f64 (/.f64 (/.f64 (neg.f64 b_2) a) #s(literal -1 binary64)) c)","(/.f64 (*.f64 (neg.f64 b_2) (pow.f64 c #s(literal -1 binary64))) (neg.f64 a))","(/.f64 (*.f64 (/.f64 b_2 a) #s(literal 1 binary64)) c)","(/.f64 (*.f64 (neg.f64 b_2) #s(literal 1 binary64)) (*.f64 (neg.f64 c) a))","(/.f64 (*.f64 b_2 #s(literal 1 binary64)) (*.f64 c a))","(/.f64 (pow.f64 c #s(literal -1 binary64)) (/.f64 a b_2))","(/.f64 (/.f64 b_2 c) a)","(/.f64 (/.f64 (neg.f64 b_2) a) (neg.f64 c))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (/.f64 c b_2) a) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 c a) b_2))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 a b_2) c))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) a))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 c b_2) a)))","(/.f64 (neg.f64 b_2) (*.f64 (neg.f64 c) a))","(/.f64 (/.f64 b_2 a) (neg.f64 (neg.f64 c)))","(/.f64 (/.f64 b_2 a) c)","(/.f64 b_2 (*.f64 c a))","(neg.f64 (/.f64 (/.f64 (neg.f64 b_2) a) c))","(neg.f64 (/.f64 (/.f64 b_2 a) (neg.f64 c)))","(exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 c b_2) a)) #s(literal -1 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":325.801025390625,"type":"rewrite"},{"compiler":[[27276,3008]],"memory":[[-1825472,64410384]],"time":165.8759765625,"type":"eval"},{"alts":[["(/.f64 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) a (*.f64 a (neg.f64 b_2))) (*.f64 a a))","fresh",48.98519753506279,"binary64"],["(/.f64 (/.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)) (*.f64 b_2 b_2)) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2)) a)","fresh",42.68521364535678,"binary64"],["(/.f64 (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2) a)","done",30.155303139911183,"binary64"],["(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) a)","done",31.104321425054025,"binary64"],["(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) a)","done",42.032803427762936,"binary64"],["(/.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (neg.f64 b_2)) b_2) a)","fresh",41.27830321212375,"binary64"],["(/.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64))) (*.f64 a (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))))))","fresh",62.65884900713957,"binary64"],["(/.f64 #s(approx (- (* b_2 b_2) (+ (* (neg c) a) (* b_2 b_2))) (*.f64 a c)) (*.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))","fresh",37.63878306731001,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2)))","fresh",42.058383258328156,"binary64"],["(*.f64 (pow.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) #s(literal -1 binary64)) (/.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)) a))","fresh",45.76613064409217,"binary64"],["(exp.f64 (*.f64 (log.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2))) #s(literal -1 binary64)))","fresh",54.044563117703284,"binary64"],["#s(approx (/ (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) a) (/.f64 #s(literal -1/2 binary64) (/.f64 b_2 c)))","fresh",42.812601197526085,"binary64"],["#s(approx (/ (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","done",42.75010113736626,"binary64"],["#s(approx (/ (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) a) (*.f64 #s(literal -1/2 binary64) (exp.f64 (*.f64 (log.f64 (/.f64 b_2 c)) #s(literal -1 binary64)))))","fresh",52.279392295442335,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -2 binary64) (/.f64 a b_2)))","fresh",41.33299229447682,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (neg.f64 b_2) #s(approx (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64)))))","done",56.06875827405116,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","done",41.27830321212375,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (exp.f64 (*.f64 (log.f64 (/.f64 a b_2)) #s(literal -1 binary64)))))","fresh",53.873258640317715,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))))","fresh",41.22720841843829,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (/.f64 (*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal -3 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) #s(literal 3 binary64))) c) (fma.f64 (pow.f64 (*.f64 (/.f64 c b_2) a) #s(literal -2 binary64)) #s(literal 4 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) (-.f64 (/.f64 #s(literal 1/2 binary64) b_2) (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c))))))))","fresh",58.66267818029863,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal 1/2 binary64) b_2) #s(literal 2 binary64))) c) (fma.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c) (/.f64 #s(literal 1/2 binary64) b_2)))))","fresh",55.796293425362,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (/.f64 #s(literal 1/2 binary64) (/.f64 b_2 c))))","fresh",56.01103961005704,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (neg.f64 (/.f64 #s(literal 1/2 binary64) b_2))) c)))","fresh",44.64097344388628,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (fma.f64 (*.f64 (/.f64 b_2 c) (pow.f64 (neg.f64 a) #s(literal -1 binary64))) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2)) c)))","fresh",62.40439330362853,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c) (/.f64 #s(literal 1/2 binary64) b_2)) (-.f64 (pow.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal 1/2 binary64) b_2) #s(literal 2 binary64))))) c)))","fresh",55.32684978643164,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c)))","fresh",56.01103967021622,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 #s(approx (+ (* (/ (/ b_2 a) c) -2) (/ 1/2 b_2)) (*.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64))) c)))","fresh",44.38783399554584,"binary64"]],"compiler":[[1610,339],[23,15],[34,15],[12,9],[22,14],[17,12],[15,11],[49,19],[30,18],[19,14],[26,16],[21,16],[19,14],[19,14],[23,18],[19,14],[36,25],[19,14],[23,18],[39,26],[70,41],[57,33],[34,23],[42,28],[44,30],[59,35],[34,23],[50,33]],"count":[[683,27]],"kept":[{"done":[4,3],"fresh":[15,7],"new":[659,14],"picked":[5,3]}],"memory":[[-2262240,42143168]],"min-error":[[5.68699150034504,"binary64"]],"time":39.615966796875,"type":"prune"},{"accuracy":[8.129449547455332],"baseline":[30.155303139911183],"branch":[["a",30.15530313991118,1,"binary64"],["b_2",8.129449547455332,3,"binary64"],["c",30.15530313991118,1,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",16.486747938651572,5,"binary64"]],"compiler":[[1,3],[1,3],[1,3],[13,10]],"count":[[55,3]],"inputs":[["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","#s(approx (/ (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a)","(/.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (neg.f64 b_2)) b_2) a)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (/.f64 #s(literal 1/2 binary64) (/.f64 b_2 c))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -2 binary64) (/.f64 a b_2)))","#s(approx (/ (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) a) (/.f64 #s(literal -1/2 binary64) (/.f64 b_2 c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (neg.f64 b_2) #s(approx (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64)))))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) a)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 #s(approx (+ (* (/ (/ b_2 a) c) -2) (/ 1/2 b_2)) (*.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64))) c)))","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (/.f64 (*.f64 c a) b_2) #s(literal -1/2 binary64))) a)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(/.f64 (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2) a)","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2)))","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2)) c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (neg.f64 (/.f64 #s(literal 1/2 binary64) b_2))) c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 c b_2) b_2) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a))))","(/.f64 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) a (*.f64 a (neg.f64 b_2))) (*.f64 a a))","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2)))","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) a)","(/.f64 #s(approx (- (* b_2 b_2) (+ (* (neg c) a) (* b_2 b_2))) (*.f64 a c)) (*.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)))) a)","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))) a) (*.f64 a b_2)) (*.f64 a a))","(/.f64 (/.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)) (*.f64 b_2 b_2)) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2)) a)","(/.f64 (/.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) a)","(/.f64 (-.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) (*.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))","(/.f64 (/.f64 (-.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) (neg.f64 b_2))) a)","#s(approx (/ (+ (neg b_2) (sqrt (* (pow (+ (* (+ (* c a) (* b_2 b_2)) (* c a)) (pow b_2 4)) -1) (- (pow b_2 6) (pow (* c a) 3))))) a) (*.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 c (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) b_2) (/.f64 (*.f64 a a) b_2)) (*.f64 a b_2)) (/.f64 #s(literal 1 binary64) b_2))) c))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (*.f64 #s(literal 1/2 binary64) c) (pow.f64 b_2 #s(literal -1 binary64)))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (fma.f64 (*.f64 c #s(literal -1/8 binary64)) (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 #s(literal -1/2 binary64) b_2)) c))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (fma.f64 (*.f64 (/.f64 b_2 c) (pow.f64 (neg.f64 a) #s(literal -1 binary64))) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2)) c)))","(*.f64 (pow.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 a (neg.f64 c) (*.f64 b_2 b_2)))) #s(literal -1 binary64)) (/.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)) a))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 #s(literal 1/2 binary64) (exp.f64 (*.f64 (log.f64 (/.f64 b_2 c)) #s(literal -1 binary64))))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (exp.f64 (*.f64 (log.f64 (/.f64 a b_2)) #s(literal -1 binary64)))))","#s(approx (/ (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) a) (*.f64 #s(literal -1/2 binary64) (exp.f64 (*.f64 (log.f64 (/.f64 b_2 c)) #s(literal -1 binary64)))))","(exp.f64 (*.f64 (log.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2))) #s(literal -1 binary64)))","(/.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64))) (*.f64 a (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal 1/2 binary64) b_2) #s(literal 2 binary64))) c) (fma.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c) (/.f64 #s(literal 1/2 binary64) b_2)))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c) (/.f64 #s(literal 1/2 binary64) b_2)) (-.f64 (pow.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal 1/2 binary64) b_2) #s(literal 2 binary64))))) c)))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (/.f64 (-.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))))) a)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (/.f64 (*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal -3 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c)) #s(literal 3 binary64))) c) (fma.f64 (pow.f64 (*.f64 (/.f64 c b_2) a) #s(literal -2 binary64)) #s(literal 4 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) (-.f64 (/.f64 #s(literal 1/2 binary64) b_2) (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 b_2 a) c))))))))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))))) a)","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (+.f64 (pow.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 8 binary64))))))) a)","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)))))) a)"]],"memory":[[-3750112,28995776]],"oracle":[64.0],"outputs":[["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))))","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) a)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))"]],"repr":["binary64"],"time":59.364990234375,"times":[[12.583984375,"a"],[12.56396484375,"b_2"],[16.172119140625,"c"],[14.058837890625,"(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"]],"type":"regimes"},{"accuracy":[8.133355797455332],"baseline":[30.155303139911183],"branch":[["b_2",8.133355797455332,3,"binary64"]],"compiler":[[1,3]],"count":[[27,3]],"inputs":[["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","#s(approx (/ (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a)","(/.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (neg.f64 b_2)) b_2) a)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (/.f64 #s(literal 1/2 binary64) (/.f64 b_2 c))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -2 binary64) (/.f64 a b_2)))","#s(approx (/ (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) a) (/.f64 #s(literal -1/2 binary64) (/.f64 b_2 c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (neg.f64 b_2) #s(approx (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64)))))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) a)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 #s(approx (+ (* (/ (/ b_2 a) c) -2) (/ 1/2 b_2)) (*.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64))) c)))","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (/.f64 (*.f64 c a) b_2) #s(literal -1/2 binary64))) a)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(/.f64 (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2) a)","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2)))","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) b_2)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2)) c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (neg.f64 (/.f64 #s(literal 1/2 binary64) b_2))) c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 c b_2) b_2) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a))))","(/.f64 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) a (*.f64 a (neg.f64 b_2))) (*.f64 a a))","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2)))"]],"memory":[[5501536,5501536]],"oracle":[63.52903885680364],"outputs":[["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))))","(/.f64 (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2) a)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))"]],"repr":["binary64"],"time":8.35693359375,"times":[[6.590087890625,"b_2"]],"type":"regimes"},{"accuracy":[12.453219264302097],"baseline":[41.22720841843829],"branch":[["b_2",12.453219264302097,3,"binary64"]],"compiler":[[1,3]],"count":[[18,3]],"inputs":[["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","#s(approx (/ (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a)","(/.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (neg.f64 b_2)) b_2) a)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (/.f64 #s(literal 1/2 binary64) (/.f64 b_2 c))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -2 binary64) (/.f64 a b_2)))","#s(approx (/ (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) a) (/.f64 #s(literal -1/2 binary64) (/.f64 b_2 c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (neg.f64 b_2) #s(approx (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64)))))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) a)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 #s(approx (+ (* (/ (/ b_2 a) c) -2) (/ 1/2 b_2)) (*.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64))) c)))","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (/.f64 (*.f64 c a) b_2) #s(literal -1/2 binary64))) a)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)"]],"memory":[[-3957744,4188240]],"oracle":[63.35740935877296],"outputs":[["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))))","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) a)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))"]],"repr":["binary64"],"time":6.6572265625,"times":[[5.239013671875,"b_2"]],"type":"regimes"},{"accuracy":[12.453228287798972],"baseline":[41.27830321212375],"branch":[["b_2",12.453228287798972,3,"binary64"]],"compiler":[[1,3]],"count":[[16,3]],"inputs":[["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","#s(approx (/ (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a)","(/.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (neg.f64 b_2)) b_2) a)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (/.f64 #s(literal 1/2 binary64) (/.f64 b_2 c))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -2 binary64) (/.f64 a b_2)))","#s(approx (/ (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) a) (/.f64 #s(literal -1/2 binary64) (/.f64 b_2 c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (neg.f64 b_2) #s(approx (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64)))))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) a)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 #s(approx (+ (* (/ (/ b_2 a) c) -2) (/ 1/2 b_2)) (*.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64))) c)))","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (/.f64 (*.f64 c a) b_2) #s(literal -1/2 binary64))) a)"]],"memory":[[3963664,3963664]],"oracle":[63.35740935877296],"outputs":[["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) a)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))"]],"repr":["binary64"],"time":5.64794921875,"times":[[4.27197265625,"b_2"]],"type":"regimes"},{"accuracy":[21.487192939939092],"baseline":[41.27830321212375],"branch":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",32.34631089253505,4,"binary64"],["b_2",21.487192939939092,2,"binary64"]],"compiler":[[13,10],[1,3]],"count":[[12,2]],"inputs":[["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","#s(approx (/ (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a)","(/.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (neg.f64 b_2)) b_2) a)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (/.f64 #s(literal 1/2 binary64) (/.f64 b_2 c))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -2 binary64) (/.f64 a b_2)))","#s(approx (/ (- (sqrt (+ (* (neg c) a) (* b_2 b_2))) b_2) a) (/.f64 #s(literal -1/2 binary64) (/.f64 b_2 c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (neg.f64 b_2) #s(approx (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64)))))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)"]],"memory":[[-3265392,5684176]],"oracle":[63.02121456582555],"outputs":[["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))"]],"repr":["binary64"],"time":8.15185546875,"times":[[3.6328125,"(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"],[3.339111328125,"b_2"]],"type":"regimes"},{"accuracy":[35.33496197377625],"baseline":[41.27830321212375],"branch":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",41.27830321212375,1,"binary64"],["a",41.27830321212375,1,"binary64"],["c",41.27830321212374,1,"binary64"],["b_2",35.33496197377625,2,"binary64"]],"compiler":[[13,10],[1,3],[1,3],[1,3]],"count":[[3,2]],"inputs":[["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))"]],"memory":[[-1286208,6998992]],"oracle":[62.05611689175995],"outputs":[["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))))"]],"repr":["binary64"],"time":7.22119140625,"times":[[1.6767578125,"(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"],[1.588134765625,"a"],[1.576904296875,"c"],[1.587890625,"b_2"]],"type":"regimes"},{"accuracy":[56.011039670216185],"baseline":[56.01103967021622],"branch":[["a",56.011039670216185,1,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",56.01103967021619,1,"binary64"],["c",56.01103967021621,1,"binary64"],["b_2",56.01103967021619,1,"binary64"]],"compiler":[[1,3],[13,10],[1,3],[1,3]],"count":[[2,1]],"inputs":[["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c)))"]],"link":["."],"memory":[[6537680,6537680]],"name":["quad2p (problem 3.2.1, positive)"],"oracle":[56.01103967021622],"outputs":[["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))))"]],"repr":["binary64"],"time":6.02685546875,"times":[[1.260009765625,"a"],[1.301025390625,"(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"],[1.328857421875,"c"],[1.373046875,"b_2"]],"type":"regimes"},{"bstep":[[20.535888671875,5.524741498861725e-54,3.257023097309415e-50],[13.576171875,-2.1056100639378164e+73,-4.612738563063418e+70]],"compiler":[[19,15],[22,15],[19,15],[22,15],[19,15],[22,15],[19,15],[22,15],[19,15],[22,15],[19,15],[22,15],[19,15],[22,15],[19,15],[22,15],[22,15],[39,27],[22,15],[39,27],[22,15],[39,27],[22,15],[39,27],[22,15],[39,27],[22,15],[39,27],[22,15],[39,27],[22,15],[39,27],[15,13],[1,3]],"memory":[[-4365760,11888320]],"method":["binary-search","binary-search"],"mixsample":[[1.394775390625,"adjust",800],[2.43212890625,"ival-div",0],[0.047119140625,"ival-mult",800],[1.72216796875,"ival-add",0],[0.22119140625,"ival-sqrt",1600],[0.287109375,"ival-mult",400],[3.47607421875,"ival-mult",0],[0.1259765625,"ival-sub",1600],[0.1181640625,"ival-assert",0],[1.28369140625,"ival-sub",0],[0.160888671875,"ival-true",0],[0.90283203125,"ival-sub",400],[1.8720703125,"ival-sqrt",0],[0.439208984375,"adjust",2000],[1.240478515625,"ival-neg",0],[0.766845703125,"ival-sqrt",400]],"outcomes":[[4.65087890625,1,"valid",34],[1.060546875,0,"invalid",14],[6.01123046875,2,"valid",30],[12.239013671875,0,"valid",192]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":38.5029296875,"type":"bsearch"},{"bstep":[[0.7958984375,5.524741498861725e-54,3.257023097309415e-50],[6.712890625,-2.1056100639378164e+73,-4.612738563063418e+70]],"compiler":[[19,15],[12,10],[19,15],[12,10],[19,15],[12,10],[19,15],[12,10],[19,15],[12,10],[19,15],[12,10],[19,15],[12,10],[19,15],[12,10],[12,10],[39,27],[12,10],[39,27],[12,10],[39,27],[12,10],[39,27],[12,10],[39,27],[15,13],[1,3]],"memory":[[3210048,3210048]],"method":["binary-search","binary-search"],"mixsample":[[0.3046875,"ival-sub",0],[0.42041015625,"ival-div",0],[0.041015625,"ival-true",0],[0.296875,"ival-add",0],[0.838623046875,"ival-mult",0],[0.423095703125,"ival-sqrt",0],[0.024169921875,"ival-assert",0],[0.32861328125,"ival-neg",0]],"outcomes":[[0.15185546875,0,"invalid",2],[4.02392578125,0,"valid",64]],"stop":[["narrow-enough",1],["predicate-same",1]],"time":9.01513671875,"type":"bsearch"},{"bstep":[[0.946044921875,5.524741498861725e-54,3.257023097309415e-50],[19.489013671875,-2.1784863142788824e-59,-4.179183050547581e-67]],"compiler":[[19,15],[17,13],[19,15],[17,13],[19,15],[17,13],[19,15],[17,13],[19,15],[17,13],[19,15],[17,13],[19,15],[17,13],[19,15],[17,13],[17,13],[39,27],[17,13],[39,27],[17,13],[39,27],[17,13],[39,27],[17,13],[39,27],[17,13],[39,27],[17,13],[39,27],[17,13],[39,27],[17,13],[39,27],[15,13],[1,3]],"memory":[[-5781872,6879232]],"method":["binary-search","binary-search"],"mixsample":[[0.842529296875,"ival-sub",0],[1.1865234375,"ival-div",0],[0.19140625,"ival-true",0],[0.797119140625,"ival-add",0],[2.239501953125,"ival-mult",0],[1.169921875,"ival-sqrt",0],[0.072265625,"ival-assert",0],[0.79833984375,"ival-neg",0]],"outcomes":[[1.721923828125,0,"invalid",23],[11.44580078125,0,"valid",144]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":24.510009765625,"type":"bsearch"},{"bstep":[[0.880126953125,5.524741498861725e-54,3.257023097309415e-50],[1.076904296875,-2.1784863142788824e-59,-4.179183050547581e-67]],"compiler":[[19,15],[17,13],[19,15],[17,13],[19,15],[17,13],[19,15],[17,13],[19,15],[17,13],[19,15],[17,13],[19,15],[17,13],[19,15],[17,13],[17,13],[19,15],[17,13],[19,15],[17,13],[19,15],[17,13],[19,15],[17,13],[19,15],[17,13],[19,15],[17,13],[19,15],[17,13],[19,15],[17,13],[19,15],[15,13],[1,3]],"memory":[[1268064,1268064]],"method":["binary-search","binary-search"],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":2.612060546875,"type":"bsearch"},{"bstep":[[23.64794921875,2.9809089222722594e-292,6.809825362711405e-275]],"compiler":[[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[15,13],[1,3]],"memory":[[11632,8165568]],"method":["binary-search"],"mixsample":[[1.283935546875,"ival-sub",0],[1.526123046875,"ival-div",0],[0.1455078125,"ival-true",0],[1.123779296875,"ival-add",0],[2.91455078125,"ival-mult",0],[1.616943359375,"ival-sqrt",0],[0.09912109375,"ival-assert",0],[1.0341796875,"ival-neg",0]],"outcomes":[[4.798095703125,0,"invalid",68],[11.45263671875,0,"valid",160]],"stop":[["narrow-enough",1]],"time":26.995849609375,"type":"bsearch"},{"bstep":[[24.5048828125,7.0323253714239e-26,6.710593833923787e-21]],"compiler":[[34,24],[19,15],[34,24],[19,15],[34,24],[19,15],[34,24],[19,15],[34,24],[19,15],[34,24],[19,15],[34,24],[19,15],[34,24],[19,15],[34,24],[19,15],[15,13],[1,3]],"memory":[[-153104,7861856]],"method":["binary-search"],"mixsample":[[1.963134765625,"adjust",800],[1.87109375,"ival-div",0],[0.1748046875,"ival-sub",1600],[0.06396484375,"ival-assert",0],[0.009765625,"ival-sub",3600],[0.848876953125,"ival-sub",0],[1.2001953125,"ival-sqrt",0],[0.362060546875,"ival-sub",400],[0.5361328125,"adjust",2000],[1.5126953125,"ival-add",0],[0.046142578125,"ival-mult",800],[0.301513671875,"ival-sqrt",1600],[2.22021484375,"ival-mult",0],[0.223388671875,"ival-mult",400],[0.0400390625,"adjust",2800],[0.122314453125,"ival-true",0],[0.02294921875,"ival-sqrt",3600],[0.595703125,"ival-sqrt",400],[0.81591796875,"ival-neg",0]],"outcomes":[[4.143310546875,1,"valid",27],[1.704345703125,0,"invalid",24],[6.231689453125,2,"valid",34],[0.64794921875,3,"valid",3],[5.7177734375,0,"valid",80]],"stop":[["narrow-enough",1]],"time":27.80908203125,"type":"bsearch"},{"egraph":[[6,4734,422,0.041023693],[5,2124,422,0.03013164],[4,840,432,0.011523742],[3,415,432,0.004261015],[2,186,432,0.002578229],[1,109,432,0.001739271],[0,73,445,0.001218973]],"inputs":[["(if (<=.f64 b_2 #s(literal -219999999999999994501978431813987710737983990017906259551658523634958336 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))) (if (<=.f64 b_2 #s(literal 1639164757362759/215679573337205118357336120696157045389097155380324579848828881993728 binary64)) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) a) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))))","(if (<=.f64 b_2 #s(literal -3999999999999999775207243795178284096228896516082202126176495568225828864 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))) (if (<=.f64 b_2 #s(literal 1639164757362759/215679573337205118357336120696157045389097155380324579848828881993728 binary64)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2) a) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))))","(if (<=.f64 b_2 #s(literal -1519771171239775/7237005577332262213973186563042994240829374041602535252466099000494570602496 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))) (if (<=.f64 b_2 #s(literal 1639164757362759/215679573337205118357336120696157045389097155380324579848828881993728 binary64)) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) a) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))))","(if (<=.f64 b_2 #s(literal -1519771171239775/7237005577332262213973186563042994240829374041602535252466099000494570602496 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (if (<=.f64 b_2 #s(literal 1639164757362759/215679573337205118357336120696157045389097155380324579848828881993728 binary64)) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) a) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))))","(if (<=.f64 b_2 #s(literal 6741349255733685/22471164185778948846616314884862809170224712236778832159178760144716584475687620391588559665300942002640014234983924169707348721101802077811605928829934265547220986678108185659537777450155761764931635369010625721104768835292807860184239138817603404645418813835573287279993405742309964538104419541203028017152 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))))","(if (<=.f64 b_2 #s(literal 1113228446469867/166153499473114484112975882535043072 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))))"]],"memory":[[-3129408,13986304]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 b_2 #s(literal -219999999999999994501978431813987710737983990017906259551658523634958336 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))) (if (<=.f64 b_2 #s(literal 1639164757362759/215679573337205118357336120696157045389097155380324579848828881993728 binary64)) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) a) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))))","(if (<=.f64 b_2 #s(literal -3999999999999999775207243795178284096228896516082202126176495568225828864 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))) (if (<=.f64 b_2 #s(literal 1639164757362759/215679573337205118357336120696157045389097155380324579848828881993728 binary64)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2) a) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))))","(if (<=.f64 b_2 #s(literal -1519771171239775/7237005577332262213973186563042994240829374041602535252466099000494570602496 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))) (if (<=.f64 b_2 #s(literal 1639164757362759/215679573337205118357336120696157045389097155380324579848828881993728 binary64)) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) a) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))))","(if (<=.f64 b_2 #s(literal -1519771171239775/7237005577332262213973186563042994240829374041602535252466099000494570602496 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (if (<=.f64 b_2 #s(literal 1639164757362759/215679573337205118357336120696157045389097155380324579848828881993728 binary64)) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) a) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))))","(if (<=.f64 b_2 #s(literal 6741349255733685/22471164185778948846616314884862809170224712236778832159178760144716584475687620391588559665300942002640014234983924169707348721101802077811605928829934265547220986678108185659537777450155761764931635369010625721104768835292807860184239138817603404645418813835573287279993405742309964538104419541203028017152 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))))","(if (<=.f64 b_2 #s(literal 1113228446469867/166153499473114484112975882535043072 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))))"]],"stop":[["node limit",1]],"time":119.90087890625,"type":"simplify"},{"compiler":[[445,74],[0,3],[13,11],[0,3],[13,11],[5,6],[5,6],[5,6],[5,6],[35,15],[10,9],[5,6],[5,6],[35,15],[10,9],[0,3],[13,11],[5,6],[0,3],[13,11],[5,6],[45,17],[15,11],[0,3],[13,11]],"egraph":[[0,8048,2611,0.099239723],[2,5550,2747,0.033356348],[1,1606,2798,0.02425202],[0,508,2832,0.005303844],[0,8644,34,0.048197962],[3,5920,38,0.043463419],[2,463,38,0.020173985],[1,64,39,0.00214563],[0,17,41,0.000730814],[0,10,41,0.000127036],[0,9504,271,0.091662082],[2,2188,277,0.034720874],[1,267,277,0.007401764],[0,68,279,0.001996657],[0,45,294,0.000398028],[0,8360,5744,0.091431528],[1,3590,6040,0.02833366],[0,1050,7265,0.011950875],[0,8353,254,0.072013355],[2,2512,254,0.033305466],[1,323,254,0.008144345],[0,83,334,0.002174249],[0,51,334,0.00047118]],"memory":[[1536016,9704496]],"stop":[["fuel",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1],["iter limit",1]],"time":1727.4150390625,"type":"soundness"},{"compiler":[[445,74],[445,74],[89,26],[89,26],[13,10],[13,10]],"memory":[[-250752,40254944]],"remove-preprocessing":[[],[],[],[],[],[],[],[]],"time":73.68408203125,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.011962890625,"type":"end"}]