[{"memory":[[15408,15408]],"time":0.031005859375,"type":"start"},{"compiler":[[15,10]],"memory":[[975168,50858224]],"method":["search"],"sampling":[[12,{"invalid":0.10146334208548069,"precondition":0.0009763240814208984,"unknown":0.41365824081003666,"valid":0.48390209302306175}],[11,{"invalid":0.10146334208548069,"precondition":0.0009763240814208984,"unknown":0.41365824081003666,"valid":0.48390209302306175}],[10,{"invalid":0.07804872468113899,"precondition":0.0009763240814208984,"unknown":0.45268260315060616,"valid":0.46829234808683395}],[9,{"invalid":0.07804872468113899,"precondition":0.0009763240814208984,"unknown":0.45268260315060616,"valid":0.46829234808683395}],[8,{"invalid":0.031219489872455597,"precondition":0.0009763240814208984,"unknown":0.5307313278317451,"valid":0.43707285821437836}],[7,{"invalid":0.031219489872455597,"precondition":0.0009763240814208984,"unknown":0.5307313278317451,"valid":0.43707285821437836}],[6,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.6243897974491119,"valid":0.37463387846946716}],[5,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.6243897974491119,"valid":0.37463387846946716}],[4,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.7492677569389343,"valid":0.24975591897964478}],[3,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.7492677569389343,"valid":0.24975591897964478}],[2,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.9990236759185791,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.9990236759185791,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.9990236759185791,"valid":0.0}]],"time":259.41796875,"type":"analyze"},{"bogosity":[{"exit":0.4591354068347514,"infinite":0.0931440554693678,"invalid":0.10146334208548069,"precondition":0.0009763240814208984,"valid":0.3452808715289791}],"memory":[[42928240,1290841728]],"mixsample":[[425.233642578125,"adjust",800],[273.98291015625,"ival-pow",2800],[157.70458984375,"adjust",4000],[0.082763671875,"ival-sub",400],[0.006103515625,"ival-add",8800],[0.0009765625,"exact",7200],[22.310791015625,"ival-add",400],[14.095458984375,"ival-div",4000],[0.037109375,"ival-add",2400],[0.0,"exact",4800],[17.640869140625,"ival-div",2400],[12.1201171875,"ival-add",1200],[13.493408203125,"ival-div",8400],[1.834228515625,"ival-pow",6400],[6.193603515625,"ival-pow",5200],[1.278076171875,"ival-pow",3600],[1014.66357421875,"ival-pow",2000],[2.2333984375,"ival-div",3200],[9.49658203125,"ival-div",2800],[34.8662109375,"ival-div",1200],[3.22216796875,"ival-add",1600],[9.0029296875,"ival-div",8800],[533.1767578125,"ival-pow",4800],[0.0107421875,"ival-add",2800],[0.0009765625,"ival-assert",400],[5.1611328125,"ival-pow",8800],[17.146240234375,"ival-true",0],[5.02783203125,"ival-div",3600],[0.012939453125,"ival-add",7200],[0.243896484375,"ival-div",5200],[2201.38623046875,"ival-pow",4000],[0.0029296875,"ival-true",400],[0.010986328125,"ival-add",4400],[176.593505859375,"ival-div",0],[24.90576171875,"ival-div",400],[180.87646484375,"adjust",4800],[1277.81201171875,"ival-pow",1600],[24.795654296875,"ival-div",1600],[9.27099609375,"ival-assert",0],[0.0009765625,"ival-true",2000],[261.9853515625,"ival-sub",0],[1.9453125,"ival-div",7200],[664.51025390625,"ival-pow",800],[12.406982421875,"ival-div",4800],[1272.6171875,"ival-pow",0],[3.106201171875,"ival-div",9200],[157.480224609375,"ival-add",0],[0.0615234375,"ival-sub",800],[501.196533203125,"ival-pow",4400],[5.4755859375,"ival-div",7600],[2.34326171875,"ival-pow",3200],[152.346923828125,"adjust",2800],[22.01318359375,"ival-div",2000],[0.0009765625,"exact",3200],[1505.36083984375,"ival-pow",400],[0.010986328125,"ival-add",6000],[279.939208984375,"ival-pow",2400],[0.0009765625,"ival-assert",800],[0.010009765625,"ival-div",9600],[0.011962890625,"ival-div",6400],[0.052001953125,"exact",2800],[0.006103515625,"ival-add",5600],[0.0087890625,"ival-sub",2000],[16.8330078125,"ival-div",4400],[11.13427734375,"ival-div",8000],[0.002197265625,"ival-true",800],[4.615966796875,"ival-pow",7200],[0.0,"ival-assert",2000],[0.02001953125,"ival-div",6800],[4.812255859375,"ival-pow",6000],[0.01806640625,"ival-div",5600],[259.66455078125,"adjust",2000],[216.290283203125,"ival-pow",1200],[0.0009765625,"exact",4400],[0.210205078125,"ival-add",2000],[46.009521484375,"ival-div",800],[25.910888671875,"ival-add",800],[14.5087890625,"exact",0]],"outcomes":[[1078.020263671875,1,"valid",2875],[203.026123046875,0,"exit",1545],[7.392333984375,3,"exit",4],[495.078125,1,"exit",2361],[15.531494140625,4,"exit",6],[1676.9013671875,2,"valid",2774],[9245.4423828125,5,"exit",4728],[327.025146484375,0,"valid",2607],[5.7841796875,2,"exit",2]],"time":14349.403076171875,"type":"sample"},{"compiler":[[13,8],[36,10],[36,10]],"confusion":[[118,0,60,78]],"explanations":[["pow.f64","(pow.f64 x (/.f64 #s(literal 1 binary64) n))","sensitivity",1,0,[],[[2]]],["pow.f64","(pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n))","sensitivity",81,0,[],[[1]]],["-.f64","(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","cancellation",98,0,[],[[]]]],"fperrors":[["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))",96,2,[2.3146922010776453e+52,1.520247900359996e+270],0,false],["(pow.f64 x (/.f64 #s(literal 1 binary64) n))",1,0,false,0,false],["(pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n))",42,39,[3.5814433375775376e-239,4.1931482598130474e-24],0,false],["(+.f64 x #s(literal 1 binary64))",0,0,false,0,false],["n",0,0,false,0,false],["(/.f64 #s(literal 1 binary64) n)",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[3,1],[1,177],[0,78]],"maybe-confusion":[[118,0,0,60,0,78]],"memory":[[-4223184,63487552]],"mixsample":[[0.2841796875,"ival-add",1200],[5.003662109375,"ival-div",0],[11.0625,"adjust",800],[0.787353515625,"ival-div",400],[38.2001953125,"ival-pow",1600],[0.69677734375,"ival-div",1600],[0.240478515625,"ival-assert",0],[5.66845703125,"ival-sub",0],[32.433837890625,"ival-pow",0],[3.805908203125,"adjust",2000],[1.243896484375,"ival-div",1200],[3.5595703125,"ival-add",0],[0.105712890625,"ival-add",1600],[0.994384765625,"ival-div",800],[0.6181640625,"ival-add",400],[0.5234375,"ival-true",0],[0.239013671875,"ival-div",2000],[44.84326171875,"ival-pow",400],[0.375244140625,"exact",0],[0.8447265625,"ival-add",800],[0.13671875,"ival-div",2400]],"outcomes":[[87.454833984375,1,"valid",254],[79.82275390625,2,"valid",146],[10.937744140625,0,"valid",112]],"time":258.52783203125,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[13,8]],"egraph":[[0,185,13,0.000609984],[10,185,13,0.000783884],[9,177,13,0.000919092],[8,161,13,0.000849919],[7,112,13,0.000877228],[6,83,13,0.000739049],[5,51,13,0.00042426],[4,36,13,0.000241585],[3,28,13,0.000193748],[2,22,13,0.000151156],[1,18,13,0.00013618],[0,13,13,0.000164967],[0,8,13,0.000117856],[10,564,67,0.002437857],[9,556,67,0.003039926],[8,540,67,0.002512097],[7,493,67,0.002509795],[6,449,67,0.003160585],[5,370,67,0.002527399],[4,251,67,0.001994049],[3,160,67,0.001153869],[2,93,67,0.000630237],[1,43,69,0.000337977],[0,22,75,0.000196833]],"inputs":[["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"]],"memory":[[-1553616,6182224]],"method":["egg-herbie"],"outputs":[["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1],["saturated",1]],"symmetry":[[]],"time":45.93701171875,"type":"preprocess"},{"compiler":[[0,2]],"memory":[[45904,45904]],"time":0.068115234375,"type":"eval"},{"alts":[["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","next",27.43107292745678,"binary64"]],"compiler":[[13,8]],"memory":[[318160,318160]],"time":0.56103515625,"type":"prune"},{"egraph":[[0,185,34,0.000699613],[10,185,34,0.00080134],[9,177,34,0.000902965],[8,161,34,0.000886467],[7,112,34,0.000793572],[6,83,34,0.000730783],[5,51,34,0.000497164],[4,36,34,0.000242419],[3,28,34,0.00019368],[2,22,34,0.000153095],[1,18,34,0.000139777],[0,13,34,0.000184577],[0,8,34,0.000118904]],"inputs":[["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n))","(+.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(/.f64 #s(literal 1 binary64) n)","n","(pow.f64 x (/.f64 #s(literal 1 binary64) n))"]],"locations":[["(/.f64 #s(literal 1 binary64) n)","cost-diff",0],["(+.f64 x #s(literal 1 binary64))","cost-diff",0],["(pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n))","cost-diff",0],["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","cost-diff",0]],"memory":[[907008,907008]],"method":["egg-herbie"],"outputs":[["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n))","(pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) n))","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) x)","x","#s(literal 1 binary64)","(/.f64 #s(literal 1 binary64) n)","n","(pow.f64 x (/.f64 #s(literal 1 binary64) n))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":12.659912109375,"type":"simplify"},{"compiler":[[36,10]],"locations":[["(+.f64 x #s(literal 1 binary64))","accuracy",0.0],["(pow.f64 x (/.f64 #s(literal 1 binary64) n))","accuracy",0.04121385463040329],["(pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n))","accuracy",9.807494842535574],["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","accuracy",22.10294792745677]],"memory":[[5698096,13739824]],"mixsample":[[0.14697265625,"ival-add",1200],[2.31103515625,"ival-div",0],[5.883544921875,"adjust",800],[0.399658203125,"ival-div",400],[19.07373046875,"ival-pow",1600],[0.313720703125,"ival-div",1600],[0.114013671875,"ival-assert",0],[3.3388671875,"ival-sub",0],[15.559326171875,"ival-pow",0],[1.8076171875,"adjust",2000],[0.5263671875,"ival-div",1200],[1.755859375,"ival-add",0],[0.052001953125,"ival-add",1600],[0.4501953125,"ival-div",800],[0.304931640625,"ival-add",400],[0.19580078125,"ival-true",0],[0.165283203125,"ival-div",2000],[24.75830078125,"ival-pow",400],[0.1591796875,"exact",0],[0.560546875,"ival-add",800],[0.061279296875,"ival-div",2400]],"outcomes":[[45.6728515625,1,"valid",127],[40.71875,2,"valid",73],[5.249267578125,0,"valid",56]],"time":100.43994140625,"type":"localize"},{"count":[[5,49]],"inputs":[["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n))","(+.f64 x #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) n)","(pow.f64 x (/.f64 #s(literal 1 binary64) n))"]],"memory":[[-535792,24296336]],"outputs":[["(- 1 (exp (/ (log x) n)))","(- (+ 1 (/ x n)) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","1","(+ 1 (/ x n))","(+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(+ 1 x)","(exp (/ (log x) n))","(/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x))","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2)))) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) (pow x 3)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2))))) x)","(exp (* -1 (/ (log (/ 1 x)) n)))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2))))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 3)))))","x","(* x (+ 1 (/ 1 x)))","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x)))","(- (exp (/ (log (+ 1 x)) n)) (exp (/ (log x) n)))","(exp (/ (log (+ 1 x)) n))","(/ 1 n)","(/ (- (log (+ 1 x)) (log x)) n)","(/ (- (+ (log (+ 1 x)) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))) (+ (log x) (* 1/2 (/ (pow (log x) 2) n)))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n)))) (+ (log x) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n))))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/24 (/ (pow (log (+ 1 x)) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))))) (+ (log x) (+ (* 1/24 (/ (pow (log x) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n)))))) n)","(+ 1 (/ (log (+ 1 x)) n))","(+ 1 (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n)))","(+ 1 (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 3))) (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n))))","(+ 1 (/ (log x) n))","(+ 1 (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (/ (log x) n)))","(+ 1 (+ (* 1/6 (/ (pow (log x) 3) (pow n 3))) (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (/ (log x) n))))","(* -1 (/ (- (* -1 (log (+ 1 x))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (* 1/2 (pow (log (+ 1 x)) 2)) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (* -1/6 (pow (log (+ 1 x)) 3)) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/24 (pow (log (+ 1 x)) 4)) (* 1/24 (pow (log x) 4))) n)) (* -1/6 (pow (log (+ 1 x)) 3))) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1/2 (/ (pow (log (+ 1 x)) 2) n))) n)))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1 (/ (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) n)) (* 1/2 (pow (log (+ 1 x)) 2))) n))) n)))","(+ 1 (* -1 (/ (+ (* -1 (log x)) (* -1/2 (/ (pow (log x) 2) n))) n)))","(+ 1 (* -1 (/ (+ (* -1 (log x)) (* -1 (/ (+ (* 1/6 (/ (pow (log x) 3) n)) (* 1/2 (pow (log x) 2))) n))) n)))"]],"series":[[1.597900390625,"((- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (+ x 1) (/ 1 n) (pow x (/ 1 n)))","n","-inf"],[1.48583984375,"((- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (+ x 1) (/ 1 n) (pow x (/ 1 n)))","n","inf"],[0.423095703125,"((- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (+ x 1) (/ 1 n) (pow x (/ 1 n)))","n","0"],[23.2177734375,"((- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (+ x 1) (/ 1 n) (pow x (/ 1 n)))","x","-inf"],[8.76220703125,"((- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (+ x 1) (/ 1 n) (pow x (/ 1 n)))","x","inf"],[31.98486328125,"((- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (+ x 1) (/ 1 n) (pow x (/ 1 n)))","x","0"]],"time":68.74609375,"type":"series"},{"count":[[49,48]],"egraph":[[0,8915,1165,0.104782176],[3,7630,1269,0.026389731],[2,2161,1275,0.027332619],[1,761,1349,0.006782516],[0,263,1455,0.002275442]],"inputs":[["(- 1 (exp (/ (log x) n)))","(- (+ 1 (/ x n)) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","1","(+ 1 (/ x n))","(+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(+ 1 x)","(exp (/ (log x) n))","(/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x))","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2)))) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) (pow x 3)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2))))) x)","(exp (* -1 (/ (log (/ 1 x)) n)))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2))))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 3)))))","x","(* x (+ 1 (/ 1 x)))","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x)))","(- (exp (/ (log (+ 1 x)) n)) (exp (/ (log x) n)))","(exp (/ (log (+ 1 x)) n))","(/ 1 n)","(/ (- (log (+ 1 x)) (log x)) n)","(/ (- (+ (log (+ 1 x)) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))) (+ (log x) (* 1/2 (/ (pow (log x) 2) n)))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n)))) (+ (log x) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n))))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/24 (/ (pow (log (+ 1 x)) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))))) (+ (log x) (+ (* 1/24 (/ (pow (log x) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n)))))) n)","(+ 1 (/ (log (+ 1 x)) n))","(+ 1 (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n)))","(+ 1 (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 3))) (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n))))","(+ 1 (/ (log x) n))","(+ 1 (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (/ (log x) n)))","(+ 1 (+ (* 1/6 (/ (pow (log x) 3) (pow n 3))) (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (/ (log x) n))))","(* -1 (/ (- (* -1 (log (+ 1 x))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (* 1/2 (pow (log (+ 1 x)) 2)) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (* -1/6 (pow (log (+ 1 x)) 3)) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/24 (pow (log (+ 1 x)) 4)) (* 1/24 (pow (log x) 4))) n)) (* -1/6 (pow (log (+ 1 x)) 3))) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1/2 (/ (pow (log (+ 1 x)) 2) n))) n)))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1 (/ (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) n)) (* 1/2 (pow (log (+ 1 x)) 2))) n))) n)))","(+ 1 (* -1 (/ (+ (* -1 (log x)) (* -1/2 (/ (pow (log x) 2) n))) n)))","(+ 1 (* -1 (/ (+ (* -1 (log x)) (* -1 (/ (+ (* 1/6 (/ (pow (log x) 3) n)) (* 1/2 (pow (log x) 2))) n))) n)))"]],"memory":[[-15410624,53157104]],"method":["egg-herbie"],"outputs":[["(- 1 (exp (/ (log x) n)))","(-.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(- (+ 1 (/ x n)) (exp (/ (log x) n)))","(-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n)))","(- (+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(fma.f64 (*.f64 x x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n))))","(- (+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(fma.f64 (*.f64 x x) (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n))))","1","#s(literal 1 binary64)","(+ 1 (/ x n))","(+.f64 (/.f64 x n) #s(literal 1 binary64))","(+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))","(+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(exp (/ (log x) n))","(pow.f64 x (/.f64 #s(literal 1 binary64) n))","(/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x))","(/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x)) x)","(/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2)))) x)","(/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (+.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) (pow x 3)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2))))) x)","(/.f64 (fma.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) (+.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 11/24 binary64) (*.f64 n n)) (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 4 binary64)))) (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 #s(literal 1/4 binary64) n))) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) (*.f64 x x))) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x)","(exp (* -1 (/ (log (/ 1 x)) n)))","(pow.f64 x (/.f64 #s(literal 1 binary64) n))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)))","(+.f64 (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2))))","(fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (*.f64 x x)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 3)))))","(fma.f64 (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) x) (+.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) (+.f64 (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n) (pow.f64 x (/.f64 #s(literal 1 binary64) n))))","x","(* x (+ 1 (/ 1 x)))","(+.f64 #s(literal 1 binary64) x)","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x))","(/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (*.f64 n x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x))","(/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x) (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) x)","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(/.f64 (+.f64 (/.f64 (*.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))))) x))) x) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) x)","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(/.f64 (+.f64 (/.f64 (-.f64 (*.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) (/.f64 (*.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))))) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 11/24 binary64) (*.f64 n n)) (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 4 binary64)))) (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 #s(literal 1/4 binary64) n))) x))) x)) x) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) x)","(exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n))","(exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x)))","(+.f64 (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (*.f64 n x)) (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x)))","(+.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x) (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) x) (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x)))","(+.f64 (/.f64 (+.f64 (/.f64 (*.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))))) x))) x) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) x) (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)))","(- (exp (/ (log (+ 1 x)) n)) (exp (/ (log x) n)))","(-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(exp (/ (log (+ 1 x)) n))","(exp.f64 (/.f64 (log1p.f64 x) n))","(/ 1 n)","(/.f64 #s(literal 1 binary64) n)","(/ (- (log (+ 1 x)) (log x)) n)","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(/ (- (+ (log (+ 1 x)) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))) (+ (log x) (* 1/2 (/ (pow (log x) 2) n)))) n)","(/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n)))) (+ (log x) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n))))) n)","(-.f64 (/.f64 (+.f64 (fma.f64 (/.f64 #s(literal 1/6 binary64) n) (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) n) (log1p.f64 x)) (fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal 1/2 binary64) n) (neg.f64 (log.f64 x)))) n) (*.f64 (pow.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64)) #s(literal 1/6 binary64)))","(/ (- (+ (log (+ 1 x)) (+ (* 1/24 (/ (pow (log (+ 1 x)) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))))) (+ (log x) (+ (* 1/24 (/ (pow (log x) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n)))))) n)","(-.f64 (/.f64 (-.f64 (fma.f64 (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 3 binary64))) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (fma.f64 (/.f64 #s(literal 1/6 binary64) n) (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) n) (fma.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (log1p.f64 x)))) (fma.f64 (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 3 binary64))) (pow.f64 (log.f64 x) #s(literal 4 binary64)) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (log.f64 x)))) n) (*.f64 (pow.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64)) #s(literal 1/6 binary64)))","(+ 1 (/ (log (+ 1 x)) n))","(+.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64))","(+ 1 (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n)))","(fma.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) n) #s(literal 1/2 binary64) (+.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64)))","(+ 1 (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 3))) (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n))))","(fma.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64)) #s(literal 1/6 binary64) (fma.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) n) #s(literal 1/2 binary64) (+.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64))))","(+ 1 (/ (log x) n))","(+.f64 (/.f64 (log.f64 x) n) #s(literal 1 binary64))","(+ 1 (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (/ (log x) n)))","(+.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (log.f64 x)) n) #s(literal 1 binary64))","(+ 1 (+ (* 1/6 (/ (pow (log x) 3) (pow n 3))) (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (/ (log x) n))))","(fma.f64 (pow.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64)) #s(literal 1/6 binary64) (+.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (log.f64 x)) n) #s(literal 1 binary64)))","(* -1 (/ (- (* -1 (log (+ 1 x))) (* -1 (log x))) n))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (* 1/2 (pow (log (+ 1 x)) 2)) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1/2 binary64) n) (-.f64 (log.f64 x) (log1p.f64 x))) (neg.f64 n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (* -1/6 (pow (log (+ 1 x)) 3)) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(/.f64 (-.f64 (-.f64 (log.f64 x) (log1p.f64 x)) (/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n))) n)) (neg.f64 n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/24 (pow (log (+ 1 x)) 4)) (* 1/24 (pow (log x) 4))) n)) (* -1/6 (pow (log (+ 1 x)) 3))) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(/.f64 (-.f64 (-.f64 (log.f64 x) (log1p.f64 x)) (/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64) (/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1/6 binary64) (*.f64 #s(literal -1/24 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) n))) (neg.f64 n))) n)) (neg.f64 n))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1/2 (/ (pow (log (+ 1 x)) 2) n))) n)))","(-.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) (neg.f64 (log1p.f64 x))) n))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1 (/ (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) n)) (* 1/2 (pow (log (+ 1 x)) 2))) n))) n)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 (fma.f64 #s(literal -1/2 binary64) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) n) #s(literal -1/6 binary64))) n) (log1p.f64 x)) n))","(+ 1 (* -1 (/ (+ (* -1 (log x)) (* -1/2 (/ (pow (log x) 2) n))) n)))","(+.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (log.f64 x)) n) #s(literal 1 binary64))","(+ 1 (* -1 (/ (+ (* -1 (log x)) (* -1 (/ (+ (* 1/6 (/ (pow (log x) 3) n)) (* 1/2 (pow (log x) 2))) n))) n)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) #s(literal -1/6 binary64) (*.f64 #s(literal -1/2 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) n) (log.f64 x)) n))"]],"stop":[["iter limit",1],["node limit",1]],"time":323.965087890625,"type":"simplify"},{"count":[[5,321]],"egraph":[[0,8424,27,0.077310994],[3,4335,31,0.039568137],[2,407,31,0.014078249],[1,63,31,0.001728752],[0,13,31,0.000718686],[0,8,31,0.000113085]],"inputs":[["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n))","(+.f64 x #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) n)","(pow.f64 x (/.f64 #s(literal 1 binary64) n))"]],"memory":[[5106592,49903216]],"outputs":[["(*.f64 (/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (pow.f64 x (/.f64 #s(literal 3 binary64) n))) (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 4 binary64))) (pow.f64 (+.f64 (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) #s(literal 2 binary64)))) (-.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (pow.f64 x (/.f64 #s(literal 3 binary64) n))) (+.f64 (pow.f64 (+.f64 (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) #s(literal 3 binary64)) (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 6 binary64))))) (fma.f64 (+.f64 (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) (-.f64 (+.f64 (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 4 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (pow.f64 x (/.f64 #s(literal 2 binary64) n)))) (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (pow.f64 x (/.f64 #s(literal 3 binary64) n)))) (-.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))))","(*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1/2 binary64) n)) (pow.f64 x (/.f64 #s(literal 1/2 binary64) n))) (+.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1/2 binary64) n))))","(*.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1/2 binary64) n))) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1/2 binary64) n)) (pow.f64 x (/.f64 #s(literal 1/2 binary64) n))))","(*.f64 (pow.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))) #s(literal -1 binary64)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (pow.f64 x (/.f64 #s(literal 2 binary64) n))))","(*.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (pow.f64 x (/.f64 #s(literal 3 binary64) n))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (pow.f64 x (/.f64 #s(literal 2 binary64) n)))) (pow.f64 (neg.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (pow.f64 x (/.f64 #s(literal 3 binary64) n)))) (pow.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))) (/.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))))","(*.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))) (*.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (pow.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) (pow.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))) #s(literal -1 binary64)))","(*.f64 (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))) (/.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))))))","(*.f64 (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))) (*.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (pow.f64 (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (pow.f64 x (/.f64 #s(literal 3 binary64) n))) (pow.f64 (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(pow.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 4 binary64))) (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 8 binary64))) (pow.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))) #s(literal -1 binary64))) (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))))","(/.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 6 binary64))) (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 12 binary64))) (pow.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))) #s(literal -1 binary64))) (+.f64 (+.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 4 binary64))) (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 8 binary64))) (pow.f64 (fma.f64 x x x) (/.f64 #s(literal 2 binary64) n))))","(/.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 6 binary64))) (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 12 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64))) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (pow.f64 x (/.f64 #s(literal 3 binary64) n))))","(/.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 9 binary64))) (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 18 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64))) (+.f64 (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 6 binary64))) (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 12 binary64))) (pow.f64 (fma.f64 x x x) (/.f64 #s(literal 3 binary64) n))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))) #s(literal 2 binary64))) (+.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))) (/.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))))) #s(literal 2 binary64))) (+.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))))) (/.f64 (pow.f64 x (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))))))","(/.f64 (-.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (-.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (exp.f64 (/.f64 (log1p.f64 x) n))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))) (/.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))))) (/.f64 (pow.f64 x (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (pow.f64 x (/.f64 #s(literal 2 binary64) n))))) (neg.f64 (neg.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (pow.f64 x (/.f64 #s(literal 3 binary64) n))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (pow.f64 x (/.f64 #s(literal 3 binary64) n))) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) #s(literal 1 binary64)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))))","(/.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 4 binary64))) (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 8 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))))","(/.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 6 binary64))) (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 12 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 4 binary64))) (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 8 binary64))) (pow.f64 (fma.f64 x x x) (/.f64 #s(literal 2 binary64) n))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))))","(/.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 6 binary64))) (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 12 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (pow.f64 x (/.f64 #s(literal 3 binary64) n))) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))))))","(/.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 9 binary64))) (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 18 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 6 binary64))) (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 12 binary64))) (pow.f64 (fma.f64 x x x) (/.f64 #s(literal 3 binary64) n))) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))) (*.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))) (pow.f64 x (/.f64 #s(literal 2 binary64) n)))) (pow.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))))) (*.f64 (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))) (pow.f64 x (/.f64 #s(literal 3 binary64) n)))) (pow.f64 (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))) #s(literal 2 binary64)))","(/.f64 (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 4 binary64))) (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 8 binary64))) (*.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))) (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)))))","(/.f64 (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 9 binary64))) (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 18 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))) (+.f64 (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 6 binary64))) (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 12 binary64))) (pow.f64 (fma.f64 x x x) (/.f64 #s(literal 3 binary64) n)))))","(/.f64 (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 6 binary64))) (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 12 binary64))) (*.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))) (+.f64 (+.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 4 binary64))) (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 8 binary64))) (pow.f64 (fma.f64 x x x) (/.f64 #s(literal 2 binary64) n)))))","(/.f64 (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 6 binary64))) (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 12 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (pow.f64 x (/.f64 #s(literal 3 binary64) n)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (pow.f64 x (/.f64 #s(literal 2 binary64) n)))) (neg.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (pow.f64 x (/.f64 #s(literal 3 binary64) n)))) (neg.f64 (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (pow.f64 x (/.f64 #s(literal 3 binary64) n))) (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (neg.f64 (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))))))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (pow.f64 x (/.f64 #s(literal 3 binary64) n))) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64)))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (pow.f64 x (/.f64 #s(literal 2 binary64) n)))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (pow.f64 x (/.f64 #s(literal 3 binary64) n)))) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) (neg.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (pow.f64 x (/.f64 #s(literal 3 binary64) n))) (neg.f64 (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))))))","(fma.f64 (pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (log.f64 (fma.f64 x x #s(literal -1 binary64)))) (pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (neg.f64 (log.f64 (-.f64 x #s(literal 1 binary64))))) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (neg.f64 (log1p.f64 (*.f64 x (-.f64 x #s(literal 1 binary64)))))) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(fma.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (pow.f64 x (/.f64 #s(literal 3 binary64) n)))) (-.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))) (neg.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))))))","(fma.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (pow.f64 x (/.f64 #s(literal 2 binary64) n)))) (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (neg.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))))))","(fma.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 4 binary64))) (pow.f64 (+.f64 (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) #s(literal 2 binary64)))) (-.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))) (neg.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))))))","(fma.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (+.f64 (pow.f64 (+.f64 (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) #s(literal 3 binary64)) (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 6 binary64))))) (fma.f64 (+.f64 (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) (-.f64 (+.f64 (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 4 binary64)))) (neg.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))))))","(fma.f64 (*.f64 (neg.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n))) (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 1/2 binary64))) (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 1/2 binary64)) (exp.f64 (/.f64 (log1p.f64 x) n)))","(fma.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 3/4 binary64))) (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1/4 binary64)) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 n #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) n)) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64))) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal -1 binary64) n)) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(fma.f64 (neg.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n))) (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (exp.f64 (/.f64 (log1p.f64 x) n)))","(fma.f64 (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 1/2 binary64)) (*.f64 (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 1/2 binary64)) (neg.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)))) (exp.f64 (/.f64 (log1p.f64 x) n)))","(fma.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 3/2 binary64))) (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1/2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))) (neg.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))))))","(fma.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 3/2 binary64))) (/.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 3/2 binary64))) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))))) (neg.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))))))","(fma.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1/4 binary64)) (pow.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (*.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64))) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(fma.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (neg.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n))) (exp.f64 (/.f64 (log1p.f64 x) n)))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 3/2 binary64))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))) (neg.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))))))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1/2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1/2 binary64) n)) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (/.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))))) (neg.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))))))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))))))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (pow.f64 (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))))))","(fma.f64 #s(literal -1 binary64) (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))","(fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64) (exp.f64 (/.f64 (log1p.f64 x) n)))","(fma.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (/.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))) (neg.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))))))","(fma.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))))) (neg.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))))))","(-.f64 (+.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 0 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))) (/.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))))","(-.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))))) (/.f64 (pow.f64 x (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))))))","(-.f64 #s(literal 0 binary64) (-.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))))","(-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))) (neg.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))))))","(+.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))))) (neg.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))))))","(+.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (exp.f64 (/.f64 (log1p.f64 x) n)))","(+.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(*.f64 (pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (log.f64 (fma.f64 x x #s(literal -1 binary64)))) (pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (neg.f64 (log.f64 (-.f64 x #s(literal 1 binary64))))))","(*.f64 (pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (neg.f64 (log1p.f64 (*.f64 x (-.f64 x #s(literal 1 binary64)))))))","(*.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 3/4 binary64))) (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1/4 binary64)))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 n #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64))) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal -1 binary64) n)))","(*.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1/4 binary64)) (pow.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (*.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64))))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1/2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1/2 binary64) n)))","(pow.f64 (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 n #s(literal -1/2 binary64))) (pow.f64 n #s(literal -1/4 binary64))) (pow.f64 n #s(literal -1/4 binary64)))","(pow.f64 (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (neg.f64 (pow.f64 n #s(literal -1/2 binary64)))) (pow.f64 n #s(literal -1/2 binary64)))","(pow.f64 (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (pow.f64 n #s(literal -1/2 binary64))) (neg.f64 (pow.f64 n #s(literal -1/2 binary64))))","(pow.f64 (pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)) (log1p.f64 x))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 2 binary64) n))","(pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (log1p.f64 x))","(pow.f64 (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 n #s(literal -1 binary64))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal -1 binary64) n)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)))","(pow.f64 (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (pow.f64 n #s(literal -1/2 binary64))) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(pow.f64 (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (pow.f64 n #s(literal -1/2 binary64))) (*.f64 (pow.f64 n #s(literal -1/2 binary64)) #s(literal 1/2 binary64)))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) n) #s(literal 2 binary64)))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal 1/2 binary64)))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) n) #s(literal -1 binary64)))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 n #s(literal -1/2 binary64))) (pow.f64 n #s(literal -1/2 binary64)))","(pow.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1/4 binary64)) #s(literal 4 binary64))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) #s(literal 2 binary64)))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64))))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (fma.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64))))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (/.f64 #s(literal 1/2 binary64) n))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1/2 binary64) n)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) #s(literal 1/2 binary64))","(pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1 binary64))","(pow.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64))) #s(literal 2 binary64)))","(pow.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64))) #s(literal 2 binary64)))","(pow.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 n #s(literal -1 binary64)))","(/.f64 (pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (log1p.f64 (*.f64 (neg.f64 x) x))) (pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (log1p.f64 (neg.f64 x))))","(/.f64 (pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (log.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))))) (pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (log1p.f64 (neg.f64 x))))","(/.f64 (pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 (pow.f64 x #s(literal 3 binary64))))) (pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (log.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))))","(/.f64 (pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (log.f64 (fma.f64 x x #s(literal -1 binary64)))) (pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (log.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (log1p.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))))))","(/.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (neg.f64 (log1p.f64 x))))","(/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal -1 binary64) n)))","(exp.f64 (*.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log1p.f64 x)) (pow.f64 n #s(literal -1 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log1p.f64 x)) (/.f64 #s(literal 1/2 binary64) n)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (log1p.f64 x) n)) #s(literal 2 binary64)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64)))) (log1p.f64 x)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 n #s(literal -1/2 binary64)))) (pow.f64 n #s(literal -1/2 binary64))))","(exp.f64 (*.f64 (neg.f64 (log1p.f64 x)) (/.f64 #s(literal -1 binary64) n)))","(exp.f64 (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 (log1p.f64 x) n)) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log1p.f64 x)) (/.f64 #s(literal 1/2 binary64) n)))","(exp.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (log1p.f64 x) n)) #s(literal 2 binary64)))","(exp.f64 (/.f64 (log1p.f64 x) n))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (+.f64 #s(literal 1 binary64) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))) (+.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(*.f64 (/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) x))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))","(*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (fma.f64 x x #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (+.f64 (fma.f64 x x #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) #s(literal 2 binary64)) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) #s(literal -1 binary64))) (fma.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (+.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 x x #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (exp.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64)))) (exp.f64 (log.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (exp.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (exp.f64 (log1p.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (fma.f64 x x #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) x))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(neg.f64 (/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64))))","(neg.f64 (/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(neg.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(neg.f64 (/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (/.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) x) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 1/2 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 x x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) x #s(literal 1 binary64))","(fma.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 x #s(literal 1 binary64) #s(literal 1 binary64))","(-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)))","(-.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (neg.f64 (log1p.f64 x)) #s(literal -1 binary64)))","(exp.f64 (log1p.f64 x))","(+.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 #s(literal 1 binary64) x)","(+.f64 x #s(literal 1 binary64))","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 n #s(literal -1/2 binary64))) (pow.f64 n #s(literal -1/2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64))","(*.f64 (pow.f64 n #s(literal -1/2 binary64)) (pow.f64 n #s(literal -1/2 binary64)))","(*.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 2 binary64) n))","(*.f64 (/.f64 #s(literal 2 binary64) n) #s(literal 1/2 binary64))","(*.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) n))","(*.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 n #s(literal -1 binary64)))","(pow.f64 (*.f64 n n) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 n #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1 binary64))","(pow.f64 n #s(literal -1 binary64))","(/.f64 (*.f64 #s(literal 2 binary64) (/.f64 #s(literal -1 binary64) n)) #s(literal -2 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 2 binary64))) (-.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n)))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal 2 binary64) n) #s(literal -3 binary64)) (pow.f64 (*.f64 #s(literal 2 binary64) n) #s(literal -3 binary64))) (+.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 2 binary64)) (-.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (/.f64 #s(literal -1 binary64) n) (*.f64 #s(literal -2 binary64) n) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) (*.f64 #s(literal -2 binary64) n)))","(/.f64 (fma.f64 (/.f64 #s(literal -1 binary64) n) #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) (pow.f64 n #s(literal -1 binary64)))) #s(literal -4 binary64))","(/.f64 (fma.f64 (/.f64 #s(literal -1 binary64) n) (*.f64 #s(literal 2 binary64) n) #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) n)))","(/.f64 (+.f64 #s(literal 2 binary64) (*.f64 (*.f64 #s(literal -2 binary64) n) (/.f64 #s(literal -1 binary64) n))) (*.f64 (*.f64 #s(literal -2 binary64) n) #s(literal -2 binary64)))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 #s(literal -2 binary64) n) (*.f64 (*.f64 #s(literal -2 binary64) n) #s(literal -1 binary64))) (pow.f64 (*.f64 #s(literal -2 binary64) n) #s(literal 2 binary64)))","(/.f64 (+.f64 #s(literal -2 binary64) (*.f64 (*.f64 #s(literal -2 binary64) n) (pow.f64 n #s(literal -1 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) n) #s(literal 2 binary64)))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 #s(literal 2 binary64) n) (*.f64 (*.f64 #s(literal -2 binary64) n) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) n) (*.f64 #s(literal 2 binary64) n)))","(/.f64 (fma.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (/.f64 #s(literal -1 binary64) n))) #s(literal -4 binary64))","(/.f64 (fma.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 #s(literal -2 binary64) n) #s(literal -2 binary64)) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) n)))","(/.f64 (fma.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) n) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) n)))","(/.f64 (+.f64 #s(literal -2 binary64) (*.f64 (*.f64 #s(literal 2 binary64) n) (/.f64 #s(literal -1 binary64) n))) (*.f64 (*.f64 #s(literal 2 binary64) n) #s(literal -2 binary64)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) n) (*.f64 #s(literal 2 binary64) n)) (pow.f64 (*.f64 #s(literal 2 binary64) n) #s(literal 2 binary64)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) n) (*.f64 (*.f64 #s(literal 2 binary64) n) #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) n) (*.f64 #s(literal -2 binary64) n)))","(/.f64 (+.f64 #s(literal 2 binary64) (*.f64 (*.f64 #s(literal 2 binary64) n) (pow.f64 n #s(literal -1 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) n) #s(literal 2 binary64)))","(/.f64 (+.f64 (/.f64 #s(literal 2 binary64) n) (/.f64 #s(literal 2 binary64) n)) #s(literal 4 binary64))","(/.f64 #s(literal -2 binary64) (*.f64 #s(literal -2 binary64) n))","(/.f64 (/.f64 #s(literal 2 binary64) n) #s(literal 2 binary64))","(/.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) n))","(/.f64 #s(literal -1 binary64) (neg.f64 n))","(/.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) n)","(neg.f64 (/.f64 #s(literal -1 binary64) n))","(fma.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) n))","(fma.f64 (pow.f64 n #s(literal -1/2 binary64)) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) #s(literal 2 binary64)) (/.f64 #s(literal 1/2 binary64) n))","(fma.f64 (pow.f64 n #s(literal -1/2 binary64)) (*.f64 (pow.f64 n #s(literal -1/2 binary64)) #s(literal 1/2 binary64)) (/.f64 #s(literal 1/2 binary64) n))","(fma.f64 #s(literal 1/2 binary64) (pow.f64 n #s(literal -1 binary64)) (/.f64 #s(literal 1/2 binary64) n))","(fma.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) n))","(fma.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) #s(literal 2 binary64)) (/.f64 #s(literal 1/2 binary64) n))","(fma.f64 #s(literal -1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal 1/2 binary64)) (/.f64 #s(literal 1/2 binary64) n))","(fma.f64 #s(literal -1 binary64) (pow.f64 (*.f64 #s(literal -2 binary64) n) #s(literal -1 binary64)) (/.f64 #s(literal 1/2 binary64) n))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1/2 binary64) (/.f64 #s(literal 1/2 binary64) n))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) n))","(exp.f64 (*.f64 (*.f64 (log.f64 n) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (*.f64 n n)) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 n #s(literal -1/2 binary64))) #s(literal 2 binary64)))","(exp.f64 (neg.f64 (log.f64 n)))","(+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n))","(*.f64 (pow.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) n)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))","(*.f64 (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 3/2 binary64)) (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 1/2 binary64)) (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 3/2 binary64)))","(*.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)))","(*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (pow.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) n)))","(*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))","(pow.f64 (pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)) (log.f64 x))","(pow.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1/2 binary64))) (pow.f64 n #s(literal -1/4 binary64))) (pow.f64 n #s(literal -1/4 binary64)))","(pow.f64 (pow.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (pow.f64 n #s(literal -1/2 binary64)))) (pow.f64 n #s(literal -1/2 binary64)))","(pow.f64 (pow.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 n #s(literal -1/2 binary64))) (neg.f64 (pow.f64 n #s(literal -1/2 binary64))))","(pow.f64 (pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 n #s(literal -1 binary64)))","(pow.f64 (pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) n))","(pow.f64 (pow.f64 x #s(literal 1/2 binary64)) (/.f64 #s(literal 2 binary64) n))","(pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (log.f64 x))","(pow.f64 (pow.f64 x (/.f64 #s(literal -1 binary64) n)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 n #s(literal -1 binary64))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 x (pow.f64 n #s(literal -1/2 binary64))) (pow.f64 n #s(literal -1/2 binary64)))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n))","(pow.f64 (pow.f64 (*.f64 x x) (pow.f64 n #s(literal -1/2 binary64))) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(pow.f64 (pow.f64 (*.f64 x x) (pow.f64 n #s(literal -1/2 binary64))) (*.f64 (pow.f64 n #s(literal -1/2 binary64)) #s(literal 1/2 binary64)))","(pow.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) n) #s(literal 2 binary64)))","(pow.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal 1/2 binary64)))","(pow.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) n) #s(literal -1 binary64)))","(pow.f64 (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 1/2 binary64)) #s(literal 4 binary64))","(pow.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)))","(pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal 1 binary64))","(pow.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) #s(literal 1/2 binary64))","(pow.f64 (*.f64 x x) (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) #s(literal 2 binary64)))","(pow.f64 (*.f64 x x) (*.f64 #s(literal 2 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64))))","(pow.f64 (*.f64 x x) (fma.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64))))","(pow.f64 (*.f64 x x) (/.f64 #s(literal 1/2 binary64) n))","(pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64))","(pow.f64 x (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64))) #s(literal 2 binary64)))","(pow.f64 x (*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64))) #s(literal 2 binary64)))","(pow.f64 x (pow.f64 n #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal -1 binary64) n)))","(exp.f64 (*.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) (pow.f64 n #s(literal -1 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal 1/2 binary64) n)))","(exp.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (log.f64 x) n)) #s(literal 2 binary64)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) (/.f64 #s(literal 1/2 binary64) n)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64)))) (log.f64 x)))","(exp.f64 (*.f64 (log.f64 (pow.f64 x (pow.f64 n #s(literal -1/2 binary64)))) (pow.f64 n #s(literal -1/2 binary64))))","(exp.f64 (*.f64 (log.f64 (pow.f64 x #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) n)))","(exp.f64 (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 (log.f64 x) n)) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (log.f64 x) n)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) (/.f64 #s(literal 1/2 binary64) n)))","(exp.f64 (/.f64 (log.f64 x) n))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":256.367919921875,"type":"rewrite"},{"compiler":[[11308,1474]],"memory":[[5896464,39151424]],"time":52.712890625,"type":"eval"},{"alts":[["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","next",52.86027806730534,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","fresh",47.736311401776454,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","fresh",42.030246346593024,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","next",38.47039794086707,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","fresh",43.434926772303314,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","next",28.13424510185772,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","next",25.550494758753146,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n))))","next",31.434726469522207,"binary64"]],"compiler":[[48,27],[31,18],[19,13],[15,11],[40,21],[23,14],[21,13],[23,14],[48,27],[31,18],[19,13],[15,11],[40,21],[23,14],[21,13],[23,14]],"count":[[423,8]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[422,8],"picked":[1,0]}],"memory":[[-13812800,19025808]],"min-error":[[0.14150471655056057,"binary64"]],"time":96.591064453125,"type":"prune"},{"egraph":[[0,8579,408,0.140614148],[5,5268,418,0.041653774],[4,1494,423,0.023459262],[3,517,423,0.006560857],[2,196,423,0.002661981],[1,113,423,0.001020257],[0,75,423,0.000754739],[0,43,423,0.000813975]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(-.f64 (log1p.f64 x) (log.f64 x))","(log1p.f64 x)","x","(log.f64 x)","n","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))","#s(literal 1 binary64)","(pow.f64 x (/.f64 #s(literal 1 binary64) n))","x","(/.f64 #s(literal 1 binary64) n)","n","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","(/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n)","(/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x)","(pow.f64 x (/.f64 #s(literal 1 binary64) n))","x","(/.f64 #s(literal 1 binary64) n)","#s(literal 1 binary64)","n","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n))))","(-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n)))","(/.f64 x n)","x","n","(expm1.f64 (/.f64 (log.f64 x) n))","(/.f64 (log.f64 x) n)","(log.f64 x)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n))","(fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)))","(-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n)))","(+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))))","(/.f64 #s(literal 1/3 binary64) n)","#s(literal 1/3 binary64)","n","(/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))","#s(literal 1/6 binary64)","(pow.f64 n #s(literal 3 binary64))","#s(literal 3 binary64)","(/.f64 #s(literal 1/2 binary64) (*.f64 n n))","#s(literal 1/2 binary64)","(*.f64 n n)","x","(-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))","(/.f64 #s(literal 1/2 binary64) n)","(/.f64 #s(literal 1 binary64) n)","#s(literal 1 binary64)","(pow.f64 x (/.f64 #s(literal 1 binary64) n))"]],"locations":[["(fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))","cost-diff",0],["#s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64)))","cost-diff",0],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","cost-diff",0],["(fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)))","cost-diff",3],["(expm1.f64 (/.f64 (log.f64 x) n))","cost-diff",0],["(/.f64 x n)","cost-diff",0],["(-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n)))","cost-diff",0],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n))))","cost-diff",0],["(pow.f64 x (/.f64 #s(literal 1 binary64) n))","cost-diff",0],["(/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x)","cost-diff",0],["(/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n)","cost-diff",0],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","cost-diff",0],["(/.f64 #s(literal 1 binary64) n)","cost-diff",0],["(pow.f64 x (/.f64 #s(literal 1 binary64) n))","cost-diff",0],["#s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))","cost-diff",0],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","cost-diff",0],["(log1p.f64 x)","cost-diff",0],["(-.f64 (log1p.f64 x) (log.f64 x))","cost-diff",0],["(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","cost-diff",0],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","cost-diff",0]],"memory":[[2023840,50483248]],"method":["egg-herbie"],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(-.f64 (log1p.f64 x) (log.f64 x))","(log1p.f64 x)","x","(log.f64 x)","n","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))","#s(literal 1 binary64)","(pow.f64 x (/.f64 #s(literal 1 binary64) n))","x","(/.f64 #s(literal 1 binary64) n)","n","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","(/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n)","(/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x)","(pow.f64 x (/.f64 #s(literal 1 binary64) n))","x","(/.f64 #s(literal 1 binary64) n)","#s(literal 1 binary64)","n","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n))))","(-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n)))","(/.f64 x n)","x","n","(expm1.f64 (/.f64 (log.f64 x) n))","(/.f64 (log.f64 x) n)","(log.f64 x)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) n) (/.f64 #s(literal 1/2 binary64) n) (fma.f64 (+.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 #s(literal 1/3 binary64) n)) x (/.f64 #s(literal -1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64)))","#s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) n) (/.f64 #s(literal 1/2 binary64) n) (fma.f64 (+.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 #s(literal 1/3 binary64) n)) x (/.f64 #s(literal -1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) n) (/.f64 #s(literal 1/2 binary64) n) (fma.f64 (+.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 #s(literal 1/3 binary64) n)) x (/.f64 #s(literal -1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n))","(fma.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) n) (/.f64 #s(literal 1/2 binary64) n) (fma.f64 (+.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 #s(literal 1/3 binary64) n)) x (/.f64 #s(literal -1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n))","(fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)))","(fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) n) (/.f64 #s(literal 1/2 binary64) n) (fma.f64 (+.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 #s(literal 1/3 binary64) n)) x (/.f64 #s(literal -1/2 binary64) n)))","(-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n)))","(-.f64 (+.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 #s(literal 1/3 binary64) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n)))","(+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))))","(+.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 #s(literal 1/3 binary64) n))","(/.f64 #s(literal 1/3 binary64) n)","#s(literal 1/3 binary64)","n","(/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))","#s(literal 1/6 binary64)","(pow.f64 n #s(literal 3 binary64))","#s(literal 3 binary64)","(/.f64 #s(literal 1/2 binary64) (*.f64 n n))","#s(literal 1/2 binary64)","(*.f64 n n)","x","(-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))","(*.f64 (/.f64 #s(literal 1/2 binary64) n) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) n)))","(/.f64 #s(literal 1/2 binary64) n)","(/.f64 #s(literal 1 binary64) n)","#s(literal 1 binary64)","(pow.f64 x (/.f64 #s(literal 1 binary64) n))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":351.81298828125,"type":"simplify"},{"compiler":[[339,39]],"locations":[["(-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n)))","accuracy",4.601562500000001],["(fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)))","accuracy",14.494141959173149],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","accuracy",22.10294792745677],["#s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64)))","accuracy",30.791817350491115],["(-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n)))","accuracy",0.00390625],["(expm1.f64 (/.f64 (log.f64 x) n))","accuracy",0.015625],["(/.f64 (log.f64 x) n)","accuracy",0.31640625],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n))))","accuracy",31.344882719522207],["(/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x)","accuracy",0.01171875],["(pow.f64 x (/.f64 #s(literal 1 binary64) n))","accuracy",0.04121385463040329],["(/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n)","accuracy",0.07421875],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","accuracy",28.118793516386464],["(/.f64 #s(literal 1 binary64) n)","accuracy",0.0],["(pow.f64 x (/.f64 #s(literal 1 binary64) n))","accuracy",0.04121385463040329],["#s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))","accuracy",21.650109782950068],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","accuracy",22.10294792745677],["(log.f64 x)","accuracy",0.0],["(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","accuracy",0.24609375],["(-.f64 (log1p.f64 x) (log.f64 x))","accuracy",24.90619381778968],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","accuracy",31.130506076632997]],"memory":[[1435776,69469904]],"mixsample":[[36.724609375,"adjust",800],[42.989013671875,"ival-div",0],[0.332275390625,"ival-expm1",400],[1.121337890625,"ival-div",400],[27.572509765625,"ival-pow",1600],[1.14404296875,"ival-div",1600],[0.276123046875,"ival-assert",0],[19.787109375,"ival-sub",0],[19.1259765625,"const",0],[3.278564453125,"ival-log",1600],[4.588623046875,"ival-log1p",400],[39.770263671875,"ival-pow",0],[18.70703125,"ival-add",0],[1.095947265625,"ival-log",1200],[0.01220703125,"ival-sub",800],[0.751708984375,"ival-add",400],[0.58935546875,"ival-div",2000],[4.70654296875,"ival-log1p",0],[34.81884765625,"ival-pow",400],[0.1650390625,"ival-div",2400],[0.34228515625,"ival-add",1200],[3.325927734375,"ival-log1p",1600],[0.14501953125,"ival-div",2800],[13.668701171875,"adjust",2000],[1.302001953125,"ival-div",1200],[16.73681640625,"ival-mult",0],[0.12109375,"ival-add",1600],[3.690673828125,"ival-log",400],[5.90869140625,"ival-expm1",0],[1.38134765625,"ival-div",800],[6.720458984375,"ival-log",0],[0.541748046875,"ival-true",0],[2.631591796875,"ival-log",800],[1.109619140625,"exact",0],[1.92822265625,"ival-add",800]],"outcomes":[[211.174560546875,1,"valid",148],[183.262451171875,2,"valid",97],[7.267333984375,0,"valid",11]],"time":522.8310546875,"type":"localize"},{"count":[[22,159]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(-.f64 (log1p.f64 x) (log.f64 x))","(log1p.f64 x)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))","(pow.f64 x (/.f64 #s(literal 1 binary64) n))","(/.f64 #s(literal 1 binary64) n)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","(/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n)","(/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n))))","(-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n)))","(/.f64 x n)","(expm1.f64 (/.f64 (log.f64 x) n))","(fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))","(log.f64 x)","(/.f64 (log.f64 x) n)","(-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n)))"]],"memory":[[3476224,73326864]],"outputs":[["(- 1 (exp (/ (log x) n)))","(- (+ 1 (/ x n)) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(* -1 (/ (log x) n))","(+ (* -1 (/ (log x) n)) (/ x n))","(+ (* -1 (/ (log x) n)) (* x (+ (* -1/2 (/ x n)) (/ 1 n))))","(+ (* -1 (/ (log x) n)) (* x (+ (* x (- (* 1/3 (/ x n)) (* 1/2 (/ 1 n)))) (/ 1 n))))","(* -1 (log x))","(- x (log x))","(- (* x (+ 1 (* -1/2 x))) (log x))","(- (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) (log x))","x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","1","(+ 1 (/ x n))","(+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(exp (/ (log x) n))","(/ (exp (/ (log x) n)) (* n x))","(/ (exp (/ (log x) n)) x)","(/ x n)","(- (exp (/ (log x) n)) 1)","(- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))","(- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))","(log x)","(/ (log x) n)","(/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x))","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2)))) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) (pow x 3)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2))))) x)","(/ 1 (* n x))","(/ (- (/ 1 n) (* 1/2 (/ 1 (* n x)))) x)","(/ (- (+ (/ 1/3 (* n (pow x 2))) (/ 1 n)) (/ 1/2 (* n x))) x)","(/ (- (+ (/ 1 n) (* 1/3 (/ 1 (* n (pow x 2))))) (+ (/ 1/2 (* n x)) (* 1/4 (/ 1 (* n (pow x 3)))))) x)","(/ 1 x)","(/ (- 1 (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3))))) x)","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(exp (* -1 (/ (log (/ 1 x)) n)))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2))))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 3)))))","(/ (exp (* -1 (/ (log (/ 1 x)) n))) x)","(* x (- (+ (/ 1 n) (/ 1 x)) (/ (exp (* -1 (/ (log (/ 1 x)) n))) x)))","(- (exp (* -1 (/ (log (/ 1 x)) n))) 1)","(* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))","(* x (- (+ (* 1/6 (/ 1 (pow n 3))) (+ (* 1/3 (/ 1 n)) (/ 1/2 (* (pow n 2) x)))) (+ (* 1/2 (/ 1 (pow n 2))) (/ 1/2 (* n x)))))","(* (pow x 3) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))","(* (pow x 3) (- (+ (* 1/6 (/ 1 (pow n 3))) (+ (* 1/3 (/ 1 n)) (/ 1/2 (* (pow n 2) x)))) (+ (* 1/2 (/ 1 (pow n 2))) (/ 1/2 (* n x)))))","(* (pow x 3) (- (+ (* 1/6 (/ 1 (pow n 3))) (+ (* 1/3 (/ 1 n)) (+ (/ 1/2 (* (pow n 2) x)) (/ 1 (* n (pow x 2)))))) (+ (* 1/2 (/ 1 (pow n 2))) (/ 1/2 (* n x)))))","(* (pow x 3) (- (+ (* 1/6 (/ 1 (pow n 3))) (+ (* 1/3 (/ 1 n)) (+ (/ 1/2 (* (pow n 2) x)) (+ (/ 1 (* n (pow x 2))) (/ 1 (pow x 3)))))) (+ (* 1/2 (/ 1 (pow n 2))) (/ 1/2 (* n x)))))","(* -1 (/ (log (/ 1 x)) n))","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(* -1 (/ (- (* 1/2 (/ 1 (* n x))) (/ 1 n)) x))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (* n x))) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 (* n x))) (* 1/3 (/ 1 n))) x)) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 x)) 1/3) x)) 1/2) x)) 1) x))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x)))","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) x)","(* -1 (* x (- (* -1 (/ (- 1 (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n))) x)) (/ 1 n))))","(- (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) 1)","(* -1 (* x (+ (* -1 (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (* -1 (/ (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))) x)))))","(* -1 (* (pow x 3) (+ (* -1 (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (* -1 (/ (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))) x)))))","(* -1 (* (pow x 3) (+ (* -1 (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (* -1 (/ (- (+ (* 1/2 (/ 1 (pow n 2))) (/ 1 (* n x))) (* 1/2 (/ 1 n))) x)))))","(* -1 (* (pow x 3) (+ (* -1 (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (* -1 (/ (- (+ (* 1/2 (/ 1 (pow n 2))) (+ (/ 1 (* n x)) (/ 1 (pow x 2)))) (* 1/2 (/ 1 n))) x)))))","(/ (+ (log -1) (* -1 (log (/ -1 x)))) n)","(- (exp (/ (log (+ 1 x)) n)) (exp (/ (log x) n)))","(/ (- (log (+ 1 x)) (log x)) n)","(exp (/ (log (+ 1 x)) n))","(/ 1 n)","(/ (+ x (* n (- 1 (exp (/ (log x) n))))) n)","(* 1/6 (/ x (pow n 3)))","(/ (+ (* 1/6 x) (* n (+ 1/2 (* -1/2 x)))) (pow n 3))","(/ (+ (* 1/6 x) (* n (+ 1/2 (+ (* -1/2 x) (* n (- (* 1/3 x) 1/2)))))) (pow n 3))","(* 1/6 (/ (pow x 3) (pow n 3)))","(/ (+ (* 1/6 (pow x 3)) (* n (* (pow x 2) (+ 1/2 (* -1/2 x))))) (pow n 3))","(/ (+ (* 1/6 (pow x 3)) (* n (+ (* n (* x (+ 1 (* x (- (* 1/3 x) 1/2))))) (* (pow x 2) (+ 1/2 (* -1/2 x)))))) (pow n 3))","(/ (+ (* 1/6 (pow x 3)) (* n (+ (* n (+ n (* x (+ 1 (* x (- (* 1/3 x) 1/2)))))) (* (pow x 2) (+ 1/2 (* -1/2 x)))))) (pow n 3))","(/ 1/6 (pow n 3))","(/ (+ 1/6 (* -1/2 n)) (pow n 3))","(/ (+ 1/6 (* n (- (* 1/3 n) 1/2))) (pow n 3))","(/ (- (+ (log (+ 1 x)) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))) (+ (log x) (* 1/2 (/ (pow (log x) 2) n)))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n)))) (+ (log x) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n))))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/24 (/ (pow (log (+ 1 x)) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))))) (+ (log x) (+ (* 1/24 (/ (pow (log x) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n)))))) n)","(+ 1 (/ (log (+ 1 x)) n))","(+ 1 (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n)))","(+ 1 (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 3))) (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n))))","(+ 1 (/ (log x) n))","(+ 1 (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (/ (log x) n)))","(+ 1 (+ (* 1/6 (/ (pow (log x) 3) (pow n 3))) (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (/ (log x) n))))","(/ (+ (/ 1 x) (/ (log x) (* n x))) n)","(/ (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1 x) (/ (log x) (* n x)))) n)","(/ (+ (* 1/6 (/ (pow (log x) 3) (* (pow n 3) x))) (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1 x) (/ (log x) (* n x))))) n)","(+ (/ 1 x) (/ (log x) (* n x)))","(+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1 x) (/ (log x) (* n x))))","(+ (* 1/6 (/ (pow (log x) 3) (* (pow n 3) x))) (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1 x) (/ (log x) (* n x)))))","(/ (- x (log x)) n)","(/ (- (+ x (* -1/2 (/ (pow (log x) 2) n))) (log x)) n)","(/ (- (+ x (* -1/6 (/ (pow (log x) 3) (pow n 2)))) (+ (log x) (* 1/2 (/ (pow (log x) 2) n)))) n)","(/ (- (+ x (* -1/24 (/ (pow (log x) 4) (pow n 3)))) (+ (log x) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n))))) n)","(/ (+ (log x) (* 1/2 (/ (pow (log x) 2) n))) n)","(/ (+ (log x) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n)))) n)","(/ (+ (log x) (+ (* 1/24 (/ (pow (log x) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n))))) n)","(/ (- (* 1/3 x) 1/2) n)","(/ (- (+ (* -1/2 (/ x n)) (+ (* 1/3 x) (* 1/2 (/ 1 n)))) 1/2) n)","(/ (- (+ (* -1/2 (/ x n)) (+ (* 1/6 (/ x (pow n 2))) (+ (* 1/3 x) (* 1/2 (/ 1 n))))) 1/2) n)","(+ 1 (/ (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) n))","(+ 1 (+ (/ (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) n) (/ (* (pow x 2) (+ 1/2 (* -1/2 x))) (pow n 2))))","(+ 1 (+ (* 1/6 (/ (pow x 3) (pow n 3))) (+ (/ (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) n) (/ (* (pow x 2) (+ 1/2 (* -1/2 x))) (pow n 2)))))","(/ 1/3 n)","(/ (- 1/3 (* 1/2 (/ 1 n))) n)","(/ (- (+ 1/3 (/ 1/6 (pow n 2))) (* 1/2 (/ 1 n))) n)","(* -1 (/ (- (* -1 (log (+ 1 x))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (* 1/2 (pow (log (+ 1 x)) 2)) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (* -1/6 (pow (log (+ 1 x)) 3)) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/24 (pow (log (+ 1 x)) 4)) (* 1/24 (pow (log x) 4))) n)) (* -1/6 (pow (log (+ 1 x)) 3))) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1/2 (/ (pow (log (+ 1 x)) 2) n))) n)))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1 (/ (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) n)) (* 1/2 (pow (log (+ 1 x)) 2))) n))) n)))","(+ 1 (* -1 (/ (+ (* -1 (log x)) (* -1/2 (/ (pow (log x) 2) n))) n)))","(+ 1 (* -1 (/ (+ (* -1 (log x)) (* -1 (/ (+ (* 1/6 (/ (pow (log x) 3) n)) (* 1/2 (pow (log x) 2))) n))) n)))","(* -1 (/ (- (* -1 (/ (log x) (* n x))) (/ 1 x)) n))","(* -1 (/ (- (* -1 (/ (+ (* 1/2 (/ (pow (log x) 2) (* n x))) (/ (log x) x)) n)) (/ 1 x)) n))","(* -1 (/ (- (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (/ (pow (log x) 2) x)) (* -1/6 (/ (pow (log x) 3) (* n x)))) n)) (/ (log x) x)) n)) (/ 1 x)) n))","(+ (* -1 (/ (+ (* -1 (/ (log x) x)) (* -1/2 (/ (pow (log x) 2) (* n x)))) n)) (/ 1 x))","(+ (* -1 (/ (+ (* -1 (/ (log x) x)) (* -1 (/ (+ (* 1/6 (/ (pow (log x) 3) (* n x))) (* 1/2 (/ (pow (log x) 2) x))) n))) n)) (/ 1 x))","(* -1 (/ (- (* -1 x) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 x) (* 1/2 (/ (pow (log x) 2) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 x) (* -1 (/ (- (* -1/6 (/ (pow (log x) 3) n)) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 x) (* -1 (/ (- (* -1 (/ (- (* 1/24 (/ (pow (log x) 4) n)) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (+ (* -1 (log x)) (* -1/2 (/ (pow (log x) 2) n))) n))","(* -1 (/ (+ (* -1 (log x)) (* -1 (/ (+ (* 1/6 (/ (pow (log x) 3) n)) (* 1/2 (pow (log x) 2))) n))) n))","(* -1 (/ (+ (* -1 (log x)) (* -1 (/ (+ (* -1 (/ (+ (* -1/6 (pow (log x) 3)) (* -1/24 (/ (pow (log x) 4) n))) n)) (* 1/2 (pow (log x) 2))) n))) n))","(* -1 (/ (+ 1/2 (* -1/3 x)) n))","(* -1 (/ (+ 1/2 (+ (* -1 (/ (+ 1/2 (* -1/2 x)) n)) (* -1/3 x))) n))","(* -1 (/ (+ 1/2 (+ (* -1 (/ (+ 1/2 (+ (* -1/2 x) (* 1/6 (/ x n)))) n)) (* -1/3 x))) n))","(+ 1 (* -1 (/ (* x (- (* x (+ 1/2 (* -1/3 x))) 1)) n)))","(+ 1 (* -1 (/ (+ (* -1 (/ (* (pow x 2) (+ 1/2 (* -1/2 x))) n)) (* x (- (* x (+ 1/2 (* -1/3 x))) 1))) n)))","(+ 1 (* -1 (/ (+ (* -1 (/ (+ (* 1/6 (/ (pow x 3) n)) (* (pow x 2) (+ 1/2 (* -1/2 x)))) n)) (* x (- (* x (+ 1/2 (* -1/3 x))) 1))) n)))","(* -1 (/ (- (* 1/2 (/ 1 n)) 1/3) n))","(* -1 (/ (- (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n)) 1/3) n))"]],"series":[[50.55615234375,"((- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (log (+ 1 x)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n)) (/ 1 n) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (/ (pow x (/ 1 n)) x) n) (/ (pow x (/ 1 n)) x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (- (/ x n) (- (exp (/ (log x) n)) 1)) (/ x n) (- (exp (/ (log x) n)) 1) (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (+ (* (+ (* (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) x) (/ 1 n)) x) 1) (log x) (/ (log x) n) (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))))","n","-inf"],[35.802001953125,"((- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (log (+ 1 x)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n)) (/ 1 n) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (/ (pow x (/ 1 n)) x) n) (/ (pow x (/ 1 n)) x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (- (/ x n) (- (exp (/ (log x) n)) 1)) (/ x n) (- (exp (/ (log x) n)) 1) (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (+ (* (+ (* (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) x) (/ 1 n)) x) 1) (log x) (/ (log x) n) (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))))","n","inf"],[67.260009765625,"((- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (log (+ 1 x)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n)) (/ 1 n) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (/ (pow x (/ 1 n)) x) n) (/ (pow x (/ 1 n)) x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (- (/ x n) (- (exp (/ (log x) n)) 1)) (/ x n) (- (exp (/ (log x) n)) 1) (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (+ (* (+ (* (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) x) (/ 1 n)) x) 1) (log x) (/ (log x) n) (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))))","n","0"],[24.09912109375,"((- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (log (+ 1 x)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n)) (/ 1 n) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (/ (pow x (/ 1 n)) x) n) (/ (pow x (/ 1 n)) x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (- (/ x n) (- (exp (/ (log x) n)) 1)) (/ x n) (- (exp (/ (log x) n)) 1) (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (+ (* (+ (* (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) x) (/ 1 n)) x) 1) (log x) (/ (log x) n) (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))))","x","-inf"],[29.77197265625,"((- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (log (+ 1 x)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n)) (/ 1 n) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (/ (pow x (/ 1 n)) x) n) (/ (pow x (/ 1 n)) x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (- (/ x n) (- (exp (/ (log x) n)) 1)) (/ x n) (- (exp (/ (log x) n)) 1) (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (+ (* (+ (* (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) x) (/ 1 n)) x) 1) (log x) (/ (log x) n) (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))))","x","inf"],[19.60791015625,"((- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (log (+ 1 x)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n)) (/ 1 n) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (/ (pow x (/ 1 n)) x) n) (/ (pow x (/ 1 n)) x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (- (/ x n) (- (exp (/ (log x) n)) 1)) (/ x n) (- (exp (/ (log x) n)) 1) (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (+ (* (+ (* (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) x) (/ 1 n)) x) 1) (log x) (/ (log x) n) (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))))","x","0"]],"time":234.18701171875,"type":"series"},{"count":[[159,158]],"egraph":[[0,8094,2980,0.097035573],[2,5889,3184,0.031417598],[1,2000,3253,0.023120941],[0,663,3464,0.009471313]],"inputs":[["(- 1 (exp (/ (log x) n)))","(- (+ 1 (/ x n)) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(* -1 (/ (log x) n))","(+ (* -1 (/ (log x) n)) (/ x n))","(+ (* -1 (/ (log x) n)) (* x (+ (* -1/2 (/ x n)) (/ 1 n))))","(+ (* -1 (/ (log x) n)) (* x (+ (* x (- (* 1/3 (/ x n)) (* 1/2 (/ 1 n)))) (/ 1 n))))","(* -1 (log x))","(- x (log x))","(- (* x (+ 1 (* -1/2 x))) (log x))","(- (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) (log x))","x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","1","(+ 1 (/ x n))","(+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(exp (/ (log x) n))","(/ (exp (/ (log x) n)) (* n x))","(/ (exp (/ (log x) n)) x)","(/ x n)","(- (exp (/ (log x) n)) 1)","(- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))","(- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))","(log x)","(/ (log x) n)","(/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x))","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2)))) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) (pow x 3)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2))))) x)","(/ 1 (* n x))","(/ (- (/ 1 n) (* 1/2 (/ 1 (* n x)))) x)","(/ (- (+ (/ 1/3 (* n (pow x 2))) (/ 1 n)) (/ 1/2 (* n x))) x)","(/ (- (+ (/ 1 n) (* 1/3 (/ 1 (* n (pow x 2))))) (+ (/ 1/2 (* n x)) (* 1/4 (/ 1 (* n (pow x 3)))))) x)","(/ 1 x)","(/ (- 1 (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3))))) x)","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(exp (* -1 (/ (log (/ 1 x)) n)))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2))))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 3)))))","(/ (exp (* -1 (/ (log (/ 1 x)) n))) x)","(* x (- (+ (/ 1 n) (/ 1 x)) (/ (exp (* -1 (/ (log (/ 1 x)) n))) x)))","(- (exp (* -1 (/ (log (/ 1 x)) n))) 1)","(* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))","(* x (- (+ (* 1/6 (/ 1 (pow n 3))) (+ (* 1/3 (/ 1 n)) (/ 1/2 (* (pow n 2) x)))) (+ (* 1/2 (/ 1 (pow n 2))) (/ 1/2 (* n x)))))","(* (pow x 3) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))","(* (pow x 3) (- (+ (* 1/6 (/ 1 (pow n 3))) (+ (* 1/3 (/ 1 n)) (/ 1/2 (* (pow n 2) x)))) (+ (* 1/2 (/ 1 (pow n 2))) (/ 1/2 (* n x)))))","(* (pow x 3) (- (+ (* 1/6 (/ 1 (pow n 3))) (+ (* 1/3 (/ 1 n)) (+ (/ 1/2 (* (pow n 2) x)) (/ 1 (* n (pow x 2)))))) (+ (* 1/2 (/ 1 (pow n 2))) (/ 1/2 (* n x)))))","(* (pow x 3) (- (+ (* 1/6 (/ 1 (pow n 3))) (+ (* 1/3 (/ 1 n)) (+ (/ 1/2 (* (pow n 2) x)) (+ (/ 1 (* n (pow x 2))) (/ 1 (pow x 3)))))) (+ (* 1/2 (/ 1 (pow n 2))) (/ 1/2 (* n x)))))","(* -1 (/ (log (/ 1 x)) n))","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(* -1 (/ (- (* 1/2 (/ 1 (* n x))) (/ 1 n)) x))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (* n x))) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 (* n x))) (* 1/3 (/ 1 n))) x)) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 x)) 1/3) x)) 1/2) x)) 1) x))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x)))","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) x)","(* -1 (* x (- (* -1 (/ (- 1 (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n))) x)) (/ 1 n))))","(- (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) 1)","(* -1 (* x (+ (* -1 (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (* -1 (/ (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))) x)))))","(* -1 (* (pow x 3) (+ (* -1 (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (* -1 (/ (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))) x)))))","(* -1 (* (pow x 3) (+ (* -1 (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (* -1 (/ (- (+ (* 1/2 (/ 1 (pow n 2))) (/ 1 (* n x))) (* 1/2 (/ 1 n))) x)))))","(* -1 (* (pow x 3) (+ (* -1 (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (* -1 (/ (- (+ (* 1/2 (/ 1 (pow n 2))) (+ (/ 1 (* n x)) (/ 1 (pow x 2)))) (* 1/2 (/ 1 n))) x)))))","(/ (+ (log -1) (* -1 (log (/ -1 x)))) n)","(- (exp (/ (log (+ 1 x)) n)) (exp (/ (log x) n)))","(/ (- (log (+ 1 x)) (log x)) n)","(exp (/ (log (+ 1 x)) n))","(/ 1 n)","(/ (+ x (* n (- 1 (exp (/ (log x) n))))) n)","(* 1/6 (/ x (pow n 3)))","(/ (+ (* 1/6 x) (* n (+ 1/2 (* -1/2 x)))) (pow n 3))","(/ (+ (* 1/6 x) (* n (+ 1/2 (+ (* -1/2 x) (* n (- (* 1/3 x) 1/2)))))) (pow n 3))","(* 1/6 (/ (pow x 3) (pow n 3)))","(/ (+ (* 1/6 (pow x 3)) (* n (* (pow x 2) (+ 1/2 (* -1/2 x))))) (pow n 3))","(/ (+ (* 1/6 (pow x 3)) (* n (+ (* n (* x (+ 1 (* x (- (* 1/3 x) 1/2))))) (* (pow x 2) (+ 1/2 (* -1/2 x)))))) (pow n 3))","(/ (+ (* 1/6 (pow x 3)) (* n (+ (* n (+ n (* x (+ 1 (* x (- (* 1/3 x) 1/2)))))) (* (pow x 2) (+ 1/2 (* -1/2 x)))))) (pow n 3))","(/ 1/6 (pow n 3))","(/ (+ 1/6 (* -1/2 n)) (pow n 3))","(/ (+ 1/6 (* n (- (* 1/3 n) 1/2))) (pow n 3))","(/ (- (+ (log (+ 1 x)) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))) (+ (log x) (* 1/2 (/ (pow (log x) 2) n)))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n)))) (+ (log x) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n))))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/24 (/ (pow (log (+ 1 x)) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))))) (+ (log x) (+ (* 1/24 (/ (pow (log x) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n)))))) n)","(+ 1 (/ (log (+ 1 x)) n))","(+ 1 (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n)))","(+ 1 (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 3))) (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n))))","(+ 1 (/ (log x) n))","(+ 1 (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (/ (log x) n)))","(+ 1 (+ (* 1/6 (/ (pow (log x) 3) (pow n 3))) (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (/ (log x) n))))","(/ (+ (/ 1 x) (/ (log x) (* n x))) n)","(/ (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1 x) (/ (log x) (* n x)))) n)","(/ (+ (* 1/6 (/ (pow (log x) 3) (* (pow n 3) x))) (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1 x) (/ (log x) (* n x))))) n)","(+ (/ 1 x) (/ (log x) (* n x)))","(+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1 x) (/ (log x) (* n x))))","(+ (* 1/6 (/ (pow (log x) 3) (* (pow n 3) x))) (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1 x) (/ (log x) (* n x)))))","(/ (- x (log x)) n)","(/ (- (+ x (* -1/2 (/ (pow (log x) 2) n))) (log x)) n)","(/ (- (+ x (* -1/6 (/ (pow (log x) 3) (pow n 2)))) (+ (log x) (* 1/2 (/ (pow (log x) 2) n)))) n)","(/ (- (+ x (* -1/24 (/ (pow (log x) 4) (pow n 3)))) (+ (log x) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n))))) n)","(/ (+ (log x) (* 1/2 (/ (pow (log x) 2) n))) n)","(/ (+ (log x) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n)))) n)","(/ (+ (log x) (+ (* 1/24 (/ (pow (log x) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n))))) n)","(/ (- (* 1/3 x) 1/2) n)","(/ (- (+ (* -1/2 (/ x n)) (+ (* 1/3 x) (* 1/2 (/ 1 n)))) 1/2) n)","(/ (- (+ (* -1/2 (/ x n)) (+ (* 1/6 (/ x (pow n 2))) (+ (* 1/3 x) (* 1/2 (/ 1 n))))) 1/2) n)","(+ 1 (/ (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) n))","(+ 1 (+ (/ (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) n) (/ (* (pow x 2) (+ 1/2 (* -1/2 x))) (pow n 2))))","(+ 1 (+ (* 1/6 (/ (pow x 3) (pow n 3))) (+ (/ (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) n) (/ (* (pow x 2) (+ 1/2 (* -1/2 x))) (pow n 2)))))","(/ 1/3 n)","(/ (- 1/3 (* 1/2 (/ 1 n))) n)","(/ (- (+ 1/3 (/ 1/6 (pow n 2))) (* 1/2 (/ 1 n))) n)","(* -1 (/ (- (* -1 (log (+ 1 x))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (* 1/2 (pow (log (+ 1 x)) 2)) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (* -1/6 (pow (log (+ 1 x)) 3)) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/24 (pow (log (+ 1 x)) 4)) (* 1/24 (pow (log x) 4))) n)) (* -1/6 (pow (log (+ 1 x)) 3))) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1/2 (/ (pow (log (+ 1 x)) 2) n))) n)))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1 (/ (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) n)) (* 1/2 (pow (log (+ 1 x)) 2))) n))) n)))","(+ 1 (* -1 (/ (+ (* -1 (log x)) (* -1/2 (/ (pow (log x) 2) n))) n)))","(+ 1 (* -1 (/ (+ (* -1 (log x)) (* -1 (/ (+ (* 1/6 (/ (pow (log x) 3) n)) (* 1/2 (pow (log x) 2))) n))) n)))","(* -1 (/ (- (* -1 (/ (log x) (* n x))) (/ 1 x)) n))","(* -1 (/ (- (* -1 (/ (+ (* 1/2 (/ (pow (log x) 2) (* n x))) (/ (log x) x)) n)) (/ 1 x)) n))","(* -1 (/ (- (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (/ (pow (log x) 2) x)) (* -1/6 (/ (pow (log x) 3) (* n x)))) n)) (/ (log x) x)) n)) (/ 1 x)) n))","(+ (* -1 (/ (+ (* -1 (/ (log x) x)) (* -1/2 (/ (pow (log x) 2) (* n x)))) n)) (/ 1 x))","(+ (* -1 (/ (+ (* -1 (/ (log x) x)) (* -1 (/ (+ (* 1/6 (/ (pow (log x) 3) (* n x))) (* 1/2 (/ (pow (log x) 2) x))) n))) n)) (/ 1 x))","(* -1 (/ (- (* -1 x) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 x) (* 1/2 (/ (pow (log x) 2) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 x) (* -1 (/ (- (* -1/6 (/ (pow (log x) 3) n)) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 x) (* -1 (/ (- (* -1 (/ (- (* 1/24 (/ (pow (log x) 4) n)) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (+ (* -1 (log x)) (* -1/2 (/ (pow (log x) 2) n))) n))","(* -1 (/ (+ (* -1 (log x)) (* -1 (/ (+ (* 1/6 (/ (pow (log x) 3) n)) (* 1/2 (pow (log x) 2))) n))) n))","(* -1 (/ (+ (* -1 (log x)) (* -1 (/ (+ (* -1 (/ (+ (* -1/6 (pow (log x) 3)) (* -1/24 (/ (pow (log x) 4) n))) n)) (* 1/2 (pow (log x) 2))) n))) n))","(* -1 (/ (+ 1/2 (* -1/3 x)) n))","(* -1 (/ (+ 1/2 (+ (* -1 (/ (+ 1/2 (* -1/2 x)) n)) (* -1/3 x))) n))","(* -1 (/ (+ 1/2 (+ (* -1 (/ (+ 1/2 (+ (* -1/2 x) (* 1/6 (/ x n)))) n)) (* -1/3 x))) n))","(+ 1 (* -1 (/ (* x (- (* x (+ 1/2 (* -1/3 x))) 1)) n)))","(+ 1 (* -1 (/ (+ (* -1 (/ (* (pow x 2) (+ 1/2 (* -1/2 x))) n)) (* x (- (* x (+ 1/2 (* -1/3 x))) 1))) n)))","(+ 1 (* -1 (/ (+ (* -1 (/ (+ (* 1/6 (/ (pow x 3) n)) (* (pow x 2) (+ 1/2 (* -1/2 x)))) n)) (* x (- (* x (+ 1/2 (* -1/3 x))) 1))) n)))","(* -1 (/ (- (* 1/2 (/ 1 n)) 1/3) n))","(* -1 (/ (- (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n)) 1/3) n))"]],"memory":[[12339392,50176784]],"method":["egg-herbie"],"outputs":[["(- 1 (exp (/ (log x) n)))","(-.f64 #s(literal 1 binary64) (exp.f64 (/.f64 (log.f64 x) n)))","(- (+ 1 (/ x n)) (exp (/ (log x) n)))","(-.f64 (+.f64 (/.f64 x n) #s(literal 1 binary64)) (exp.f64 (/.f64 (log.f64 x) n)))","(- (+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x (-.f64 #s(literal 1 binary64) (exp.f64 (/.f64 (log.f64 x) n))))","(- (+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/3 binary64)) n)) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x (-.f64 #s(literal 1 binary64) (exp.f64 (/.f64 (log.f64 x) n))))","(* -1 (/ (log x) n))","(/.f64 (neg.f64 (log.f64 x)) n)","(+ (* -1 (/ (log x) n)) (/ x n))","(/.f64 (-.f64 x (log.f64 x)) n)","(+ (* -1 (/ (log x) n)) (* x (+ (* -1/2 (/ x n)) (/ 1 n))))","(fma.f64 (*.f64 x (/.f64 x n)) #s(literal -1/2 binary64) (/.f64 (-.f64 x (log.f64 x)) n))","(+ (* -1 (/ (log x) n)) (* x (+ (* x (- (* 1/3 (/ x n)) (* 1/2 (/ 1 n)))) (/ 1 n))))","(fma.f64 (*.f64 x x) (/.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) n) (/.f64 (-.f64 x (log.f64 x)) n))","(* -1 (log x))","(neg.f64 (log.f64 x))","(- x (log x))","(-.f64 x (log.f64 x))","(- (* x (+ 1 (* -1/2 x))) (log x))","(fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) x (neg.f64 (log.f64 x)))","(- (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) (log x))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x (neg.f64 (log.f64 x)))","x","(* x (+ 1 (* -1/2 x)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","1","#s(literal 1 binary64)","(+ 1 (/ x n))","(+.f64 (/.f64 x n) #s(literal 1 binary64))","(+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))","(+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/3 binary64)) n)) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))","(exp (/ (log x) n))","(exp.f64 (/.f64 (log.f64 x) n))","(/ (exp (/ (log x) n)) (* n x))","(/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x))","(/ (exp (/ (log x) n)) x)","(/.f64 (exp.f64 (/.f64 (log.f64 x) n)) x)","(/ x n)","(/.f64 x n)","(- (exp (/ (log x) n)) 1)","(expm1.f64 (/.f64 (log.f64 x) n))","(- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))","(-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))","(- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))","(fma.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/3 binary64)) n)) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)))","(log x)","(log.f64 x)","(/ (log x) n)","(/.f64 (log.f64 x) n)","(/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x))","(/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x))","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x)) x)","(/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x) (exp.f64 (/.f64 (log.f64 x) n)) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2)))) x)","(/.f64 (fma.f64 (exp.f64 (/.f64 (log.f64 x) n)) (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/3 binary64)) n)) (*.f64 x x)) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x)) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) (pow x 3)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2))))) x)","(/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x) (exp.f64 (/.f64 (log.f64 x) n)) (fma.f64 (exp.f64 (/.f64 (log.f64 x) n)) (+.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 11/24 binary64) (*.f64 n n)) (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 4 binary64)))) (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 #s(literal 1/4 binary64) n))) (pow.f64 x #s(literal 3 binary64))) (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/3 binary64)) n)) (*.f64 x x))) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n))) x)","(/ 1 (* n x))","(/.f64 (/.f64 #s(literal 1 binary64) x) n)","(/ (- (/ 1 n) (* 1/2 (/ 1 (* n x)))) x)","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (/.f64 #s(literal 1/2 binary64) n) x)) x)","(/ (- (+ (/ 1/3 (* n (pow x 2))) (/ 1 n)) (/ 1/2 (* n x))) x)","(/.f64 (+.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) n) x) (/.f64 #s(literal 1/2 binary64) n)) x)) x)","(/ (- (+ (/ 1 n) (* 1/3 (/ 1 (* n (pow x 2))))) (+ (/ 1/2 (* n x)) (* 1/4 (/ 1 (* n (pow x 3)))))) x)","(/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) n) x) (/.f64 #s(literal 1/2 binary64) n)) x)) (/.f64 #s(literal 1/4 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) n))) x)","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ (- 1 (* 1/2 (/ 1 x))) x)","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (* 1/2 (/ 1 x))) x)","(/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3))))) x)","(/.f64 (-.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) (/.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal 3 binary64)))) x)","(* -1 (log (/ 1 x)))","(log.f64 x)","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(+.f64 (/.f64 #s(literal 1 binary64) x) (log.f64 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(-.f64 (log.f64 x) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(+.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) (log.f64 x)) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) x))","(exp (* -1 (/ (log (/ 1 x)) n)))","(exp.f64 (/.f64 (log.f64 x) n))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)))","(+.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x)) (exp.f64 (/.f64 (log.f64 x) n)))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2))))","(fma.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x) x) (exp.f64 (/.f64 (log.f64 x) n)) (+.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x)) (exp.f64 (/.f64 (log.f64 x) n))))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 3)))))","(fma.f64 (exp.f64 (/.f64 (log.f64 x) n)) (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/3 binary64)) n)) (pow.f64 x #s(literal 3 binary64))) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x) x)) (+.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x)) (exp.f64 (/.f64 (log.f64 x) n))))","(/ (exp (* -1 (/ (log (/ 1 x)) n))) x)","(/.f64 (exp.f64 (/.f64 (log.f64 x) n)) x)","(* x (- (+ (/ 1 n) (/ 1 x)) (/ (exp (* -1 (/ (log (/ 1 x)) n))) x)))","(*.f64 (-.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) n)) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) x)) x)","(- (exp (* -1 (/ (log (/ 1 x)) n))) 1)","(expm1.f64 (/.f64 (log.f64 x) n))","(* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))","(*.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/3 binary64)) n)) x)","(* x (- (+ (* 1/6 (/ 1 (pow n 3))) (+ (* 1/3 (/ 1 n)) (/ 1/2 (* (pow n 2) x)))) (+ (* 1/2 (/ 1 (pow n 2))) (/ 1/2 (* n x)))))","(*.f64 (-.f64 (+.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) x) (/.f64 #s(literal 1/3 binary64) n)) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) n) n)) (/.f64 (/.f64 #s(literal 1/2 binary64) n) x)) x)","(* (pow x 3) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))","(*.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/3 binary64)) n)))","(* (pow x 3) (- (+ (* 1/6 (/ 1 (pow n 3))) (+ (* 1/3 (/ 1 n)) (/ 1/2 (* (pow n 2) x)))) (+ (* 1/2 (/ 1 (pow n 2))) (/ 1/2 (* n x)))))","(*.f64 (-.f64 (+.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) x) (/.f64 #s(literal 1/3 binary64) n)) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) n) n)) (/.f64 (/.f64 #s(literal 1/2 binary64) n) x)) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (- (+ (* 1/6 (/ 1 (pow n 3))) (+ (* 1/3 (/ 1 n)) (+ (/ 1/2 (* (pow n 2) x)) (/ 1 (* n (pow x 2)))))) (+ (* 1/2 (/ 1 (pow n 2))) (/ 1/2 (* n x)))))","(*.f64 (-.f64 (+.f64 (+.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) x) (/.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) x)) (/.f64 #s(literal 1/3 binary64) n)) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) n) n)) (/.f64 (/.f64 #s(literal 1/2 binary64) n) x)) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (- (+ (* 1/6 (/ 1 (pow n 3))) (+ (* 1/3 (/ 1 n)) (+ (/ 1/2 (* (pow n 2) x)) (+ (/ 1 (* n (pow x 2))) (/ 1 (pow x 3)))))) (+ (* 1/2 (/ 1 (pow n 2))) (/ 1/2 (* n x)))))","(*.f64 (-.f64 (+.f64 (+.f64 (+.f64 (+.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) x)) (/.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) x)) (/.f64 #s(literal 1/3 binary64) n)) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) n) n)) (/.f64 (/.f64 #s(literal 1/2 binary64) n) x)) (pow.f64 x #s(literal 3 binary64)))","(* -1 (/ (log (/ 1 x)) n))","(/.f64 (log.f64 x) n)","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x))","(/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (*.f64 n x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x))","(/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x) (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) x)","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(/.f64 (+.f64 (/.f64 (fma.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (neg.f64 (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/3 binary64)) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) x)) (*.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)))) x) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) x)","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(/.f64 (+.f64 (/.f64 (-.f64 (*.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) (/.f64 (fma.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/3 binary64)) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (*.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (neg.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 11/24 binary64) (*.f64 n n)) (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 4 binary64)))) (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 #s(literal 1/4 binary64) n))) x)))) x)) x) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) x)","(* -1 (/ (- (* 1/2 (/ 1 (* n x))) (/ 1 n)) x))","(/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) x) (/.f64 #s(literal 1 binary64) n)) (neg.f64 x))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (* n x))) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(/.f64 (+.f64 (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) n) x) (/.f64 #s(literal 1/2 binary64) n)) x) (/.f64 #s(literal 1 binary64) n)) x)","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 (* n x))) (* 1/3 (/ 1 n))) x)) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal -1/2 binary64) n) (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) n) x) (/.f64 #s(literal 1/3 binary64) n)) x)) x) (/.f64 #s(literal 1 binary64) n)) x)","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) (neg.f64 x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 x)) 1/3) x)) 1/2) x)) 1) x))","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x)) (neg.f64 x))","(+ (log -1) (* -1 (log (/ -1 x))))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) (log.f64 (/.f64 #s(literal -1 binary64) x))) (log.f64 #s(literal -1 binary64)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x))","(exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n))","(exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x)))","(+.f64 (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (*.f64 n x)) (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x)))","(+.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x) (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) x) (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x)))","(+.f64 (/.f64 (+.f64 (/.f64 (fma.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (neg.f64 (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/3 binary64)) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) x)) (*.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)))) x) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) x) (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)))","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) x)","(/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) x)","(* -1 (* x (- (* -1 (/ (- 1 (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n))) x)) (/ 1 n))))","(*.f64 (+.f64 (/.f64 (-.f64 #s(literal 1 binary64) (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n))) x) (/.f64 #s(literal 1 binary64) n)) x)","(- (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) 1)","(expm1.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n))","(* -1 (* x (+ (* -1 (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (* -1 (/ (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))) x)))))","(*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/3 binary64)) n))) x)","(* -1 (* (pow x 3) (+ (* -1 (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (* -1 (/ (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))) x)))))","(*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/3 binary64)) n))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1 (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (* -1 (/ (- (+ (* 1/2 (/ 1 (pow n 2))) (/ 1 (* n x))) (* 1/2 (/ 1 n))) x)))))","(*.f64 (+.f64 (/.f64 (-.f64 (+.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) (/.f64 #s(literal 1/2 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/3 binary64)) n))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1 (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (* -1 (/ (- (+ (* 1/2 (/ 1 (pow n 2))) (+ (/ 1 (* n x)) (/ 1 (pow x 2)))) (* 1/2 (/ 1 n))) x)))))","(*.f64 (+.f64 (/.f64 (-.f64 (+.f64 (+.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x) (/.f64 (/.f64 #s(literal 1 binary64) x) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) (/.f64 #s(literal 1/2 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/3 binary64)) n))) (pow.f64 x #s(literal 3 binary64)))","(/ (+ (log -1) (* -1 (log (/ -1 x)))) n)","(/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)","(- (exp (/ (log (+ 1 x)) n)) (exp (/ (log x) n)))","(-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (exp.f64 (/.f64 (log.f64 x) n)))","(/ (- (log (+ 1 x)) (log x)) n)","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(exp (/ (log (+ 1 x)) n))","(exp.f64 (/.f64 (log1p.f64 x) n))","(/ 1 n)","(/.f64 #s(literal 1 binary64) n)","(/ (+ x (* n (- 1 (exp (/ (log x) n))))) n)","(/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) (exp.f64 (/.f64 (log.f64 x) n))) n x) n)","(* 1/6 (/ x (pow n 3)))","(*.f64 (/.f64 x (pow.f64 n #s(literal 3 binary64))) #s(literal 1/6 binary64))","(/ (+ (* 1/6 x) (* n (+ 1/2 (* -1/2 x)))) (pow n 3))","(/.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1/2 binary64)) n (*.f64 #s(literal 1/6 binary64) x)) (pow.f64 n #s(literal 3 binary64)))","(/ (+ (* 1/6 x) (* n (+ 1/2 (+ (* -1/2 x) (* n (- (* 1/3 x) 1/2)))))) (pow n 3))","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) n (fma.f64 #s(literal -1/2 binary64) x #s(literal 1/2 binary64))) n (*.f64 #s(literal 1/6 binary64) x)) (pow.f64 n #s(literal 3 binary64)))","(* 1/6 (/ (pow x 3) (pow n 3)))","(*.f64 (pow.f64 x #s(literal 3 binary64)) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))))","(/ (+ (* 1/6 (pow x 3)) (* n (* (pow x 2) (+ 1/2 (* -1/2 x))))) (pow n 3))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1/2 binary64)) x) x) n (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64))) (pow.f64 n #s(literal 3 binary64)))","(/ (+ (* 1/6 (pow x 3)) (* n (+ (* n (* x (+ 1 (* x (- (* 1/3 x) 1/2))))) (* (pow x 2) (+ 1/2 (* -1/2 x)))))) (pow n 3))","(/.f64 (fma.f64 (fma.f64 (*.f64 n (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))) x (*.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1/2 binary64)) x) x)) n (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64))) (pow.f64 n #s(literal 3 binary64)))","(/ (+ (* 1/6 (pow x 3)) (* n (+ (* n (+ n (* x (+ 1 (* x (- (* 1/3 x) 1/2)))))) (* (pow x 2) (+ 1/2 (* -1/2 x)))))) (pow n 3))","(/.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1/2 binary64)) x) x (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x n) n)) n (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64))) (pow.f64 n #s(literal 3 binary64)))","(/ 1/6 (pow n 3))","(/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))","(/ (+ 1/6 (* -1/2 n)) (pow n 3))","(/.f64 (fma.f64 #s(literal -1/2 binary64) n #s(literal 1/6 binary64)) (pow.f64 n #s(literal 3 binary64)))","(/ (+ 1/6 (* n (- (* 1/3 n) 1/2))) (pow n 3))","(/.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) n #s(literal -1/2 binary64)) n #s(literal 1/6 binary64)) (pow.f64 n #s(literal 3 binary64)))","(/ (- (+ (log (+ 1 x)) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))) (+ (log x) (* 1/2 (/ (pow (log x) 2) n)))) n)","(/.f64 (-.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (log1p.f64 x)) (log.f64 x)) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n)))) (+ (log x) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n))))) n)","(/.f64 (-.f64 (fma.f64 (/.f64 #s(literal 1/6 binary64) n) (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) n) (fma.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (log1p.f64 x))) (fma.f64 (/.f64 #s(literal 1/6 binary64) n) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (log.f64 x)))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/24 (/ (pow (log (+ 1 x)) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))))) (+ (log x) (+ (* 1/24 (/ (pow (log x) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n)))))) n)","(/.f64 (-.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal 1/6 binary64) n) (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) n) (fma.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (log1p.f64 x)))) (fma.f64 (pow.f64 (log.f64 x) #s(literal 4 binary64)) (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal 1/6 binary64) n) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (log.f64 x))))) n)","(+ 1 (/ (log (+ 1 x)) n))","(+.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64))","(+ 1 (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n)))","(fma.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) n) #s(literal 1/2 binary64) (+.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64)))","(+ 1 (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 3))) (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n))))","(fma.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64)) #s(literal 1/6 binary64) (fma.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) n) #s(literal 1/2 binary64) (+.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64))))","(+ 1 (/ (log x) n))","(+.f64 (/.f64 (log.f64 x) n) #s(literal 1 binary64))","(+ 1 (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (/ (log x) n)))","(+.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (log.f64 x)) n) #s(literal 1 binary64))","(+ 1 (+ (* 1/6 (/ (pow (log x) 3) (pow n 3))) (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (/ (log x) n))))","(fma.f64 (pow.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64)) #s(literal 1/6 binary64) (+.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (log.f64 x)) n) #s(literal 1 binary64)))","(/ (+ (/ 1 x) (/ (log x) (* n x))) n)","(/.f64 (+.f64 (/.f64 (/.f64 (log.f64 x) n) x) (/.f64 #s(literal 1 binary64) x)) n)","(/ (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1 x) (/ (log x) (* n x)))) n)","(/.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (+.f64 (/.f64 (/.f64 (log.f64 x) n) x) (/.f64 #s(literal 1 binary64) x))) n)","(/ (+ (* 1/6 (/ (pow (log x) 3) (* (pow n 3) x))) (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1 x) (/ (log x) (* n x))))) n)","(/.f64 (fma.f64 (/.f64 #s(literal 1/6 binary64) x) (pow.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64)) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (+.f64 (/.f64 (/.f64 (log.f64 x) n) x) (/.f64 #s(literal 1 binary64) x)))) n)","(+ (/ 1 x) (/ (log x) (* n x)))","(+.f64 (/.f64 (/.f64 (log.f64 x) n) x) (/.f64 #s(literal 1 binary64) x))","(+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1 x) (/ (log x) (* n x))))","(fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (+.f64 (/.f64 (/.f64 (log.f64 x) n) x) (/.f64 #s(literal 1 binary64) x)))","(+ (* 1/6 (/ (pow (log x) 3) (* (pow n 3) x))) (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1 x) (/ (log x) (* n x)))))","(fma.f64 (/.f64 #s(literal 1/6 binary64) x) (pow.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64)) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (+.f64 (/.f64 (/.f64 (log.f64 x) n) x) (/.f64 #s(literal 1 binary64) x))))","(/ (- x (log x)) n)","(/.f64 (-.f64 x (log.f64 x)) n)","(/ (- (+ x (* -1/2 (/ (pow (log x) 2) n))) (log x)) n)","(/.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal -1/2 binary64) (-.f64 x (log.f64 x))) n)","(/ (- (+ x (* -1/6 (/ (pow (log x) 3) (pow n 2)))) (+ (log x) (* 1/2 (/ (pow (log x) 2) n)))) n)","(/.f64 (-.f64 (+.f64 (/.f64 (fma.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) #s(literal -1/6 binary64))) n) x) (log.f64 x)) n)","(/ (- (+ x (* -1/24 (/ (pow (log x) 4) (pow n 3)))) (+ (log x) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n))))) n)","(/.f64 (-.f64 (fma.f64 #s(literal -1/24 binary64) (/.f64 (pow.f64 (log.f64 x) #s(literal 4 binary64)) (pow.f64 n #s(literal 3 binary64))) x) (fma.f64 (/.f64 #s(literal 1/6 binary64) n) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (log.f64 x)))) n)","(/ (+ (log x) (* 1/2 (/ (pow (log x) 2) n))) n)","(/.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (log.f64 x)) n)","(/ (+ (log x) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n)))) n)","(/.f64 (fma.f64 (/.f64 #s(literal 1/6 binary64) n) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (log.f64 x))) n)","(/ (+ (log x) (+ (* 1/24 (/ (pow (log x) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n))))) n)","(/.f64 (fma.f64 (pow.f64 (log.f64 x) #s(literal 4 binary64)) (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal 1/6 binary64) n) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (log.f64 x)))) n)","(/ (- (* 1/3 x) 1/2) n)","(/.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) n)","(/ (- (+ (* -1/2 (/ x n)) (+ (* 1/3 x) (* 1/2 (/ 1 n)))) 1/2) n)","(/.f64 (-.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 x n) (fma.f64 #s(literal 1/3 binary64) x (/.f64 #s(literal 1/2 binary64) n))) #s(literal 1/2 binary64)) n)","(/ (- (+ (* -1/2 (/ x n)) (+ (* 1/6 (/ x (pow n 2))) (+ (* 1/3 x) (* 1/2 (/ 1 n))))) 1/2) n)","(/.f64 (-.f64 (fma.f64 (/.f64 (/.f64 x n) n) #s(literal 1/6 binary64) (fma.f64 #s(literal -1/2 binary64) (/.f64 x n) (fma.f64 #s(literal 1/3 binary64) x (/.f64 #s(literal 1/2 binary64) n)))) #s(literal 1/2 binary64)) n)","(+ 1 (/ (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) n))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) (/.f64 x n) #s(literal 1 binary64))","(+ 1 (+ (/ (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) n) (/ (* (pow x 2) (+ 1/2 (* -1/2 x))) (pow n 2))))","(fma.f64 (/.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1/2 binary64)) x) n) (/.f64 x n) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) (/.f64 x n) #s(literal 1 binary64)))","(+ 1 (+ (* 1/6 (/ (pow x 3) (pow n 3))) (+ (/ (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) n) (/ (* (pow x 2) (+ 1/2 (* -1/2 x))) (pow n 2)))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1/2 binary64)) x) n) (/.f64 x n) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) (/.f64 x n) #s(literal 1 binary64))))","(/ 1/3 n)","(/.f64 #s(literal 1/3 binary64) n)","(/ (- 1/3 (* 1/2 (/ 1 n))) n)","(/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)","(/ (- (+ 1/3 (/ 1/6 (pow n 2))) (* 1/2 (/ 1 n))) n)","(/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 1/3 binary64)) n)","(* -1 (/ (- (* -1 (log (+ 1 x))) (* -1 (log x))) n))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (* 1/2 (pow (log (+ 1 x)) 2)) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(/.f64 (-.f64 (log.f64 x) (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (log1p.f64 x))) (neg.f64 n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (* -1/6 (pow (log (+ 1 x)) 3)) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(/.f64 (-.f64 (log.f64 x) (+.f64 (/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64) (/.f64 (*.f64 #s(literal 1/6 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) n)) n) (log1p.f64 x))) (neg.f64 n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/24 (pow (log (+ 1 x)) 4)) (* 1/24 (pow (log x) 4))) n)) (* -1/6 (pow (log (+ 1 x)) 3))) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(/.f64 (-.f64 (log.f64 x) (+.f64 (/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64) (/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1/6 binary64) (/.f64 (*.f64 #s(literal -1/24 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64)))) n)) (neg.f64 n))) n) (log1p.f64 x))) (neg.f64 n))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1/2 (/ (pow (log (+ 1 x)) 2) n))) n)))","(-.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) #s(literal -1/2 binary64) (neg.f64 (log1p.f64 x))) n))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1 (/ (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) n)) (* 1/2 (pow (log (+ 1 x)) 2))) n))) n)))","(+.f64 (/.f64 (+.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) n) #s(literal 1/6 binary64) (*.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) #s(literal 1/2 binary64))) n) (log1p.f64 x)) n) #s(literal 1 binary64))","(+ 1 (* -1 (/ (+ (* -1 (log x)) (* -1/2 (/ (pow (log x) 2) n))) n)))","(-.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal -1/2 binary64) (neg.f64 (log.f64 x))) n))","(+ 1 (* -1 (/ (+ (* -1 (log x)) (* -1 (/ (+ (* 1/6 (/ (pow (log x) 3) n)) (* 1/2 (pow (log x) 2))) n))) n)))","(+.f64 (/.f64 (+.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) #s(literal 1/6 binary64) (*.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal 1/2 binary64))) n) (log.f64 x)) n) #s(literal 1 binary64))","(* -1 (/ (- (* -1 (/ (log x) (* n x))) (/ 1 x)) n))","(/.f64 (+.f64 (/.f64 (/.f64 (log.f64 x) n) x) (/.f64 #s(literal 1 binary64) x)) n)","(* -1 (/ (- (* -1 (/ (+ (* 1/2 (/ (pow (log x) 2) (* n x))) (/ (log x) x)) n)) (/ 1 x)) n))","(/.f64 (+.f64 (/.f64 (fma.f64 (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) x) #s(literal 1/2 binary64) (/.f64 (log.f64 x) x)) n) (/.f64 #s(literal 1 binary64) x)) n)","(* -1 (/ (- (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (/ (pow (log x) 2) x)) (* -1/6 (/ (pow (log x) 3) (* n x)))) n)) (/ (log x) x)) n)) (/ 1 x)) n))","(/.f64 (+.f64 (/.f64 (-.f64 (/.f64 (log.f64 x) x) (/.f64 (fma.f64 (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) x) #s(literal -1/6 binary64) (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) #s(literal -1/2 binary64))) n)) n) (/.f64 #s(literal 1 binary64) x)) n)","(+ (* -1 (/ (+ (* -1 (/ (log x) x)) (* -1/2 (/ (pow (log x) 2) (* n x)))) n)) (/ 1 x))","(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) (/.f64 (neg.f64 (log.f64 x)) x)) n))","(+ (* -1 (/ (+ (* -1 (/ (log x) x)) (* -1 (/ (+ (* 1/6 (/ (pow (log x) 3) (* n x))) (* 1/2 (/ (pow (log x) 2) x))) n))) n)) (/ 1 x))","(+.f64 (/.f64 (+.f64 (/.f64 (fma.f64 (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) x) #s(literal 1/6 binary64) (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) #s(literal 1/2 binary64))) n) (/.f64 (log.f64 x) x)) n) (/.f64 #s(literal 1 binary64) x))","(* -1 (/ (- (* -1 x) (* -1 (log x))) n))","(/.f64 (-.f64 x (log.f64 x)) n)","(* -1 (/ (- (+ (* -1 x) (* 1/2 (/ (pow (log x) 2) n))) (* -1 (log x))) n))","(/.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (-.f64 (log.f64 x) x)) (neg.f64 n))","(* -1 (/ (- (+ (* -1 x) (* -1 (/ (- (* -1/6 (/ (pow (log x) 3) n)) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(/.f64 (-.f64 (log.f64 x) (+.f64 (/.f64 (fma.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) #s(literal -1/6 binary64))) n) x)) (neg.f64 n))","(* -1 (/ (- (+ (* -1 x) (* -1 (/ (- (* -1 (/ (- (* 1/24 (/ (pow (log x) 4) n)) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(/.f64 (-.f64 (/.f64 (+.f64 (/.f64 (fma.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) #s(literal 1/6 binary64) (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 4 binary64)) n) #s(literal 1/24 binary64))) n) (*.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal 1/2 binary64))) n) (-.f64 x (log.f64 x))) (neg.f64 n))","(* -1 (/ (+ (* -1 (log x)) (* -1/2 (/ (pow (log x) 2) n))) n))","(/.f64 (fma.f64 (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal -1/2 binary64)) #s(literal -1 binary64) (log.f64 x)) n)","(* -1 (/ (+ (* -1 (log x)) (* -1 (/ (+ (* 1/6 (/ (pow (log x) 3) n)) (* 1/2 (pow (log x) 2))) n))) n))","(/.f64 (+.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) #s(literal 1/6 binary64) (*.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal 1/2 binary64))) n) (log.f64 x)) n)","(* -1 (/ (+ (* -1 (log x)) (* -1 (/ (+ (* -1 (/ (+ (* -1/6 (pow (log x) 3)) (* -1/24 (/ (pow (log x) 4) n))) n)) (* 1/2 (pow (log x) 2))) n))) n))","(/.f64 (+.f64 (/.f64 (fma.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal 1/2 binary64) (/.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 4 binary64)) n) #s(literal -1/24 binary64) (*.f64 #s(literal -1/6 binary64) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (neg.f64 n))) n) (log.f64 x)) n)","(* -1 (/ (+ 1/2 (* -1/3 x)) n))","(/.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal 1/2 binary64)) (neg.f64 n))","(* -1 (/ (+ 1/2 (+ (* -1 (/ (+ 1/2 (* -1/2 x)) n)) (* -1/3 x))) n))","(/.f64 (fma.f64 #s(literal -1/3 binary64) x (-.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1/2 binary64)) n))) (neg.f64 n))","(* -1 (/ (+ 1/2 (+ (* -1 (/ (+ 1/2 (+ (* -1/2 x) (* 1/6 (/ x n)))) n)) (* -1/3 x))) n))","(/.f64 (fma.f64 #s(literal -1/3 binary64) x (-.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 #s(literal 1/6 binary64) (/.f64 x n) (fma.f64 #s(literal -1/2 binary64) x #s(literal 1/2 binary64))) n))) (neg.f64 n))","(+ 1 (* -1 (/ (* x (- (* x (+ 1/2 (* -1/3 x))) 1)) n)))","(-.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x) n))","(+ 1 (* -1 (/ (+ (* -1 (/ (* (pow x 2) (+ 1/2 (* -1/2 x))) n)) (* x (- (* x (+ 1/2 (* -1/3 x))) 1))) n)))","(-.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x (*.f64 (*.f64 x x) (/.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1/2 binary64)) (neg.f64 n)))) n))","(+ 1 (* -1 (/ (+ (* -1 (/ (+ (* 1/6 (/ (pow x 3) n)) (* (pow x 2) (+ 1/2 (* -1/2 x)))) n)) (* x (- (* x (+ 1/2 (* -1/3 x))) 1))) n)))","(-.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1/2 binary64)) x) x (*.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) n) #s(literal 1/6 binary64))) (neg.f64 n))) n))","(* -1 (/ (- (* 1/2 (/ 1 n)) 1/3) n))","(/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)","(* -1 (/ (- (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n)) 1/3) n))","(/.f64 (-.f64 #s(literal -1/3 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) n)) (neg.f64 n))"]],"stop":[["iter limit",1],["node limit",1]],"time":274.85400390625,"type":"simplify"},{"count":[[22,622]],"egraph":[[0,9689,280,0.096688557],[2,3526,285,0.048051054],[1,361,295,0.011385752],[0,75,317,0.002341773],[0,43,317,0.000434567]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(-.f64 (log1p.f64 x) (log.f64 x))","(log1p.f64 x)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))","(pow.f64 x (/.f64 #s(literal 1 binary64) n))","(/.f64 #s(literal 1 binary64) n)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","(/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n)","(/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n))))","(-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n)))","(/.f64 x n)","(expm1.f64 (/.f64 (log.f64 x) n))","(fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))","(log.f64 x)","(/.f64 (log.f64 x) n)","(-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n)))"]],"memory":[[-7056704,70407056]],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(*.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (/.f64 #s(literal -1 binary64) n))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (-.f64 (log1p.f64 x) (log.f64 x)))","(*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 n #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(pow.f64 (/.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (pow.f64 n #s(literal -1 binary64)))) (neg.f64 (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (pow.f64 n #s(literal -1 binary64)))) (neg.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))) (neg.f64 (neg.f64 n)))","(/.f64 (neg.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1 binary64))) (neg.f64 n))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (/.f64 n (log.f64 x)) #s(literal -2 binary64)))) (neg.f64 (+.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (/.f64 n (log.f64 x)) #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 n (log.f64 x)) #s(literal -2 binary64)) (*.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x))))) (neg.f64 (neg.f64 (neg.f64 n))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (neg.f64 n))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) n)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (neg.f64 n))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) n)))","(/.f64 (neg.f64 (-.f64 (*.f64 (log1p.f64 x) (neg.f64 n)) (*.f64 n (neg.f64 (log.f64 x))))) (neg.f64 (*.f64 (neg.f64 n) n)))","(/.f64 (neg.f64 (-.f64 (*.f64 (log1p.f64 x) n) (*.f64 n (log.f64 x)))) (*.f64 (neg.f64 n) n))","(/.f64 (neg.f64 (-.f64 (*.f64 (log1p.f64 x) (/.f64 n (log.f64 x))) n)) (neg.f64 (*.f64 n (/.f64 n (log.f64 x)))))","(/.f64 (-.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (*.f64 (log.f64 x) #s(literal -1 binary64))) (neg.f64 n))","(/.f64 (-.f64 (neg.f64 (log1p.f64 x)) (*.f64 (log.f64 x) #s(literal -1 binary64))) (neg.f64 n))","(/.f64 (-.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) (*.f64 (log.f64 x) #s(literal 1 binary64))) n)","(/.f64 (-.f64 (log1p.f64 x) (*.f64 (log.f64 x) #s(literal 1 binary64))) n)","(/.f64 (-.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (neg.f64 (log.f64 x))) (neg.f64 n))","(/.f64 (-.f64 (neg.f64 (log1p.f64 x)) (neg.f64 (log.f64 x))) (neg.f64 n))","(/.f64 (-.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) (log.f64 x)) n)","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (pow.f64 n #s(literal -1 binary64))) (+.f64 (log.f64 x) (log1p.f64 x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (pow.f64 n #s(literal -1 binary64))) (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) (neg.f64 n))","(/.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1 binary64)) n)","(/.f64 (-.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (/.f64 n (log.f64 x)) #s(literal -2 binary64))) (+.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n)))","(/.f64 (-.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (/.f64 n (log.f64 x)) #s(literal -3 binary64))) (+.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 n (log.f64 x)) #s(literal -2 binary64)) (*.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x)))) (neg.f64 (neg.f64 n)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (neg.f64 (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 n (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (neg.f64 n)))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) n))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (neg.f64 n)))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) n))","(/.f64 (-.f64 (*.f64 (log1p.f64 x) (neg.f64 n)) (*.f64 n (neg.f64 (log.f64 x)))) (*.f64 (neg.f64 n) n))","(/.f64 (-.f64 (*.f64 (log1p.f64 x) n) (*.f64 n (log.f64 x))) (*.f64 n n))","(/.f64 (-.f64 (*.f64 (log1p.f64 x) (/.f64 n (log.f64 x))) n) (*.f64 n (/.f64 n (log.f64 x))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (*.f64 n (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (neg.f64 n))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x))) n))","(neg.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (neg.f64 n)))","(fma.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64)) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64)) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n)) (log1p.f64 x) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n)) (log1p.f64 x) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n)) (log1p.f64 x) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n)) (log1p.f64 x) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 #s(literal 2 binary64) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1/2 binary64) n))) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 #s(literal 2 binary64) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1/2 binary64) n))) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (log1p.f64 x) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (log1p.f64 x) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (log1p.f64 x) (pow.f64 n #s(literal -1 binary64)) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (log1p.f64 x) (pow.f64 n #s(literal -1 binary64)) (neg.f64 (/.f64 (log.f64 x) n)))","(-.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))","(exp.f64 (*.f64 (log.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))) #s(literal -1 binary64)))","(+.f64 (/.f64 (log1p.f64 x) n) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(+.f64 (/.f64 (log1p.f64 x) n) (neg.f64 (/.f64 (log.f64 x) n)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (log.f64 x) (log1p.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (log1p.f64 x) (neg.f64 (log.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (log1p.f64 x) (log1p.f64 x) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (*.f64 (log1p.f64 x) (neg.f64 (log.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (-.f64 (log1p.f64 x) (neg.f64 (log.f64 x))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (+.f64 (log.f64 x) (log1p.f64 x)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (fma.f64 (log1p.f64 x) (log1p.f64 x) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (*.f64 (log1p.f64 x) (neg.f64 (log.f64 x))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))))","(neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))","(fma.f64 #s(literal -1 binary64) (log.f64 x) (log1p.f64 x))","(-.f64 (log.f64 (neg.f64 (+.f64 #s(literal 1 binary64) x))) (log.f64 (neg.f64 x)))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x))))","(-.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (fma.f64 x x (neg.f64 x))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (*.f64 x (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (*.f64 x (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))","(-.f64 (log1p.f64 x) (log.f64 x))","(+.f64 (neg.f64 (log.f64 x)) (log1p.f64 x))","(+.f64 (log1p.f64 x) (neg.f64 (log.f64 x)))","(log.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) x)))","(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x))","(log1p.f64 x)","(neg.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","(neg.f64 (log.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","(neg.f64 (log.f64 (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(neg.f64 (log.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(-.f64 (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(-.f64 (log.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (log.f64 (neg.f64 (-.f64 x #s(literal 1 binary64)))))","(-.f64 (log.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (log.f64 (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (log.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (log.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (neg.f64 x)))","(-.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (-.f64 x #s(literal 1 binary64))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x (neg.f64 x))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(+.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(+.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(log.f64 (+.f64 #s(literal 1 binary64) x))","(*.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))) (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))) (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))) (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))) (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)))) (neg.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))) (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64))) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64))) (fma.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))))","(/.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64))) (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))) (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))) (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))) (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))) (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))) (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64)))))","(fma.f64 (neg.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n))) (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (neg.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)))","(fma.f64 #s(literal -1 binary64) (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))) (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64)) (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))) (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 2 binary64)))))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))","(+.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)))","(+.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","#s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))","(*.f64 (pow.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n))) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))","(*.f64 (pow.f64 #s(literal 1 binary64) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n))) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))","(*.f64 (pow.f64 #s(literal 1 binary64) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))","(*.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (*.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 1 binary64)))","(*.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)))","(*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (pow.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n))))","(*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (pow.f64 #s(literal 1 binary64) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n))))","(*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (pow.f64 #s(literal 1 binary64) (pow.f64 n #s(literal -1 binary64))))","(*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))","(pow.f64 (exp.f64 (neg.f64 (log.f64 x))) (/.f64 #s(literal -1 binary64) n))","(pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (log.f64 x))","(pow.f64 (exp.f64 #s(literal 1 binary64)) (/.f64 (log.f64 x) n))","(pow.f64 (pow.f64 (*.f64 x x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) n))","(pow.f64 (pow.f64 (*.f64 x x) #s(literal 1/2 binary64)) (pow.f64 n #s(literal -1 binary64)))","(pow.f64 (pow.f64 x (pow.f64 n #s(literal -1/2 binary64))) (pow.f64 n #s(literal -1/2 binary64)))","(pow.f64 (pow.f64 (*.f64 x x) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) n))","(pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 2 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n))","(pow.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (*.f64 x x) (/.f64 #s(literal 1/2 binary64) n))","(pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64))","(pow.f64 x (*.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 2 binary64)))","(pow.f64 x (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n)))","(pow.f64 x (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n)))","(pow.f64 x (pow.f64 n #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (exp.f64 (/.f64 (neg.f64 (log.f64 x)) n)))","(/.f64 #s(literal 1 binary64) (exp.f64 (/.f64 (log.f64 x) (neg.f64 n))))","(/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal -1 binary64) n)))","(/.f64 #s(literal 1 binary64) (pow.f64 x (neg.f64 (pow.f64 n #s(literal -1 binary64)))))","(exp.f64 (fma.f64 (log.f64 x) (/.f64 #s(literal 1/2 binary64) n) (*.f64 (log.f64 x) (/.f64 #s(literal 1/2 binary64) n))))","(exp.f64 (*.f64 (*.f64 (log.f64 x) (/.f64 #s(literal 1/2 binary64) n)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (*.f64 x x)) (/.f64 #s(literal 1/2 binary64) n)))","(exp.f64 (*.f64 (log.f64 x) (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n))))","(exp.f64 (*.f64 (log.f64 x) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n))))","(exp.f64 (/.f64 (log.f64 x) n))","(*.f64 (pow.f64 n #s(literal -1/2 binary64)) (pow.f64 n #s(literal -1/2 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) n))","(*.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 n #s(literal -1 binary64)))","(pow.f64 (pow.f64 n #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (neg.f64 n)) #s(literal -1 binary64))","(pow.f64 (*.f64 n n) #s(literal -1/2 binary64))","(pow.f64 n #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (neg.f64 n))))","(/.f64 #s(literal -1 binary64) (neg.f64 n))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 n)))","(/.f64 #s(literal 1 binary64) n)","(neg.f64 (/.f64 #s(literal -1 binary64) n))","(exp.f64 (neg.f64 (log.f64 n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) n))","(*.f64 (pow.f64 (/.f64 n (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))))) #s(literal -1 binary64)) (pow.f64 (neg.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 n (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) n) (/.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) x))","(*.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (*.f64 n x)))","(*.f64 (/.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) x) (/.f64 #s(literal -1 binary64) n))","(*.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal -1 binary64)) n))","(*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (pow.f64 (*.f64 n x) #s(literal -1 binary64)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) n))","(pow.f64 (/.f64 (*.f64 n x) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 n (/.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64))))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) n) #s(literal -1 binary64))","(pow.f64 (*.f64 n (/.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64))))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n)) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (pow.f64 n #s(literal -1 binary64)))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (pow.f64 n #s(literal -1 binary64)))) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) #s(literal -1 binary64))) (neg.f64 (neg.f64 n)))","(/.f64 (neg.f64 (*.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 1 binary64))) (neg.f64 n))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64))) (neg.f64 (*.f64 (neg.f64 x) (neg.f64 n))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal 1 binary64))) (neg.f64 (*.f64 (neg.f64 x) n)))","(/.f64 (neg.f64 (*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 x (neg.f64 n))))","(/.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) x)","(/.f64 (*.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (pow.f64 n #s(literal -1 binary64))) (neg.f64 x))","(/.f64 (*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (pow.f64 n #s(literal -1 binary64))) x)","(/.f64 (*.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) #s(literal -1 binary64)) (neg.f64 n))","(/.f64 (*.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 1 binary64)) n)","(/.f64 (neg.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))))) (neg.f64 (*.f64 n (neg.f64 x))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))))) (neg.f64 (neg.f64 (*.f64 n x))))","(/.f64 (neg.f64 (pow.f64 n #s(literal -1 binary64))) (neg.f64 (/.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))","(/.f64 (*.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64)) (*.f64 (neg.f64 x) (neg.f64 n)))","(/.f64 (*.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal 1 binary64)) (*.f64 (neg.f64 x) n))","(/.f64 (*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64)) (*.f64 x (neg.f64 n)))","(/.f64 (/.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) x) (neg.f64 (neg.f64 (neg.f64 n))))","(/.f64 (/.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) x) (neg.f64 n))","(/.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (*.f64 n (neg.f64 x)))","(/.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (neg.f64 (*.f64 n x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 n x) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 n (/.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64))))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) n)))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 n (/.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))))","(/.f64 #s(literal -1 binary64) (*.f64 (/.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (neg.f64 n)))","(/.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) (neg.f64 (neg.f64 n)))","(/.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) n)","(/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (*.f64 n x))","(/.f64 (pow.f64 n #s(literal -1 binary64)) (/.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 n (/.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (/.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (neg.f64 n))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 n x) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 n (/.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64))))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) n))","(/.f64 #s(literal 1 binary64) (*.f64 n (/.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))","(neg.f64 (/.f64 (/.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) x) n))","(exp.f64 (*.f64 (log.f64 (*.f64 n (/.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (pow.f64 x (+.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal -1 binary64))))","(*.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) x))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (pow.f64 x (neg.f64 (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))","(*.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (pow.f64 (neg.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x))","(pow.f64 (/.f64 (/.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64))","(pow.f64 x (+.f64 #s(literal -1 binary64) (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n))))","(pow.f64 x (+.f64 #s(literal -1 binary64) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n))))","(pow.f64 x (+.f64 #s(literal -1 binary64) (pow.f64 n #s(literal -1 binary64))))","(pow.f64 x (fma.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n) #s(literal -1 binary64)))","(pow.f64 x (+.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n)) #s(literal -1 binary64)))","(pow.f64 x (+.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -1 binary64)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))","(/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(neg.f64 (/.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) x))","(exp.f64 (*.f64 (log.f64 (/.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64))))) #s(literal -1 binary64)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n))))","(*.f64 (-.f64 (pow.f64 (/.f64 x n) #s(literal 2 binary64)) (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 2 binary64))) (pow.f64 (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (/.f64 x n) #s(literal 3 binary64)) (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n)) (pow.f64 (/.f64 x n) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n)) (-.f64 (pow.f64 (/.f64 x n) #s(literal 2 binary64)) (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n)) (pow.f64 (/.f64 x n) #s(literal 2 binary64))) (-.f64 (pow.f64 (/.f64 x n) #s(literal 3 binary64)) (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (/.f64 x n) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 (-.f64 (/.f64 x n) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 (/.f64 x n) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (pow.f64 (-.f64 (/.f64 x n) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (-.f64 (/.f64 x n) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 x n) #s(literal 2 binary64)) (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 x n) #s(literal 3 binary64)) (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n)) (pow.f64 (/.f64 x n) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (*.f64 (neg.f64 x) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 n) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)))))) (neg.f64 (*.f64 (neg.f64 n) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (neg.f64 x) (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))) (*.f64 (neg.f64 n) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64)))))) (neg.f64 (*.f64 (neg.f64 n) (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 n x) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)))))) (neg.f64 (*.f64 (/.f64 n x) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))) (*.f64 (/.f64 n x) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64)))))) (neg.f64 (*.f64 (/.f64 n x) (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (-.f64 (*.f64 x (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 n (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)))))) (neg.f64 (*.f64 n (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 x (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))) (*.f64 n (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64)))))) (neg.f64 (*.f64 n (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))))","(/.f64 (-.f64 (pow.f64 (-.f64 (/.f64 x n) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 (-.f64 (/.f64 x n) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 (-.f64 (/.f64 x n) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (-.f64 (/.f64 x n) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (-.f64 (/.f64 x n) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 x n) #s(literal 2 binary64)) (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (/.f64 x n) (neg.f64 (expm1.f64 (/.f64 (log.f64 x) n))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 x n) #s(literal 2 binary64)) (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 2 binary64)))) (neg.f64 (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 x n) #s(literal 3 binary64)) (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (/.f64 x n) #s(literal 2 binary64)) (-.f64 (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 2 binary64)) (*.f64 (/.f64 x n) (neg.f64 (expm1.f64 (/.f64 (log.f64 x) n))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 x n) #s(literal 3 binary64)) (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n)) (pow.f64 (/.f64 x n) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 x) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 n) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))))) (*.f64 (neg.f64 n) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 x) (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))) (*.f64 (neg.f64 n) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))))) (*.f64 (neg.f64 n) (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 n x) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))))) (*.f64 (/.f64 n x) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))) (*.f64 (/.f64 n x) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))))) (*.f64 (/.f64 n x) (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))","(/.f64 (-.f64 (*.f64 x (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 n (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))))) (*.f64 n (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 x (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))) (*.f64 n (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))))) (*.f64 n (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 x n) #s(literal 2 binary64)) (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 2 binary64))) (-.f64 (/.f64 x n) (neg.f64 (expm1.f64 (/.f64 (log.f64 x) n)))))","(/.f64 (-.f64 (pow.f64 (/.f64 x n) #s(literal 2 binary64)) (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 2 binary64))) (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n)))","(/.f64 (-.f64 (pow.f64 (/.f64 x n) #s(literal 3 binary64)) (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 x n) #s(literal 2 binary64)) (-.f64 (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 2 binary64)) (*.f64 (/.f64 x n) (neg.f64 (expm1.f64 (/.f64 (log.f64 x) n)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 x n) #s(literal 3 binary64)) (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 3 binary64))) (fma.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n)) (pow.f64 (/.f64 x n) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n)) (-.f64 (pow.f64 (/.f64 x n) #s(literal 2 binary64)) (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n)) (pow.f64 (/.f64 x n) #s(literal 2 binary64))) (-.f64 (pow.f64 (/.f64 x n) #s(literal 3 binary64)) (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n)) (-.f64 (pow.f64 (/.f64 x n) #s(literal 2 binary64)) (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n)) (pow.f64 (/.f64 x n) #s(literal 2 binary64))) (-.f64 (pow.f64 (/.f64 x n) #s(literal 3 binary64)) (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 3 binary64)))))","(fma.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) n) (neg.f64 (expm1.f64 (/.f64 (log.f64 x) n))))","(fma.f64 #s(literal -1 binary64) (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (expm1.f64 (/.f64 (log.f64 x) n))))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) x (neg.f64 (expm1.f64 (/.f64 (log.f64 x) n))))","(fma.f64 #s(literal 1 binary64) (/.f64 x n) (neg.f64 (expm1.f64 (/.f64 (log.f64 x) n))))","(fma.f64 x (pow.f64 n #s(literal -1 binary64)) (neg.f64 (expm1.f64 (/.f64 (log.f64 x) n))))","(-.f64 (/.f64 (pow.f64 (/.f64 x n) #s(literal 2 binary64)) (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n))) (/.f64 (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 2 binary64)) (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n))))","(-.f64 (/.f64 (pow.f64 (/.f64 x n) #s(literal 3 binary64)) (fma.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n)) (pow.f64 (/.f64 x n) #s(literal 2 binary64)))) (/.f64 (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 3 binary64)) (fma.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n)) (pow.f64 (/.f64 x n) #s(literal 2 binary64)))))","(-.f64 (-.f64 (/.f64 x n) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64))","(-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n)))","(+.f64 (-.f64 (/.f64 x n) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal 1 binary64))","(+.f64 (neg.f64 (expm1.f64 (/.f64 (log.f64 x) n))) (/.f64 x n))","(+.f64 (/.f64 x n) (neg.f64 (expm1.f64 (/.f64 (log.f64 x) n))))","(+.f64 #s(literal 1 binary64) (-.f64 (/.f64 x n) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(*.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) n))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) x)","(*.f64 #s(literal 1 binary64) (/.f64 x n))","(*.f64 x (pow.f64 n #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 n x) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 n x) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 x #s(literal -1 binary64))) (neg.f64 (neg.f64 n)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 x))) (neg.f64 (neg.f64 (neg.f64 n))))","(/.f64 (*.f64 x #s(literal -1 binary64)) (neg.f64 n))","(/.f64 (neg.f64 (neg.f64 x)) (neg.f64 (neg.f64 n)))","(/.f64 (neg.f64 x) (neg.f64 n))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 n x) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 n x)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 n x))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 n x) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 n x))","(/.f64 x n)","(neg.f64 (/.f64 (neg.f64 x) n))","(neg.f64 (/.f64 x (neg.f64 n)))","(exp.f64 (*.f64 (log.f64 (/.f64 n x)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 1 binary64)) (-.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 1 binary64)))","(*.f64 (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))) (pow.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)))) (neg.f64 (-.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)))) (neg.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))","(/.f64 (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))) (-.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64)))","(/.f64 (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)))","(/.f64 (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))) (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64)))))","(/.f64 (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64)))))","(fma.f64 (pow.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n))) (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))","(fma.f64 (pow.f64 #s(literal 1 binary64) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n))) (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))","(fma.f64 (pow.f64 #s(literal 1 binary64) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))","(fma.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (*.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 1 binary64)) #s(literal -1 binary64))","(fma.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal -1 binary64))","(fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (pow.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n))) #s(literal -1 binary64))","(fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (pow.f64 #s(literal 1 binary64) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n))) #s(literal -1 binary64))","(fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (pow.f64 #s(literal 1 binary64) (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))","(fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))","(expm1.f64 (fma.f64 (log.f64 x) (/.f64 #s(literal 1/2 binary64) n) (*.f64 (log.f64 x) (/.f64 #s(literal 1/2 binary64) n))))","(expm1.f64 (*.f64 (*.f64 (log.f64 x) (/.f64 #s(literal 1/2 binary64) n)) #s(literal 2 binary64)))","(expm1.f64 (*.f64 (log.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n))) #s(literal 2 binary64)))","(expm1.f64 (*.f64 (log.f64 (*.f64 x x)) (/.f64 #s(literal 1/2 binary64) n)))","(expm1.f64 (*.f64 (log.f64 x) (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n))))","(expm1.f64 (*.f64 (log.f64 x) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n))))","(expm1.f64 (/.f64 (log.f64 x) n))","(-.f64 (/.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64))) (pow.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))) (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64)))","(-.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64))","(+.f64 #s(literal -1 binary64) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))","(+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 2 binary64)) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 2 binary64))) (pow.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)) (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n))) (-.f64 (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 2 binary64)) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)) (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 2 binary64))) (+.f64 (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)) #s(literal 2 binary64)) (*.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal -2 binary64))))) (neg.f64 (+.f64 (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)) (/.f64 #s(literal 1/2 binary64) n))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)) #s(literal 3 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 n #s(literal -3 binary64))))) (neg.f64 (+.f64 (pow.f64 (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)) #s(literal 2 binary64)) (fma.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal -2 binary64)) (*.f64 (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)) (/.f64 #s(literal 1/2 binary64) n))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 2 binary64)) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)) (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)) #s(literal 2 binary64)) (*.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal -2 binary64)))) (+.f64 (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)) (/.f64 #s(literal 1/2 binary64) n)))","(/.f64 (-.f64 (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 2 binary64))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)))","(/.f64 (-.f64 (pow.f64 (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)) #s(literal 3 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 n #s(literal -3 binary64)))) (+.f64 (pow.f64 (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)) #s(literal 2 binary64)) (fma.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal -2 binary64)) (*.f64 (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)) (/.f64 #s(literal 1/2 binary64) n)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 2 binary64)) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)) (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 2 binary64)) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 2 binary64))) (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n))))","(/.f64 (+.f64 (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)))))","(/.f64 (+.f64 (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 3 binary64))) (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)) (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n))) (-.f64 (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 2 binary64)) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)) (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 2 binary64))) (+.f64 (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n))) (-.f64 (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 2 binary64)) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)) (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 2 binary64))) (+.f64 (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 3 binary64)))))","(fma.f64 (/.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal -2 binary64))) #s(literal 1/4 binary64)) (*.f64 n n)) (pow.f64 (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (/.f64 #s(literal 1/2 binary64) n)) #s(literal -1 binary64)) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x))","(fma.f64 (fma.f64 (pow.f64 n #s(literal -6 binary64)) #s(literal 1/8 binary64) (*.f64 #s(literal -1/8 binary64) (pow.f64 n #s(literal -3 binary64)))) (pow.f64 (fma.f64 (pow.f64 n #s(literal -4 binary64)) #s(literal 1/4 binary64) (fma.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal -2 binary64)) (/.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal 3 binary64))))) #s(literal -1 binary64)) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x))","(fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (+.f64 (/.f64 #s(literal -1/2 binary64) n) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)))","(fma.f64 #s(literal -1/2 binary64) (pow.f64 (*.f64 (neg.f64 n) n) #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal -1/2 binary64) n) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) n (*.f64 (*.f64 (neg.f64 n) n) #s(literal 1/2 binary64))) (pow.f64 n #s(literal -3 binary64)) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x))","(fma.f64 (/.f64 #s(literal 1/2 binary64) n) (pow.f64 n #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal -1/2 binary64) n) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)))","(fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n))","(fma.f64 #s(literal 1/2 binary64) (/.f64 (expm1.f64 (neg.f64 (log.f64 n))) n) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x))","(fma.f64 #s(literal 1/2 binary64) (pow.f64 n #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal -1/2 binary64) n) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (/.f64 #s(literal 1/2 binary64) n) (+.f64 (/.f64 #s(literal -1/2 binary64) n) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (+.f64 (/.f64 #s(literal -1/2 binary64) n) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)))","(fma.f64 x (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)))) (/.f64 (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 2 binary64)) (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)))))","(-.f64 (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)) (/.f64 #s(literal 1/2 binary64) n))","(-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (-.f64 (/.f64 #s(literal 1/2 binary64) n) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)))","(+.f64 (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)) (/.f64 #s(literal -1/2 binary64) n))","(+.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n))","(+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x))","(+.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (+.f64 (/.f64 #s(literal -1/2 binary64) n) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)))","(*.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)))) (neg.f64 (+.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64))) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64))) (+.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))))","(/.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64))) (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64)))))","(fma.f64 (neg.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n))) (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))))","(fma.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (neg.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n))) #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))))","(fma.f64 #s(literal -1 binary64) (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))))","(-.f64 (/.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))) (/.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))","(-.f64 (/.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 3 binary64)) (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (/.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64)) (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))","(+.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))))","(+.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","#s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal -1 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 1 binary64))","(fma.f64 x (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 x (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x))","(+.f64 #s(literal 0 binary64) (log.f64 x))","(+.f64 (log.f64 x) #s(literal 0 binary64))","(log.f64 x)","(*.f64 (*.f64 (log.f64 x) #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n)) (log.f64 x))","(*.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n)) (log.f64 x))","(*.f64 (neg.f64 (log.f64 x)) (/.f64 #s(literal -1 binary64) n))","(*.f64 #s(literal 2 binary64) (log.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n))))","(*.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 (*.f64 x x)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (pow.f64 (log.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (log.f64 x))","(*.f64 (log.f64 x) (pow.f64 n #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (log.f64 x) n))","(pow.f64 (/.f64 (/.f64 n (log.f64 x)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 n (log.f64 x)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (log.f64 x) #s(literal -1 binary64))) (neg.f64 (neg.f64 n)))","(/.f64 (neg.f64 (*.f64 (log.f64 x) #s(literal 1 binary64))) (neg.f64 n))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (log.f64 x)))) (neg.f64 (neg.f64 (neg.f64 n))))","(/.f64 (*.f64 (log.f64 x) #s(literal -1 binary64)) (neg.f64 n))","(/.f64 (*.f64 (log.f64 x) #s(literal 1 binary64)) n)","(/.f64 (neg.f64 (neg.f64 (log.f64 x))) (neg.f64 (neg.f64 n)))","(/.f64 (neg.f64 (log.f64 x)) (neg.f64 n))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 n (log.f64 x)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 n (log.f64 x))))","(/.f64 (log.f64 x) n)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 n (log.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 n (log.f64 x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 n (log.f64 x)))","(neg.f64 (/.f64 (neg.f64 (log.f64 x)) n))","(neg.f64 (/.f64 (log.f64 x) (neg.f64 n)))","(fma.f64 (*.f64 (log.f64 x) #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n)) (log.f64 x) #s(literal 0 binary64))","(fma.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n)) (log.f64 x) #s(literal 0 binary64))","(fma.f64 (neg.f64 (log.f64 x)) (/.f64 #s(literal -1 binary64) n) #s(literal 0 binary64))","(fma.f64 #s(literal 2 binary64) (log.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n))) #s(literal 0 binary64))","(fma.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 (*.f64 x x)) #s(literal 0 binary64))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (pow.f64 (log.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (log.f64 x) #s(literal 0 binary64))","(fma.f64 (log.f64 x) (pow.f64 n #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) (/.f64 (log.f64 x) n) #s(literal 0 binary64))","(exp.f64 (*.f64 (log.f64 (/.f64 n (log.f64 x))) #s(literal -1 binary64)))","(+.f64 (log.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n))) (log.f64 (*.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 1 binary64))))","(+.f64 (log.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n))) (log.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n))))","(+.f64 #s(literal 0 binary64) (/.f64 (log.f64 x) n))","(+.f64 (/.f64 (log.f64 x) n) #s(literal 0 binary64))","(log.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)) #s(literal 2 binary64)) (/.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal 4 binary64)))) (pow.f64 (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)) #s(literal 3 binary64)) (*.f64 (pow.f64 n #s(literal -6 binary64)) #s(literal 1/8 binary64))) (pow.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n))) (pow.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n))) (-.f64 (pow.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)) #s(literal 2 binary64)) (/.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal 4 binary64))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n))) (pow.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)) #s(literal 2 binary64))) (-.f64 (pow.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)) #s(literal 3 binary64)) (*.f64 (pow.f64 n #s(literal -6 binary64)) #s(literal 1/8 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 #s(literal 1/3 binary64) n) #s(literal 2 binary64)) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) (*.f64 n n)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) (*.f64 n n)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 n #s(literal -3 binary64)) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) (*.f64 n n)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 n #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) (*.f64 n n)) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) (*.f64 n n)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)) #s(literal 2 binary64)) (/.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal 4 binary64)))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)) #s(literal 3 binary64)) (*.f64 (pow.f64 n #s(literal -6 binary64)) #s(literal 1/8 binary64))))) (neg.f64 (neg.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n))) (pow.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (/.f64 #s(literal 1/3 binary64) n) #s(literal 2 binary64)) (*.f64 #s(literal 1/36 binary64) (pow.f64 n #s(literal -6 binary64)))) (*.f64 (neg.f64 n) n)) (*.f64 (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/6 binary64) (*.f64 n n))) n) #s(literal -1/2 binary64)))) (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/6 binary64) (*.f64 n n))) n) (*.f64 (neg.f64 n) n))))","(/.f64 (neg.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (/.f64 #s(literal 1/3 binary64) n) #s(literal 2 binary64)) (*.f64 #s(literal 1/36 binary64) (pow.f64 n #s(literal -6 binary64)))) n) (*.f64 (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/6 binary64) (*.f64 n n))) n) (/.f64 #s(literal 1/2 binary64) n)))) (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/6 binary64) (*.f64 n n))) n) n)))","(/.f64 (neg.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (/.f64 #s(literal 1/3 binary64) n) #s(literal 2 binary64)) (*.f64 #s(literal 1/36 binary64) (pow.f64 n #s(literal -6 binary64)))) (*.f64 n n)) (*.f64 (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/6 binary64) (*.f64 n n))) n) #s(literal 1/2 binary64)))) (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/6 binary64) (*.f64 n n))) n) (*.f64 n n))))","(/.f64 (neg.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (/.f64 #s(literal 1/3 binary64) n) #s(literal 2 binary64)) (*.f64 #s(literal 1/36 binary64) (pow.f64 n #s(literal -6 binary64)))) (*.f64 (*.f64 n n) #s(literal 2 binary64))) (*.f64 (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/6 binary64) (*.f64 n n))) n) #s(literal 1 binary64)))) (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/6 binary64) (*.f64 n n))) n) (*.f64 (*.f64 n n) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -9 binary64)) #s(literal 1/216 binary64) (pow.f64 (/.f64 #s(literal 1/3 binary64) n) #s(literal 3 binary64))) (*.f64 (neg.f64 n) n)) (*.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 n #s(literal -2 binary64)) (-.f64 (*.f64 #s(literal 1/36 binary64) (pow.f64 n #s(literal -6 binary64))) (/.f64 #s(literal 1/18 binary64) (pow.f64 n #s(literal 4 binary64))))) #s(literal -1/2 binary64)))) (neg.f64 (*.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 n #s(literal -2 binary64)) (-.f64 (*.f64 #s(literal 1/36 binary64) (pow.f64 n #s(literal -6 binary64))) (/.f64 #s(literal 1/18 binary64) (pow.f64 n #s(literal 4 binary64))))) (*.f64 (neg.f64 n) n))))","(/.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -9 binary64)) #s(literal 1/216 binary64) (pow.f64 (/.f64 #s(literal 1/3 binary64) n) #s(literal 3 binary64))) n) (*.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 n #s(literal -2 binary64)) (-.f64 (*.f64 #s(literal 1/36 binary64) (pow.f64 n #s(literal -6 binary64))) (/.f64 #s(literal 1/18 binary64) (pow.f64 n #s(literal 4 binary64))))) (/.f64 #s(literal 1/2 binary64) n)))) (neg.f64 (*.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 n #s(literal -2 binary64)) (-.f64 (*.f64 #s(literal 1/36 binary64) (pow.f64 n #s(literal -6 binary64))) (/.f64 #s(literal 1/18 binary64) (pow.f64 n #s(literal 4 binary64))))) n)))","(/.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -9 binary64)) #s(literal 1/216 binary64) (pow.f64 (/.f64 #s(literal 1/3 binary64) n) #s(literal 3 binary64))) (*.f64 n n)) (*.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 n #s(literal -2 binary64)) (-.f64 (*.f64 #s(literal 1/36 binary64) (pow.f64 n #s(literal -6 binary64))) (/.f64 #s(literal 1/18 binary64) (pow.f64 n #s(literal 4 binary64))))) #s(literal 1/2 binary64)))) (neg.f64 (*.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 n #s(literal -2 binary64)) (-.f64 (*.f64 #s(literal 1/36 binary64) (pow.f64 n #s(literal -6 binary64))) (/.f64 #s(literal 1/18 binary64) (pow.f64 n #s(literal 4 binary64))))) (*.f64 n n))))","(/.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -9 binary64)) #s(literal 1/216 binary64) (pow.f64 (/.f64 #s(literal 1/3 binary64) n) #s(literal 3 binary64))) (*.f64 (*.f64 n n) #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 n #s(literal -2 binary64)) (-.f64 (*.f64 #s(literal 1/36 binary64) (pow.f64 n #s(literal -6 binary64))) (/.f64 #s(literal 1/18 binary64) (pow.f64 n #s(literal 4 binary64))))) #s(literal 1 binary64)))) (neg.f64 (*.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 n #s(literal -2 binary64)) (-.f64 (*.f64 #s(literal 1/36 binary64) (pow.f64 n #s(literal -6 binary64))) (/.f64 #s(literal 1/18 binary64) (pow.f64 n #s(literal 4 binary64))))) (*.f64 (*.f64 n n) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1/3 binary64) (*.f64 #s(literal 1/6 binary64) n)) (*.f64 (neg.f64 n) n)) (*.f64 (pow.f64 n #s(literal 4 binary64)) #s(literal -1/2 binary64)))) (neg.f64 (neg.f64 (pow.f64 n #s(literal 6 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1/3 binary64) (*.f64 #s(literal 1/6 binary64) n)) n) (*.f64 (pow.f64 n #s(literal 4 binary64)) (/.f64 #s(literal 1/2 binary64) n)))) (neg.f64 (*.f64 (pow.f64 n #s(literal 4 binary64)) n)))","(/.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1/3 binary64) (*.f64 #s(literal 1/6 binary64) n)) (*.f64 n n)) (*.f64 (pow.f64 n #s(literal 4 binary64)) #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 n #s(literal 6 binary64))))","(/.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1/3 binary64) (*.f64 #s(literal 1/6 binary64) n)) (*.f64 (*.f64 n n) #s(literal 2 binary64))) (*.f64 (pow.f64 n #s(literal 4 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (pow.f64 n #s(literal 4 binary64)) (*.f64 (*.f64 n n) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal 1/3 binary64) n) #s(literal 2 binary64)) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) (*.f64 n n)) #s(literal 2 binary64))) (-.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) (*.f64 n n))))","(/.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 n #s(literal -3 binary64)) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) (*.f64 n n)) #s(literal 3 binary64))) (fma.f64 #s(literal 1/9 binary64) (pow.f64 n #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) (*.f64 n n)) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) (*.f64 n n))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)) #s(literal 2 binary64)) (/.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal 4 binary64))))) (neg.f64 (-.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)) (*.f64 #s(literal -1/2 binary64) (pow.f64 n #s(literal -2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)) #s(literal 2 binary64)) (/.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal 4 binary64))))) (neg.f64 (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)) #s(literal 3 binary64)) (*.f64 (pow.f64 n #s(literal -6 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (+.f64 (pow.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)) #s(literal 2 binary64)) (-.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal 4 binary64))) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)) (*.f64 #s(literal -1/2 binary64) (pow.f64 n #s(literal -2 binary64))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)) #s(literal 3 binary64)) (*.f64 (pow.f64 n #s(literal -6 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n))) (pow.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (/.f64 #s(literal 1/3 binary64) n) #s(literal 2 binary64)) (*.f64 #s(literal 1/36 binary64) (pow.f64 n #s(literal -6 binary64)))) (*.f64 (neg.f64 n) n)) (*.f64 (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/6 binary64) (*.f64 n n))) n) #s(literal -1/2 binary64))) (*.f64 (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/6 binary64) (*.f64 n n))) n) (*.f64 (neg.f64 n) n)))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (/.f64 #s(literal 1/3 binary64) n) #s(literal 2 binary64)) (*.f64 #s(literal 1/36 binary64) (pow.f64 n #s(literal -6 binary64)))) n) (*.f64 (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/6 binary64) (*.f64 n n))) n) (/.f64 #s(literal 1/2 binary64) n))) (*.f64 (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/6 binary64) (*.f64 n n))) n) n))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (/.f64 #s(literal 1/3 binary64) n) #s(literal 2 binary64)) (*.f64 #s(literal 1/36 binary64) (pow.f64 n #s(literal -6 binary64)))) (*.f64 n n)) (*.f64 (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/6 binary64) (*.f64 n n))) n) #s(literal 1/2 binary64))) (*.f64 (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/6 binary64) (*.f64 n n))) n) (*.f64 n n)))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (/.f64 #s(literal 1/3 binary64) n) #s(literal 2 binary64)) (*.f64 #s(literal 1/36 binary64) (pow.f64 n #s(literal -6 binary64)))) (*.f64 (*.f64 n n) #s(literal 2 binary64))) (*.f64 (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/6 binary64) (*.f64 n n))) n) #s(literal 1 binary64))) (*.f64 (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/6 binary64) (*.f64 n n))) n) (*.f64 (*.f64 n n) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -9 binary64)) #s(literal 1/216 binary64) (pow.f64 (/.f64 #s(literal 1/3 binary64) n) #s(literal 3 binary64))) (*.f64 (neg.f64 n) n)) (*.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 n #s(literal -2 binary64)) (-.f64 (*.f64 #s(literal 1/36 binary64) (pow.f64 n #s(literal -6 binary64))) (/.f64 #s(literal 1/18 binary64) (pow.f64 n #s(literal 4 binary64))))) #s(literal -1/2 binary64))) (*.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 n #s(literal -2 binary64)) (-.f64 (*.f64 #s(literal 1/36 binary64) (pow.f64 n #s(literal -6 binary64))) (/.f64 #s(literal 1/18 binary64) (pow.f64 n #s(literal 4 binary64))))) (*.f64 (neg.f64 n) n)))","(/.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -9 binary64)) #s(literal 1/216 binary64) (pow.f64 (/.f64 #s(literal 1/3 binary64) n) #s(literal 3 binary64))) n) (*.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 n #s(literal -2 binary64)) (-.f64 (*.f64 #s(literal 1/36 binary64) (pow.f64 n #s(literal -6 binary64))) (/.f64 #s(literal 1/18 binary64) (pow.f64 n #s(literal 4 binary64))))) (/.f64 #s(literal 1/2 binary64) n))) (*.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 n #s(literal -2 binary64)) (-.f64 (*.f64 #s(literal 1/36 binary64) (pow.f64 n #s(literal -6 binary64))) (/.f64 #s(literal 1/18 binary64) (pow.f64 n #s(literal 4 binary64))))) n))","(/.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -9 binary64)) #s(literal 1/216 binary64) (pow.f64 (/.f64 #s(literal 1/3 binary64) n) #s(literal 3 binary64))) (*.f64 n n)) (*.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 n #s(literal -2 binary64)) (-.f64 (*.f64 #s(literal 1/36 binary64) (pow.f64 n #s(literal -6 binary64))) (/.f64 #s(literal 1/18 binary64) (pow.f64 n #s(literal 4 binary64))))) #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 n #s(literal -2 binary64)) (-.f64 (*.f64 #s(literal 1/36 binary64) (pow.f64 n #s(literal -6 binary64))) (/.f64 #s(literal 1/18 binary64) (pow.f64 n #s(literal 4 binary64))))) (*.f64 n n)))","(/.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -9 binary64)) #s(literal 1/216 binary64) (pow.f64 (/.f64 #s(literal 1/3 binary64) n) #s(literal 3 binary64))) (*.f64 (*.f64 n n) #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 n #s(literal -2 binary64)) (-.f64 (*.f64 #s(literal 1/36 binary64) (pow.f64 n #s(literal -6 binary64))) (/.f64 #s(literal 1/18 binary64) (pow.f64 n #s(literal 4 binary64))))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 n #s(literal -2 binary64)) (-.f64 (*.f64 #s(literal 1/36 binary64) (pow.f64 n #s(literal -6 binary64))) (/.f64 #s(literal 1/18 binary64) (pow.f64 n #s(literal 4 binary64))))) (*.f64 (*.f64 n n) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1/3 binary64) (*.f64 #s(literal 1/6 binary64) n)) (*.f64 (neg.f64 n) n)) (*.f64 (pow.f64 n #s(literal 4 binary64)) #s(literal -1/2 binary64))) (neg.f64 (pow.f64 n #s(literal 6 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1/3 binary64) (*.f64 #s(literal 1/6 binary64) n)) n) (*.f64 (pow.f64 n #s(literal 4 binary64)) (/.f64 #s(literal 1/2 binary64) n))) (*.f64 (pow.f64 n #s(literal 4 binary64)) n))","(/.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1/3 binary64) (*.f64 #s(literal 1/6 binary64) n)) (*.f64 n n)) (*.f64 (pow.f64 n #s(literal 4 binary64)) #s(literal 1/2 binary64))) (pow.f64 n #s(literal 6 binary64)))","(/.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1/3 binary64) (*.f64 #s(literal 1/6 binary64) n)) (*.f64 (*.f64 n n) #s(literal 2 binary64))) (*.f64 (pow.f64 n #s(literal 4 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 n #s(literal 4 binary64)) (*.f64 (*.f64 n n) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)) #s(literal 2 binary64)) (/.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal 4 binary64)))) (-.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)) (*.f64 #s(literal -1/2 binary64) (pow.f64 n #s(literal -2 binary64)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)) #s(literal 2 binary64)) (/.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal 4 binary64)))) (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)) #s(literal 3 binary64)) (*.f64 (pow.f64 n #s(literal -6 binary64)) #s(literal 1/8 binary64))) (+.f64 (pow.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)) #s(literal 2 binary64)) (-.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal 4 binary64))) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)) (*.f64 #s(literal -1/2 binary64) (pow.f64 n #s(literal -2 binary64)))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)) #s(literal 3 binary64)) (*.f64 (pow.f64 n #s(literal -6 binary64)) #s(literal 1/8 binary64))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n))) (pow.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n))) (-.f64 (pow.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)) #s(literal 2 binary64)) (/.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal 4 binary64)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n))) (pow.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)) #s(literal 2 binary64))) (-.f64 (pow.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)) #s(literal 3 binary64)) (*.f64 (pow.f64 n #s(literal -6 binary64)) #s(literal 1/8 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n))) (-.f64 (pow.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)) #s(literal 2 binary64)) (/.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n))) (pow.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)) #s(literal 2 binary64))) (-.f64 (pow.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)) #s(literal 3 binary64)) (*.f64 (pow.f64 n #s(literal -6 binary64)) #s(literal 1/8 binary64)))))","(fma.f64 (pow.f64 n #s(literal -3/2 binary64)) (pow.f64 (/.f64 (pow.f64 n #s(literal 3/2 binary64)) #s(literal 1/6 binary64)) #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n))","(fma.f64 (pow.f64 n #s(literal -3/2 binary64)) (pow.f64 (/.f64 (pow.f64 n #s(literal 3/2 binary64)) #s(literal 1/6 binary64)) #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal 1/3 binary64) n) (*.f64 #s(literal -1/2 binary64) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 (-.f64 (pow.f64 (/.f64 #s(literal 1/3 binary64) n) #s(literal 2 binary64)) (*.f64 #s(literal 1/36 binary64) (pow.f64 n #s(literal -6 binary64)))) (pow.f64 (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/6 binary64) (*.f64 n n))) n) #s(literal -1 binary64)) (*.f64 #s(literal -1/2 binary64) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 (pow.f64 n #s(literal -2 binary64)) (pow.f64 (/.f64 n #s(literal 1/6 binary64)) #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n))","(fma.f64 (pow.f64 n #s(literal -2 binary64)) (pow.f64 (/.f64 n #s(literal 1/6 binary64)) #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal 1/3 binary64) n) (*.f64 #s(literal -1/2 binary64) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n))","(fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (+.f64 (/.f64 #s(literal 1/3 binary64) n) (*.f64 #s(literal -1/2 binary64) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 (fma.f64 (pow.f64 n #s(literal -9 binary64)) #s(literal 1/216 binary64) (pow.f64 (/.f64 #s(literal 1/3 binary64) n) #s(literal 3 binary64))) (pow.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 n #s(literal -2 binary64)) (-.f64 (*.f64 #s(literal 1/36 binary64) (pow.f64 n #s(literal -6 binary64))) (/.f64 #s(literal 1/18 binary64) (pow.f64 n #s(literal 4 binary64))))) #s(literal -1 binary64)) (*.f64 #s(literal -1/2 binary64) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 #s(literal -1/6 binary64) (pow.f64 (pow.f64 (neg.f64 n) #s(literal 3 binary64)) #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n))","(fma.f64 #s(literal -1/6 binary64) (pow.f64 (pow.f64 (neg.f64 n) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal 1/3 binary64) n) (*.f64 #s(literal -1/2 binary64) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 #s(literal -1/2 binary64) (pow.f64 n #s(literal -2 binary64)) (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)))","(fma.f64 #s(literal -1/3 binary64) (/.f64 #s(literal -1 binary64) n) (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) (*.f64 n n)))","(fma.f64 (fma.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1/3 binary64) (*.f64 #s(literal 1/6 binary64) n)) (pow.f64 n #s(literal -4 binary64)) (*.f64 #s(literal -1/2 binary64) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)))","(fma.f64 #s(literal 1/2 binary64) (neg.f64 (pow.f64 n #s(literal -2 binary64))) (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)))","(fma.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal -3 binary64)) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n))","(fma.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal -3 binary64)) (+.f64 (/.f64 #s(literal 1/3 binary64) n) (*.f64 #s(literal -1/2 binary64) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 #s(literal 1/3 binary64) (pow.f64 n #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) (*.f64 n n)))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (/.f64 (*.f64 n n) #s(literal 1/6 binary64)) #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (/.f64 (*.f64 n n) #s(literal 1/6 binary64)) #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal 1/3 binary64) n) (*.f64 #s(literal -1/2 binary64) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1/3 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) (*.f64 n n)))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))) (+.f64 (/.f64 #s(literal 1/3 binary64) n) (*.f64 #s(literal -1/2 binary64) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/3 binary64) n) (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) (*.f64 n n)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)) #s(literal 2 binary64)) (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)))) (/.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal 4 binary64))) (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)) #s(literal 3 binary64)) (fma.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n))) (pow.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)) #s(literal 2 binary64)))) (/.f64 (*.f64 (pow.f64 n #s(literal -6 binary64)) #s(literal 1/8 binary64)) (fma.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n))) (pow.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)) #s(literal 2 binary64)))))","(-.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n)))","(+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) (*.f64 n n)) (/.f64 #s(literal 1/3 binary64) n))","(+.f64 (*.f64 #s(literal -1/2 binary64) (pow.f64 n #s(literal -2 binary64))) (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)))","(+.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 #s(literal 1/3 binary64) n)) (*.f64 #s(literal -1/2 binary64) (pow.f64 n #s(literal -2 binary64))))","(+.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n))","(+.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))) (+.f64 (/.f64 #s(literal 1/3 binary64) n) (*.f64 #s(literal -1/2 binary64) (pow.f64 n #s(literal -2 binary64)))))","(+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) (*.f64 n n)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":394.531982421875,"type":"rewrite"},{"compiler":[[38920,3860]],"memory":[[8309184,89146928]],"time":158.69384765625,"type":"eval"},{"alts":[["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","fresh",47.736311401776454,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 #s(approx (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/.f64 (fma.f64 #s(literal -1/3 binary64) x (-.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 #s(literal 1/6 binary64) (/.f64 x n) (fma.f64 #s(literal -1/2 binary64) x #s(literal 1/2 binary64))) n))) (neg.f64 n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","fresh",43.24802113637191,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","done",38.47039794086707,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (pow.f64 x (fma.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n) #s(literal -1 binary64))) n))","fresh",28.279288532339677,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (*.f64 n x)))","fresh",28.342342604829426,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 (exp.f64 (neg.f64 (log.f64 x))) (/.f64 #s(literal -1 binary64) n)) x) n))","fresh",28.13424510185772,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","done",28.13424510185772,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) n))","fresh",25.56659442928317,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (pow.f64 (/.f64 x n) #s(literal 3 binary64)) (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 3 binary64))) (fma.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n)) (pow.f64 (/.f64 x n) #s(literal 2 binary64)))))","fresh",48.46339812466766,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (*.f64 n (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","fresh",25.587221743322075,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x)))))","fresh",25.569841845406692,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (*.f64 (log1p.f64 x) (/.f64 n (log.f64 x))) n) (*.f64 n (/.f64 n (log.f64 x)))))","fresh",32.304809402112646,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (*.f64 (log1p.f64 x) n) (*.f64 n (log.f64 x))) (*.f64 n n)))","fresh",32.106754795988216,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (*.f64 x (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))) (*.f64 n (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))))) (*.f64 n (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))))","fresh",39.75931528790131,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (pow.f64 n #s(literal -1 binary64))) (+.f64 (log.f64 x) (log1p.f64 x))))","fresh",25.581540503114667,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))","fresh",25.734748441915777,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) n))","next",25.7423278181046,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) n))","fresh",48.89805773068464,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x)) (neg.f64 x))) n))","fresh",48.879820355818374,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","fresh",35.44076317384705,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","next",40.089371255806995,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","fresh",45.4615753340363,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","fresh",45.2776438963686,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))))","next",25.570676744904993,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) n)))","fresh",28.330240565269197,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n))))","done",31.434726469522207,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 (*.f64 x x))))))","fresh",40.149281875012065,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","next",25.391180519719384,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64))))","fresh",25.62032939298524,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (*.f64 n x))))","fresh",28.336151345060983,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))))","next",25.560572208127752,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (/.f64 #s(literal -1 binary64) n)))","fresh",25.560572192178654,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (/.f64 #s(literal 1/2 binary64) n) x)) x)))","fresh",48.887528129092814,"binary64"]],"compiler":[[31,18],[69,41],[15,11],[24,16],[23,14],[26,17],[23,14],[33,20],[48,22],[38,21],[31,18],[30,16],[27,16],[59,27],[33,20],[23,15],[22,14],[31,20],[40,27],[35,23],[27,17],[28,17],[27,17],[23,15],[25,16],[23,14],[27,17],[42,24],[35,21],[29,15],[27,17],[24,16],[35,22],[31,18],[69,41],[24,16],[23,14],[26,17],[33,20],[48,22],[38,21],[31,18],[30,16],[27,16],[59,27],[33,20],[23,15],[22,14],[31,20],[40,27],[35,23],[27,17],[28,17],[27,17],[23,15],[25,16],[27,17],[42,24],[35,21],[29,15],[27,17],[24,16],[35,22]],"count":[[914,33]],"kept":[{"done":[0,0],"fresh":[3,1],"new":[906,29],"picked":[5,3]}],"memory":[[-10016208,50599520]],"min-error":[[0.025167748030659097,"binary64"]],"time":61.550048828125,"type":"prune"},{"egraph":[[0,8053,345,0.07976592],[18,7437,345,0.034688029],[17,7437,345,0.052117145],[16,7437,345,0.045380054],[15,7427,345,0.043697657],[14,7405,345,0.060540709],[13,7098,345,0.052545044],[12,7086,345,0.038738301],[11,7054,345,0.036024588],[10,7009,345,0.038593884],[9,6706,345,0.030909275],[8,5445,345,0.034429743],[7,4053,345,0.024195553],[6,2408,345,0.019525092],[5,1118,345,0.010747209],[4,490,345,0.006535234],[3,243,345,0.00286336],[2,155,351,0.001202249],[1,102,355,0.000785017],[0,72,363,0.000592474],[0,46,375,0.000717703]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))","n","(-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))","(pow.f64 (log1p.f64 x) #s(literal 3 binary64))","(log1p.f64 x)","x","#s(literal 3 binary64)","(pow.f64 (log.f64 x) #s(literal 3 binary64))","(log.f64 x)","#s(literal -1 binary64)","(pow.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))","(fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))","(+.f64 (log.f64 x) (log1p.f64 x))","(pow.f64 (log1p.f64 x) #s(literal 2 binary64))","#s(literal 2 binary64)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","(/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n)","#s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","n","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) n))","(/.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) n)","(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x))","(/.f64 (+.f64 #s(literal 1 binary64) x) x)","(+.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","n","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))))","#s(literal 1 binary64)","(/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))","n","(-.f64 (log1p.f64 x) (log.f64 x))","(log1p.f64 x)","x","(log.f64 x)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(pow.f64 n #s(literal -1 binary64))","n","#s(literal -1 binary64)","(pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))","(-.f64 (log1p.f64 x) (log.f64 x))","(log1p.f64 x)","x","(log.f64 x)"]],"locations":[["(pow.f64 n #s(literal -1 binary64))","cost-diff",0],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))))","cost-diff",0],["(*.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","cost-diff",2],["(pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","cost-diff",4],["(-.f64 (log1p.f64 x) (log.f64 x))","cost-diff",0],["(/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))","cost-diff",0],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))))","cost-diff",2],["(/.f64 (+.f64 #s(literal 1 binary64) x) x)","cost-diff",0],["(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x))","cost-diff",0],["(/.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) n)","cost-diff",0],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) n))","cost-diff",0],["(/.f64 #s(literal 1 binary64) x)","cost-diff",0],["#s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x))","cost-diff",0],["(/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n)","cost-diff",0],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","cost-diff",0],["(/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))","cost-diff",0],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","cost-diff",0],["(pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))","cost-diff",2],["(*.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","cost-diff",2]],"memory":[[389376,33913568]],"method":["egg-herbie"],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))","(pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n)","(/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))","n","(-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))","(pow.f64 (log1p.f64 x) #s(literal 3 binary64))","(log1p.f64 x)","x","#s(literal 3 binary64)","(pow.f64 (log.f64 x) #s(literal 3 binary64))","(log.f64 x)","#s(literal -1 binary64)","(pow.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))","(pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))","(fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))","(fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))","(+.f64 (log.f64 x) (log1p.f64 x))","(pow.f64 (log1p.f64 x) #s(literal 2 binary64))","#s(literal 2 binary64)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","(/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n)","#s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","n","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) n))","(/.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) n)","(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x))","(/.f64 (+.f64 #s(literal 1 binary64) x) x)","(+.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","n","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(/.f64 #s(literal 1 binary64) (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","#s(literal 1 binary64)","(/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))","n","(-.f64 (log1p.f64 x) (log.f64 x))","(log1p.f64 x)","x","(log.f64 x)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(pow.f64 n #s(literal -1 binary64))","n","#s(literal -1 binary64)","(pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(-.f64 (log1p.f64 x) (log.f64 x))","(pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))","(-.f64 (log1p.f64 x) (log.f64 x))","(log1p.f64 x)","x","(log.f64 x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":725.987060546875,"type":"simplify"},{"compiler":[[348,39]],"locations":[["(pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))","accuracy",0.1875],["(*.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","accuracy",0.309257519536884],["(-.f64 (log1p.f64 x) (log.f64 x))","accuracy",24.90619381778968],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))))","accuracy",31.130506076632997],["(/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))","accuracy",0.25390625],["(/.f64 #s(literal 1 binary64) (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))))","accuracy",0.27193246032857504],["(-.f64 (log1p.f64 x) (log.f64 x))","accuracy",24.90619381778968],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))))","accuracy",31.130506076632997],["(+.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(/.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) n)","accuracy",0.24609375],["(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x))","accuracy",24.792921017824323],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) n))","accuracy",31.130506076632997],["(/.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n)","accuracy",0.24609375],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","accuracy",31.130506076632997],["#s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x))","accuracy",35.648263958446776],["(*.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","accuracy",0.5443612271905393],["(pow.f64 (log.f64 x) #s(literal 3 binary64))","accuracy",0.7739603028217029],["(-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))","accuracy",24.906298138304223],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","accuracy",31.130506076632997]],"memory":[[1920896,70230304]],"mixsample":[[23.797607421875,"ival-div",0],[25.57666015625,"adjust",800],[1.491455078125,"ival-div",400],[22.502197265625,"ival-pow",1600],[0.490478515625,"ival-div",1600],[0.182373046875,"ival-assert",0],[7.85302734375,"ival-sub",0],[0.07177734375,"ival-log1p",800],[2.572998046875,"ival-log",1600],[0.0078125,"ival-sub",400],[4.168212890625,"ival-log1p",400],[0.088134765625,"ival-pow",800],[75.37744140625,"ival-pow",0],[8.9716796875,"ival-add",0],[0.004150390625,"ival-sub",800],[0.809814453125,"ival-add",400],[4.23291015625,"ival-log1p",0],[0.31689453125,"ival-div",2000],[27.718505859375,"ival-pow",400],[5.34033203125,"ival-pow2",0],[0.067138671875,"ival-div",2400],[0.203369140625,"ival-add",1200],[2.979736328125,"ival-log1p",1600],[11.331787109375,"adjust",2000],[0.531005859375,"ival-div",1200],[9.93115234375,"ival-mult",0],[0.246826171875,"ival-add",1600],[0.006103515625,"ival-mult",400],[3.213623046875,"ival-log",400],[0.488525390625,"ival-div",800],[20.78466796875,"ival-log",0],[0.296875,"ival-true",0],[0.05517578125,"ival-log",800],[0.6689453125,"exact",0],[0.514892578125,"ival-add",800]],"outcomes":[[126.20849609375,1,"valid",119],[172.361572265625,2,"valid",96],[21.02783203125,0,"valid",41]],"time":408.48095703125,"type":"localize"},{"count":[[24,126]],"inputs":[["(*.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","(/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n)","#s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) n))","(/.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) n)","(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x))","(/.f64 (+.f64 #s(literal 1 binary64) x) x)","(/.f64 #s(literal 1 binary64) (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))))","(/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))","(-.f64 (log1p.f64 x) (log.f64 x))","(pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))))","(pow.f64 n #s(literal -1 binary64))","(-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))","(pow.f64 (log.f64 x) #s(literal 3 binary64))","(+.f64 #s(literal 1 binary64) x)","(pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))"]],"memory":[[1194176,101008960]],"outputs":[["(* -1 (/ (log x) n))","(+ (* -1 (/ (log x) n)) (/ x n))","(+ (* -1 (/ (log x) n)) (* x (+ (* -1 (* x (+ (* -1 (/ (+ 1 (* -1/2 (log x))) (* n (log x)))) (/ 1 (* n (log x)))))) (/ 1 n))))","(+ (* -1 (/ (log x) n)) (* x (+ (* x (- (* x (- (* 1/2 (/ 1 (* n (log x)))) (+ (* -1 (/ (+ (* -1 (/ (+ 1 (* -1/2 (log x))) (* n (log x)))) (/ 1 (* n (log x)))) (log x))) (* -1 (/ (- (* 1/3 (log x)) 1) (* n (log x))))))) (+ (* -1 (/ (+ 1 (* -1/2 (log x))) (* n (log x)))) (/ 1 (* n (log x)))))) (/ 1 n))))","(* -1 (/ (pow (log x) 3) n))","(+ (* -1 (/ (pow (log x) 3) n)) (/ (pow x 3) n))","(+ (* -1 (/ (pow (log x) 3) n)) (* (pow x 3) (+ (* -3/2 (/ x n)) (/ 1 n))))","(+ (* -1 (/ (pow (log x) 3) n)) (* (pow x 3) (+ (* x (- (* 7/4 (/ x n)) (* 3/2 (/ 1 n)))) (/ 1 n))))","(- 1 (exp (/ (log x) n)))","(- (+ 1 (/ x n)) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(* -1 (/ n (pow (log x) 3)))","(+ (* -1 (/ n (pow (log x) 3))) (* -1 (/ (* n (pow x 3)) (pow (log x) 6))))","(+ (* -1 (/ n (pow (log x) 3))) (* (pow x 3) (- (* 3/2 (/ (* n x) (pow (log x) 6))) (/ n (pow (log x) 6)))))","(+ (* -1 (/ n (pow (log x) 3))) (* (pow x 3) (- (* x (- (* -7/4 (/ (* n x) (pow (log x) 6))) (* -3/2 (/ n (pow (log x) 6))))) (/ n (pow (log x) 6)))))","(+ (* -1 (/ (log x) n)) (* x (+ (* -1/2 (/ x n)) (/ 1 n))))","(+ (* -1 (/ (log x) n)) (* x (+ (* x (- (* 1/3 (/ x n)) (* 1/2 (/ 1 n)))) (/ 1 n))))","(* -1 (log x))","(- x (log x))","(- (* x (+ 1 (* -1/2 x))) (log x))","(- (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) (log x))","(/ 1 x)","(+ x (* -1 (log x)))","(+ (* -1 (log x)) (* x (+ 1 (* -1/2 x))))","(+ (* -1 (log x)) (* x (+ 1 (* x (- (* 1/3 x) 1/2)))))","(/ (+ 1 x) x)","(* -1 (/ n (log x)))","(+ (* -1 (/ n (log x))) (* -1 (/ (* n x) (pow (log x) 2))))","(+ (* -1 (/ n (log x))) (* x (- (* -1 (* x (+ (* -1/2 (/ n (pow (log x) 2))) (/ n (pow (log x) 3))))) (/ n (pow (log x) 2)))))","(+ (* -1 (/ n (log x))) (* x (- (* x (- (* -1 (* x (+ (* -1 (/ n (pow (log x) 3))) (+ (* 1/3 (/ n (pow (log x) 2))) (/ n (pow (log x) 4)))))) (+ (* -1/2 (/ n (pow (log x) 2))) (/ n (pow (log x) 3))))) (/ n (pow (log x) 2)))))","(* -1 (pow (log x) 3))","(- (pow x 3) (pow (log x) 3))","(- (* (pow x 3) (+ 1 (* -3/2 x))) (pow (log x) 3))","(- (* (pow x 3) (+ 1 (* x (- (* 7/4 x) 3/2)))) (pow (log x) 3))","(pow (log x) 3)","1","(+ 1 x)","(/ -1 (log x))","(- (* -1 (/ x (pow (log x) 2))) (/ 1 (log x)))","(- (* x (- (* x (- (* 1/2 (/ 1 (pow (log x) 2))) (/ 1 (pow (log x) 3)))) (/ 1 (pow (log x) 2)))) (/ 1 (log x)))","(- (* x (- (* x (- (+ (* 1/2 (/ 1 (pow (log x) 2))) (* x (- (* 1/2 (/ 1 (pow (log x) 3))) (+ (* -1 (/ (- (* 1/2 (/ 1 (pow (log x) 2))) (/ 1 (pow (log x) 3))) (log x))) (* 1/3 (/ 1 (pow (log x) 2))))))) (/ 1 (pow (log x) 3)))) (/ 1 (pow (log x) 2)))) (/ 1 (log x)))","(/ 1 (* n x))","(/ (- (+ (* -1 (/ (* (log (/ 1 x)) (+ 1 (log (/ 1 x)))) (* n (* x (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* -1/2 (/ (pow (log (/ 1 x)) 2) (* n (* x (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (/ 1 n))) (* -1 (/ (log (/ 1 x)) (* n (* x (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))))) x)","(/ (- (+ (* -1 (/ (* (log (/ 1 x)) (+ 1 (log (/ 1 x)))) (* n (* x (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* -1 (/ (* (log (/ 1 x)) (- (* -2/3 (log (/ 1 x))) 1)) (* n (* (pow x 2) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* -1/2 (/ (pow (log (/ 1 x)) 2) (* n (* x (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* 1/3 (/ (pow (log (/ 1 x)) 2) (* n (* (pow x 2) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* 2 (/ (log (/ 1 x)) (* n (* (pow x 2) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (/ 1 n)))))) (+ (* -1 (/ (log (/ 1 x)) (* n (* x (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* 1/2 (/ (log (/ 1 x)) (* n (* (pow x 2) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (/ (log (/ 1 x)) (* n (* (pow x 2) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))) (/ (* (+ (* -2 (log (/ 1 x))) (* -1 (log (/ 1 x)))) (- (+ (* -1 (/ (* (log (/ 1 x)) (+ 1 (log (/ 1 x)))) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))) (* -1/2 (/ (pow (log (/ 1 x)) 2) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (* -1 (/ (log (/ 1 x)) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))))) (* (pow x 2) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))))) x)","(/ (- (+ (* -4/3 (/ (log (/ 1 x)) (* n (* (pow x 3) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* -1 (/ (* (log (/ 1 x)) (+ 11/12 (* 1/2 (log (/ 1 x))))) (* n (* (pow x 3) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* -1 (/ (* (log (/ 1 x)) (+ 1 (log (/ 1 x)))) (* n (* x (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* -1 (/ (* (log (/ 1 x)) (- (* -2/3 (log (/ 1 x))) 1)) (* n (* (pow x 2) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* -1/2 (/ (+ 1 (log (/ 1 x))) (* n (* (pow x 3) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* -1/2 (/ (pow (log (/ 1 x)) 2) (* n (* x (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* -1/4 (/ (pow (log (/ 1 x)) 2) (* n (* (pow x 3) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* 1/3 (/ (pow (log (/ 1 x)) 2) (* n (* (pow x 2) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* 2 (/ (log (/ 1 x)) (* n (* (pow x 2) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (/ 1 n)))))))))) (+ (* -1 (/ (log (/ 1 x)) (* n (* x (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* -2/3 (/ (log (/ 1 x)) (* n (* (pow x 3) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* -1/3 (/ (log (/ 1 x)) (* n (* (pow x 3) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* 1/2 (/ (log (/ 1 x)) (* n (* (pow x 2) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (/ (log (/ 1 x)) (* n (* (pow x 2) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))) (+ (/ (* (+ 1 (+ (log (/ 1 x)) (* 1/2 (log (/ 1 x))))) (- (+ (* -1 (/ (* (log (/ 1 x)) (+ 1 (log (/ 1 x)))) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))) (* -1/2 (/ (pow (log (/ 1 x)) 2) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (* -1 (/ (log (/ 1 x)) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))))) (* (pow x 3) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))) (+ (/ (* (+ (* -2 (log (/ 1 x))) (* -1 (log (/ 1 x)))) (- (+ (* -1 (/ (* (log (/ 1 x)) (+ 1 (log (/ 1 x)))) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))) (* -1/2 (/ (pow (log (/ 1 x)) 2) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (* -1 (/ (log (/ 1 x)) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))))) (* (pow x 2) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))) (/ (* (+ (* -2 (log (/ 1 x))) (* -1 (log (/ 1 x)))) (- (+ (* -1 (/ (* (log (/ 1 x)) (- (* -2/3 (log (/ 1 x))) 1)) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))) (+ (* 1/3 (/ (pow (log (/ 1 x)) 2) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))) (* 2 (/ (log (/ 1 x)) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))))) (+ (* 1/2 (/ (log (/ 1 x)) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))) (+ (/ (log (/ 1 x)) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))) (/ (* (+ (* -2 (log (/ 1 x))) (* -1 (log (/ 1 x)))) (- (+ (* -1 (/ (* (log (/ 1 x)) (+ 1 (log (/ 1 x)))) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))) (* -1/2 (/ (pow (log (/ 1 x)) 2) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (* -1 (/ (log (/ 1 x)) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))))) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))))) (* (pow x 3) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))))))))) x)","(/ (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)) (* n x))","(/ (+ (* -2 (/ (log (/ 1 x)) (* n x))) (+ (* -1 (/ (* (log (/ 1 x)) (+ 1 (log (/ 1 x)))) (* n x))) (+ (* -1/2 (/ (pow (log (/ 1 x)) 2) (* n x))) (+ (* 2 (/ (pow (log (/ 1 x)) 2) n)) (/ (pow (log (/ 1 x)) 2) n))))) x)","(/ (+ (* -2 (/ (log (/ 1 x)) (* n x))) (+ (* -1 (/ (* (log (/ 1 x)) (+ 1 (log (/ 1 x)))) (* n x))) (+ (* -1 (/ (* (log (/ 1 x)) (- (* -2/3 (log (/ 1 x))) 1)) (* n (pow x 2)))) (+ (* -1/2 (/ (pow (log (/ 1 x)) 2) (* n x))) (+ (* 1/3 (/ (pow (log (/ 1 x)) 2) (* n (pow x 2)))) (+ (* 2 (/ (log (/ 1 x)) (* n (pow x 2)))) (+ (* 2 (/ (pow (log (/ 1 x)) 2) n)) (+ (/ 1 (* n (pow x 2))) (/ (pow (log (/ 1 x)) 2) n))))))))) x)","(/ (- (+ (* -2 (/ (log (/ 1 x)) (* n x))) (+ (* -4/3 (/ (log (/ 1 x)) (* n (pow x 3)))) (+ (* -1 (/ (* (log (/ 1 x)) (+ 11/12 (* 1/2 (log (/ 1 x))))) (* n (pow x 3)))) (+ (* -1 (/ (* (log (/ 1 x)) (+ 1 (log (/ 1 x)))) (* n x))) (+ (* -1 (/ (* (log (/ 1 x)) (- (* -2/3 (log (/ 1 x))) 1)) (* n (pow x 2)))) (+ (* -1/2 (/ (+ 1 (log (/ 1 x))) (* n (pow x 3)))) (+ (* -1/2 (/ (pow (log (/ 1 x)) 2) (* n x))) (+ (* -1/4 (/ (pow (log (/ 1 x)) 2) (* n (pow x 3)))) (+ (* 1/3 (/ (pow (log (/ 1 x)) 2) (* n (pow x 2)))) (+ (* 2 (/ (log (/ 1 x)) (* n (pow x 2)))) (+ (* 2 (/ (pow (log (/ 1 x)) 2) n)) (+ (/ 1 (* n (pow x 2))) (/ (pow (log (/ 1 x)) 2) n))))))))))))) (/ 1 (* n (pow x 3)))) x)","(/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x))","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2)))) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) (pow x 3)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2))))) x)","(/ (* n x) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))","(* x (+ (* -1 (/ (* n (+ (* -2 (log (/ 1 x))) (+ (* -1 (* (log (/ 1 x)) (+ 1 (log (/ 1 x))))) (* -1/2 (pow (log (/ 1 x)) 2))))) (* x (pow (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)) 2)))) (/ n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))","(* x (- (+ (* -1 (/ (+ (* -1 (/ (* n (pow (+ (* -2 (log (/ 1 x))) (+ (* -1 (* (log (/ 1 x)) (+ 1 (log (/ 1 x))))) (* -1/2 (pow (log (/ 1 x)) 2)))) 2)) (pow (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)) 3))) (/ (* n (+ 1 (+ (* -1 (* (log (/ 1 x)) (- (* -2/3 (log (/ 1 x))) 1))) (+ (* 1/3 (pow (log (/ 1 x)) 2)) (* 2 (log (/ 1 x))))))) (pow (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)) 2))) (pow x 2))) (/ n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))) (/ (* n (+ (* -2 (log (/ 1 x))) (+ (* -1 (* (log (/ 1 x)) (+ 1 (log (/ 1 x))))) (* -1/2 (pow (log (/ 1 x)) 2))))) (* x (pow (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)) 2)))))","(* x (- (+ (* -1 (/ (+ (* -1 (/ (* n (* (+ 1 (+ (* -1 (* (log (/ 1 x)) (- (* -2/3 (log (/ 1 x))) 1))) (+ (* 1/3 (pow (log (/ 1 x)) 2)) (* 2 (log (/ 1 x)))))) (+ (* -2 (log (/ 1 x))) (+ (* -1 (* (log (/ 1 x)) (+ 1 (log (/ 1 x))))) (* -1/2 (pow (log (/ 1 x)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)) 3))) (+ (* -1 (/ (* (+ (* -2 (log (/ 1 x))) (+ (* -1 (* (log (/ 1 x)) (+ 1 (log (/ 1 x))))) (* -1/2 (pow (log (/ 1 x)) 2)))) (+ (* -1 (/ (* n (pow (+ (* -2 (log (/ 1 x))) (+ (* -1 (* (log (/ 1 x)) (+ 1 (log (/ 1 x))))) (* -1/2 (pow (log (/ 1 x)) 2)))) 2)) (pow (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)) 3))) (/ (* n (+ 1 (+ (* -1 (* (log (/ 1 x)) (- (* -2/3 (log (/ 1 x))) 1))) (+ (* 1/3 (pow (log (/ 1 x)) 2)) (* 2 (log (/ 1 x))))))) (pow (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)) 2)))) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))) (/ (* n (- (+ (* -4/3 (log (/ 1 x))) (+ (* -1 (* (log (/ 1 x)) (+ 11/12 (* 1/2 (log (/ 1 x)))))) (+ (* -1/2 (+ 1 (log (/ 1 x)))) (* -1/4 (pow (log (/ 1 x)) 2))))) 1)) (pow (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)) 2)))) (pow x 3))) (/ n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))) (+ (* -1 (/ (* n (pow (+ (* -2 (log (/ 1 x))) (+ (* -1 (* (log (/ 1 x)) (+ 1 (log (/ 1 x))))) (* -1/2 (pow (log (/ 1 x)) 2)))) 2)) (* (pow x 2) (pow (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)) 3)))) (+ (/ (* n (+ 1 (+ (* -1 (* (log (/ 1 x)) (- (* -2/3 (log (/ 1 x))) 1))) (+ (* 1/3 (pow (log (/ 1 x)) 2)) (* 2 (log (/ 1 x))))))) (* (pow x 2) (pow (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)) 2))) (/ (* n (+ (* -2 (log (/ 1 x))) (+ (* -1 (* (log (/ 1 x)) (+ 1 (log (/ 1 x))))) (* -1/2 (pow (log (/ 1 x)) 2))))) (* x (pow (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)) 2)))))))","(/ (- (/ 1 n) (* 1/2 (/ 1 (* n x)))) x)","(/ (- (+ (/ 1/3 (* n (pow x 2))) (/ 1 n)) (/ 1/2 (* n x))) x)","(/ (- (+ (/ 1 n) (* 1/3 (/ 1 (* n (pow x 2))))) (+ (/ 1/2 (* n x)) (* 1/4 (/ 1 (* n (pow x 3)))))) x)","(/ (- 1 (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3))))) x)","(+ 1 (/ 1 x))","(* n x)","(* x (+ n (* 1/2 (/ n x))))","(* x (- (+ n (* -1 (/ (+ (* -1/4 n) (* 1/3 n)) (pow x 2)))) (* -1/2 (/ n x))))","(* x (- (+ n (* -1 (/ (+ (* -1/4 n) (+ (* 1/6 n) (* 1/2 (+ (* -1/4 n) (* 1/3 n))))) (pow x 3)))) (+ (* -1/2 (/ n x)) (+ (* -1/4 (/ n (pow x 2))) (* 1/3 (/ n (pow x 2)))))))","(/ (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)) x)","(/ (+ (* -2 (/ (log (/ 1 x)) x)) (+ (* -1 (/ (* (log (/ 1 x)) (+ 1 (log (/ 1 x)))) x)) (+ (* -1/2 (/ (pow (log (/ 1 x)) 2) x)) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))) x)","(/ (+ (* -2 (/ (log (/ 1 x)) x)) (+ (* -1 (/ (* (log (/ 1 x)) (+ 1 (log (/ 1 x)))) x)) (+ (* -1 (/ (* (log (/ 1 x)) (- (* -2/3 (log (/ 1 x))) 1)) (pow x 2))) (+ (* -1/2 (/ (pow (log (/ 1 x)) 2) x)) (+ (* 1/3 (/ (pow (log (/ 1 x)) 2) (pow x 2))) (+ (* 2 (/ (log (/ 1 x)) (pow x 2))) (+ (* 2 (pow (log (/ 1 x)) 2)) (+ (/ 1 (pow x 2)) (pow (log (/ 1 x)) 2))))))))) x)","(/ (- (+ (* -2 (/ (log (/ 1 x)) x)) (+ (* -4/3 (/ (log (/ 1 x)) (pow x 3))) (+ (* -1 (/ (* (log (/ 1 x)) (+ 11/12 (* 1/2 (log (/ 1 x))))) (pow x 3))) (+ (* -1 (/ (* (log (/ 1 x)) (+ 1 (log (/ 1 x)))) x)) (+ (* -1 (/ (* (log (/ 1 x)) (- (* -2/3 (log (/ 1 x))) 1)) (pow x 2))) (+ (* -1/2 (/ (+ 1 (log (/ 1 x))) (pow x 3))) (+ (* -1/2 (/ (pow (log (/ 1 x)) 2) x)) (+ (* -1/4 (/ (pow (log (/ 1 x)) 2) (pow x 3))) (+ (* 1/3 (/ (pow (log (/ 1 x)) 2) (pow x 2))) (+ (* 2 (/ (log (/ 1 x)) (pow x 2))) (+ (* 2 (pow (log (/ 1 x)) 2)) (+ (/ 1 (pow x 2)) (pow (log (/ 1 x)) 2))))))))))))) (/ 1 (pow x 3))) x)","(* -1 (pow (log (/ 1 x)) 3))","x","(* x (+ 1 (/ 1 x)))","(* x (+ 1 (* 1/2 (/ 1 x))))","(* x (- (+ 1 (* 1/2 (/ 1 x))) (/ 1/12 (pow x 2))))","(* x (- (+ 1 (+ (* 1/2 (/ 1 x)) (* 1/24 (/ 1 (pow x 3))))) (/ 1/12 (pow x 2))))","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* n (* x (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))))","(* -1 (/ (+ (* -2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* -1 (/ (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* n (pow (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) 2)))) x)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))))) x))","(* -1 (/ (+ (* -2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (log (/ -1 x)) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (/ (log -1) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))))) (+ (/ (* (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1/2 (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* n (pow (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) 2))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* n (pow (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) 2))))) (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) x)) (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* n (pow (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) 2)))) x)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))))) x))","(* -1 (/ (+ (* -2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (log (/ -1 x)) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* -1/2 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* -1/4 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* 2/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (/ (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))))) (+ (/ (* (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1/2 (+ (log -1) (* -1 (log (/ -1 x))))))) (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* n (pow (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) 2))))) (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (/ (* (+ 1 (+ (* -2/3 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1/3 (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* n (pow (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) 2))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (- (+ (* -1 (/ (log (/ -1 x)) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (/ (log -1) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))))) (+ (/ (* (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1/2 (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* n (pow (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) 2))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* n (pow (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) 2))))) (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (+ (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (/ (log -1) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))))))) (+ (/ (* (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1/2 (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* n (pow (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) 2))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* n (pow (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) 2))))) (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) x)) (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* n (pow (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) 2)))) x)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))))) x))","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* n x)))","(* -1 (/ (+ (* -2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) n)) (+ (* -1 (/ (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) n)) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) n))) x)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) n)))) x))","(* -1 (/ (+ (* -2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) n)) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (log (/ -1 x)) n)) (+ (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) n)) (+ (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) n)) (+ (/ (log -1) n) (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) n))))) x)) (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) n)) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) n)))) x)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) n)))) x))","(* -1 (/ (+ (* -2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) n)) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (log (/ -1 x)) n)) (+ (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) n)) (+ (* -1 (/ (+ (* -1 (/ (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) n)) (+ (* -1/2 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) n)) (+ (* -1/4 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) n)) (+ (* 2/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) n))))) x)) (+ (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) n)) (+ (/ (log -1) n) (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) n)))))) x)) (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) n)) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) n)))) x)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) n)))) x))","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(* -1 (/ (* n x) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))","(* -1 (* x (+ (/ n (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (/ (* n (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 x))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x)))))))) (* x (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) 2))))))","(* -1 (* x (+ (* -1 (/ (- (+ (* -1 (/ (* n (pow (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 x))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))))) 2)) (* x (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) 3)))) (/ (* n (+ (log -1) (+ (* -1 (log (/ -1 x))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x)))))))))) (* x (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) 2)))) (/ (* n (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 x))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x)))))))) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) 2))) x)) (/ n (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))))","(* -1 (* x (+ (* -1 (/ (- (* -1 (/ (- (+ (* -1 (/ (* n (* (+ (log -1) (+ (* -1 (log (/ -1 x))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))))))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 x))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))))))) (* x (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) 3)))) (+ (* -1 (/ (* (+ (* -1 (/ (* n (pow (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 x))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))))) 2)) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) 3))) (/ (* n (+ (log -1) (+ (* -1 (log (/ -1 x))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x)))))))))) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 x))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x)))))))) (* x (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) (/ (* n (+ (* -1 (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* -1/2 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* -1/4 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* 2/3 (+ (log -1) (* -1 (log (/ -1 x))))) (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x)))))))))) (* x (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) 2))))) (+ (* -1 (/ (* n (pow (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 x))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))))) 2)) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) 3))) (/ (* n (+ (log -1) (+ (* -1 (log (/ -1 x))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x)))))))))) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) 2)))) x)) (/ (* n (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 x))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x)))))))) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) 2))) x)) (/ n (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))))","(* -1 (/ (- (* 1/2 (/ 1 (* n x))) (/ 1 n)) x))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (* n x))) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 (* n x))) (* 1/3 (/ 1 n))) x)) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 x)) 1/3) x)) 1/2) x)) 1) x))","(* -1 (* x (+ (* -1 n) (* -1/2 (/ n x)))))","(* -1 (* x (+ (* -1 n) (* -1 (/ (- (+ (* -1/3 (/ n x)) (* 1/4 (/ n x))) (* -1/2 n)) x)))))","(* -1 (* x (+ (* -1 n) (* -1 (/ (- (* -1 (/ (- (+ (* -1/2 (/ (+ (* -1/3 n) (* 1/4 n)) x)) (+ (* -1/4 (/ n x)) (* 1/6 (/ n x)))) (+ (* -1/3 n) (* 1/4 n))) x)) (* -1/2 n)) x)))))","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x))","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* -1 (/ (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 x))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))))) x)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) x))","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* -1 (/ (+ (* -1 (/ (+ (log -1) (+ (* -1 (log (/ -1 x))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))))))) x)) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 x))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x)))))))) x)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) x))","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* -1 (/ (+ (* -1 (/ (+ (log -1) (+ (* -1 (log (/ -1 x))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* -1 (/ (+ (* -1 (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* -1/2 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* -1/4 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* 2/3 (+ (log -1) (* -1 (log (/ -1 x))))) (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))))))) x)) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x)))))))))) x)) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 x))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x)))))))) x)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) x))","(pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)","(* -1 (* x (- (* -1 (/ (- 1/2 (* 1/12 (/ 1 x))) x)) 1)))","(* -1 (* x (- (* -1 (/ (+ 1/2 (* -1 (/ (- 1/12 (* 1/24 (/ 1 x))) x))) x)) 1)))","(/ (- (pow (log (+ 1 x)) 3) (pow (log x) 3)) (* n (+ (* (log x) (+ (log x) (log (+ 1 x)))) (pow (log (+ 1 x)) 2))))","(/ (- (pow (log (+ 1 x)) 3) (pow (log x) 3)) n)","(- (exp (/ (log (+ 1 x)) n)) (exp (/ (log x) n)))","(/ n (- (pow (log (+ 1 x)) 3) (pow (log x) 3)))","(/ (- (log (+ 1 x)) (log x)) n)","(/ (log (/ (+ 1 x) x)) n)","(/ n (- (log (+ 1 x)) (log x)))","(/ 1 n)","(/ (- (+ (log (+ 1 x)) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))) (+ (log x) (* 1/2 (/ (pow (log x) 2) n)))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n)))) (+ (log x) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n))))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/24 (/ (pow (log (+ 1 x)) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))))) (+ (log x) (+ (* 1/24 (/ (pow (log x) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n)))))) n)","(* -1 (/ (- (* -1 (log (+ 1 x))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (* 1/2 (pow (log (+ 1 x)) 2)) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (* -1/6 (pow (log (+ 1 x)) 3)) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/24 (pow (log (+ 1 x)) 4)) (* 1/24 (pow (log x) 4))) n)) (* -1/6 (pow (log (+ 1 x)) 3))) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))"]],"series":[[44.015869140625,"((* (pow (/ n (- (pow (log (+ 1 x)) 3) (pow (log x) 3))) -1) (pow (+ (* (log x) (+ (log x) (log (+ 1 x)))) (pow (log (+ 1 x)) 2)) -1)) (pow (/ n (- (pow (log (+ 1 x)) 3) (pow (log x) 3))) -1) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ n (- (pow (log (+ 1 x)) 3) (pow (log x) 3))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (/ 1 x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (log (/ (+ 1 x) x)) n) (log (/ (+ 1 x) x)) (/ (+ 1 x) x) (/ 1 (/ n (- (log (+ 1 x)) (log x)))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ n (- (log (+ 1 x)) (log x))) (- (log (+ 1 x)) (log x)) (pow (pow (- (log (+ 1 x)) (log x)) -1) -1) (* (pow n -1) (pow (pow (- (log (+ 1 x)) (log x)) -1) -1)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow n -1) (- (pow (log (+ 1 x)) 3) (pow (log x) 3)) (pow (log x) 3) (+ 1 x) (pow (- (log (+ 1 x)) (log x)) -1))","n","-inf"],[47.509033203125,"((* (pow (/ n (- (pow (log (+ 1 x)) 3) (pow (log x) 3))) -1) (pow (+ (* (log x) (+ (log x) (log (+ 1 x)))) (pow (log (+ 1 x)) 2)) -1)) (pow (/ n (- (pow (log (+ 1 x)) 3) (pow (log x) 3))) -1) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ n (- (pow (log (+ 1 x)) 3) (pow (log x) 3))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (/ 1 x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (log (/ (+ 1 x) x)) n) (log (/ (+ 1 x) x)) (/ (+ 1 x) x) (/ 1 (/ n (- (log (+ 1 x)) (log x)))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ n (- (log (+ 1 x)) (log x))) (- (log (+ 1 x)) (log x)) (pow (pow (- (log (+ 1 x)) (log x)) -1) -1) (* (pow n -1) (pow (pow (- (log (+ 1 x)) (log x)) -1) -1)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow n -1) (- (pow (log (+ 1 x)) 3) (pow (log x) 3)) (pow (log x) 3) (+ 1 x) (pow (- (log (+ 1 x)) (log x)) -1))","n","inf"],[47.08203125,"((* (pow (/ n (- (pow (log (+ 1 x)) 3) (pow (log x) 3))) -1) (pow (+ (* (log x) (+ (log x) (log (+ 1 x)))) (pow (log (+ 1 x)) 2)) -1)) (pow (/ n (- (pow (log (+ 1 x)) 3) (pow (log x) 3))) -1) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ n (- (pow (log (+ 1 x)) 3) (pow (log x) 3))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (/ 1 x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (log (/ (+ 1 x) x)) n) (log (/ (+ 1 x) x)) (/ (+ 1 x) x) (/ 1 (/ n (- (log (+ 1 x)) (log x)))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ n (- (log (+ 1 x)) (log x))) (- (log (+ 1 x)) (log x)) (pow (pow (- (log (+ 1 x)) (log x)) -1) -1) (* (pow n -1) (pow (pow (- (log (+ 1 x)) (log x)) -1) -1)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow n -1) (- (pow (log (+ 1 x)) 3) (pow (log x) 3)) (pow (log x) 3) (+ 1 x) (pow (- (log (+ 1 x)) (log x)) -1))","n","0"],[24.666015625,"((* (pow (/ n (- (pow (log (+ 1 x)) 3) (pow (log x) 3))) -1) (pow (+ (* (log x) (+ (log x) (log (+ 1 x)))) (pow (log (+ 1 x)) 2)) -1)) (pow (/ n (- (pow (log (+ 1 x)) 3) (pow (log x) 3))) -1) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ n (- (pow (log (+ 1 x)) 3) (pow (log x) 3))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (/ 1 x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (log (/ (+ 1 x) x)) n) (log (/ (+ 1 x) x)) (/ (+ 1 x) x) (/ 1 (/ n (- (log (+ 1 x)) (log x)))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ n (- (log (+ 1 x)) (log x))) (- (log (+ 1 x)) (log x)) (pow (pow (- (log (+ 1 x)) (log x)) -1) -1) (* (pow n -1) (pow (pow (- (log (+ 1 x)) (log x)) -1) -1)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow n -1) (- (pow (log (+ 1 x)) 3) (pow (log x) 3)) (pow (log x) 3) (+ 1 x) (pow (- (log (+ 1 x)) (log x)) -1))","x","-inf"],[24.583984375,"((* (pow (/ n (- (pow (log (+ 1 x)) 3) (pow (log x) 3))) -1) (pow (+ (* (log x) (+ (log x) (log (+ 1 x)))) (pow (log (+ 1 x)) 2)) -1)) (pow (/ n (- (pow (log (+ 1 x)) 3) (pow (log x) 3))) -1) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ n (- (pow (log (+ 1 x)) 3) (pow (log x) 3))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (/ 1 x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (log (/ (+ 1 x) x)) n) (log (/ (+ 1 x) x)) (/ (+ 1 x) x) (/ 1 (/ n (- (log (+ 1 x)) (log x)))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ n (- (log (+ 1 x)) (log x))) (- (log (+ 1 x)) (log x)) (pow (pow (- (log (+ 1 x)) (log x)) -1) -1) (* (pow n -1) (pow (pow (- (log (+ 1 x)) (log x)) -1) -1)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow n -1) (- (pow (log (+ 1 x)) 3) (pow (log x) 3)) (pow (log x) 3) (+ 1 x) (pow (- (log (+ 1 x)) (log x)) -1))","x","inf"],[13.18408203125,"((* (pow (/ n (- (pow (log (+ 1 x)) 3) (pow (log x) 3))) -1) (pow (+ (* (log x) (+ (log x) (log (+ 1 x)))) (pow (log (+ 1 x)) 2)) -1)) (pow (/ n (- (pow (log (+ 1 x)) 3) (pow (log x) 3))) -1) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ n (- (pow (log (+ 1 x)) 3) (pow (log x) 3))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (/ 1 x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (log (/ (+ 1 x) x)) n) (log (/ (+ 1 x) x)) (/ (+ 1 x) x) (/ 1 (/ n (- (log (+ 1 x)) (log x)))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ n (- (log (+ 1 x)) (log x))) (- (log (+ 1 x)) (log x)) (pow (pow (- (log (+ 1 x)) (log x)) -1) -1) (* (pow n -1) (pow (pow (- (log (+ 1 x)) (log x)) -1) -1)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow n -1) (- (pow (log (+ 1 x)) 3) (pow (log x) 3)) (pow (log x) 3) (+ 1 x) (pow (- (log (+ 1 x)) (log x)) -1))","x","0"]],"time":208.6640625,"type":"series"},{"count":[[126,125]],"egraph":[[0,8106,7425,0.115944737],[1,3646,7767,0.033092427],[0,1069,9123,0.018222992]],"inputs":[["(* -1 (/ (log x) n))","(+ (* -1 (/ (log x) n)) (/ x n))","(+ (* -1 (/ (log x) n)) (* x (+ (* -1 (* x (+ (* -1 (/ (+ 1 (* -1/2 (log x))) (* n (log x)))) (/ 1 (* n (log x)))))) (/ 1 n))))","(+ (* -1 (/ (log x) n)) (* x (+ (* x (- (* x (- (* 1/2 (/ 1 (* n (log x)))) (+ (* -1 (/ (+ (* -1 (/ (+ 1 (* -1/2 (log x))) (* n (log x)))) (/ 1 (* n (log x)))) (log x))) (* -1 (/ (- (* 1/3 (log x)) 1) (* n (log x))))))) (+ (* -1 (/ (+ 1 (* -1/2 (log x))) (* n (log x)))) (/ 1 (* n (log x)))))) (/ 1 n))))","(* -1 (/ (pow (log x) 3) n))","(+ (* -1 (/ (pow (log x) 3) n)) (/ (pow x 3) n))","(+ (* -1 (/ (pow (log x) 3) n)) (* (pow x 3) (+ (* -3/2 (/ x n)) (/ 1 n))))","(+ (* -1 (/ (pow (log x) 3) n)) (* (pow x 3) (+ (* x (- (* 7/4 (/ x n)) (* 3/2 (/ 1 n)))) (/ 1 n))))","(- 1 (exp (/ (log x) n)))","(- (+ 1 (/ x n)) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(* -1 (/ n (pow (log x) 3)))","(+ (* -1 (/ n (pow (log x) 3))) (* -1 (/ (* n (pow x 3)) (pow (log x) 6))))","(+ (* -1 (/ n (pow (log x) 3))) (* (pow x 3) (- (* 3/2 (/ (* n x) (pow (log x) 6))) (/ n (pow (log x) 6)))))","(+ (* -1 (/ n (pow (log x) 3))) (* (pow x 3) (- (* x (- (* -7/4 (/ (* n x) (pow (log x) 6))) (* -3/2 (/ n (pow (log x) 6))))) (/ n (pow (log x) 6)))))","(+ (* -1 (/ (log x) n)) (* x (+ (* -1/2 (/ x n)) (/ 1 n))))","(+ (* -1 (/ (log x) n)) (* x (+ (* x (- (* 1/3 (/ x n)) (* 1/2 (/ 1 n)))) (/ 1 n))))","(* -1 (log x))","(- x (log x))","(- (* x (+ 1 (* -1/2 x))) (log x))","(- (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) (log x))","(/ 1 x)","(+ x (* -1 (log x)))","(+ (* -1 (log x)) (* x (+ 1 (* -1/2 x))))","(+ (* -1 (log x)) (* x (+ 1 (* x (- (* 1/3 x) 1/2)))))","(/ (+ 1 x) x)","(* -1 (/ n (log x)))","(+ (* -1 (/ n (log x))) (* -1 (/ (* n x) (pow (log x) 2))))","(+ (* -1 (/ n (log x))) (* x (- (* -1 (* x (+ (* -1/2 (/ n (pow (log x) 2))) (/ n (pow (log x) 3))))) (/ n (pow (log x) 2)))))","(+ (* -1 (/ n (log x))) (* x (- (* x (- (* -1 (* x (+ (* -1 (/ n (pow (log x) 3))) (+ (* 1/3 (/ n (pow (log x) 2))) (/ n (pow (log x) 4)))))) (+ (* -1/2 (/ n (pow (log x) 2))) (/ n (pow (log x) 3))))) (/ n (pow (log x) 2)))))","(* -1 (pow (log x) 3))","(- (pow x 3) (pow (log x) 3))","(- (* (pow x 3) (+ 1 (* -3/2 x))) (pow (log x) 3))","(- (* (pow x 3) (+ 1 (* x (- (* 7/4 x) 3/2)))) (pow (log x) 3))","(pow (log x) 3)","1","(+ 1 x)","(/ -1 (log x))","(- (* -1 (/ x (pow (log x) 2))) (/ 1 (log x)))","(- (* x (- (* x (- (* 1/2 (/ 1 (pow (log x) 2))) (/ 1 (pow (log x) 3)))) (/ 1 (pow (log x) 2)))) (/ 1 (log x)))","(- (* x (- (* x (- (+ (* 1/2 (/ 1 (pow (log x) 2))) (* x (- (* 1/2 (/ 1 (pow (log x) 3))) (+ (* -1 (/ (- (* 1/2 (/ 1 (pow (log x) 2))) (/ 1 (pow (log x) 3))) (log x))) (* 1/3 (/ 1 (pow (log x) 2))))))) (/ 1 (pow (log x) 3)))) (/ 1 (pow (log x) 2)))) (/ 1 (log x)))","(/ 1 (* n x))","(/ (- (+ (* -1 (/ (* (log (/ 1 x)) (+ 1 (log (/ 1 x)))) (* n (* x (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* -1/2 (/ (pow (log (/ 1 x)) 2) (* n (* x (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (/ 1 n))) (* -1 (/ (log (/ 1 x)) (* n (* x (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))))) x)","(/ (- (+ (* -1 (/ (* (log (/ 1 x)) (+ 1 (log (/ 1 x)))) (* n (* x (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* -1 (/ (* (log (/ 1 x)) (- (* -2/3 (log (/ 1 x))) 1)) (* n (* (pow x 2) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* -1/2 (/ (pow (log (/ 1 x)) 2) (* n (* x (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* 1/3 (/ (pow (log (/ 1 x)) 2) (* n (* (pow x 2) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* 2 (/ (log (/ 1 x)) (* n (* (pow x 2) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (/ 1 n)))))) (+ (* -1 (/ (log (/ 1 x)) (* n (* x (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* 1/2 (/ (log (/ 1 x)) (* n (* (pow x 2) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (/ (log (/ 1 x)) (* n (* (pow x 2) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))) (/ (* (+ (* -2 (log (/ 1 x))) (* -1 (log (/ 1 x)))) (- (+ (* -1 (/ (* (log (/ 1 x)) (+ 1 (log (/ 1 x)))) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))) (* -1/2 (/ (pow (log (/ 1 x)) 2) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (* -1 (/ (log (/ 1 x)) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))))) (* (pow x 2) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))))) x)","(/ (- (+ (* -4/3 (/ (log (/ 1 x)) (* n (* (pow x 3) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* -1 (/ (* (log (/ 1 x)) (+ 11/12 (* 1/2 (log (/ 1 x))))) (* n (* (pow x 3) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* -1 (/ (* (log (/ 1 x)) (+ 1 (log (/ 1 x)))) (* n (* x (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* -1 (/ (* (log (/ 1 x)) (- (* -2/3 (log (/ 1 x))) 1)) (* n (* (pow x 2) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* -1/2 (/ (+ 1 (log (/ 1 x))) (* n (* (pow x 3) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* -1/2 (/ (pow (log (/ 1 x)) 2) (* n (* x (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* -1/4 (/ (pow (log (/ 1 x)) 2) (* n (* (pow x 3) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* 1/3 (/ (pow (log (/ 1 x)) 2) (* n (* (pow x 2) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* 2 (/ (log (/ 1 x)) (* n (* (pow x 2) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (/ 1 n)))))))))) (+ (* -1 (/ (log (/ 1 x)) (* n (* x (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* -2/3 (/ (log (/ 1 x)) (* n (* (pow x 3) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* -1/3 (/ (log (/ 1 x)) (* n (* (pow x 3) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* 1/2 (/ (log (/ 1 x)) (* n (* (pow x 2) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (/ (log (/ 1 x)) (* n (* (pow x 2) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))) (+ (/ (* (+ 1 (+ (log (/ 1 x)) (* 1/2 (log (/ 1 x))))) (- (+ (* -1 (/ (* (log (/ 1 x)) (+ 1 (log (/ 1 x)))) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))) (* -1/2 (/ (pow (log (/ 1 x)) 2) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (* -1 (/ (log (/ 1 x)) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))))) (* (pow x 3) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))) (+ (/ (* (+ (* -2 (log (/ 1 x))) (* -1 (log (/ 1 x)))) (- (+ (* -1 (/ (* (log (/ 1 x)) (+ 1 (log (/ 1 x)))) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))) (* -1/2 (/ (pow (log (/ 1 x)) 2) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (* -1 (/ (log (/ 1 x)) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))))) (* (pow x 2) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))) (/ (* (+ (* -2 (log (/ 1 x))) (* -1 (log (/ 1 x)))) (- (+ (* -1 (/ (* (log (/ 1 x)) (- (* -2/3 (log (/ 1 x))) 1)) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))) (+ (* 1/3 (/ (pow (log (/ 1 x)) 2) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))) (* 2 (/ (log (/ 1 x)) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))))) (+ (* 1/2 (/ (log (/ 1 x)) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))) (+ (/ (log (/ 1 x)) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))) (/ (* (+ (* -2 (log (/ 1 x))) (* -1 (log (/ 1 x)))) (- (+ (* -1 (/ (* (log (/ 1 x)) (+ 1 (log (/ 1 x)))) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))) (* -1/2 (/ (pow (log (/ 1 x)) 2) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (* -1 (/ (log (/ 1 x)) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))))) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))))) (* (pow x 3) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))))))))) x)","(/ (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)) (* n x))","(/ (+ (* -2 (/ (log (/ 1 x)) (* n x))) (+ (* -1 (/ (* (log (/ 1 x)) (+ 1 (log (/ 1 x)))) (* n x))) (+ (* -1/2 (/ (pow (log (/ 1 x)) 2) (* n x))) (+ (* 2 (/ (pow (log (/ 1 x)) 2) n)) (/ (pow (log (/ 1 x)) 2) n))))) x)","(/ (+ (* -2 (/ (log (/ 1 x)) (* n x))) (+ (* -1 (/ (* (log (/ 1 x)) (+ 1 (log (/ 1 x)))) (* n x))) (+ (* -1 (/ (* (log (/ 1 x)) (- (* -2/3 (log (/ 1 x))) 1)) (* n (pow x 2)))) (+ (* -1/2 (/ (pow (log (/ 1 x)) 2) (* n x))) (+ (* 1/3 (/ (pow (log (/ 1 x)) 2) (* n (pow x 2)))) (+ (* 2 (/ (log (/ 1 x)) (* n (pow x 2)))) (+ (* 2 (/ (pow (log (/ 1 x)) 2) n)) (+ (/ 1 (* n (pow x 2))) (/ (pow (log (/ 1 x)) 2) n))))))))) x)","(/ (- (+ (* -2 (/ (log (/ 1 x)) (* n x))) (+ (* -4/3 (/ (log (/ 1 x)) (* n (pow x 3)))) (+ (* -1 (/ (* (log (/ 1 x)) (+ 11/12 (* 1/2 (log (/ 1 x))))) (* n (pow x 3)))) (+ (* -1 (/ (* (log (/ 1 x)) (+ 1 (log (/ 1 x)))) (* n x))) (+ (* -1 (/ (* (log (/ 1 x)) (- (* -2/3 (log (/ 1 x))) 1)) (* n (pow x 2)))) (+ (* -1/2 (/ (+ 1 (log (/ 1 x))) (* n (pow x 3)))) (+ (* -1/2 (/ (pow (log (/ 1 x)) 2) (* n x))) (+ (* -1/4 (/ (pow (log (/ 1 x)) 2) (* n (pow x 3)))) (+ (* 1/3 (/ (pow (log (/ 1 x)) 2) (* n (pow x 2)))) (+ (* 2 (/ (log (/ 1 x)) (* n (pow x 2)))) (+ (* 2 (/ (pow (log (/ 1 x)) 2) n)) (+ (/ 1 (* n (pow x 2))) (/ (pow (log (/ 1 x)) 2) n))))))))))))) (/ 1 (* n (pow x 3)))) x)","(/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x))","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2)))) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) (pow x 3)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2))))) x)","(/ (* n x) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))","(* x (+ (* -1 (/ (* n (+ (* -2 (log (/ 1 x))) (+ (* -1 (* (log (/ 1 x)) (+ 1 (log (/ 1 x))))) (* -1/2 (pow (log (/ 1 x)) 2))))) (* x (pow (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)) 2)))) (/ n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))","(* x (- (+ (* -1 (/ (+ (* -1 (/ (* n (pow (+ (* -2 (log (/ 1 x))) (+ (* -1 (* (log (/ 1 x)) (+ 1 (log (/ 1 x))))) (* -1/2 (pow (log (/ 1 x)) 2)))) 2)) (pow (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)) 3))) (/ (* n (+ 1 (+ (* -1 (* (log (/ 1 x)) (- (* -2/3 (log (/ 1 x))) 1))) (+ (* 1/3 (pow (log (/ 1 x)) 2)) (* 2 (log (/ 1 x))))))) (pow (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)) 2))) (pow x 2))) (/ n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))) (/ (* n (+ (* -2 (log (/ 1 x))) (+ (* -1 (* (log (/ 1 x)) (+ 1 (log (/ 1 x))))) (* -1/2 (pow (log (/ 1 x)) 2))))) (* x (pow (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)) 2)))))","(* x (- (+ (* -1 (/ (+ (* -1 (/ (* n (* (+ 1 (+ (* -1 (* (log (/ 1 x)) (- (* -2/3 (log (/ 1 x))) 1))) (+ (* 1/3 (pow (log (/ 1 x)) 2)) (* 2 (log (/ 1 x)))))) (+ (* -2 (log (/ 1 x))) (+ (* -1 (* (log (/ 1 x)) (+ 1 (log (/ 1 x))))) (* -1/2 (pow (log (/ 1 x)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)) 3))) (+ (* -1 (/ (* (+ (* -2 (log (/ 1 x))) (+ (* -1 (* (log (/ 1 x)) (+ 1 (log (/ 1 x))))) (* -1/2 (pow (log (/ 1 x)) 2)))) (+ (* -1 (/ (* n (pow (+ (* -2 (log (/ 1 x))) (+ (* -1 (* (log (/ 1 x)) (+ 1 (log (/ 1 x))))) (* -1/2 (pow (log (/ 1 x)) 2)))) 2)) (pow (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)) 3))) (/ (* n (+ 1 (+ (* -1 (* (log (/ 1 x)) (- (* -2/3 (log (/ 1 x))) 1))) (+ (* 1/3 (pow (log (/ 1 x)) 2)) (* 2 (log (/ 1 x))))))) (pow (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)) 2)))) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))) (/ (* n (- (+ (* -4/3 (log (/ 1 x))) (+ (* -1 (* (log (/ 1 x)) (+ 11/12 (* 1/2 (log (/ 1 x)))))) (+ (* -1/2 (+ 1 (log (/ 1 x)))) (* -1/4 (pow (log (/ 1 x)) 2))))) 1)) (pow (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)) 2)))) (pow x 3))) (/ n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))) (+ (* -1 (/ (* n (pow (+ (* -2 (log (/ 1 x))) (+ (* -1 (* (log (/ 1 x)) (+ 1 (log (/ 1 x))))) (* -1/2 (pow (log (/ 1 x)) 2)))) 2)) (* (pow x 2) (pow (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)) 3)))) (+ (/ (* n (+ 1 (+ (* -1 (* (log (/ 1 x)) (- (* -2/3 (log (/ 1 x))) 1))) (+ (* 1/3 (pow (log (/ 1 x)) 2)) (* 2 (log (/ 1 x))))))) (* (pow x 2) (pow (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)) 2))) (/ (* n (+ (* -2 (log (/ 1 x))) (+ (* -1 (* (log (/ 1 x)) (+ 1 (log (/ 1 x))))) (* -1/2 (pow (log (/ 1 x)) 2))))) (* x (pow (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)) 2)))))))","(/ (- (/ 1 n) (* 1/2 (/ 1 (* n x)))) x)","(/ (- (+ (/ 1/3 (* n (pow x 2))) (/ 1 n)) (/ 1/2 (* n x))) x)","(/ (- (+ (/ 1 n) (* 1/3 (/ 1 (* n (pow x 2))))) (+ (/ 1/2 (* n x)) (* 1/4 (/ 1 (* n (pow x 3)))))) x)","(/ (- 1 (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3))))) x)","(+ 1 (/ 1 x))","(* n x)","(* x (+ n (* 1/2 (/ n x))))","(* x (- (+ n (* -1 (/ (+ (* -1/4 n) (* 1/3 n)) (pow x 2)))) (* -1/2 (/ n x))))","(* x (- (+ n (* -1 (/ (+ (* -1/4 n) (+ (* 1/6 n) (* 1/2 (+ (* -1/4 n) (* 1/3 n))))) (pow x 3)))) (+ (* -1/2 (/ n x)) (+ (* -1/4 (/ n (pow x 2))) (* 1/3 (/ n (pow x 2)))))))","(/ (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)) x)","(/ (+ (* -2 (/ (log (/ 1 x)) x)) (+ (* -1 (/ (* (log (/ 1 x)) (+ 1 (log (/ 1 x)))) x)) (+ (* -1/2 (/ (pow (log (/ 1 x)) 2) x)) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))) x)","(/ (+ (* -2 (/ (log (/ 1 x)) x)) (+ (* -1 (/ (* (log (/ 1 x)) (+ 1 (log (/ 1 x)))) x)) (+ (* -1 (/ (* (log (/ 1 x)) (- (* -2/3 (log (/ 1 x))) 1)) (pow x 2))) (+ (* -1/2 (/ (pow (log (/ 1 x)) 2) x)) (+ (* 1/3 (/ (pow (log (/ 1 x)) 2) (pow x 2))) (+ (* 2 (/ (log (/ 1 x)) (pow x 2))) (+ (* 2 (pow (log (/ 1 x)) 2)) (+ (/ 1 (pow x 2)) (pow (log (/ 1 x)) 2))))))))) x)","(/ (- (+ (* -2 (/ (log (/ 1 x)) x)) (+ (* -4/3 (/ (log (/ 1 x)) (pow x 3))) (+ (* -1 (/ (* (log (/ 1 x)) (+ 11/12 (* 1/2 (log (/ 1 x))))) (pow x 3))) (+ (* -1 (/ (* (log (/ 1 x)) (+ 1 (log (/ 1 x)))) x)) (+ (* -1 (/ (* (log (/ 1 x)) (- (* -2/3 (log (/ 1 x))) 1)) (pow x 2))) (+ (* -1/2 (/ (+ 1 (log (/ 1 x))) (pow x 3))) (+ (* -1/2 (/ (pow (log (/ 1 x)) 2) x)) (+ (* -1/4 (/ (pow (log (/ 1 x)) 2) (pow x 3))) (+ (* 1/3 (/ (pow (log (/ 1 x)) 2) (pow x 2))) (+ (* 2 (/ (log (/ 1 x)) (pow x 2))) (+ (* 2 (pow (log (/ 1 x)) 2)) (+ (/ 1 (pow x 2)) (pow (log (/ 1 x)) 2))))))))))))) (/ 1 (pow x 3))) x)","(* -1 (pow (log (/ 1 x)) 3))","x","(* x (+ 1 (/ 1 x)))","(* x (+ 1 (* 1/2 (/ 1 x))))","(* x (- (+ 1 (* 1/2 (/ 1 x))) (/ 1/12 (pow x 2))))","(* x (- (+ 1 (+ (* 1/2 (/ 1 x)) (* 1/24 (/ 1 (pow x 3))))) (/ 1/12 (pow x 2))))","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* n (* x (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))))","(* -1 (/ (+ (* -2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* -1 (/ (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* n (pow (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) 2)))) x)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))))) x))","(* -1 (/ (+ (* -2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (log (/ -1 x)) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (/ (log -1) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))))) (+ (/ (* (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1/2 (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* n (pow (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) 2))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* n (pow (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) 2))))) (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) x)) (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* n (pow (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) 2)))) x)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))))) x))","(* -1 (/ (+ (* -2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (log (/ -1 x)) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* -1/2 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* -1/4 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* 2/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (/ (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))))) (+ (/ (* (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1/2 (+ (log -1) (* -1 (log (/ -1 x))))))) (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* n (pow (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) 2))))) (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (/ (* (+ 1 (+ (* -2/3 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1/3 (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* n (pow (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) 2))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (- (+ (* -1 (/ (log (/ -1 x)) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (/ (log -1) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))))) (+ (/ (* (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1/2 (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* n (pow (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) 2))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* n (pow (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) 2))))) (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (+ (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (/ (log -1) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))))))) (+ (/ (* (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1/2 (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* n (pow (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) 2))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* n (pow (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) 2))))) (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) x)) (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* n (pow (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) 2)))) x)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))))) x))","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* n x)))","(* -1 (/ (+ (* -2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) n)) (+ (* -1 (/ (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) n)) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) n))) x)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) n)))) x))","(* -1 (/ (+ (* -2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) n)) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (log (/ -1 x)) n)) (+ (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) n)) (+ (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) n)) (+ (/ (log -1) n) (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) n))))) x)) (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) n)) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) n)))) x)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) n)))) x))","(* -1 (/ (+ (* -2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) n)) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (log (/ -1 x)) n)) (+ (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) n)) (+ (* -1 (/ (+ (* -1 (/ (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) n)) (+ (* -1/2 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) n)) (+ (* -1/4 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) n)) (+ (* 2/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) n))))) x)) (+ (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) n)) (+ (/ (log -1) n) (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) n)))))) x)) (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) n)) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) n)))) x)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) n)))) x))","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(* -1 (/ (* n x) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))","(* -1 (* x (+ (/ n (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (/ (* n (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 x))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x)))))))) (* x (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) 2))))))","(* -1 (* x (+ (* -1 (/ (- (+ (* -1 (/ (* n (pow (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 x))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))))) 2)) (* x (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) 3)))) (/ (* n (+ (log -1) (+ (* -1 (log (/ -1 x))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x)))))))))) (* x (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) 2)))) (/ (* n (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 x))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x)))))))) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) 2))) x)) (/ n (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))))","(* -1 (* x (+ (* -1 (/ (- (* -1 (/ (- (+ (* -1 (/ (* n (* (+ (log -1) (+ (* -1 (log (/ -1 x))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))))))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 x))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))))))) (* x (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) 3)))) (+ (* -1 (/ (* (+ (* -1 (/ (* n (pow (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 x))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))))) 2)) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) 3))) (/ (* n (+ (log -1) (+ (* -1 (log (/ -1 x))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x)))))))))) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 x))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x)))))))) (* x (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) (/ (* n (+ (* -1 (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* -1/2 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* -1/4 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* 2/3 (+ (log -1) (* -1 (log (/ -1 x))))) (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x)))))))))) (* x (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) 2))))) (+ (* -1 (/ (* n (pow (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 x))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))))) 2)) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) 3))) (/ (* n (+ (log -1) (+ (* -1 (log (/ -1 x))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x)))))))))) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) 2)))) x)) (/ (* n (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 x))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x)))))))) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) 2))) x)) (/ n (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))))","(* -1 (/ (- (* 1/2 (/ 1 (* n x))) (/ 1 n)) x))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (* n x))) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 (* n x))) (* 1/3 (/ 1 n))) x)) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 x)) 1/3) x)) 1/2) x)) 1) x))","(* -1 (* x (+ (* -1 n) (* -1/2 (/ n x)))))","(* -1 (* x (+ (* -1 n) (* -1 (/ (- (+ (* -1/3 (/ n x)) (* 1/4 (/ n x))) (* -1/2 n)) x)))))","(* -1 (* x (+ (* -1 n) (* -1 (/ (- (* -1 (/ (- (+ (* -1/2 (/ (+ (* -1/3 n) (* 1/4 n)) x)) (+ (* -1/4 (/ n x)) (* 1/6 (/ n x)))) (+ (* -1/3 n) (* 1/4 n))) x)) (* -1/2 n)) x)))))","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x))","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* -1 (/ (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 x))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))))) x)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) x))","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* -1 (/ (+ (* -1 (/ (+ (log -1) (+ (* -1 (log (/ -1 x))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))))))) x)) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 x))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x)))))))) x)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) x))","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* -1 (/ (+ (* -1 (/ (+ (log -1) (+ (* -1 (log (/ -1 x))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* -1 (/ (+ (* -1 (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* -1/2 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* -1/4 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* 2/3 (+ (log -1) (* -1 (log (/ -1 x))))) (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))))))) x)) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x)))))))))) x)) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 x))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x)))))))) x)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) x))","(pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)","(* -1 (* x (- (* -1 (/ (- 1/2 (* 1/12 (/ 1 x))) x)) 1)))","(* -1 (* x (- (* -1 (/ (+ 1/2 (* -1 (/ (- 1/12 (* 1/24 (/ 1 x))) x))) x)) 1)))","(/ (- (pow (log (+ 1 x)) 3) (pow (log x) 3)) (* n (+ (* (log x) (+ (log x) (log (+ 1 x)))) (pow (log (+ 1 x)) 2))))","(/ (- (pow (log (+ 1 x)) 3) (pow (log x) 3)) n)","(- (exp (/ (log (+ 1 x)) n)) (exp (/ (log x) n)))","(/ n (- (pow (log (+ 1 x)) 3) (pow (log x) 3)))","(/ (- (log (+ 1 x)) (log x)) n)","(/ (log (/ (+ 1 x) x)) n)","(/ n (- (log (+ 1 x)) (log x)))","(/ 1 n)","(/ (- (+ (log (+ 1 x)) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))) (+ (log x) (* 1/2 (/ (pow (log x) 2) n)))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n)))) (+ (log x) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n))))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/24 (/ (pow (log (+ 1 x)) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))))) (+ (log x) (+ (* 1/24 (/ (pow (log x) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n)))))) n)","(* -1 (/ (- (* -1 (log (+ 1 x))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (* 1/2 (pow (log (+ 1 x)) 2)) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (* -1/6 (pow (log (+ 1 x)) 3)) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/24 (pow (log (+ 1 x)) 4)) (* 1/24 (pow (log x) 4))) n)) (* -1/6 (pow (log (+ 1 x)) 3))) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))"]],"memory":[[5864624,60518896]],"method":["egg-herbie"],"outputs":[["(* -1 (/ (log x) n))","(/.f64 (neg.f64 (log.f64 x)) n)","(+ (* -1 (/ (log x) n)) (/ x n))","(-.f64 (/.f64 x n) (/.f64 (log.f64 x) n))","(+ (* -1 (/ (log x) n)) (* x (+ (* -1 (* x (+ (* -1 (/ (+ 1 (* -1/2 (log x))) (* n (log x)))) (/ 1 (* n (log x)))))) (/ 1 n))))","(fma.f64 (fma.f64 (neg.f64 x) (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (log.f64 x) n)) (/.f64 (/.f64 (fma.f64 #s(literal -1/2 binary64) (log.f64 x) #s(literal 1 binary64)) n) (log.f64 x))) (/.f64 #s(literal 1 binary64) n)) x (/.f64 (neg.f64 (log.f64 x)) n))","(+ (* -1 (/ (log x) n)) (* x (+ (* x (- (* x (- (* 1/2 (/ 1 (* n (log x)))) (+ (* -1 (/ (+ (* -1 (/ (+ 1 (* -1/2 (log x))) (* n (log x)))) (/ 1 (* n (log x)))) (log x))) (* -1 (/ (- (* 1/3 (log x)) 1) (* n (log x))))))) (+ (* -1 (/ (+ 1 (* -1/2 (log x))) (* n (log x)))) (/ 1 (* n (log x)))))) (/ 1 n))))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 (log.f64 x) n)) (-.f64 (/.f64 (neg.f64 (fma.f64 #s(literal 1/3 binary64) (log.f64 x) #s(literal -1 binary64))) (*.f64 (log.f64 x) n)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (log.f64 x) n)) (/.f64 (/.f64 (fma.f64 #s(literal -1/2 binary64) (log.f64 x) #s(literal 1 binary64)) n) (log.f64 x))) (log.f64 x)))) x (neg.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (log.f64 x) n)) (/.f64 (/.f64 (fma.f64 #s(literal -1/2 binary64) (log.f64 x) #s(literal 1 binary64)) n) (log.f64 x))))) x (/.f64 #s(literal 1 binary64) n)) x (/.f64 (neg.f64 (log.f64 x)) n))","(* -1 (/ (pow (log x) 3) n))","(neg.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n))","(+ (* -1 (/ (pow (log x) 3) n)) (/ (pow x 3) n))","(-.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) n) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n))","(+ (* -1 (/ (pow (log x) 3) n)) (* (pow x 3) (+ (* -3/2 (/ x n)) (/ 1 n))))","(fma.f64 (fma.f64 #s(literal -3/2 binary64) (/.f64 x n) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x #s(literal 3 binary64)) (neg.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n)))","(+ (* -1 (/ (pow (log x) 3) n)) (* (pow x 3) (+ (* x (- (* 7/4 (/ x n)) (* 3/2 (/ 1 n)))) (/ 1 n))))","(fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 7/4 binary64) (/.f64 x n)) (/.f64 #s(literal 3/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) (pow.f64 x #s(literal 3 binary64)) (neg.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n)))","(- 1 (exp (/ (log x) n)))","(-.f64 #s(literal 1 binary64) (exp.f64 (/.f64 (log.f64 x) n)))","(- (+ 1 (/ x n)) (exp (/ (log x) n)))","(-.f64 (+.f64 (/.f64 x n) #s(literal 1 binary64)) (exp.f64 (/.f64 (log.f64 x) n)))","(- (+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(-.f64 (fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64)) (exp.f64 (/.f64 (log.f64 x) n)))","(- (+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(-.f64 (fma.f64 (fma.f64 (-.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64)) (exp.f64 (/.f64 (log.f64 x) n)))","(* -1 (/ n (pow (log x) 3)))","(/.f64 (neg.f64 n) (pow.f64 (log.f64 x) #s(literal 3 binary64)))","(+ (* -1 (/ n (pow (log x) 3))) (* -1 (/ (* n (pow x 3)) (pow (log x) 6))))","(-.f64 (/.f64 (neg.f64 n) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) n) (pow.f64 (log.f64 x) #s(literal 6 binary64))))","(+ (* -1 (/ n (pow (log x) 3))) (* (pow x 3) (- (* 3/2 (/ (* n x) (pow (log x) 6))) (/ n (pow (log x) 6)))))","(fma.f64 (-.f64 (/.f64 (*.f64 #s(literal 3/2 binary64) (*.f64 x n)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (/.f64 n (pow.f64 (log.f64 x) #s(literal 6 binary64)))) (pow.f64 x #s(literal 3 binary64)) (/.f64 (neg.f64 n) (pow.f64 (log.f64 x) #s(literal 3 binary64))))","(+ (* -1 (/ n (pow (log x) 3))) (* (pow x 3) (- (* x (- (* -7/4 (/ (* n x) (pow (log x) 6))) (* -3/2 (/ n (pow (log x) 6))))) (/ n (pow (log x) 6)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal -7/4 binary64) (*.f64 n (/.f64 x (pow.f64 (log.f64 x) #s(literal 6 binary64)))) (*.f64 #s(literal 3/2 binary64) (/.f64 n (pow.f64 (log.f64 x) #s(literal 6 binary64))))) x (neg.f64 (/.f64 n (pow.f64 (log.f64 x) #s(literal 6 binary64))))) (pow.f64 x #s(literal 3 binary64)) (/.f64 (neg.f64 n) (pow.f64 (log.f64 x) #s(literal 3 binary64))))","(+ (* -1 (/ (log x) n)) (* x (+ (* -1/2 (/ x n)) (/ 1 n))))","(-.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 x n) (/.f64 #s(literal 1 binary64) n)) x) (/.f64 (log.f64 x) n))","(+ (* -1 (/ (log x) n)) (* x (+ (* x (- (* 1/3 (/ x n)) (* 1/2 (/ 1 n)))) (/ 1 n))))","(fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/3 binary64) (/.f64 x n)) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x (/.f64 (neg.f64 (log.f64 x)) n))","(* -1 (log x))","(neg.f64 (log.f64 x))","(- x (log x))","(-.f64 x (log.f64 x))","(- (* x (+ 1 (* -1/2 x))) (log x))","(fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) x (neg.f64 (log.f64 x)))","(- (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) (log x))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x (neg.f64 (log.f64 x)))","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(+ x (* -1 (log x)))","(-.f64 x (log.f64 x))","(+ (* -1 (log x)) (* x (+ 1 (* -1/2 x))))","(fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) x (neg.f64 (log.f64 x)))","(+ (* -1 (log x)) (* x (+ 1 (* x (- (* 1/3 x) 1/2)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x (neg.f64 (log.f64 x)))","(/ (+ 1 x) x)","(/.f64 (+.f64 #s(literal 1 binary64) x) x)","(* -1 (/ n (log x)))","(/.f64 (neg.f64 n) (log.f64 x))","(+ (* -1 (/ n (log x))) (* -1 (/ (* n x) (pow (log x) 2))))","(-.f64 (/.f64 (neg.f64 n) (log.f64 x)) (/.f64 (*.f64 x n) (pow.f64 (log.f64 x) #s(literal 2 binary64))))","(+ (* -1 (/ n (log x))) (* x (- (* -1 (* x (+ (* -1/2 (/ n (pow (log x) 2))) (/ n (pow (log x) 3))))) (/ n (pow (log x) 2)))))","(fma.f64 (-.f64 (*.f64 (neg.f64 x) (fma.f64 (/.f64 n (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64) (/.f64 n (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (/.f64 n (pow.f64 (log.f64 x) #s(literal 2 binary64)))) x (/.f64 (neg.f64 n) (log.f64 x)))","(+ (* -1 (/ n (log x))) (* x (- (* x (- (* -1 (* x (+ (* -1 (/ n (pow (log x) 3))) (+ (* 1/3 (/ n (pow (log x) 2))) (/ n (pow (log x) 4)))))) (+ (* -1/2 (/ n (pow (log x) 2))) (/ n (pow (log x) 3))))) (/ n (pow (log x) 2)))))","(fma.f64 (fma.f64 (-.f64 (*.f64 (neg.f64 x) (-.f64 (fma.f64 (/.f64 n (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/3 binary64) (/.f64 n (pow.f64 (log.f64 x) #s(literal 4 binary64)))) (/.f64 n (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (fma.f64 (/.f64 n (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64) (/.f64 n (pow.f64 (log.f64 x) #s(literal 3 binary64))))) x (neg.f64 (/.f64 n (pow.f64 (log.f64 x) #s(literal 2 binary64))))) x (/.f64 (neg.f64 n) (log.f64 x)))","(* -1 (pow (log x) 3))","(pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64))","(- (pow x 3) (pow (log x) 3))","(-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))","(- (* (pow x 3) (+ 1 (* -3/2 x))) (pow (log x) 3))","(fma.f64 (fma.f64 #s(literal -3/2 binary64) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)) (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64)))","(- (* (pow x 3) (+ 1 (* x (- (* 7/4 x) 3/2)))) (pow (log x) 3))","(fma.f64 (fma.f64 (fma.f64 #s(literal 7/4 binary64) x #s(literal -3/2 binary64)) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)) (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64)))","(pow (log x) 3)","(pow.f64 (log.f64 x) #s(literal 3 binary64))","1","#s(literal 1 binary64)","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(/ -1 (log x))","(/.f64 #s(literal -1 binary64) (log.f64 x))","(- (* -1 (/ x (pow (log x) 2))) (/ 1 (log x)))","(-.f64 (/.f64 (neg.f64 x) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (log.f64 x)))","(- (* x (- (* x (- (* 1/2 (/ 1 (pow (log x) 2))) (/ 1 (pow (log x) 3)))) (/ 1 (pow (log x) 2)))) (/ 1 (log x)))","(fma.f64 (-.f64 (*.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) x) (/.f64 #s(literal 1 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) x (neg.f64 (/.f64 #s(literal 1 binary64) (log.f64 x))))","(- (* x (- (* x (- (+ (* 1/2 (/ 1 (pow (log x) 2))) (* x (- (* 1/2 (/ 1 (pow (log x) 3))) (+ (* -1 (/ (- (* 1/2 (/ 1 (pow (log x) 2))) (/ 1 (pow (log x) 3))) (log x))) (* 1/3 (/ 1 (pow (log x) 2))))))) (/ 1 (pow (log x) 3)))) (/ 1 (pow (log x) 2)))) (/ 1 (log x)))","(fma.f64 (fma.f64 (-.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (-.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (log.f64 x)))) x (/.f64 #s(literal 1/2 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) x (neg.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) x (neg.f64 (/.f64 #s(literal 1 binary64) (log.f64 x))))","(/ 1 (* n x))","(/.f64 (/.f64 #s(literal 1 binary64) n) x)","(/ (- (+ (* -1 (/ (* (log (/ 1 x)) (+ 1 (log (/ 1 x)))) (* n (* x (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* -1/2 (/ (pow (log (/ 1 x)) 2) (* n (* x (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (/ 1 n))) (* -1 (/ (log (/ 1 x)) (* n (* x (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))))) x)","(/.f64 (-.f64 (fma.f64 (/.f64 (log.f64 x) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64))) x)) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 x)) n) (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64))) x)) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) (/.f64 #s(literal 1 binary64) n))) (/.f64 (log.f64 x) (*.f64 (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64))) x) n))) x)","(/ (- (+ (* -1 (/ (* (log (/ 1 x)) (+ 1 (log (/ 1 x)))) (* n (* x (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* -1 (/ (* (log (/ 1 x)) (- (* -2/3 (log (/ 1 x))) 1)) (* n (* (pow x 2) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* -1/2 (/ (pow (log (/ 1 x)) 2) (* n (* x (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* 1/3 (/ (pow (log (/ 1 x)) 2) (* n (* (pow x 2) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* 2 (/ (log (/ 1 x)) (* n (* (pow x 2) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (/ 1 n)))))) (+ (* -1 (/ (log (/ 1 x)) (* n (* x (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* 1/2 (/ (log (/ 1 x)) (* n (* (pow x 2) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (/ (log (/ 1 x)) (* n (* (pow x 2) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))) (/ (* (+ (* -2 (log (/ 1 x))) (* -1 (log (/ 1 x)))) (- (+ (* -1 (/ (* (log (/ 1 x)) (+ 1 (log (/ 1 x)))) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))) (* -1/2 (/ (pow (log (/ 1 x)) 2) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (* -1 (/ (log (/ 1 x)) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))))) (* (pow x 2) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))))) x)","(/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (log.f64 x) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64))) x)) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 x)) n) (fma.f64 (/.f64 (log.f64 x) (*.f64 (*.f64 x x) n)) (/.f64 (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x n)) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (*.f64 (*.f64 x x) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) (/.f64 #s(literal 1/3 binary64) n) (fma.f64 (/.f64 (neg.f64 (log.f64 x)) (*.f64 (*.f64 (*.f64 x x) n) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) #s(literal 2 binary64) (/.f64 #s(literal 1 binary64) n)))))) (/.f64 (log.f64 x) (*.f64 (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64))) x) n))) (fma.f64 #s(literal 3/2 binary64) (/.f64 (neg.f64 (log.f64 x)) (*.f64 (*.f64 (*.f64 x x) n) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) (/.f64 (*.f64 (fma.f64 (/.f64 (log.f64 x) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 x)) n) (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) (*.f64 #s(literal -1/3 binary64) (/.f64 (/.f64 (log.f64 x) n) (pow.f64 (log.f64 x) #s(literal 2 binary64)))))) (*.f64 (neg.f64 (log.f64 x)) #s(literal -3 binary64))) (*.f64 (*.f64 x x) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64))))))) x)","(/ (- (+ (* -4/3 (/ (log (/ 1 x)) (* n (* (pow x 3) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* -1 (/ (* (log (/ 1 x)) (+ 11/12 (* 1/2 (log (/ 1 x))))) (* n (* (pow x 3) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* -1 (/ (* (log (/ 1 x)) (+ 1 (log (/ 1 x)))) (* n (* x (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* -1 (/ (* (log (/ 1 x)) (- (* -2/3 (log (/ 1 x))) 1)) (* n (* (pow x 2) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* -1/2 (/ (+ 1 (log (/ 1 x))) (* n (* (pow x 3) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* -1/2 (/ (pow (log (/ 1 x)) 2) (* n (* x (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* -1/4 (/ (pow (log (/ 1 x)) 2) (* n (* (pow x 3) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* 1/3 (/ (pow (log (/ 1 x)) 2) (* n (* (pow x 2) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* 2 (/ (log (/ 1 x)) (* n (* (pow x 2) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (/ 1 n)))))))))) (+ (* -1 (/ (log (/ 1 x)) (* n (* x (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* -2/3 (/ (log (/ 1 x)) (* n (* (pow x 3) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* -1/3 (/ (log (/ 1 x)) (* n (* (pow x 3) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (* 1/2 (/ (log (/ 1 x)) (* n (* (pow x 2) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (+ (/ (log (/ 1 x)) (* n (* (pow x 2) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))) (+ (/ (* (+ 1 (+ (log (/ 1 x)) (* 1/2 (log (/ 1 x))))) (- (+ (* -1 (/ (* (log (/ 1 x)) (+ 1 (log (/ 1 x)))) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))) (* -1/2 (/ (pow (log (/ 1 x)) 2) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (* -1 (/ (log (/ 1 x)) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))))) (* (pow x 3) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))) (+ (/ (* (+ (* -2 (log (/ 1 x))) (* -1 (log (/ 1 x)))) (- (+ (* -1 (/ (* (log (/ 1 x)) (+ 1 (log (/ 1 x)))) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))) (* -1/2 (/ (pow (log (/ 1 x)) 2) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (* -1 (/ (log (/ 1 x)) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))))) (* (pow x 2) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))) (/ (* (+ (* -2 (log (/ 1 x))) (* -1 (log (/ 1 x)))) (- (+ (* -1 (/ (* (log (/ 1 x)) (- (* -2/3 (log (/ 1 x))) 1)) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))) (+ (* 1/3 (/ (pow (log (/ 1 x)) 2) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))) (* 2 (/ (log (/ 1 x)) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))))) (+ (* 1/2 (/ (log (/ 1 x)) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))) (+ (/ (log (/ 1 x)) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))) (/ (* (+ (* -2 (log (/ 1 x))) (* -1 (log (/ 1 x)))) (- (+ (* -1 (/ (* (log (/ 1 x)) (+ 1 (log (/ 1 x)))) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))) (* -1/2 (/ (pow (log (/ 1 x)) 2) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))) (* -1 (/ (log (/ 1 x)) (* n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))))) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))))) (* (pow x 3) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))))))))) x)","(/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 #s(literal -4/3 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) n)) (/.f64 (neg.f64 (log.f64 x)) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (fma.f64 (/.f64 (log.f64 x) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (fma.f64 (neg.f64 (log.f64 x)) #s(literal 1/2 binary64) #s(literal 11/12 binary64)) n) (fma.f64 (/.f64 (log.f64 x) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64))) x)) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 x)) n) (fma.f64 (/.f64 (log.f64 x) (*.f64 (*.f64 x x) n)) (/.f64 (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 x)) n) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64))) x))) (fma.f64 (/.f64 #s(literal -1/4 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) n)) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (*.f64 (*.f64 x x) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) (/.f64 #s(literal 1/3 binary64) n) (fma.f64 (/.f64 (neg.f64 (log.f64 x)) (*.f64 (*.f64 (*.f64 x x) n) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) #s(literal 2 binary64) (/.f64 #s(literal 1 binary64) n))))))))) (/.f64 (log.f64 x) (*.f64 (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64))) x) n))) (fma.f64 (/.f64 (neg.f64 (log.f64 x)) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) n) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) #s(literal -1 binary64) (fma.f64 #s(literal 3/2 binary64) (/.f64 (neg.f64 (log.f64 x)) (*.f64 (*.f64 (*.f64 x x) n) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) (fma.f64 (/.f64 (fma.f64 (/.f64 (log.f64 x) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 x)) n) (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) (*.f64 #s(literal -1/3 binary64) (/.f64 (/.f64 (log.f64 x) n) (pow.f64 (log.f64 x) #s(literal 2 binary64)))))) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (+.f64 (/.f64 (fma.f64 #s(literal 3/2 binary64) (neg.f64 (log.f64 x)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64))) (*.f64 (/.f64 (neg.f64 (log.f64 x)) x) (/.f64 #s(literal -3 binary64) x))) (*.f64 (/.f64 (-.f64 (fma.f64 (/.f64 (log.f64 x) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (/.f64 (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 x)) #s(literal -1 binary64)) n) (fma.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) (*.f64 (*.f64 #s(literal -1/3 binary64) (/.f64 (/.f64 (log.f64 x) n) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal 2 binary64)))) (fma.f64 #s(literal 3/2 binary64) (*.f64 #s(literal -1/3 binary64) (/.f64 (/.f64 (log.f64 x) n) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (/.f64 (*.f64 (fma.f64 (/.f64 (log.f64 x) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 x)) n) (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) (*.f64 #s(literal -1/3 binary64) (/.f64 (/.f64 (log.f64 x) n) (pow.f64 (log.f64 x) #s(literal 2 binary64)))))) (*.f64 (neg.f64 (log.f64 x)) #s(literal -3 binary64))) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64)))))) (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -3 binary64)) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64))))))))) x)","(/ (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)) (* n x))","(*.f64 (/.f64 #s(literal 3 binary64) x) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n))","(/ (+ (* -2 (/ (log (/ 1 x)) (* n x))) (+ (* -1 (/ (* (log (/ 1 x)) (+ 1 (log (/ 1 x)))) (* n x))) (+ (* -1/2 (/ (pow (log (/ 1 x)) 2) (* n x))) (+ (* 2 (/ (pow (log (/ 1 x)) 2) n)) (/ (pow (log (/ 1 x)) 2) n))))) x)","(/.f64 (fma.f64 (/.f64 #s(literal -2 binary64) n) (/.f64 (neg.f64 (log.f64 x)) x) (fma.f64 (/.f64 (log.f64 x) x) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 x)) n) (fma.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) (*.f64 #s(literal 3 binary64) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n))))) x)","(/ (+ (* -2 (/ (log (/ 1 x)) (* n x))) (+ (* -1 (/ (* (log (/ 1 x)) (+ 1 (log (/ 1 x)))) (* n x))) (+ (* -1 (/ (* (log (/ 1 x)) (- (* -2/3 (log (/ 1 x))) 1)) (* n (pow x 2)))) (+ (* -1/2 (/ (pow (log (/ 1 x)) 2) (* n x))) (+ (* 1/3 (/ (pow (log (/ 1 x)) 2) (* n (pow x 2)))) (+ (* 2 (/ (log (/ 1 x)) (* n (pow x 2)))) (+ (* 2 (/ (pow (log (/ 1 x)) 2) n)) (+ (/ 1 (* n (pow x 2))) (/ (pow (log (/ 1 x)) 2) n))))))))) x)","(/.f64 (fma.f64 (/.f64 #s(literal -2 binary64) n) (/.f64 (neg.f64 (log.f64 x)) x) (fma.f64 (log.f64 x) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 x)) (*.f64 x n)) (fma.f64 (/.f64 (log.f64 x) (*.f64 x x)) (/.f64 (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 x)) #s(literal -1 binary64)) n) (fma.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 #s(literal 1/3 binary64) n) (fma.f64 #s(literal 2 binary64) (fma.f64 (/.f64 (/.f64 (log.f64 x) n) x) (/.f64 #s(literal -1 binary64) x) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n)) (+.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) n)) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n)))))))) x)","(/ (- (+ (* -2 (/ (log (/ 1 x)) (* n x))) (+ (* -4/3 (/ (log (/ 1 x)) (* n (pow x 3)))) (+ (* -1 (/ (* (log (/ 1 x)) (+ 11/12 (* 1/2 (log (/ 1 x))))) (* n (pow x 3)))) (+ (* -1 (/ (* (log (/ 1 x)) (+ 1 (log (/ 1 x)))) (* n x))) (+ (* -1 (/ (* (log (/ 1 x)) (- (* -2/3 (log (/ 1 x))) 1)) (* n (pow x 2)))) (+ (* -1/2 (/ (+ 1 (log (/ 1 x))) (* n (pow x 3)))) (+ (* -1/2 (/ (pow (log (/ 1 x)) 2) (* n x))) (+ (* -1/4 (/ (pow (log (/ 1 x)) 2) (* n (pow x 3)))) (+ (* 1/3 (/ (pow (log (/ 1 x)) 2) (* n (pow x 2)))) (+ (* 2 (/ (log (/ 1 x)) (* n (pow x 2)))) (+ (* 2 (/ (pow (log (/ 1 x)) 2) n)) (+ (/ 1 (* n (pow x 2))) (/ (pow (log (/ 1 x)) 2) n))))))))))))) (/ 1 (* n (pow x 3)))) x)","(/.f64 (-.f64 (fma.f64 (/.f64 #s(literal -2 binary64) n) (/.f64 (neg.f64 (log.f64 x)) x) (fma.f64 (/.f64 #s(literal -4/3 binary64) n) (/.f64 (neg.f64 (log.f64 x)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (/.f64 (log.f64 x) (pow.f64 x #s(literal 3 binary64))) (/.f64 (fma.f64 (neg.f64 (log.f64 x)) #s(literal 1/2 binary64) #s(literal 11/12 binary64)) n) (fma.f64 (/.f64 (log.f64 x) x) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 x)) n) (fma.f64 (/.f64 (log.f64 x) (*.f64 x x)) (/.f64 (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 x)) #s(literal -1 binary64)) n) (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 x)) n) (pow.f64 x #s(literal 3 binary64))) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) x)) (fma.f64 (/.f64 #s(literal -1/4 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 #s(literal 1/3 binary64) n) (fma.f64 #s(literal 2 binary64) (fma.f64 (/.f64 (/.f64 (log.f64 x) n) x) (/.f64 #s(literal -1 binary64) x) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n)) (+.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) n)) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n))))))))))) (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) n))) x)","(/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x))","(/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x n))","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x)) x)","(/.f64 (fma.f64 (exp.f64 (/.f64 (log.f64 x) n)) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2)))) x)","(/.f64 (fma.f64 (exp.f64 (/.f64 (log.f64 x) n)) (+.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) (*.f64 x x)) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x)) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) (pow x 3)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2))))) x)","(/.f64 (+.f64 (fma.f64 (exp.f64 (/.f64 (log.f64 x) n)) (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 11/24 binary64) (*.f64 n n)) (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 4 binary64)))) (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 #s(literal 1/4 binary64) n))) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (exp.f64 (/.f64 (log.f64 x) n)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) (*.f64 x x)))) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n)) x)","(/ (* n x) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))","(*.f64 (/.f64 x #s(literal 3 binary64)) (/.f64 n (pow.f64 (log.f64 x) #s(literal 2 binary64))))","(* x (+ (* -1 (/ (* n (+ (* -2 (log (/ 1 x))) (+ (* -1 (* (log (/ 1 x)) (+ 1 (log (/ 1 x))))) (* -1/2 (pow (log (/ 1 x)) 2))))) (* x (pow (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)) 2)))) (/ n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))))","(*.f64 (fma.f64 (neg.f64 (/.f64 n x)) (/.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 x)) (fma.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 x) (-.f64 #s(literal 1 binary64) (log.f64 x))))) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 n (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) x)","(* x (- (+ (* -1 (/ (+ (* -1 (/ (* n (pow (+ (* -2 (log (/ 1 x))) (+ (* -1 (* (log (/ 1 x)) (+ 1 (log (/ 1 x))))) (* -1/2 (pow (log (/ 1 x)) 2)))) 2)) (pow (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)) 3))) (/ (* n (+ 1 (+ (* -1 (* (log (/ 1 x)) (- (* -2/3 (log (/ 1 x))) 1))) (+ (* 1/3 (pow (log (/ 1 x)) 2)) (* 2 (log (/ 1 x))))))) (pow (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)) 2))) (pow x 2))) (/ n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))) (/ (* n (+ (* -2 (log (/ 1 x))) (+ (* -1 (* (log (/ 1 x)) (+ 1 (log (/ 1 x))))) (* -1/2 (pow (log (/ 1 x)) 2))))) (* x (pow (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)) 2)))))","(*.f64 (-.f64 (-.f64 (/.f64 n (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (/.f64 (fma.f64 (neg.f64 n) (/.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 x)) (fma.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 x) (-.f64 #s(literal 1 binary64) (log.f64 x))))) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 3 binary64))) (/.f64 (fma.f64 (fma.f64 (log.f64 x) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (fma.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal 1/3 binary64) (*.f64 (neg.f64 (log.f64 x)) #s(literal 2 binary64)))) n n) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 2 binary64)))) (*.f64 x x))) (*.f64 (/.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 x)) (fma.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 x) (-.f64 #s(literal 1 binary64) (log.f64 x))))) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 n x))) x)","(* x (- (+ (* -1 (/ (+ (* -1 (/ (* n (* (+ 1 (+ (* -1 (* (log (/ 1 x)) (- (* -2/3 (log (/ 1 x))) 1))) (+ (* 1/3 (pow (log (/ 1 x)) 2)) (* 2 (log (/ 1 x)))))) (+ (* -2 (log (/ 1 x))) (+ (* -1 (* (log (/ 1 x)) (+ 1 (log (/ 1 x))))) (* -1/2 (pow (log (/ 1 x)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)) 3))) (+ (* -1 (/ (* (+ (* -2 (log (/ 1 x))) (+ (* -1 (* (log (/ 1 x)) (+ 1 (log (/ 1 x))))) (* -1/2 (pow (log (/ 1 x)) 2)))) (+ (* -1 (/ (* n (pow (+ (* -2 (log (/ 1 x))) (+ (* -1 (* (log (/ 1 x)) (+ 1 (log (/ 1 x))))) (* -1/2 (pow (log (/ 1 x)) 2)))) 2)) (pow (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)) 3))) (/ (* n (+ 1 (+ (* -1 (* (log (/ 1 x)) (- (* -2/3 (log (/ 1 x))) 1))) (+ (* 1/3 (pow (log (/ 1 x)) 2)) (* 2 (log (/ 1 x))))))) (pow (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)) 2)))) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))) (/ (* n (- (+ (* -4/3 (log (/ 1 x))) (+ (* -1 (* (log (/ 1 x)) (+ 11/12 (* 1/2 (log (/ 1 x)))))) (+ (* -1/2 (+ 1 (log (/ 1 x)))) (* -1/4 (pow (log (/ 1 x)) 2))))) 1)) (pow (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)) 2)))) (pow x 3))) (/ n (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)))) (+ (* -1 (/ (* n (pow (+ (* -2 (log (/ 1 x))) (+ (* -1 (* (log (/ 1 x)) (+ 1 (log (/ 1 x))))) (* -1/2 (pow (log (/ 1 x)) 2)))) 2)) (* (pow x 2) (pow (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)) 3)))) (+ (/ (* n (+ 1 (+ (* -1 (* (log (/ 1 x)) (- (* -2/3 (log (/ 1 x))) 1))) (+ (* 1/3 (pow (log (/ 1 x)) 2)) (* 2 (log (/ 1 x))))))) (* (pow x 2) (pow (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)) 2))) (/ (* n (+ (* -2 (log (/ 1 x))) (+ (* -1 (* (log (/ 1 x)) (+ 1 (log (/ 1 x))))) (* -1/2 (pow (log (/ 1 x)) 2))))) (* x (pow (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)) 2)))))))","(*.f64 (-.f64 (-.f64 (/.f64 n (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (/.f64 (-.f64 (fma.f64 #s(literal -1/3 binary64) (/.f64 (*.f64 (fma.f64 (neg.f64 n) (/.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 x)) (fma.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 x) (-.f64 #s(literal 1 binary64) (log.f64 x))))) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 3 binary64))) (/.f64 (fma.f64 (fma.f64 (log.f64 x) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (fma.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal 1/3 binary64) (*.f64 (neg.f64 (log.f64 x)) #s(literal 2 binary64)))) n n) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 2 binary64)))) (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 x)) (fma.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 x) (-.f64 #s(literal 1 binary64) (log.f64 x)))))) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (/.f64 (fma.f64 (fma.f64 #s(literal -4/3 binary64) (neg.f64 (log.f64 x)) (fma.f64 (log.f64 x) (fma.f64 (neg.f64 (log.f64 x)) #s(literal 1/2 binary64) #s(literal 11/12 binary64)) (fma.f64 #s(literal -1/4 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (log.f64 x)) #s(literal -1/2 binary64))))) n (neg.f64 n)) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 2 binary64)))) (/.f64 (*.f64 (fma.f64 (fma.f64 (log.f64 x) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (fma.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal 1/3 binary64) (*.f64 (neg.f64 (log.f64 x)) #s(literal 2 binary64)))) n n) (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 x)) (fma.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 x) (-.f64 #s(literal 1 binary64) (log.f64 x)))))) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 3 binary64)))) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (neg.f64 n) (/.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 x)) (fma.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 x) (-.f64 #s(literal 1 binary64) (log.f64 x))))) #s(literal 2 binary64)) (*.f64 (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 3 binary64)) (*.f64 x x))) (fma.f64 (/.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 x)) (fma.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 x) (-.f64 #s(literal 1 binary64) (log.f64 x))))) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 n x) (/.f64 (fma.f64 (fma.f64 (log.f64 x) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (fma.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal 1/3 binary64) (*.f64 (neg.f64 (log.f64 x)) #s(literal 2 binary64)))) n n) (*.f64 (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 x x)))))) x)","(/ (- (/ 1 n) (* 1/2 (/ 1 (* n x)))) x)","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (/.f64 #s(literal 1/2 binary64) n) x)) x)","(/ (- (+ (/ 1/3 (* n (pow x 2))) (/ 1 n)) (/ 1/2 (* n x))) x)","(/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) n)) (/.f64 #s(literal 1 binary64) n)) (/.f64 (/.f64 #s(literal 1/2 binary64) n) x)) x)","(/ (- (+ (/ 1 n) (* 1/3 (/ 1 (* n (pow x 2))))) (+ (/ 1/2 (* n x)) (* 1/4 (/ 1 (* n (pow x 3)))))) x)","(/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) n)) (/.f64 #s(literal 1 binary64) n)) (+.f64 (/.f64 #s(literal 1/4 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) n)) (/.f64 (/.f64 #s(literal 1/2 binary64) n) x))) x)","(/ (- 1 (* 1/2 (/ 1 x))) x)","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (* 1/2 (/ 1 x))) x)","(/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x)) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3))))) x)","(/.f64 (-.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x)) (/.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal 3 binary64)))) x)","(+ 1 (/ 1 x))","(+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(* n x)","(*.f64 x n)","(* x (+ n (* 1/2 (/ n x))))","(*.f64 (fma.f64 (/.f64 n x) #s(literal 1/2 binary64) n) x)","(* x (- (+ n (* -1 (/ (+ (* -1/4 n) (* 1/3 n)) (pow x 2)))) (* -1/2 (/ n x))))","(*.f64 (-.f64 (-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x)","(* x (- (+ n (* -1 (/ (+ (* -1/4 n) (+ (* 1/6 n) (* 1/2 (+ (* -1/4 n) (* 1/3 n))))) (pow x 3)))) (+ (* -1/2 (/ n x)) (+ (* -1/4 (/ n (pow x 2))) (* 1/3 (/ n (pow x 2)))))))","(*.f64 (-.f64 (-.f64 n (/.f64 (fma.f64 n #s(literal -1/12 binary64) (*.f64 (*.f64 n #s(literal 1/12 binary64)) #s(literal 1/2 binary64))) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (/.f64 n (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 (/.f64 n x) #s(literal -1/2 binary64)))) x)","(/ (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2)) x)","(/.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64))) x)","(/ (+ (* -2 (/ (log (/ 1 x)) x)) (+ (* -1 (/ (* (log (/ 1 x)) (+ 1 (log (/ 1 x)))) x)) (+ (* -1/2 (/ (pow (log (/ 1 x)) 2) x)) (+ (* 2 (pow (log (/ 1 x)) 2)) (pow (log (/ 1 x)) 2))))) x)","(/.f64 (fma.f64 (/.f64 (neg.f64 (log.f64 x)) x) #s(literal -2 binary64) (fma.f64 (log.f64 x) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 x)) x) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) #s(literal -1/2 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64)))))) x)","(/ (+ (* -2 (/ (log (/ 1 x)) x)) (+ (* -1 (/ (* (log (/ 1 x)) (+ 1 (log (/ 1 x)))) x)) (+ (* -1 (/ (* (log (/ 1 x)) (- (* -2/3 (log (/ 1 x))) 1)) (pow x 2))) (+ (* -1/2 (/ (pow (log (/ 1 x)) 2) x)) (+ (* 1/3 (/ (pow (log (/ 1 x)) 2) (pow x 2))) (+ (* 2 (/ (log (/ 1 x)) (pow x 2))) (+ (* 2 (pow (log (/ 1 x)) 2)) (+ (/ 1 (pow x 2)) (pow (log (/ 1 x)) 2))))))))) x)","(/.f64 (fma.f64 (/.f64 (neg.f64 (log.f64 x)) x) #s(literal -2 binary64) (fma.f64 (log.f64 x) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 x)) x) (fma.f64 (/.f64 (log.f64 x) x) (/.f64 (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 x)) #s(literal -1 binary64)) x) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) #s(literal -1/2 binary64) (fma.f64 (/.f64 #s(literal 1/3 binary64) x) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) (fma.f64 #s(literal 2 binary64) (fma.f64 (/.f64 (log.f64 x) x) (/.f64 #s(literal -1 binary64) x) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (fma.f64 (log.f64 x) (log.f64 x) (/.f64 #s(literal 1 binary64) (*.f64 x x))))))))) x)","(/ (- (+ (* -2 (/ (log (/ 1 x)) x)) (+ (* -4/3 (/ (log (/ 1 x)) (pow x 3))) (+ (* -1 (/ (* (log (/ 1 x)) (+ 11/12 (* 1/2 (log (/ 1 x))))) (pow x 3))) (+ (* -1 (/ (* (log (/ 1 x)) (+ 1 (log (/ 1 x)))) x)) (+ (* -1 (/ (* (log (/ 1 x)) (- (* -2/3 (log (/ 1 x))) 1)) (pow x 2))) (+ (* -1/2 (/ (+ 1 (log (/ 1 x))) (pow x 3))) (+ (* -1/2 (/ (pow (log (/ 1 x)) 2) x)) (+ (* -1/4 (/ (pow (log (/ 1 x)) 2) (pow x 3))) (+ (* 1/3 (/ (pow (log (/ 1 x)) 2) (pow x 2))) (+ (* 2 (/ (log (/ 1 x)) (pow x 2))) (+ (* 2 (pow (log (/ 1 x)) 2)) (+ (/ 1 (pow x 2)) (pow (log (/ 1 x)) 2))))))))))))) (/ 1 (pow x 3))) x)","(/.f64 (-.f64 (fma.f64 (/.f64 (neg.f64 (log.f64 x)) x) #s(literal -2 binary64) (fma.f64 (/.f64 (neg.f64 (log.f64 x)) (pow.f64 x #s(literal 3 binary64))) #s(literal -4/3 binary64) (fma.f64 (log.f64 x) (/.f64 (fma.f64 (neg.f64 (log.f64 x)) #s(literal 1/2 binary64) #s(literal 11/12 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (log.f64 x) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 x)) x) (fma.f64 (/.f64 (log.f64 x) x) (/.f64 (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 x)) #s(literal -1 binary64)) x) (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 x)) (pow.f64 x #s(literal 3 binary64))) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x)) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal -1/4 binary64) (fma.f64 (/.f64 #s(literal 1/3 binary64) x) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) (fma.f64 #s(literal 2 binary64) (fma.f64 (/.f64 (log.f64 x) x) (/.f64 #s(literal -1 binary64) x) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (fma.f64 (log.f64 x) (log.f64 x) (/.f64 #s(literal 1 binary64) (*.f64 x x)))))))))))) (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) x)","(* -1 (pow (log (/ 1 x)) 3))","(pow.f64 (log.f64 x) #s(literal 3 binary64))","x","(* x (+ 1 (/ 1 x)))","(+.f64 #s(literal 1 binary64) x)","(* x (+ 1 (* 1/2 (/ 1 x))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) x) x x)","(* x (- (+ 1 (* 1/2 (/ 1 x))) (/ 1/12 (pow x 2))))","(*.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) (/.f64 #s(literal 1/12 binary64) (*.f64 x x))) x)","(* x (- (+ 1 (+ (* 1/2 (/ 1 x)) (* 1/24 (/ 1 (pow x 3))))) (/ 1/12 (pow x 2))))","(*.f64 (-.f64 (+.f64 (+.f64 (/.f64 #s(literal 1/24 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64)) (/.f64 #s(literal 1/12 binary64) (*.f64 x x))) x)","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* n (* x (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -3 binary64))) (*.f64 (*.f64 x n) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))))","(* -1 (/ (+ (* -2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* -1 (/ (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* n (pow (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) 2)))) x)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))))) x))","(/.f64 (neg.f64 (fma.f64 (/.f64 #s(literal -2 binary64) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) n) (-.f64 (/.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (*.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) n)) (/.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) n) (-.f64 (*.f64 (/.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))) (+.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -3 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -3 binary64))) (*.f64 (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) #s(literal 2 binary64)) n)))) x)))) x)","(* -1 (/ (+ (* -2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (log (/ -1 x)) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (/ (log -1) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))))) (+ (/ (* (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1/2 (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* n (pow (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) 2))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* n (pow (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) 2))))) (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) x)) (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* n (pow (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) 2)))) x)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))))) x))","(/.f64 (neg.f64 (fma.f64 (/.f64 #s(literal -2 binary64) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) n) (-.f64 (/.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (*.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) n)) (/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) n) (*.f64 (/.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))) (+.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) #s(literal 2 binary64)))) (/.f64 (-.f64 (-.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/3 binary64) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) n) (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (/.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))) (/.f64 (/.f64 (log.f64 #s(literal -1 binary64)) n) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))))) (/.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (*.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) n))) (/.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) n) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))))) (fma.f64 (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -3/2 binary64) #s(literal 1 binary64)) (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) #s(literal 2 binary64))) (/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -3 binary64)) n) (*.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -3 binary64)) (/.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) n) (-.f64 (*.f64 (/.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))) (+.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -3 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -3 binary64))) (*.f64 (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) #s(literal 2 binary64)) n)))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))))))) x)) (/.f64 (*.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -3 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -3 binary64))) (*.f64 (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) #s(literal 2 binary64)) n))) x)))) x)","(* -1 (/ (+ (* -2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (log (/ -1 x)) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* -1/2 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* -1/4 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* 2/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (/ (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))))) (+ (/ (* (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1/2 (+ (log -1) (* -1 (log (/ -1 x))))))) (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* n (pow (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) 2))))) (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (/ (* (+ 1 (+ (* -2/3 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1/3 (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* n (pow (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) 2))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (- (+ (* -1 (/ (log (/ -1 x)) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (/ (log -1) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))))) (+ (/ (* (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1/2 (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* n (pow (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) 2))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* n (pow (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) 2))))) (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (+ (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (/ (log -1) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))))))) (+ (/ (* (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1/2 (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* n (pow (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) 2))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* n (pow (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) 2))))) (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) x)) (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* n (pow (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) 2)))) x)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) (* n (+ (* (+ (log -1) (* -1 (log (/ -1 x)))) (+ (* -2 (log (/ -1 x))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))))) x))","(/.f64 (neg.f64 (fma.f64 (/.f64 #s(literal -2 binary64) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) n) (-.f64 (/.f64 (neg.f64 (-.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) n) (*.f64 (/.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))) (+.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) #s(literal 2 binary64)))) (/.f64 (-.f64 (-.f64 (-.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/3 binary64) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) n) (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (/.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))) (/.f64 (/.f64 (log.f64 #s(literal -1 binary64)) n) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))))) (/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))) (/.f64 #s(literal -1/2 binary64) n) (fma.f64 (/.f64 #s(literal -1/4 binary64) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) n) (*.f64 (/.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))) (+.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -1/2 binary64) #s(literal 11/12 binary64)) #s(literal 2/3 binary64))))) (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (*.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) n))) (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -3/2 binary64) #s(literal 1 binary64)) (/.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) n) (-.f64 (*.f64 (/.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))) (+.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -3 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -3 binary64))) (*.f64 (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) #s(literal 2 binary64)) n)))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))) (fma.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -3 binary64)) (/.f64 (-.f64 (-.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/3 binary64) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) n) (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (/.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))) (/.f64 (/.f64 (log.f64 #s(literal -1 binary64)) n) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))))) (/.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (*.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) n))) (/.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) n) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))))) (fma.f64 (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -3/2 binary64) #s(literal 1 binary64)) (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) #s(literal 2 binary64))) (/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -3 binary64)) n) (*.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -3 binary64)) (/.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) n) (-.f64 (*.f64 (/.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))) (+.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -3 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -3 binary64))) (*.f64 (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) #s(literal 2 binary64)) n)))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))))))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -3 binary64))) (*.f64 (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) #s(literal 2 binary64)) n))))) x)) (/.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (*.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) n))) (/.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) n) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))))) (fma.f64 (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -3/2 binary64) #s(literal 1 binary64)) (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) #s(literal 2 binary64))) (/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -3 binary64)) n) (*.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -3 binary64)) (/.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) n) (-.f64 (*.f64 (/.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))) (+.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -3 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -3 binary64))) (*.f64 (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) #s(literal 2 binary64)) n)))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))))))) x)) (/.f64 (*.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -3 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -3 binary64))) (*.f64 (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) #s(literal 2 binary64)) n)))) x) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) (*.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) n))))) x)","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* n x)))","(/.f64 (neg.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -3 binary64))) (*.f64 x n))","(* -1 (/ (+ (* -2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) n)) (+ (* -1 (/ (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) n)) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) n))) x)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) n)))) x))","(/.f64 (neg.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) n) #s(literal -2 binary64) (-.f64 (/.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) n) (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) (+.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) n) #s(literal -1/2 binary64))) x)))) x)","(* -1 (/ (+ (* -2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) n)) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (log (/ -1 x)) n)) (+ (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) n)) (+ (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) n)) (+ (/ (log -1) n) (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) n))))) x)) (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) n)) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) n)))) x)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) n)))) x))","(/.f64 (neg.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) n) #s(literal -2 binary64) (-.f64 (/.f64 (neg.f64 (-.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) (+.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) n) #s(literal -1/2 binary64))) (/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) n) #s(literal -1/3 binary64) (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) (/.f64 (log.f64 #s(literal -1 binary64)) n))) (/.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) n)) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) n)) x))) x) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) n)))) x)","(* -1 (/ (+ (* -2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) n)) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (log (/ -1 x)) n)) (+ (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) n)) (+ (* -1 (/ (+ (* -1 (/ (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) n)) (+ (* -1/2 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) n)) (+ (* -1/4 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) n)) (+ (* 2/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) n))))) x)) (+ (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) n)) (+ (/ (log -1) n) (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) n)))))) x)) (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) n)) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))) n)))) x)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2) n)))) x))","(/.f64 (neg.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) n) #s(literal -2 binary64) (-.f64 (/.f64 (neg.f64 (-.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) (+.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) n) #s(literal -1/2 binary64))) (/.f64 (-.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) n) #s(literal -1/3 binary64) (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) (/.f64 (log.f64 #s(literal -1 binary64)) n))) (/.f64 (-.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) n) #s(literal -1/2 binary64) (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) (+.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -1/2 binary64) #s(literal 11/12 binary64)) #s(literal 2/3 binary64)) (*.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) n) #s(literal -1/4 binary64)))) (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -2/3 binary64) #s(literal 1 binary64)) n)) x)) (/.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) n)) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) n)) x))) x) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) n)))) x)","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x))","(/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (*.f64 x n))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (fma.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)))) x)","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(/.f64 (neg.f64 (neg.f64 (+.f64 (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n) (/.f64 (fma.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (neg.f64 (*.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))))) x)))) x)))) x)","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(/.f64 (neg.f64 (-.f64 (/.f64 (neg.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n))) n) (/.f64 (-.f64 (*.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) (/.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))))) (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (neg.f64 (*.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 11/24 binary64) (*.f64 n n)) (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 4 binary64)))) (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 #s(literal 1/4 binary64) n))) x)))) x)) x))) x)","(* -1 (/ (* n x) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))","(/.f64 (neg.f64 (*.f64 x n)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -3 binary64)))","(* -1 (* x (+ (/ n (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (/ (* n (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 x))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x)))))))) (* x (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) 2))))))","(*.f64 (neg.f64 x) (fma.f64 (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (pow.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -3 binary64)) #s(literal 2 binary64))) (/.f64 n x) (/.f64 n (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -3 binary64)))))","(* -1 (* x (+ (* -1 (/ (- (+ (* -1 (/ (* n (pow (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 x))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))))) 2)) (* x (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) 3)))) (/ (* n (+ (log -1) (+ (* -1 (log (/ -1 x))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x)))))))))) (* x (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) 2)))) (/ (* n (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 x))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x)))))))) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) 2))) x)) (/ n (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))))","(*.f64 (neg.f64 x) (-.f64 (/.f64 n (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -3 binary64))) (/.f64 (fma.f64 (neg.f64 (/.f64 n x)) (/.f64 (pow.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal 3 binary64)) #s(literal -27 binary64))) (*.f64 n (-.f64 (/.f64 (+.f64 (-.f64 (-.f64 (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -1/3 binary64))) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) (log.f64 (/.f64 #s(literal -1 binary64) x))) (log.f64 #s(literal -1 binary64))) (*.f64 (pow.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -3 binary64)) #s(literal 2 binary64)) x)) (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (pow.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -3 binary64)) #s(literal 2 binary64)))))) x)))","(* -1 (* x (+ (* -1 (/ (- (* -1 (/ (- (+ (* -1 (/ (* n (* (+ (log -1) (+ (* -1 (log (/ -1 x))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))))))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 x))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))))))) (* x (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) 3)))) (+ (* -1 (/ (* (+ (* -1 (/ (* n (pow (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 x))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))))) 2)) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) 3))) (/ (* n (+ (log -1) (+ (* -1 (log (/ -1 x))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x)))))))))) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 x))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x)))))))) (* x (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) (/ (* n (+ (* -1 (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* -1/2 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* -1/4 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* 2/3 (+ (log -1) (* -1 (log (/ -1 x))))) (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x)))))))))) (* x (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) 2))))) (+ (* -1 (/ (* n (pow (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 x))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))))) 2)) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) 3))) (/ (* n (+ (log -1) (+ (* -1 (log (/ -1 x))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x)))))))))) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) 2)))) x)) (/ (* n (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 x))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x)))))))) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) 2))) x)) (/ n (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))))","(*.f64 (neg.f64 x) (-.f64 (/.f64 n (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -3 binary64))) (/.f64 (-.f64 (/.f64 (neg.f64 (-.f64 (fma.f64 (neg.f64 (/.f64 n x)) (/.f64 (*.f64 (+.f64 (-.f64 (-.f64 (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -1/3 binary64))) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) (log.f64 (/.f64 #s(literal -1 binary64) x))) (log.f64 #s(literal -1 binary64))) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -1/2 binary64)))) (*.f64 (pow.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal 3 binary64)) #s(literal -27 binary64))) (fma.f64 (neg.f64 (fma.f64 (neg.f64 n) (/.f64 (pow.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal 3 binary64)) #s(literal -27 binary64))) (/.f64 (*.f64 (+.f64 (-.f64 (-.f64 (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -1/3 binary64))) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) (log.f64 (/.f64 #s(literal -1 binary64) x))) (log.f64 #s(literal -1 binary64))) n) (pow.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -3 binary64)) #s(literal 2 binary64))))) (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (*.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -3 binary64)) x)) (*.f64 (/.f64 (-.f64 (fma.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) #s(literal -1/2 binary64) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -1/2 binary64) #s(literal 11/12 binary64)) #s(literal 2/3 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -1/4 binary64)))) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -2/3 binary64) #s(literal 1 binary64))) (pow.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -3 binary64)) #s(literal 2 binary64))) (/.f64 n x)))) (fma.f64 (neg.f64 n) (/.f64 (pow.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal 3 binary64)) #s(literal -27 binary64))) (/.f64 (*.f64 (+.f64 (-.f64 (-.f64 (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -1/3 binary64))) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) (log.f64 (/.f64 #s(literal -1 binary64) x))) (log.f64 #s(literal -1 binary64))) n) (pow.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -3 binary64)) #s(literal 2 binary64)))))) x) (*.f64 n (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (pow.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -3 binary64)) #s(literal 2 binary64))))) x)))","(* -1 (/ (- (* 1/2 (/ 1 (* n x))) (/ 1 n)) x))","(neg.f64 (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) x) (/.f64 #s(literal 1 binary64) n)) x))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (* n x))) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(neg.f64 (/.f64 (-.f64 (neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x n)) (/.f64 #s(literal 1/2 binary64) n)) x)) (/.f64 #s(literal 1 binary64) n)) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 (* n x))) (* 1/3 (/ 1 n))) x)) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(neg.f64 (/.f64 (-.f64 (neg.f64 (/.f64 (-.f64 (neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) (*.f64 x n)) (/.f64 #s(literal 1/3 binary64) n)) x)) (/.f64 #s(literal 1/2 binary64) n)) x)) (/.f64 #s(literal 1 binary64) n)) x))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))","(/.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal -1 binary64) #s(literal 1 binary64)) x)","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))","(neg.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64)) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 x)) 1/3) x)) 1/2) x)) 1) x))","(neg.f64 (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64)) x))","(* -1 (* x (+ (* -1 n) (* -1/2 (/ n x)))))","(*.f64 (neg.f64 x) (fma.f64 (/.f64 n x) #s(literal -1/2 binary64) (neg.f64 n)))","(* -1 (* x (+ (* -1 n) (* -1 (/ (- (+ (* -1/3 (/ n x)) (* 1/4 (/ n x))) (* -1/2 n)) x)))))","(*.f64 (neg.f64 x) (-.f64 (neg.f64 n) (/.f64 (fma.f64 (/.f64 n x) #s(literal -1/12 binary64) (*.f64 #s(literal 1/2 binary64) n)) x)))","(* -1 (* x (+ (* -1 n) (* -1 (/ (- (* -1 (/ (- (+ (* -1/2 (/ (+ (* -1/3 n) (* 1/4 n)) x)) (+ (* -1/4 (/ n x)) (* 1/6 (/ n x)))) (+ (* -1/3 n) (* 1/4 n))) x)) (* -1/2 n)) x)))))","(*.f64 (neg.f64 x) (-.f64 (neg.f64 n) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (*.f64 n #s(literal -1/12 binary64)) x) #s(literal -1/2 binary64) (*.f64 #s(literal -1/12 binary64) (-.f64 (/.f64 n x) n))) x) #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) n)) x)))","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x))","(/.f64 (neg.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -3 binary64))) x)","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* -1 (/ (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 x))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))))) x)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) x))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -2 binary64) (-.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) x)))) x)","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* -1 (/ (+ (* -1 (/ (+ (log -1) (+ (* -1 (log (/ -1 x))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))))))) x)) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 x))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x)))))))) x)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) x))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -2 binary64) (-.f64 (/.f64 (neg.f64 (-.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (/.f64 (+.f64 (-.f64 (-.f64 (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -1/3 binary64))) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) (log.f64 (/.f64 #s(literal -1 binary64) x))) (log.f64 #s(literal -1 binary64))) x))) x) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))))) x)","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* -1 (/ (+ (* -1 (/ (+ (log -1) (+ (* -1 (log (/ -1 x))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* -1 (/ (+ (* -1 (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* -1/2 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* -1/4 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* 2/3 (+ (log -1) (* -1 (log (/ -1 x))))) (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x))))))))) x)) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x)))))))))) x)) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 x))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (log -1) (* -1 (log (/ -1 x)))))))) x)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) x))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -2 binary64) (-.f64 (/.f64 (neg.f64 (-.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (/.f64 (+.f64 (-.f64 (-.f64 (-.f64 (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -1/3 binary64))) (/.f64 (-.f64 (fma.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) #s(literal -1/2 binary64) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (+.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -1/2 binary64) #s(literal 11/12 binary64)) #s(literal 2/3 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) #s(literal -1/4 binary64)))) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -2/3 binary64) #s(literal 1 binary64))) x)) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) (log.f64 (/.f64 #s(literal -1 binary64) x))) (log.f64 #s(literal -1 binary64))) x))) x) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))))) x)","(pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)","(pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64))","(* -1 (* x (- (* -1 (/ (- 1/2 (* 1/12 (/ 1 x))) x)) 1)))","(*.f64 (neg.f64 x) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/12 binary64) x)) x) #s(literal -1 binary64) #s(literal -1 binary64)))","(* -1 (* x (- (* -1 (/ (+ 1/2 (* -1 (/ (- 1/12 (* 1/24 (/ 1 x))) x))) x)) 1)))","(*.f64 (neg.f64 x) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) x)) x)) x) #s(literal -1 binary64) #s(literal -1 binary64)))","(/ (- (pow (log (+ 1 x)) 3) (pow (log x) 3)) (* n (+ (* (log x) (+ (log x) (log (+ 1 x)))) (pow (log (+ 1 x)) 2))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) n))","(/ (- (pow (log (+ 1 x)) 3) (pow (log x) 3)) n)","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n)","(- (exp (/ (log (+ 1 x)) n)) (exp (/ (log x) n)))","(-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (exp.f64 (/.f64 (log.f64 x) n)))","(/ n (- (pow (log (+ 1 x)) 3) (pow (log x) 3)))","(/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))","(/ (- (log (+ 1 x)) (log x)) n)","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(/ (log (/ (+ 1 x) x)) n)","(/.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) n)","(/ n (- (log (+ 1 x)) (log x)))","(/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))","(/ 1 n)","(/.f64 #s(literal 1 binary64) n)","(/ (- (+ (log (+ 1 x)) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))) (+ (log x) (* 1/2 (/ (pow (log x) 2) n)))) n)","(/.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (log1p.f64 x)) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (log.f64 x))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n)))) (+ (log x) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n))))) n)","(/.f64 (-.f64 (-.f64 (+.f64 (fma.f64 (/.f64 #s(literal 1/6 binary64) n) (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) n) (*.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64))) (log1p.f64 x)) (log.f64 x)) (fma.f64 (/.f64 #s(literal 1/6 binary64) n) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64)))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/24 (/ (pow (log (+ 1 x)) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))))) (+ (log x) (+ (* 1/24 (/ (pow (log x) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n)))))) n)","(/.f64 (-.f64 (+.f64 (fma.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 n #s(literal 3 binary64))) #s(literal 1/24 binary64) (fma.f64 (/.f64 #s(literal 1/6 binary64) n) (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) n) (*.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64)))) (log1p.f64 x)) (+.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 4 binary64)) (pow.f64 n #s(literal 3 binary64))) #s(literal 1/24 binary64) (fma.f64 (/.f64 #s(literal 1/6 binary64) n) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64)))) (log.f64 x))) n)","(* -1 (/ (- (* -1 (log (+ 1 x))) (* -1 (log x))) n))","(neg.f64 (/.f64 (fma.f64 #s(literal -1 binary64) (log1p.f64 x) (log.f64 x)) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (* 1/2 (pow (log (+ 1 x)) 2)) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) n) (log1p.f64 x)) (log.f64 x))) n)","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (* -1/6 (pow (log (+ 1 x)) 3)) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(/.f64 (neg.f64 (+.f64 (-.f64 (neg.f64 (log1p.f64 x)) (/.f64 (fma.f64 (/.f64 (*.f64 #s(literal -1/6 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) n) #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) n)) (log.f64 x))) n)","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/24 (pow (log (+ 1 x)) 4)) (* 1/24 (pow (log x) 4))) n)) (* -1/6 (pow (log (+ 1 x)) 3))) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(/.f64 (neg.f64 (+.f64 (-.f64 (/.f64 (neg.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (*.f64 #s(literal 1/24 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64)))) n) #s(literal -1 binary64) (*.f64 #s(literal -1/6 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) n) #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))))) n) (log1p.f64 x)) (log.f64 x))) n)"]],"stop":[["iter limit",1],["node limit",1]],"time":327.888916015625,"type":"simplify"},{"count":[[24,1848]],"egraph":[[0,8183,225,0.075781975],[2,1854,225,0.037145571],[1,279,225,0.006881662],[0,72,389,0.00259796],[0,46,302,0.000690895]],"inputs":[["(*.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","(/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n)","#s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) n))","(/.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) n)","(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x))","(/.f64 (+.f64 #s(literal 1 binary64) x) x)","(/.f64 #s(literal 1 binary64) (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))))","(/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))","(-.f64 (log1p.f64 x) (log.f64 x))","(pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))))","(pow.f64 n #s(literal -1 binary64))","(-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))","(pow.f64 (log.f64 x) #s(literal 3 binary64))","(+.f64 #s(literal 1 binary64) x)","(pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))"]],"memory":[[-4991600,88755904]],"outputs":[["(*.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))))) (pow.f64 (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))))) (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 n)) (/.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) n) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (+.f64 (log.f64 x) (log1p.f64 x))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) n) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) n) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64)) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64)) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64)) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64)) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (neg.f64 n)) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (neg.f64 n)) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) n) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) n) (/.f64 (fma.f64 (log1p.f64 x) (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) n) (/.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) n) (/.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (/.f64 (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n))","(*.f64 (/.f64 (*.f64 #s(literal 1 binary64) (pow.f64 n #s(literal -1/2 binary64))) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))))","(*.f64 (/.f64 (*.f64 #s(literal 1 binary64) (pow.f64 n #s(literal -1/2 binary64))) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (*.f64 #s(literal 1 binary64) (pow.f64 n #s(literal -1/2 binary64))) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 n #s(literal -1 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))) (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) n) (+.f64 (log.f64 x) (log1p.f64 x))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) n) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))))) (/.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))))) (/.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) n))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64)) (neg.f64 n)) (/.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (pow.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64)) n) (/.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))))) (/.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))))) (/.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) n))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 n)) (/.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) (pow.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)) n) (/.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))))) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))))) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (neg.f64 n)) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (pow.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) n))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) n) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))))) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))))) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (/.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) n) (/.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) n) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))))","(*.f64 (/.f64 (*.f64 #s(literal 1 binary64) (pow.f64 n #s(literal -1/2 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)) (-.f64 (log1p.f64 x) (log.f64 x)))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (pow.f64 (fma.f64 (log1p.f64 x) (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 3/2 binary64)) (pow.f64 (log.f64 x) #s(literal 3/2 binary64))) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3/2 binary64)) (pow.f64 (log.f64 x) #s(literal 3/2 binary64))) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) n) (/.f64 (pow.f64 (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))) n) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) n) (/.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) n) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 n (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))))","(*.f64 (pow.f64 (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n))","(*.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64)) (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) (/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (fma.f64 (log1p.f64 x) (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 n #s(literal -1/2 binary64))) (pow.f64 n #s(literal -1/2 binary64)))","(*.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x)))) (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))))","(*.f64 (*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64))) (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64)))","(*.f64 (*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) #s(literal 1/2 binary64)) (pow.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) #s(literal 1/2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) n) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) n) (-.f64 (log.f64 x) (log1p.f64 x)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 n #s(literal -1 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) n))","(*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n)))","(*.f64 (pow.f64 n #s(literal -1/2 binary64)) (*.f64 (pow.f64 n #s(literal -1/2 binary64)) (-.f64 (log1p.f64 x) (log.f64 x))))","(*.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))))","(*.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (*.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 n #s(literal -1 binary64))))","(*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64)) (*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64)) (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (log.f64 x) (log1p.f64 x)) (/.f64 #s(literal -1 binary64) n))","(*.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) #s(literal 1 binary64))","(*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (-.f64 (log1p.f64 x) (log.f64 x)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n))","(*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))))","(*.f64 #s(literal -1 binary64) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 n (-.f64 (log.f64 x) (log1p.f64 x))) #s(literal -1 binary64)))","(pow.f64 (exp.f64 (log.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))))) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))) #s(literal -1/2 binary64))","(pow.f64 (*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal -2 binary64)) (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64))","(pow.f64 (*.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -2 binary64)) (*.f64 n n)) #s(literal -1/2 binary64))","(pow.f64 (*.f64 (*.f64 n n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -2 binary64))) #s(literal -1/2 binary64))","(pow.f64 (*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal 2 binary64)) (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal -2 binary64))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) #s(literal 1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) #s(literal 1 binary64))","(pow.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log1p.f64 x) n) (-.f64 (*.f64 (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64)))) (*.f64 (/.f64 (log1p.f64 x) n) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64)))))))","(/.f64 (+.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log1p.f64 x) n) (-.f64 (*.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x)))) (*.f64 (/.f64 (log1p.f64 x) n) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x)))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (pow.f64 n #s(literal -1 binary64)))) (neg.f64 (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))) (neg.f64 (neg.f64 n)))","(/.f64 (neg.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) (neg.f64 (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))) (neg.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1 binary64))) (neg.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1 binary64))) (neg.f64 n))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) n)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (neg.f64 n))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) n)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (neg.f64 n))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) (neg.f64 (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x)))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (neg.f64 (*.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) (neg.f64 (*.f64 (neg.f64 n) (+.f64 (log.f64 x) (log1p.f64 x)))))","(/.f64 (neg.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (neg.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (log.f64 x) (log1p.f64 x)))) (neg.f64 (neg.f64 n)))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) n) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) #s(literal 1 binary64)))) (*.f64 (neg.f64 n) n))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (neg.f64 n)) (*.f64 (neg.f64 n) (neg.f64 (log.f64 x)))) (*.f64 (neg.f64 n) (neg.f64 n)))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) n) (*.f64 (neg.f64 n) (log.f64 x))) (*.f64 (neg.f64 n) n))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) n) (*.f64 n (*.f64 (log.f64 x) #s(literal 1 binary64)))) (*.f64 n n))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) (neg.f64 n)) (*.f64 n (neg.f64 (log.f64 x)))) (*.f64 n (neg.f64 n)))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) n) (*.f64 n (log.f64 x))) (*.f64 n n))","(/.f64 (-.f64 (*.f64 (log1p.f64 x) n) (*.f64 n (*.f64 (log.f64 x) #s(literal 1 binary64)))) (*.f64 n n))","(/.f64 (-.f64 (*.f64 (log1p.f64 x) (neg.f64 n)) (*.f64 n (neg.f64 (log.f64 x)))) (*.f64 n (neg.f64 n)))","(/.f64 (-.f64 (*.f64 (log1p.f64 x) n) (*.f64 n (log.f64 x))) (*.f64 n n))","(/.f64 (-.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) (*.f64 (log.f64 x) #s(literal 1 binary64))) n)","(/.f64 (-.f64 (log1p.f64 x) (*.f64 (log.f64 x) #s(literal 1 binary64))) n)","(/.f64 (-.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (neg.f64 (log.f64 x))) (neg.f64 n))","(/.f64 (-.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) (log.f64 x)) n)","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (pow.f64 n #s(literal -1 binary64))) (+.f64 (log.f64 x) (log1p.f64 x)))","(/.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) (neg.f64 n))","(/.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (+.f64 (log.f64 x) (log1p.f64 x)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (log.f64 x) (log1p.f64 x))) (neg.f64 n))","(/.f64 (*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))))","(/.f64 (*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1 binary64)) n)","(/.f64 (neg.f64 (pow.f64 n #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (neg.f64 (*.f64 (neg.f64 n) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n)) (neg.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (neg.f64 (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) n))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (neg.f64 n)))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) n))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (neg.f64 n)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (*.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (*.f64 (neg.f64 n) (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 n) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) (neg.f64 (neg.f64 (neg.f64 n))))","(/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) (neg.f64 n))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (neg.f64 (neg.f64 n)))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) (neg.f64 n))))","(/.f64 #s(literal 1 binary64) (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))))","(/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) (neg.f64 n)))","(/.f64 #s(literal -1 binary64) (/.f64 n (-.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (*.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(neg.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(neg.f64 (pow.f64 (/.f64 n (-.f64 (log.f64 x) (log1p.f64 x))) #s(literal -1 binary64)))","(fma.f64 (/.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (/.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (/.f64 (sqrt.f64 (log1p.f64 x)) n) (/.f64 (sqrt.f64 (log1p.f64 x)) #s(literal 1 binary64)) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (/.f64 (sqrt.f64 (log1p.f64 x)) n) (/.f64 (sqrt.f64 (log1p.f64 x)) #s(literal 1 binary64)) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (*.f64 (log1p.f64 x) (pow.f64 n #s(literal -1/2 binary64))) (pow.f64 n #s(literal -1/2 binary64)) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (*.f64 (log1p.f64 x) (pow.f64 n #s(literal -1/2 binary64))) (pow.f64 n #s(literal -1/2 binary64)) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64)) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64)) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1/2 binary64))) (log1p.f64 x) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1/2 binary64))) (log1p.f64 x) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (fma.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1/2 binary64) (*.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1/2 binary64))) (log1p.f64 x) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (fma.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1/2 binary64) (*.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1/2 binary64))) (log1p.f64 x) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (pow.f64 n #s(literal -1/2 binary64)) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 n #s(literal -1/2 binary64)))) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (pow.f64 n #s(literal -1/2 binary64)) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 n #s(literal -1/2 binary64)))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1/2 binary64)) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1/2 binary64)) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (log1p.f64 x) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (log1p.f64 x) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 #s(literal 2 binary64) (log.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1/2 binary64))) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 #s(literal 2 binary64) (log.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1/2 binary64))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (log1p.f64 x) (pow.f64 n #s(literal -1 binary64)) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (log1p.f64 x) (pow.f64 n #s(literal -1 binary64)) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x)))) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x)))))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) n) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (neg.f64 n) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 n) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))) (neg.f64 (neg.f64 n))) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))) (neg.f64 (neg.f64 n))))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (neg.f64 (neg.f64 n))) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (neg.f64 (neg.f64 n))))","(-.f64 (/.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 x)) (neg.f64 (neg.f64 n))) (/.f64 (log.f64 (neg.f64 x)) (neg.f64 (neg.f64 n))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (neg.f64 n))) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(-.f64 (/.f64 (log1p.f64 x) (neg.f64 (neg.f64 n))) (/.f64 (log.f64 x) n))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))) n) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))) n))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) n) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) n))","(-.f64 (/.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 x)) n) (/.f64 (log.f64 (neg.f64 x)) n))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) (*.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 6 binary64)) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) (*.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))) (*.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 9 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))) (*.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (*.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (*.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(-.f64 (/.f64 (log.f64 x) (neg.f64 n)) (/.f64 (log1p.f64 x) (neg.f64 n)))","(-.f64 (/.f64 #s(literal 0 binary64) n) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 n)) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(-.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))","(exp.f64 (-.f64 (*.f64 (log.f64 n) #s(literal -1 binary64)) (neg.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x))))))","(exp.f64 (+.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (*.f64 (log.f64 n) #s(literal -1 binary64))))","(exp.f64 (fma.f64 (log.f64 n) #s(literal -1 binary64) (log.f64 (-.f64 (log1p.f64 x) (log.f64 x)))))","(exp.f64 (fma.f64 (log.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64) (log.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n))))","(exp.f64 (+.f64 (log.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n)) (*.f64 (log.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64))))","(exp.f64 (*.f64 (log.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))) #s(literal -1 binary64)))","(+.f64 (/.f64 (log1p.f64 x) n) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(+.f64 (/.f64 (log1p.f64 x) n) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(*.f64 (/.f64 (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))))","(*.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))))","(*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(*.f64 (/.f64 (*.f64 #s(literal 1 binary64) (pow.f64 n #s(literal -1/2 binary64))) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))))","(*.f64 (/.f64 (*.f64 #s(literal 1 binary64) (pow.f64 n #s(literal -1/2 binary64))) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))))","(*.f64 (/.f64 (*.f64 #s(literal 1 binary64) (pow.f64 n #s(literal -1/2 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) #s(literal -1 binary64))) (pow.f64 (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))) #s(literal -1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 n #s(literal -1 binary64)) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 n #s(literal -1 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) n) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) n) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))))","(*.f64 (/.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 3/2 binary64)) (pow.f64 (log.f64 x) #s(literal 3/2 binary64))) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3/2 binary64)) (pow.f64 (log.f64 x) #s(literal 3/2 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) n) (/.f64 (pow.f64 (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))) n) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) n) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (pow.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) n) (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))))","(*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(*.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64)) (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64)))","(*.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1/2 binary64)) #s(literal 2 binary64)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n))","(*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (pow.f64 n #s(literal -1 binary64)))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))))","(pow.f64 (/.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal -2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1 binary64))","(pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) n) (*.f64 n (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (*.f64 n n))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64)))) (neg.f64 (*.f64 n (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64)))) (neg.f64 (*.f64 n (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (pow.f64 n #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 n)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (*.f64 n (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))) (*.f64 n (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (neg.f64 n))","(/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n)","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (*.f64 n (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))))) (/.f64 (pow.f64 (log.f64 x) #s(literal 6 binary64)) (*.f64 n (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (*.f64 n (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))))) (/.f64 (pow.f64 (log.f64 x) #s(literal 9 binary64)) (*.f64 n (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 n)) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (neg.f64 n)))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) n) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 6 binary64)) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) n))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))) n) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 9 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))) n))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) n) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n))","(exp.f64 (fma.f64 (log.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) #s(literal -1/2 binary64) (*.f64 (log.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) #s(literal -1/2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal -2 binary64))) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64))) #s(literal 2 binary64)))","(exp.f64 (log.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 n (-.f64 (log.f64 x) (log1p.f64 x))))","(*.f64 (/.f64 n (+.f64 (pow.f64 (log1p.f64 x) #s(literal 3/2 binary64)) (pow.f64 (log.f64 x) #s(literal 3/2 binary64)))) (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3/2 binary64)) (pow.f64 (log.f64 x) #s(literal 3/2 binary64)))))","(*.f64 (pow.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) (pow.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)))","(*.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64)))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))))","(*.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64)))) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))))","(*.f64 (/.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) n)","(*.f64 (neg.f64 n) (pow.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)))","(*.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))))","(*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))))","(*.f64 n (exp.f64 (neg.f64 (log.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))))))","(*.f64 n (pow.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 n (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal -2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64)) #s(literal -2 binary64))","(pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal -1 binary64))","(pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64))","(/.f64 (neg.f64 (/.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))) (-.f64 (log.f64 x) (log1p.f64 x)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 n))) (neg.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))))))","(/.f64 (exp.f64 (log.f64 (neg.f64 n))) (exp.f64 (log.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))))))","(/.f64 (/.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (-.f64 (log1p.f64 x) (log.f64 x)))","(/.f64 (neg.f64 (neg.f64 n)) (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))))","(/.f64 (neg.f64 n) (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n)))","(/.f64 n (exp.f64 (log.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))))","(/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))","(neg.f64 (/.f64 (neg.f64 n) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))))","(neg.f64 (/.f64 n (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (/.f64 n (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))))","(exp.f64 (*.f64 (log.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n)) #s(literal -1 binary64)))","(exp.f64 (log.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) n))","(*.f64 (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n))","(*.f64 (*.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) (pow.f64 n #s(literal -1/2 binary64))) (pow.f64 n #s(literal -1/2 binary64)))","(*.f64 (*.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (neg.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64)))) (/.f64 #s(literal -1 binary64) n))","(*.f64 (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) n) #s(literal 1 binary64))","(*.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))))","(*.f64 #s(literal 1 binary64) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) n))","(pow.f64 (/.f64 (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64))) (neg.f64 (neg.f64 n)))","(/.f64 (neg.f64 (*.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) #s(literal 1 binary64))) (neg.f64 n))","(/.f64 (neg.f64 (neg.f64 (neg.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64)))))) (neg.f64 (neg.f64 (neg.f64 n))))","(/.f64 (*.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (neg.f64 n))","(/.f64 (*.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) #s(literal 1 binary64)) n)","(/.f64 (neg.f64 (neg.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))))) (neg.f64 (neg.f64 n)))","(/.f64 (neg.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 n))","(/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) n)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64)))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))))))","(neg.f64 (/.f64 (neg.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64)))) n))","(neg.f64 (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) (neg.f64 n)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 n)) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) (neg.f64 n)))","(exp.f64 (*.f64 (log.f64 (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))))) #s(literal -1 binary64)))","#s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x))","(pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (neg.f64 x)) #s(literal -1 binary64))","(pow.f64 (*.f64 x x) #s(literal -1/2 binary64))","(pow.f64 x #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 x)))","(/.f64 #s(literal 1 binary64) x)","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 x))","(neg.f64 (/.f64 #s(literal -1 binary64) x))","(exp.f64 (neg.f64 (log.f64 x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(*.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))))) (pow.f64 (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))))) (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 n)) (/.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) n) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (+.f64 (log.f64 x) (log1p.f64 x))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) n) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) n) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64)) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64)) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64)) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64)) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (neg.f64 n)) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (neg.f64 n)) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) n) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) n) (/.f64 (fma.f64 (log1p.f64 x) (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) n) (/.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) n) (/.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (/.f64 (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n))","(*.f64 (/.f64 (*.f64 #s(literal 1 binary64) (pow.f64 n #s(literal -1/2 binary64))) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))))","(*.f64 (/.f64 (*.f64 #s(literal 1 binary64) (pow.f64 n #s(literal -1/2 binary64))) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (*.f64 #s(literal 1 binary64) (pow.f64 n #s(literal -1/2 binary64))) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 n #s(literal -1 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))) (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) n) (+.f64 (log.f64 x) (log1p.f64 x))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) n) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))))) (/.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))))) (/.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) n))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64)) (neg.f64 n)) (/.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (pow.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64)) n) (/.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))))) (/.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))))) (/.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) n))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 n)) (/.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) (pow.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)) n) (/.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))))) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))))) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (neg.f64 n)) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (pow.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) n))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) n) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))))) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))))) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (/.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) n) (/.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) n) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))))","(*.f64 (/.f64 (*.f64 #s(literal 1 binary64) (pow.f64 n #s(literal -1/2 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)) (-.f64 (log1p.f64 x) (log.f64 x)))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (pow.f64 (fma.f64 (log1p.f64 x) (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 3/2 binary64)) (pow.f64 (log.f64 x) #s(literal 3/2 binary64))) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3/2 binary64)) (pow.f64 (log.f64 x) #s(literal 3/2 binary64))) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) n) (/.f64 (pow.f64 (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))) n) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) n) (/.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) n) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 n (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))))","(*.f64 (pow.f64 (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n))","(*.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64)) (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) (/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (fma.f64 (log1p.f64 x) (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 n #s(literal -1/2 binary64))) (pow.f64 n #s(literal -1/2 binary64)))","(*.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x)))) (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))))","(*.f64 (*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64))) (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64)))","(*.f64 (*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) #s(literal 1/2 binary64)) (pow.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) #s(literal 1/2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) n) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) n) (-.f64 (log.f64 x) (log1p.f64 x)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 n #s(literal -1 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) n))","(*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n)))","(*.f64 (pow.f64 n #s(literal -1/2 binary64)) (*.f64 (pow.f64 n #s(literal -1/2 binary64)) (-.f64 (log1p.f64 x) (log.f64 x))))","(*.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))))","(*.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (*.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 n #s(literal -1 binary64))))","(*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64)) (*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64)) (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (log.f64 x) (log1p.f64 x)) (/.f64 #s(literal -1 binary64) n))","(*.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) #s(literal 1 binary64))","(*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (-.f64 (log1p.f64 x) (log.f64 x)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n))","(*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))))","(*.f64 #s(literal -1 binary64) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 n (-.f64 (log.f64 x) (log1p.f64 x))) #s(literal -1 binary64)))","(pow.f64 (exp.f64 (log.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))))) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))) #s(literal -1/2 binary64))","(pow.f64 (*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal -2 binary64)) (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64))","(pow.f64 (*.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -2 binary64)) (*.f64 n n)) #s(literal -1/2 binary64))","(pow.f64 (*.f64 (*.f64 n n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -2 binary64))) #s(literal -1/2 binary64))","(pow.f64 (*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal 2 binary64)) (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal -2 binary64))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) #s(literal 1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) #s(literal 1 binary64))","(pow.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log1p.f64 x) n) (-.f64 (*.f64 (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64)))) (*.f64 (/.f64 (log1p.f64 x) n) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64)))))))","(/.f64 (+.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log1p.f64 x) n) (-.f64 (*.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x)))) (*.f64 (/.f64 (log1p.f64 x) n) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x)))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (pow.f64 n #s(literal -1 binary64)))) (neg.f64 (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))) (neg.f64 (neg.f64 n)))","(/.f64 (neg.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) (neg.f64 (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))) (neg.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1 binary64))) (neg.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1 binary64))) (neg.f64 n))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) n)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (neg.f64 n))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) n)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (neg.f64 n))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) (neg.f64 (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x)))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (neg.f64 (*.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) (neg.f64 (*.f64 (neg.f64 n) (+.f64 (log.f64 x) (log1p.f64 x)))))","(/.f64 (neg.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (neg.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (log.f64 x) (log1p.f64 x)))) (neg.f64 (neg.f64 n)))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) n) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) #s(literal 1 binary64)))) (*.f64 (neg.f64 n) n))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (neg.f64 n)) (*.f64 (neg.f64 n) (neg.f64 (log.f64 x)))) (*.f64 (neg.f64 n) (neg.f64 n)))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) n) (*.f64 (neg.f64 n) (log.f64 x))) (*.f64 (neg.f64 n) n))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) n) (*.f64 n (*.f64 (log.f64 x) #s(literal 1 binary64)))) (*.f64 n n))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) (neg.f64 n)) (*.f64 n (neg.f64 (log.f64 x)))) (*.f64 n (neg.f64 n)))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) n) (*.f64 n (log.f64 x))) (*.f64 n n))","(/.f64 (-.f64 (*.f64 (log1p.f64 x) n) (*.f64 n (*.f64 (log.f64 x) #s(literal 1 binary64)))) (*.f64 n n))","(/.f64 (-.f64 (*.f64 (log1p.f64 x) (neg.f64 n)) (*.f64 n (neg.f64 (log.f64 x)))) (*.f64 n (neg.f64 n)))","(/.f64 (-.f64 (*.f64 (log1p.f64 x) n) (*.f64 n (log.f64 x))) (*.f64 n n))","(/.f64 (-.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) (*.f64 (log.f64 x) #s(literal 1 binary64))) n)","(/.f64 (-.f64 (log1p.f64 x) (*.f64 (log.f64 x) #s(literal 1 binary64))) n)","(/.f64 (-.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (neg.f64 (log.f64 x))) (neg.f64 n))","(/.f64 (-.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) (log.f64 x)) n)","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (pow.f64 n #s(literal -1 binary64))) (+.f64 (log.f64 x) (log1p.f64 x)))","(/.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) (neg.f64 n))","(/.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (+.f64 (log.f64 x) (log1p.f64 x)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (log.f64 x) (log1p.f64 x))) (neg.f64 n))","(/.f64 (*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))))","(/.f64 (*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1 binary64)) n)","(/.f64 (neg.f64 (pow.f64 n #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (neg.f64 (*.f64 (neg.f64 n) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n)) (neg.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (neg.f64 (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) n))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (neg.f64 n)))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) n))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (neg.f64 n)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (*.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (*.f64 (neg.f64 n) (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 n) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) (neg.f64 (neg.f64 (neg.f64 n))))","(/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) (neg.f64 n))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (neg.f64 (neg.f64 n)))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) (neg.f64 n))))","(/.f64 #s(literal 1 binary64) (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))))","(/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) (neg.f64 n)))","(/.f64 #s(literal -1 binary64) (/.f64 n (-.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (*.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(neg.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(neg.f64 (pow.f64 (/.f64 n (-.f64 (log.f64 x) (log1p.f64 x))) #s(literal -1 binary64)))","(fma.f64 (/.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (/.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (/.f64 (sqrt.f64 (log1p.f64 x)) n) (/.f64 (sqrt.f64 (log1p.f64 x)) #s(literal 1 binary64)) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (/.f64 (sqrt.f64 (log1p.f64 x)) n) (/.f64 (sqrt.f64 (log1p.f64 x)) #s(literal 1 binary64)) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (*.f64 (log1p.f64 x) (pow.f64 n #s(literal -1/2 binary64))) (pow.f64 n #s(literal -1/2 binary64)) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (*.f64 (log1p.f64 x) (pow.f64 n #s(literal -1/2 binary64))) (pow.f64 n #s(literal -1/2 binary64)) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64)) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64)) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1/2 binary64))) (log1p.f64 x) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1/2 binary64))) (log1p.f64 x) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (fma.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1/2 binary64) (*.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1/2 binary64))) (log1p.f64 x) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (fma.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1/2 binary64) (*.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1/2 binary64))) (log1p.f64 x) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (pow.f64 n #s(literal -1/2 binary64)) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 n #s(literal -1/2 binary64)))) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (pow.f64 n #s(literal -1/2 binary64)) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 n #s(literal -1/2 binary64)))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1/2 binary64)) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1/2 binary64)) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (log1p.f64 x) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (log1p.f64 x) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 #s(literal 2 binary64) (log.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1/2 binary64))) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 #s(literal 2 binary64) (log.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1/2 binary64))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (log1p.f64 x) (pow.f64 n #s(literal -1 binary64)) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (log1p.f64 x) (pow.f64 n #s(literal -1 binary64)) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x)))) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x)))))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) n) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (neg.f64 n) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 n) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))) (neg.f64 (neg.f64 n))) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))) (neg.f64 (neg.f64 n))))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (neg.f64 (neg.f64 n))) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (neg.f64 (neg.f64 n))))","(-.f64 (/.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 x)) (neg.f64 (neg.f64 n))) (/.f64 (log.f64 (neg.f64 x)) (neg.f64 (neg.f64 n))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (neg.f64 n))) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(-.f64 (/.f64 (log1p.f64 x) (neg.f64 (neg.f64 n))) (/.f64 (log.f64 x) n))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))) n) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))) n))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) n) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) n))","(-.f64 (/.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 x)) n) (/.f64 (log.f64 (neg.f64 x)) n))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) (*.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 6 binary64)) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) (*.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))) (*.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 9 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))) (*.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (*.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (*.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(-.f64 (/.f64 (log.f64 x) (neg.f64 n)) (/.f64 (log1p.f64 x) (neg.f64 n)))","(-.f64 (/.f64 #s(literal 0 binary64) n) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 n)) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(-.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))","(exp.f64 (-.f64 (*.f64 (log.f64 n) #s(literal -1 binary64)) (neg.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x))))))","(exp.f64 (+.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (*.f64 (log.f64 n) #s(literal -1 binary64))))","(exp.f64 (fma.f64 (log.f64 n) #s(literal -1 binary64) (log.f64 (-.f64 (log1p.f64 x) (log.f64 x)))))","(exp.f64 (fma.f64 (log.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64) (log.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n))))","(exp.f64 (+.f64 (log.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n)) (*.f64 (log.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64))))","(exp.f64 (*.f64 (log.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))) #s(literal -1 binary64)))","(+.f64 (/.f64 (log1p.f64 x) n) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(+.f64 (/.f64 (log1p.f64 x) n) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(*.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))))","(*.f64 (/.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 3/2 binary64)) (pow.f64 (log.f64 x) #s(literal 3/2 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3/2 binary64)) (pow.f64 (log.f64 x) #s(literal 3/2 binary64))) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 3/2 binary64)) (pow.f64 (log.f64 x) #s(literal 3/2 binary64))) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3/2 binary64)) (pow.f64 (log.f64 x) #s(literal 3/2 binary64))) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 (pow.f64 (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (pow.f64 (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (fma.f64 (log1p.f64 x) (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) #s(literal 1 binary64)) (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (pow.f64 (fma.f64 (log1p.f64 x) (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) #s(literal 1 binary64)) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) #s(literal 1 binary64)) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (-.f64 (log.f64 x) (log1p.f64 x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) (fma.f64 (log1p.f64 x) (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))))","(*.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (log1p.f64 x) (log.f64 x)))","(*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 #s(literal -1 binary64) (-.f64 (log.f64 x) (log1p.f64 x)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (neg.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x)))))","(pow.f64 (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64)) #s(literal -2 binary64))","(pow.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal 2 binary64))","(pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1 binary64))","(/.f64 (neg.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x)))) (neg.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (log.f64 x) (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal 2 binary64)))","(/.f64 (exp.f64 (log.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) (exp.f64 (log.f64 (+.f64 (log.f64 x) (log1p.f64 x)))))","(/.f64 (exp.f64 (log.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64)))) (neg.f64 (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64)))) (neg.f64 (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (log1p.f64 x) (neg.f64 (log.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (-.f64 (log1p.f64 x) (neg.f64 (log.f64 x))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (+.f64 (log.f64 x) (log1p.f64 x)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))) (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (log1p.f64 x) (log1p.f64 x) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (*.f64 (log1p.f64 x) (neg.f64 (log.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (fma.f64 (log.f64 x) (log.f64 x) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (log.f64 x)) (log1p.f64 x)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (fma.f64 (log1p.f64 x) (log1p.f64 x) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (*.f64 (log1p.f64 x) (neg.f64 (log.f64 x))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))","(neg.f64 (log.f64 (/.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))))","(neg.f64 (-.f64 (log.f64 x) (log1p.f64 x)))","(fma.f64 (pow.f64 (sqrt.f64 (log1p.f64 x)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (log1p.f64 x)) #s(literal 1 binary64)) (neg.f64 (log.f64 x)))","(fma.f64 (sqrt.f64 (log1p.f64 x)) (sqrt.f64 (log1p.f64 x)) (neg.f64 (log.f64 x)))","(fma.f64 #s(literal -1 binary64) (log.f64 x) (log1p.f64 x))","(fma.f64 (log.f64 x) #s(literal -1 binary64) (log1p.f64 x))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (log1p.f64 x) (neg.f64 (log.f64 x)))) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (-.f64 (log1p.f64 x) (neg.f64 (log.f64 x)))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))))) (/.f64 (pow.f64 (log.f64 x) #s(literal 6 binary64)) (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))))) (/.f64 (pow.f64 (log.f64 x) #s(literal 9 binary64)) (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))) (-.f64 (log.f64 x) (log1p.f64 x)))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 6 binary64)) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 9 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(-.f64 (log.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))) (log.f64 (-.f64 x #s(literal 1 binary64))))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 x #s(literal -1 binary64)))) (log1p.f64 (neg.f64 x)))","(-.f64 (log.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))) (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(-.f64 (log.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))) (log1p.f64 (fma.f64 x x (neg.f64 x))))","(-.f64 (log.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))) (log.f64 (neg.f64 x)))","(-.f64 (log.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))) (log.f64 (neg.f64 (neg.f64 x))))","(-.f64 (log.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64))) (log.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x)))","(-.f64 (log.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64))) (log.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 x))))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64))) (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) x)))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64))) (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 x))))","(-.f64 (log.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (log.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) x)))","(-.f64 (log.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (log.f64 (*.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) x)))","(-.f64 (log.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (log.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (neg.f64 x))))","(-.f64 (log.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (log.f64 (*.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 x))))","(-.f64 (log.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) (log.f64 x))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (neg.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(-.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (fma.f64 x x (neg.f64 x))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (*.f64 x (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (*.f64 x (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 x)) (log.f64 (neg.f64 x)))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))))","(-.f64 #s(literal 0 binary64) (-.f64 (log.f64 x) (log1p.f64 x)))","(-.f64 (log1p.f64 x) (log.f64 x))","(exp.f64 (fma.f64 (neg.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x)))) #s(literal -1/2 binary64) (*.f64 (neg.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x)))) #s(literal -1/2 binary64))))","(exp.f64 (*.f64 (*.f64 (neg.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x)))) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -2 binary64))) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x)))) #s(literal 2 binary64)))","(exp.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x))))","(+.f64 (log.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) (neg.f64 (log.f64 x)))","(+.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 x)) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+.f64 (neg.f64 (log.f64 x)) (log1p.f64 x))","(+.f64 #s(literal 0 binary64) (-.f64 (log1p.f64 x) (log.f64 x)))","(+.f64 (log1p.f64 x) (neg.f64 (log.f64 x)))","(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) x) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64)) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) x) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) x) (/.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) x) (/.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64))","(*.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) x))","(*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) x) x))","(pow.f64 (/.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64))) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) x)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 x))))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 x #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) x))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x)","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (fma.f64 x x (neg.f64 x))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 x (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 x (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) x) x))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 x)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) x))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) x))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (neg.f64 x)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 x)))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x (neg.f64 x)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 x (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 x (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (+.f64 #s(literal 1 binary64) x) x)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 x (+.f64 #s(literal 1 binary64) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))","(neg.f64 (/.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x))","(neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 x)))","(-.f64 (/.f64 (*.f64 x x) (fma.f64 x x (neg.f64 x))) (/.f64 #s(literal 1 binary64) (fma.f64 x x (neg.f64 x))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x (-.f64 #s(literal 1 binary64) x))) (/.f64 (*.f64 x x) (*.f64 x (-.f64 #s(literal 1 binary64) x))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (/.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 x)))","(-.f64 (/.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) x) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x) (/.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)) x))","(exp.f64 (*.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))))) (pow.f64 (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))))) (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 n)) (/.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) n) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (+.f64 (log.f64 x) (log1p.f64 x))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) n) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) n) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64)) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64)) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64)) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64)) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (neg.f64 n)) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (neg.f64 n)) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) n) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) n) (/.f64 (fma.f64 (log1p.f64 x) (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) n) (/.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) n) (/.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (/.f64 (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n))","(*.f64 (/.f64 (*.f64 #s(literal 1 binary64) (pow.f64 n #s(literal -1/2 binary64))) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))))","(*.f64 (/.f64 (*.f64 #s(literal 1 binary64) (pow.f64 n #s(literal -1/2 binary64))) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (*.f64 #s(literal 1 binary64) (pow.f64 n #s(literal -1/2 binary64))) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 n #s(literal -1 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))) (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) n) (+.f64 (log.f64 x) (log1p.f64 x))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) n) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))))) (/.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))))) (/.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) n))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64)) (neg.f64 n)) (/.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (pow.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64)) n) (/.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))))) (/.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))))) (/.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) n))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 n)) (/.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) (pow.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)) n) (/.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))))) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))))) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (neg.f64 n)) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (pow.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) n))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) n) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))))) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))))) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (/.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) n) (/.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) n) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))))","(*.f64 (/.f64 (*.f64 #s(literal 1 binary64) (pow.f64 n #s(literal -1/2 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)) (-.f64 (log1p.f64 x) (log.f64 x)))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (pow.f64 (fma.f64 (log1p.f64 x) (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 3/2 binary64)) (pow.f64 (log.f64 x) #s(literal 3/2 binary64))) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3/2 binary64)) (pow.f64 (log.f64 x) #s(literal 3/2 binary64))) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) n) (/.f64 (pow.f64 (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))) n) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) n) (/.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) n) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 n (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))))","(*.f64 (pow.f64 (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n))","(*.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64)) (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) (/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (fma.f64 (log1p.f64 x) (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 n #s(literal -1/2 binary64))) (pow.f64 n #s(literal -1/2 binary64)))","(*.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x)))) (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))))","(*.f64 (*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64))) (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64)))","(*.f64 (*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) #s(literal 1/2 binary64)) (pow.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) #s(literal 1/2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) n) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) n) (-.f64 (log.f64 x) (log1p.f64 x)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 n #s(literal -1 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) n))","(*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n)))","(*.f64 (pow.f64 n #s(literal -1/2 binary64)) (*.f64 (pow.f64 n #s(literal -1/2 binary64)) (-.f64 (log1p.f64 x) (log.f64 x))))","(*.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))))","(*.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (*.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 n #s(literal -1 binary64))))","(*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64)) (*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64)) (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (log.f64 x) (log1p.f64 x)) (/.f64 #s(literal -1 binary64) n))","(*.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) #s(literal 1 binary64))","(*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (-.f64 (log1p.f64 x) (log.f64 x)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n))","(*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))))","(*.f64 #s(literal -1 binary64) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 n (-.f64 (log.f64 x) (log1p.f64 x))) #s(literal -1 binary64)))","(pow.f64 (exp.f64 (log.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))))) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))) #s(literal -1/2 binary64))","(pow.f64 (*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal -2 binary64)) (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64))","(pow.f64 (*.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -2 binary64)) (*.f64 n n)) #s(literal -1/2 binary64))","(pow.f64 (*.f64 (*.f64 n n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -2 binary64))) #s(literal -1/2 binary64))","(pow.f64 (*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal 2 binary64)) (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal -2 binary64))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) #s(literal 1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) #s(literal 1 binary64))","(pow.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log1p.f64 x) n) (-.f64 (*.f64 (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64)))) (*.f64 (/.f64 (log1p.f64 x) n) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64)))))))","(/.f64 (+.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log1p.f64 x) n) (-.f64 (*.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x)))) (*.f64 (/.f64 (log1p.f64 x) n) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x)))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (pow.f64 n #s(literal -1 binary64)))) (neg.f64 (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))) (neg.f64 (neg.f64 n)))","(/.f64 (neg.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) (neg.f64 (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))) (neg.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1 binary64))) (neg.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1 binary64))) (neg.f64 n))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) n)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (neg.f64 n))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) n)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (neg.f64 n))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) (neg.f64 (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x)))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (neg.f64 (*.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) (neg.f64 (*.f64 (neg.f64 n) (+.f64 (log.f64 x) (log1p.f64 x)))))","(/.f64 (neg.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (neg.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (log.f64 x) (log1p.f64 x)))) (neg.f64 (neg.f64 n)))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) n) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) #s(literal 1 binary64)))) (*.f64 (neg.f64 n) n))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (neg.f64 n)) (*.f64 (neg.f64 n) (neg.f64 (log.f64 x)))) (*.f64 (neg.f64 n) (neg.f64 n)))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) n) (*.f64 (neg.f64 n) (log.f64 x))) (*.f64 (neg.f64 n) n))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) n) (*.f64 n (*.f64 (log.f64 x) #s(literal 1 binary64)))) (*.f64 n n))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) (neg.f64 n)) (*.f64 n (neg.f64 (log.f64 x)))) (*.f64 n (neg.f64 n)))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) n) (*.f64 n (log.f64 x))) (*.f64 n n))","(/.f64 (-.f64 (*.f64 (log1p.f64 x) n) (*.f64 n (*.f64 (log.f64 x) #s(literal 1 binary64)))) (*.f64 n n))","(/.f64 (-.f64 (*.f64 (log1p.f64 x) (neg.f64 n)) (*.f64 n (neg.f64 (log.f64 x)))) (*.f64 n (neg.f64 n)))","(/.f64 (-.f64 (*.f64 (log1p.f64 x) n) (*.f64 n (log.f64 x))) (*.f64 n n))","(/.f64 (-.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) (*.f64 (log.f64 x) #s(literal 1 binary64))) n)","(/.f64 (-.f64 (log1p.f64 x) (*.f64 (log.f64 x) #s(literal 1 binary64))) n)","(/.f64 (-.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (neg.f64 (log.f64 x))) (neg.f64 n))","(/.f64 (-.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) (log.f64 x)) n)","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (pow.f64 n #s(literal -1 binary64))) (+.f64 (log.f64 x) (log1p.f64 x)))","(/.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) (neg.f64 n))","(/.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (+.f64 (log.f64 x) (log1p.f64 x)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (log.f64 x) (log1p.f64 x))) (neg.f64 n))","(/.f64 (*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))))","(/.f64 (*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1 binary64)) n)","(/.f64 (neg.f64 (pow.f64 n #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (neg.f64 (*.f64 (neg.f64 n) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n)) (neg.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (neg.f64 (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) n))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (neg.f64 n)))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) n))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (neg.f64 n)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (*.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (*.f64 (neg.f64 n) (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 n) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) (neg.f64 (neg.f64 (neg.f64 n))))","(/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) (neg.f64 n))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (neg.f64 (neg.f64 n)))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) (neg.f64 n))))","(/.f64 #s(literal 1 binary64) (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))))","(/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) (neg.f64 n)))","(/.f64 #s(literal -1 binary64) (/.f64 n (-.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (*.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(neg.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(neg.f64 (pow.f64 (/.f64 n (-.f64 (log.f64 x) (log1p.f64 x))) #s(literal -1 binary64)))","(fma.f64 (/.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (/.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (/.f64 (sqrt.f64 (log1p.f64 x)) n) (/.f64 (sqrt.f64 (log1p.f64 x)) #s(literal 1 binary64)) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (/.f64 (sqrt.f64 (log1p.f64 x)) n) (/.f64 (sqrt.f64 (log1p.f64 x)) #s(literal 1 binary64)) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (*.f64 (log1p.f64 x) (pow.f64 n #s(literal -1/2 binary64))) (pow.f64 n #s(literal -1/2 binary64)) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (*.f64 (log1p.f64 x) (pow.f64 n #s(literal -1/2 binary64))) (pow.f64 n #s(literal -1/2 binary64)) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64)) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64)) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1/2 binary64))) (log1p.f64 x) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1/2 binary64))) (log1p.f64 x) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (fma.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1/2 binary64) (*.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1/2 binary64))) (log1p.f64 x) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (fma.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1/2 binary64) (*.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1/2 binary64))) (log1p.f64 x) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (pow.f64 n #s(literal -1/2 binary64)) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 n #s(literal -1/2 binary64)))) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (pow.f64 n #s(literal -1/2 binary64)) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 n #s(literal -1/2 binary64)))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1/2 binary64)) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1/2 binary64)) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (log1p.f64 x) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (log1p.f64 x) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 #s(literal 2 binary64) (log.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1/2 binary64))) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 #s(literal 2 binary64) (log.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1/2 binary64))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (log1p.f64 x) (pow.f64 n #s(literal -1 binary64)) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (log1p.f64 x) (pow.f64 n #s(literal -1 binary64)) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x)))) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x)))))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) n) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (neg.f64 n) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 n) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))) (neg.f64 (neg.f64 n))) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))) (neg.f64 (neg.f64 n))))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (neg.f64 (neg.f64 n))) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (neg.f64 (neg.f64 n))))","(-.f64 (/.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 x)) (neg.f64 (neg.f64 n))) (/.f64 (log.f64 (neg.f64 x)) (neg.f64 (neg.f64 n))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (neg.f64 n))) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(-.f64 (/.f64 (log1p.f64 x) (neg.f64 (neg.f64 n))) (/.f64 (log.f64 x) n))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))) n) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))) n))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) n) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) n))","(-.f64 (/.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 x)) n) (/.f64 (log.f64 (neg.f64 x)) n))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) (*.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 6 binary64)) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) (*.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))) (*.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 9 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))) (*.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (*.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (*.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(-.f64 (/.f64 (log.f64 x) (neg.f64 n)) (/.f64 (log1p.f64 x) (neg.f64 n)))","(-.f64 (/.f64 #s(literal 0 binary64) n) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 n)) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(-.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))","(exp.f64 (-.f64 (*.f64 (log.f64 n) #s(literal -1 binary64)) (neg.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x))))))","(exp.f64 (+.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (*.f64 (log.f64 n) #s(literal -1 binary64))))","(exp.f64 (fma.f64 (log.f64 n) #s(literal -1 binary64) (log.f64 (-.f64 (log1p.f64 x) (log.f64 x)))))","(exp.f64 (fma.f64 (log.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64) (log.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n))))","(exp.f64 (+.f64 (log.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n)) (*.f64 (log.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64))))","(exp.f64 (*.f64 (log.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))) #s(literal -1 binary64)))","(+.f64 (/.f64 (log1p.f64 x) n) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(+.f64 (/.f64 (log1p.f64 x) n) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) n)) (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64))) (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64))))","(*.f64 (/.f64 n (+.f64 (pow.f64 (log1p.f64 x) #s(literal 3/2 binary64)) (pow.f64 (log.f64 x) #s(literal 3/2 binary64)))) (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3/2 binary64)) (pow.f64 (log.f64 x) #s(literal 3/2 binary64)))))","(*.f64 (/.f64 (neg.f64 n) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (log.f64 x) (log1p.f64 x))))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (pow.f64 n #s(literal -1/2 binary64)))) (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 n #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 n #s(literal -1/2 binary64))) (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 n #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 n #s(literal -1 binary64))) (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (/.f64 #s(literal -1 binary64) n)))","(*.f64 (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64)) (*.f64 #s(literal 1 binary64) (pow.f64 n #s(literal -1/2 binary64)))) (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64)) (pow.f64 n #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64)) (pow.f64 n #s(literal -1/2 binary64))) (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64)) (pow.f64 n #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64)) (pow.f64 n #s(literal -1 binary64))) (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64)) (pow.f64 n #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) n)))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (pow.f64 n #s(literal -1/2 binary64)))) (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (pow.f64 n #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 n #s(literal -1/2 binary64))) (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (pow.f64 n #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 n #s(literal -1 binary64))) (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (pow.f64 n #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) n)))","(*.f64 (/.f64 #s(literal 1 binary64) (*.f64 #s(literal 1 binary64) (pow.f64 n #s(literal -1/2 binary64)))) (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) (pow.f64 n #s(literal -1/2 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 n #s(literal -1/2 binary64))) (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) (pow.f64 n #s(literal -1/2 binary64))))","(*.f64 (/.f64 n (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))) (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 n (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))))) (pow.f64 (fma.f64 (log1p.f64 x) (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 n (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64))))) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 n (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64))))) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 n (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x)))))","(*.f64 (pow.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 n #s(literal -1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 n #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1 binary64)) #s(literal -1 binary64)) n)","(*.f64 (pow.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 n #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (*.f64 (pow.f64 n #s(literal -1/2 binary64)) (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64)) (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))))","(*.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal 1 binary64)) (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (*.f64 n (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (neg.f64 n) #s(literal 1 binary64)))","(*.f64 (pow.f64 (neg.f64 n) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))))","(*.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64))))","(*.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (+.f64 (log.f64 x) (log1p.f64 x)))","(*.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64)))) (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64)))) (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (log1p.f64 x) (log.f64 x))))","(*.f64 (/.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(*.f64 (*.f64 n (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)) (neg.f64 n))","(*.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (*.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (pow.f64 n #s(literal -1 binary64))))","(*.f64 (neg.f64 n) (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) n)","(*.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n)))","(*.f64 #s(literal 1 binary64) (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))))","(*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)))","(*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))))","(*.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(*.f64 #s(literal -1 binary64) (pow.f64 (pow.f64 (/.f64 n (-.f64 (log.f64 x) (log1p.f64 x))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 n (-.f64 (log.f64 x) (log1p.f64 x))) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 n (-.f64 (log.f64 x) (log1p.f64 x))))","(*.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (pow.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))","(*.f64 n (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64))))","(*.f64 n (pow.f64 (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 n (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 n (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))))","(*.f64 n (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) #s(literal -1 binary64))","(pow.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal 1 binary64))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) #s(literal 3 binary64)) (pow.f64 (*.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (*.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (-.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (*.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))))) (*.f64 (*.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (*.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) #s(literal 3 binary64))) (fma.f64 (*.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (*.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (-.f64 (*.f64 (*.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (*.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))))) (*.f64 (*.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (*.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal 3 binary64))) (fma.f64 (*.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (*.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (-.f64 (*.f64 (*.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (*.f64 (*.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (*.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) #s(literal 3 binary64))) (fma.f64 (*.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (*.f64 (*.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (*.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)))) (*.f64 (*.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))) (neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n)))","(/.f64 (neg.f64 (*.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64))))) (neg.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))) (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 n) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (*.f64 (neg.f64 n) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64))))) (neg.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 (neg.f64 n) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64))))) (neg.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64))))) (neg.f64 (*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64))))) (neg.f64 (*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 n (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64))))) (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 n (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64))))) (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 n))) (-.f64 (log.f64 x) (log1p.f64 x)))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n))","(/.f64 (*.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))))","(/.f64 (neg.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))) (neg.f64 (pow.f64 n #s(literal -1 binary64))))","(/.f64 (neg.f64 (neg.f64 n)) (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (log.f64 x) (log1p.f64 x)))))","(/.f64 (neg.f64 (neg.f64 n)) (-.f64 (log1p.f64 x) (log.f64 x)))","(/.f64 (*.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))","(/.f64 (*.f64 (neg.f64 n) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))))","(/.f64 (*.f64 (neg.f64 n) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (*.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 (neg.f64 n) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (*.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)))))","(/.f64 (*.f64 n (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 n (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)))))","(/.f64 (/.f64 n (-.f64 (log.f64 x) (log1p.f64 x))) #s(literal -1 binary64))","(/.f64 (neg.f64 n) (*.f64 #s(literal 1 binary64) (-.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (neg.f64 n) (-.f64 (log.f64 x) (log1p.f64 x)))","(/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) (pow.f64 n #s(literal -1 binary64)))","(/.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)))","(/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))","(neg.f64 (/.f64 n (-.f64 (log.f64 x) (log1p.f64 x))))","(fma.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (*.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))))","(fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (*.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))))","(fma.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (*.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))","(fma.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal 1 binary64) (-.f64 (log.f64 x) (log1p.f64 x)))) (/.f64 n (*.f64 #s(literal 1 binary64) (-.f64 (log.f64 x) (log1p.f64 x)))))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 (log.f64 x) (log1p.f64 x))) (/.f64 n (-.f64 (log.f64 x) (log1p.f64 x))))","(-.f64 #s(literal 0 binary64) (/.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64)))","(exp.f64 (-.f64 (neg.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x)))) (*.f64 (log.f64 n) #s(literal -1 binary64))))","(exp.f64 (neg.f64 (+.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (*.f64 (log.f64 n) #s(literal -1 binary64)))))","(exp.f64 (neg.f64 (fma.f64 (log.f64 n) #s(literal -1 binary64) (log.f64 (-.f64 (log1p.f64 x) (log.f64 x))))))","(exp.f64 (neg.f64 (fma.f64 (log.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64) (log.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n)))))","(exp.f64 (neg.f64 (+.f64 (log.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n)) (*.f64 (log.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)))))","(exp.f64 (neg.f64 (*.f64 (log.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))) #s(literal -1 binary64))))","(exp.f64 (*.f64 (+.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (*.f64 (log.f64 n) #s(literal -1 binary64))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (fma.f64 (log.f64 n) #s(literal -1 binary64) (log.f64 (-.f64 (log1p.f64 x) (log.f64 x)))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (fma.f64 (log.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64) (log.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n)) (*.f64 (log.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))) #s(literal 1 binary64)))","(+.f64 (*.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (*.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))))","(+.f64 (*.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (*.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))))","(+.f64 (*.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (*.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))","(+.f64 (*.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))))","(*.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))))","(*.f64 (/.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 3/2 binary64)) (pow.f64 (log.f64 x) #s(literal 3/2 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3/2 binary64)) (pow.f64 (log.f64 x) #s(literal 3/2 binary64))) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 3/2 binary64)) (pow.f64 (log.f64 x) #s(literal 3/2 binary64))) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3/2 binary64)) (pow.f64 (log.f64 x) #s(literal 3/2 binary64))) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 (pow.f64 (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (pow.f64 (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (fma.f64 (log1p.f64 x) (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) #s(literal 1 binary64)) (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (pow.f64 (fma.f64 (log1p.f64 x) (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) #s(literal 1 binary64)) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) #s(literal 1 binary64)) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (-.f64 (log.f64 x) (log1p.f64 x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) (fma.f64 (log1p.f64 x) (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))))","(*.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (log1p.f64 x) (log.f64 x)))","(*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 #s(literal -1 binary64) (-.f64 (log.f64 x) (log1p.f64 x)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (neg.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x)))))","(pow.f64 (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64)) #s(literal -2 binary64))","(pow.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal 2 binary64))","(pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1 binary64))","(/.f64 (neg.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x)))) (neg.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (log.f64 x) (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal 2 binary64)))","(/.f64 (exp.f64 (log.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) (exp.f64 (log.f64 (+.f64 (log.f64 x) (log1p.f64 x)))))","(/.f64 (exp.f64 (log.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64)))) (neg.f64 (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64)))) (neg.f64 (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (log1p.f64 x) (neg.f64 (log.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (-.f64 (log1p.f64 x) (neg.f64 (log.f64 x))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (+.f64 (log.f64 x) (log1p.f64 x)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))) (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (log1p.f64 x) (log1p.f64 x) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (*.f64 (log1p.f64 x) (neg.f64 (log.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (fma.f64 (log.f64 x) (log.f64 x) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (log.f64 x)) (log1p.f64 x)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (fma.f64 (log1p.f64 x) (log1p.f64 x) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (*.f64 (log1p.f64 x) (neg.f64 (log.f64 x))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))","(neg.f64 (log.f64 (/.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))))","(neg.f64 (-.f64 (log.f64 x) (log1p.f64 x)))","(fma.f64 (pow.f64 (sqrt.f64 (log1p.f64 x)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (log1p.f64 x)) #s(literal 1 binary64)) (neg.f64 (log.f64 x)))","(fma.f64 (sqrt.f64 (log1p.f64 x)) (sqrt.f64 (log1p.f64 x)) (neg.f64 (log.f64 x)))","(fma.f64 #s(literal -1 binary64) (log.f64 x) (log1p.f64 x))","(fma.f64 (log.f64 x) #s(literal -1 binary64) (log1p.f64 x))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (log1p.f64 x) (neg.f64 (log.f64 x)))) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (-.f64 (log1p.f64 x) (neg.f64 (log.f64 x)))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))))) (/.f64 (pow.f64 (log.f64 x) #s(literal 6 binary64)) (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))))) (/.f64 (pow.f64 (log.f64 x) #s(literal 9 binary64)) (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))) (-.f64 (log.f64 x) (log1p.f64 x)))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 6 binary64)) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 9 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(-.f64 (log.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))) (log.f64 (-.f64 x #s(literal 1 binary64))))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 x #s(literal -1 binary64)))) (log1p.f64 (neg.f64 x)))","(-.f64 (log.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))) (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(-.f64 (log.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))) (log1p.f64 (fma.f64 x x (neg.f64 x))))","(-.f64 (log.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))) (log.f64 (neg.f64 x)))","(-.f64 (log.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))) (log.f64 (neg.f64 (neg.f64 x))))","(-.f64 (log.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64))) (log.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x)))","(-.f64 (log.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64))) (log.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 x))))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64))) (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) x)))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64))) (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 x))))","(-.f64 (log.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (log.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) x)))","(-.f64 (log.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (log.f64 (*.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) x)))","(-.f64 (log.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (log.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (neg.f64 x))))","(-.f64 (log.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (log.f64 (*.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 x))))","(-.f64 (log.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) (log.f64 x))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (neg.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(-.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (fma.f64 x x (neg.f64 x))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (*.f64 x (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (*.f64 x (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 x)) (log.f64 (neg.f64 x)))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))))","(-.f64 #s(literal 0 binary64) (-.f64 (log.f64 x) (log1p.f64 x)))","(-.f64 (log1p.f64 x) (log.f64 x))","(exp.f64 (fma.f64 (neg.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x)))) #s(literal -1/2 binary64) (*.f64 (neg.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x)))) #s(literal -1/2 binary64))))","(exp.f64 (*.f64 (*.f64 (neg.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x)))) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -2 binary64))) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x)))) #s(literal 2 binary64)))","(exp.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x))))","(+.f64 (log.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) (neg.f64 (log.f64 x)))","(+.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 x)) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+.f64 (neg.f64 (log.f64 x)) (log1p.f64 x))","(+.f64 #s(literal 0 binary64) (-.f64 (log1p.f64 x) (log.f64 x)))","(+.f64 (log1p.f64 x) (neg.f64 (log.f64 x)))","(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x))","(*.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))))","(*.f64 (/.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 3/2 binary64)) (pow.f64 (log.f64 x) #s(literal 3/2 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3/2 binary64)) (pow.f64 (log.f64 x) #s(literal 3/2 binary64))) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 3/2 binary64)) (pow.f64 (log.f64 x) #s(literal 3/2 binary64))) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3/2 binary64)) (pow.f64 (log.f64 x) #s(literal 3/2 binary64))) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 (pow.f64 (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (pow.f64 (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (fma.f64 (log1p.f64 x) (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) #s(literal 1 binary64)) (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (pow.f64 (fma.f64 (log1p.f64 x) (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) #s(literal 1 binary64)) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) #s(literal 1 binary64)) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (-.f64 (log.f64 x) (log1p.f64 x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) (fma.f64 (log1p.f64 x) (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))))","(*.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (log1p.f64 x) (log.f64 x)))","(*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 #s(literal -1 binary64) (-.f64 (log.f64 x) (log1p.f64 x)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (neg.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x)))))","(pow.f64 (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64)) #s(literal -2 binary64))","(pow.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal 2 binary64))","(pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1 binary64))","(/.f64 (neg.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x)))) (neg.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (log.f64 x) (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal 2 binary64)))","(/.f64 (exp.f64 (log.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) (exp.f64 (log.f64 (+.f64 (log.f64 x) (log1p.f64 x)))))","(/.f64 (exp.f64 (log.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64)))) (neg.f64 (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64)))) (neg.f64 (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (log1p.f64 x) (neg.f64 (log.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (-.f64 (log1p.f64 x) (neg.f64 (log.f64 x))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (+.f64 (log.f64 x) (log1p.f64 x)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))) (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (log1p.f64 x) (log1p.f64 x) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (*.f64 (log1p.f64 x) (neg.f64 (log.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (fma.f64 (log.f64 x) (log.f64 x) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (log.f64 x)) (log1p.f64 x)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (fma.f64 (log1p.f64 x) (log1p.f64 x) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (*.f64 (log1p.f64 x) (neg.f64 (log.f64 x))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))","(neg.f64 (log.f64 (/.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))))","(neg.f64 (-.f64 (log.f64 x) (log1p.f64 x)))","(fma.f64 (pow.f64 (sqrt.f64 (log1p.f64 x)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (log1p.f64 x)) #s(literal 1 binary64)) (neg.f64 (log.f64 x)))","(fma.f64 (sqrt.f64 (log1p.f64 x)) (sqrt.f64 (log1p.f64 x)) (neg.f64 (log.f64 x)))","(fma.f64 #s(literal -1 binary64) (log.f64 x) (log1p.f64 x))","(fma.f64 (log.f64 x) #s(literal -1 binary64) (log1p.f64 x))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (log1p.f64 x) (neg.f64 (log.f64 x)))) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (-.f64 (log1p.f64 x) (neg.f64 (log.f64 x)))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))))) (/.f64 (pow.f64 (log.f64 x) #s(literal 6 binary64)) (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))))) (/.f64 (pow.f64 (log.f64 x) #s(literal 9 binary64)) (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))) (-.f64 (log.f64 x) (log1p.f64 x)))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 6 binary64)) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 9 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(-.f64 (log.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))) (log.f64 (-.f64 x #s(literal 1 binary64))))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 x #s(literal -1 binary64)))) (log1p.f64 (neg.f64 x)))","(-.f64 (log.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))) (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(-.f64 (log.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))) (log1p.f64 (fma.f64 x x (neg.f64 x))))","(-.f64 (log.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))) (log.f64 (neg.f64 x)))","(-.f64 (log.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))) (log.f64 (neg.f64 (neg.f64 x))))","(-.f64 (log.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64))) (log.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x)))","(-.f64 (log.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64))) (log.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 x))))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64))) (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) x)))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64))) (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 x))))","(-.f64 (log.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (log.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) x)))","(-.f64 (log.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (log.f64 (*.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) x)))","(-.f64 (log.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (log.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (neg.f64 x))))","(-.f64 (log.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (log.f64 (*.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 x))))","(-.f64 (log.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) (log.f64 x))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (neg.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(-.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (fma.f64 x x (neg.f64 x))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (*.f64 x (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (*.f64 x (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 x)) (log.f64 (neg.f64 x)))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))))","(-.f64 #s(literal 0 binary64) (-.f64 (log.f64 x) (log1p.f64 x)))","(-.f64 (log1p.f64 x) (log.f64 x))","(exp.f64 (fma.f64 (neg.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x)))) #s(literal -1/2 binary64) (*.f64 (neg.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x)))) #s(literal -1/2 binary64))))","(exp.f64 (*.f64 (*.f64 (neg.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x)))) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -2 binary64))) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x)))) #s(literal 2 binary64)))","(exp.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x))))","(+.f64 (log.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) (neg.f64 (log.f64 x)))","(+.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 x)) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+.f64 (neg.f64 (log.f64 x)) (log1p.f64 x))","(+.f64 #s(literal 0 binary64) (-.f64 (log1p.f64 x) (log.f64 x)))","(+.f64 (log1p.f64 x) (neg.f64 (log.f64 x)))","(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x))","(*.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))))) (pow.f64 (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))))) (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 n)) (/.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) n) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (+.f64 (log.f64 x) (log1p.f64 x))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) n) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) n) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64)) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64)) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64)) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64)) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (neg.f64 n)) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (neg.f64 n)) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) n) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) n) (/.f64 (fma.f64 (log1p.f64 x) (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) n) (/.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) n) (/.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (/.f64 (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n))","(*.f64 (/.f64 (*.f64 #s(literal 1 binary64) (pow.f64 n #s(literal -1/2 binary64))) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))))","(*.f64 (/.f64 (*.f64 #s(literal 1 binary64) (pow.f64 n #s(literal -1/2 binary64))) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (*.f64 #s(literal 1 binary64) (pow.f64 n #s(literal -1/2 binary64))) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 n #s(literal -1 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))) (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) n) (+.f64 (log.f64 x) (log1p.f64 x))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) n) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))))) (/.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))))) (/.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) n))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64)) (neg.f64 n)) (/.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (pow.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64)) n) (/.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))))) (/.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))))) (/.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) n))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 n)) (/.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) (pow.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)) n) (/.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))))) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))))) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (neg.f64 n)) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (pow.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) n))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) n) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))))) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))))) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (/.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) n) (/.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) n) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))))","(*.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))))","(*.f64 (/.f64 (*.f64 #s(literal 1 binary64) (pow.f64 n #s(literal -1/2 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)) (-.f64 (log1p.f64 x) (log.f64 x)))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (pow.f64 (fma.f64 (log1p.f64 x) (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 3/2 binary64)) (pow.f64 (log.f64 x) #s(literal 3/2 binary64))) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3/2 binary64)) (pow.f64 (log.f64 x) #s(literal 3/2 binary64))) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) n) (/.f64 (pow.f64 (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))) n) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) n) (/.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) n) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 n (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))))","(*.f64 (pow.f64 (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n))","(*.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64)) (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) (/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (fma.f64 (log1p.f64 x) (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 n #s(literal -1/2 binary64))) (pow.f64 n #s(literal -1/2 binary64)))","(*.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x)))) (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))))","(*.f64 (*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64))) (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64)))","(*.f64 (*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) #s(literal 1/2 binary64)) (pow.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) #s(literal 1/2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) n) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) n) (-.f64 (log.f64 x) (log1p.f64 x)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 n #s(literal -1 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) n))","(*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n)))","(*.f64 (pow.f64 n #s(literal -1/2 binary64)) (*.f64 (pow.f64 n #s(literal -1/2 binary64)) (-.f64 (log1p.f64 x) (log.f64 x))))","(*.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))))","(*.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (*.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 n #s(literal -1 binary64))))","(*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64)) (*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/2 binary64)) (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (log.f64 x) (log1p.f64 x)) (/.f64 #s(literal -1 binary64) n))","(*.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) #s(literal 1 binary64))","(*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (-.f64 (log1p.f64 x) (log.f64 x)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n))","(*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))))","(*.f64 #s(literal -1 binary64) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 n (-.f64 (log.f64 x) (log1p.f64 x))) #s(literal -1 binary64)))","(pow.f64 (exp.f64 (log.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))))) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))) #s(literal -1/2 binary64))","(pow.f64 (*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal -2 binary64)) (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64))","(pow.f64 (*.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -2 binary64)) (*.f64 n n)) #s(literal -1/2 binary64))","(pow.f64 (*.f64 (*.f64 n n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -2 binary64))) #s(literal -1/2 binary64))","(pow.f64 (*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal 2 binary64)) (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal -2 binary64))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) #s(literal 1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) #s(literal 1 binary64))","(pow.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log1p.f64 x) n) (-.f64 (*.f64 (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64)))) (*.f64 (/.f64 (log1p.f64 x) n) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64)))))))","(/.f64 (+.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log1p.f64 x) n) (-.f64 (*.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x)))) (*.f64 (/.f64 (log1p.f64 x) n) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x)))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (pow.f64 n #s(literal -1 binary64)))) (neg.f64 (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))) (neg.f64 (neg.f64 n)))","(/.f64 (neg.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) (neg.f64 (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))) (neg.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1 binary64))) (neg.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1 binary64))) (neg.f64 n))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) n)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (neg.f64 n))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) n)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (neg.f64 n))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) (neg.f64 (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x)))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (neg.f64 (*.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) (neg.f64 (*.f64 (neg.f64 n) (+.f64 (log.f64 x) (log1p.f64 x)))))","(/.f64 (neg.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (neg.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (log.f64 x) (log1p.f64 x)))) (neg.f64 (neg.f64 n)))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) n) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) #s(literal 1 binary64)))) (*.f64 (neg.f64 n) n))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (neg.f64 n)) (*.f64 (neg.f64 n) (neg.f64 (log.f64 x)))) (*.f64 (neg.f64 n) (neg.f64 n)))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) n) (*.f64 (neg.f64 n) (log.f64 x))) (*.f64 (neg.f64 n) n))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) n) (*.f64 n (*.f64 (log.f64 x) #s(literal 1 binary64)))) (*.f64 n n))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) (neg.f64 n)) (*.f64 n (neg.f64 (log.f64 x)))) (*.f64 n (neg.f64 n)))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) n) (*.f64 n (log.f64 x))) (*.f64 n n))","(/.f64 (-.f64 (*.f64 (log1p.f64 x) n) (*.f64 n (*.f64 (log.f64 x) #s(literal 1 binary64)))) (*.f64 n n))","(/.f64 (-.f64 (*.f64 (log1p.f64 x) (neg.f64 n)) (*.f64 n (neg.f64 (log.f64 x)))) (*.f64 n (neg.f64 n)))","(/.f64 (-.f64 (*.f64 (log1p.f64 x) n) (*.f64 n (log.f64 x))) (*.f64 n n))","(/.f64 (-.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) (*.f64 (log.f64 x) #s(literal 1 binary64))) n)","(/.f64 (-.f64 (log1p.f64 x) (*.f64 (log.f64 x) #s(literal 1 binary64))) n)","(/.f64 (-.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (neg.f64 (log.f64 x))) (neg.f64 n))","(/.f64 (-.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) (log.f64 x)) n)","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (pow.f64 n #s(literal -1 binary64))) (+.f64 (log.f64 x) (log1p.f64 x)))","(/.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) (neg.f64 n))","(/.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (+.f64 (log.f64 x) (log1p.f64 x)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (log.f64 x) (log1p.f64 x))) (neg.f64 n))","(/.f64 (*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))))","(/.f64 (*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1 binary64)) n)","(/.f64 (neg.f64 (pow.f64 n #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (neg.f64 (*.f64 (neg.f64 n) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n)) (neg.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (neg.f64 (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) n))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (neg.f64 n)))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) n))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (neg.f64 n)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (*.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (*.f64 (neg.f64 n) (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 n) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) (neg.f64 (neg.f64 (neg.f64 n))))","(/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) (neg.f64 n))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (neg.f64 (neg.f64 n)))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) (neg.f64 n))))","(/.f64 #s(literal 1 binary64) (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))))","(/.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) (neg.f64 n)))","(/.f64 #s(literal -1 binary64) (/.f64 n (-.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (*.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(neg.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(neg.f64 (pow.f64 (/.f64 n (-.f64 (log.f64 x) (log1p.f64 x))) #s(literal -1 binary64)))","(fma.f64 (/.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (/.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (/.f64 (sqrt.f64 (log1p.f64 x)) n) (/.f64 (sqrt.f64 (log1p.f64 x)) #s(literal 1 binary64)) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (/.f64 (sqrt.f64 (log1p.f64 x)) n) (/.f64 (sqrt.f64 (log1p.f64 x)) #s(literal 1 binary64)) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (*.f64 (log1p.f64 x) (pow.f64 n #s(literal -1/2 binary64))) (pow.f64 n #s(literal -1/2 binary64)) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (*.f64 (log1p.f64 x) (pow.f64 n #s(literal -1/2 binary64))) (pow.f64 n #s(literal -1/2 binary64)) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64)) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64)) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1/2 binary64))) (log1p.f64 x) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1/2 binary64))) (log1p.f64 x) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (fma.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1/2 binary64) (*.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1/2 binary64))) (log1p.f64 x) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (fma.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1/2 binary64) (*.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1/2 binary64))) (log1p.f64 x) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (pow.f64 n #s(literal -1/2 binary64)) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 n #s(literal -1/2 binary64)))) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (pow.f64 n #s(literal -1/2 binary64)) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 n #s(literal -1/2 binary64)))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1/2 binary64)) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1/2 binary64)) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (log1p.f64 x) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (log1p.f64 x) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 #s(literal 2 binary64) (log.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1/2 binary64))) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 #s(literal 2 binary64) (log.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1/2 binary64))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (log1p.f64 x) (pow.f64 n #s(literal -1 binary64)) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (log1p.f64 x) (pow.f64 n #s(literal -1 binary64)) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x)))) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x)))))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) n) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (neg.f64 n) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 n) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))) (neg.f64 (neg.f64 n))) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))) (neg.f64 (neg.f64 n))))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (neg.f64 (neg.f64 n))) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (neg.f64 (neg.f64 n))))","(-.f64 (/.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 x)) (neg.f64 (neg.f64 n))) (/.f64 (log.f64 (neg.f64 x)) (neg.f64 (neg.f64 n))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (neg.f64 n))) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(-.f64 (/.f64 (log1p.f64 x) (neg.f64 (neg.f64 n))) (/.f64 (log.f64 x) n))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))) n) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))) n))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) n) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) n))","(-.f64 (/.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 x)) n) (/.f64 (log.f64 (neg.f64 x)) n))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) (*.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 6 binary64)) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) (*.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))) (*.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 9 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))) (*.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (*.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (*.f64 n (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(-.f64 (/.f64 (log.f64 x) (neg.f64 n)) (/.f64 (log1p.f64 x) (neg.f64 n)))","(-.f64 (/.f64 #s(literal 0 binary64) n) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 n)) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(-.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))","(exp.f64 (-.f64 (*.f64 (log.f64 n) #s(literal -1 binary64)) (neg.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x))))))","(exp.f64 (+.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (*.f64 (log.f64 n) #s(literal -1 binary64))))","(exp.f64 (fma.f64 (log.f64 n) #s(literal -1 binary64) (log.f64 (-.f64 (log1p.f64 x) (log.f64 x)))))","(exp.f64 (fma.f64 (log.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64) (log.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n))))","(exp.f64 (+.f64 (log.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n)) (*.f64 (log.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64))))","(exp.f64 (*.f64 (log.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))) #s(literal -1 binary64)))","(+.f64 (/.f64 (log1p.f64 x) n) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(+.f64 (/.f64 (log1p.f64 x) n) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 n #s(literal -1/2 binary64))) (pow.f64 n #s(literal -1/2 binary64)))","(*.f64 (pow.f64 n #s(literal -1/2 binary64)) (pow.f64 n #s(literal -1/2 binary64)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 n #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) n))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 n))","(pow.f64 (neg.f64 (neg.f64 n)) #s(literal -1 binary64))","(pow.f64 (*.f64 n n) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 n #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 n #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 n)))","(/.f64 #s(literal 1 binary64) n)","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (neg.f64 n))))","(/.f64 #s(literal -1 binary64) (neg.f64 n))","(neg.f64 (/.f64 #s(literal -1 binary64) n))","(exp.f64 (fma.f64 (log.f64 n) #s(literal -1/2 binary64) (*.f64 (log.f64 n) #s(literal -1/2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 n) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (*.f64 n n)) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 n #s(literal -1/2 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 n) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (pow.f64 (fma.f64 (log1p.f64 x) (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 3/2 binary64)) (pow.f64 (log.f64 x) #s(literal 3/2 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3/2 binary64)) (pow.f64 (log.f64 x) #s(literal 3/2 binary64))))","(*.f64 (fma.f64 (log1p.f64 x) (log1p.f64 x) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (*.f64 (log1p.f64 x) (neg.f64 (log.f64 x))))) (-.f64 (log1p.f64 x) (log.f64 x)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))","(*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (log1p.f64 x) (log.f64 x)))","(*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (+.f64 (log.f64 x) (log1p.f64 x))))","(pow.f64 (/.f64 (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64)))) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (*.f64 (log1p.f64 x) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (*.f64 (neg.f64 (log.f64 x)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) #s(literal 3 binary64))) (fma.f64 (*.f64 (log1p.f64 x) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (*.f64 (log1p.f64 x) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (-.f64 (*.f64 (*.f64 (neg.f64 (log.f64 x)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (*.f64 (neg.f64 (log.f64 x)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))) (*.f64 (*.f64 (log1p.f64 x) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (*.f64 (neg.f64 (log.f64 x)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (log1p.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (neg.f64 (log.f64 x))) #s(literal 3 binary64))) (fma.f64 (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (log1p.f64 x)) (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (log1p.f64 x)) (-.f64 (*.f64 (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (neg.f64 (log.f64 x))) (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (neg.f64 (log.f64 x)))) (*.f64 (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (log1p.f64 x)) (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (neg.f64 (log.f64 x)))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (log.f64 x) #s(literal 9 binary64)) (pow.f64 (log1p.f64 x) #s(literal 9 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 6 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (*.f64 (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64))) (-.f64 (log1p.f64 x) (log.f64 x)))) (neg.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64))) (-.f64 (log1p.f64 x) (log.f64 x)))) (neg.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) (neg.f64 (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))))) (neg.f64 (neg.f64 (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) (neg.f64 (*.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (log.f64 x) (log1p.f64 x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (neg.f64 (*.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) (neg.f64 (*.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) (+.f64 (log.f64 x) (log1p.f64 x)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (neg.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) (*.f64 (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) (pow.f64 (log.f64 x) #s(literal 6 binary64)))) (*.f64 (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))) (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))) (pow.f64 (log.f64 x) #s(literal 9 binary64)))) (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64))) (-.f64 (log1p.f64 x) (log.f64 x))) (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64))) (-.f64 (log1p.f64 x) (log.f64 x))) (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))))","(/.f64 (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (+.f64 (log.f64 x) (log1p.f64 x)))","(/.f64 (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64)))) (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64)))) (neg.f64 (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64)))) (neg.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (-.f64 (pow.f64 (log.f64 x) #s(literal 6 binary64)) (*.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (*.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (*.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (*.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (-.f64 (pow.f64 (log.f64 x) #s(literal 6 binary64)) (*.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))))))","(fma.f64 (pow.f64 (sqrt.f64 (log1p.f64 x)) #s(literal 3 binary64)) (pow.f64 (sqrt.f64 (log1p.f64 x)) #s(literal 3 binary64)) (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64)))","(fma.f64 (neg.f64 (pow.f64 (log.f64 x) #s(literal 3/2 binary64))) (pow.f64 (log.f64 x) #s(literal 3/2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))","(fma.f64 (neg.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64))) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))","(fma.f64 (pow.f64 (log.f64 x) #s(literal 3/2 binary64)) (neg.f64 (pow.f64 (log.f64 x) #s(literal 3/2 binary64))) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))","(fma.f64 (pow.f64 (log1p.f64 x) #s(literal 3/2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3/2 binary64)) (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64)))","(fma.f64 (neg.f64 (log.f64 x)) (pow.f64 (log.f64 x) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))","(fma.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (neg.f64 (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))","(fma.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (log1p.f64 x) (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (neg.f64 (log.f64 x))))","(fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (log1p.f64 x) (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64)))","(fma.f64 #s(literal -1 binary64) (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))","(fma.f64 (log.f64 x) (neg.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64))) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))","(fma.f64 (log1p.f64 x) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (log.f64 x)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(fma.f64 (log1p.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64)))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (pow.f64 (log.f64 x) #s(literal 6 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64)))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) (/.f64 (pow.f64 (log.f64 x) #s(literal 6 binary64)) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 9 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))) (/.f64 (pow.f64 (log.f64 x) #s(literal 9 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)))))","(-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))","(+.f64 (*.f64 (log1p.f64 x) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (*.f64 (neg.f64 (log.f64 x)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(+.f64 (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (log1p.f64 x)) (*.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (neg.f64 (log.f64 x))))","(+.f64 (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))","(+.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64)))","(*.f64 (pow.f64 (log.f64 x) #s(literal 3/2 binary64)) (pow.f64 (log.f64 x) #s(literal 3/2 binary64)))","(*.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (log.f64 x))","(*.f64 (log.f64 x) (pow.f64 (log.f64 x) #s(literal 2 binary64)))","(pow.f64 (exp.f64 #s(literal 3 binary64)) (log.f64 (log.f64 x)))","(pow.f64 (pow.f64 (log.f64 x) #s(literal 3/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal 3/2 binary64))","(pow.f64 (log.f64 x) #s(literal 3 binary64))","(exp.f64 (fma.f64 (log.f64 (log.f64 x)) #s(literal 3/2 binary64) (*.f64 (log.f64 (log.f64 x)) #s(literal 3/2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (log.f64 x)) #s(literal 3/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log.f64 x) #s(literal 3/2 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 3/2 binary64)))","(exp.f64 (log.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64))))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(pow.f64 (exp.f64 (sqrt.f64 (log1p.f64 x))) (sqrt.f64 (log1p.f64 x)))","(pow.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(/.f64 (neg.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (neg.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x)) (*.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(/.f64 (exp.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64)))) (exp.f64 (log.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (exp.f64 (log1p.f64 (*.f64 (neg.f64 x) x))) (exp.f64 (log1p.f64 (neg.f64 x))))","(/.f64 (exp.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (exp.f64 (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (exp.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (exp.f64 (log1p.f64 (fma.f64 x x (neg.f64 x)))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(fma.f64 #s(literal 1 binary64) x #s(literal 1 binary64))","(fma.f64 x #s(literal 1 binary64) #s(literal 1 binary64))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)))","(exp.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)))","(exp.f64 (log1p.f64 x))","(+.f64 #s(literal 1 binary64) x)","(+.f64 x #s(literal 1 binary64))","(*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (log1p.f64 x) (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x))) (pow.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (+.f64 (log.f64 x) (log1p.f64 x)))","(*.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))","(*.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (-.f64 (log1p.f64 x) (log.f64 x))))","(pow.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -2 binary64))","(pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64))","(pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (-.f64 (log1p.f64 x) (log.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (-.f64 (log.f64 x) (log1p.f64 x)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))) #s(literal 2 binary64)))","(exp.f64 (neg.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x)))))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":356.72802734375,"type":"rewrite"},{"compiler":[[49381,5080]],"memory":[[9294176,108206880]],"time":149.067138671875,"type":"eval"},{"alts":[["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","fresh",47.736311401776454,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 #s(approx (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/.f64 (fma.f64 #s(literal -1/3 binary64) x (-.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 #s(literal 1/6 binary64) (/.f64 x n) (fma.f64 #s(literal -1/2 binary64) x #s(literal 1/2 binary64))) n))) (neg.f64 n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","fresh",43.24802113637191,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","done",38.47039794086707,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (pow.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal 2 binary64)) n))","fresh",25.61567689951491,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (pow.f64 x (fma.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n) #s(literal -1 binary64))) n))","fresh",28.279288532339677,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (*.f64 n x)))","fresh",28.342342604829426,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 (exp.f64 (neg.f64 (log.f64 x))) (/.f64 #s(literal -1 binary64) n)) x) n))","fresh",28.13424510185772,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","done",28.13424510185772,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (pow.f64 (/.f64 x n) #s(literal 3 binary64)) (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 3 binary64))) (fma.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n)) (pow.f64 (/.f64 x n) #s(literal 2 binary64)))))","fresh",48.46339812466766,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (*.f64 (log1p.f64 x) (/.f64 n (log.f64 x))) n) (*.f64 n (/.f64 n (log.f64 x)))))","fresh",32.304809402112646,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (*.f64 (log1p.f64 x) n) (*.f64 n (log.f64 x))) (*.f64 n n)))","fresh",32.106754795988216,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))","next",25.734748441915777,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) n))","done",25.7423278181046,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 (*.f64 x x) #s(literal -1/2 binary64))) n))","fresh",33.52561211897247,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x)) x)) n))","fresh",35.440763174662365,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) n))","fresh",48.89805773068464,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x)) (neg.f64 x))) n))","fresh",48.879820355818374,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","fresh",35.44076317384705,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","done",40.089371255806995,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","fresh",45.4615753340363,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","fresh",45.2776438963686,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))))))","fresh",40.13908304146397,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) n)))","fresh",25.562200491317256,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) n)))","fresh",28.330240565269197,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (*.f64 (/.f64 n (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x)))))))","fresh",25.647610633791743,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (*.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))))","fresh",25.574583010854717,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (/.f64 (neg.f64 n) (log.f64 x)))))","fresh",45.29391257487707,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (fma.f64 (/.f64 n x) #s(literal 1/2 binary64) n) x))))","fresh",46.338393406279145,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 (-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x))))","next",48.71179515794883,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (neg.f64 x) (-.f64 (neg.f64 n) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (*.f64 n #s(literal -1/12 binary64)) x) #s(literal -1/2 binary64) (*.f64 #s(literal -1/12 binary64) (-.f64 (/.f64 n x) n))) x) #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) n)) x))))))","fresh",48.220137051689925,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (neg.f64 x) (-.f64 (neg.f64 n) (/.f64 (fma.f64 (/.f64 n x) #s(literal -1/12 binary64) (*.f64 #s(literal 1/2 binary64) n)) x))))))","fresh",48.12899810167344,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))))","next",40.134914630664255,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n))))","done",31.434726469522207,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 (*.f64 x x))))))","next",40.149281875012065,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (*.f64 n x))))","fresh",28.336151345060983,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 #s(approx (pow (- (log (+ 1 x)) (log x)) -1) (/.f64 #s(literal -1 binary64) (log.f64 x))) #s(literal -1 binary64))))","fresh",45.28772134574321,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (/.f64 #s(literal -1 binary64) n) (-.f64 (log.f64 x) (log1p.f64 x))))","fresh",25.560572192178654,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))))","next",25.5371417510857,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (/.f64 #s(literal 1/2 binary64) n) x)) x)))","fresh",48.887528129092814,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (* (pow (/ n (- (pow (log (+ 1 x)) 3) (pow (log x) 3))) -1) (pow (+ (* (log x) (+ (log x) (log (+ 1 x)))) (pow (log (+ 1 x)) 2)) -1)) (/.f64 (/.f64 #s(literal 1 binary64) n) x)))","fresh",40.10126342032319,"binary64"]],"compiler":[[31,18],[69,41],[15,11],[24,16],[24,16],[23,14],[26,17],[23,14],[48,22],[30,16],[27,16],[23,15],[22,14],[29,18],[37,24],[31,20],[40,27],[35,23],[27,17],[28,17],[27,17],[29,19],[25,17],[25,16],[33,18],[29,19],[31,20],[34,21],[43,26],[55,35],[42,27],[29,18],[23,14],[27,17],[29,15],[34,22],[23,15],[27,17],[35,22],[55,30],[31,18],[69,41],[24,16],[24,16],[23,14],[26,17],[48,22],[30,16],[27,16],[23,15],[29,18],[37,24],[31,20],[40,27],[35,23],[28,17],[27,17],[29,19],[25,17],[25,16],[33,18],[29,19],[31,20],[34,21],[43,26],[55,35],[42,27],[29,18],[27,17],[29,15],[34,22],[23,15],[27,17],[35,22],[55,30]],"count":[[1058,40]],"kept":[{"done":[3,3],"fresh":[25,18],"new":[1025,17],"picked":[5,2]}],"memory":[[399168,58407936]],"min-error":[[0.025167748030659097,"binary64"]],"time":61.220947265625,"type":"prune"},{"egraph":[[0,8149,362,0.045581598],[6,6987,364,0.022764119],[5,3569,364,0.033553061],[4,1336,372,0.018782479],[3,531,381,0.005907899],[2,249,386,0.002373441],[1,133,392,0.001101971],[0,83,414,0.000720579],[0,53,416,0.000512642]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))))","(*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))))","#s(literal -1 binary64)","(/.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) n)","n","(pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))","(-.f64 (log1p.f64 x) (log.f64 x))","(log1p.f64 x)","x","(log.f64 x)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))))","(/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n)))","#s(literal 1 binary64)","#s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))","(*.f64 x n)","x","n","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 (-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x))))","(/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 (-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x)))","#s(literal 1 binary64)","#s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 (-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x))","(*.f64 (-.f64 (-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x)","(-.f64 (-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64)))","(-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x)))","n","(*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x))","(/.f64 n x)","x","(/.f64 #s(literal 1/12 binary64) x)","#s(literal 1/12 binary64)","(*.f64 (/.f64 n x) #s(literal -1/2 binary64))","#s(literal -1/2 binary64)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))","(/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n)","(neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))","(log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))","(/.f64 x (+.f64 #s(literal 1 binary64) x))","x","(+.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","n","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 (*.f64 x x))))))","(-.f64 (/.f64 x n) (expm1.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 (*.f64 x x)))))","(/.f64 x n)","x","n","(expm1.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 (*.f64 x x))))","(*.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 (*.f64 x x)))","(/.f64 #s(literal 1/2 binary64) n)","#s(literal 1/2 binary64)","(log.f64 (*.f64 x x))","(*.f64 x x)"]],"locations":[["(expm1.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 (*.f64 x x))))","cost-diff",0],["(/.f64 x n)","cost-diff",0],["(-.f64 (/.f64 x n) (expm1.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 (*.f64 x x)))))","cost-diff",0],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 (*.f64 x x))))))","cost-diff",0],["(log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))","cost-diff",0],["(neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))","cost-diff",0],["(/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n)","cost-diff",0],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))","cost-diff",0],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 (-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x))))","cost-diff",0],["(-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x)))","cost-diff",1],["(*.f64 (-.f64 (-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x)","cost-diff",3],["(-.f64 (-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64)))","cost-diff",4],["(*.f64 x n)","cost-diff",0],["#s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))","cost-diff",0],["(/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n)))","cost-diff",0],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))))","cost-diff",0],["(/.f64 #s(literal -1 binary64) n)","cost-diff",0],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))))","cost-diff",0],["(*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))))","cost-diff",2],["(/.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","cost-diff",4]],"memory":[[-6924400,25568848]],"method":["egg-herbie"],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","#s(literal -1 binary64)","(/.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n)","(/.f64 #s(literal -1 binary64) n)","n","(pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))","(-.f64 (log1p.f64 x) (log.f64 x))","(log1p.f64 x)","x","(log.f64 x)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 n x))))","(/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n)))","(/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 n x)))","#s(literal 1 binary64)","#s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))","#s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 n x))","(*.f64 x n)","(*.f64 n x)","x","n","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 (-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 n (+.f64 (-.f64 (/.f64 #s(literal -1/12 binary64) x) #s(literal -1/2 binary64)) x)))))","(/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 (-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x)))","(/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 n (+.f64 (-.f64 (/.f64 #s(literal -1/12 binary64) x) #s(literal -1/2 binary64)) x))))","#s(literal 1 binary64)","#s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 (-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x))","#s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 n (+.f64 (-.f64 (/.f64 #s(literal -1/12 binary64) x) #s(literal -1/2 binary64)) x)))","(*.f64 (-.f64 (-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x)","(*.f64 n (+.f64 (-.f64 (/.f64 #s(literal -1/12 binary64) x) #s(literal -1/2 binary64)) x))","(-.f64 (-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64)))","(fma.f64 (/.f64 (-.f64 (/.f64 #s(literal -1/12 binary64) x) #s(literal -1/2 binary64)) x) n n)","(-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x)))","(fma.f64 (/.f64 (/.f64 n x) x) #s(literal -1/12 binary64) n)","n","(*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x))","(*.f64 (/.f64 (/.f64 n x) x) #s(literal 1/12 binary64))","(/.f64 n x)","x","(/.f64 #s(literal 1/12 binary64) x)","#s(literal 1/12 binary64)","(*.f64 (/.f64 n x) #s(literal -1/2 binary64))","(*.f64 #s(literal -1/2 binary64) (/.f64 n x))","#s(literal -1/2 binary64)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))) (neg.f64 n)))","(/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n)","(/.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))) (neg.f64 n))","(neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))","(log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))","(/.f64 x (+.f64 #s(literal 1 binary64) x))","x","(+.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","n","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 (*.f64 x x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (-.f64 (/.f64 x n) #s(literal -1 binary64)) (pow.f64 (*.f64 x x) (/.f64 #s(literal 1/2 binary64) n))))","(-.f64 (/.f64 x n) (expm1.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 (*.f64 x x)))))","(-.f64 (-.f64 (/.f64 x n) #s(literal -1 binary64)) (pow.f64 (*.f64 x x) (/.f64 #s(literal 1/2 binary64) n)))","(/.f64 x n)","x","n","(expm1.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 (*.f64 x x))))","(expm1.f64 (*.f64 (log.f64 (*.f64 x x)) (/.f64 #s(literal 1/2 binary64) n)))","(*.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 (*.f64 x x)))","(*.f64 (log.f64 (*.f64 x x)) (/.f64 #s(literal 1/2 binary64) n))","(/.f64 #s(literal 1/2 binary64) n)","#s(literal 1/2 binary64)","(log.f64 (*.f64 x x))","(*.f64 x x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":198.369873046875,"type":"simplify"},{"compiler":[[316,43]],"locations":[["(expm1.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 (*.f64 x x))))","accuracy",0.015625],["(*.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 (*.f64 x x)))","accuracy",0.37337875976844204],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 (*.f64 x x))))))","accuracy",31.344882719522207],["(log.f64 (*.f64 x x))","accuracy",32.61685614490093],["(neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))","accuracy",0.0],["(/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n)","accuracy",0.24609375],["(log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))","accuracy",24.776980344816888],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))","accuracy",31.130506076632997],["(-.f64 (-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64)))","accuracy",8.642874918881942],["(*.f64 (-.f64 (-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x)","accuracy",9.207313100335485],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 (-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x))))","accuracy",31.130506076632997],["#s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 (-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x))","accuracy",36.71569404825185],["(*.f64 x n)","accuracy",0.0],["(/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n)))","accuracy",0.27193246032857504],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))))","accuracy",31.130506076632997],["#s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))","accuracy",35.387941280643645],["(pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))","accuracy",0.1875],["(/.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","accuracy",0.25390625],["(-.f64 (log1p.f64 x) (log.f64 x))","accuracy",24.90619381778968],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))))","accuracy",31.130506076632997]],"memory":[[-1208688,66932192]],"mixsample":[[30.854736328125,"ival-div",0],[21.188720703125,"adjust",800],[1.58837890625,"ival-div",400],[21.079345703125,"ival-pow",1600],[0.688720703125,"ival-div",1600],[0.19580078125,"ival-assert",0],[12.60205078125,"ival-sub",0],[0.074951171875,"ival-log1p",800],[2.437255859375,"ival-log",1600],[7.110595703125,"const",0],[3.656494140625,"ival-log1p",400],[0.0048828125,"ival-neg",400],[27.65771484375,"ival-pow",0],[3.75048828125,"ival-add",0],[0.314697265625,"ival-mult",800],[1.04296875,"ival-add",400],[3.37060546875,"ival-log1p",0],[0.085693359375,"ival-div",2000],[23.85205078125,"ival-pow",400],[0.078369140625,"ival-div",2400],[0.230712890625,"ival-add",1200],[2.837890625,"ival-log1p",1600],[9.228271484375,"adjust",2000],[0.5302734375,"ival-div",1200],[0.3291015625,"ival-mult",400],[0.27685546875,"ival-add",1600],[19.427734375,"ival-mult",0],[3.9111328125,"ival-log",400],[3.677734375,"ival-expm1",0],[0.812255859375,"ival-div",800],[26.615234375,"ival-log",0],[0.3037109375,"ival-true",0],[1.571044921875,"ival-log",800],[0.697998046875,"exact",0],[0.508056640625,"ival-add",800],[2.18994140625,"ival-neg",0]],"outcomes":[[121.91748046875,1,"valid",120],[150.91943359375,2,"valid",95],[19.458984375,0,"valid",41]],"time":367.63818359375,"type":"localize"},{"count":[[25,138]],"inputs":[["(/.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) n)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))))","(/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n)))","#s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))","(*.f64 x n)","(-.f64 (-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64)))","(*.f64 (-.f64 (-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x)","(-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 (-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))","(/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n)","(neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))","(log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 (*.f64 x x))))))","(-.f64 (/.f64 x n) (expm1.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 (*.f64 x x)))))","(/.f64 x n)","(expm1.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 (*.f64 x x))))","(-.f64 (log1p.f64 x) (log.f64 x))","(pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))","#s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 (-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x))","(log.f64 (*.f64 x x))","(*.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 (*.f64 x x)))"]],"memory":[[8790304,112443856]],"outputs":[["(/ (log x) n)","(+ (* -1 (/ x n)) (/ (log x) n))","(+ (* x (- (* 1/2 (/ x n)) (/ 1 n))) (/ (log x) n))","(+ (* x (- (* x (+ (* -1/3 (/ x n)) (* 1/2 (/ 1 n)))) (/ 1 n))) (/ (log x) n))","(* -1 (/ (log x) n))","(+ (* -1 (/ (log x) n)) (/ x n))","(+ (* -1 (/ (log x) n)) (* x (+ (* -1/2 (/ x n)) (/ 1 n))))","(+ (* -1 (/ (log x) n)) (* x (+ (* x (- (* 1/3 (/ x n)) (* 1/2 (/ 1 n)))) (/ 1 n))))","(- 1 (exp (/ (log x) n)))","(- (+ 1 (/ x n)) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(* -1 (/ n (log x)))","(+ (* -1 (/ n (log x))) (* -1 (/ (* n x) (pow (log x) 2))))","(+ (* -1 (/ n (log x))) (* x (- (* -1 (* x (+ (* -1/2 (/ n (pow (log x) 2))) (/ n (pow (log x) 3))))) (/ n (pow (log x) 2)))))","(+ (* -1 (/ n (log x))) (* x (- (* x (- (* -1 (* x (+ (* -1 (/ n (pow (log x) 3))) (+ (* 1/3 (/ n (pow (log x) 2))) (/ n (pow (log x) 4)))))) (+ (* -1/2 (/ n (pow (log x) 2))) (/ n (pow (log x) 3))))) (/ n (pow (log x) 2)))))","(* n x)","(* -1/12 (/ n (pow x 2)))","(/ (- (* 1/2 (* n x)) (* 1/12 n)) (pow x 2))","(/ (- (* x (- (* n x) (* -1/2 n))) (* 1/12 n)) (pow x 2))","(* -1/12 (/ n x))","(/ (+ (* -1/12 n) (* 1/2 (* n x))) x)","(/ (+ (* -1/12 n) (* x (+ (* 1/2 n) (* n x)))) x)","(/ (- (* n (pow x 2)) (* 1/12 n)) (pow x 2))","(* -1 (log x))","(- x (log x))","(- (* x (+ 1 (* -1/2 x))) (log x))","(- (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) (log x))","(log x)","(+ (log x) (* -1 x))","(+ (log x) (* x (- (* 1/2 x) 1)))","(+ (log x) (* x (- (* x (+ 1/2 (* -1/3 x))) 1)))","(/ x n)","(- (exp (/ (log x) n)) 1)","(/ -1 (log x))","(- (* -1 (/ x (pow (log x) 2))) (/ 1 (log x)))","(- (* x (- (* x (- (* 1/2 (/ 1 (pow (log x) 2))) (/ 1 (pow (log x) 3)))) (/ 1 (pow (log x) 2)))) (/ 1 (log x)))","(- (* x (- (* x (- (+ (* 1/2 (/ 1 (pow (log x) 2))) (* x (- (* 1/2 (/ 1 (pow (log x) 3))) (+ (* -1 (/ (- (* 1/2 (/ 1 (pow (log x) 2))) (/ 1 (pow (log x) 3))) (log x))) (* 1/3 (/ 1 (pow (log x) 2))))))) (/ 1 (pow (log x) 3)))) (/ 1 (pow (log x) 2)))) (/ 1 (log x)))","(* 2 (log x))","(/ -1 (* n x))","(/ (- (* 1/2 (/ 1 (* n x))) (/ 1 n)) x)","(/ (- (/ 1/2 (* n x)) (+ (/ 1/3 (* n (pow x 2))) (/ 1 n))) x)","(/ (- (+ (/ 1/2 (* n x)) (* 1/4 (/ 1 (* n (pow x 3))))) (+ (/ 1 n) (* 1/3 (/ 1 (* n (pow x 2)))))) x)","(/ 1 (* n x))","(/ (- (/ 1 n) (* 1/2 (/ 1 (* n x)))) x)","(/ (- (+ (/ 1/3 (* n (pow x 2))) (/ 1 n)) (/ 1/2 (* n x))) x)","(/ (- (+ (/ 1 n) (* 1/3 (/ 1 (* n (pow x 2))))) (+ (/ 1/2 (* n x)) (* 1/4 (/ 1 (* n (pow x 3)))))) x)","(/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x))","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2)))) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) (pow x 3)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2))))) x)","(* x (+ n (* 1/2 (/ n x))))","(* x (- (+ n (* -1 (/ (+ (* -1/4 n) (* 1/3 n)) (pow x 2)))) (* -1/2 (/ n x))))","(* x (- (+ n (* -1 (/ (+ (* -1/4 n) (+ (* 1/6 n) (* 1/2 (+ (* -1/4 n) (* 1/3 n))))) (pow x 3)))) (+ (* -1/2 (/ n x)) (+ (* -1/4 (/ n (pow x 2))) (* 1/3 (/ n (pow x 2)))))))","n","(+ n (* 1/2 (/ n x)))","(- (+ n (* -1/12 (/ n (pow x 2)))) (* -1/2 (/ n x)))","(* x (+ n (+ (* -1/12 (/ n (pow x 2))) (* 1/2 (/ n x)))))","(+ n (* -1/12 (/ n (pow x 2))))","(/ 1 x)","(/ (- 1 (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3))))) x)","(/ -1 x)","(/ (- (* 1/2 (/ 1 x)) 1) x)","(/ (- (* 1/2 (/ 1 x)) (+ 1 (/ 1/3 (pow x 2)))) x)","(/ (- (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3)))) (+ 1 (/ 1/3 (pow x 2)))) x)","(* x (- (+ (/ 1 n) (/ 1 x)) (/ (exp (* -1 (/ (log (/ 1 x)) n))) x)))","(- (exp (* -1 (/ (log (/ 1 x)) n))) 1)","x","(* x (+ 1 (* 1/2 (/ 1 x))))","(* x (- (+ 1 (* 1/2 (/ 1 x))) (/ 1/12 (pow x 2))))","(* x (- (+ 1 (+ (* 1/2 (/ 1 x)) (* 1/24 (/ 1 (pow x 3))))) (/ 1/12 (pow x 2))))","(* -2 (log (/ 1 x)))","(* -1 (/ (log (/ 1 x)) n))","(* -1 (/ (- (/ 1 n) (* 1/2 (/ 1 (* n x)))) x))","(* -1 (/ (+ (* -1 (/ (- (* 1/2 (/ 1 n)) (* 1/3 (/ 1 (* n x)))) x)) (/ 1 n)) x))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (- (* 1/3 (/ 1 n)) (* 1/4 (/ 1 (* n x)))) x)) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(* -1 (/ (- (* 1/2 (/ 1 (* n x))) (/ 1 n)) x))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (* n x))) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 (* n x))) (* 1/3 (/ 1 n))) x)) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(* -1 (* x (+ (* -1 n) (* -1/2 (/ n x)))))","(* -1 (* x (+ (* -1 n) (* -1 (/ (- (+ (* -1/3 (/ n x)) (* 1/4 (/ n x))) (* -1/2 n)) x)))))","(* -1 (* x (+ (* -1 n) (* -1 (/ (- (* -1 (/ (- (+ (* -1/2 (/ (+ (* -1/3 n) (* 1/4 n)) x)) (+ (* -1/4 (/ n x)) (* 1/6 (/ n x)))) (+ (* -1/3 n) (* 1/4 n))) x)) (* -1/2 n)) x)))))","(+ n (* -1 (/ (- (* 1/12 (/ n x)) (* 1/2 n)) x)))","(* -1 (* x (+ (* -1 n) (* -1 (/ (+ (* -1/12 (/ n x)) (* 1/2 n)) x)))))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 x)) 1/3) x)) 1/2) x)) 1) x))","(* -1 (/ (- 1 (* 1/2 (/ 1 x))) x))","(* -1 (/ (+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 x))) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 x))) x))) x))) x))","(* -1 (* x (- (* -1 (/ (- 1 (exp (* -1 (/ (log (/ -1 x)) n)))) x)) (/ 1 n))))","(- (exp (* -1 (/ (log (/ -1 x)) n))) 1)","(* -1 (* x (- (* -1 (/ (- 1/2 (* 1/12 (/ 1 x))) x)) 1)))","(* -1 (* x (- (* -1 (/ (+ 1/2 (* -1 (/ (- 1/12 (* 1/24 (/ 1 x))) x))) x)) 1)))","(* -2 (log (/ -1 x)))","(* -1 (/ (log (/ -1 x)) n))","(* -1 (/ (- (log (+ 1 x)) (log x)) n))","(/ (- (log (+ 1 x)) (log x)) n)","(- (exp (/ (log (+ 1 x)) n)) (exp (/ (log x) n)))","(/ -1 n)","(/ n (- (log (+ 1 x)) (log x)))","(* n (- (+ 1 (* 1/2 (/ 1 x))) (* 1/12 (/ 1 (pow x 2)))))","(* n (* x (- (+ 1 (* 1/2 (/ 1 x))) (* 1/12 (/ 1 (pow x 2))))))","(* n (- 1 (* 1/12 (/ 1 (pow x 2)))))","(* -1 (/ (log (/ x (+ 1 x))) n))","(/ (+ x (* n (- 1 (exp (* 1/2 (/ (log (pow x 2)) n)))))) n)","(- (exp (* 1/2 (/ (log (pow x 2)) n))) 1)","(* 1/2 (/ (log (pow x 2)) n))","(/ (- (+ (log (+ 1 x)) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))) (+ (log x) (* 1/2 (/ (pow (log x) 2) n)))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n)))) (+ (log x) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n))))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/24 (/ (pow (log (+ 1 x)) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))))) (+ (log x) (+ (* 1/24 (/ (pow (log x) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n)))))) n)","(/ (- x (* 1/2 (log (pow x 2)))) n)","(/ (- (+ x (* -1/8 (/ (pow (log (pow x 2)) 2) n))) (* 1/2 (log (pow x 2)))) n)","(/ (- (+ x (* -1/48 (/ (pow (log (pow x 2)) 3) (pow n 2)))) (+ (* 1/8 (/ (pow (log (pow x 2)) 2) n)) (* 1/2 (log (pow x 2))))) n)","(/ (- (+ x (* -1/384 (/ (pow (log (pow x 2)) 4) (pow n 3)))) (+ (* 1/48 (/ (pow (log (pow x 2)) 3) (pow n 2))) (+ (* 1/8 (/ (pow (log (pow x 2)) 2) n)) (* 1/2 (log (pow x 2)))))) n)","(/ (+ (* 1/8 (/ (pow (log (pow x 2)) 2) n)) (* 1/2 (log (pow x 2)))) n)","(/ (+ (* 1/48 (/ (pow (log (pow x 2)) 3) (pow n 2))) (+ (* 1/8 (/ (pow (log (pow x 2)) 2) n)) (* 1/2 (log (pow x 2))))) n)","(/ (+ (* 1/384 (/ (pow (log (pow x 2)) 4) (pow n 3))) (+ (* 1/48 (/ (pow (log (pow x 2)) 3) (pow n 2))) (+ (* 1/8 (/ (pow (log (pow x 2)) 2) n)) (* 1/2 (log (pow x 2)))))) n)","(* -1 (/ (- (* -1 (log (+ 1 x))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (* 1/2 (pow (log (+ 1 x)) 2)) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (* -1/6 (pow (log (+ 1 x)) 3)) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/24 (pow (log (+ 1 x)) 4)) (* 1/24 (pow (log x) 4))) n)) (* -1/6 (pow (log (+ 1 x)) 3))) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (* n (- (* 1/12 (/ 1 (pow x 2))) (+ 1 (* 1/2 (/ 1 x))))))","(* -1 (* n (* x (- (* 1/12 (/ 1 (pow x 2))) (+ 1 (* 1/2 (/ 1 x)))))))","(* -1 (* n (- (* 1/12 (/ 1 (pow x 2))) 1)))","(* -1 (/ (- (* -1 x) (* -1/2 (log (pow x 2)))) n))","(* -1 (/ (- (+ (* -1 x) (* 1/8 (/ (pow (log (pow x 2)) 2) n))) (* -1/2 (log (pow x 2)))) n))","(* -1 (/ (- (+ (* -1 x) (* -1 (/ (- (* -1/48 (/ (pow (log (pow x 2)) 3) n)) (* 1/8 (pow (log (pow x 2)) 2))) n))) (* -1/2 (log (pow x 2)))) n))","(* -1 (/ (- (+ (* -1 x) (* -1 (/ (- (* -1 (/ (- (* 1/384 (/ (pow (log (pow x 2)) 4) n)) (* -1/48 (pow (log (pow x 2)) 3))) n)) (* 1/8 (pow (log (pow x 2)) 2))) n))) (* -1/2 (log (pow x 2)))) n))","(* -1 (/ (+ (* -1/2 (log (pow x 2))) (* -1/8 (/ (pow (log (pow x 2)) 2) n))) n))","(* -1 (/ (+ (* -1 (/ (+ (* 1/48 (/ (pow (log (pow x 2)) 3) n)) (* 1/8 (pow (log (pow x 2)) 2))) n)) (* -1/2 (log (pow x 2)))) n))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/48 (pow (log (pow x 2)) 3)) (* -1/384 (/ (pow (log (pow x 2)) 4) n))) n)) (* 1/8 (pow (log (pow x 2)) 2))) n)) (* -1/2 (log (pow x 2)))) n))"]],"series":[[52.462158203125,"((/ (/ -1 n) (pow (- (log (+ 1 x)) (log x)) -1)) (* -1 (/ (/ -1 n) (pow (- (log (+ 1 x)) (log x)) -1))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ -1 n) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ 1 (/ n (- (log (+ 1 x)) (log x)))) (/ n (- (log (+ 1 x)) (log x))) (* x n) (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) (* (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) x) (- n (* (/ n x) (/ 1/12 x))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (neg (log (/ x (+ 1 x)))) n) (neg (log (/ x (+ 1 x)))) (log (/ x (+ 1 x))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (- (/ x n) (- (exp (* (/ 1/2 n) (log (* x x)))) 1)) (/ x n) (- (exp (* (/ 1/2 n) (log (* x x)))) 1) (- (log (+ 1 x)) (log x)) (pow (- (log (+ 1 x)) (log x)) -1) (/ n (- (log (+ 1 x)) (log x))) (log (* x x)) (* (/ 1/2 n) (log (* x x))))","n","-inf"],[57.57080078125,"((/ (/ -1 n) (pow (- (log (+ 1 x)) (log x)) -1)) (* -1 (/ (/ -1 n) (pow (- (log (+ 1 x)) (log x)) -1))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ -1 n) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ 1 (/ n (- (log (+ 1 x)) (log x)))) (/ n (- (log (+ 1 x)) (log x))) (* x n) (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) (* (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) x) (- n (* (/ n x) (/ 1/12 x))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (neg (log (/ x (+ 1 x)))) n) (neg (log (/ x (+ 1 x)))) (log (/ x (+ 1 x))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (- (/ x n) (- (exp (* (/ 1/2 n) (log (* x x)))) 1)) (/ x n) (- (exp (* (/ 1/2 n) (log (* x x)))) 1) (- (log (+ 1 x)) (log x)) (pow (- (log (+ 1 x)) (log x)) -1) (/ n (- (log (+ 1 x)) (log x))) (log (* x x)) (* (/ 1/2 n) (log (* x x))))","n","inf"],[100.10986328125,"((/ (/ -1 n) (pow (- (log (+ 1 x)) (log x)) -1)) (* -1 (/ (/ -1 n) (pow (- (log (+ 1 x)) (log x)) -1))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ -1 n) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ 1 (/ n (- (log (+ 1 x)) (log x)))) (/ n (- (log (+ 1 x)) (log x))) (* x n) (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) (* (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) x) (- n (* (/ n x) (/ 1/12 x))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (neg (log (/ x (+ 1 x)))) n) (neg (log (/ x (+ 1 x)))) (log (/ x (+ 1 x))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (- (/ x n) (- (exp (* (/ 1/2 n) (log (* x x)))) 1)) (/ x n) (- (exp (* (/ 1/2 n) (log (* x x)))) 1) (- (log (+ 1 x)) (log x)) (pow (- (log (+ 1 x)) (log x)) -1) (/ n (- (log (+ 1 x)) (log x))) (log (* x x)) (* (/ 1/2 n) (log (* x x))))","n","0"],[12.10302734375,"((/ (/ -1 n) (pow (- (log (+ 1 x)) (log x)) -1)) (* -1 (/ (/ -1 n) (pow (- (log (+ 1 x)) (log x)) -1))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ -1 n) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ 1 (/ n (- (log (+ 1 x)) (log x)))) (/ n (- (log (+ 1 x)) (log x))) (* x n) (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) (* (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) x) (- n (* (/ n x) (/ 1/12 x))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (neg (log (/ x (+ 1 x)))) n) (neg (log (/ x (+ 1 x)))) (log (/ x (+ 1 x))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (- (/ x n) (- (exp (* (/ 1/2 n) (log (* x x)))) 1)) (/ x n) (- (exp (* (/ 1/2 n) (log (* x x)))) 1) (- (log (+ 1 x)) (log x)) (pow (- (log (+ 1 x)) (log x)) -1) (/ n (- (log (+ 1 x)) (log x))) (log (* x x)) (* (/ 1/2 n) (log (* x x))))","x","-inf"],[13.2861328125,"((/ (/ -1 n) (pow (- (log (+ 1 x)) (log x)) -1)) (* -1 (/ (/ -1 n) (pow (- (log (+ 1 x)) (log x)) -1))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ -1 n) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ 1 (/ n (- (log (+ 1 x)) (log x)))) (/ n (- (log (+ 1 x)) (log x))) (* x n) (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) (* (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) x) (- n (* (/ n x) (/ 1/12 x))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (neg (log (/ x (+ 1 x)))) n) (neg (log (/ x (+ 1 x)))) (log (/ x (+ 1 x))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (- (/ x n) (- (exp (* (/ 1/2 n) (log (* x x)))) 1)) (/ x n) (- (exp (* (/ 1/2 n) (log (* x x)))) 1) (- (log (+ 1 x)) (log x)) (pow (- (log (+ 1 x)) (log x)) -1) (/ n (- (log (+ 1 x)) (log x))) (log (* x x)) (* (/ 1/2 n) (log (* x x))))","x","inf"],[11.361083984375,"((/ (/ -1 n) (pow (- (log (+ 1 x)) (log x)) -1)) (* -1 (/ (/ -1 n) (pow (- (log (+ 1 x)) (log x)) -1))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ -1 n) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ 1 (/ n (- (log (+ 1 x)) (log x)))) (/ n (- (log (+ 1 x)) (log x))) (* x n) (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) (* (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) x) (- n (* (/ n x) (/ 1/12 x))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (neg (log (/ x (+ 1 x)))) n) (neg (log (/ x (+ 1 x)))) (log (/ x (+ 1 x))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (- (/ x n) (- (exp (* (/ 1/2 n) (log (* x x)))) 1)) (/ x n) (- (exp (* (/ 1/2 n) (log (* x x)))) 1) (- (log (+ 1 x)) (log x)) (pow (- (log (+ 1 x)) (log x)) -1) (/ n (- (log (+ 1 x)) (log x))) (log (* x x)) (* (/ 1/2 n) (log (* x x))))","x","0"]],"time":249.9638671875,"type":"series"},{"count":[[138,136]],"egraph":[[0,8018,2335,0.089787454],[2,6095,2475,0.028926396],[1,2110,2501,0.022666543],[0,681,2653,0.006798359]],"inputs":[["(/ (log x) n)","(+ (* -1 (/ x n)) (/ (log x) n))","(+ (* x (- (* 1/2 (/ x n)) (/ 1 n))) (/ (log x) n))","(+ (* x (- (* x (+ (* -1/3 (/ x n)) (* 1/2 (/ 1 n)))) (/ 1 n))) (/ (log x) n))","(* -1 (/ (log x) n))","(+ (* -1 (/ (log x) n)) (/ x n))","(+ (* -1 (/ (log x) n)) (* x (+ (* -1/2 (/ x n)) (/ 1 n))))","(+ (* -1 (/ (log x) n)) (* x (+ (* x (- (* 1/3 (/ x n)) (* 1/2 (/ 1 n)))) (/ 1 n))))","(- 1 (exp (/ (log x) n)))","(- (+ 1 (/ x n)) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(* -1 (/ n (log x)))","(+ (* -1 (/ n (log x))) (* -1 (/ (* n x) (pow (log x) 2))))","(+ (* -1 (/ n (log x))) (* x (- (* -1 (* x (+ (* -1/2 (/ n (pow (log x) 2))) (/ n (pow (log x) 3))))) (/ n (pow (log x) 2)))))","(+ (* -1 (/ n (log x))) (* x (- (* x (- (* -1 (* x (+ (* -1 (/ n (pow (log x) 3))) (+ (* 1/3 (/ n (pow (log x) 2))) (/ n (pow (log x) 4)))))) (+ (* -1/2 (/ n (pow (log x) 2))) (/ n (pow (log x) 3))))) (/ n (pow (log x) 2)))))","(* n x)","(* -1/12 (/ n (pow x 2)))","(/ (- (* 1/2 (* n x)) (* 1/12 n)) (pow x 2))","(/ (- (* x (- (* n x) (* -1/2 n))) (* 1/12 n)) (pow x 2))","(* -1/12 (/ n x))","(/ (+ (* -1/12 n) (* 1/2 (* n x))) x)","(/ (+ (* -1/12 n) (* x (+ (* 1/2 n) (* n x)))) x)","(/ (- (* n (pow x 2)) (* 1/12 n)) (pow x 2))","(* -1 (log x))","(- x (log x))","(- (* x (+ 1 (* -1/2 x))) (log x))","(- (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) (log x))","(log x)","(+ (log x) (* -1 x))","(+ (log x) (* x (- (* 1/2 x) 1)))","(+ (log x) (* x (- (* x (+ 1/2 (* -1/3 x))) 1)))","(/ x n)","(- (exp (/ (log x) n)) 1)","(/ -1 (log x))","(- (* -1 (/ x (pow (log x) 2))) (/ 1 (log x)))","(- (* x (- (* x (- (* 1/2 (/ 1 (pow (log x) 2))) (/ 1 (pow (log x) 3)))) (/ 1 (pow (log x) 2)))) (/ 1 (log x)))","(- (* x (- (* x (- (+ (* 1/2 (/ 1 (pow (log x) 2))) (* x (- (* 1/2 (/ 1 (pow (log x) 3))) (+ (* -1 (/ (- (* 1/2 (/ 1 (pow (log x) 2))) (/ 1 (pow (log x) 3))) (log x))) (* 1/3 (/ 1 (pow (log x) 2))))))) (/ 1 (pow (log x) 3)))) (/ 1 (pow (log x) 2)))) (/ 1 (log x)))","(* 2 (log x))","(/ -1 (* n x))","(/ (- (* 1/2 (/ 1 (* n x))) (/ 1 n)) x)","(/ (- (/ 1/2 (* n x)) (+ (/ 1/3 (* n (pow x 2))) (/ 1 n))) x)","(/ (- (+ (/ 1/2 (* n x)) (* 1/4 (/ 1 (* n (pow x 3))))) (+ (/ 1 n) (* 1/3 (/ 1 (* n (pow x 2)))))) x)","(/ 1 (* n x))","(/ (- (/ 1 n) (* 1/2 (/ 1 (* n x)))) x)","(/ (- (+ (/ 1/3 (* n (pow x 2))) (/ 1 n)) (/ 1/2 (* n x))) x)","(/ (- (+ (/ 1 n) (* 1/3 (/ 1 (* n (pow x 2))))) (+ (/ 1/2 (* n x)) (* 1/4 (/ 1 (* n (pow x 3)))))) x)","(/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x))","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2)))) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) (pow x 3)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2))))) x)","(* x (+ n (* 1/2 (/ n x))))","(* x (- (+ n (* -1 (/ (+ (* -1/4 n) (* 1/3 n)) (pow x 2)))) (* -1/2 (/ n x))))","(* x (- (+ n (* -1 (/ (+ (* -1/4 n) (+ (* 1/6 n) (* 1/2 (+ (* -1/4 n) (* 1/3 n))))) (pow x 3)))) (+ (* -1/2 (/ n x)) (+ (* -1/4 (/ n (pow x 2))) (* 1/3 (/ n (pow x 2)))))))","n","(+ n (* 1/2 (/ n x)))","(- (+ n (* -1/12 (/ n (pow x 2)))) (* -1/2 (/ n x)))","(* x (+ n (+ (* -1/12 (/ n (pow x 2))) (* 1/2 (/ n x)))))","(+ n (* -1/12 (/ n (pow x 2))))","(/ 1 x)","(/ (- 1 (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3))))) x)","(/ -1 x)","(/ (- (* 1/2 (/ 1 x)) 1) x)","(/ (- (* 1/2 (/ 1 x)) (+ 1 (/ 1/3 (pow x 2)))) x)","(/ (- (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3)))) (+ 1 (/ 1/3 (pow x 2)))) x)","(* x (- (+ (/ 1 n) (/ 1 x)) (/ (exp (* -1 (/ (log (/ 1 x)) n))) x)))","(- (exp (* -1 (/ (log (/ 1 x)) n))) 1)","x","(* x (+ 1 (* 1/2 (/ 1 x))))","(* x (- (+ 1 (* 1/2 (/ 1 x))) (/ 1/12 (pow x 2))))","(* x (- (+ 1 (+ (* 1/2 (/ 1 x)) (* 1/24 (/ 1 (pow x 3))))) (/ 1/12 (pow x 2))))","(* -2 (log (/ 1 x)))","(* -1 (/ (log (/ 1 x)) n))","(* -1 (/ (- (/ 1 n) (* 1/2 (/ 1 (* n x)))) x))","(* -1 (/ (+ (* -1 (/ (- (* 1/2 (/ 1 n)) (* 1/3 (/ 1 (* n x)))) x)) (/ 1 n)) x))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (- (* 1/3 (/ 1 n)) (* 1/4 (/ 1 (* n x)))) x)) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(* -1 (/ (- (* 1/2 (/ 1 (* n x))) (/ 1 n)) x))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (* n x))) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 (* n x))) (* 1/3 (/ 1 n))) x)) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(* -1 (* x (+ (* -1 n) (* -1/2 (/ n x)))))","(* -1 (* x (+ (* -1 n) (* -1 (/ (- (+ (* -1/3 (/ n x)) (* 1/4 (/ n x))) (* -1/2 n)) x)))))","(* -1 (* x (+ (* -1 n) (* -1 (/ (- (* -1 (/ (- (+ (* -1/2 (/ (+ (* -1/3 n) (* 1/4 n)) x)) (+ (* -1/4 (/ n x)) (* 1/6 (/ n x)))) (+ (* -1/3 n) (* 1/4 n))) x)) (* -1/2 n)) x)))))","(+ n (* -1 (/ (- (* 1/12 (/ n x)) (* 1/2 n)) x)))","(* -1 (* x (+ (* -1 n) (* -1 (/ (+ (* -1/12 (/ n x)) (* 1/2 n)) x)))))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 x)) 1/3) x)) 1/2) x)) 1) x))","(* -1 (/ (- 1 (* 1/2 (/ 1 x))) x))","(* -1 (/ (+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 x))) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 x))) x))) x))) x))","(* -1 (* x (- (* -1 (/ (- 1 (exp (* -1 (/ (log (/ -1 x)) n)))) x)) (/ 1 n))))","(- (exp (* -1 (/ (log (/ -1 x)) n))) 1)","(* -1 (* x (- (* -1 (/ (- 1/2 (* 1/12 (/ 1 x))) x)) 1)))","(* -1 (* x (- (* -1 (/ (+ 1/2 (* -1 (/ (- 1/12 (* 1/24 (/ 1 x))) x))) x)) 1)))","(* -2 (log (/ -1 x)))","(* -1 (/ (log (/ -1 x)) n))","(* -1 (/ (- (log (+ 1 x)) (log x)) n))","(/ (- (log (+ 1 x)) (log x)) n)","(- (exp (/ (log (+ 1 x)) n)) (exp (/ (log x) n)))","(/ -1 n)","(/ n (- (log (+ 1 x)) (log x)))","(* n (- (+ 1 (* 1/2 (/ 1 x))) (* 1/12 (/ 1 (pow x 2)))))","(* n (* x (- (+ 1 (* 1/2 (/ 1 x))) (* 1/12 (/ 1 (pow x 2))))))","(* n (- 1 (* 1/12 (/ 1 (pow x 2)))))","(* -1 (/ (log (/ x (+ 1 x))) n))","(/ (+ x (* n (- 1 (exp (* 1/2 (/ (log (pow x 2)) n)))))) n)","(- (exp (* 1/2 (/ (log (pow x 2)) n))) 1)","(* 1/2 (/ (log (pow x 2)) n))","(/ (- (+ (log (+ 1 x)) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))) (+ (log x) (* 1/2 (/ (pow (log x) 2) n)))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n)))) (+ (log x) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n))))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/24 (/ (pow (log (+ 1 x)) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))))) (+ (log x) (+ (* 1/24 (/ (pow (log x) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n)))))) n)","(/ (- x (* 1/2 (log (pow x 2)))) n)","(/ (- (+ x (* -1/8 (/ (pow (log (pow x 2)) 2) n))) (* 1/2 (log (pow x 2)))) n)","(/ (- (+ x (* -1/48 (/ (pow (log (pow x 2)) 3) (pow n 2)))) (+ (* 1/8 (/ (pow (log (pow x 2)) 2) n)) (* 1/2 (log (pow x 2))))) n)","(/ (- (+ x (* -1/384 (/ (pow (log (pow x 2)) 4) (pow n 3)))) (+ (* 1/48 (/ (pow (log (pow x 2)) 3) (pow n 2))) (+ (* 1/8 (/ (pow (log (pow x 2)) 2) n)) (* 1/2 (log (pow x 2)))))) n)","(/ (+ (* 1/8 (/ (pow (log (pow x 2)) 2) n)) (* 1/2 (log (pow x 2)))) n)","(/ (+ (* 1/48 (/ (pow (log (pow x 2)) 3) (pow n 2))) (+ (* 1/8 (/ (pow (log (pow x 2)) 2) n)) (* 1/2 (log (pow x 2))))) n)","(/ (+ (* 1/384 (/ (pow (log (pow x 2)) 4) (pow n 3))) (+ (* 1/48 (/ (pow (log (pow x 2)) 3) (pow n 2))) (+ (* 1/8 (/ (pow (log (pow x 2)) 2) n)) (* 1/2 (log (pow x 2)))))) n)","(* -1 (/ (- (* -1 (log (+ 1 x))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (* 1/2 (pow (log (+ 1 x)) 2)) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (* -1/6 (pow (log (+ 1 x)) 3)) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/24 (pow (log (+ 1 x)) 4)) (* 1/24 (pow (log x) 4))) n)) (* -1/6 (pow (log (+ 1 x)) 3))) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (* n (- (* 1/12 (/ 1 (pow x 2))) (+ 1 (* 1/2 (/ 1 x))))))","(* -1 (* n (* x (- (* 1/12 (/ 1 (pow x 2))) (+ 1 (* 1/2 (/ 1 x)))))))","(* -1 (* n (- (* 1/12 (/ 1 (pow x 2))) 1)))","(* -1 (/ (- (* -1 x) (* -1/2 (log (pow x 2)))) n))","(* -1 (/ (- (+ (* -1 x) (* 1/8 (/ (pow (log (pow x 2)) 2) n))) (* -1/2 (log (pow x 2)))) n))","(* -1 (/ (- (+ (* -1 x) (* -1 (/ (- (* -1/48 (/ (pow (log (pow x 2)) 3) n)) (* 1/8 (pow (log (pow x 2)) 2))) n))) (* -1/2 (log (pow x 2)))) n))","(* -1 (/ (- (+ (* -1 x) (* -1 (/ (- (* -1 (/ (- (* 1/384 (/ (pow (log (pow x 2)) 4) n)) (* -1/48 (pow (log (pow x 2)) 3))) n)) (* 1/8 (pow (log (pow x 2)) 2))) n))) (* -1/2 (log (pow x 2)))) n))","(* -1 (/ (+ (* -1/2 (log (pow x 2))) (* -1/8 (/ (pow (log (pow x 2)) 2) n))) n))","(* -1 (/ (+ (* -1 (/ (+ (* 1/48 (/ (pow (log (pow x 2)) 3) n)) (* 1/8 (pow (log (pow x 2)) 2))) n)) (* -1/2 (log (pow x 2)))) n))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/48 (pow (log (pow x 2)) 3)) (* -1/384 (/ (pow (log (pow x 2)) 4) n))) n)) (* 1/8 (pow (log (pow x 2)) 2))) n)) (* -1/2 (log (pow x 2)))) n))"]],"memory":[[-4414560,47017136]],"method":["egg-herbie"],"outputs":[["(/ (log x) n)","(/.f64 (log.f64 x) n)","(+ (* -1 (/ x n)) (/ (log x) n))","(-.f64 (/.f64 (log.f64 x) n) (/.f64 x n))","(+ (* x (- (* 1/2 (/ x n)) (/ 1 n))) (/ (log x) n))","(fma.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) n) x (/.f64 #s(literal -1 binary64) n)) x (/.f64 (log.f64 x) n))","(+ (* x (- (* x (+ (* -1/3 (/ x n)) (* 1/2 (/ 1 n)))) (/ 1 n))) (/ (log x) n))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/3 binary64) (/.f64 x n) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal -1 binary64) n)) x (/.f64 (log.f64 x) n))","(* -1 (/ (log x) n))","(/.f64 (neg.f64 (log.f64 x)) n)","(+ (* -1 (/ (log x) n)) (/ x n))","(-.f64 (/.f64 x n) (/.f64 (log.f64 x) n))","(+ (* -1 (/ (log x) n)) (* x (+ (* -1/2 (/ x n)) (/ 1 n))))","(fma.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 x n) (/.f64 #s(literal 1 binary64) n)) x (/.f64 (neg.f64 (log.f64 x)) n))","(+ (* -1 (/ (log x) n)) (* x (+ (* x (- (* 1/3 (/ x n)) (* 1/2 (/ 1 n)))) (/ 1 n))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) (/.f64 x n) (/.f64 #s(literal -1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x (/.f64 (neg.f64 (log.f64 x)) n))","(- 1 (exp (/ (log x) n)))","(-.f64 #s(literal 1 binary64) (exp.f64 (/.f64 (log.f64 x) n)))","(- (+ 1 (/ x n)) (exp (/ (log x) n)))","(-.f64 (+.f64 (/.f64 x n) #s(literal 1 binary64)) (exp.f64 (/.f64 (log.f64 x) n)))","(- (+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(fma.f64 (fma.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x (-.f64 #s(literal 1 binary64) (exp.f64 (/.f64 (log.f64 x) n))))","(- (+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 (/.f64 #s(literal 1/2 binary64) n) n)) x (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x (-.f64 #s(literal 1 binary64) (exp.f64 (/.f64 (log.f64 x) n))))","(* -1 (/ n (log x)))","(/.f64 (neg.f64 n) (log.f64 x))","(+ (* -1 (/ n (log x))) (* -1 (/ (* n x) (pow (log x) 2))))","(neg.f64 (fma.f64 (/.f64 x (pow.f64 (log.f64 x) #s(literal 2 binary64))) n (/.f64 n (log.f64 x))))","(+ (* -1 (/ n (log x))) (* x (- (* -1 (* x (+ (* -1/2 (/ n (pow (log x) 2))) (/ n (pow (log x) 3))))) (/ n (pow (log x) 2)))))","(fma.f64 (neg.f64 (fma.f64 (fma.f64 (/.f64 n (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64) (/.f64 n (pow.f64 (log.f64 x) #s(literal 3 binary64)))) x (/.f64 n (pow.f64 (log.f64 x) #s(literal 2 binary64))))) x (/.f64 (neg.f64 n) (log.f64 x)))","(+ (* -1 (/ n (log x))) (* x (- (* x (- (* -1 (* x (+ (* -1 (/ n (pow (log x) 3))) (+ (* 1/3 (/ n (pow (log x) 2))) (/ n (pow (log x) 4)))))) (+ (* -1/2 (/ n (pow (log x) 2))) (/ n (pow (log x) 3))))) (/ n (pow (log x) 2)))))","(fma.f64 (fma.f64 (neg.f64 (fma.f64 (-.f64 (fma.f64 (/.f64 n (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/3 binary64) (/.f64 n (pow.f64 (log.f64 x) #s(literal 4 binary64)))) (/.f64 n (pow.f64 (log.f64 x) #s(literal 3 binary64)))) x (fma.f64 (/.f64 n (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64) (/.f64 n (pow.f64 (log.f64 x) #s(literal 3 binary64)))))) x (/.f64 (neg.f64 n) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) x (/.f64 (neg.f64 n) (log.f64 x)))","(* n x)","(*.f64 x n)","(* -1/12 (/ n (pow x 2)))","(*.f64 (/.f64 n (*.f64 x x)) #s(literal -1/12 binary64))","(/ (- (* 1/2 (* n x)) (* 1/12 n)) (pow x 2))","(/.f64 (/.f64 (fma.f64 #s(literal -1/12 binary64) n (*.f64 (*.f64 x n) #s(literal 1/2 binary64))) x) x)","(/ (- (* x (- (* n x) (* -1/2 n))) (* 1/12 n)) (pow x 2))","(/.f64 (fma.f64 #s(literal -1/12 binary64) n (*.f64 (*.f64 x n) (+.f64 #s(literal 1/2 binary64) x))) (*.f64 x x))","(* -1/12 (/ n x))","(*.f64 (/.f64 n x) #s(literal -1/12 binary64))","(/ (+ (* -1/12 n) (* 1/2 (* n x))) x)","(/.f64 (fma.f64 #s(literal -1/12 binary64) n (*.f64 (*.f64 x n) #s(literal 1/2 binary64))) x)","(/ (+ (* -1/12 n) (* x (+ (* 1/2 n) (* n x)))) x)","(/.f64 (fma.f64 #s(literal -1/12 binary64) n (*.f64 (*.f64 x n) (+.f64 #s(literal 1/2 binary64) x))) x)","(/ (- (* n (pow x 2)) (* 1/12 n)) (pow x 2))","(*.f64 (/.f64 n x) (/.f64 (fma.f64 x x #s(literal -1/12 binary64)) x))","(* -1 (log x))","(neg.f64 (log.f64 x))","(- x (log x))","(-.f64 x (log.f64 x))","(- (* x (+ 1 (* -1/2 x))) (log x))","(fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) x (neg.f64 (log.f64 x)))","(- (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) (log x))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x (neg.f64 (log.f64 x)))","(log x)","(log.f64 x)","(+ (log x) (* -1 x))","(-.f64 (log.f64 x) x)","(+ (log x) (* x (- (* 1/2 x) 1)))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x (log.f64 x))","(+ (log x) (* x (- (* x (+ 1/2 (* -1/3 x))) 1)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x (log.f64 x))","(/ x n)","(/.f64 x n)","(- (exp (/ (log x) n)) 1)","(expm1.f64 (/.f64 (log.f64 x) n))","(/ -1 (log x))","(/.f64 #s(literal -1 binary64) (log.f64 x))","(- (* -1 (/ x (pow (log x) 2))) (/ 1 (log x)))","(-.f64 (/.f64 #s(literal -1 binary64) (log.f64 x)) (/.f64 x (pow.f64 (log.f64 x) #s(literal 2 binary64))))","(- (* x (- (* x (- (* 1/2 (/ 1 (pow (log x) 2))) (/ 1 (pow (log x) 3)))) (/ 1 (pow (log x) 2)))) (/ 1 (log x)))","(fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) x (/.f64 #s(literal -1 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) x (/.f64 #s(literal -1 binary64) (log.f64 x)))","(- (* x (- (* x (- (+ (* 1/2 (/ 1 (pow (log x) 2))) (* x (- (* 1/2 (/ 1 (pow (log x) 3))) (+ (* -1 (/ (- (* 1/2 (/ 1 (pow (log x) 2))) (/ 1 (pow (log x) 3))) (log x))) (* 1/3 (/ 1 (pow (log x) 2))))))) (/ 1 (pow (log x) 3)))) (/ 1 (pow (log x) 2)))) (/ 1 (log x)))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (-.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (log.f64 x)))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) x (/.f64 #s(literal -1 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) x (/.f64 #s(literal -1 binary64) (log.f64 x)))","(* 2 (log x))","(*.f64 #s(literal 2 binary64) (log.f64 x))","(/ -1 (* n x))","(/.f64 #s(literal -1 binary64) (*.f64 x n))","(/ (- (* 1/2 (/ 1 (* n x))) (/ 1 n)) x)","(/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) x) (/.f64 #s(literal 1 binary64) n)) x)","(/ (- (/ 1/2 (* n x)) (+ (/ 1/3 (* n (pow x 2))) (/ 1 n))) x)","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 (/.f64 #s(literal 1/3 binary64) n) x)) x) (/.f64 #s(literal 1 binary64) n)) x)","(/ (- (+ (/ 1/2 (* n x)) (* 1/4 (/ 1 (* n (pow x 3))))) (+ (/ 1 n) (* 1/3 (/ 1 (* n (pow x 2)))))) x)","(/.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) n)) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 (/.f64 #s(literal 1/3 binary64) n) x)) x) (/.f64 #s(literal 1 binary64) n))) x)","(/ 1 (* n x))","(/.f64 (/.f64 #s(literal 1 binary64) n) x)","(/ (- (/ 1 n) (* 1/2 (/ 1 (* n x)))) x)","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (/.f64 #s(literal 1/2 binary64) n) x)) x)","(/ (- (+ (/ 1/3 (* n (pow x 2))) (/ 1 n)) (/ 1/2 (* n x))) x)","(/.f64 (+.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) n) x) (/.f64 #s(literal 1/2 binary64) n)) x)) x)","(/ (- (+ (/ 1 n) (* 1/3 (/ 1 (* n (pow x 2))))) (+ (/ 1/2 (* n x)) (* 1/4 (/ 1 (* n (pow x 3)))))) x)","(/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) n) x) (/.f64 #s(literal 1/2 binary64) n)) x)) (/.f64 #s(literal 1/4 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) n))) x)","(/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x))","(/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x n))","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x)) x)","(/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n)) x) (exp.f64 (/.f64 (log.f64 x) n)) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2)))) x)","(/.f64 (fma.f64 (exp.f64 (/.f64 (log.f64 x) n)) (+.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 (/.f64 #s(literal 1/2 binary64) n) n)) (*.f64 x x)) (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n)) x)) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) (pow x 3)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2))))) x)","(/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n)) x) (exp.f64 (/.f64 (log.f64 x) n)) (fma.f64 (exp.f64 (/.f64 (log.f64 x) n)) (+.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 11/24 binary64) (*.f64 n n)) (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 4 binary64)))) (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 #s(literal 1/4 binary64) n))) (pow.f64 x #s(literal 3 binary64))) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 (/.f64 #s(literal 1/2 binary64) n) n)) (*.f64 x x))) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n))) x)","(* x (+ n (* 1/2 (/ n x))))","(*.f64 (fma.f64 (/.f64 n x) #s(literal 1/2 binary64) n) x)","(* x (- (+ n (* -1 (/ (+ (* -1/4 n) (* 1/3 n)) (pow x 2)))) (* -1/2 (/ n x))))","(*.f64 (+.f64 (/.f64 (fma.f64 (/.f64 n x) #s(literal -1/12 binary64) (*.f64 #s(literal 1/2 binary64) n)) x) n) x)","(* x (- (+ n (* -1 (/ (+ (* -1/4 n) (+ (* 1/6 n) (* 1/2 (+ (* -1/4 n) (* 1/3 n))))) (pow x 3)))) (+ (* -1/2 (/ n x)) (+ (* -1/4 (/ n (pow x 2))) (* 1/3 (/ n (pow x 2)))))))","(*.f64 (-.f64 (-.f64 n (/.f64 (fma.f64 #s(literal 1/24 binary64) n (*.f64 #s(literal -1/12 binary64) n)) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (fma.f64 (/.f64 n x) #s(literal 1/12 binary64) (*.f64 #s(literal -1/2 binary64) n)) x)) x)","n","(+ n (* 1/2 (/ n x)))","(fma.f64 (/.f64 n x) #s(literal 1/2 binary64) n)","(- (+ n (* -1/12 (/ n (pow x 2)))) (* -1/2 (/ n x)))","(+.f64 (/.f64 (fma.f64 (/.f64 n x) #s(literal -1/12 binary64) (*.f64 #s(literal 1/2 binary64) n)) x) n)","(* x (+ n (+ (* -1/12 (/ n (pow x 2))) (* 1/2 (/ n x)))))","(*.f64 (+.f64 (/.f64 (fma.f64 (/.f64 n x) #s(literal -1/12 binary64) (*.f64 #s(literal 1/2 binary64) n)) x) n) x)","(+ n (* -1/12 (/ n (pow x 2))))","(fma.f64 (/.f64 n (*.f64 x x)) #s(literal -1/12 binary64) n)","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ (- 1 (* 1/2 (/ 1 x))) x)","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (* 1/2 (/ 1 x))) x)","(/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3))))) x)","(/.f64 (+.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x) #s(literal 1 binary64)) x)","(/ -1 x)","(/.f64 #s(literal -1 binary64) x)","(/ (- (* 1/2 (/ 1 x)) 1) x)","(/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x)","(/ (- (* 1/2 (/ 1 x)) (+ 1 (/ 1/3 (pow x 2)))) x)","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)","(/ (- (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3)))) (+ 1 (/ 1/3 (pow x 2)))) x)","(/.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x))) x)","(* x (- (+ (/ 1 n) (/ 1 x)) (/ (exp (* -1 (/ (log (/ 1 x)) n))) x)))","(*.f64 (-.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) n)) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) x)) x)","(- (exp (* -1 (/ (log (/ 1 x)) n))) 1)","(expm1.f64 (/.f64 (log.f64 x) n))","x","(* x (+ 1 (* 1/2 (/ 1 x))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) x) x x)","(* x (- (+ 1 (* 1/2 (/ 1 x))) (/ 1/12 (pow x 2))))","(*.f64 (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/12 binary64) x)) x) #s(literal 1 binary64)) x)","(* x (- (+ 1 (+ (* 1/2 (/ 1 x)) (* 1/24 (/ 1 (pow x 3))))) (/ 1/12 (pow x 2))))","(*.f64 (+.f64 (+.f64 (/.f64 #s(literal 1/24 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/12 binary64) x)) x)) #s(literal 1 binary64)) x)","(* -2 (log (/ 1 x)))","(*.f64 #s(literal 2 binary64) (log.f64 x))","(* -1 (/ (log (/ 1 x)) n))","(/.f64 (log.f64 x) n)","(* -1 (/ (- (/ 1 n) (* 1/2 (/ 1 (* n x)))) x))","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (/.f64 #s(literal 1/2 binary64) n) x)) (neg.f64 x))","(* -1 (/ (+ (* -1 (/ (- (* 1/2 (/ 1 n)) (* 1/3 (/ 1 (* n x)))) x)) (/ 1 n)) x))","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 (/.f64 #s(literal 1/3 binary64) n) x)) x)) (neg.f64 x))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (- (* 1/3 (/ 1 n)) (* 1/4 (/ 1 (* n x)))) x)) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 (/.f64 #s(literal 1/4 binary64) n) x)) x)) x)) (neg.f64 x))","(* -1 (/ (- (* 1/2 (/ 1 (* n x))) (/ 1 n)) x))","(/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) x) (/.f64 #s(literal 1 binary64) n)) (neg.f64 x))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (* n x))) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) n) (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) n) x) (/.f64 #s(literal 1/2 binary64) n)) x)) (neg.f64 x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 (* n x))) (* 1/3 (/ 1 n))) x)) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) n) (/.f64 (-.f64 (/.f64 #s(literal -1/2 binary64) n) (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) n) x) (/.f64 #s(literal 1/3 binary64) n)) x)) x)) (neg.f64 x))","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x))","(/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (*.f64 x n))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x))","(/.f64 (neg.f64 (fma.f64 (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n)) x) (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n))) (neg.f64 x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(/.f64 (-.f64 (/.f64 (fma.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (neg.f64 (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))))) x)) (*.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n)))) (neg.f64 x)) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) (neg.f64 x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(/.f64 (-.f64 (/.f64 (-.f64 (*.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n))) (/.f64 (fma.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))))) (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (*.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (neg.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 11/24 binary64) (*.f64 n n)) (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 4 binary64)))) (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 #s(literal 1/4 binary64) n))) x)))) x)) (neg.f64 x)) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) (neg.f64 x))","(* -1 (* x (+ (* -1 n) (* -1/2 (/ n x)))))","(*.f64 (fma.f64 (/.f64 n x) #s(literal -1/2 binary64) (neg.f64 n)) (neg.f64 x))","(* -1 (* x (+ (* -1 n) (* -1 (/ (- (+ (* -1/3 (/ n x)) (* 1/4 (/ n x))) (* -1/2 n)) x)))))","(*.f64 (-.f64 (/.f64 (fma.f64 (/.f64 n x) #s(literal 1/12 binary64) (*.f64 #s(literal -1/2 binary64) n)) x) n) (neg.f64 x))","(* -1 (* x (+ (* -1 n) (* -1 (/ (- (* -1 (/ (- (+ (* -1/2 (/ (+ (* -1/3 n) (* 1/4 n)) x)) (+ (* -1/4 (/ n x)) (* 1/6 (/ n x)))) (+ (* -1/3 n) (* 1/4 n))) x)) (* -1/2 n)) x)))))","(*.f64 (-.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) n (/.f64 (fma.f64 #s(literal 1/12 binary64) n (*.f64 #s(literal 1/2 binary64) (*.f64 (/.f64 n x) #s(literal -1/12 binary64)))) (neg.f64 x))) (neg.f64 x)) n) (neg.f64 x))","(+ n (* -1 (/ (- (* 1/12 (/ n x)) (* 1/2 n)) x)))","(+.f64 (/.f64 (fma.f64 (/.f64 n x) #s(literal -1/12 binary64) (*.f64 #s(literal 1/2 binary64) n)) x) n)","(* -1 (* x (+ (* -1 n) (* -1 (/ (+ (* -1/12 (/ n x)) (* 1/2 n)) x)))))","(*.f64 (-.f64 (/.f64 (fma.f64 (/.f64 n x) #s(literal 1/12 binary64) (*.f64 #s(literal -1/2 binary64) n)) x) n) (neg.f64 x))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/3 binary64) x)) x)) x)","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 x)) 1/3) x)) 1/2) x)) 1) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) x)) x)) x)) x)","(* -1 (/ (- 1 (* 1/2 (/ 1 x))) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) (neg.f64 x))","(* -1 (/ (+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 x))) x))) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/3 binary64) x)) x)) (neg.f64 x))","(* -1 (/ (+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 x))) x))) x))) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) x)) x)) x)) (neg.f64 x))","(* -1 (* x (- (* -1 (/ (- 1 (exp (* -1 (/ (log (/ -1 x)) n)))) x)) (/ 1 n))))","(*.f64 (-.f64 (/.f64 #s(literal -1 binary64) n) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) n))) x)) (neg.f64 x))","(- (exp (* -1 (/ (log (/ -1 x)) n))) 1)","(expm1.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (neg.f64 n)))","(* -1 (* x (- (* -1 (/ (- 1/2 (* 1/12 (/ 1 x))) x)) 1)))","(*.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/12 binary64) x)) x)) (neg.f64 x))","(* -1 (* x (- (* -1 (/ (+ 1/2 (* -1 (/ (- 1/12 (* 1/24 (/ 1 x))) x))) x)) 1)))","(*.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) x)) x)) x)) (neg.f64 x))","(* -2 (log (/ -1 x)))","(*.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -2 binary64))","(* -1 (/ (log (/ -1 x)) n))","(/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (neg.f64 n))","(* -1 (/ (- (log (+ 1 x)) (log x)) n))","(/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n)","(/ (- (log (+ 1 x)) (log x)) n)","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(- (exp (/ (log (+ 1 x)) n)) (exp (/ (log x) n)))","(-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (exp.f64 (/.f64 (log.f64 x) n)))","(/ -1 n)","(/.f64 #s(literal -1 binary64) n)","(/ n (- (log (+ 1 x)) (log x)))","(/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))","(* n (- (+ 1 (* 1/2 (/ 1 x))) (* 1/12 (/ 1 (pow x 2)))))","(*.f64 (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/12 binary64) x)) x) #s(literal 1 binary64)) n)","(* n (* x (- (+ 1 (* 1/2 (/ 1 x))) (* 1/12 (/ 1 (pow x 2))))))","(*.f64 (*.f64 (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/12 binary64) x)) x) #s(literal 1 binary64)) x) n)","(* n (- 1 (* 1/12 (/ 1 (pow x 2)))))","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1/12 binary64) x) x)) n)","(* -1 (/ (log (/ x (+ 1 x))) n))","(/.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))) (neg.f64 n))","(/ (+ x (* n (- 1 (exp (* 1/2 (/ (log (pow x 2)) n)))))) n)","(/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 x x) (/.f64 #s(literal 1/2 binary64) n))) n x) n)","(- (exp (* 1/2 (/ (log (pow x 2)) n))) 1)","(expm1.f64 (*.f64 (log.f64 (*.f64 x x)) (/.f64 #s(literal 1/2 binary64) n)))","(* 1/2 (/ (log (pow x 2)) n))","(*.f64 (log.f64 (*.f64 x x)) (/.f64 #s(literal 1/2 binary64) n))","(/ (- (+ (log (+ 1 x)) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))) (+ (log x) (* 1/2 (/ (pow (log x) 2) n)))) n)","(/.f64 (-.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (log1p.f64 x)) (log.f64 x)) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n)))) (+ (log x) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n))))) n)","(/.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) n) (/.f64 #s(literal 1/6 binary64) n) (fma.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (log1p.f64 x))) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) (/.f64 #s(literal 1/6 binary64) n) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (log.f64 x)))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/24 (/ (pow (log (+ 1 x)) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))))) (+ (log x) (+ (* 1/24 (/ (pow (log x) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n)))))) n)","(/.f64 (-.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) n) (/.f64 #s(literal 1/6 binary64) n) (fma.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (log1p.f64 x)))) (fma.f64 (pow.f64 (log.f64 x) #s(literal 4 binary64)) (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) (/.f64 #s(literal 1/6 binary64) n) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (log.f64 x))))) n)","(/ (- x (* 1/2 (log (pow x 2)))) n)","(/.f64 (fma.f64 (log.f64 (*.f64 x x)) #s(literal -1/2 binary64) x) n)","(/ (- (+ x (* -1/8 (/ (pow (log (pow x 2)) 2) n))) (* 1/2 (log (pow x 2)))) n)","(/.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 (*.f64 x x)) #s(literal 2 binary64)) n) #s(literal -1/8 binary64) (fma.f64 (log.f64 (*.f64 x x)) #s(literal -1/2 binary64) x)) n)","(/ (- (+ x (* -1/48 (/ (pow (log (pow x 2)) 3) (pow n 2)))) (+ (* 1/8 (/ (pow (log (pow x 2)) 2) n)) (* 1/2 (log (pow x 2))))) n)","(/.f64 (-.f64 (+.f64 (/.f64 (fma.f64 (pow.f64 (log.f64 (*.f64 x x)) #s(literal 2 binary64)) #s(literal -1/8 binary64) (*.f64 (/.f64 (pow.f64 (log.f64 (*.f64 x x)) #s(literal 3 binary64)) n) #s(literal -1/48 binary64))) n) x) (*.f64 (log.f64 (*.f64 x x)) #s(literal 1/2 binary64))) n)","(/ (- (+ x (* -1/384 (/ (pow (log (pow x 2)) 4) (pow n 3)))) (+ (* 1/48 (/ (pow (log (pow x 2)) 3) (pow n 2))) (+ (* 1/8 (/ (pow (log (pow x 2)) 2) n)) (* 1/2 (log (pow x 2)))))) n)","(/.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 (*.f64 x x)) #s(literal 4 binary64)) (pow.f64 n #s(literal 3 binary64))) #s(literal -1/384 binary64) x) (fma.f64 #s(literal 1/48 binary64) (/.f64 (pow.f64 (log.f64 (*.f64 x x)) #s(literal 3 binary64)) (*.f64 n n)) (fma.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 (log.f64 (*.f64 x x)) #s(literal 2 binary64)) n) (*.f64 (log.f64 (*.f64 x x)) #s(literal 1/2 binary64))))) n)","(/ (+ (* 1/8 (/ (pow (log (pow x 2)) 2) n)) (* 1/2 (log (pow x 2)))) n)","(/.f64 (fma.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 (log.f64 (*.f64 x x)) #s(literal 2 binary64)) n) (*.f64 (log.f64 (*.f64 x x)) #s(literal 1/2 binary64))) n)","(/ (+ (* 1/48 (/ (pow (log (pow x 2)) 3) (pow n 2))) (+ (* 1/8 (/ (pow (log (pow x 2)) 2) n)) (* 1/2 (log (pow x 2))))) n)","(/.f64 (fma.f64 #s(literal 1/48 binary64) (/.f64 (pow.f64 (log.f64 (*.f64 x x)) #s(literal 3 binary64)) (*.f64 n n)) (fma.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 (log.f64 (*.f64 x x)) #s(literal 2 binary64)) n) (*.f64 (log.f64 (*.f64 x x)) #s(literal 1/2 binary64)))) n)","(/ (+ (* 1/384 (/ (pow (log (pow x 2)) 4) (pow n 3))) (+ (* 1/48 (/ (pow (log (pow x 2)) 3) (pow n 2))) (+ (* 1/8 (/ (pow (log (pow x 2)) 2) n)) (* 1/2 (log (pow x 2)))))) n)","(/.f64 (fma.f64 #s(literal 1/384 binary64) (/.f64 (pow.f64 (log.f64 (*.f64 x x)) #s(literal 4 binary64)) (pow.f64 n #s(literal 3 binary64))) (fma.f64 #s(literal 1/48 binary64) (/.f64 (pow.f64 (log.f64 (*.f64 x x)) #s(literal 3 binary64)) (*.f64 n n)) (fma.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 (log.f64 (*.f64 x x)) #s(literal 2 binary64)) n) (*.f64 (log.f64 (*.f64 x x)) #s(literal 1/2 binary64))))) n)","(* -1 (/ (- (* -1 (log (+ 1 x))) (* -1 (log x))) n))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (* 1/2 (pow (log (+ 1 x)) 2)) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal -1/2 binary64) (-.f64 (log.f64 x) (log1p.f64 x))) (neg.f64 n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (* -1/6 (pow (log (+ 1 x)) 3)) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(/.f64 (-.f64 (log.f64 x) (+.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/6 binary64) (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64))) n) (log1p.f64 x))) (neg.f64 n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/24 (pow (log (+ 1 x)) 4)) (* 1/24 (pow (log x) 4))) n)) (* -1/6 (pow (log (+ 1 x)) 3))) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(/.f64 (-.f64 (log.f64 x) (+.f64 (/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64) (/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) n) #s(literal -1/24 binary64) (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1/6 binary64))) (neg.f64 n))) n) (log1p.f64 x))) (neg.f64 n))","(* -1 (* n (- (* 1/12 (/ 1 (pow x 2))) (+ 1 (* 1/2 (/ 1 x))))))","(*.f64 (-.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/12 binary64) x) x) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x)) (neg.f64 n))","(* -1 (* n (* x (- (* 1/12 (/ 1 (pow x 2))) (+ 1 (* 1/2 (/ 1 x)))))))","(*.f64 (*.f64 (neg.f64 n) x) (-.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/12 binary64) x) x) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x)))","(* -1 (* n (- (* 1/12 (/ 1 (pow x 2))) 1)))","(*.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/12 binary64) x) x) #s(literal 1 binary64)) (neg.f64 n))","(* -1 (/ (- (* -1 x) (* -1/2 (log (pow x 2)))) n))","(/.f64 (fma.f64 (log.f64 (*.f64 x x)) #s(literal 1/2 binary64) (neg.f64 x)) (neg.f64 n))","(* -1 (/ (- (+ (* -1 x) (* 1/8 (/ (pow (log (pow x 2)) 2) n))) (* -1/2 (log (pow x 2)))) n))","(/.f64 (fma.f64 (pow.f64 (log.f64 (*.f64 x x)) #s(literal 2 binary64)) (/.f64 #s(literal 1/8 binary64) n) (fma.f64 (log.f64 (*.f64 x x)) #s(literal 1/2 binary64) (neg.f64 x))) (neg.f64 n))","(* -1 (/ (- (+ (* -1 x) (* -1 (/ (- (* -1/48 (/ (pow (log (pow x 2)) 3) n)) (* 1/8 (pow (log (pow x 2)) 2))) n))) (* -1/2 (log (pow x 2)))) n))","(/.f64 (fma.f64 (log.f64 (*.f64 x x)) #s(literal 1/2 binary64) (-.f64 (neg.f64 x) (/.f64 (fma.f64 (pow.f64 (log.f64 (*.f64 x x)) #s(literal 2 binary64)) #s(literal -1/8 binary64) (*.f64 (/.f64 (pow.f64 (log.f64 (*.f64 x x)) #s(literal 3 binary64)) n) #s(literal -1/48 binary64))) n))) (neg.f64 n))","(* -1 (/ (- (+ (* -1 x) (* -1 (/ (- (* -1 (/ (- (* 1/384 (/ (pow (log (pow x 2)) 4) n)) (* -1/48 (pow (log (pow x 2)) 3))) n)) (* 1/8 (pow (log (pow x 2)) 2))) n))) (* -1/2 (log (pow x 2)))) n))","(/.f64 (fma.f64 (log.f64 (*.f64 x x)) #s(literal 1/2 binary64) (-.f64 (neg.f64 x) (/.f64 (-.f64 (*.f64 (pow.f64 (log.f64 (*.f64 x x)) #s(literal 2 binary64)) #s(literal -1/8 binary64)) (/.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 (*.f64 x x)) #s(literal 4 binary64)) n) #s(literal 1/384 binary64) (*.f64 #s(literal 1/48 binary64) (pow.f64 (log.f64 (*.f64 x x)) #s(literal 3 binary64)))) n)) n))) (neg.f64 n))","(* -1 (/ (+ (* -1/2 (log (pow x 2))) (* -1/8 (/ (pow (log (pow x 2)) 2) n))) n))","(/.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 (*.f64 x x)) #s(literal 2 binary64)) n) #s(literal -1/8 binary64) (*.f64 (log.f64 (*.f64 x x)) #s(literal -1/2 binary64))) (neg.f64 n))","(* -1 (/ (+ (* -1 (/ (+ (* 1/48 (/ (pow (log (pow x 2)) 3) n)) (* 1/8 (pow (log (pow x 2)) 2))) n)) (* -1/2 (log (pow x 2)))) n))","(/.f64 (fma.f64 (log.f64 (*.f64 x x)) #s(literal -1/2 binary64) (/.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 (*.f64 x x)) #s(literal 3 binary64)) n) #s(literal 1/48 binary64) (*.f64 #s(literal 1/8 binary64) (pow.f64 (log.f64 (*.f64 x x)) #s(literal 2 binary64)))) (neg.f64 n))) (neg.f64 n))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/48 (pow (log (pow x 2)) 3)) (* -1/384 (/ (pow (log (pow x 2)) 4) n))) n)) (* 1/8 (pow (log (pow x 2)) 2))) n)) (* -1/2 (log (pow x 2)))) n))","(/.f64 (fma.f64 (log.f64 (*.f64 x x)) #s(literal -1/2 binary64) (/.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (log.f64 (*.f64 x x)) #s(literal 2 binary64)) (/.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 (*.f64 x x)) #s(literal 4 binary64)) n) #s(literal -1/384 binary64) (*.f64 (pow.f64 (log.f64 (*.f64 x x)) #s(literal 3 binary64)) #s(literal -1/48 binary64))) (neg.f64 n))) (neg.f64 n))) (neg.f64 n))"]],"stop":[["iter limit",1],["node limit",1]],"time":257.4169921875,"type":"simplify"},{"count":[[25,865]],"egraph":[[0,9086,271,0.078681189],[2,2404,271,0.033279982],[1,315,281,0.008119196],[0,83,337,0.002381475],[0,53,336,0.000490774]],"inputs":[["(/.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) n)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))))","(/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n)))","#s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))","(*.f64 x n)","(-.f64 (-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64)))","(*.f64 (-.f64 (-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x)","(-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 (-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))","(/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n)","(neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))","(log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 (*.f64 x x))))))","(-.f64 (/.f64 x n) (expm1.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 (*.f64 x x)))))","(/.f64 x n)","(expm1.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 (*.f64 x x))))","(-.f64 (log1p.f64 x) (log.f64 x))","(pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))","#s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 (-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x))","(log.f64 (*.f64 x x))","(*.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 (*.f64 x x)))"]],"memory":[[12634272,66919216]],"outputs":[["(*.f64 (pow.f64 (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64)) (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1/2 binary64)) (pow.f64 (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) n)) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) n) #s(literal 1 binary64)) (-.f64 (log1p.f64 x) (log.f64 x)))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))) (/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))))","(*.f64 (-.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (/.f64 #s(literal -1 binary64) n))","(*.f64 (/.f64 #s(literal -1 binary64) n) (-.f64 (log1p.f64 x) (log.f64 x)))","(*.f64 #s(literal -1 binary64) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(pow.f64 (*.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) (neg.f64 n)) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 n (-.f64 (log.f64 x) (log1p.f64 x))) #s(literal -1 binary64))","(pow.f64 (neg.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))) #s(literal -1 binary64))","(pow.f64 (*.f64 (*.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (*.f64 (neg.f64 n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 (log.f64 x) #s(literal -1 binary64)) (neg.f64 n)) (*.f64 (neg.f64 n) (*.f64 (log1p.f64 x) #s(literal -1 binary64)))) (*.f64 n n))","(/.f64 (-.f64 (*.f64 (*.f64 (log.f64 x) #s(literal -1 binary64)) n) (*.f64 (neg.f64 n) (*.f64 (log1p.f64 x) #s(literal 1 binary64)))) (*.f64 (neg.f64 n) n))","(/.f64 (-.f64 (*.f64 (*.f64 (log.f64 x) #s(literal -1 binary64)) n) (*.f64 (neg.f64 n) (log1p.f64 x))) (*.f64 (neg.f64 n) n))","(/.f64 (-.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 1 binary64)) (neg.f64 n)) (*.f64 n (*.f64 (log1p.f64 x) #s(literal -1 binary64)))) (*.f64 n (neg.f64 n)))","(/.f64 (-.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 1 binary64)) n) (*.f64 n (*.f64 (log1p.f64 x) #s(literal 1 binary64)))) (*.f64 n n))","(/.f64 (-.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 1 binary64)) n) (*.f64 n (log1p.f64 x))) (*.f64 n n))","(/.f64 (-.f64 (*.f64 (log.f64 x) (neg.f64 n)) (*.f64 n (*.f64 (log1p.f64 x) #s(literal -1 binary64)))) (*.f64 n (neg.f64 n)))","(/.f64 (-.f64 (*.f64 (log.f64 x) n) (*.f64 n (*.f64 (log1p.f64 x) #s(literal 1 binary64)))) (*.f64 n n))","(/.f64 (-.f64 (*.f64 (log.f64 x) n) (*.f64 n (log1p.f64 x))) (*.f64 n n))","(/.f64 (-.f64 (*.f64 (log.f64 x) #s(literal -1 binary64)) (*.f64 (log1p.f64 x) #s(literal -1 binary64))) (neg.f64 n))","(/.f64 (-.f64 (*.f64 (log.f64 x) #s(literal 1 binary64)) (*.f64 (log1p.f64 x) #s(literal 1 binary64))) n)","(/.f64 (-.f64 (log.f64 x) (*.f64 (log1p.f64 x) #s(literal 1 binary64))) n)","(/.f64 (-.f64 (*.f64 (log.f64 x) #s(literal 1 binary64)) (log1p.f64 x)) n)","(/.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))) n)","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal 1 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(/.f64 (/.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64)))","(/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n)","(/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) (neg.f64 n)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 n (-.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))))","(/.f64 #s(literal 1 binary64) (*.f64 (*.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n) #s(literal -1 binary64)))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (*.f64 n #s(literal -1 binary64)))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (neg.f64 n))","(/.f64 (/.f64 #s(literal -1 binary64) n) (neg.f64 (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64))))","(/.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n) #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))))","(neg.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(-.f64 (/.f64 (log.f64 x) n) (/.f64 (log1p.f64 x) n))","(exp.f64 (*.f64 (log.f64 (pow.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 n (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1/2 binary64)) (pow.f64 (*.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64)) n) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)) (-.f64 (log1p.f64 x) (log.f64 x)))","(*.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n) #s(literal -1 binary64))","(*.f64 (-.f64 (log.f64 x) (log1p.f64 x)) (/.f64 #s(literal -1 binary64) n))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (-.f64 (log1p.f64 x) (log.f64 x)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) n) (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) n) (-.f64 (log.f64 x) (log1p.f64 x)))","(*.f64 #s(literal -1 binary64) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(pow.f64 (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (neg.f64 (pow.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n) #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) #s(literal 1 binary64))","(pow.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) n) (*.f64 n (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))))) (*.f64 n n))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))) (*.f64 n (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal 1 binary64)))) (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))) (*.f64 n (/.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))))) (*.f64 n (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) n) (*.f64 n (-.f64 (log.f64 x) (log1p.f64 x)))) (*.f64 n n))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64))) (*.f64 n (pow.f64 n #s(literal -1 binary64)))) (*.f64 n (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) (neg.f64 n))) n) (*.f64 n (*.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) (neg.f64 n))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n) #s(literal -1 binary64)) #s(literal 1 binary64))) n) (*.f64 n (/.f64 (pow.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (/.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64))) n) (*.f64 n (/.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (/.f64 n (-.f64 (log.f64 x) (log1p.f64 x)))) n) (*.f64 n (/.f64 n (-.f64 (log.f64 x) (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))))) n) (*.f64 n (neg.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (*.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))) n) (*.f64 n (*.f64 (*.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (neg.f64 n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))) n) (*.f64 n (*.f64 (neg.f64 n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (pow.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n) #s(literal -1 binary64))) n) (*.f64 n (pow.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 n #s(literal -1 binary64))) (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))) (*.f64 n (*.f64 n #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 n)) (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))) (*.f64 n (neg.f64 n)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))) (*.f64 n (/.f64 #s(literal -1 binary64) n))) (*.f64 n (neg.f64 (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))) (*.f64 n (/.f64 #s(literal -1 binary64) n))) (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 (pow.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n) #s(literal -1 binary64)))) (*.f64 n #s(literal -1 binary64))) (*.f64 n (neg.f64 (pow.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n) #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))) (*.f64 n #s(literal -1 binary64))) (*.f64 n (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (neg.f64 n)) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) #s(literal -1 binary64)))) (*.f64 n n))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) n) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) #s(literal 1 binary64)))) (*.f64 (neg.f64 n) n))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) n) (*.f64 (neg.f64 n) (log.f64 x))) (*.f64 (neg.f64 n) n))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) (neg.f64 n)) (*.f64 n (*.f64 (log.f64 x) #s(literal -1 binary64)))) (*.f64 n (neg.f64 n)))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) n) (*.f64 n (*.f64 (log.f64 x) #s(literal 1 binary64)))) (*.f64 n n))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) n) (*.f64 n (log.f64 x))) (*.f64 n n))","(/.f64 (-.f64 (*.f64 (log1p.f64 x) (neg.f64 n)) (*.f64 n (*.f64 (log.f64 x) #s(literal -1 binary64)))) (*.f64 n (neg.f64 n)))","(/.f64 (-.f64 (*.f64 (log1p.f64 x) n) (*.f64 n (*.f64 (log.f64 x) #s(literal 1 binary64)))) (*.f64 n n))","(/.f64 (-.f64 (*.f64 (log1p.f64 x) n) (*.f64 n (log.f64 x))) (*.f64 n n))","(/.f64 (-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))) n)","(/.f64 (-.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (*.f64 (log.f64 x) #s(literal -1 binary64))) (neg.f64 n))","(/.f64 (-.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) (*.f64 (log.f64 x) #s(literal 1 binary64))) n)","(/.f64 (-.f64 (log1p.f64 x) (*.f64 (log.f64 x) #s(literal 1 binary64))) n)","(/.f64 (-.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) (log.f64 x)) n)","(/.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) (neg.f64 n))","(/.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1 binary64)) n)","(/.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (*.f64 n (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) (neg.f64 n))","(/.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64))))","(/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) (pow.f64 n #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (neg.f64 (neg.f64 n)))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(/.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))))","(/.f64 #s(literal -1 binary64) (pow.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n) #s(literal -1 binary64)))","(neg.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(-.f64 (/.f64 #s(literal 0 binary64) n) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(-.f64 #s(literal 0 binary64) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(-.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))","(exp.f64 (-.f64 (*.f64 (log.f64 n) #s(literal -1 binary64)) (*.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64))))","(exp.f64 (fma.f64 (log.f64 n) #s(literal -1 binary64) (log.f64 (-.f64 (log1p.f64 x) (log.f64 x)))))","(exp.f64 (+.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (*.f64 (log.f64 n) #s(literal -1 binary64))))","(exp.f64 (*.f64 (log.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))) #s(literal -1 binary64)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(*.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) n))","(*.f64 #s(literal -1 binary64) (pow.f64 n #s(literal -1 binary64)))","(pow.f64 (/.f64 (*.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 n #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (neg.f64 n) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 n #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 n))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 n #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 n)))","(/.f64 #s(literal -1 binary64) n)","(neg.f64 (pow.f64 n #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (*.f64 n #s(literal -1 binary64))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 n)) #s(literal -1 binary64)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow.f64 #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n)) #s(literal -1 binary64)))","(*.f64 (pow.f64 #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n)) #s(literal -1/2 binary64)) (pow.f64 #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n)) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))) #s(literal -1 binary64)))","(pow.f64 (exp.f64 (log.f64 #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n)))) #s(literal -1 binary64))","(pow.f64 (*.f64 #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n)) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (neg.f64 #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n)))) #s(literal -1 binary64))","(pow.f64 #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n)) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n)))))","(/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n)))","(/.f64 #s(literal -1 binary64) (neg.f64 #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))))","(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))))","(exp.f64 (*.f64 (log.f64 #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))) #s(literal -1 binary64)))","(*.f64 #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n)) #s(literal 1 binary64))","(pow.f64 (pow.f64 #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n)) #s(literal 1 binary64))","#s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))","(/.f64 (neg.f64 #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))) #s(literal -1 binary64))","(/.f64 #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n)) #s(literal -1 binary64)))","(exp.f64 (neg.f64 (*.f64 (log.f64 #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))) #s(literal -1 binary64))))","(*.f64 x n)","(*.f64 n x)","(*.f64 (-.f64 (pow.f64 (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) #s(literal 2 binary64))) (pow.f64 (-.f64 n (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)) (/.f64 x n))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) (-.f64 n (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)) (/.f64 x n))) (pow.f64 (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 n (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)) (/.f64 x n))) (-.f64 (pow.f64 (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) (-.f64 n (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)) (/.f64 x n))) (pow.f64 (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n) #s(literal 2 binary64))) (-.f64 (pow.f64 (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n) #s(literal 2 binary64)) (-.f64 n (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)) (/.f64 x n)))) (*.f64 (-.f64 n (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)) (/.f64 x n))) (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) #s(literal 2 binary64)))) (*.f64 (-.f64 n (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)) (/.f64 x n))) (-.f64 n (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)) (/.f64 x n)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n) #s(literal 3 binary64)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) (-.f64 n (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)) (/.f64 x n))) (pow.f64 (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n) #s(literal 2 binary64)))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) (-.f64 n (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)) (/.f64 x n))) (pow.f64 (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n) #s(literal 2 binary64))) (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) #s(literal 3 binary64)))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) (-.f64 n (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)) (/.f64 x n))) (pow.f64 (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n) #s(literal 2 binary64))) (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) (-.f64 n (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)) (/.f64 x n))) (pow.f64 (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (-.f64 (*.f64 n n) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 x)) (*.f64 (-.f64 n (*.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 (neg.f64 n) #s(literal -1/2 binary64)))) (*.f64 (-.f64 n (*.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x))) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (-.f64 (*.f64 n n) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 x)) (*.f64 (-.f64 n (*.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 #s(literal -1/2 binary64) (neg.f64 n)))) (*.f64 (-.f64 n (*.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x))) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (-.f64 (*.f64 n n) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 x)) (*.f64 (-.f64 n (*.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x))) (neg.f64 (*.f64 #s(literal -1/2 binary64) n)))) (*.f64 (-.f64 n (*.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x))) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (-.f64 (*.f64 n n) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) x) (*.f64 (-.f64 n (*.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 #s(literal -1/2 binary64) n))) (*.f64 (-.f64 n (*.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x))) x))","(/.f64 (-.f64 (*.f64 (-.f64 (*.f64 n n) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) (/.f64 x n)) (*.f64 (-.f64 n (*.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x))) #s(literal -1/2 binary64))) (*.f64 (-.f64 n (*.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x))) (/.f64 x n)))","(/.f64 (-.f64 (*.f64 (-.f64 (*.f64 n n) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) (/.f64 x (*.f64 #s(literal -1/2 binary64) n))) (*.f64 (-.f64 n (*.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x))) #s(literal 1 binary64))) (*.f64 (-.f64 n (*.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x))) (/.f64 x (*.f64 #s(literal -1/2 binary64) n))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 n #s(literal 3 binary64)) (/.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 x (/.f64 x n)) #s(literal 3 binary64)))) (neg.f64 x)) (*.f64 (fma.f64 n n (-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (*.f64 n (*.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x))))) (*.f64 (neg.f64 n) #s(literal -1/2 binary64)))) (*.f64 (fma.f64 n n (-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (*.f64 n (*.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x))))) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 n #s(literal 3 binary64)) (/.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 x (/.f64 x n)) #s(literal 3 binary64)))) (neg.f64 x)) (*.f64 (fma.f64 n n (-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (*.f64 n (*.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x))))) (*.f64 #s(literal -1/2 binary64) (neg.f64 n)))) (*.f64 (fma.f64 n n (-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (*.f64 n (*.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x))))) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 n #s(literal 3 binary64)) (/.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 x (/.f64 x n)) #s(literal 3 binary64)))) (neg.f64 x)) (*.f64 (fma.f64 n n (-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (*.f64 n (*.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x))))) (neg.f64 (*.f64 #s(literal -1/2 binary64) n)))) (*.f64 (fma.f64 n n (-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (*.f64 n (*.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x))))) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 n #s(literal 3 binary64)) (/.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 x (/.f64 x n)) #s(literal 3 binary64)))) x) (*.f64 (fma.f64 n n (-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (*.f64 n (*.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x))))) (*.f64 #s(literal -1/2 binary64) n))) (*.f64 (fma.f64 n n (-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (*.f64 n (*.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x))))) x))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 n #s(literal 3 binary64)) (/.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 x (/.f64 x n)) #s(literal 3 binary64)))) (/.f64 x n)) (*.f64 (fma.f64 n n (-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (*.f64 n (*.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x))))) #s(literal -1/2 binary64))) (*.f64 (fma.f64 n n (-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (*.f64 n (*.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x))))) (/.f64 x n)))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 n #s(literal 3 binary64)) (/.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 x (/.f64 x n)) #s(literal 3 binary64)))) (/.f64 x (*.f64 #s(literal -1/2 binary64) n))) (*.f64 (fma.f64 n n (-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (*.f64 n (*.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x))))) #s(literal 1 binary64))) (*.f64 (fma.f64 n n (-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (*.f64 n (*.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x))))) (/.f64 x (*.f64 #s(literal -1/2 binary64) n))))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (*.f64 n n) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 x)) (*.f64 (neg.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n)) (*.f64 (neg.f64 n) #s(literal -1/2 binary64)))) (*.f64 (neg.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (*.f64 n n) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 x)) (*.f64 (neg.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n)) (*.f64 #s(literal -1/2 binary64) (neg.f64 n)))) (*.f64 (neg.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (*.f64 n n) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 x)) (*.f64 (neg.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n)) (neg.f64 (*.f64 #s(literal -1/2 binary64) n)))) (*.f64 (neg.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (*.f64 n n) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))))) x) (*.f64 (neg.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n)) (*.f64 #s(literal -1/2 binary64) n))) (*.f64 (neg.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n)) x))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (*.f64 n n) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))))) (/.f64 x n)) (*.f64 (neg.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n)) #s(literal -1/2 binary64))) (*.f64 (neg.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n)) (/.f64 x n)))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (*.f64 n n) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))))) (/.f64 x (*.f64 #s(literal -1/2 binary64) n))) (*.f64 (neg.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n)) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n)) (/.f64 x (*.f64 #s(literal -1/2 binary64) n))))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 n #s(literal 3 binary64)) (/.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 x (/.f64 x n)) #s(literal 3 binary64))))) (neg.f64 x)) (*.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n))) (*.f64 (neg.f64 n) #s(literal -1/2 binary64)))) (*.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n))) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 n #s(literal 3 binary64)) (/.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 x (/.f64 x n)) #s(literal 3 binary64))))) (neg.f64 x)) (*.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n))) (*.f64 #s(literal -1/2 binary64) (neg.f64 n)))) (*.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n))) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 n #s(literal 3 binary64)) (/.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 x (/.f64 x n)) #s(literal 3 binary64))))) (neg.f64 x)) (*.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n))) (neg.f64 (*.f64 #s(literal -1/2 binary64) n)))) (*.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n))) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 n #s(literal 3 binary64)) (/.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 x (/.f64 x n)) #s(literal 3 binary64))))) x) (*.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n))) (*.f64 #s(literal -1/2 binary64) n))) (*.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n))) x))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 n #s(literal 3 binary64)) (/.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 x (/.f64 x n)) #s(literal 3 binary64))))) (/.f64 x n)) (*.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n))) #s(literal -1/2 binary64))) (*.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n))) (/.f64 x n)))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 n #s(literal 3 binary64)) (/.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 x (/.f64 x n)) #s(literal 3 binary64))))) (/.f64 x (*.f64 #s(literal -1/2 binary64) n))) (*.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n))) (/.f64 x (*.f64 #s(literal -1/2 binary64) n))))","(/.f64 (-.f64 (*.f64 (-.f64 (*.f64 n n) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 x)) (*.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 (neg.f64 n) #s(literal -1/2 binary64)))) (*.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (-.f64 (*.f64 n n) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 x)) (*.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 #s(literal -1/2 binary64) (neg.f64 n)))) (*.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (-.f64 (*.f64 n n) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 x)) (*.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (neg.f64 (*.f64 #s(literal -1/2 binary64) n)))) (*.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (-.f64 (*.f64 n n) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) (/.f64 x n)) (*.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) #s(literal -1/2 binary64))) (*.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (/.f64 x n)))","(/.f64 (-.f64 (*.f64 (-.f64 (*.f64 n n) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) (/.f64 x (*.f64 #s(literal -1/2 binary64) n))) (*.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) #s(literal 1 binary64))) (*.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (/.f64 x (*.f64 #s(literal -1/2 binary64) n))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 n #s(literal 3 binary64)) (/.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 x (/.f64 x n)) #s(literal 3 binary64)))) (neg.f64 x)) (*.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n)) (*.f64 (neg.f64 n) #s(literal -1/2 binary64)))) (*.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 n #s(literal 3 binary64)) (/.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 x (/.f64 x n)) #s(literal 3 binary64)))) (neg.f64 x)) (*.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n)) (*.f64 #s(literal -1/2 binary64) (neg.f64 n)))) (*.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 n #s(literal 3 binary64)) (/.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 x (/.f64 x n)) #s(literal 3 binary64)))) (neg.f64 x)) (*.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n)) (neg.f64 (*.f64 #s(literal -1/2 binary64) n)))) (*.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 n #s(literal 3 binary64)) (/.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 x (/.f64 x n)) #s(literal 3 binary64)))) (/.f64 x n)) (*.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n)) #s(literal -1/2 binary64))) (*.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n)) (/.f64 x n)))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 n #s(literal 3 binary64)) (/.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 x (/.f64 x n)) #s(literal 3 binary64)))) (/.f64 x (*.f64 #s(literal -1/2 binary64) n))) (*.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n)) #s(literal 1 binary64))) (*.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n)) (/.f64 x (*.f64 #s(literal -1/2 binary64) n))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (/.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (-.f64 (*.f64 n n) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (neg.f64 n) #s(literal -1/2 binary64)))) (*.f64 (/.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (-.f64 (*.f64 n n) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (/.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (-.f64 (*.f64 n n) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 #s(literal -1/2 binary64) (neg.f64 n)))) (*.f64 (/.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (-.f64 (*.f64 n n) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (/.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (-.f64 (*.f64 n n) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (*.f64 #s(literal -1/2 binary64) n)))) (*.f64 (/.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (-.f64 (*.f64 n n) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 x)))","(/.f64 (-.f64 x (*.f64 (/.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (-.f64 (*.f64 n n) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 #s(literal -1/2 binary64) n))) (*.f64 (/.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (-.f64 (*.f64 n n) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))))) x))","(/.f64 (-.f64 (/.f64 x n) (*.f64 (/.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (-.f64 (*.f64 n n) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))))) #s(literal -1/2 binary64))) (*.f64 (/.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (-.f64 (*.f64 n n) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))))) (/.f64 x n)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 x (*.f64 #s(literal -1/2 binary64) n))) (*.f64 (/.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (-.f64 (*.f64 n n) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))))) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (-.f64 (*.f64 n n) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))))) (/.f64 x (*.f64 #s(literal -1/2 binary64) n))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n)) (-.f64 (pow.f64 n #s(literal 3 binary64)) (/.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 x (/.f64 x n)) #s(literal 3 binary64))))) (*.f64 (neg.f64 n) #s(literal -1/2 binary64)))) (*.f64 (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n)) (-.f64 (pow.f64 n #s(literal 3 binary64)) (/.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 x (/.f64 x n)) #s(literal 3 binary64))))) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n)) (-.f64 (pow.f64 n #s(literal 3 binary64)) (/.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 x (/.f64 x n)) #s(literal 3 binary64))))) (*.f64 #s(literal -1/2 binary64) (neg.f64 n)))) (*.f64 (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n)) (-.f64 (pow.f64 n #s(literal 3 binary64)) (/.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 x (/.f64 x n)) #s(literal 3 binary64))))) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n)) (-.f64 (pow.f64 n #s(literal 3 binary64)) (/.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 x (/.f64 x n)) #s(literal 3 binary64))))) (neg.f64 (*.f64 #s(literal -1/2 binary64) n)))) (*.f64 (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n)) (-.f64 (pow.f64 n #s(literal 3 binary64)) (/.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 x (/.f64 x n)) #s(literal 3 binary64))))) (neg.f64 x)))","(/.f64 (-.f64 x (*.f64 (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n)) (-.f64 (pow.f64 n #s(literal 3 binary64)) (/.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 x (/.f64 x n)) #s(literal 3 binary64))))) (*.f64 #s(literal -1/2 binary64) n))) (*.f64 (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n)) (-.f64 (pow.f64 n #s(literal 3 binary64)) (/.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 x (/.f64 x n)) #s(literal 3 binary64))))) x))","(/.f64 (-.f64 (/.f64 x n) (*.f64 (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n)) (-.f64 (pow.f64 n #s(literal 3 binary64)) (/.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 x (/.f64 x n)) #s(literal 3 binary64))))) #s(literal -1/2 binary64))) (*.f64 (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n)) (-.f64 (pow.f64 n #s(literal 3 binary64)) (/.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 x (/.f64 x n)) #s(literal 3 binary64))))) (/.f64 x n)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 x (*.f64 #s(literal -1/2 binary64) n))) (*.f64 (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n)) (-.f64 (pow.f64 n #s(literal 3 binary64)) (/.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 x (/.f64 x n)) #s(literal 3 binary64))))) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n)) (-.f64 (pow.f64 n #s(literal 3 binary64)) (/.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 x (/.f64 x n)) #s(literal 3 binary64))))) (/.f64 x (*.f64 #s(literal -1/2 binary64) n))))","(/.f64 (-.f64 (*.f64 (neg.f64 n) (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)) (/.f64 x n))) (*.f64 #s(literal -1 binary64) (-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) #s(literal 2 binary64))))) (*.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)) (/.f64 x n))))","(/.f64 (-.f64 (*.f64 (neg.f64 n) (+.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (*.f64 #s(literal -1/2 binary64) (/.f64 n x)))))) (*.f64 #s(literal -1 binary64) (+.f64 (/.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 x (/.f64 x n)) #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) #s(literal 3 binary64))))) (*.f64 #s(literal -1 binary64) (+.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (*.f64 #s(literal -1/2 binary64) (/.f64 n x)))))))","(/.f64 (-.f64 (*.f64 (neg.f64 n) (*.f64 x x)) (*.f64 #s(literal -1 binary64) (fma.f64 (*.f64 (/.f64 #s(literal 1/12 binary64) x) n) x (*.f64 x (*.f64 #s(literal -1/2 binary64) n))))) (*.f64 #s(literal -1 binary64) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 (neg.f64 n) (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal -1 binary64) (fma.f64 (*.f64 #s(literal 1/12 binary64) n) x (*.f64 (*.f64 x x) (*.f64 #s(literal -1/2 binary64) n))))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)) (/.f64 x n))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) #s(literal 2 binary64))))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)) (/.f64 x n))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (*.f64 #s(literal -1/2 binary64) (/.f64 n x)))))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 x (/.f64 x n)) #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) #s(literal 3 binary64))))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (+.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (*.f64 #s(literal -1/2 binary64) (/.f64 n x)))))))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (pow.f64 n #s(literal -1 binary64)) (fma.f64 (*.f64 (/.f64 #s(literal 1/12 binary64) x) n) x (*.f64 x (*.f64 #s(literal -1/2 binary64) n))))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 x x)))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (pow.f64 n #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal 1/12 binary64) n) x (*.f64 (*.f64 x x) (*.f64 #s(literal -1/2 binary64) n))))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (-.f64 (*.f64 n (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)) (/.f64 x n))) (*.f64 #s(literal 1 binary64) (-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) #s(literal 2 binary64))))) (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)) (/.f64 x n))))","(/.f64 (-.f64 (*.f64 n (+.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (*.f64 #s(literal -1/2 binary64) (/.f64 n x)))))) (*.f64 #s(literal 1 binary64) (+.f64 (/.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 x (/.f64 x n)) #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) #s(literal 3 binary64))))) (*.f64 #s(literal 1 binary64) (+.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (*.f64 #s(literal -1/2 binary64) (/.f64 n x)))))))","(/.f64 (-.f64 (*.f64 n (*.f64 x x)) (*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (/.f64 #s(literal 1/12 binary64) x) n) x (*.f64 x (*.f64 #s(literal -1/2 binary64) n))))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 n (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal 1/12 binary64) n) x (*.f64 (*.f64 x x) (*.f64 #s(literal -1/2 binary64) n))))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 n n) (pow.f64 (*.f64 (/.f64 n x) (+.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64))) #s(literal 2 binary64))) (+.f64 n (*.f64 (/.f64 n x) (+.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (pow.f64 n #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 n x) (+.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64))) #s(literal 3 binary64))) (fma.f64 n n (+.f64 (pow.f64 (*.f64 (/.f64 n x) (+.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64))) #s(literal 2 binary64)) (*.f64 n (*.f64 (/.f64 n x) (+.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) #s(literal 2 binary64)))) (neg.f64 (-.f64 n (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)) (/.f64 x n)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) (-.f64 n (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)) (/.f64 x n))) (pow.f64 (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (-.f64 (*.f64 n n) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) x) (*.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 #s(literal -1/2 binary64) n))) (*.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) x))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 n #s(literal 3 binary64)) (/.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 x (/.f64 x n)) #s(literal 3 binary64)))) x) (*.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n)) (*.f64 #s(literal -1/2 binary64) n))) (*.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n)) x))","(/.f64 (-.f64 (pow.f64 (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) #s(literal 2 binary64))) (-.f64 (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n) (*.f64 #s(literal 1/2 binary64) (/.f64 n x))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) #s(literal 2 binary64))) (-.f64 n (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)) (/.f64 x n))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) #s(literal 2 binary64)) (*.f64 (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n) (*.f64 #s(literal 1/2 binary64) (/.f64 n x))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) (-.f64 n (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)) (/.f64 x n))) (pow.f64 (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 n (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)) (/.f64 x n))) (-.f64 (pow.f64 (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) (-.f64 n (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)) (/.f64 x n))) (pow.f64 (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n) #s(literal 2 binary64))) (-.f64 (pow.f64 (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) #s(literal 3 binary64)))))","(fma.f64 (/.f64 (neg.f64 n) x) #s(literal -1/2 binary64) (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n))","(fma.f64 (-.f64 (*.f64 n n) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) #s(literal -1 binary64)) (*.f64 #s(literal 1/2 binary64) (/.f64 n x)))","(fma.f64 (-.f64 (pow.f64 n #s(literal 3 binary64)) (/.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 x (/.f64 x n)) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n)) #s(literal -1 binary64)) (*.f64 #s(literal 1/2 binary64) (/.f64 n x)))","(fma.f64 #s(literal 1/2 binary64) (/.f64 n x) (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n))","(fma.f64 #s(literal -1/2 binary64) (/.f64 (neg.f64 n) x) (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n))","(fma.f64 (/.f64 n x) #s(literal 1/2 binary64) (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n))","(fma.f64 n #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 n) x) #s(literal 1/12 binary64)) (*.f64 #s(literal -1/2 binary64) n)) x))","(fma.f64 n #s(literal 1 binary64) (fma.f64 (neg.f64 (/.f64 #s(literal 1/12 binary64) x)) (/.f64 n x) (*.f64 #s(literal 1/2 binary64) (/.f64 n x))))","(fma.f64 n #s(literal 1 binary64) (neg.f64 (*.f64 (/.f64 n x) (+.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)))))","(fma.f64 #s(literal -1 binary64) (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n))","(-.f64 (/.f64 (pow.f64 (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n) #s(literal 2 binary64)) (-.f64 n (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)) (/.f64 x n)))) (/.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) #s(literal 2 binary64)) (-.f64 n (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)) (/.f64 x n)))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n) #s(literal 3 binary64)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) (-.f64 n (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)) (/.f64 x n))) (pow.f64 (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) #s(literal 3 binary64)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) (-.f64 n (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)) (/.f64 x n))) (pow.f64 (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n) #s(literal 2 binary64)))))","(-.f64 (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n) (*.f64 #s(literal -1/2 binary64) (/.f64 n x)))","(-.f64 n (/.f64 (-.f64 (*.f64 #s(literal -1/12 binary64) (/.f64 n x)) (*.f64 #s(literal -1/2 binary64) n)) (neg.f64 x)))","(-.f64 n (*.f64 (/.f64 n x) (+.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64))))","(+.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 n x)) (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n))","(+.f64 (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n) (*.f64 #s(literal 1/2 binary64) (/.f64 n x)))","(+.f64 n (/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 n) x) #s(literal 1/12 binary64)) (*.f64 #s(literal -1/2 binary64) n)) x))","(+.f64 n (fma.f64 (neg.f64 (/.f64 #s(literal 1/12 binary64) x)) (/.f64 n x) (*.f64 #s(literal 1/2 binary64) (/.f64 n x))))","(+.f64 n (neg.f64 (*.f64 (/.f64 n x) (+.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)))))","(*.f64 (-.f64 n (*.f64 (/.f64 n x) (+.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)))) x)","(*.f64 x (-.f64 n (*.f64 (/.f64 n x) (+.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) #s(literal 2 binary64))) x) (-.f64 n (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)) (/.f64 x n))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) #s(literal 3 binary64))) x) (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) (-.f64 n (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)) (/.f64 x n))) (pow.f64 (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n) #s(literal 2 binary64))))","(/.f64 (*.f64 x (-.f64 (pow.f64 (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) #s(literal 2 binary64)))) (-.f64 n (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)) (/.f64 x n))))","(/.f64 (*.f64 x (-.f64 (pow.f64 (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 n x)) (-.f64 n (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)) (/.f64 x n))) (pow.f64 (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n) #s(literal 2 binary64))))","(fma.f64 (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n) x (*.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 n x)) x))","(fma.f64 x (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n) (*.f64 x (*.f64 #s(literal 1/2 binary64) (/.f64 n x))))","(+.f64 (*.f64 (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n) x) (*.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 n x)) x))","(+.f64 (*.f64 x (fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n)) (*.f64 x (*.f64 #s(literal 1/2 binary64) (/.f64 n x))))","(*.f64 (-.f64 (*.f64 n n) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 n #s(literal 3 binary64)) (/.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 x (/.f64 x n)) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (-.f64 (*.f64 n n) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n)) (-.f64 (pow.f64 n #s(literal 3 binary64)) (/.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 x (/.f64 x n)) #s(literal 3 binary64))))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 n n) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n)) (*.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))))) (pow.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 n #s(literal 3 binary64)) (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n))) (*.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n)) (/.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 x (/.f64 x n)) #s(literal 3 binary64))))) (pow.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 n) (neg.f64 x)) (*.f64 #s(literal -1 binary64) (*.f64 #s(literal -1/12 binary64) (/.f64 n x)))) (*.f64 #s(literal -1 binary64) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (neg.f64 n) (neg.f64 x)) (*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 n) (/.f64 #s(literal 1/12 binary64) x)))) (*.f64 #s(literal -1 binary64) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (neg.f64 n) (neg.f64 x)) (*.f64 #s(literal -1 binary64) (*.f64 (/.f64 #s(literal 1/12 binary64) x) (neg.f64 n)))) (*.f64 #s(literal -1 binary64) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (neg.f64 n) (/.f64 x n)) (*.f64 #s(literal -1 binary64) (*.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal 1 binary64)))) (*.f64 #s(literal -1 binary64) (/.f64 x n)))","(/.f64 (-.f64 (*.f64 (neg.f64 n) (neg.f64 x)) (*.f64 #s(literal -1 binary64) (*.f64 (/.f64 n x) #s(literal -1/12 binary64)))) (*.f64 #s(literal -1 binary64) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (neg.f64 n) (*.f64 x #s(literal 12 binary64))) (*.f64 #s(literal -1 binary64) (*.f64 (/.f64 n x) #s(literal 1 binary64)))) (*.f64 #s(literal -1 binary64) (*.f64 x #s(literal 12 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 n) (neg.f64 x)) (*.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 #s(literal 1/12 binary64) x) n)))) (*.f64 #s(literal -1 binary64) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (neg.f64 n) (neg.f64 (*.f64 x x))) (*.f64 #s(literal -1 binary64) (neg.f64 (*.f64 #s(literal 1/12 binary64) n)))) (*.f64 #s(literal -1 binary64) (neg.f64 (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (neg.f64 n) (*.f64 x x)) (*.f64 #s(literal -1 binary64) (*.f64 #s(literal -1/12 binary64) (neg.f64 n)))) (*.f64 #s(literal -1 binary64) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 (neg.f64 n) (*.f64 (neg.f64 x) x)) (*.f64 #s(literal -1 binary64) (*.f64 #s(literal -1/12 binary64) n))) (*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (neg.f64 n) (*.f64 x (neg.f64 x))) (*.f64 #s(literal -1 binary64) (*.f64 #s(literal 1/12 binary64) (neg.f64 n)))) (*.f64 #s(literal -1 binary64) (*.f64 x (neg.f64 x))))","(/.f64 (-.f64 (*.f64 (neg.f64 n) (*.f64 (*.f64 x #s(literal 12 binary64)) (neg.f64 x))) (*.f64 #s(literal -1 binary64) (*.f64 #s(literal 1 binary64) (neg.f64 n)))) (*.f64 #s(literal -1 binary64) (*.f64 (*.f64 x #s(literal 12 binary64)) (neg.f64 x))))","(/.f64 (-.f64 (*.f64 (neg.f64 n) (*.f64 (*.f64 x #s(literal 12 binary64)) x)) (*.f64 #s(literal -1 binary64) (*.f64 #s(literal 1 binary64) n))) (*.f64 #s(literal -1 binary64) (*.f64 (*.f64 x #s(literal 12 binary64)) x)))","(/.f64 (-.f64 (*.f64 (neg.f64 n) (*.f64 x x)) (*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 n) #s(literal -1/12 binary64)))) (*.f64 #s(literal -1 binary64) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 (neg.f64 n) (*.f64 (neg.f64 x) x)) (*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 n) #s(literal 1/12 binary64)))) (*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (neg.f64 n) (*.f64 (neg.f64 x) (*.f64 x #s(literal 12 binary64)))) (*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 n) #s(literal 1 binary64)))) (*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) (*.f64 x #s(literal 12 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 n) (*.f64 x (neg.f64 x))) (*.f64 #s(literal -1 binary64) (*.f64 n #s(literal -1/12 binary64)))) (*.f64 #s(literal -1 binary64) (*.f64 x (neg.f64 x))))","(/.f64 (-.f64 (*.f64 (neg.f64 n) x) (*.f64 #s(literal -1 binary64) (*.f64 (/.f64 #s(literal 1/12 binary64) x) n))) (neg.f64 x))","(/.f64 (-.f64 (*.f64 (neg.f64 n) (*.f64 (neg.f64 x) (/.f64 x n))) #s(literal 1/12 binary64)) (*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) (/.f64 x n))))","(/.f64 (-.f64 (*.f64 (neg.f64 n) (*.f64 (/.f64 x n) (neg.f64 x))) #s(literal 1/12 binary64)) (*.f64 #s(literal -1 binary64) (*.f64 (/.f64 x n) (neg.f64 x))))","(/.f64 (-.f64 (*.f64 (neg.f64 n) (*.f64 x x)) (*.f64 #s(literal -1 binary64) (*.f64 #s(literal 1/12 binary64) n))) (*.f64 #s(literal -1 binary64) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 (neg.f64 n) (/.f64 x n)) (*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 #s(literal -1 binary64) (/.f64 x n)))","(/.f64 (-.f64 (*.f64 (neg.f64 n) (*.f64 x (/.f64 x n))) #s(literal -1/12 binary64)) (*.f64 #s(literal -1 binary64) (*.f64 x (/.f64 x n))))","(/.f64 (-.f64 (*.f64 (neg.f64 n) (*.f64 (/.f64 x n) x)) #s(literal -1/12 binary64)) (*.f64 #s(literal -1 binary64) (*.f64 (/.f64 x n) x)))","(/.f64 (-.f64 (*.f64 (neg.f64 n) (*.f64 x #s(literal 12 binary64))) (/.f64 (neg.f64 n) x)) (*.f64 #s(literal -1 binary64) (*.f64 x #s(literal 12 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 n) (/.f64 x (*.f64 (/.f64 #s(literal 1/12 binary64) x) n))) #s(literal -1 binary64)) (*.f64 #s(literal -1 binary64) (/.f64 x (*.f64 (/.f64 #s(literal 1/12 binary64) x) n))))","(/.f64 (-.f64 (*.f64 (neg.f64 n) (/.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) n))) #s(literal -1 binary64)) (*.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) n))))","(/.f64 (-.f64 (*.f64 (neg.f64 n) (*.f64 (*.f64 x #s(literal 12 binary64)) (/.f64 x n))) #s(literal -1 binary64)) (*.f64 #s(literal -1 binary64) (*.f64 (*.f64 x #s(literal 12 binary64)) (/.f64 x n))))","(/.f64 (-.f64 (*.f64 (neg.f64 n) (*.f64 (/.f64 x n) (*.f64 x #s(literal 12 binary64)))) #s(literal -1 binary64)) (*.f64 #s(literal -1 binary64) (*.f64 (/.f64 x n) (*.f64 x #s(literal 12 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 n) (*.f64 x (*.f64 x #s(literal 12 binary64)))) (neg.f64 n)) (*.f64 #s(literal -1 binary64) (*.f64 x (*.f64 x #s(literal 12 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 #s(literal -1/12 binary64) (/.f64 n x)))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 (neg.f64 n) (/.f64 #s(literal 1/12 binary64) x)))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal 1/12 binary64) x) (neg.f64 n)))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (-.f64 (/.f64 x n) (*.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal 1 binary64)))) (pow.f64 (*.f64 n (/.f64 n x)) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 (/.f64 n x) #s(literal -1/12 binary64)))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x #s(literal 12 binary64))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 (/.f64 n x) #s(literal 1 binary64)))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 x #s(literal 12 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (*.f64 (/.f64 #s(literal 1/12 binary64) x) n)))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (*.f64 x x))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (*.f64 #s(literal 1/12 binary64) n)))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (*.f64 x x))))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 #s(literal -1/12 binary64) (neg.f64 n)))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 #s(literal -1/12 binary64) n))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x (neg.f64 x))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 #s(literal 1/12 binary64) (neg.f64 n)))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 x (neg.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (*.f64 x #s(literal 12 binary64)) (neg.f64 x))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 n)))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 (*.f64 x #s(literal 12 binary64)) (neg.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (*.f64 x #s(literal 12 binary64)) x)) (*.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) n))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 (*.f64 x #s(literal 12 binary64)) x)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 (neg.f64 n) #s(literal -1/12 binary64)))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 (neg.f64 n) #s(literal 1/12 binary64)))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) (*.f64 x #s(literal 12 binary64)))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 (neg.f64 n) #s(literal 1 binary64)))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 (neg.f64 x) (*.f64 x #s(literal 12 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x (neg.f64 x))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 n #s(literal -1/12 binary64)))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 x (neg.f64 x))))","(/.f64 (-.f64 x (*.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal 1/12 binary64) x) n))) (/.f64 x n))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) (/.f64 x n))) (*.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -1/12 binary64))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 (neg.f64 x) (/.f64 x n))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (/.f64 x n) (neg.f64 x))) (*.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -1/12 binary64))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 (/.f64 x n) (neg.f64 x))))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 #s(literal 1/12 binary64) n))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 x x)))","(/.f64 (-.f64 (/.f64 x n) (*.f64 (pow.f64 n #s(literal -1 binary64)) (/.f64 #s(literal 1/12 binary64) x))) (pow.f64 (*.f64 n (/.f64 n x)) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x (/.f64 x n))) (*.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1/12 binary64))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 x (/.f64 x n))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (/.f64 x n) x)) (*.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1/12 binary64))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 (/.f64 x n) x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x #s(literal 12 binary64))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (/.f64 n x))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 x #s(literal 12 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 x (*.f64 (/.f64 #s(literal 1/12 binary64) x) n))) (pow.f64 n #s(literal -1 binary64))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (/.f64 x (*.f64 (/.f64 #s(literal 1/12 binary64) x) n))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) n))) (pow.f64 n #s(literal -1 binary64))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (/.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) n))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (*.f64 x #s(literal 12 binary64)) (/.f64 x n))) (pow.f64 n #s(literal -1 binary64))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 (*.f64 x #s(literal 12 binary64)) (/.f64 x n))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (/.f64 x n) (*.f64 x #s(literal 12 binary64)))) (pow.f64 n #s(literal -1 binary64))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 (/.f64 x n) (*.f64 x #s(literal 12 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x (*.f64 x #s(literal 12 binary64)))) (*.f64 (pow.f64 n #s(literal -1 binary64)) n)) (*.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 x (*.f64 x #s(literal 12 binary64)))))","(/.f64 (-.f64 (*.f64 n (neg.f64 x)) (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -1/12 binary64) (/.f64 n x)))) (*.f64 #s(literal 1 binary64) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 n (neg.f64 x)) (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 n) (/.f64 #s(literal 1/12 binary64) x)))) (*.f64 #s(literal 1 binary64) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 n (neg.f64 x)) (*.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1/12 binary64) x) (neg.f64 n)))) (*.f64 #s(literal 1 binary64) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 n (/.f64 x n)) (*.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal 1 binary64)))) (/.f64 x n))","(/.f64 (-.f64 (*.f64 n (neg.f64 x)) (*.f64 #s(literal 1 binary64) (*.f64 (/.f64 n x) #s(literal -1/12 binary64)))) (*.f64 #s(literal 1 binary64) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 n (*.f64 x #s(literal 12 binary64))) (*.f64 #s(literal 1 binary64) (*.f64 (/.f64 n x) #s(literal 1 binary64)))) (*.f64 #s(literal 1 binary64) (*.f64 x #s(literal 12 binary64))))","(/.f64 (-.f64 (*.f64 n (neg.f64 x)) (*.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (/.f64 #s(literal 1/12 binary64) x) n)))) (*.f64 #s(literal 1 binary64) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 n (neg.f64 (*.f64 x x))) (*.f64 #s(literal 1 binary64) (neg.f64 (*.f64 #s(literal 1/12 binary64) n)))) (*.f64 #s(literal 1 binary64) (neg.f64 (*.f64 x x))))","(/.f64 (-.f64 (*.f64 n (*.f64 x x)) (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -1/12 binary64) (neg.f64 n)))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 n (*.f64 (neg.f64 x) x)) (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -1/12 binary64) n))) (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 n (*.f64 x (neg.f64 x))) (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/12 binary64) (neg.f64 n)))) (*.f64 #s(literal 1 binary64) (*.f64 x (neg.f64 x))))","(/.f64 (-.f64 (*.f64 n (*.f64 (*.f64 x #s(literal 12 binary64)) (neg.f64 x))) (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 1 binary64) (neg.f64 n)))) (*.f64 #s(literal 1 binary64) (*.f64 (*.f64 x #s(literal 12 binary64)) (neg.f64 x))))","(/.f64 (-.f64 (*.f64 n (*.f64 (*.f64 x #s(literal 12 binary64)) x)) (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 1 binary64) n))) (*.f64 #s(literal 1 binary64) (*.f64 (*.f64 x #s(literal 12 binary64)) x)))","(/.f64 (-.f64 (*.f64 n (*.f64 x x)) (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 n) #s(literal -1/12 binary64)))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 n (*.f64 (neg.f64 x) x)) (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 n) #s(literal 1/12 binary64)))) (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 n (*.f64 (neg.f64 x) (*.f64 x #s(literal 12 binary64)))) (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 n) #s(literal 1 binary64)))) (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) (*.f64 x #s(literal 12 binary64)))))","(/.f64 (-.f64 (*.f64 n (*.f64 x (neg.f64 x))) (*.f64 #s(literal 1 binary64) (*.f64 n #s(literal -1/12 binary64)))) (*.f64 #s(literal 1 binary64) (*.f64 x (neg.f64 x))))","(/.f64 (-.f64 (*.f64 x n) (*.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1/12 binary64) x) n))) x)","(/.f64 (-.f64 (*.f64 n (*.f64 (neg.f64 x) (/.f64 x n))) #s(literal -1/12 binary64)) (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) (/.f64 x n))))","(/.f64 (-.f64 (*.f64 n (*.f64 (/.f64 x n) (neg.f64 x))) #s(literal -1/12 binary64)) (*.f64 #s(literal 1 binary64) (*.f64 (/.f64 x n) (neg.f64 x))))","(/.f64 (-.f64 (*.f64 n (*.f64 x x)) (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/12 binary64) n))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 n (/.f64 x n)) (/.f64 #s(literal 1/12 binary64) x)) (/.f64 x n))","(/.f64 (-.f64 (*.f64 n (*.f64 x (/.f64 x n))) #s(literal 1/12 binary64)) (*.f64 #s(literal 1 binary64) (*.f64 x (/.f64 x n))))","(/.f64 (-.f64 (*.f64 n (*.f64 (/.f64 x n) x)) #s(literal 1/12 binary64)) (*.f64 #s(literal 1 binary64) (*.f64 (/.f64 x n) x)))","(/.f64 (-.f64 (*.f64 n (*.f64 x #s(literal 12 binary64))) (/.f64 n x)) (*.f64 #s(literal 1 binary64) (*.f64 x #s(literal 12 binary64))))","(/.f64 (-.f64 (*.f64 n (/.f64 x (*.f64 (/.f64 #s(literal 1/12 binary64) x) n))) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 x (*.f64 (/.f64 #s(literal 1/12 binary64) x) n))))","(/.f64 (-.f64 (*.f64 n (/.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) n))) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) n))))","(/.f64 (-.f64 (*.f64 n (*.f64 (*.f64 x #s(literal 12 binary64)) (/.f64 x n))) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (*.f64 (*.f64 x #s(literal 12 binary64)) (/.f64 x n))))","(/.f64 (-.f64 (*.f64 n (*.f64 (/.f64 x n) (*.f64 x #s(literal 12 binary64)))) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (*.f64 (/.f64 x n) (*.f64 x #s(literal 12 binary64)))))","(/.f64 (-.f64 (*.f64 n (*.f64 x (*.f64 x #s(literal 12 binary64)))) (*.f64 #s(literal 1 binary64) n)) (*.f64 #s(literal 1 binary64) (*.f64 x (*.f64 x #s(literal 12 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 n n) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n)))","(/.f64 (neg.f64 (-.f64 (pow.f64 n #s(literal 3 binary64)) (/.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 x (/.f64 x n)) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n))))","(/.f64 (-.f64 (*.f64 n n) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) (-.f64 n (*.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x))))","(/.f64 (-.f64 (*.f64 n n) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n))","(/.f64 (-.f64 (pow.f64 n #s(literal 3 binary64)) (/.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 x (/.f64 x n)) #s(literal 3 binary64)))) (fma.f64 n n (-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (*.f64 n (*.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x))))))","(/.f64 (-.f64 (pow.f64 n #s(literal 3 binary64)) (/.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 x (/.f64 x n)) #s(literal 3 binary64)))) (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (-.f64 (*.f64 n n) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n)) (-.f64 (pow.f64 n #s(literal 3 binary64)) (/.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 x (/.f64 x n)) #s(literal 3 binary64))))))","(fma.f64 (*.f64 (/.f64 (neg.f64 n) x) #s(literal 1/12 binary64)) (pow.f64 x #s(literal -1 binary64)) n)","(fma.f64 (neg.f64 (/.f64 #s(literal 1/12 binary64) x)) (/.f64 n x) n)","(fma.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x) n)","(fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 (neg.f64 n) x) n)","(fma.f64 (/.f64 n x) (neg.f64 (/.f64 #s(literal 1/12 binary64) x)) n)","(fma.f64 n #s(literal 1 binary64) (*.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x)))","(fma.f64 #s(literal -1 binary64) (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) n)","(-.f64 (/.f64 (*.f64 n n) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n)) (/.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) n) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n)))","(-.f64 (/.f64 (pow.f64 n #s(literal 3 binary64)) (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n))) (/.f64 (/.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 x (/.f64 x n)) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 1/12 binary64) x) (/.f64 n x) n) (*.f64 n n))))","(-.f64 n (*.f64 (*.f64 #s(literal 1/12 binary64) n) (pow.f64 x #s(literal -2 binary64))))","(+.f64 (*.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x)) n)","(+.f64 n (*.f64 (/.f64 (neg.f64 n) x) (/.f64 #s(literal 1/12 binary64) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow.f64 #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 n (*.f64 (/.f64 n x) (+.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)))) x)) #s(literal -1 binary64)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(*.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 n (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1/2 binary64)) (pow.f64 (*.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64)) n) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)) (-.f64 (log1p.f64 x) (log.f64 x)))","(*.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n) #s(literal -1 binary64))","(*.f64 (-.f64 (log.f64 x) (log1p.f64 x)) (/.f64 #s(literal -1 binary64) n))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (-.f64 (log1p.f64 x) (log.f64 x)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) n) (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) n) (-.f64 (log.f64 x) (log1p.f64 x)))","(*.f64 #s(literal -1 binary64) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(pow.f64 (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (neg.f64 (pow.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n) #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) #s(literal 1 binary64))","(pow.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) n) (*.f64 n (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))))) (*.f64 n n))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))) (*.f64 n (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal 1 binary64)))) (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))) (*.f64 n (/.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))))) (*.f64 n (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) n) (*.f64 n (-.f64 (log.f64 x) (log1p.f64 x)))) (*.f64 n n))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64))) (*.f64 n (pow.f64 n #s(literal -1 binary64)))) (*.f64 n (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) (neg.f64 n))) n) (*.f64 n (*.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) (neg.f64 n))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n) #s(literal -1 binary64)) #s(literal 1 binary64))) n) (*.f64 n (/.f64 (pow.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (/.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64))) n) (*.f64 n (/.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (/.f64 n (-.f64 (log.f64 x) (log1p.f64 x)))) n) (*.f64 n (/.f64 n (-.f64 (log.f64 x) (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))))) n) (*.f64 n (neg.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (*.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))) n) (*.f64 n (*.f64 (*.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (neg.f64 n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))) n) (*.f64 n (*.f64 (neg.f64 n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (pow.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n) #s(literal -1 binary64))) n) (*.f64 n (pow.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 n #s(literal -1 binary64))) (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))) (*.f64 n (*.f64 n #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 n)) (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))) (*.f64 n (neg.f64 n)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))) (*.f64 n (/.f64 #s(literal -1 binary64) n))) (*.f64 n (neg.f64 (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))) (*.f64 n (/.f64 #s(literal -1 binary64) n))) (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 (pow.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n) #s(literal -1 binary64)))) (*.f64 n #s(literal -1 binary64))) (*.f64 n (neg.f64 (pow.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n) #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))) (*.f64 n #s(literal -1 binary64))) (*.f64 n (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (neg.f64 n)) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) #s(literal -1 binary64)))) (*.f64 n n))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) n) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) #s(literal 1 binary64)))) (*.f64 (neg.f64 n) n))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) n) (*.f64 (neg.f64 n) (log.f64 x))) (*.f64 (neg.f64 n) n))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) (neg.f64 n)) (*.f64 n (*.f64 (log.f64 x) #s(literal -1 binary64)))) (*.f64 n (neg.f64 n)))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) n) (*.f64 n (*.f64 (log.f64 x) #s(literal 1 binary64)))) (*.f64 n n))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) n) (*.f64 n (log.f64 x))) (*.f64 n n))","(/.f64 (-.f64 (*.f64 (log1p.f64 x) (neg.f64 n)) (*.f64 n (*.f64 (log.f64 x) #s(literal -1 binary64)))) (*.f64 n (neg.f64 n)))","(/.f64 (-.f64 (*.f64 (log1p.f64 x) n) (*.f64 n (*.f64 (log.f64 x) #s(literal 1 binary64)))) (*.f64 n n))","(/.f64 (-.f64 (*.f64 (log1p.f64 x) n) (*.f64 n (log.f64 x))) (*.f64 n n))","(/.f64 (-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))) n)","(/.f64 (-.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (*.f64 (log.f64 x) #s(literal -1 binary64))) (neg.f64 n))","(/.f64 (-.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) (*.f64 (log.f64 x) #s(literal 1 binary64))) n)","(/.f64 (-.f64 (log1p.f64 x) (*.f64 (log.f64 x) #s(literal 1 binary64))) n)","(/.f64 (-.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) (log.f64 x)) n)","(/.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) (neg.f64 n))","(/.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1 binary64)) n)","(/.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (*.f64 n (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) (neg.f64 n))","(/.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64))))","(/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) (pow.f64 n #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (neg.f64 (neg.f64 n)))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(/.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))))","(/.f64 #s(literal -1 binary64) (pow.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n) #s(literal -1 binary64)))","(neg.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(-.f64 (/.f64 #s(literal 0 binary64) n) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(-.f64 #s(literal 0 binary64) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(-.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))","(exp.f64 (-.f64 (*.f64 (log.f64 n) #s(literal -1 binary64)) (*.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64))))","(exp.f64 (fma.f64 (log.f64 n) #s(literal -1 binary64) (log.f64 (-.f64 (log1p.f64 x) (log.f64 x)))))","(exp.f64 (+.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (*.f64 (log.f64 n) #s(literal -1 binary64))))","(exp.f64 (*.f64 (log.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal 1 binary64)) #s(literal -1 binary64))","(*.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1/2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1/2 binary64)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (-.f64 (log1p.f64 x) (log.f64 x)))","(*.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 (log.f64 x) (log1p.f64 x)))","(pow.f64 (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64)) #s(literal -2 binary64))","(pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (*.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (*.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (exp.f64 (log.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) (exp.f64 (log.f64 (+.f64 (log.f64 x) (log1p.f64 x)))))","(/.f64 (exp.f64 (log.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (exp.f64 (log.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1/2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64)))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64))) (-.f64 (log.f64 x) (log1p.f64 x)))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (-.f64 (log.f64 x) (log1p.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (-.f64 (log1p.f64 x) (neg.f64 (log.f64 x))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (+.f64 (log.f64 x) (log1p.f64 x)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (fma.f64 (log1p.f64 x) (log1p.f64 x) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (*.f64 (log1p.f64 x) (neg.f64 (log.f64 x))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(neg.f64 (log.f64 (/.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))))","(neg.f64 (-.f64 (log.f64 x) (log1p.f64 x)))","(fma.f64 #s(literal -1 binary64) (log.f64 x) (log1p.f64 x))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (neg.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(-.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (fma.f64 x x (neg.f64 x))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (*.f64 x (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (*.f64 x (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 x)) (log.f64 (neg.f64 x)))","(-.f64 (neg.f64 (log.f64 x)) (neg.f64 (log1p.f64 x)))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))))","(-.f64 #s(literal 0 binary64) (-.f64 (log.f64 x) (log1p.f64 x)))","(-.f64 (log1p.f64 x) (log.f64 x))","(exp.f64 (*.f64 (*.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x))))","(+.f64 (log.f64 (pow.f64 (neg.f64 x) #s(literal -1 binary64))) (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 x)))","(+.f64 (neg.f64 (log.f64 x)) (log1p.f64 x))","(+.f64 #s(literal 0 binary64) (-.f64 (log1p.f64 x) (log.f64 x)))","(+.f64 (log1p.f64 x) (neg.f64 (log.f64 x)))","(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x))","(*.f64 #s(literal 1 binary64) (-.f64 (log.f64 x) (log1p.f64 x)))","(*.f64 #s(literal -1 binary64) (-.f64 (log1p.f64 x) (log.f64 x)))","(/.f64 (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (log.f64 x) (log1p.f64 x)))","(/.f64 (-.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) (fma.f64 (log.f64 x) (log.f64 x) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 (log.f64 x) (log1p.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (+.f64 (log.f64 x) (log1p.f64 x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (neg.f64 (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (neg.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(neg.f64 (log.f64 (/.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64))))","(neg.f64 (-.f64 (log1p.f64 x) (log.f64 x)))","(fma.f64 #s(literal -1 binary64) (log1p.f64 x) (neg.f64 (neg.f64 (log.f64 x))))","(fma.f64 #s(literal -1 binary64) (log1p.f64 x) (log.f64 x))","(-.f64 (log.f64 (neg.f64 (neg.f64 x))) (log.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x))))","(-.f64 (log.f64 (neg.f64 x)) (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 x)))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64))))","(-.f64 #s(literal 0 binary64) (-.f64 (log1p.f64 x) (log.f64 x)))","(-.f64 (log.f64 x) (log1p.f64 x))","(+.f64 (log.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64)))) (log.f64 (-.f64 x #s(literal 1 binary64))))","(+.f64 (log.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (log1p.f64 (neg.f64 x)))","(+.f64 (log.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(+.f64 (log.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (log1p.f64 (fma.f64 x x (neg.f64 x))))","(+.f64 (neg.f64 (log1p.f64 x)) (neg.f64 (neg.f64 (log.f64 x))))","(+.f64 (neg.f64 (log1p.f64 x)) (log.f64 x))","(+.f64 (log.f64 (neg.f64 x)) (log.f64 (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 #s(literal 0 binary64) (-.f64 (log.f64 x) (log1p.f64 x)))","(+.f64 (log.f64 x) (neg.f64 (log1p.f64 x)))","(log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n))))","(*.f64 (-.f64 (pow.f64 (/.f64 x n) #s(literal 2 binary64)) (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 2 binary64))) (pow.f64 (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (/.f64 x n) #s(literal 3 binary64)) (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n)) (pow.f64 (/.f64 x n) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n)) (-.f64 (pow.f64 (/.f64 x n) #s(literal 2 binary64)) (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n)) (pow.f64 (/.f64 x n) #s(literal 2 binary64))) (-.f64 (pow.f64 (/.f64 x n) #s(literal 3 binary64)) (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 x n) #s(literal 2 binary64)) (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n))) (*.f64 (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n)) (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 2 binary64)))) (*.f64 (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n)) (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n))))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 x n) #s(literal 3 binary64)) (fma.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n)) (pow.f64 (/.f64 x n) #s(literal 2 binary64)))) (*.f64 (fma.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n)) (pow.f64 (/.f64 x n) #s(literal 2 binary64))) (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 3 binary64)))) (*.f64 (fma.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n)) (pow.f64 (/.f64 x n) #s(literal 2 binary64))) (fma.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n)) (pow.f64 (/.f64 x n) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 x #s(literal -1 binary64)) (neg.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)))) (*.f64 (neg.f64 n) (neg.f64 (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)))))) (*.f64 (neg.f64 n) (neg.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 x #s(literal -1 binary64)) (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))) (*.f64 (neg.f64 n) (neg.f64 (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64)))))) (*.f64 (neg.f64 n) (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 x #s(literal -1 binary64)) (-.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 n) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))))) (*.f64 (neg.f64 n) (-.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 n) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))))) (*.f64 (neg.f64 n) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))))) (*.f64 (neg.f64 n) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))))) (*.f64 (neg.f64 n) (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 x #s(literal -1 binary64)) (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))) (*.f64 (neg.f64 n) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))))) (*.f64 (neg.f64 n) (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 x #s(literal -1 binary64)) (/.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))))) (*.f64 (neg.f64 n) #s(literal 1 binary64))) (*.f64 (neg.f64 n) (/.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 x #s(literal -1 binary64)) (/.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))))) (*.f64 (neg.f64 n) #s(literal 1 binary64))) (*.f64 (neg.f64 n) (/.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 x)) (neg.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)))) (*.f64 (neg.f64 (neg.f64 n)) (neg.f64 (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)))))) (*.f64 (neg.f64 (neg.f64 n)) (neg.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 x)) (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))) (*.f64 (neg.f64 (neg.f64 n)) (neg.f64 (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64)))))) (*.f64 (neg.f64 (neg.f64 n)) (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 x)) (-.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 n)) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))))) (*.f64 (neg.f64 (neg.f64 n)) (-.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 x)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 n)) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))))) (*.f64 (neg.f64 (neg.f64 n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 x)) (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))))) (*.f64 (neg.f64 (neg.f64 n)) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))))) (*.f64 (neg.f64 (neg.f64 n)) (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 x)) (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))) (*.f64 (neg.f64 (neg.f64 n)) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))))) (*.f64 (neg.f64 (neg.f64 n)) (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 x)) (/.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))))) (*.f64 (neg.f64 (neg.f64 n)) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 n)) (/.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 x)) (/.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))))) (*.f64 (neg.f64 (neg.f64 n)) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 n)) (/.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))))))","(/.f64 (-.f64 (*.f64 (neg.f64 x) (neg.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)))) (*.f64 (neg.f64 n) (neg.f64 (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)))))) (*.f64 (neg.f64 n) (neg.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 x) (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))) (*.f64 (neg.f64 n) (neg.f64 (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64)))))) (*.f64 (neg.f64 n) (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))))","(/.f64 (-.f64 (*.f64 (neg.f64 x) (-.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 n) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))))) (*.f64 (neg.f64 n) (-.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 x) (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))))) (*.f64 (neg.f64 n) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))))) (*.f64 (neg.f64 n) (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))))))","(/.f64 (-.f64 (*.f64 (neg.f64 x) (/.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))))) (*.f64 (neg.f64 n) #s(literal 1 binary64))) (*.f64 (neg.f64 n) (/.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (neg.f64 x) (/.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))))) (*.f64 (neg.f64 n) #s(literal 1 binary64))) (*.f64 (neg.f64 n) (/.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)))) (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)))))) (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))) (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64)))))) (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))))","(/.f64 (-.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) (-.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 (pow.f64 x #s(literal -1 binary64)) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))))) (*.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (pow.f64 x #s(literal -1 binary64)) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))))) (*.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))))) (*.f64 (pow.f64 x #s(literal -1 binary64)) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))))) (*.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))) (*.f64 (pow.f64 x #s(literal -1 binary64)) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))))) (*.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) (/.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))))) (pow.f64 x #s(literal -1 binary64))) (*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) (/.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))))) (pow.f64 x #s(literal -1 binary64))) (*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)))) (*.f64 (/.f64 (/.f64 n x) #s(literal 1 binary64)) (neg.f64 (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)))))) (*.f64 (/.f64 (/.f64 n x) #s(literal 1 binary64)) (neg.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))) (*.f64 (/.f64 (/.f64 n x) #s(literal 1 binary64)) (neg.f64 (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64)))))) (*.f64 (/.f64 (/.f64 n x) #s(literal 1 binary64)) (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 (/.f64 n x) #s(literal 1 binary64)) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))))) (*.f64 (/.f64 (/.f64 n x) #s(literal 1 binary64)) (-.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (/.f64 n x) #s(literal 1 binary64)) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))))) (*.f64 (/.f64 (/.f64 n x) #s(literal 1 binary64)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))))) (*.f64 (/.f64 (/.f64 n x) #s(literal 1 binary64)) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))))) (*.f64 (/.f64 (/.f64 n x) #s(literal 1 binary64)) (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))) (*.f64 (/.f64 (/.f64 n x) #s(literal 1 binary64)) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))))) (*.f64 (/.f64 (/.f64 n x) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))))) (*.f64 (/.f64 (/.f64 n x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (/.f64 n x) #s(literal 1 binary64)) (/.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))))) (*.f64 (/.f64 (/.f64 n x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (/.f64 n x) #s(literal 1 binary64)) (/.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)))) (*.f64 (/.f64 n x) (neg.f64 (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)))))) (*.f64 (/.f64 n x) (neg.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))) (*.f64 (/.f64 n x) (neg.f64 (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64)))))) (*.f64 (/.f64 n x) (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 n x) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))))) (*.f64 (/.f64 n x) (-.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))))) (*.f64 (/.f64 n x) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))))) (*.f64 (/.f64 n x) (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))))) (*.f64 (/.f64 n x) #s(literal 1 binary64))) (*.f64 (/.f64 n x) (/.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))))) (*.f64 (/.f64 n x) #s(literal 1 binary64))) (*.f64 (/.f64 n x) (/.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))))))","(/.f64 (-.f64 (*.f64 x (neg.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)))) (*.f64 n (neg.f64 (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)))))) (*.f64 n (neg.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 x (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))) (*.f64 n (neg.f64 (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64)))))) (*.f64 n (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))))","(/.f64 (-.f64 (*.f64 x (-.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 n (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))))) (*.f64 n (-.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 x (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))))) (*.f64 n (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))))) (*.f64 n (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))))))","(/.f64 (-.f64 (*.f64 x (/.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))))) n) (*.f64 n (/.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 x (/.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))))) n) (*.f64 n (/.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)))) (*.f64 (/.f64 (neg.f64 n) x) (neg.f64 (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)))))) (*.f64 (/.f64 (neg.f64 n) x) (neg.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))) (*.f64 (/.f64 (neg.f64 n) x) (neg.f64 (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64)))))) (*.f64 (/.f64 (neg.f64 n) x) (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 (neg.f64 n) x) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))))) (*.f64 (/.f64 (neg.f64 n) x) (-.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (neg.f64 n) x) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))))) (*.f64 (/.f64 (neg.f64 n) x) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))))) (*.f64 (/.f64 (neg.f64 n) x) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))))) (*.f64 (/.f64 (neg.f64 n) x) (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))) (*.f64 (/.f64 (neg.f64 n) x) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))))) (*.f64 (/.f64 (neg.f64 n) x) (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (/.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))))) (*.f64 (/.f64 (neg.f64 n) x) #s(literal 1 binary64))) (*.f64 (/.f64 (neg.f64 n) x) (/.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (/.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))))) (*.f64 (/.f64 (neg.f64 n) x) #s(literal 1 binary64))) (*.f64 (/.f64 (neg.f64 n) x) (/.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))))))","(/.f64 (-.f64 (pow.f64 (-.f64 (/.f64 x n) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 (-.f64 (/.f64 x n) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 (-.f64 (/.f64 x n) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (-.f64 (/.f64 x n) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (-.f64 (/.f64 x n) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 x n) #s(literal 2 binary64)) (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 2 binary64)))) (neg.f64 (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 x n) #s(literal 3 binary64)) (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n)) (pow.f64 (/.f64 x n) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 x) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 n) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))))) (*.f64 (neg.f64 n) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 x) (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))) (*.f64 (neg.f64 n) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))))) (*.f64 (neg.f64 n) (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 n x) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))))) (*.f64 (/.f64 n x) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))) (*.f64 (/.f64 n x) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))))) (*.f64 (/.f64 n x) (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))","(/.f64 (-.f64 (*.f64 x (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 n (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))))) (*.f64 n (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 x (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))) (*.f64 n (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))))) (*.f64 n (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 x n) #s(literal 2 binary64)) (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 2 binary64))) (-.f64 (/.f64 x n) (neg.f64 (expm1.f64 (/.f64 (log.f64 x) n)))))","(/.f64 (-.f64 (pow.f64 (/.f64 x n) #s(literal 2 binary64)) (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 2 binary64))) (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n)))","(/.f64 (-.f64 (pow.f64 (/.f64 x n) #s(literal 3 binary64)) (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 x n) #s(literal 2 binary64)) (-.f64 (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 2 binary64)) (*.f64 (/.f64 x n) (neg.f64 (expm1.f64 (/.f64 (log.f64 x) n)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 x n) #s(literal 3 binary64)) (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 3 binary64))) (fma.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n)) (pow.f64 (/.f64 x n) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n)) (-.f64 (pow.f64 (/.f64 x n) #s(literal 2 binary64)) (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n)) (pow.f64 (/.f64 x n) #s(literal 2 binary64))) (-.f64 (pow.f64 (/.f64 x n) #s(literal 3 binary64)) (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 3 binary64)))))","(fma.f64 (pow.f64 (pow.f64 (neg.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (neg.f64 (expm1.f64 (/.f64 (log.f64 x) n))))","(fma.f64 (pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 n #s(literal -1 binary64)) (neg.f64 (expm1.f64 (/.f64 (log.f64 x) n))))","(fma.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) n) (neg.f64 (expm1.f64 (/.f64 (log.f64 x) n))))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (expm1.f64 (/.f64 (log.f64 x) n))))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) x (neg.f64 (expm1.f64 (/.f64 (log.f64 x) n))))","(fma.f64 #s(literal 1 binary64) (/.f64 x n) (neg.f64 (expm1.f64 (/.f64 (log.f64 x) n))))","(fma.f64 x (pow.f64 n #s(literal -1 binary64)) (neg.f64 (expm1.f64 (/.f64 (log.f64 x) n))))","(fma.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (pow.f64 (neg.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (expm1.f64 (/.f64 (log.f64 x) n))))","(fma.f64 (/.f64 #s(literal -1 binary64) n) (neg.f64 x) (neg.f64 (expm1.f64 (/.f64 (log.f64 x) n))))","(fma.f64 #s(literal -1 binary64) (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n))","(-.f64 (/.f64 (pow.f64 (/.f64 x n) #s(literal 2 binary64)) (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n))) (/.f64 (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 2 binary64)) (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n))))","(-.f64 (/.f64 (pow.f64 (/.f64 x n) #s(literal 3 binary64)) (fma.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n)) (pow.f64 (/.f64 x n) #s(literal 2 binary64)))) (/.f64 (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 3 binary64)) (fma.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n)) (pow.f64 (/.f64 x n) #s(literal 2 binary64)))))","(-.f64 (-.f64 (/.f64 x n) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64))","(-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n)))","(+.f64 (-.f64 (/.f64 x n) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal 1 binary64))","(+.f64 (neg.f64 (expm1.f64 (/.f64 (log.f64 x) n))) (/.f64 x n))","(+.f64 (/.f64 x n) (neg.f64 (expm1.f64 (/.f64 (log.f64 x) n))))","(+.f64 #s(literal 1 binary64) (-.f64 (/.f64 x n) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(*.f64 (pow.f64 (pow.f64 (neg.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n))","(*.f64 (pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) n))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) x)","(*.f64 #s(literal 1 binary64) (/.f64 x n))","(*.f64 x (pow.f64 n #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (pow.f64 (neg.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) n) (neg.f64 x))","(pow.f64 (/.f64 (/.f64 n x) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 x n) #s(literal 1 binary64))","(pow.f64 (/.f64 n x) #s(literal -1 binary64))","(/.f64 (*.f64 x #s(literal -1 binary64)) (neg.f64 n))","(/.f64 (neg.f64 (neg.f64 x)) (neg.f64 (neg.f64 n)))","(/.f64 (neg.f64 x) (neg.f64 n))","(/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 n x) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 n x))","(/.f64 x n)","(/.f64 #s(literal -1 binary64) (/.f64 (neg.f64 n) x))","(neg.f64 (/.f64 (neg.f64 x) n))","(neg.f64 (/.f64 x (neg.f64 n)))","(exp.f64 (*.f64 (log.f64 (/.f64 n x)) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))) (pow.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64))) (pow.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))) (*.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal 2 binary64)))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)))) (neg.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))","(/.f64 (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))) (-.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64)))","(/.f64 (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)))","(/.f64 (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))) (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64)))))","(/.f64 (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64)))))","(fma.f64 (pow.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n))) (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))","(fma.f64 (pow.f64 #s(literal 1 binary64) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n))) (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))","(fma.f64 (pow.f64 #s(literal 1 binary64) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) #s(literal 2 binary64))) (pow.f64 (exp.f64 (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 #s(literal 1/2 binary64)) (/.f64 (log.f64 x) n)) (pow.f64 (exp.f64 #s(literal 1/2 binary64)) (/.f64 (log.f64 x) n)) #s(literal -1 binary64))","(fma.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal -1 binary64))","(fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (pow.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n))) #s(literal -1 binary64))","(fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (pow.f64 #s(literal 1 binary64) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n))) #s(literal -1 binary64))","(fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (pow.f64 #s(literal 1 binary64) (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))","(fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))","(expm1.f64 (*.f64 (*.f64 (log.f64 x) (/.f64 #s(literal 1/2 binary64) n)) #s(literal 2 binary64)))","(expm1.f64 (*.f64 (log.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n))) #s(literal 2 binary64)))","(expm1.f64 (*.f64 (log.f64 x) (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n))))","(expm1.f64 (*.f64 (log.f64 x) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n))))","(expm1.f64 (/.f64 (log.f64 x) n))","(-.f64 (/.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64))) (pow.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))) (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64)))","(-.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64))","(+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal 1 binary64)) #s(literal -1 binary64))","(*.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1/2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1/2 binary64)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (-.f64 (log1p.f64 x) (log.f64 x)))","(*.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 (log.f64 x) (log1p.f64 x)))","(pow.f64 (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64)) #s(literal -2 binary64))","(pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (*.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (*.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (exp.f64 (log.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) (exp.f64 (log.f64 (+.f64 (log.f64 x) (log1p.f64 x)))))","(/.f64 (exp.f64 (log.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (exp.f64 (log.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1/2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64)))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64))) (-.f64 (log.f64 x) (log1p.f64 x)))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (-.f64 (log.f64 x) (log1p.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (-.f64 (log1p.f64 x) (neg.f64 (log.f64 x))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (+.f64 (log.f64 x) (log1p.f64 x)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (fma.f64 (log1p.f64 x) (log1p.f64 x) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (*.f64 (log1p.f64 x) (neg.f64 (log.f64 x))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(neg.f64 (log.f64 (/.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))))","(neg.f64 (-.f64 (log.f64 x) (log1p.f64 x)))","(fma.f64 #s(literal -1 binary64) (log.f64 x) (log1p.f64 x))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (neg.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(-.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (fma.f64 x x (neg.f64 x))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (*.f64 x (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (*.f64 x (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 x)) (log.f64 (neg.f64 x)))","(-.f64 (neg.f64 (log.f64 x)) (neg.f64 (log1p.f64 x)))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))))","(-.f64 #s(literal 0 binary64) (-.f64 (log.f64 x) (log1p.f64 x)))","(-.f64 (log1p.f64 x) (log.f64 x))","(exp.f64 (*.f64 (*.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x))))","(+.f64 (log.f64 (pow.f64 (neg.f64 x) #s(literal -1 binary64))) (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 x)))","(+.f64 (neg.f64 (log.f64 x)) (log1p.f64 x))","(+.f64 #s(literal 0 binary64) (-.f64 (log1p.f64 x) (log.f64 x)))","(+.f64 (log1p.f64 x) (neg.f64 (log.f64 x)))","(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x))","(*.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (+.f64 (log.f64 x) (log1p.f64 x)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))","(*.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (-.f64 (log1p.f64 x) (log.f64 x))))","(pow.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64))","(pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (-.f64 (log1p.f64 x) (log.f64 x)))","(/.f64 #s(literal -1 binary64) (-.f64 (log.f64 x) (log1p.f64 x)))","(exp.f64 (neg.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x)))))","(exp.f64 (fma.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1/2 binary64) (*.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1/2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64))) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1/2 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64)))","(*.f64 #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 n (*.f64 (/.f64 n x) (+.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)))) x)) #s(literal 1 binary64))","(pow.f64 (pow.f64 #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 n (*.f64 (/.f64 n x) (+.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)))) x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 n (*.f64 (/.f64 n x) (+.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)))) x)) #s(literal 1 binary64))","#s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 n (*.f64 (/.f64 n x) (+.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)))) x))","(/.f64 (neg.f64 #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 n (*.f64 (/.f64 n x) (+.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)))) x))) #s(literal -1 binary64))","(/.f64 #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 n (*.f64 (/.f64 n x) (+.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)))) x)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 n (*.f64 (/.f64 n x) (+.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)))) x)) #s(literal -1 binary64)))","(exp.f64 (neg.f64 (*.f64 (log.f64 #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 n (*.f64 (/.f64 n x) (+.f64 (/.f64 #s(literal 1/12 binary64) x) #s(literal -1/2 binary64)))) x))) #s(literal -1 binary64))))","(*.f64 #s(literal 2 binary64) (log.f64 x))","(*.f64 (log.f64 x) #s(literal 2 binary64))","(/.f64 (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (log.f64 (/.f64 x x)))","(/.f64 (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (fma.f64 (log.f64 x) (log.f64 x) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))))","(+.f64 (log.f64 x) (log.f64 x))","(log.f64 (*.f64 x x))","(*.f64 (*.f64 (log.f64 x) #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n)) (log.f64 x))","(*.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n)) (log.f64 x))","(*.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) #s(literal 1/2 binary64)) (pow.f64 n #s(literal -1 binary64)))","(*.f64 #s(literal 2 binary64) (log.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n))))","(*.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) (/.f64 #s(literal 1/2 binary64) n))","(*.f64 (/.f64 #s(literal 1/2 binary64) n) (*.f64 #s(literal 2 binary64) (log.f64 x)))","(*.f64 #s(literal 1/2 binary64) (/.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) n))","(*.f64 #s(literal 1/2 binary64) (*.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) (log.f64 x))))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (log.f64 x))","(*.f64 (log.f64 x) (pow.f64 n #s(literal -1 binary64)))","(pow.f64 (/.f64 n (*.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) #s(literal 1/2 binary64))) #s(literal -1 binary64))","(/.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 2 binary64) (log.f64 x))) (neg.f64 n))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) (log.f64 x))) (*.f64 n #s(literal 2 binary64)))","(/.f64 (*.f64 (log.f64 x) #s(literal -1 binary64)) (neg.f64 n))","(/.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) #s(literal -1/2 binary64)) (neg.f64 n))","(/.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) #s(literal 1 binary64)) (*.f64 n #s(literal 2 binary64)))","(/.f64 (*.f64 (log.f64 x) #s(literal 1 binary64)) n)","(/.f64 (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) #s(literal 1/2 binary64))) (neg.f64 n))","(/.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) #s(literal 1/2 binary64)) n)","(/.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) (*.f64 n #s(literal 2 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 n (*.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) #s(literal 1/2 binary64))))","(/.f64 (log.f64 x) n)","(fma.f64 (*.f64 (log.f64 x) #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n)) (log.f64 x) #s(literal 0 binary64))","(fma.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n)) (log.f64 x) #s(literal 0 binary64))","(fma.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) #s(literal 1/2 binary64)) (pow.f64 n #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 #s(literal 2 binary64) (log.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n))) #s(literal 0 binary64))","(fma.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) (/.f64 #s(literal 1/2 binary64) n) #s(literal 0 binary64))","(fma.f64 (/.f64 #s(literal 1/2 binary64) n) (*.f64 #s(literal 2 binary64) (log.f64 x)) #s(literal 0 binary64))","(fma.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 x) (*.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 x)))","(fma.f64 #s(literal 1/2 binary64) (/.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) n) #s(literal 0 binary64))","(fma.f64 #s(literal 1/2 binary64) (*.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) (log.f64 x))) #s(literal 0 binary64))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (log.f64 x) #s(literal 0 binary64))","(fma.f64 (log.f64 x) (/.f64 #s(literal 1/2 binary64) n) (*.f64 (log.f64 x) (/.f64 #s(literal 1/2 binary64) n)))","(fma.f64 (log.f64 x) (pow.f64 n #s(literal -1 binary64)) #s(literal 0 binary64))","(+.f64 (log.f64 (pow.f64 (exp.f64 (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) #s(literal 2 binary64)))) (log.f64 (pow.f64 (exp.f64 (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) #s(literal 2 binary64)))))","(+.f64 (log.f64 (pow.f64 (exp.f64 #s(literal 1/2 binary64)) (/.f64 (log.f64 x) n))) (log.f64 (pow.f64 (exp.f64 #s(literal 1/2 binary64)) (/.f64 (log.f64 x) n))))","(+.f64 (log.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n))) (log.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n))))","(+.f64 (*.f64 (log.f64 x) (/.f64 #s(literal 1/2 binary64) n)) (*.f64 (log.f64 x) (/.f64 #s(literal 1/2 binary64) n)))","(+.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 x)) (*.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 x)))","(+.f64 #s(literal 0 binary64) (/.f64 (log.f64 x) n))","(+.f64 (/.f64 (log.f64 x) n) #s(literal 0 binary64))","(log.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":303.052001953125,"type":"rewrite"},{"compiler":[[37656,4703]],"memory":[[-2161088,86553632]],"time":157.318115234375,"type":"eval"},{"alts":[["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","done",38.47039794086707,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow.f64 (*.f64 #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n)) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))) #s(literal -1/2 binary64)))","fresh",45.560158304056536,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (pow.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal 2 binary64)) n))","fresh",25.61567689951491,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (pow.f64 x (fma.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n) #s(literal -1 binary64))) n))","fresh",28.279288532339677,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (*.f64 n x)))","fresh",28.342342604829426,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 (exp.f64 (neg.f64 (log.f64 x))) (/.f64 #s(literal -1 binary64) n)) x) n))","fresh",28.13424510185772,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","done",28.13424510185772,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (pow.f64 (/.f64 x n) #s(literal 3 binary64)) (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 3 binary64))) (fma.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n)) (pow.f64 (/.f64 x n) #s(literal 2 binary64)))))","fresh",48.46339812466766,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (*.f64 (log1p.f64 x) (/.f64 n (log.f64 x))) n) (*.f64 n (/.f64 n (log.f64 x)))))","fresh",32.304809402112646,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (*.f64 (log1p.f64 x) n) (*.f64 n (log.f64 x))) (*.f64 n n)))","fresh",32.106754795988216,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))","done",25.734748441915777,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 #s(approx (log (/ x (+ 1 x))) (log.f64 x))) n))","fresh",45.2776438963686,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) n))","done",25.7423278181046,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 (*.f64 x x) #s(literal -1/2 binary64))) n))","fresh",33.52561211897247,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x)) x)) n))","fresh",35.440763174662365,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) n))","fresh",48.89805773068464,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","fresh",35.44076317384705,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","done",40.089371255806995,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","fresh",45.4615753340363,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (neg (log (/ x (+ 1 x)))) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) x)) x)) x)) x)) n))","fresh",48.879820355818374,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))))))","fresh",40.13908304146397,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) n)))","fresh",25.562200491317256,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) n)))","fresh",28.330240565269197,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (*.f64 (/.f64 n (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x)))))))","fresh",25.647610633791743,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (*.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))))","fresh",25.574583010854717,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (/.f64 (neg.f64 n) (log.f64 x)))))","fresh",45.29391257487707,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (fma.f64 (/.f64 n x) #s(literal 1/2 binary64) n) x))))","fresh",46.338393406279145,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 #s(approx (- n (* (/ n x) (/ 1/12 x))) (*.f64 (/.f64 n x) (/.f64 (fma.f64 x x #s(literal -1/12 binary64)) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x))))","fresh",47.64854023556144,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 #s(approx (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) (/.f64 (fma.f64 #s(literal -1/12 binary64) n (*.f64 (*.f64 x n) (+.f64 #s(literal 1/2 binary64) x))) (*.f64 x x))) x))))","fresh",55.92486380381307,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))))","done",40.134914630664255,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) #s(approx (* (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) x) (/.f64 (fma.f64 #s(literal -1/12 binary64) n (*.f64 (*.f64 x n) (+.f64 #s(literal 1/2 binary64) x))) x)))))","fresh",46.14496931828162,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) #s(approx (* (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) x) (*.f64 (/.f64 n x) #s(literal -1/12 binary64))))))","fresh",62.301078303759425,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n))))","done",31.434726469522207,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (*.f64 n x))))","fresh",28.336151345060983,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (/.f64 #s(literal -1 binary64) n) (-.f64 (log.f64 x) (log1p.f64 x))))","fresh",25.560572192178654,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) #s(approx (pow (- (log (+ 1 x)) (log x)) -1) (fma.f64 (/.f64 #s(literal 1/2 binary64) x) x x)))))","fresh",45.50864282271016,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) #s(approx (pow (- (log (+ 1 x)) (log x)) -1) (/.f64 #s(literal -1 binary64) (log.f64 x))))))","fresh",45.264283831057774,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) #s(approx (pow (- (log (+ 1 x)) (log x)) -1) (*.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) x)) x)) x)) (neg.f64 x))))))","fresh",47.653944708298624,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (* (pow (/ n (- (pow (log (+ 1 x)) 3) (pow (log x) 3))) -1) (pow (+ (* (log x) (+ (log x) (log (+ 1 x)))) (pow (log (+ 1 x)) 2)) -1)) (/.f64 (/.f64 #s(literal 1 binary64) n) x)))","fresh",40.10126342032319,"binary64"]],"compiler":[[2194,430],[15,11],[43,19],[24,16],[24,16],[23,14],[26,17],[23,14],[48,22],[30,16],[27,16],[23,15],[26,16],[22,14],[29,18],[37,24],[31,20],[35,23],[27,17],[28,17],[39,26],[29,19],[25,17],[25,16],[33,18],[29,19],[31,20],[34,21],[54,32],[58,35],[29,18],[56,34],[49,30],[23,14],[29,15],[23,15],[36,23],[34,22],[46,31],[55,30]],"count":[[895,39]],"kept":[{"done":[5,5],"fresh":[30,22],"new":[855,10],"picked":[5,2]}],"memory":[[2160560,54477616]],"min-error":[[0.025167748030659097,"binary64"]],"time":52.52197265625,"type":"prune"},{"accuracy":[5.793330920764548],"baseline":[25.391180519719384],"branch":[["x",5.793330920764548,2,"binary64"],["n",7.683793113117013,4,"binary64"],["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))",8.337244685241547,3,"binary64"],["(/.f64 #s(literal 1 binary64) n)",7.683793113117014,3,"binary64"]],"compiler":[[1,2],[1,2],[13,8],[3,4]],"count":[[65,2]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (* (pow (/ n (- (pow (log (+ 1 x)) 3) (pow (log x) 3))) -1) (pow (+ (* (log x) (+ (log x) (log (+ 1 x)))) (pow (log (+ 1 x)) 2)) -1)) (/.f64 (/.f64 #s(literal 1 binary64) n) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) #s(approx (* (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) x) (*.f64 (/.f64 n x) #s(literal -1/12 binary64))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (fma.f64 (/.f64 n x) #s(literal 1/2 binary64) n) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) #s(approx (* (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) x) (/.f64 (fma.f64 #s(literal -1/12 binary64) n (*.f64 (*.f64 x n) (+.f64 #s(literal 1/2 binary64) x))) x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) #s(approx (pow (- (log (+ 1 x)) (log x)) -1) (fma.f64 (/.f64 #s(literal 1/2 binary64) x) x x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (/.f64 #s(literal 1/2 binary64) n) x)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 #s(approx (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) (/.f64 (fma.f64 #s(literal -1/12 binary64) n (*.f64 (*.f64 x n) (+.f64 #s(literal 1/2 binary64) x))) (*.f64 x x))) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (neg.f64 x) (-.f64 (neg.f64 n) (/.f64 (fma.f64 (/.f64 n x) #s(literal -1/12 binary64) (*.f64 #s(literal 1/2 binary64) n)) x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (neg (log (/ x (+ 1 x)))) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) x)) x)) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 (-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x)) (neg.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 #s(approx (- n (* (/ n x) (/ 1/12 x))) (*.f64 (/.f64 n x) (/.f64 (fma.f64 x x #s(literal -1/12 binary64)) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) #s(approx (pow (- (log (+ 1 x)) (log x)) -1) (*.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) x)) x)) x)) (neg.f64 x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (neg.f64 x) (-.f64 (neg.f64 n) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (*.f64 n #s(literal -1/12 binary64)) x) #s(literal -1/2 binary64) (*.f64 #s(literal -1/12 binary64) (-.f64 (/.f64 n x) n))) x) #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) n)) x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 #s(approx (log (/ x (+ 1 x))) (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow.f64 (*.f64 #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n)) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))) #s(literal -1/2 binary64)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 (*.f64 x x) #s(literal -1/2 binary64))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (/.f64 (neg.f64 n) (log.f64 x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (pow.f64 x (fma.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n) #s(literal -1 binary64))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) #s(approx (pow (- (log (+ 1 x)) (log x)) -1) (/.f64 #s(literal -1 binary64) (log.f64 x))))))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 #s(approx (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/.f64 (fma.f64 #s(literal -1/3 binary64) x (-.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 #s(literal 1/6 binary64) (/.f64 x n) (fma.f64 #s(literal -1/2 binary64) x #s(literal 1/2 binary64))) n))) (neg.f64 n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (*.f64 n x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (/.f64 #s(literal -1 binary64) n) (-.f64 (log.f64 x) (log1p.f64 x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (*.f64 (log1p.f64 x) n) (*.f64 n (log.f64 x))) (*.f64 n n)))","(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 (*.f64 x x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (*.f64 n x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 #s(approx (pow (- (log (+ 1 x)) (log x)) -1) (/.f64 #s(literal -1 binary64) (log.f64 x))) #s(literal -1 binary64))))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (pow.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal 2 binary64)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 (exp.f64 (neg.f64 (log.f64 x))) (/.f64 #s(literal -1 binary64) n)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (*.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (*.f64 (log1p.f64 x) (/.f64 n (log.f64 x))) n) (*.f64 n (/.f64 n (log.f64 x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (*.f64 (/.f64 n (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x)))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (pow.f64 n #s(literal -1 binary64))) (+.f64 (log.f64 x) (log1p.f64 x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (*.f64 n (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (pow.f64 (/.f64 x n) #s(literal 3 binary64)) (pow.f64 (expm1.f64 (/.f64 (log.f64 x) n)) #s(literal 3 binary64))) (fma.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (+.f64 (expm1.f64 (/.f64 (log.f64 x) n)) (/.f64 x n)) (pow.f64 (/.f64 x n) #s(literal 2 binary64)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (*.f64 x (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))) (*.f64 n (expm1.f64 (*.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))))) (*.f64 n (+.f64 (+.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))))"]],"memory":[[-7790720,32528544]],"oracle":[63.79354889749975],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))"]],"repr":["binary64"],"time":71.695068359375,"times":[[24.85400390625,"x"],[14.930908203125,"n"],[12.408935546875,"(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"],[15.2421875,"(/.f64 #s(literal 1 binary64) n)"]],"type":"regimes"},{"accuracy":[7.691605613117013],"baseline":[25.550494758753146],"branch":[["(/.f64 #s(literal 1 binary64) n)",7.691605613117013,3,"binary64"],["x",13.866183443576205,5,"binary64"]],"compiler":[[3,4],[1,2]],"count":[[39,3]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (* (pow (/ n (- (pow (log (+ 1 x)) 3) (pow (log x) 3))) -1) (pow (+ (* (log x) (+ (log x) (log (+ 1 x)))) (pow (log (+ 1 x)) 2)) -1)) (/.f64 (/.f64 #s(literal 1 binary64) n) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) #s(approx (* (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) x) (*.f64 (/.f64 n x) #s(literal -1/12 binary64))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (fma.f64 (/.f64 n x) #s(literal 1/2 binary64) n) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) #s(approx (* (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) x) (/.f64 (fma.f64 #s(literal -1/12 binary64) n (*.f64 (*.f64 x n) (+.f64 #s(literal 1/2 binary64) x))) x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) #s(approx (pow (- (log (+ 1 x)) (log x)) -1) (fma.f64 (/.f64 #s(literal 1/2 binary64) x) x x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (/.f64 #s(literal 1/2 binary64) n) x)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 #s(approx (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) (/.f64 (fma.f64 #s(literal -1/12 binary64) n (*.f64 (*.f64 x n) (+.f64 #s(literal 1/2 binary64) x))) (*.f64 x x))) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (neg.f64 x) (-.f64 (neg.f64 n) (/.f64 (fma.f64 (/.f64 n x) #s(literal -1/12 binary64) (*.f64 #s(literal 1/2 binary64) n)) x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (neg (log (/ x (+ 1 x)))) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) x)) x)) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 (-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x)) (neg.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 #s(approx (- n (* (/ n x) (/ 1/12 x))) (*.f64 (/.f64 n x) (/.f64 (fma.f64 x x #s(literal -1/12 binary64)) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) #s(approx (pow (- (log (+ 1 x)) (log x)) -1) (*.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) x)) x)) x)) (neg.f64 x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (neg.f64 x) (-.f64 (neg.f64 n) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (*.f64 n #s(literal -1/12 binary64)) x) #s(literal -1/2 binary64) (*.f64 #s(literal -1/12 binary64) (-.f64 (/.f64 n x) n))) x) #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) n)) x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 #s(approx (log (/ x (+ 1 x))) (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow.f64 (*.f64 #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n)) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))) #s(literal -1/2 binary64)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 (*.f64 x x) #s(literal -1/2 binary64))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (/.f64 (neg.f64 n) (log.f64 x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (pow.f64 x (fma.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n) #s(literal -1 binary64))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) #s(approx (pow (- (log (+ 1 x)) (log x)) -1) (/.f64 #s(literal -1 binary64) (log.f64 x))))))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 #s(approx (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/.f64 (fma.f64 #s(literal -1/3 binary64) x (-.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 #s(literal 1/6 binary64) (/.f64 x n) (fma.f64 #s(literal -1/2 binary64) x #s(literal 1/2 binary64))) n))) (neg.f64 n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (*.f64 n x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (/.f64 #s(literal -1 binary64) n) (-.f64 (log.f64 x) (log1p.f64 x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (/.f64 #s(literal -1 binary64) n)))"]],"memory":[[-3682096,12276224]],"oracle":[63.564930869089636],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 #s(approx (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/.f64 (fma.f64 #s(literal -1/3 binary64) x (-.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 #s(literal 1/6 binary64) (/.f64 x n) (fma.f64 #s(literal -1/2 binary64) x #s(literal 1/2 binary64))) n))) (neg.f64 n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"]],"repr":["binary64"],"time":21.721923828125,"times":[[9.058837890625,"(/.f64 #s(literal 1 binary64) n)"],[9.872802734375,"x"]],"type":"regimes"},{"accuracy":[8.40147538393286],"baseline":[25.734748441915777],"branch":[["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))",9.325994090583782,3,"binary64"],["(/.f64 #s(literal 1 binary64) n)",8.40147538393286,3,"binary64"]],"compiler":[[13,8],[3,4]],"count":[[34,3]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (* (pow (/ n (- (pow (log (+ 1 x)) 3) (pow (log x) 3))) -1) (pow (+ (* (log x) (+ (log x) (log (+ 1 x)))) (pow (log (+ 1 x)) 2)) -1)) (/.f64 (/.f64 #s(literal 1 binary64) n) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) #s(approx (* (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) x) (*.f64 (/.f64 n x) #s(literal -1/12 binary64))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (fma.f64 (/.f64 n x) #s(literal 1/2 binary64) n) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) #s(approx (* (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) x) (/.f64 (fma.f64 #s(literal -1/12 binary64) n (*.f64 (*.f64 x n) (+.f64 #s(literal 1/2 binary64) x))) x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) #s(approx (pow (- (log (+ 1 x)) (log x)) -1) (fma.f64 (/.f64 #s(literal 1/2 binary64) x) x x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (/.f64 #s(literal 1/2 binary64) n) x)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 #s(approx (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) (/.f64 (fma.f64 #s(literal -1/12 binary64) n (*.f64 (*.f64 x n) (+.f64 #s(literal 1/2 binary64) x))) (*.f64 x x))) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (neg.f64 x) (-.f64 (neg.f64 n) (/.f64 (fma.f64 (/.f64 n x) #s(literal -1/12 binary64) (*.f64 #s(literal 1/2 binary64) n)) x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (neg (log (/ x (+ 1 x)))) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) x)) x)) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 (-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x)) (neg.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 #s(approx (- n (* (/ n x) (/ 1/12 x))) (*.f64 (/.f64 n x) (/.f64 (fma.f64 x x #s(literal -1/12 binary64)) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) #s(approx (pow (- (log (+ 1 x)) (log x)) -1) (*.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) x)) x)) x)) (neg.f64 x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (neg.f64 x) (-.f64 (neg.f64 n) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (*.f64 n #s(literal -1/12 binary64)) x) #s(literal -1/2 binary64) (*.f64 #s(literal -1/12 binary64) (-.f64 (/.f64 n x) n))) x) #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) n)) x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 #s(approx (log (/ x (+ 1 x))) (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow.f64 (*.f64 #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n)) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))) #s(literal -1/2 binary64)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 (*.f64 x x) #s(literal -1/2 binary64))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (/.f64 (neg.f64 n) (log.f64 x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (pow.f64 x (fma.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n) #s(literal -1 binary64))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) #s(approx (pow (- (log (+ 1 x)) (log x)) -1) (/.f64 #s(literal -1 binary64) (log.f64 x))))))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"]],"memory":[[3052672,10754816]],"oracle":[63.520274579362116],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"]],"repr":["binary64"],"time":17.405029296875,"times":[[7.133056640625,"(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"],[7.968994140625,"(/.f64 #s(literal 1 binary64) n)"]],"type":"regimes"},{"accuracy":[8.163637988770345],"baseline":[25.734748441915777],"branch":[["n",8.163637988770343,5,"binary64"],["(/.f64 #s(literal 1 binary64) n)",8.163637988770345,4,"binary64"]],"compiler":[[1,2],[3,4]],"count":[[33,4]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (* (pow (/ n (- (pow (log (+ 1 x)) 3) (pow (log x) 3))) -1) (pow (+ (* (log x) (+ (log x) (log (+ 1 x)))) (pow (log (+ 1 x)) 2)) -1)) (/.f64 (/.f64 #s(literal 1 binary64) n) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) #s(approx (* (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) x) (*.f64 (/.f64 n x) #s(literal -1/12 binary64))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (fma.f64 (/.f64 n x) #s(literal 1/2 binary64) n) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) #s(approx (* (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) x) (/.f64 (fma.f64 #s(literal -1/12 binary64) n (*.f64 (*.f64 x n) (+.f64 #s(literal 1/2 binary64) x))) x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) #s(approx (pow (- (log (+ 1 x)) (log x)) -1) (fma.f64 (/.f64 #s(literal 1/2 binary64) x) x x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (/.f64 #s(literal 1/2 binary64) n) x)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 #s(approx (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) (/.f64 (fma.f64 #s(literal -1/12 binary64) n (*.f64 (*.f64 x n) (+.f64 #s(literal 1/2 binary64) x))) (*.f64 x x))) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (neg.f64 x) (-.f64 (neg.f64 n) (/.f64 (fma.f64 (/.f64 n x) #s(literal -1/12 binary64) (*.f64 #s(literal 1/2 binary64) n)) x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (neg (log (/ x (+ 1 x)))) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) x)) x)) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 (-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x)) (neg.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 #s(approx (- n (* (/ n x) (/ 1/12 x))) (*.f64 (/.f64 n x) (/.f64 (fma.f64 x x #s(literal -1/12 binary64)) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) #s(approx (pow (- (log (+ 1 x)) (log x)) -1) (*.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) x)) x)) x)) (neg.f64 x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (neg.f64 x) (-.f64 (neg.f64 n) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (*.f64 n #s(literal -1/12 binary64)) x) #s(literal -1/2 binary64) (*.f64 #s(literal -1/12 binary64) (-.f64 (/.f64 n x) n))) x) #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) n)) x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 #s(approx (log (/ x (+ 1 x))) (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow.f64 (*.f64 #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n)) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))) #s(literal -1/2 binary64)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 (*.f64 x x) #s(literal -1/2 binary64))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (/.f64 (neg.f64 n) (log.f64 x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (pow.f64 x (fma.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n) #s(literal -1 binary64))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) #s(approx (pow (- (log (+ 1 x)) (log x)) -1) (/.f64 #s(literal -1 binary64) (log.f64 x))))))"]],"memory":[[844688,11213632]],"oracle":[63.48174263020111],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))"]],"repr":["binary64"],"time":20.22998046875,"times":[[9.162841796875,"n"],[8.6298828125,"(/.f64 #s(literal 1 binary64) n)"]],"type":"regimes"},{"accuracy":[8.210528789004085],"baseline":[25.734748441915777],"branch":[["(/.f64 #s(literal 1 binary64) n)",8.210528789004085,4,"binary64"]],"compiler":[[3,4]],"count":[[31,4]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (* (pow (/ n (- (pow (log (+ 1 x)) 3) (pow (log x) 3))) -1) (pow (+ (* (log x) (+ (log x) (log (+ 1 x)))) (pow (log (+ 1 x)) 2)) -1)) (/.f64 (/.f64 #s(literal 1 binary64) n) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) #s(approx (* (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) x) (*.f64 (/.f64 n x) #s(literal -1/12 binary64))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (fma.f64 (/.f64 n x) #s(literal 1/2 binary64) n) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) #s(approx (* (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) x) (/.f64 (fma.f64 #s(literal -1/12 binary64) n (*.f64 (*.f64 x n) (+.f64 #s(literal 1/2 binary64) x))) x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) #s(approx (pow (- (log (+ 1 x)) (log x)) -1) (fma.f64 (/.f64 #s(literal 1/2 binary64) x) x x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (/.f64 #s(literal 1/2 binary64) n) x)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 #s(approx (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) (/.f64 (fma.f64 #s(literal -1/12 binary64) n (*.f64 (*.f64 x n) (+.f64 #s(literal 1/2 binary64) x))) (*.f64 x x))) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (neg.f64 x) (-.f64 (neg.f64 n) (/.f64 (fma.f64 (/.f64 n x) #s(literal -1/12 binary64) (*.f64 #s(literal 1/2 binary64) n)) x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (neg (log (/ x (+ 1 x)))) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) x)) x)) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 (-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x)) (neg.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 #s(approx (- n (* (/ n x) (/ 1/12 x))) (*.f64 (/.f64 n x) (/.f64 (fma.f64 x x #s(literal -1/12 binary64)) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) #s(approx (pow (- (log (+ 1 x)) (log x)) -1) (*.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) x)) x)) x)) (neg.f64 x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (neg.f64 x) (-.f64 (neg.f64 n) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (*.f64 n #s(literal -1/12 binary64)) x) #s(literal -1/2 binary64) (*.f64 #s(literal -1/12 binary64) (-.f64 (/.f64 n x) n))) x) #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) n)) x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 #s(approx (log (/ x (+ 1 x))) (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow.f64 (*.f64 #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n)) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))) #s(literal -1/2 binary64)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 (*.f64 x x) #s(literal -1/2 binary64))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (/.f64 (neg.f64 n) (log.f64 x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (pow.f64 x (fma.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n) #s(literal -1 binary64))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"]],"memory":[[-1448736,6377968]],"oracle":[63.48174263020111],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (pow.f64 x (fma.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n) #s(literal -1 binary64))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))"]],"repr":["binary64"],"time":11.451904296875,"times":[[8.778076171875,"(/.f64 #s(literal 1 binary64) n)"]],"type":"regimes"},{"accuracy":[8.22339199570917],"baseline":[25.734748441915777],"branch":[["(/.f64 #s(literal 1 binary64) n)",8.22339199570917,4,"binary64"]],"compiler":[[3,4]],"count":[[30,4]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (* (pow (/ n (- (pow (log (+ 1 x)) 3) (pow (log x) 3))) -1) (pow (+ (* (log x) (+ (log x) (log (+ 1 x)))) (pow (log (+ 1 x)) 2)) -1)) (/.f64 (/.f64 #s(literal 1 binary64) n) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) #s(approx (* (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) x) (*.f64 (/.f64 n x) #s(literal -1/12 binary64))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (fma.f64 (/.f64 n x) #s(literal 1/2 binary64) n) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) #s(approx (* (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) x) (/.f64 (fma.f64 #s(literal -1/12 binary64) n (*.f64 (*.f64 x n) (+.f64 #s(literal 1/2 binary64) x))) x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) #s(approx (pow (- (log (+ 1 x)) (log x)) -1) (fma.f64 (/.f64 #s(literal 1/2 binary64) x) x x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (/.f64 #s(literal 1/2 binary64) n) x)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 #s(approx (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) (/.f64 (fma.f64 #s(literal -1/12 binary64) n (*.f64 (*.f64 x n) (+.f64 #s(literal 1/2 binary64) x))) (*.f64 x x))) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (neg.f64 x) (-.f64 (neg.f64 n) (/.f64 (fma.f64 (/.f64 n x) #s(literal -1/12 binary64) (*.f64 #s(literal 1/2 binary64) n)) x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (neg (log (/ x (+ 1 x)))) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) x)) x)) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 (-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x)) (neg.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 #s(approx (- n (* (/ n x) (/ 1/12 x))) (*.f64 (/.f64 n x) (/.f64 (fma.f64 x x #s(literal -1/12 binary64)) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) #s(approx (pow (- (log (+ 1 x)) (log x)) -1) (*.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) x)) x)) x)) (neg.f64 x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (neg.f64 x) (-.f64 (neg.f64 n) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (*.f64 n #s(literal -1/12 binary64)) x) #s(literal -1/2 binary64) (*.f64 #s(literal -1/12 binary64) (-.f64 (/.f64 n x) n))) x) #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) n)) x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 #s(approx (log (/ x (+ 1 x))) (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow.f64 (*.f64 #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n)) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))) #s(literal -1/2 binary64)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 (*.f64 x x) #s(literal -1/2 binary64))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (/.f64 (neg.f64 n) (log.f64 x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (pow.f64 x (fma.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n) #s(literal -1 binary64))) n))"]],"memory":[[-1608192,6291456]],"oracle":[63.48174263020111],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (pow.f64 x (fma.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n) #s(literal -1 binary64))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))"]],"repr":["binary64"],"time":11.05810546875,"times":[[8.43310546875,"(/.f64 #s(literal 1 binary64) n)"]],"type":"regimes"},{"accuracy":[12.01066372199969],"baseline":[25.734748441915777],"branch":[["n",15.592196340112986,4,"binary64"],["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))",12.01066372199969,3,"binary64"],["(/.f64 #s(literal 1 binary64) n)",15.36402446561205,4,"binary64"]],"compiler":[[1,2],[13,8],[3,4]],"count":[[29,3]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (* (pow (/ n (- (pow (log (+ 1 x)) 3) (pow (log x) 3))) -1) (pow (+ (* (log x) (+ (log x) (log (+ 1 x)))) (pow (log (+ 1 x)) 2)) -1)) (/.f64 (/.f64 #s(literal 1 binary64) n) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) #s(approx (* (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) x) (*.f64 (/.f64 n x) #s(literal -1/12 binary64))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (fma.f64 (/.f64 n x) #s(literal 1/2 binary64) n) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) #s(approx (* (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) x) (/.f64 (fma.f64 #s(literal -1/12 binary64) n (*.f64 (*.f64 x n) (+.f64 #s(literal 1/2 binary64) x))) x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) #s(approx (pow (- (log (+ 1 x)) (log x)) -1) (fma.f64 (/.f64 #s(literal 1/2 binary64) x) x x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (/.f64 #s(literal 1/2 binary64) n) x)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 #s(approx (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) (/.f64 (fma.f64 #s(literal -1/12 binary64) n (*.f64 (*.f64 x n) (+.f64 #s(literal 1/2 binary64) x))) (*.f64 x x))) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (neg.f64 x) (-.f64 (neg.f64 n) (/.f64 (fma.f64 (/.f64 n x) #s(literal -1/12 binary64) (*.f64 #s(literal 1/2 binary64) n)) x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (neg (log (/ x (+ 1 x)))) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) x)) x)) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 (-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x)) (neg.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 #s(approx (- n (* (/ n x) (/ 1/12 x))) (*.f64 (/.f64 n x) (/.f64 (fma.f64 x x #s(literal -1/12 binary64)) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) #s(approx (pow (- (log (+ 1 x)) (log x)) -1) (*.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) x)) x)) x)) (neg.f64 x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (neg.f64 x) (-.f64 (neg.f64 n) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (*.f64 n #s(literal -1/12 binary64)) x) #s(literal -1/2 binary64) (*.f64 #s(literal -1/12 binary64) (-.f64 (/.f64 n x) n))) x) #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) n)) x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 #s(approx (log (/ x (+ 1 x))) (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow.f64 (*.f64 #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n)) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))) #s(literal -1/2 binary64)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 (*.f64 x x) #s(literal -1/2 binary64))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (/.f64 (neg.f64 n) (log.f64 x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))"]],"memory":[[5751840,13595872]],"oracle":[63.48174263020111],"outputs":[["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"]],"repr":["binary64"],"time":23.44287109375,"times":[[7.33984375,"n"],[6.64599609375,"(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"],[6.9599609375,"(/.f64 #s(literal 1 binary64) n)"]],"type":"regimes"},{"accuracy":[12.018243098188512],"baseline":[25.7423278181046],"branch":[["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))",12.018243098188512,3,"binary64"]],"compiler":[[13,8]],"count":[[28,3]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (* (pow (/ n (- (pow (log (+ 1 x)) 3) (pow (log x) 3))) -1) (pow (+ (* (log x) (+ (log x) (log (+ 1 x)))) (pow (log (+ 1 x)) 2)) -1)) (/.f64 (/.f64 #s(literal 1 binary64) n) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) #s(approx (* (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) x) (*.f64 (/.f64 n x) #s(literal -1/12 binary64))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (fma.f64 (/.f64 n x) #s(literal 1/2 binary64) n) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) #s(approx (* (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) x) (/.f64 (fma.f64 #s(literal -1/12 binary64) n (*.f64 (*.f64 x n) (+.f64 #s(literal 1/2 binary64) x))) x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) #s(approx (pow (- (log (+ 1 x)) (log x)) -1) (fma.f64 (/.f64 #s(literal 1/2 binary64) x) x x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (/.f64 #s(literal 1/2 binary64) n) x)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 #s(approx (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) (/.f64 (fma.f64 #s(literal -1/12 binary64) n (*.f64 (*.f64 x n) (+.f64 #s(literal 1/2 binary64) x))) (*.f64 x x))) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (neg.f64 x) (-.f64 (neg.f64 n) (/.f64 (fma.f64 (/.f64 n x) #s(literal -1/12 binary64) (*.f64 #s(literal 1/2 binary64) n)) x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (neg (log (/ x (+ 1 x)))) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) x)) x)) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 (-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x)) (neg.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 #s(approx (- n (* (/ n x) (/ 1/12 x))) (*.f64 (/.f64 n x) (/.f64 (fma.f64 x x #s(literal -1/12 binary64)) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) #s(approx (pow (- (log (+ 1 x)) (log x)) -1) (*.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) x)) x)) x)) (neg.f64 x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (neg.f64 x) (-.f64 (neg.f64 n) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (*.f64 n #s(literal -1/12 binary64)) x) #s(literal -1/2 binary64) (*.f64 #s(literal -1/12 binary64) (-.f64 (/.f64 n x) n))) x) #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) n)) x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 #s(approx (log (/ x (+ 1 x))) (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow.f64 (*.f64 #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n)) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))) #s(literal -1/2 binary64)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 (*.f64 x x) #s(literal -1/2 binary64))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (/.f64 (neg.f64 n) (log.f64 x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) n))"]],"memory":[[-4547328,5404704]],"oracle":[63.48174263020111],"outputs":[["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"]],"repr":["binary64"],"time":8.550048828125,"times":[[6.4990234375,"(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"]],"type":"regimes"},{"accuracy":[21.081742765588793],"baseline":[33.52561211897247],"branch":[["n",22.861500013086875,4,"binary64"],["(/.f64 #s(literal 1 binary64) n)",22.386460800617936,5,"binary64"],["x",21.081742765588793,5,"binary64"],["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))",27.607644285919115,3,"binary64"]],"compiler":[[1,2],[3,4],[1,2],[13,8]],"count":[[27,5]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (* (pow (/ n (- (pow (log (+ 1 x)) 3) (pow (log x) 3))) -1) (pow (+ (* (log x) (+ (log x) (log (+ 1 x)))) (pow (log (+ 1 x)) 2)) -1)) (/.f64 (/.f64 #s(literal 1 binary64) n) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) #s(approx (* (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) x) (*.f64 (/.f64 n x) #s(literal -1/12 binary64))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (fma.f64 (/.f64 n x) #s(literal 1/2 binary64) n) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) #s(approx (* (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) x) (/.f64 (fma.f64 #s(literal -1/12 binary64) n (*.f64 (*.f64 x n) (+.f64 #s(literal 1/2 binary64) x))) x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) #s(approx (pow (- (log (+ 1 x)) (log x)) -1) (fma.f64 (/.f64 #s(literal 1/2 binary64) x) x x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (/.f64 #s(literal 1/2 binary64) n) x)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 #s(approx (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) (/.f64 (fma.f64 #s(literal -1/12 binary64) n (*.f64 (*.f64 x n) (+.f64 #s(literal 1/2 binary64) x))) (*.f64 x x))) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (neg.f64 x) (-.f64 (neg.f64 n) (/.f64 (fma.f64 (/.f64 n x) #s(literal -1/12 binary64) (*.f64 #s(literal 1/2 binary64) n)) x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (neg (log (/ x (+ 1 x)))) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) x)) x)) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 (-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x)) (neg.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 #s(approx (- n (* (/ n x) (/ 1/12 x))) (*.f64 (/.f64 n x) (/.f64 (fma.f64 x x #s(literal -1/12 binary64)) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) #s(approx (pow (- (log (+ 1 x)) (log x)) -1) (*.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) x)) x)) x)) (neg.f64 x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (neg.f64 x) (-.f64 (neg.f64 n) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (*.f64 n #s(literal -1/12 binary64)) x) #s(literal -1/2 binary64) (*.f64 #s(literal -1/12 binary64) (-.f64 (/.f64 n x) n))) x) #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) n)) x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 #s(approx (log (/ x (+ 1 x))) (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow.f64 (*.f64 #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n)) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))) #s(literal -1/2 binary64)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 (*.f64 x x) #s(literal -1/2 binary64))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (/.f64 (neg.f64 n) (log.f64 x)))))"]],"memory":[[517552,16862432]],"oracle":[63.48174263020111],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (/.f64 (neg.f64 n) (log.f64 x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 (*.f64 x x) #s(literal -1/2 binary64))) n))"]],"repr":["binary64"],"time":29.5,"times":[[6.64794921875,"n"],[7.033935546875,"(/.f64 #s(literal 1 binary64) n)"],[7.274169921875,"x"],[6.14794921875,"(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"]],"type":"regimes"},{"accuracy":[21.08336400582035],"baseline":[33.52561211897247],"branch":[["x",21.08336400582035,5,"binary64"]],"compiler":[[1,2]],"count":[[26,5]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (* (pow (/ n (- (pow (log (+ 1 x)) 3) (pow (log x) 3))) -1) (pow (+ (* (log x) (+ (log x) (log (+ 1 x)))) (pow (log (+ 1 x)) 2)) -1)) (/.f64 (/.f64 #s(literal 1 binary64) n) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) #s(approx (* (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) x) (*.f64 (/.f64 n x) #s(literal -1/12 binary64))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (fma.f64 (/.f64 n x) #s(literal 1/2 binary64) n) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) #s(approx (* (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) x) (/.f64 (fma.f64 #s(literal -1/12 binary64) n (*.f64 (*.f64 x n) (+.f64 #s(literal 1/2 binary64) x))) x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) #s(approx (pow (- (log (+ 1 x)) (log x)) -1) (fma.f64 (/.f64 #s(literal 1/2 binary64) x) x x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (/.f64 #s(literal 1/2 binary64) n) x)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 #s(approx (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) (/.f64 (fma.f64 #s(literal -1/12 binary64) n (*.f64 (*.f64 x n) (+.f64 #s(literal 1/2 binary64) x))) (*.f64 x x))) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (neg.f64 x) (-.f64 (neg.f64 n) (/.f64 (fma.f64 (/.f64 n x) #s(literal -1/12 binary64) (*.f64 #s(literal 1/2 binary64) n)) x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (neg (log (/ x (+ 1 x)))) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) x)) x)) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 (-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x)) (neg.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 #s(approx (- n (* (/ n x) (/ 1/12 x))) (*.f64 (/.f64 n x) (/.f64 (fma.f64 x x #s(literal -1/12 binary64)) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) #s(approx (pow (- (log (+ 1 x)) (log x)) -1) (*.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) x)) x)) x)) (neg.f64 x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (neg.f64 x) (-.f64 (neg.f64 n) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (*.f64 n #s(literal -1/12 binary64)) x) #s(literal -1/2 binary64) (*.f64 #s(literal -1/12 binary64) (-.f64 (/.f64 n x) n))) x) #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) n)) x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 #s(approx (log (/ x (+ 1 x))) (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow.f64 (*.f64 #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n)) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))) #s(literal -1/2 binary64)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 (*.f64 x x) #s(literal -1/2 binary64))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))))))"]],"memory":[[-2724320,5444880]],"oracle":[63.48174263020111],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 (*.f64 x x) #s(literal -1/2 binary64))) n))"]],"repr":["binary64"],"time":8.2529296875,"times":[[6.3291015625,"x"]],"type":"regimes"},{"accuracy":[23.183916459981788],"baseline":[35.44076317384705],"branch":[["(/.f64 #s(literal 1 binary64) n)",25.13132647664097,6,"binary64"],["n",25.410157016937504,5,"binary64"],["x",23.183916459981788,5,"binary64"]],"compiler":[[3,4],[1,2],[1,2]],"count":[[24,5]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (* (pow (/ n (- (pow (log (+ 1 x)) 3) (pow (log x) 3))) -1) (pow (+ (* (log x) (+ (log x) (log (+ 1 x)))) (pow (log (+ 1 x)) 2)) -1)) (/.f64 (/.f64 #s(literal 1 binary64) n) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) #s(approx (* (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) x) (*.f64 (/.f64 n x) #s(literal -1/12 binary64))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (fma.f64 (/.f64 n x) #s(literal 1/2 binary64) n) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) #s(approx (* (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) x) (/.f64 (fma.f64 #s(literal -1/12 binary64) n (*.f64 (*.f64 x n) (+.f64 #s(literal 1/2 binary64) x))) x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) #s(approx (pow (- (log (+ 1 x)) (log x)) -1) (fma.f64 (/.f64 #s(literal 1/2 binary64) x) x x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (/.f64 #s(literal 1/2 binary64) n) x)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 #s(approx (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) (/.f64 (fma.f64 #s(literal -1/12 binary64) n (*.f64 (*.f64 x n) (+.f64 #s(literal 1/2 binary64) x))) (*.f64 x x))) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (neg.f64 x) (-.f64 (neg.f64 n) (/.f64 (fma.f64 (/.f64 n x) #s(literal -1/12 binary64) (*.f64 #s(literal 1/2 binary64) n)) x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (neg (log (/ x (+ 1 x)))) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) x)) x)) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 (-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x)) (neg.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 #s(approx (- n (* (/ n x) (/ 1/12 x))) (*.f64 (/.f64 n x) (/.f64 (fma.f64 x x #s(literal -1/12 binary64)) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) #s(approx (pow (- (log (+ 1 x)) (log x)) -1) (*.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) x)) x)) x)) (neg.f64 x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (neg.f64 x) (-.f64 (neg.f64 n) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (*.f64 n #s(literal -1/12 binary64)) x) #s(literal -1/2 binary64) (*.f64 #s(literal -1/12 binary64) (-.f64 (/.f64 n x) n))) x) #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) n)) x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 #s(approx (log (/ x (+ 1 x))) (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow.f64 (*.f64 #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n)) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))) #s(literal -1/2 binary64)))"]],"memory":[[3521264,12486192]],"oracle":[63.48174263020111],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) #s(approx (* (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) x) (/.f64 (fma.f64 #s(literal -1/12 binary64) n (*.f64 (*.f64 x n) (+.f64 #s(literal 1/2 binary64) x))) x)))))"]],"repr":["binary64"],"time":20.09521484375,"times":[[5.97509765625,"(/.f64 #s(literal 1 binary64) n)"],[6.26806640625,"n"],[5.7890625,"x"]],"type":"regimes"},{"accuracy":[25.742305659008707],"baseline":[35.44076317384705],"branch":[["x",25.742305659008707,3,"binary64"]],"compiler":[[1,2]],"count":[[22,3]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (* (pow (/ n (- (pow (log (+ 1 x)) 3) (pow (log x) 3))) -1) (pow (+ (* (log x) (+ (log x) (log (+ 1 x)))) (pow (log (+ 1 x)) 2)) -1)) (/.f64 (/.f64 #s(literal 1 binary64) n) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) #s(approx (* (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) x) (*.f64 (/.f64 n x) #s(literal -1/12 binary64))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (fma.f64 (/.f64 n x) #s(literal 1/2 binary64) n) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) #s(approx (* (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) x) (/.f64 (fma.f64 #s(literal -1/12 binary64) n (*.f64 (*.f64 x n) (+.f64 #s(literal 1/2 binary64) x))) x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) #s(approx (pow (- (log (+ 1 x)) (log x)) -1) (fma.f64 (/.f64 #s(literal 1/2 binary64) x) x x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (/.f64 #s(literal 1/2 binary64) n) x)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 #s(approx (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) (/.f64 (fma.f64 #s(literal -1/12 binary64) n (*.f64 (*.f64 x n) (+.f64 #s(literal 1/2 binary64) x))) (*.f64 x x))) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (neg.f64 x) (-.f64 (neg.f64 n) (/.f64 (fma.f64 (/.f64 n x) #s(literal -1/12 binary64) (*.f64 #s(literal 1/2 binary64) n)) x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (neg (log (/ x (+ 1 x)))) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) x)) x)) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 (-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x)) (neg.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 #s(approx (- n (* (/ n x) (/ 1/12 x))) (*.f64 (/.f64 n x) (/.f64 (fma.f64 x x #s(literal -1/12 binary64)) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) #s(approx (pow (- (log (+ 1 x)) (log x)) -1) (*.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) x)) x)) x)) (neg.f64 x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (neg.f64 x) (-.f64 (neg.f64 n) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (*.f64 n #s(literal -1/12 binary64)) x) #s(literal -1/2 binary64) (*.f64 #s(literal -1/12 binary64) (-.f64 (/.f64 n x) n))) x) #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) n)) x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 #s(approx (log (/ x (+ 1 x))) (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))"]],"memory":[[-3214832,4858688]],"oracle":[63.48147520734485],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) #s(approx (* (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) x) (/.f64 (fma.f64 #s(literal -1/12 binary64) n (*.f64 (*.f64 x n) (+.f64 #s(literal 1/2 binary64) x))) x)))))"]],"repr":["binary64"],"time":7.32080078125,"times":[[5.69580078125,"x"]],"type":"regimes"},{"accuracy":[31.95809275268911],"baseline":[35.44076317384705],"branch":[["(/.f64 #s(literal 1 binary64) n)",31.312024993145346,4,"binary64"],["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))",33.09603582933765,3,"binary64"],["n",31.31202499314535,4,"binary64"],["x",31.95809275268911,2,"binary64"]],"compiler":[[3,4],[13,8],[1,2],[1,2]],"count":[[19,2]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (* (pow (/ n (- (pow (log (+ 1 x)) 3) (pow (log x) 3))) -1) (pow (+ (* (log x) (+ (log x) (log (+ 1 x)))) (pow (log (+ 1 x)) 2)) -1)) (/.f64 (/.f64 #s(literal 1 binary64) n) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) #s(approx (* (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) x) (*.f64 (/.f64 n x) #s(literal -1/12 binary64))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (fma.f64 (/.f64 n x) #s(literal 1/2 binary64) n) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) #s(approx (* (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) x) (/.f64 (fma.f64 #s(literal -1/12 binary64) n (*.f64 (*.f64 x n) (+.f64 #s(literal 1/2 binary64) x))) x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) #s(approx (pow (- (log (+ 1 x)) (log x)) -1) (fma.f64 (/.f64 #s(literal 1/2 binary64) x) x x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (/.f64 #s(literal 1/2 binary64) n) x)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 #s(approx (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) (/.f64 (fma.f64 #s(literal -1/12 binary64) n (*.f64 (*.f64 x n) (+.f64 #s(literal 1/2 binary64) x))) (*.f64 x x))) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (neg.f64 x) (-.f64 (neg.f64 n) (/.f64 (fma.f64 (/.f64 n x) #s(literal -1/12 binary64) (*.f64 #s(literal 1/2 binary64) n)) x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (neg (log (/ x (+ 1 x)))) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) x)) x)) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 (-.f64 n (*.f64 (/.f64 n x) (/.f64 #s(literal 1/12 binary64) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x)) (neg.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (-.f64 #s(approx (- n (* (/ n x) (/ 1/12 x))) (*.f64 (/.f64 n x) (/.f64 (fma.f64 x x #s(literal -1/12 binary64)) x))) (*.f64 (/.f64 n x) #s(literal -1/2 binary64))) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) #s(approx (pow (- (log (+ 1 x)) (log x)) -1) (*.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) x)) x)) x)) (neg.f64 x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (neg.f64 x) (-.f64 (neg.f64 n) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (*.f64 n #s(literal -1/12 binary64)) x) #s(literal -1/2 binary64) (*.f64 #s(literal -1/12 binary64) (-.f64 (/.f64 n x) n))) x) #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) n)) x))))))"]],"memory":[[5332784,13518208]],"oracle":[63.48147520734485],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) #s(approx (* (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) x) (/.f64 (fma.f64 #s(literal -1/12 binary64) n (*.f64 (*.f64 x n) (+.f64 #s(literal 1/2 binary64) x))) x)))))"]],"repr":["binary64"],"time":20.9169921875,"times":[[4.98095703125,"(/.f64 #s(literal 1 binary64) n)"],[4.17578125,"(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"],[5.083984375,"n"],[4.795166015625,"x"]],"type":"regimes"},{"accuracy":[36.60670083464908],"baseline":[40.089371255806995],"branch":[["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))",37.91109231341046,3,"binary64"],["n",35.866473977817385,3,"binary64"],["(/.f64 #s(literal 1 binary64) n)",34.950695385642625,4,"binary64"],["x",36.60670083464908,2,"binary64"]],"compiler":[[13,8],[1,2],[3,4],[1,2]],"count":[[9,2]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (* (pow (/ n (- (pow (log (+ 1 x)) 3) (pow (log x) 3))) -1) (pow (+ (* (log x) (+ (log x) (log (+ 1 x)))) (pow (log (+ 1 x)) 2)) -1)) (/.f64 (/.f64 #s(literal 1 binary64) n) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) #s(approx (* (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) x) (*.f64 (/.f64 n x) #s(literal -1/12 binary64))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (fma.f64 (/.f64 n x) #s(literal 1/2 binary64) n) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) #s(approx (* (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) x) (/.f64 (fma.f64 #s(literal -1/12 binary64) n (*.f64 (*.f64 x n) (+.f64 #s(literal 1/2 binary64) x))) x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) #s(approx (pow (- (log (+ 1 x)) (log x)) -1) (fma.f64 (/.f64 #s(literal 1/2 binary64) x) x x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (/.f64 #s(literal 1/2 binary64) n) x)) x)))"]],"memory":[[1034560,9234752]],"oracle":[63.00747023506061],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) #s(approx (* (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) x) (/.f64 (fma.f64 #s(literal -1/12 binary64) n (*.f64 (*.f64 x n) (+.f64 #s(literal 1/2 binary64) x))) x)))))"]],"repr":["binary64"],"time":12.4560546875,"times":[[2.35009765625,"(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"],[2.760986328125,"n"],[3.06298828125,"(/.f64 #s(literal 1 binary64) n)"],[3.0,"x"]],"type":"regimes"},{"accuracy":[40.08937125580698],"baseline":[40.089371255806995],"branch":[["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))",40.089371255806995,1,"binary64"],["(/.f64 #s(literal 1 binary64) n)",40.08937125580698,1,"binary64"],["n",40.08937125580701,1,"binary64"],["x",40.089371255807,1,"binary64"]],"compiler":[[13,8],[3,4],[1,2],[1,2]],"count":[[6,1]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (* (pow (/ n (- (pow (log (+ 1 x)) 3) (pow (log x) 3))) -1) (pow (+ (* (log x) (+ (log x) (log (+ 1 x)))) (pow (log (+ 1 x)) 2)) -1)) (/.f64 (/.f64 #s(literal 1 binary64) n) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) #s(approx (* (- (- n (* (/ n x) (/ 1/12 x))) (* (/ n x) -1/2)) x) (*.f64 (/.f64 n x) #s(literal -1/12 binary64))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 (fma.f64 (/.f64 n x) #s(literal 1/2 binary64) n) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) n))"]],"memory":[[-1842992,7973072]],"oracle":[63.00747023506061],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))"]],"repr":["binary64"],"time":9.98095703125,"times":[[1.81298828125,"(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"],[2.213134765625,"(/.f64 #s(literal 1 binary64) n)"],[2.195068359375,"n"],[2.756103515625,"x"]],"type":"regimes"},{"accuracy":[40.10126342032318],"baseline":[40.10126342032319],"branch":[["n",40.1012634203232,1,"binary64"],["x",40.10126342032319,1,"binary64"],["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))",40.1012634203232,1,"binary64"],["(/.f64 #s(literal 1 binary64) n)",40.10126342032318,1,"binary64"]],"compiler":[[1,2],[1,2],[13,8],[3,4]],"count":[[2,1]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (* (pow (/ n (- (pow (log (+ 1 x)) 3) (pow (log x) 3))) -1) (pow (+ (* (log x) (+ (log x) (log (+ 1 x)))) (pow (log (+ 1 x)) 2)) -1)) (/.f64 (/.f64 #s(literal 1 binary64) n) x)))"]],"memory":[[-2073216,6238128]],"oracle":[40.146633380664255],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (* (pow (/ n (- (pow (log (+ 1 x)) 3) (pow (log x) 3))) -1) (pow (+ (* (log x) (+ (log x) (log (+ 1 x)))) (pow (log (+ 1 x)) 2)) -1)) (/.f64 (/.f64 #s(literal 1 binary64) n) x)))"]],"repr":["binary64"],"time":5.844970703125,"times":[[1.218017578125,"n"],[1.295166015625,"x"],[1.150146484375,"(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"],[1.48388671875,"(/.f64 #s(literal 1 binary64) n)"]],"type":"regimes"},{"accuracy":[40.134914630664234],"baseline":[40.134914630664255],"branch":[["n",40.13491463066425,1,"binary64"],["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))",40.13491463066425,1,"binary64"],["x",40.13491463066425,1,"binary64"],["(/.f64 #s(literal 1 binary64) n)",40.134914630664234,1,"binary64"]],"compiler":[[1,2],[13,8],[1,2],[3,4]],"count":[[1,1]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))))"]],"memory":[[-2425136,5919616]],"oracle":[40.134914630664255],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) #s(approx (/ n (- (log (+ 1 x)) (log x))) (*.f64 x n))))"]],"repr":["binary64"],"time":4.912109375,"times":[[1.044921875,"n"],[1.123046875,"(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"],[1.031982421875,"x"],[1.080810546875,"(/.f64 #s(literal 1 binary64) n)"]],"type":"regimes"},{"bstep":[[43.18408203125,0.09013062005517396,583.6797356703453]],"compiler":[[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[15,11],[1,2]],"memory":[[-1445136,6608720]],"method":["binary-search"],"mixsample":[[2.240234375,"adjust",800],[1.599365234375,"ival-div",0],[0.944091796875,"ival-add",0],[0.138427734375,"ival-div",400],[8.502685546875,"ival-pow",1600],[0.0732421875,"ival-assert",0],[0.3125,"ival-div",800],[1.49755859375,"ival-sub",0],[0.127197265625,"ival-true",0],[6.34619140625,"ival-pow",400],[0.09130859375,"exact",0],[1.057373046875,"adjust",2000],[7.6005859375,"ival-pow",0]],"outcomes":[[9.29541015625,1,"valid",34],[19.0595703125,2,"valid",37],[1.681884765625,0,"exit",15],[6.25244140625,0,"valid",57]],"stop":[["narrow-enough",1]],"time":46.58203125,"type":"bsearch"},{"bstep":[[0.115966796875,1.892337035096993e-8,6.317552910147583e-8],[0.27880859375,-6.416292391190578e-50,-4.267114284347088e-53]],"compiler":[[11,10],[3,4]],"memory":[[378896,378896]],"method":["left-value","left-value"],"time":1.787841796875,"type":"bsearch"},{"bstep":[[0.09814453125,1.892337035096993e-8,6.317552910147583e-8],[0.23388671875,-6.416292391190578e-50,-4.267114284347088e-53]],"compiler":[[11,10],[3,4]],"memory":[[343568,343568]],"method":["left-value","left-value"],"time":1.419189453125,"type":"bsearch"},{"bstep":[[0.058837890625,9.05841603041502e+248,4.8161566592906545e+249],[0.06396484375,1.892337035096993e-8,6.317552910147583e-8],[0.155029296875,-6.416292391190578e-50,-4.267114284347088e-53]],"compiler":[[11,10],[3,4]],"memory":[[435568,435568]],"method":["left-value","left-value","left-value"],"time":1.0400390625,"type":"bsearch"},{"bstep":[[0.100830078125,9.05841603041502e+248,4.8161566592906545e+249],[0.101806640625,1.892337035096993e-8,6.317552910147583e-8],[0.22802734375,-6.416292391190578e-50,-4.267114284347088e-53]],"compiler":[[11,10],[3,4]],"memory":[[434688,434688]],"method":["left-value","left-value","left-value"],"time":2.577880859375,"type":"bsearch"},{"bstep":[[0.053955078125,4.0778381529603335e+154,2.0266965971937892e+167],[0.06298828125,1.892337035096993e-8,6.317552910147583e-8],[0.306884765625,-6.416292391190578e-50,-4.267114284347088e-53]],"compiler":[[11,10],[3,4]],"memory":[[433360,433360]],"method":["left-value","left-value","left-value"],"time":1.218017578125,"type":"bsearch"},{"bstep":[[0.06787109375,9.557032942808519e-11,3.457121350713965e-5],[0.0361328125,{"type":"real","value":"-inf"},-1.358115175875696e-9]],"compiler":[[3,5],[13,8]],"memory":[[315200,315200]],"method":["left-value","left-value"],"time":0.72607421875,"type":"bsearch"},{"bstep":[[0.126953125,9.557032942808519e-11,3.457121350713965e-5],[0.06103515625,{"type":"real","value":"-inf"},-1.358115175875696e-9]],"compiler":[[3,5],[13,8]],"memory":[[310432,310432]],"method":["left-value","left-value"],"time":1.02001953125,"type":"bsearch"},{"bstep":[[27.154052734375,137170734181343.1,432739351674007.9],[47.448974609375,1.6223145968162966e-133,2.7421575619914144e-127],[59.583984375,3.2002620612336217e-172,4.842652488813091e-167],[0.24609375,5.4070417966172024e-207,5.446646761359601e-207]],"compiler":[[29,19],[35,24],[29,19],[35,24],[29,19],[35,24],[29,19],[35,24],[29,19],[35,24],[35,24],[31,21],[35,24],[31,21],[35,24],[31,21],[35,24],[31,21],[35,24],[31,21],[35,24],[31,21],[35,24],[31,21],[35,24],[31,21],[35,24],[31,21],[31,21],[15,12],[31,21],[15,12],[31,21],[15,12],[31,21],[15,12],[31,21],[15,12],[31,21],[15,12],[31,21],[15,12],[31,21],[15,12],[31,21],[15,12],[15,11],[1,2]],"memory":[[1633216,18015520]],"method":["binary-search","binary-search","binary-search","binary-search"],"mixsample":[[0.111083984375,"ival-add",1200],[3.955810546875,"ival-div",0],[7.065673828125,"adjust",800],[0.835693359375,"ival-div",400],[20.262451171875,"ival-pow",1600],[0.030029296875,"ival-div",1600],[0.22607421875,"ival-assert",0],[4.123046875,"ival-sub",0],[25.102783203125,"ival-pow",0],[1.577392578125,"adjust",2000],[3.007568359375,"ival-add",0],[0.4248046875,"ival-div",1200],[0.012939453125,"ival-add",1600],[0.723388671875,"ival-div",800],[0.255126953125,"ival-add",400],[0.421875,"ival-true",0],[28.79443359375,"ival-pow",400],[0.304931640625,"exact",0],[0.398681640625,"ival-add",800]],"outcomes":[[54.145263671875,1,"valid",156],[38.245849609375,2,"valid",60],[2.1572265625,0,"exit",21],[20.337646484375,0,"valid",152]],"stop":[["narrow-enough",1],["narrow-enough",1],["narrow-enough",1],["narrow-enough",1]],"time":140.412841796875,"type":"bsearch"},{"bstep":[[5.165771484375,1.0160853001653671e+24,3.7474052119288295e+32],[1.26708984375,1.6223145968162966e-133,2.7421575619914144e-127],[0.94189453125,3.2002620612336217e-172,4.842652488813091e-167],[0.1640625,5.4070417966172024e-207,5.446646761359601e-207]],"compiler":[[29,19],[35,24],[35,24],[27,18],[35,24],[27,18],[35,24],[27,18],[35,24],[27,18],[35,24],[27,18],[35,24],[27,18],[35,24],[27,18],[35,24],[27,18],[35,24],[27,18],[27,18],[15,12],[27,18],[15,12],[27,18],[15,12],[27,18],[15,12],[27,18],[15,12],[27,18],[15,12],[27,18],[15,12],[27,18],[15,12],[27,18],[15,12],[15,11],[1,2]],"memory":[[2611920,2611920]],"method":["binary-search","binary-search","binary-search","binary-search"],"mixsample":[[0.254150390625,"adjust",800],[0.17529296875,"ival-div",0],[0.107421875,"ival-add",0],[0.02490234375,"ival-div",400],[1.135986328125,"ival-pow",1600],[0.00634765625,"ival-assert",0],[0.040283203125,"ival-div",800],[0.16064453125,"ival-sub",0],[0.012939453125,"ival-true",0],[0.555908203125,"ival-pow",400],[0.01611328125,"exact",0],[0.1171875,"adjust",2000],[0.866455078125,"ival-pow",0]],"outcomes":[[0.948974609375,1,"valid",4],[2.07421875,2,"valid",5],[0.46728515625,0,"exit",4],[0.65771484375,0,"valid",7]],"stop":[["predicate-same",1],["narrow-enough",1],["narrow-enough",1],["narrow-enough",1]],"time":8.837158203125,"type":"bsearch"},{"bstep":[[62.35009765625,4.931773108866831e+169,5.384227234643463e+173],[2.373046875,1.6223145968162966e-133,2.7421575619914144e-127],[0.905029296875,3.2002620612336217e-172,4.842652488813091e-167],[0.14404296875,5.4070417966172024e-207,5.446646761359601e-207]],"compiler":[[56,35],[35,24],[56,35],[35,24],[56,35],[35,24],[56,35],[35,24],[56,35],[35,24],[56,35],[35,24],[56,35],[35,24],[56,35],[35,24],[35,24],[27,18],[35,24],[27,18],[35,24],[27,18],[35,24],[27,18],[35,24],[27,18],[35,24],[27,18],[35,24],[27,18],[35,24],[27,18],[35,24],[27,18],[27,18],[15,12],[27,18],[15,12],[27,18],[15,12],[27,18],[15,12],[27,18],[15,12],[27,18],[15,12],[27,18],[15,12],[27,18],[15,12],[27,18],[15,12],[15,11],[1,2]],"memory":[[-5318864,10696624]],"method":["binary-search","binary-search","binary-search","binary-search"],"mixsample":[[0.235107421875,"ival-add",1200],[1.583984375,"ival-div",0],[2.93994140625,"adjust",800],[0.21240234375,"ival-div",400],[18.6943359375,"ival-pow",1600],[0.253173828125,"ival-div",1600],[0.07177734375,"ival-assert",0],[1.905517578125,"ival-sub",0],[6.4326171875,"ival-pow",0],[2.532958984375,"adjust",2000],[0.25634765625,"ival-div",1200],[1.228759765625,"ival-add",0],[0.043212890625,"ival-add",1600],[0.341552734375,"ival-div",800],[0.25146484375,"ival-add",400],[0.138427734375,"ival-true",0],[0.289306640625,"ival-div",2000],[8.92431640625,"ival-pow",400],[0.1103515625,"exact",0],[0.176513671875,"ival-add",800]],"outcomes":[[2.38916015625,1,"valid",9],[43.82763671875,2,"valid",77],[3.4287109375,0,"exit",31],[0.2041015625,1,"exit",1],[3.61328125,0,"valid",42]],"stop":[["narrow-enough",1],["narrow-enough",1],["narrow-enough",1],["narrow-enough",1]],"time":69.7919921875,"type":"bsearch"},{"bstep":[[1.609130859375,4.931773108866831e+169,5.384227234643463e+173],[1.2958984375,1.6223145968162966e-133,2.7421575619914144e-127]],"compiler":[[56,35],[35,24],[56,35],[35,24],[56,35],[35,24],[56,35],[35,24],[56,35],[35,24],[56,35],[35,24],[56,35],[35,24],[56,35],[35,24],[35,24],[27,18],[35,24],[27,18],[35,24],[27,18],[35,24],[27,18],[35,24],[27,18],[35,24],[27,18],[35,24],[27,18],[35,24],[27,18],[35,24],[27,18],[15,11],[1,2]],"memory":[[1756496,1756496]],"method":["binary-search","binary-search"],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":3.58984375,"type":"bsearch"},{"bstep":[[1.446044921875,4.931773108866831e+169,5.384227234643463e+173]],"compiler":[[56,35],[35,24],[56,35],[35,24],[56,35],[35,24],[56,35],[35,24],[56,35],[35,24],[56,35],[35,24],[56,35],[35,24],[56,35],[35,24],[15,11],[1,2]],"memory":[[966064,966064]],"method":["binary-search"],"stop":[["narrow-enough",1]],"time":1.927978515625,"type":"bsearch"},{"bstep":[[1.29296875,4.931773108866831e+169,5.384227234643463e+173]],"compiler":[[56,35],[27,18],[56,35],[27,18],[56,35],[27,18],[56,35],[27,18],[56,35],[27,18],[56,35],[27,18],[56,35],[27,18],[56,35],[27,18],[15,11],[1,2]],"memory":[[847104,847104]],"method":["binary-search"],"stop":[["narrow-enough",1]],"time":1.718994140625,"type":"bsearch"},{"memory":[[-5030192,4760320]],"time":5.775146484375,"type":"simplify"},{"memory":[[1936,1936]],"time":0.010009765625,"type":"end"}]