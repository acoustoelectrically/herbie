[{"memory":[[19296,19296]],"time":0.033935546875,"type":"start"},{"compiler":[[20,13]],"memory":[[1153072,1153072]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.5,"unknown":0.00024414062500000005,"valid":0.499755859375}],[11,{"invalid":0.0,"precondition":0.5,"unknown":0.00048828125,"valid":0.49951171875}],[10,{"invalid":0.0,"precondition":0.5,"unknown":0.0009765625,"valid":0.4990234375}],[9,{"invalid":0.0,"precondition":0.5,"unknown":0.001953125,"valid":0.498046875}],[8,{"invalid":0.0,"precondition":0.5,"unknown":0.00390625,"valid":0.49609375}],[7,{"invalid":0.0,"precondition":0.5,"unknown":0.0078125,"valid":0.4921875}],[6,{"invalid":0.0,"precondition":0.5,"unknown":0.015625,"valid":0.484375}],[5,{"invalid":0.0,"precondition":0.5,"unknown":0.03125,"valid":0.46875}],[4,{"invalid":0.0,"precondition":0.5,"unknown":0.0625,"valid":0.4375}],[3,{"invalid":0.0,"precondition":0.5,"unknown":0.125,"valid":0.375}],[2,{"invalid":0.0,"precondition":0.5,"unknown":0.25,"valid":0.25}],[1,{"invalid":0.0,"precondition":0.5,"unknown":0.5,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.5,"unknown":0.5,"valid":0.0}]],"time":4.14990234375,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.5,"valid":0.5}],"memory":[[12982672,468780736]],"mixsample":[[232.833251953125,"ival-div",0],[323.503662109375,"adjust",800],[250.580322265625,"ival-div",400],[2.67041015625,"ival-sub",1600],[5.572998046875,"ival-assert",0],[9.892822265625,"ival-div",1600],[103.49755859375,"ival-sub",0],[98.20751953125,"ival-sub",400],[20.101806640625,"adjust",2000],[0.04541015625,"ival-div",2800],[166.23583984375,"ival-add",0],[72.310791015625,"ival-fabs",0],[61.3671875,"ival-add",400],[0.0078125,"ival-sub",2800],[28.898193359375,"ival->",0],[12.4765625,"exact",0],[0.0595703125,"ival-add",800]],"outcomes":[[1515.03759765625,1,"valid",7290],[160.84228515625,2,"valid",529],[41.594482421875,0,"valid",437]],"time":2183.05908203125,"type":"sample"},{"compiler":[[15,10],[48,12],[48,12]],"confusion":[[99,1,0,156]],"explanations":[["+.f64","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","cancellation",99,1,[],[[]]]],"fperrors":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))",99,0,false,0,false],["(+.f64 x #s(literal 1 binary64))",0,0,false,0,false],["(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))",0,0,false,0,false],["(/.f64 #s(literal 2 binary64) x)",0,0,false,0,false],["(-.f64 x #s(literal 1 binary64))",0,0,false,0,false],["#s(literal 2 binary64)",0,0,false,0,false],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x))",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,99],[0,157]],"maybe-confusion":[[99,1,0,0,0,156]],"memory":[[4698816,79505632]],"mixsample":[[17.4697265625,"adjust",800],[13.0234375,"ival-div",0],[8.339599609375,"ival-add",0],[0.073974609375,"ival-sub",1600],[12.244873046875,"ival-div",400],[0.59423828125,"ival-div",1600],[0.269775390625,"ival-assert",0],[2.81494140625,"ival-add",400],[6.908447265625,"ival-sub",0],[0.64111328125,"ival-true",0],[5.1142578125,"ival-sub",400],[0.694580078125,"exact",0],[0.9130859375,"adjust",2000]],"outcomes":[[90.986572265625,1,"valid",456],[7.52734375,2,"valid",26],[2.625732421875,0,"valid",30]],"time":194.15087890625,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[15,10]],"egraph":[[0,592,15,0.002484809],[8,592,15,0.004419488],[7,521,15,0.003901309],[6,399,15,0.003465789],[5,248,15,0.002216536],[4,134,15,0.001166869],[3,74,15,0.0005456],[2,46,15,0.000291229],[1,28,15,0.000215272],[0,17,15,0.000210666],[0,10,15,0.000171209],[7,608,30,0.003622541],[6,600,30,0.003450783],[5,556,30,0.004440205],[4,441,30,0.004239981],[3,223,30,0.002430164],[2,87,30,0.000941041],[1,32,32,0.000315648],[0,12,37,0.000186069]],"inputs":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))"]],"memory":[[-277680,7304112]],"method":["egg-herbie"],"outputs":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 (-.f64 (/.f64 #s(literal -2 binary64) x) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal -1 binary64)))) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64))))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1],["saturated",1]],"symmetry":[["(negabs x)"]],"time":63.203125,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[43648,43648]],"time":0.099853515625,"type":"eval"},{"alts":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","next",21.974516273377972,"binary64"]],"compiler":[[15,10]],"memory":[[319072,319072]],"time":0.43310546875,"type":"prune"},{"egraph":[[0,592,46,0.002193239],[8,592,46,0.003684786],[7,521,46,0.004433043],[6,399,46,0.004016328],[5,248,46,0.00240215],[4,134,46,0.001292247],[3,74,46,0.0005578],[2,46,46,0.000301145],[1,28,46,0.000221882],[0,17,46,0.00023752],[0,10,46,0.00012167]],"inputs":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","#s(literal 1 binary64)","(+.f64 x #s(literal 1 binary64))","x","(/.f64 #s(literal 2 binary64) x)","#s(literal 2 binary64)","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","(-.f64 x #s(literal 1 binary64))"]],"locations":[["(+.f64 x #s(literal 1 binary64))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","cost-diff",0],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x))","cost-diff",0],["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","cost-diff",0]],"memory":[[2054064,2054064]],"method":["egg-herbie"],"outputs":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 (-.f64 (/.f64 #s(literal -2 binary64) x) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal -1 binary64)))) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x))","(-.f64 (/.f64 #s(literal -2 binary64) x) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal -1 binary64)))","#s(literal 1 binary64)","(+.f64 x #s(literal 1 binary64))","(-.f64 x #s(literal -1 binary64))","x","(/.f64 #s(literal 2 binary64) x)","#s(literal 2 binary64)","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","(-.f64 x #s(literal 1 binary64))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":28.952880859375,"type":"simplify"},{"compiler":[[48,12]],"locations":[["(-.f64 x #s(literal 1 binary64))","accuracy",0.0],["(+.f64 x #s(literal 1 binary64))","accuracy",0.0],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x))","accuracy",0.03515625],["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","accuracy",22.02287366324311]],"memory":[[-1010800,16700784]],"mixsample":[[7.904541015625,"adjust",800],[6.299560546875,"ival-div",0],[4.037841796875,"ival-add",0],[0.0283203125,"ival-sub",1600],[11.102294921875,"ival-div",400],[0.15234375,"ival-div",1600],[0.11865234375,"ival-assert",0],[1.47607421875,"ival-add",400],[2.7578125,"ival-sub",0],[0.189697265625,"ival-true",0],[2.302734375,"ival-sub",400],[0.280517578125,"exact",0],[0.37158203125,"adjust",2000]],"outcomes":[[47.68359375,1,"valid",228],[3.4755859375,2,"valid",13],[1.03759765625,0,"valid",15]],"time":62.76318359375,"type":"localize"},{"count":[[5,37]],"inputs":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(-.f64 x #s(literal 1 binary64))"]],"memory":[[1267280,1267280]],"outputs":[["(/ -2 x)","(/ (- (* -2 (pow x 2)) 2) x)","(/ (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2) x)","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2)) 2) x)","(/ (- x 2) x)","(/ (- (* x (+ 1 (* -1 x))) 2) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 2) x)","1","(+ 1 (* -1 x))","(+ 1 (* x (- x 1)))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(+ 1 x)","-1","(- x 1)","(/ 2 (pow x 3))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))) (pow x 3))","(/ -1 x)","(* -1 (/ (+ 1 (/ 1 x)) x))","(/ (- (/ 1 (pow x 2)) (+ 1 (/ 1 x))) x)","(/ (- (/ 1 (pow x 2)) (+ 1 (+ (/ 1 x) (/ 1 (pow x 3))))) x)","(/ 1 x)","(/ (- 1 (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","x","(* x (+ 1 (/ 1 x)))","(* x (- 1 (/ 1 x)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 2))) 2) (pow x 3)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 4))) (+ 2 (* 2 (/ 1 (pow x 2))))) (pow x 3)))","(* -1 (/ (+ 1 (* -1 (/ (- (/ 1 x) 1) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))) x))","(* -1 (/ (- (/ 1 x) 1) x))","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(* -1 (* x (- (/ 1 x) 1)))"]],"series":[[0.930908203125,"((+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (+ x 1)) (+ x 1) (- x 1))","x","-inf"],[1.372802734375,"((+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (+ x 1)) (+ x 1) (- x 1))","x","inf"],[0.90087890625,"((+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (+ x 1)) (+ x 1) (- x 1))","x","0"]],"time":3.751953125,"type":"series"},{"count":[[37,36]],"egraph":[[0,8077,313,0.066118309],[4,6992,319,0.019786206],[3,2230,319,0.0288506],[2,701,332,0.007170415],[1,268,353,0.002109289],[0,102,373,0.000981309]],"inputs":[["(/ -2 x)","(/ (- (* -2 (pow x 2)) 2) x)","(/ (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2) x)","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2)) 2) x)","(/ (- x 2) x)","(/ (- (* x (+ 1 (* -1 x))) 2) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 2) x)","1","(+ 1 (* -1 x))","(+ 1 (* x (- x 1)))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(+ 1 x)","-1","(- x 1)","(/ 2 (pow x 3))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))) (pow x 3))","(/ -1 x)","(* -1 (/ (+ 1 (/ 1 x)) x))","(/ (- (/ 1 (pow x 2)) (+ 1 (/ 1 x))) x)","(/ (- (/ 1 (pow x 2)) (+ 1 (+ (/ 1 x) (/ 1 (pow x 3))))) x)","(/ 1 x)","(/ (- 1 (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","x","(* x (+ 1 (/ 1 x)))","(* x (- 1 (/ 1 x)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 2))) 2) (pow x 3)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 4))) (+ 2 (* 2 (/ 1 (pow x 2))))) (pow x 3)))","(* -1 (/ (+ 1 (* -1 (/ (- (/ 1 x) 1) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))) x))","(* -1 (/ (- (/ 1 x) 1) x))","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(* -1 (* x (- (/ 1 x) 1)))"]],"memory":[[-19127824,32014176]],"method":["egg-herbie"],"outputs":[["(/ -2 x)","(/.f64 #s(literal -2 binary64) x)","(/ (- (* -2 (pow x 2)) 2) x)","(fma.f64 #s(literal -2 binary64) x (/.f64 #s(literal -2 binary64) x))","(/ (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2) x)","(fma.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) x) #s(literal -2 binary64) (/.f64 #s(literal -2 binary64) x))","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2)) 2) x)","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (fma.f64 (*.f64 x x) #s(literal -2 binary64) #s(literal -2 binary64))) x)","(/ (- x 2) x)","(/.f64 (-.f64 x #s(literal 2 binary64)) x)","(/ (- (* x (+ 1 (* -1 x))) 2) x)","(-.f64 (/.f64 (-.f64 x #s(literal 2 binary64)) x) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 2) x)","(fma.f64 (-.f64 x #s(literal 1 binary64)) x (/.f64 (-.f64 x #s(literal 2 binary64)) x))","1","#s(literal 1 binary64)","(+ 1 (* -1 x))","(-.f64 #s(literal 1 binary64) x)","(+ 1 (* x (- x 1)))","(fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","-1","#s(literal -1 binary64)","(- x 1)","(-.f64 x #s(literal 1 binary64))","(/ 2 (pow x 3))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 3))","(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))) (pow x 3))","(/.f64 (-.f64 (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64)) (/.f64 (/.f64 #s(literal -2 binary64) x) x)) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))) (pow x 3))","(/.f64 (-.f64 (+.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 6 binary64))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 #s(literal -2 binary64) (/.f64 #s(literal 2 binary64) (*.f64 x x)))) (pow.f64 x #s(literal 3 binary64)))","(/ -1 x)","(/.f64 #s(literal -1 binary64) x)","(* -1 (/ (+ 1 (/ 1 x)) x))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)","(/ (- (/ 1 (pow x 2)) (+ 1 (/ 1 x))) x)","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x)","(/ (- (/ 1 (pow x 2)) (+ 1 (+ (/ 1 x) (/ 1 (pow x 3))))) x)","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x)","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ (- 1 (/ 1 x)) x)","(/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x) #s(literal -1 binary64)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal -1 binary64)) x)","x","(* x (+ 1 (/ 1 x)))","(+.f64 #s(literal 1 binary64) x)","(* x (- 1 (/ 1 x)))","(-.f64 x #s(literal 1 binary64))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 2))) 2) (pow x 3)))","(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64))))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 4))) (+ 2 (* 2 (/ 1 (pow x 2))))) (pow x 3)))","(/.f64 (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (/ (+ 1 (* -1 (/ (- (/ 1 x) 1) x))) x))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x)","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))) x))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x)","(* -1 (/ (- (/ 1 x) 1) x))","(/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x) #s(literal -1 binary64)) x)","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal -1 binary64)) x)","(* -1 (* x (- (/ 1 x) 1)))","(-.f64 x #s(literal 1 binary64))"]],"stop":[["iter limit",1],["node limit",1]],"time":247.49609375,"type":"simplify"},{"count":[[5,441]],"egraph":[[0,8514,32,0.09998022],[2,1095,35,0.030129828],[1,94,35,0.003556769],[0,17,35,0.0009638],[0,10,35,0.000134408]],"inputs":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(-.f64 x #s(literal 1 binary64))"]],"memory":[[4928288,69405616]],"outputs":[["(*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64))) (pow.f64 (+.f64 (/.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (fma.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (*.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (/.f64 #s(literal 2 binary64) x)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))) (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))) (fma.f64 (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))) (*.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))))))","(/.f64 (+.f64 (pow.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal 3 binary64)) (*.f64 #s(literal -8 binary64) (pow.f64 x #s(literal -3 binary64)))) (fma.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (*.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (/.f64 #s(literal -2 binary64) x)))))","(/.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (*.f64 (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))))","(/.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (*.f64 (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)))) (neg.f64 (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))) (neg.f64 (neg.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (+.f64 (/.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)))))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)))))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64)))) (neg.f64 (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal 1 binary64)))) (neg.f64 (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal -1 binary64)))) (neg.f64 (*.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal 1 binary64)))) (neg.f64 (*.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal -1 binary64)))) (neg.f64 (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)))) (neg.f64 (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (+.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) x))","(/.f64 (fma.f64 #s(literal -1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (neg.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (neg.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (neg.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 x)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -2 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 2 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64))) (+.f64 x #s(literal 1 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))))","(/.f64 (+.f64 x (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) x))","(/.f64 (fma.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)))))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (neg.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x)) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (neg.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x)) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 x)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -2 binary64))))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (-.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 2 binary64))))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64))))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x)) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64))) (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (*.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))))","(/.f64 (+.f64 x (*.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))))) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(/.f64 (fma.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x)) (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x)) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 x)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -2 binary64))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 2 binary64))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x)) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64))) (+.f64 x #s(literal 1 binary64))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))))","(/.f64 (fma.f64 (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 x #s(literal -1 binary64))) (*.f64 x (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) x) (*.f64 x (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) x) (*.f64 x (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)) #s(literal -1 binary64))) (*.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)))) #s(literal -1 binary64))) (*.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (*.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)))) #s(literal 1 binary64))) (*.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)))) #s(literal 1 binary64))) (*.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)))) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (neg.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))) #s(literal -1 binary64))) (*.f64 (neg.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))) #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (neg.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))) #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) #s(literal -1 binary64))) (*.f64 (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (neg.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (neg.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (neg.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (*.f64 (neg.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x)) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (neg.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))) (-.f64 x #s(literal 1 binary64)) (*.f64 (neg.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 x)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x)) #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 x)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -2 binary64))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x)) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 x)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -2 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x) #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 2 binary64))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (-.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64))) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x)) #s(literal -1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x)) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64))) (+.f64 x #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x #s(literal 1/2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64))) (+.f64 x #s(literal 1 binary64))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x #s(literal 1/2 binary64))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64))) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x #s(literal 1/2 binary64))) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal 1 binary64))) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (*.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))) #s(literal -1 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))) (-.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64))) (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (neg.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (/.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64))) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal 1 binary64))) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal -1 binary64))) (*.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal -1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64))))))","(/.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64))) (+.f64 (/.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))) (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))) (fma.f64 #s(literal -1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (fma.f64 #s(literal -1 binary64) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x)) (fma.f64 #s(literal -1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))) (fma.f64 #s(literal 1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (fma.f64 #s(literal 1 binary64) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x)) (fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 x #s(literal 1 binary64))) (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (-.f64 x #s(literal 1 binary64))) (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64))))) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64))) (/.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64))) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))) (/.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64))) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64))) (/.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64))) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 x #s(literal 1 binary64))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64))) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 x #s(literal 1 binary64))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))) (/.f64 (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))) (/.f64 (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64))) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (pow.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64))) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 x #s(literal 1 binary64))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 x #s(literal 1 binary64))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(-.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))) (/.f64 (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(-.f64 (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))) (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))))","(-.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))) (/.f64 (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 3 binary64)) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))))","(-.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (/.f64 #s(literal 2 binary64) x))","(-.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (/.f64 #s(literal -2 binary64) x))","(+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(+.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (pow.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))) (fma.f64 (/.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))) (/.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))) (*.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))) (/.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (fma.f64 (/.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (/.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (*.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (/.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 x (*.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 x (*.f64 (+.f64 x #s(literal 1 binary64)) x)) (/.f64 x (*.f64 (+.f64 x #s(literal 1 binary64)) x)) (fma.f64 (*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (*.f64 (/.f64 x (*.f64 (+.f64 x #s(literal 1 binary64)) x)) (*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))))))","(/.f64 (fma.f64 #s(literal -8 binary64) (pow.f64 x #s(literal -3 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (neg.f64 (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64)))) (neg.f64 x))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))))) (neg.f64 (neg.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 x)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -2 binary64)))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (-.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 2 binary64)))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (neg.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64))) (+.f64 x #s(literal 1 binary64)))) (neg.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (fma.f64 #s(literal -2 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 (neg.f64 (neg.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 x)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 x)) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 x #s(literal 1 binary64)) (*.f64 (neg.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 x)) (+.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal -2 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal -1 binary64))) (*.f64 x (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) x) (*.f64 x (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 x #s(literal 1 binary64)) x) (*.f64 (+.f64 x #s(literal 1 binary64)) x))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 (*.f64 x #s(literal 1/2 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 x #s(literal 1/2 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (*.f64 x #s(literal 1/2 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 x #s(literal 1/2 binary64)) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 x #s(literal 1/2 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 x #s(literal 1/2 binary64)) (+.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 2 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 (neg.f64 x) #s(literal -1 binary64))) (*.f64 (neg.f64 x) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal 2 binary64) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) (+.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 (neg.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (*.f64 x #s(literal 1/2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (neg.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (*.f64 x #s(literal 1/2 binary64))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)) (*.f64 (neg.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (*.f64 x #s(literal 1/2 binary64))) (+.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 x)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) x (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 x #s(literal 1/2 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (*.f64 x #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 x)) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) #s(literal -2 binary64))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (neg.f64 (neg.f64 x))))","(/.f64 (+.f64 x (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) #s(literal -2 binary64))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) x))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64)) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 x #s(literal 1/2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 x) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) #s(literal 2 binary64))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (neg.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (*.f64 x #s(literal 1/2 binary64))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (neg.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 x)) (*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 (neg.f64 x))))","(/.f64 (+.f64 x (*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (*.f64 (+.f64 x #s(literal 1 binary64)) x))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x #s(literal 1/2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 x) (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (*.f64 x #s(literal 1/2 binary64))) (+.f64 x #s(literal 1 binary64))) (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))) x)","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))))","(/.f64 (neg.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))) (neg.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 x)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64))) (+.f64 x #s(literal 1 binary64))) (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x #s(literal 1/2 binary64))))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)))))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))","(/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (*.f64 (+.f64 x #s(literal 1 binary64)) x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 x (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x)) (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 x)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x) (-.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64))) (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x)) (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x #s(literal 1/2 binary64))) (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64))) (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (/.f64 #s(literal -2 binary64) x))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64))) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 x #s(literal 1 binary64))) (/.f64 #s(literal -2 binary64) x))","(fma.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))) (/.f64 (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64))) (/.f64 #s(literal -2 binary64) x))","(fma.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -2 binary64) x))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal -2 binary64) x))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -2 binary64) x))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal -2 binary64) x))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)) (/.f64 #s(literal -2 binary64) x))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (/.f64 #s(literal -2 binary64) x))","(fma.f64 #s(literal -2 binary64) (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal -2 binary64) x))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 x #s(literal 1 binary64))) (/.f64 #s(literal -2 binary64) x))","(fma.f64 #s(literal 2 binary64) (neg.f64 (pow.f64 x #s(literal -1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64) (/.f64 #s(literal -2 binary64) x))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x))","(-.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x))) (/.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x))))","(-.f64 (/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 x)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x))) (/.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -2 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x))))","(-.f64 (/.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x)) (/.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x)))","(-.f64 (/.f64 (*.f64 #s(literal -1 binary64) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64)))) (/.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64)))))","(-.f64 (/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))) (/.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))))","(-.f64 (/.f64 (*.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x #s(literal 1/2 binary64)))) (/.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x #s(literal 1/2 binary64)))))","(-.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))) (/.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))))","(-.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (/.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))))","(-.f64 (/.f64 x (*.f64 (+.f64 x #s(literal 1 binary64)) x)) (*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))))","(-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))","(+.f64 (/.f64 #s(literal -2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x))","(*.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64))) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))) (/.f64 (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))))","(*.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 x #s(literal 1 binary64))))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(pow.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))","(/.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (neg.f64 (fma.f64 x x #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(neg.f64 (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))))","(-.f64 (/.f64 (/.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (fma.f64 x x #s(literal -1 binary64))))","(-.f64 (/.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64)))) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(-.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(exp.f64 (neg.f64 (log1p.f64 x)))","(*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (-.f64 x #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64))","(pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (fma.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) #s(literal 1 binary64))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) x))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) x)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 x #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) x #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)))","(-.f64 (/.f64 (*.f64 x x) (*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))))","(-.f64 (/.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(exp.f64 (log1p.f64 x))","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) x)","(*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64)))))","(*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))))","(pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (/.f64 x #s(literal 1 binary64)) (/.f64 x #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (*.f64 (/.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (fma.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))) (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64)))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64)))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64)))) (fma.f64 (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64)))) (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) (neg.f64 x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) #s(literal 1 binary64))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (*.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (-.f64 x #s(literal -1 binary64))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x x (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64)))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 x x (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (fma.f64 x x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x x (+.f64 x #s(literal 1 binary64)))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1 binary64)))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 x #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) x #s(literal -1 binary64))","(-.f64 (/.f64 (*.f64 x x) (*.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 x x (+.f64 x #s(literal 1 binary64))))) (/.f64 #s(literal 1 binary64) (*.f64 #s(literal 1 binary64) (fma.f64 x x (+.f64 x #s(literal 1 binary64))))))","(-.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1 binary64))))) (/.f64 #s(literal 1 binary64) (fma.f64 x x (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1 binary64))))))","(-.f64 (/.f64 (/.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 (/.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64)))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(-.f64 (/.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))","(-.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64)))) (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 x #s(literal 1 binary64))","(exp.f64 (log.f64 (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(literal -1 binary64) x)","(+.f64 x #s(literal -1 binary64))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":281.90185546875,"type":"rewrite"},{"compiler":[[14474,1719]],"memory":[[218992,44769424]],"time":58.583984375,"type":"eval"},{"alts":[["(fma.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64))) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","fresh",61.64112245325401,"binary64"],["(/.f64 (fma.f64 (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) x) (*.f64 x (-.f64 x #s(literal 1 binary64))))","fresh",22.20674712377504,"binary64"],["(/.f64 (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))))","fresh",53.75035273896332,"binary64"],["(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x)))","next",52.77931833419441,"binary64"],["(/.f64 (+.f64 x (*.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))))) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","fresh",22.2919796197341,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)))))","fresh",53.75035273896332,"binary64"],["(+.f64 (/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 x #s(literal 1 binary64)) x) (*.f64 (+.f64 x #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","next",54.59867912500178,"binary64"],["(+.f64 (-.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","fresh",54.50263263396452,"binary64"],["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","fresh",51.49545653997593,"binary64"],["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","done",21.974516273377972,"binary64"],["(+.f64 (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","fresh",61.50074184680773,"binary64"],["(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","fresh",22.727153271081576,"binary64"],["(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","fresh",22.676412544415697,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 3 binary64))))","fresh",0.7343580845170856,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","next",1.0794773132120512,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))","next",60.79444651831434,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))))","next",0.606561794705476,"binary64"]],"compiler":[[22,16],[22,11],[28,12],[28,12],[23,12],[30,13],[18,10],[18,11],[20,12],[15,10],[17,12],[23,16],[19,14],[27,19],[21,15],[19,13],[33,23],[22,16],[22,11],[28,12],[28,12],[23,12],[30,13],[18,10],[18,11],[20,12],[17,12],[23,16],[19,14],[27,19],[21,15],[19,13],[33,23]],"count":[[470,17]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[469,16],"picked":[1,1]}],"memory":[[-8540192,24592416]],"min-error":[[0.42612940213838807,"binary64"]],"time":56.99609375,"type":"prune"},{"egraph":[[0,8235,227,0.083979419],[5,7015,236,0.025826043],[4,2329,254,0.026236198],[3,718,256,0.010010836],[2,259,262,0.002662032],[1,120,274,0.000919055],[0,64,274,0.000686782],[0,39,295,0.000397637]],"inputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))))","(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64)))","(-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","#s(literal 2 binary64)","(*.f64 x x)","x","#s(literal -2 binary64)","(pow.f64 x #s(literal 5 binary64))","#s(literal 5 binary64)","(/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))","(pow.f64 x #s(literal 3 binary64))","#s(literal 3 binary64)","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))","(/.f64 #s(literal -2 binary64) x)","#s(literal -2 binary64)","x","(+.f64 (/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 x #s(literal 1 binary64)) x) (*.f64 (+.f64 x #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 x #s(literal 1 binary64)) x) (*.f64 (+.f64 x #s(literal 1 binary64)) x))","(fma.f64 #s(literal -2 binary64) (+.f64 x #s(literal 1 binary64)) x)","#s(literal -2 binary64)","(+.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(*.f64 (+.f64 x #s(literal 1 binary64)) x)","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","(-.f64 x #s(literal 1 binary64))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x)))","(fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))))","#s(literal 1 binary64)","(*.f64 (+.f64 x #s(literal 1 binary64)) x)","(+.f64 x #s(literal 1 binary64))","x","(*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))))","(-.f64 x #s(literal 1 binary64))","(-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))","(*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))","#s(literal 2 binary64)","(*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))","#s(literal 2 binary64)","(pow.f64 x #s(literal 3 binary64))","x","#s(literal 3 binary64)"]],"locations":[["(pow.f64 x #s(literal 3 binary64))","cost-diff",0],["(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))","cost-diff",0],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","cost-diff",0],["(*.f64 (+.f64 x #s(literal 1 binary64)) x)","cost-diff",1],["(*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x))","cost-diff",3],["(-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))","cost-diff",3],["(fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))))","cost-diff",11],["(/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 x #s(literal 1 binary64)) x) (*.f64 (+.f64 x #s(literal 1 binary64)) x))","cost-diff",0],["(+.f64 (/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 x #s(literal 1 binary64)) x) (*.f64 (+.f64 x #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","cost-diff",0],["(*.f64 (+.f64 x #s(literal 1 binary64)) x)","cost-diff",1],["(fma.f64 #s(literal -2 binary64) (+.f64 x #s(literal 1 binary64)) x)","cost-diff",3],["(/.f64 #s(literal -2 binary64) x)","cost-diff",0],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))","cost-diff",0],["(-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64))","cost-diff",0],["(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64)))","cost-diff",0],["(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64))))","cost-diff",0],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))))","cost-diff",0]],"memory":[[9314000,38169120]],"method":["egg-herbie"],"outputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))))","(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64))))","(-.f64 (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64)))","(/.f64 (-.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64)))","(-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64))","(-.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal -2 binary64))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(/.f64 (/.f64 #s(literal 2 binary64) x) x)","#s(literal 2 binary64)","(*.f64 x x)","x","#s(literal -2 binary64)","(pow.f64 x #s(literal 5 binary64))","#s(literal 5 binary64)","(/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))","(pow.f64 x #s(literal 3 binary64))","#s(literal 3 binary64)","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))","(/.f64 #s(literal -2 binary64) x)","#s(literal -2 binary64)","x","(+.f64 (/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 x #s(literal 1 binary64)) x) (*.f64 (+.f64 x #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 (/.f64 (-.f64 #s(literal -2 binary64) x) (fma.f64 x x x)) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 x #s(literal 1 binary64)) x) (*.f64 (+.f64 x #s(literal 1 binary64)) x))","(/.f64 (-.f64 #s(literal -2 binary64) x) (fma.f64 x x x))","(fma.f64 #s(literal -2 binary64) (+.f64 x #s(literal 1 binary64)) x)","(-.f64 #s(literal -2 binary64) x)","#s(literal -2 binary64)","(+.f64 x #s(literal 1 binary64))","(-.f64 x #s(literal -1 binary64))","x","#s(literal 1 binary64)","(*.f64 (+.f64 x #s(literal 1 binary64)) x)","(fma.f64 x x x)","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","(-.f64 x #s(literal 1 binary64))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 #s(literal 2 binary64) (-.f64 (pow.f64 x #s(literal 3 binary64)) x))","(fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))))","#s(literal 2 binary64)","#s(literal 1 binary64)","(*.f64 (+.f64 x #s(literal 1 binary64)) x)","(fma.f64 x x x)","(+.f64 x #s(literal 1 binary64))","(-.f64 x #s(literal -1 binary64))","x","(*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (-.f64 #s(literal -1 binary64) x) x #s(literal 2 binary64))","(-.f64 x #s(literal 1 binary64))","(-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))","(-.f64 #s(literal -2 binary64) x)","(*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))","(fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64))","#s(literal 2 binary64)","(*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x))","(-.f64 (pow.f64 x #s(literal 3 binary64)) x)","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))","#s(literal 2 binary64)","(pow.f64 x #s(literal 3 binary64))","x","#s(literal 3 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":243.9140625,"type":"simplify"},{"compiler":[[274,37]],"locations":[["(pow.f64 x #s(literal 3 binary64))","accuracy",0.0078125],["(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))","accuracy",0.43394190213838807],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","accuracy",0.6533479274333495],["(*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x))","accuracy",0.11328125],["(-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))","accuracy",0.2009409875659575],["(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x)))","accuracy",0.43394190213838807],["(fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))))","accuracy",60.30434069830073],["(+.f64 x #s(literal 1 binary64))","accuracy",0.0],["(*.f64 (+.f64 x #s(literal 1 binary64)) x)","accuracy",0.0],["(+.f64 (/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 x #s(literal 1 binary64)) x) (*.f64 (+.f64 x #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","accuracy",22.02287366324311],["(/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 x #s(literal 1 binary64)) x) (*.f64 (+.f64 x #s(literal 1 binary64)) x))","accuracy",29.46603010613482],["(/.f64 #s(literal -2 binary64) x)","accuracy",0.0],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))","accuracy",60.79444651831434],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))))","accuracy",0.17262243166490213],["(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64)))","accuracy",0.42797651256387303],["(/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))","accuracy",0.43394190213838807],["(/.f64 #s(literal 2 binary64) (*.f64 x x))","accuracy",0.9066406384198347]],"memory":[[-1121488,56960416]],"mixsample":[[0.35986328125,"ival-add",1200],[0.533203125,"ival-sub",1200],[21.94091796875,"adjust",800],[21.609619140625,"ival-div",0],[1.09716796875,"ival-mult",1200],[0.46142578125,"ival-sub",1600],[7.902099609375,"ival-div",400],[0.43017578125,"ival-sub",2000],[1.56494140625,"ival-mult",2000],[0.25537109375,"ival-div",1600],[0.128173828125,"ival-assert",0],[7.36572265625,"ival-sub",0],[1.17578125,"ival-sub",400],[1.098876953125,"adjust",2000],[14.9541015625,"ival-pow",0],[0.288818359375,"ival-sub",2400],[10.522705078125,"ival-add",0],[1.337158203125,"ival-mult",800],[0.37109375,"ival-add",1600],[0.500244140625,"ival-sub",800],[2.004638671875,"ival-mult",400],[12.76220703125,"ival-mult",0],[1.3994140625,"ival-mult",1600],[0.348876953125,"ival-add",2000],[1.193603515625,"ival-add",400],[0.241943359375,"ival-true",0],[0.8369140625,"ival-mult",2400],[0.229248046875,"ival-add",2400],[0.483642578125,"ival-add",800],[0.703125,"exact",0]],"outcomes":[[141.628173828125,1,"valid",239],[10.26416015625,2,"valid",13],[1.37841796875,0,"valid",4]],"time":193.47900390625,"type":"localize"},{"count":[[20,44]],"inputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))))","(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64)))","(-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))","(/.f64 #s(literal -2 binary64) x)","(fma.f64 #s(literal -2 binary64) (+.f64 x #s(literal 1 binary64)) x)","(*.f64 (+.f64 x #s(literal 1 binary64)) x)","(+.f64 (/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 x #s(literal 1 binary64)) x) (*.f64 (+.f64 x #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 x #s(literal 1 binary64)) x) (*.f64 (+.f64 x #s(literal 1 binary64)) x))","(fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))))","(-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))","(*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))","(pow.f64 x #s(literal 3 binary64))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))","(+.f64 x #s(literal 1 binary64))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x)))"]],"memory":[[358736,7909920]],"outputs":[["(/ -2 x)","(/ (- (* -2 (pow x 2)) 2) x)","(/ (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2) x)","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2)) 2) x)","(/ 2 (pow x 7))","(/ (+ 2 (* 2 (pow x 2))) (pow x 7))","(/ (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2))))) (pow x 7))","(/ 2 (pow x 2))","(/ (+ 2 (* 2 (pow x 2))) (pow x 2))","-2","(- (* -1 x) 2)","x","(* x (+ 1 x))","(/ (- x 2) x)","(/ (- (* x (+ 1 (* -1 x))) 2) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 2) x)","2","(* -1 x)","(* x (- (pow x 2) 1))","(/ 2 (pow x 3))","(pow x 3)","(/ -2 (pow x 3))","1","(+ 1 x)","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))) (pow x 3))","(/ 2 (pow x 5))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 5))","(+ 2 (* 2 (/ 1 (pow x 2))))","(* -1 (* x (+ 1 (* 2 (/ 1 x)))))","(pow x 2)","(* (pow x 2) (+ 1 (/ 1 x)))","(/ -1 x)","(* -1 (/ (+ 1 (/ 1 x)) x))","(/ (- (/ 1 (pow x 2)) (+ 1 (/ 1 x))) x)","(/ (- (/ 1 (pow x 2)) (+ 1 (+ (/ 1 x) (/ 1 (pow x 3))))) x)","(* (pow x 3) (- 1 (/ 1 (pow x 2))))","(* x (+ 1 (/ 1 x)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 2))) 2) (pow x 3)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 4))) (+ 2 (* 2 (/ 1 (pow x 2))))) (pow x 3)))","(* -1 (/ (+ 1 (* -1 (/ (- (/ 1 x) 1) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))) x))","(* -1 (* (pow x 3) (- (/ 1 (pow x 2)) 1)))"]],"series":[[4.52099609375,"((+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/ -2 (pow x 3))) (/ (- (/ 2 (* x x)) -2) (pow x 5)) (- (/ 2 (* x x)) -2) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ -2 x) (+ (* -2 (+ x 1)) x) (* (+ x 1) x) (+ (/ (+ (* -2 (+ x 1)) x) (* (+ x 1) x)) (/ 1 (- x 1))) (/ (+ (* -2 (+ x 1)) x) (* (+ x 1) x)) (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (- x (* 2 (+ x 1))) (* (- x 1) (* (+ x 1) x)) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ 2 (pow x 3)) (pow x 3) (/ 2 (* x x)) (/ -2 (pow x 3)) (+ x 1) (/ (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (* (- x 1) (* (+ x 1) x))))","x","-inf"],[9.71484375,"((+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/ -2 (pow x 3))) (/ (- (/ 2 (* x x)) -2) (pow x 5)) (- (/ 2 (* x x)) -2) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ -2 x) (+ (* -2 (+ x 1)) x) (* (+ x 1) x) (+ (/ (+ (* -2 (+ x 1)) x) (* (+ x 1) x)) (/ 1 (- x 1))) (/ (+ (* -2 (+ x 1)) x) (* (+ x 1) x)) (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (- x (* 2 (+ x 1))) (* (- x 1) (* (+ x 1) x)) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ 2 (pow x 3)) (pow x 3) (/ 2 (* x x)) (/ -2 (pow x 3)) (+ x 1) (/ (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (* (- x 1) (* (+ x 1) x))))","x","inf"],[5.910888671875,"((+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/ -2 (pow x 3))) (/ (- (/ 2 (* x x)) -2) (pow x 5)) (- (/ 2 (* x x)) -2) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ -2 x) (+ (* -2 (+ x 1)) x) (* (+ x 1) x) (+ (/ (+ (* -2 (+ x 1)) x) (* (+ x 1) x)) (/ 1 (- x 1))) (/ (+ (* -2 (+ x 1)) x) (* (+ x 1) x)) (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (- x (* 2 (+ x 1))) (* (- x 1) (* (+ x 1) x)) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ 2 (pow x 3)) (pow x 3) (/ 2 (* x x)) (/ -2 (pow x 3)) (+ x 1) (/ (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (* (- x 1) (* (+ x 1) x))))","x","0"]],"time":21.475830078125,"type":"series"},{"count":[[44,43]],"egraph":[[0,8254,327,0.087381633],[4,7620,337,0.022035899],[3,3181,337,0.031424099],[2,799,352,0.010486303],[1,293,367,0.002756202],[0,116,385,0.000934377]],"inputs":[["(/ -2 x)","(/ (- (* -2 (pow x 2)) 2) x)","(/ (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2) x)","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2)) 2) x)","(/ 2 (pow x 7))","(/ (+ 2 (* 2 (pow x 2))) (pow x 7))","(/ (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2))))) (pow x 7))","(/ 2 (pow x 2))","(/ (+ 2 (* 2 (pow x 2))) (pow x 2))","-2","(- (* -1 x) 2)","x","(* x (+ 1 x))","(/ (- x 2) x)","(/ (- (* x (+ 1 (* -1 x))) 2) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 2) x)","2","(* -1 x)","(* x (- (pow x 2) 1))","(/ 2 (pow x 3))","(pow x 3)","(/ -2 (pow x 3))","1","(+ 1 x)","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))) (pow x 3))","(/ 2 (pow x 5))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 5))","(+ 2 (* 2 (/ 1 (pow x 2))))","(* -1 (* x (+ 1 (* 2 (/ 1 x)))))","(pow x 2)","(* (pow x 2) (+ 1 (/ 1 x)))","(/ -1 x)","(* -1 (/ (+ 1 (/ 1 x)) x))","(/ (- (/ 1 (pow x 2)) (+ 1 (/ 1 x))) x)","(/ (- (/ 1 (pow x 2)) (+ 1 (+ (/ 1 x) (/ 1 (pow x 3))))) x)","(* (pow x 3) (- 1 (/ 1 (pow x 2))))","(* x (+ 1 (/ 1 x)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 2))) 2) (pow x 3)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 4))) (+ 2 (* 2 (/ 1 (pow x 2))))) (pow x 3)))","(* -1 (/ (+ 1 (* -1 (/ (- (/ 1 x) 1) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))) x))","(* -1 (* (pow x 3) (- (/ 1 (pow x 2)) 1)))"]],"memory":[[-1650816,40449712]],"method":["egg-herbie"],"outputs":[["(/ -2 x)","(/.f64 #s(literal -2 binary64) x)","(/ (- (* -2 (pow x 2)) 2) x)","(fma.f64 #s(literal -2 binary64) x (/.f64 #s(literal -2 binary64) x))","(/ (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2) x)","(fma.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) x) #s(literal -2 binary64) (/.f64 #s(literal -2 binary64) x))","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2)) 2) x)","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (fma.f64 (*.f64 x x) #s(literal -2 binary64) #s(literal -2 binary64))) x)","(/ 2 (pow x 7))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 7 binary64)))","(/ (+ 2 (* 2 (pow x 2))) (pow x 7))","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 7 binary64))))","(/ (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2))))) (pow x 7))","(/.f64 (fma.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal 7 binary64)))","(/ 2 (pow x 2))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(/ (+ 2 (* 2 (pow x 2))) (pow x 2))","(*.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) x) (/.f64 #s(literal 2 binary64) x))","-2","#s(literal -2 binary64)","(- (* -1 x) 2)","(-.f64 #s(literal -2 binary64) x)","x","(* x (+ 1 x))","(fma.f64 x x x)","(/ (- x 2) x)","(/.f64 (-.f64 x #s(literal 2 binary64)) x)","(/ (- (* x (+ 1 (* -1 x))) 2) x)","(-.f64 (/.f64 (-.f64 x #s(literal 2 binary64)) x) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 2) x)","(fma.f64 (-.f64 x #s(literal 1 binary64)) x (/.f64 (-.f64 x #s(literal 2 binary64)) x))","2","#s(literal 2 binary64)","(* -1 x)","(neg.f64 x)","(* x (- (pow x 2) 1))","(-.f64 (pow.f64 x #s(literal 3 binary64)) x)","(/ 2 (pow x 3))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))","(pow x 3)","(pow.f64 x #s(literal 3 binary64))","(/ -2 (pow x 3))","(/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))","1","#s(literal 1 binary64)","(+ 1 x)","(+.f64 x #s(literal 1 binary64))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 3))","(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))) (pow x 3))","(/.f64 (+.f64 (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (*.f64 x x))) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))) (pow x 3))","(/.f64 (+.f64 (+.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 2 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) (/.f64 #s(literal 2 binary64) (*.f64 x x)))) (pow.f64 x #s(literal 3 binary64)))","(/ 2 (pow x 5))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 5))","(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64)))","(+ 2 (* 2 (/ 1 (pow x 2))))","(-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64))","(* -1 (* x (+ 1 (* 2 (/ 1 x)))))","(-.f64 #s(literal -2 binary64) x)","(pow x 2)","(*.f64 x x)","(* (pow x 2) (+ 1 (/ 1 x)))","(fma.f64 x x x)","(/ -1 x)","(/.f64 #s(literal -1 binary64) x)","(* -1 (/ (+ 1 (/ 1 x)) x))","(/.f64 (-.f64 #s(literal -1 binary64) x) (*.f64 x x))","(/ (- (/ 1 (pow x 2)) (+ 1 (/ 1 x))) x)","(/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64)) (*.f64 x x))","(/ (- (/ 1 (pow x 2)) (+ 1 (+ (/ 1 x) (/ 1 (pow x 3))))) x)","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)) x) #s(literal 1 binary64)) x)","(* (pow x 3) (- 1 (/ 1 (pow x 2))))","(-.f64 (pow.f64 x #s(literal 3 binary64)) x)","(* x (+ 1 (/ 1 x)))","(+.f64 x #s(literal 1 binary64))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 2))) 2) (pow x 3)))","(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64))))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 4))) (+ 2 (* 2 (/ 1 (pow x 2))))) (pow x 3)))","(/.f64 (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (/ (+ 1 (* -1 (/ (- (/ 1 x) 1) x))) x))","(/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64)) (*.f64 x x))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))) x))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)) x) #s(literal 1 binary64)) x)","(* -1 (* (pow x 3) (- (/ 1 (pow x 2)) 1)))","(-.f64 (pow.f64 x #s(literal 3 binary64)) x)"]],"stop":[["iter limit",1],["node limit",1]],"time":317.366943359375,"type":"simplify"},{"count":[[20,941]],"egraph":[[0,8222,195,0.076525629],[2,3288,211,0.03532632],[1,316,211,0.009876664],[0,64,222,0.002102121],[0,39,235,0.000362802]],"inputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))))","(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64)))","(-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))","(/.f64 #s(literal -2 binary64) x)","(fma.f64 #s(literal -2 binary64) (+.f64 x #s(literal 1 binary64)) x)","(*.f64 (+.f64 x #s(literal 1 binary64)) x)","(+.f64 (/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 x #s(literal 1 binary64)) x) (*.f64 (+.f64 x #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 x #s(literal 1 binary64)) x) (*.f64 (+.f64 x #s(literal 1 binary64)) x))","(fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))))","(-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))","(*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))","(pow.f64 x #s(literal 3 binary64))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))","(+.f64 x #s(literal 1 binary64))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x)))"]],"memory":[[5500832,63524400]],"outputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))))","(*.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (neg.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64)))) (pow.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal -9 binary64)) #s(literal 8 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal 8 binary64))))) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64))) (pow.f64 x #s(literal -8 binary64)))","(pow.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))) (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (neg.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal -9 binary64)) #s(literal 8 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 x #s(literal 8 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64))) (pow.f64 x #s(literal 5 binary64)))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (neg.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64)))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal -9 binary64)) #s(literal 8 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal 8 binary64))))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64))))) (neg.f64 (neg.f64 (pow.f64 x #s(literal 8 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 3 binary64))) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) #s(literal -2 binary64)))) (neg.f64 (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) #s(literal 2 binary64)))) (neg.f64 (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64))) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) #s(literal 1 binary64)))) (neg.f64 (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal 2 binary64)))) (neg.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64))) (pow.f64 x #s(literal 5 binary64)))) (neg.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal -2 binary64)))) (neg.f64 (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal 2 binary64)))) (neg.f64 (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64))) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal 1 binary64)))) (neg.f64 (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64)))))","(/.f64 (/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64))) (pow.f64 x #s(literal 5 binary64))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (neg.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64))))) (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (neg.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64))))) (neg.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal -9 binary64)) #s(literal 8 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal -9 binary64)) #s(literal 8 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal 8 binary64)))))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64)))) (neg.f64 (pow.f64 x #s(literal 8 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 3 binary64))) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) #s(literal -2 binary64))) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) #s(literal 2 binary64))) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64))) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal 5 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64))) (pow.f64 x #s(literal 5 binary64))) (*.f64 (pow.f64 x #s(literal 5 binary64)) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64))))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal -2 binary64))) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal 2 binary64))) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64))) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (neg.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64)))) (-.f64 (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (neg.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64)))) (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal -9 binary64)) #s(literal 8 binary64))) (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal -9 binary64)) #s(literal 8 binary64))) (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal 8 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64))) (pow.f64 x #s(literal 8 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))) (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (neg.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal -9 binary64)) #s(literal 8 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 x #s(literal 8 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))) (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (neg.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal -9 binary64)) #s(literal 8 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal 8 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64)))))","(fma.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(fma.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(fma.f64 (pow.f64 x #s(literal -5/2 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 5/2 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(fma.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 2 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal 2 binary64) x) x) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) x) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(fma.f64 (pow.f64 x #s(literal -5 binary64)) (pow.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(fma.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(fma.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(fma.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal -5 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(fma.f64 #s(literal -2 binary64) (neg.f64 (pow.f64 x #s(literal -3 binary64))) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(fma.f64 #s(literal -2 binary64) (pow.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(fma.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -3 binary64)) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(fma.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(fma.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(-.f64 (/.f64 (*.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64))) (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))) (/.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))))","(-.f64 (/.f64 (*.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64))) (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal 8 binary64)))))) (/.f64 (*.f64 (pow.f64 x #s(literal -9 binary64)) #s(literal -8 binary64)) (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal 8 binary64)))))))","(-.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 8 binary64))) (/.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal 8 binary64))))","(-.f64 (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -7 binary64))) (fma.f64 #s(literal -2 binary64) (pow.f64 x #s(literal -5 binary64)) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))))","(-.f64 (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -7 binary64))) (-.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64))))","(-.f64 (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64))))","(+.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(+.f64 (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -5/2 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 5/2 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -5 binary64)) (pow.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))","(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal -5 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(pow.f64 (/.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal 5/2 binary64)))) (neg.f64 (pow.f64 x #s(literal 5/2 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)) (pow.f64 x #s(literal -5 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64)) (pow.f64 x #s(literal -5 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -7 binary64))) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64))) #s(literal 2 binary64)))) (neg.f64 (fma.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -7 binary64)) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64))))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 8 binary64) (pow.f64 (pow.f64 x #s(literal -7 binary64)) #s(literal 3 binary64))) (*.f64 #s(literal -8 binary64) (pow.f64 x #s(literal -15 binary64))))) (neg.f64 (+.f64 (pow.f64 (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -7 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -7 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64))))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))) (pow.f64 x #s(literal 5 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (pow.f64 x #s(literal 5 binary64))) (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64)))) (neg.f64 (pow.f64 x #s(literal 10 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (pow.f64 x #s(literal 5 binary64))))","(/.f64 (-.f64 (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (pow.f64 x #s(literal 5/2 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5/2 binary64)))) (pow.f64 x #s(literal 5/2 binary64)))","(/.f64 (-.f64 (neg.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x)) #s(literal 2 binary64)) (neg.f64 (pow.f64 x #s(literal 5 binary64))))","(/.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal 5/2 binary64))) (pow.f64 x #s(literal 5/2 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)) (pow.f64 x #s(literal -5 binary64))) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64)) (pow.f64 x #s(literal -5 binary64))) (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -7 binary64))) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64))) #s(literal 2 binary64))) (fma.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -7 binary64)) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 8 binary64) (pow.f64 (pow.f64 x #s(literal -7 binary64)) #s(literal 3 binary64))) (*.f64 #s(literal -8 binary64) (pow.f64 x #s(literal -15 binary64)))) (+.f64 (pow.f64 (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -7 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -7 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64))) (neg.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64))) (neg.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))) (neg.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64)))))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))) (pow.f64 x #s(literal 5 binary64))))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 5 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (pow.f64 x #s(literal 5 binary64))) (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64))) (pow.f64 x #s(literal 10 binary64)))","(/.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)) (*.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64)) (*.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (neg.f64 (pow.f64 x #s(literal 5 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal 5 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 5 binary64))))","(neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (neg.f64 (pow.f64 x #s(literal 5 binary64)))))","(fma.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5/2 binary64))) (pow.f64 x #s(literal -9/2 binary64)) (neg.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64)))))","(fma.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (pow.f64 x #s(literal -5 binary64)) (neg.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64)))))","(fma.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -7 binary64)) (neg.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64)))))","(-.f64 (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -7 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64))))","(exp.f64 (*.f64 (log.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(+.f64 (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -7 binary64))) (neg.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64)))))","(*.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)) (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64)))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64))) (neg.f64 (-.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64))) (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64))) (neg.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (-.f64 #s(literal 4 binary64) (*.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64))) (neg.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)) (-.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal 2 binary64)))","(/.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)))","(/.f64 (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64)) (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (-.f64 #s(literal 4 binary64) (*.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64)) (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)) (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)) (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))","(fma.f64 #s(literal -2 binary64) (pow.f64 (*.f64 (neg.f64 x) x) #s(literal -1 binary64)) #s(literal 2 binary64))","(fma.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 x #s(literal -1 binary64)) #s(literal 2 binary64))","(fma.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64))","(fma.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal 2 binary64))","(-.f64 (/.f64 (*.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64))) (/.f64 #s(literal 4 binary64) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64))))","(-.f64 (/.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64)) (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64)))) (/.f64 #s(literal -8 binary64) (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64)))))","(-.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal -2 binary64))","(+.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal 2 binary64))","(+.f64 #s(literal 2 binary64) (/.f64 (/.f64 #s(literal 2 binary64) x) x))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))","(*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -2 binary64))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 2 binary64) x))","(*.f64 #s(literal -2 binary64) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 2 binary64) (neg.f64 (pow.f64 x #s(literal -1 binary64))))","(*.f64 #s(literal 2 binary64) (pow.f64 (neg.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -2 binary64) x))","(pow.f64 (/.f64 (*.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (neg.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))","(pow.f64 (*.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 x #s(literal -1/2 binary64))))","(/.f64 #s(literal -1 binary64) (*.f64 x #s(literal 1/2 binary64)))","(/.f64 #s(literal -2 binary64) (neg.f64 (neg.f64 x)))","(/.f64 #s(literal -2 binary64) x)","(/.f64 #s(literal 2 binary64) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 #s(literal 2 binary64) (neg.f64 x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 x #s(literal -1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 x #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1/2 binary64)))","(neg.f64 (/.f64 #s(literal 2 binary64) x))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal 2 binary64) x))","(exp.f64 (*.f64 (log.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) (pow.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (*.f64 x x)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x) (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (*.f64 x x)) (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x)))) (neg.f64 (neg.f64 (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (*.f64 x x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x))) (neg.f64 (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x x (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (*.f64 x x))))","(/.f64 (neg.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))))","(/.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x))","(/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x))","(/.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x))))","(/.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (*.f64 x x)))","(/.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x) (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (*.f64 x x)) (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x) (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (*.f64 x x)) (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(fma.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 2 binary64) x)","(fma.f64 #s(literal -1 binary64) (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) x)","(fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)","(fma.f64 #s(literal -2 binary64) (+.f64 x #s(literal 1 binary64)) x)","(fma.f64 #s(literal -2 binary64) x (+.f64 #s(literal -2 binary64) x))","(fma.f64 #s(literal 2 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x)","(fma.f64 x #s(literal -2 binary64) (+.f64 #s(literal -2 binary64) x))","(fma.f64 x #s(literal 1 binary64) (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)))","(fma.f64 #s(literal 1 binary64) x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)))","(-.f64 (-.f64 x (*.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))","(-.f64 (/.f64 (*.f64 x x) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x)) (/.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x)))","(-.f64 (/.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x)) (/.f64 (*.f64 x x) (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x)))","(-.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (*.f64 x x))) (/.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (*.f64 x x))))","(-.f64 x (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)))","(+.f64 (+.f64 x (*.f64 #s(literal -2 binary64) x)) #s(literal -2 binary64))","(+.f64 (*.f64 #s(literal -2 binary64) x) (+.f64 #s(literal -2 binary64) x))","(+.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x)","(+.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)))","(*.f64 (fma.f64 x x x) #s(literal 1 binary64))","(*.f64 (+.f64 x #s(literal 1 binary64)) x)","(*.f64 x (+.f64 x #s(literal 1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 x x x))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) x)) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) x) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (-.f64 x #s(literal 1 binary64)))","(fma.f64 (neg.f64 x) (neg.f64 x) x)","(fma.f64 (*.f64 x x) #s(literal 1 binary64) x)","(fma.f64 x x x)","(fma.f64 x #s(literal 1 binary64) (*.f64 x x))","(fma.f64 #s(literal 1 binary64) (*.f64 x x) x)","(fma.f64 #s(literal 1 binary64) x (*.f64 x x))","(+.f64 (*.f64 x x) x)","(+.f64 x (*.f64 x x))","(*.f64 (pow.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (fma.f64 x x x) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (+.f64 (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (-.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 x (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x))) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (pow.f64 (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (/.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x) (pow.f64 (pow.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x) (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)))","(*.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (pow.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x))) (pow.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 (fma.f64 x x x) (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(pow.f64 (/.f64 (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x x x) (/.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 x))","(/.f64 (neg.f64 (/.f64 (/.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64)))) (neg.f64 x))","(/.f64 (neg.f64 (/.f64 (/.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))) x)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (neg.f64 (/.f64 (/.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x x)))","(/.f64 (neg.f64 (/.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (fma.f64 x x x))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 2 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x))) (neg.f64 (-.f64 (fma.f64 x x x) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x))) (neg.f64 (fma.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (-.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) #s(literal 1 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)))) (neg.f64 (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))) (neg.f64 (neg.f64 (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))))) (neg.f64 (neg.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))))) (neg.f64 (neg.f64 (fma.f64 x x x))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x))))) (neg.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (fma.f64 x x x) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (-.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))))","(/.f64 (neg.f64 (+.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64)))))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 x x x)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x))))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (neg.f64 (fma.f64 x x x)))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (+.f64 x (*.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64)))))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (fma.f64 (neg.f64 x) (+.f64 x #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x))))) (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 x #s(literal -1 binary64)))) (neg.f64 (*.f64 x (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) x)) (neg.f64 (*.f64 x (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 x x x)) #s(literal -1 binary64)))) (neg.f64 (*.f64 (neg.f64 (fma.f64 x x x)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (-.f64 x #s(literal 1 binary64)) (neg.f64 (fma.f64 x x x)))) (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (neg.f64 (fma.f64 x x x)))) (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))) (neg.f64 (*.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)) (*.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)))))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (neg.f64 x) (+.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)))) (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)))))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64)))) (neg.f64 (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal 1 binary64)))) (neg.f64 (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal -1 binary64)))) (neg.f64 (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal 1 binary64)))) (neg.f64 (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))) #s(literal -1 binary64))","(/.f64 (/.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) x)","(/.f64 (/.f64 (/.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64))) x)","(/.f64 (/.f64 (/.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))) x) (+.f64 x #s(literal 1 binary64)))","(/.f64 (/.f64 (/.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64)) (fma.f64 x x x))","(/.f64 (/.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 2 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x)) (-.f64 (fma.f64 x x x) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x)) (fma.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (-.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))","(/.f64 (*.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64))) (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (neg.f64 (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)))) (neg.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (/.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x x)))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)))) (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 2 binary64)))) (neg.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (-.f64 (fma.f64 x x x) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (fma.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (-.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (fma.f64 x x x) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (-.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)))","(/.f64 (+.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) x))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 x x x)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (neg.f64 (fma.f64 x x x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64))))","(/.f64 (+.f64 x (*.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))))) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(/.f64 (fma.f64 (neg.f64 x) (+.f64 x #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64))))","(/.f64 (fma.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 x #s(literal -1 binary64))) (*.f64 x (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) x) (*.f64 x (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 x x x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (fma.f64 x x x)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (-.f64 x #s(literal 1 binary64)) (neg.f64 (fma.f64 x x x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (neg.f64 (fma.f64 x x x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)) (*.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))))","(/.f64 (fma.f64 (neg.f64 x) (+.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64))) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal 1 binary64))) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal -1 binary64))) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal 1 binary64))) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (-.f64 x #s(literal 1 binary64))))","(/.f64 (/.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 2 binary64))) (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (-.f64 (fma.f64 x x x) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)))))","(/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64))))))","(/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))))","(/.f64 (+.f64 (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (fma.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (-.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x x x) (/.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64))))","(/.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x x) (/.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)))","(neg.f64 (/.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x x) (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x x) (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x))) #s(literal -1 binary64)) (pow.f64 (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x x) (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (*.f64 x x)) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x x) (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64))) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (pow.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (pow.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (pow.f64 (neg.f64 (fma.f64 x x x)) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64))) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (/.f64 x (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(-.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (/.f64 #s(literal 2 binary64) x))","(-.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (/.f64 #s(literal -2 binary64) x))","(+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(+.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(*.f64 (pow.f64 (/.f64 (fma.f64 x x x) (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 x x x) (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x))) #s(literal -1 binary64)) (pow.f64 (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 x x x) (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (*.f64 x x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 x x x) (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (pow.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x))","(*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (pow.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (pow.f64 (neg.f64 (fma.f64 x x x)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (/.f64 x (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(pow.f64 (/.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 x (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) x)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (neg.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) (neg.f64 (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x)))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) (neg.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (*.f64 x x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) (neg.f64 (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)))) (neg.f64 (neg.f64 (neg.f64 (fma.f64 x x x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (fma.f64 x x x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x)) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x) (fma.f64 x x x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (*.f64 x x)) (fma.f64 x x x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) (fma.f64 x x x))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 x)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -2 binary64)))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (-.f64 (neg.f64 x) (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)))) (neg.f64 (neg.f64 (fma.f64 x x x))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)))) (neg.f64 (neg.f64 (fma.f64 x x x))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64))) (+.f64 x #s(literal 1 binary64)))) (neg.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x x)))","(/.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) x) (+.f64 x #s(literal 1 binary64)))","(/.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) #s(literal 1 binary64)) (fma.f64 x x x))","(/.f64 (*.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x))","(/.f64 (*.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (*.f64 x x)))","(/.f64 (*.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))))","(/.f64 (neg.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64)))) (neg.f64 x))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x))) (neg.f64 (neg.f64 (fma.f64 x x x))))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)))) (neg.f64 (*.f64 (fma.f64 x x x) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x))) (neg.f64 (*.f64 (fma.f64 x x x) (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x))))","(/.f64 (neg.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 x x x) (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (*.f64 x x)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 x x x) (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (fma.f64 x x x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x)) #s(literal 1 binary64)) (*.f64 (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x) (fma.f64 x x x)))","(/.f64 (*.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (*.f64 x x)) (fma.f64 x x x)))","(/.f64 (*.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) (fma.f64 x x x)))","(/.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) #s(literal 1 binary64)) (fma.f64 x x x))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 x)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (-.f64 (neg.f64 x) (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (neg.f64 (fma.f64 x x x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (neg.f64 (fma.f64 x x x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64))) (+.f64 x #s(literal 1 binary64))) (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x #s(literal 1/2 binary64))))","(/.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) x)","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) (*.f64 (fma.f64 x x x) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x)))","(/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (*.f64 (fma.f64 x x x) (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x)))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)))))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))","(/.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (*.f64 (fma.f64 x x x) (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (*.f64 x x))))","(/.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (*.f64 (fma.f64 x x x) (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (neg.f64 (fma.f64 x x x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64))))","(/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x))","(/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 x (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (fma.f64 x x x)))","(neg.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (neg.f64 (fma.f64 x x x))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal -2 binary64) x))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -2 binary64) x))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal -2 binary64) x))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)) (/.f64 #s(literal -2 binary64) x))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (/.f64 #s(literal -2 binary64) x))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -2 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal -2 binary64) x))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 #s(literal -2 binary64) (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 #s(literal 2 binary64) (neg.f64 (pow.f64 x #s(literal -1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 #s(literal 2 binary64) (pow.f64 (neg.f64 x) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64) (/.f64 #s(literal -2 binary64) x))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x))","(-.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))) (/.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))))","(-.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (/.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))))","(-.f64 (/.f64 x (fma.f64 x x x)) (/.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 x x x)))","(-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (/.f64 #s(literal -2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x))","(*.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 2 binary64))) (pow.f64 (-.f64 (fma.f64 x x x) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (-.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (fma.f64 x x x) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x))) (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (-.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (fma.f64 x x x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (fma.f64 x x x) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (-.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (-.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (fma.f64 x x x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (fma.f64 x x x) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (-.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 2 binary64))) (-.f64 (fma.f64 x x x) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (fma.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (-.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (fma.f64 x x x) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x))) (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (-.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 x x x) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x))) (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (-.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))))","(fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x))","(fma.f64 (fma.f64 x x x) #s(literal 1 binary64) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)))","(fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))","(fma.f64 (+.f64 x #s(literal 1 binary64)) x (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)))","(fma.f64 x (+.f64 x #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)))","(fma.f64 #s(literal 1 binary64) (fma.f64 x x x) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)))","(-.f64 (/.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (-.f64 (fma.f64 x x x) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)))) (/.f64 (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 2 binary64)) (-.f64 (fma.f64 x x x) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)))))","(+.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (fma.f64 x x x))","(+.f64 (fma.f64 x x x) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)))","(*.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) (pow.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (*.f64 x x)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x) (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (*.f64 x x)) (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x)))) (neg.f64 (neg.f64 (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (*.f64 x x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x))) (neg.f64 (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x x (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (*.f64 x x))))","(/.f64 (neg.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))))","(/.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x))","(/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x))","(/.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x))))","(/.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (*.f64 x x)))","(/.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x) (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (*.f64 x x)) (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x) (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (*.f64 x x)) (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(fma.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 2 binary64) x)","(fma.f64 #s(literal -1 binary64) (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) x)","(fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)","(fma.f64 #s(literal -2 binary64) (+.f64 x #s(literal 1 binary64)) x)","(fma.f64 #s(literal -2 binary64) x (+.f64 #s(literal -2 binary64) x))","(fma.f64 #s(literal 2 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x)","(fma.f64 x #s(literal -2 binary64) (+.f64 #s(literal -2 binary64) x))","(fma.f64 x #s(literal 1 binary64) (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)))","(fma.f64 #s(literal 1 binary64) x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)))","(-.f64 (-.f64 x (*.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))","(-.f64 (/.f64 (*.f64 x x) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x)) (/.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x)))","(-.f64 (/.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x)) (/.f64 (*.f64 x x) (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x)))","(-.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (*.f64 x x))) (/.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (*.f64 x x))))","(-.f64 x (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)))","(+.f64 (+.f64 x (*.f64 #s(literal -2 binary64) x)) #s(literal -2 binary64))","(+.f64 (*.f64 #s(literal -2 binary64) x) (+.f64 #s(literal -2 binary64) x))","(+.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x)","(+.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)))","(*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (+.f64 x #s(literal 1 binary64)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) x)","(*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) #s(literal 1 binary64))","(*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))","(*.f64 (fma.f64 x x x) (*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(*.f64 (fma.f64 x x x) (-.f64 x #s(literal 1 binary64)))","(*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x (-.f64 x #s(literal 1 binary64))))","(*.f64 x (fma.f64 x x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x x))) (neg.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x x) (fma.f64 x x #s(literal -1 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) (+.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x (+.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (fma.f64 x x x) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 (fma.f64 x x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 x #s(literal 1 binary64))))","(fma.f64 (fma.f64 x x x) x (neg.f64 (fma.f64 x x x)))","(fma.f64 x (fma.f64 x x x) (neg.f64 (fma.f64 x x x)))","(+.f64 (*.f64 x (fma.f64 x x x)) (neg.f64 (fma.f64 x x x)))","(+.f64 (*.f64 (fma.f64 x x x) x) (neg.f64 (fma.f64 x x x)))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(*.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal 2 binary64) x) x))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) x))","(*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64))))","(*.f64 #s(literal -2 binary64) (neg.f64 (pow.f64 x #s(literal -3 binary64))))","(*.f64 #s(literal -2 binary64) (pow.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -3 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(pow.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64))","(pow.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 x #s(literal 3/2 binary64)))","(/.f64 (neg.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x)) (neg.f64 x))","(/.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 (neg.f64 x) x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64))))","(/.f64 #s(literal -1 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64)))","(/.f64 #s(literal -2 binary64) (neg.f64 (neg.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal -2 binary64) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) x)","(/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x))","(/.f64 #s(literal 2 binary64) (neg.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64)))","(neg.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64))))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64))))","(exp.f64 (*.f64 (log.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))","(*.f64 (*.f64 x x) x)","(*.f64 x (*.f64 x x))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))","(pow.f64 (exp.f64 #s(literal 3 binary64)) (log.f64 x))","(pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 3/2 binary64))","(pow.f64 x #s(literal 3 binary64))","(exp.f64 (fma.f64 (log.f64 x) #s(literal 3/2 binary64) (*.f64 (log.f64 x) #s(literal 3/2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 3/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal 3/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 x #s(literal 3/2 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (*.f64 x x)) #s(literal 3/2 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal 3 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal 2 binary64) x))","(*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64))","(*.f64 #s(literal -2 binary64) (pow.f64 (*.f64 (neg.f64 x) x) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -2 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 2 binary64) x) x))","(pow.f64 (/.f64 x (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (*.f64 x #s(literal 1/2 binary64)) x) #s(literal -1 binary64))","(pow.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) #s(literal -1 binary64))","(/.f64 (/.f64 #s(literal -2 binary64) x) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (/.f64 #s(literal 2 binary64) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","(/.f64 #s(literal -2 binary64) (neg.f64 (neg.f64 (*.f64 (neg.f64 x) x))))","(/.f64 #s(literal -2 binary64) (*.f64 (neg.f64 x) x))","(/.f64 (/.f64 #s(literal 2 binary64) x) (neg.f64 (neg.f64 x)))","(/.f64 (/.f64 #s(literal 2 binary64) x) x)","(/.f64 #s(literal 2 binary64) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 x (/.f64 #s(literal 2 binary64) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(neg.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)))","(exp.f64 (*.f64 (log.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (/.f64 (*.f64 x x) #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal -2 binary64) x))","(*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))","(*.f64 #s(literal -2 binary64) (pow.f64 x #s(literal -3 binary64)))","(*.f64 #s(literal 2 binary64) (pow.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64))))","(pow.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 x #s(literal 3/2 binary64)))","(/.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) x)","(/.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64))))","(/.f64 #s(literal -2 binary64) (neg.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (neg.f64 x))","(/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 (neg.f64 x) x))","(/.f64 #s(literal 2 binary64) (neg.f64 (neg.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 2 binary64) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64)))","(neg.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(pow.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal -1 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) #s(literal 1 binary64))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) x))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) x)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 x #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) x #s(literal 1 binary64))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(exp.f64 (log1p.f64 x))","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) x)","(*.f64 (pow.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (fma.f64 x x x) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (+.f64 (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (-.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 x (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x))) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (pow.f64 (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (/.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x) (pow.f64 (pow.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x) (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)))","(*.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (pow.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x))) (pow.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 (fma.f64 x x x) (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(pow.f64 (/.f64 (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x x x) (/.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 x))","(/.f64 (neg.f64 (/.f64 (/.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64)))) (neg.f64 x))","(/.f64 (neg.f64 (/.f64 (/.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))) x)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (neg.f64 (/.f64 (/.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x x)))","(/.f64 (neg.f64 (/.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (fma.f64 x x x))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 2 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x))) (neg.f64 (-.f64 (fma.f64 x x x) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x))) (neg.f64 (fma.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (-.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) #s(literal 1 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)))) (neg.f64 (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))) (neg.f64 (neg.f64 (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))))) (neg.f64 (neg.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))))) (neg.f64 (neg.f64 (fma.f64 x x x))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x))))) (neg.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (fma.f64 x x x) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (-.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))))","(/.f64 (neg.f64 (+.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64)))))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 x x x)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x))))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (neg.f64 (fma.f64 x x x)))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (+.f64 x (*.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64)))))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (fma.f64 (neg.f64 x) (+.f64 x #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x))))) (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 x #s(literal -1 binary64)))) (neg.f64 (*.f64 x (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) x)) (neg.f64 (*.f64 x (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 x x x)) #s(literal -1 binary64)))) (neg.f64 (*.f64 (neg.f64 (fma.f64 x x x)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (-.f64 x #s(literal 1 binary64)) (neg.f64 (fma.f64 x x x)))) (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (neg.f64 (fma.f64 x x x)))) (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))) (neg.f64 (*.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)) (*.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)))))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (neg.f64 x) (+.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)))) (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)))))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64)))) (neg.f64 (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal 1 binary64)))) (neg.f64 (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal -1 binary64)))) (neg.f64 (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal 1 binary64)))) (neg.f64 (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))) #s(literal -1 binary64))","(/.f64 (/.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) x)","(/.f64 (/.f64 (/.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64))) x)","(/.f64 (/.f64 (/.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))) x) (+.f64 x #s(literal 1 binary64)))","(/.f64 (/.f64 (/.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64)) (fma.f64 x x x))","(/.f64 (/.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 2 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x)) (-.f64 (fma.f64 x x x) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x)) (fma.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (-.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))","(/.f64 (*.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64))) (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (neg.f64 (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)))) (neg.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (/.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x x)))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)))) (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 2 binary64)))) (neg.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (-.f64 (fma.f64 x x x) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (fma.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (-.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (fma.f64 x x x) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (-.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)))","(/.f64 (+.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) x))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 x x x)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (neg.f64 (fma.f64 x x x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64))))","(/.f64 (+.f64 x (*.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))))) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(/.f64 (fma.f64 (neg.f64 x) (+.f64 x #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64))))","(/.f64 (fma.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 x #s(literal -1 binary64))) (*.f64 x (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) x) (*.f64 x (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 x x x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (fma.f64 x x x)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (-.f64 x #s(literal 1 binary64)) (neg.f64 (fma.f64 x x x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (neg.f64 (fma.f64 x x x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)) (*.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))))","(/.f64 (fma.f64 (neg.f64 x) (+.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64))) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal 1 binary64))) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal -1 binary64))) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal 1 binary64))) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (-.f64 x #s(literal 1 binary64))))","(/.f64 (/.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 2 binary64))) (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (-.f64 (fma.f64 x x x) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)))))","(/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64))))))","(/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))))","(/.f64 (+.f64 (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (fma.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (-.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x x x) (/.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64))))","(/.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x x) (/.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)))","(neg.f64 (/.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x x) (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x x) (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x))) #s(literal -1 binary64)) (pow.f64 (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x x) (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (*.f64 x x)) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x x) (fma.f64 #s(literal 8 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64))) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (pow.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (pow.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (pow.f64 (neg.f64 (fma.f64 x x x)) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64))) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (/.f64 x (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(-.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (/.f64 #s(literal 2 binary64) x))","(-.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (/.f64 #s(literal -2 binary64) x))","(+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(+.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":257.551025390625,"type":"rewrite"},{"compiler":[[31777,3261]],"memory":[[-4036256,85198080]],"time":234.283203125,"type":"eval"},{"alts":[["(fma.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64))) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","fresh",61.64112245325401,"binary64"],["(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","next",52.77150583419441,"binary64"],["(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x)))","next",0.48310191190683005,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) x))","next",0.7666259019159771,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x)))","next",0.7861571355562907,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (*.f64 (*.f64 x x) x)))","next",1.1247310729804931,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))","done",60.79444651831434,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","fresh",0.6611604274333495,"binary64"]],"compiler":[[22,16],[25,14],[31,19],[23,15],[23,15],[23,15],[19,13],[21,15],[22,16],[25,14],[31,19],[23,15],[23,15],[23,15],[21,15]],"count":[[1007,8]],"kept":[{"done":[1,0],"fresh":[11,1],"new":[990,6],"picked":[5,1]}],"memory":[[6386736,39796864]],"min-error":[[0.0,"binary64"]],"time":20.4208984375,"type":"prune"},{"egraph":[[0,8173,178,0.081819966],[6,7812,182,0.020562553],[5,3704,182,0.030547712],[4,1454,182,0.017150074],[3,564,223,0.005527839],[2,227,242,0.002038068],[1,105,242,0.000890144],[0,62,265,0.000797273],[0,40,282,0.000336691]],"inputs":[["(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x)))","#s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))","#s(literal 2 binary64)","(*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x))","(-.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(*.f64 (+.f64 x #s(literal 1 binary64)) x)","(+.f64 x #s(literal 1 binary64))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (*.f64 (*.f64 x x) x)))","(/.f64 #s(literal 2 binary64) (*.f64 (*.f64 x x) x))","#s(literal 2 binary64)","(*.f64 (*.f64 x x) x)","(*.f64 x x)","x","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x)))","(/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x))","(/.f64 #s(literal 2 binary64) x)","#s(literal 2 binary64)","x","(*.f64 x x)","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) x))","(/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) x)","(/.f64 (/.f64 #s(literal 2 binary64) x) x)","(/.f64 #s(literal 2 binary64) x)","#s(literal 2 binary64)","x","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))))","#s(literal 1 binary64)","(*.f64 (+.f64 x #s(literal 1 binary64)) x)","(+.f64 x #s(literal 1 binary64))","x","(*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))))","(-.f64 x #s(literal 1 binary64))","(-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))","(*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))","#s(literal 2 binary64)","(*.f64 (fma.f64 x x #s(literal -1 binary64)) x)","(fma.f64 x x #s(literal -1 binary64))","#s(literal -1 binary64)"]],"locations":[["(*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))))","cost-diff",1],["(*.f64 (+.f64 x #s(literal 1 binary64)) x)","cost-diff",1],["(-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))","cost-diff",3],["(fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))))","cost-diff",11],["(/.f64 #s(literal 2 binary64) x)","cost-diff",0],["(/.f64 (/.f64 #s(literal 2 binary64) x) x)","cost-diff",0],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) x))","cost-diff",0],["(/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) x)","cost-diff",2],["(*.f64 x x)","cost-diff",0],["(/.f64 #s(literal 2 binary64) x)","cost-diff",0],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x)))","cost-diff",0],["(/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x))","cost-diff",2],["(*.f64 x x)","cost-diff",0],["(/.f64 #s(literal 2 binary64) (*.f64 (*.f64 x x) x))","cost-diff",0],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (*.f64 (*.f64 x x) x)))","cost-diff",0],["(*.f64 (*.f64 x x) x)","cost-diff",2],["#s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))","cost-diff",0],["(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x)))","cost-diff",0],["(*.f64 (+.f64 x #s(literal 1 binary64)) x)","cost-diff",1],["(*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x))","cost-diff",3]],"memory":[[234752,32428480]],"method":["egg-herbie"],"outputs":[["(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) x))","#s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))","#s(literal 2 binary64)","(*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x))","(-.f64 (pow.f64 x #s(literal 3 binary64)) x)","(-.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(*.f64 (+.f64 x #s(literal 1 binary64)) x)","(fma.f64 x x x)","(+.f64 x #s(literal 1 binary64))","(-.f64 x #s(literal -1 binary64))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (*.f64 (*.f64 x x) x)))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 #s(literal 2 binary64) (*.f64 (*.f64 x x) x))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))","#s(literal 2 binary64)","(*.f64 (*.f64 x x) x)","(pow.f64 x #s(literal 3 binary64))","(*.f64 x x)","x","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x)))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))","(/.f64 #s(literal 2 binary64) x)","#s(literal 2 binary64)","x","(*.f64 x x)","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) x))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) x)","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (/.f64 #s(literal 2 binary64) x) x)","(/.f64 #s(literal 2 binary64) x)","#s(literal 2 binary64)","x","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 #s(literal 2 binary64) (-.f64 (pow.f64 x #s(literal 3 binary64)) x))","(fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))))","#s(literal 2 binary64)","#s(literal 1 binary64)","(*.f64 (+.f64 x #s(literal 1 binary64)) x)","(fma.f64 x x x)","(+.f64 x #s(literal 1 binary64))","(-.f64 x #s(literal -1 binary64))","x","(*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))))","(-.f64 #s(literal 2 binary64) (fma.f64 x x x))","(-.f64 x #s(literal 1 binary64))","(-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))","(-.f64 #s(literal -2 binary64) x)","(*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))","(fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64))","#s(literal 2 binary64)","(*.f64 (fma.f64 x x #s(literal -1 binary64)) x)","(-.f64 (pow.f64 x #s(literal 3 binary64)) x)","(fma.f64 x x #s(literal -1 binary64))","#s(literal -1 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":270.02587890625,"type":"simplify"},{"compiler":[[263,30]],"locations":[["(*.f64 (fma.f64 x x #s(literal -1 binary64)) x)","accuracy",0.10546875],["(-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))","accuracy",0.2009409875659575],["(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","accuracy",0.43394190213838807],["(fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))))","accuracy",60.30434069830073],["(/.f64 #s(literal 2 binary64) x)","accuracy",0.0],["(/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) x)","accuracy",0.0859375],["(/.f64 (/.f64 #s(literal 2 binary64) x) x)","accuracy",0.15234375],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) x))","accuracy",0.6533479274333495],["(/.f64 #s(literal 2 binary64) x)","accuracy",0.0],["(*.f64 x x)","accuracy",0.0],["(/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x))","accuracy",0.14453125],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x)))","accuracy",0.6533479274333495],["(*.f64 x x)","accuracy",0.0],["(*.f64 (*.f64 x x) x)","accuracy",0.11328125],["(/.f64 #s(literal 2 binary64) (*.f64 (*.f64 x x) x))","accuracy",0.43394190213838807],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (*.f64 (*.f64 x x) x)))","accuracy",0.6533479274333495],["(*.f64 (+.f64 x #s(literal 1 binary64)) x)","accuracy",0.0],["#s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))","accuracy",0.0],["(*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x))","accuracy",0.11328125],["(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x)))","accuracy",0.43394190213838807]],"memory":[[-6182544,51590032]],"mixsample":[[0.279052734375,"ival-add",1200],[0.3984375,"ival-sub",1200],[12.91064453125,"adjust",800],[22.346435546875,"ival-div",0],[1.100341796875,"ival-mult",1200],[0.448974609375,"ival-sub",1600],[5.410400390625,"ival-div",400],[0.383544921875,"ival-sub",2000],[1.36083984375,"ival-mult",2000],[0.16748046875,"ival-div",1600],[0.119384765625,"ival-assert",0],[8.580322265625,"ival-sub",0],[1.474609375,"ival-sub",400],[0.58544921875,"adjust",2000],[0.28857421875,"ival-sub",2400],[8.453857421875,"ival-add",0],[1.362548828125,"ival-mult",800],[0.309326171875,"ival-add",1600],[0.1669921875,"ival-mult",400],[16.94091796875,"ival-mult",0],[0.591552734375,"ival-sub",800],[1.211181640625,"ival-mult",1600],[0.294677734375,"ival-add",2000],[0.008056640625,"ival-add",400],[0.21240234375,"ival-true",0],[0.80712890625,"ival-mult",2400],[0.197998046875,"ival-add",2400],[0.381103515625,"exact",0],[0.31689453125,"ival-add",800]],"outcomes":[[110.837646484375,1,"valid",239],[7.38720703125,2,"valid",13],[0.750244140625,0,"valid",4]],"time":149.815185546875,"type":"localize"},{"count":[[19,31]],"inputs":[["(*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x))","(*.f64 (+.f64 x #s(literal 1 binary64)) x)","(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x)))","#s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))","(*.f64 (*.f64 x x) x)","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (*.f64 (*.f64 x x) x)))","(/.f64 #s(literal 2 binary64) (*.f64 (*.f64 x x) x))","(*.f64 x x)","(/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x)))","(/.f64 #s(literal 2 binary64) x)","(/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) x)","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) x))","(/.f64 (/.f64 #s(literal 2 binary64) x) x)","(fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))))","(-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))","(*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) x)"]],"memory":[[-1532896,6056816]],"outputs":[["(* -1 x)","(* x (- (pow x 2) 1))","x","(* x (+ 1 x))","(/ -2 x)","(/ (- (* -2 (pow x 2)) 2) x)","(/ (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2) x)","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2)) 2) x)","2","(pow x 3)","(/ 2 (pow x 3))","(pow x 2)","(/ 2 x)","(/ 2 (pow x 2))","-2","(- (* -1 x) 2)","(+ 2 (* -1 x))","(+ 2 (* x (- (* -1 x) 1)))","(* (pow x 3) (- 1 (/ 1 (pow x 2))))","(* (pow x 2) (+ 1 (/ 1 x)))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))) (pow x 3))","(* -1 (* x (+ 1 (* 2 (/ 1 x)))))","(* -1 (pow x 2))","(* -1 (* (pow x 2) (+ 1 (/ 1 x))))","(* (pow x 2) (- (/ 2 (pow x 2)) (+ 1 (/ 1 x))))","(* -1 (* (pow x 3) (- (/ 1 (pow x 2)) 1)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 2))) 2) (pow x 3)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 4))) (+ 2 (* 2 (/ 1 (pow x 2))))) (pow x 3)))","(* (pow x 2) (- (* -1 (/ (- 1 (* 2 (/ 1 x))) x)) 1))"]],"series":[[3.220947265625,"((* (- x 1) (* (+ x 1) x)) (* (+ x 1) x) (/ (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (* (- x 1) (* (+ x 1) x))) (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (* (* x x) x) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ 2 (* (* x x) x)) (* x x) (/ (/ 2 x) (* x x)) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ 2 x) (/ (/ (/ 2 x) x) x) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ (/ 2 x) x) (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (- x (* 2 (+ x 1))) (* (- x 1) (- x (* 2 (+ x 1)))) (/ (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (* (+ (* x x) -1) x)) (* (+ (* x x) -1) x))","x","-inf"],[5.296875,"((* (- x 1) (* (+ x 1) x)) (* (+ x 1) x) (/ (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (* (- x 1) (* (+ x 1) x))) (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (* (* x x) x) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ 2 (* (* x x) x)) (* x x) (/ (/ 2 x) (* x x)) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ 2 x) (/ (/ (/ 2 x) x) x) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ (/ 2 x) x) (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (- x (* 2 (+ x 1))) (* (- x 1) (- x (* 2 (+ x 1)))) (/ (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (* (+ (* x x) -1) x)) (* (+ (* x x) -1) x))","x","inf"],[2.47998046875,"((* (- x 1) (* (+ x 1) x)) (* (+ x 1) x) (/ (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (* (- x 1) (* (+ x 1) x))) (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (* (* x x) x) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ 2 (* (* x x) x)) (* x x) (/ (/ 2 x) (* x x)) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ 2 x) (/ (/ (/ 2 x) x) x) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ (/ 2 x) x) (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (- x (* 2 (+ x 1))) (* (- x 1) (- x (* 2 (+ x 1)))) (/ (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (* (+ (* x x) -1) x)) (* (+ (* x x) -1) x))","x","0"]],"time":12.204833984375,"type":"series"},{"count":[[31,30]],"egraph":[[0,8244,202,0.061506311],[4,6269,211,0.022386154],[3,2211,211,0.025727963],[2,632,221,0.008731611],[1,207,242,0.001893633],[0,80,246,0.000638416]],"inputs":[["(* -1 x)","(* x (- (pow x 2) 1))","x","(* x (+ 1 x))","(/ -2 x)","(/ (- (* -2 (pow x 2)) 2) x)","(/ (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2) x)","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2)) 2) x)","2","(pow x 3)","(/ 2 (pow x 3))","(pow x 2)","(/ 2 x)","(/ 2 (pow x 2))","-2","(- (* -1 x) 2)","(+ 2 (* -1 x))","(+ 2 (* x (- (* -1 x) 1)))","(* (pow x 3) (- 1 (/ 1 (pow x 2))))","(* (pow x 2) (+ 1 (/ 1 x)))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))) (pow x 3))","(* -1 (* x (+ 1 (* 2 (/ 1 x)))))","(* -1 (pow x 2))","(* -1 (* (pow x 2) (+ 1 (/ 1 x))))","(* (pow x 2) (- (/ 2 (pow x 2)) (+ 1 (/ 1 x))))","(* -1 (* (pow x 3) (- (/ 1 (pow x 2)) 1)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 2))) 2) (pow x 3)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 4))) (+ 2 (* 2 (/ 1 (pow x 2))))) (pow x 3)))","(* (pow x 2) (- (* -1 (/ (- 1 (* 2 (/ 1 x))) x)) 1))"]],"memory":[[-540640,30532864]],"method":["egg-herbie"],"outputs":[["(* -1 x)","(neg.f64 x)","(* x (- (pow x 2) 1))","(-.f64 (pow.f64 x #s(literal 3 binary64)) x)","x","(* x (+ 1 x))","(fma.f64 x x x)","(/ -2 x)","(/.f64 #s(literal -2 binary64) x)","(/ (- (* -2 (pow x 2)) 2) x)","(fma.f64 #s(literal -2 binary64) x (/.f64 #s(literal -2 binary64) x))","(/ (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2) x)","(fma.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) x) #s(literal -2 binary64) (/.f64 #s(literal -2 binary64) x))","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2)) 2) x)","(/.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -2 binary64) #s(literal -2 binary64))) x)","2","#s(literal 2 binary64)","(pow x 3)","(pow.f64 x #s(literal 3 binary64))","(/ 2 (pow x 3))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))","(pow x 2)","(*.f64 x x)","(/ 2 x)","(/.f64 #s(literal 2 binary64) x)","(/ 2 (pow x 2))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","-2","#s(literal -2 binary64)","(- (* -1 x) 2)","(-.f64 #s(literal -2 binary64) x)","(+ 2 (* -1 x))","(-.f64 #s(literal 2 binary64) x)","(+ 2 (* x (- (* -1 x) 1)))","(fma.f64 (-.f64 #s(literal -1 binary64) x) x #s(literal 2 binary64))","(* (pow x 3) (- 1 (/ 1 (pow x 2))))","(-.f64 (pow.f64 x #s(literal 3 binary64)) x)","(* (pow x 2) (+ 1 (/ 1 x)))","(fma.f64 x x x)","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 3))","(*.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) (-.f64 x (/.f64 #s(literal -1 binary64) x)))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))) (pow x 3))","(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64))))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))) (pow x 3))","(/.f64 (-.f64 (+.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 6 binary64))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 #s(literal -2 binary64) (/.f64 #s(literal 2 binary64) (*.f64 x x)))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* x (+ 1 (* 2 (/ 1 x)))))","(-.f64 #s(literal -2 binary64) x)","(* -1 (pow x 2))","(*.f64 (neg.f64 x) x)","(* -1 (* (pow x 2) (+ 1 (/ 1 x))))","(*.f64 (-.f64 #s(literal -1 binary64) x) x)","(* (pow x 2) (- (/ 2 (pow x 2)) (+ 1 (/ 1 x))))","(fma.f64 (-.f64 #s(literal -1 binary64) x) x #s(literal 2 binary64))","(* -1 (* (pow x 3) (- (/ 1 (pow x 2)) 1)))","(-.f64 (pow.f64 x #s(literal 3 binary64)) x)","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 2))) 2) (pow x 3)))","(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64))))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 4))) (+ 2 (* 2 (/ 1 (pow x 2))))) (pow x 3)))","(*.f64 (/.f64 (-.f64 #s(literal -2 binary64) (/.f64 #s(literal 2 binary64) (*.f64 x x))) (pow.f64 x #s(literal 4 binary64))) (-.f64 (/.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) x))","(* (pow x 2) (- (* -1 (/ (- 1 (* 2 (/ 1 x))) x)) 1))","(fma.f64 (-.f64 #s(literal -1 binary64) x) x #s(literal 2 binary64))"]],"stop":[["iter limit",1],["node limit",1]],"time":192.676025390625,"type":"simplify"},{"count":[[19,938]],"egraph":[[0,8290,188,0.083109145],[2,2165,204,0.031351902],[1,242,204,0.00738177],[0,62,222,0.001892183],[0,40,237,0.000322253]],"inputs":[["(*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x))","(*.f64 (+.f64 x #s(literal 1 binary64)) x)","(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x)))","#s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))","(*.f64 (*.f64 x x) x)","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (*.f64 (*.f64 x x) x)))","(/.f64 #s(literal 2 binary64) (*.f64 (*.f64 x x) x))","(*.f64 x x)","(/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x)))","(/.f64 #s(literal 2 binary64) x)","(/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) x)","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) x))","(/.f64 (/.f64 #s(literal 2 binary64) x) x)","(fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))))","(-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))","(*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) x)"]],"memory":[[712240,68078112]],"outputs":[["(*.f64 (/.f64 (fma.f64 x x x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (fma.f64 x x x) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 x x x) (+.f64 #s(literal 1 binary64) x)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (fma.f64 x x x) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (fma.f64 x x x) (+.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (fma.f64 x x x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 x x x) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 x x x) #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 x x x) (+.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (fma.f64 x x x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (fma.f64 x x x) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (+.f64 #s(literal 1 binary64) x))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) x)","(*.f64 (fma.f64 x x x) (*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(*.f64 (fma.f64 x x x) (-.f64 x #s(literal 1 binary64)))","(*.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(*.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 x (-.f64 x #s(literal 1 binary64))))","(*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) #s(literal 1 binary64))","(*.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))","(*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(*.f64 x (fma.f64 x x #s(literal -1 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 x (fma.f64 x x x)) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -1 binary64) (fma.f64 x x x)) #s(literal 3 binary64))) (fma.f64 (*.f64 x (fma.f64 x x x)) (*.f64 x (fma.f64 x x x)) (-.f64 (*.f64 (*.f64 #s(literal -1 binary64) (fma.f64 x x x)) (*.f64 #s(literal -1 binary64) (fma.f64 x x x))) (*.f64 (*.f64 x (fma.f64 x x x)) (*.f64 #s(literal -1 binary64) (fma.f64 x x x))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x x x) x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 x x x) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 (fma.f64 x x x) x) (*.f64 (fma.f64 x x x) x) (-.f64 (*.f64 (*.f64 (fma.f64 x x x) #s(literal -1 binary64)) (*.f64 (fma.f64 x x x) #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 x x x) x) (*.f64 (fma.f64 x x x) #s(literal -1 binary64))))))","(/.f64 (+.f64 (pow.f64 (*.f64 x #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 9 binary64))) (fma.f64 (*.f64 x #s(literal -1 binary64)) (*.f64 x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 6 binary64)) (*.f64 (*.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 9 binary64))) (fma.f64 x x (-.f64 (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) (pow.f64 (*.f64 x #s(literal -1 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal 6 binary64)) (-.f64 (*.f64 (*.f64 x #s(literal -1 binary64)) (*.f64 x #s(literal -1 binary64))) (*.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 x #s(literal -1 binary64))))))","(/.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal 6 binary64)) (-.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 x)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x x))) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) x)) (neg.f64 (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)) x)) (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x x) (fma.f64 x x #s(literal -1 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 x (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 x (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) (+.f64 #s(literal 1 binary64) x))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) x) (fma.f64 x x #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)) x) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 (*.f64 (fma.f64 x x x) (fma.f64 x x #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) x))","(/.f64 (*.f64 (fma.f64 x x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 x (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (fma.f64 x x #s(literal 1 binary64)))","(/.f64 (*.f64 x (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))","(fma.f64 (pow.f64 x #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)) (*.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 x #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)) (neg.f64 x))","(fma.f64 (fma.f64 x x x) x (*.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) x (pow.f64 x #s(literal 3 binary64)))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64) (*.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64) (neg.f64 x))","(fma.f64 (*.f64 x x) x (*.f64 x #s(literal -1 binary64)))","(fma.f64 (*.f64 x x) x (neg.f64 x))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)) (*.f64 x #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)) (neg.f64 x))","(fma.f64 x (fma.f64 x x x) (*.f64 #s(literal -1 binary64) (fma.f64 x x x)))","(fma.f64 x #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))","(fma.f64 x (*.f64 x x) (*.f64 x #s(literal -1 binary64)))","(fma.f64 x (*.f64 x x) (neg.f64 x))","(+.f64 (*.f64 x (fma.f64 x x x)) (*.f64 #s(literal -1 binary64) (fma.f64 x x x)))","(+.f64 (*.f64 (fma.f64 x x x) x) (*.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(+.f64 (*.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal 3 binary64)))","(+.f64 (neg.f64 x) (pow.f64 x #s(literal 3 binary64)))","(+.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 x #s(literal -1 binary64)))","(+.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 x))","(*.f64 (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (+.f64 #s(literal 1 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 x (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 x (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (fma.f64 x x x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (fma.f64 x x x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (fma.f64 x x x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (fma.f64 x x x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (fma.f64 x x x) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (/.f64 (fma.f64 x x x) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (/.f64 (fma.f64 x x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 x x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))) (+.f64 #s(literal 1 binary64) x))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 x #s(literal 1 binary64))) (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 x #s(literal 1 binary64))) (/.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (fma.f64 x x #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) x))","(*.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 x x x) (-.f64 x #s(literal 1 binary64))) (/.f64 (*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 x x x) (-.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (fma.f64 x x x) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (fma.f64 x x x) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (fma.f64 x x x) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (/.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (fma.f64 x x x))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 x (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (+.f64 #s(literal 1 binary64) x))","(*.f64 (/.f64 x (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 x (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 x (-.f64 x #s(literal 1 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 x (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (/.f64 x (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (fma.f64 x x x) (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (fma.f64 x x x) #s(literal 1 binary64))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) #s(literal 1 binary64)))","(*.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 x #s(literal 1 binary64)))","(*.f64 (+.f64 #s(literal 1 binary64) x) x)","(*.f64 #s(literal 1 binary64) (fma.f64 x x x))","(*.f64 x (+.f64 #s(literal 1 binary64) x))","(/.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 x x) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 x x (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) x)) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) x) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (-.f64 x #s(literal 1 binary64)))","(fma.f64 (exp.f64 (log.f64 x)) (exp.f64 (log.f64 x)) x)","(fma.f64 (neg.f64 x) (neg.f64 x) x)","(fma.f64 (*.f64 x x) #s(literal 1 binary64) x)","(fma.f64 #s(literal 1 binary64) (*.f64 x x) x)","(fma.f64 #s(literal 1 binary64) x (*.f64 x x))","(fma.f64 x #s(literal 1 binary64) (*.f64 x x))","(fma.f64 x x x)","(+.f64 (*.f64 x x) x)","(+.f64 x (*.f64 x x))","(*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) x)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x x)) (+.f64 #s(literal 1 binary64) x))","(*.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x x)) (/.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) x) (/.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (+.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) x) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) x) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) x)) (/.f64 (+.f64 #s(literal 1 binary64) x) x))","(*.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x x)))","(*.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 #s(literal 1 binary64) x)) (/.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) x))","(*.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64)) (/.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (fma.f64 x x x)))","(*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 x #s(literal 1 binary64)) x)))","(*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) (*.f64 x (-.f64 x #s(literal 1 binary64)))))","(*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) x)) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 x x #s(literal -1 binary64))) (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (neg.f64 x)))","(*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 x x x)) (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (neg.f64 (fma.f64 x x #s(literal -1 binary64)))))","(*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) x))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 x #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) (/.f64 #s(literal 1 binary64) (*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))))","(*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64))) (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (neg.f64 (fma.f64 x x x))))","(*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x) (pow.f64 (pow.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(*.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (pow.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 (fma.f64 x x x) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)))","(*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)) (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)) #s(literal 1 binary64))","(*.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x))","(*.f64 #s(literal 1 binary64) (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)))","(pow.f64 (/.f64 (fma.f64 x x x) (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 x #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 x #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 x))","(/.f64 (neg.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) (+.f64 #s(literal 1 binary64) x))) (neg.f64 x))","(/.f64 (neg.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x x)))","(/.f64 (neg.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) x)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (neg.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (neg.f64 (*.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (neg.f64 (neg.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))))) (neg.f64 (neg.f64 (fma.f64 x x x))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))))","(/.f64 (neg.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))) #s(literal -1 binary64))","(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64))) x)","(/.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) (+.f64 #s(literal 1 binary64) x)) x)","(/.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64)) (fma.f64 x x x))","(/.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) x) (+.f64 #s(literal 1 binary64) x))","(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 (neg.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x x)))","(/.f64 (neg.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))) (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x))))","(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))","(/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x x x) (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 x #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 x #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))))))","(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)) #s(literal 1 binary64))","(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 x #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x x) (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 x #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 x #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))))","(neg.f64 (/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)))","(neg.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x))) (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x))))","(exp.f64 (*.f64 (log.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 x #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))))) #s(literal -1 binary64)))","#s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))","(*.f64 (pow.f64 x #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))","(*.f64 (*.f64 x x) x)","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))","(*.f64 x (*.f64 x x))","(pow.f64 (exp.f64 (log.f64 x)) #s(literal 3 binary64))","(pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 3/2 binary64))","(pow.f64 x #s(literal 3 binary64))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal 3/2 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal 3 binary64)))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 x #s(literal -2 binary64))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (/.f64 #s(literal -1 binary64) (*.f64 x x)) (/.f64 (/.f64 #s(literal 2 binary64) x) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal -2 binary64) x) #s(literal 1 binary64)) (/.f64 (pow.f64 (neg.f64 x) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (/.f64 #s(literal 2 binary64) x) x))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -2 binary64) (*.f64 x x)))","(*.f64 (/.f64 (/.f64 #s(literal -2 binary64) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) #s(literal -1 binary64)) (/.f64 (neg.f64 (pow.f64 x #s(literal -1 binary64))) x))","(*.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (pow.f64 (/.f64 x (/.f64 #s(literal -2 binary64) x)) #s(literal -1 binary64)) (pow.f64 (neg.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 x x) #s(literal -2 binary64)) #s(literal -1 binary64)) (pow.f64 (neg.f64 x) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64))","(*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 1 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) x))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal 1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal 2 binary64) x) x))","(*.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) (/.f64 (pow.f64 (neg.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) (pow.f64 (neg.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal -2 binary64) (/.f64 (neg.f64 (pow.f64 x #s(literal -1 binary64))) (*.f64 x x)))","(*.f64 #s(literal -2 binary64) (pow.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -2 binary64) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -2 binary64) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (/.f64 #s(literal -2 binary64) x) (/.f64 (neg.f64 (pow.f64 x #s(literal -1 binary64))) x))","(*.f64 (/.f64 #s(literal -2 binary64) x) (/.f64 (pow.f64 (neg.f64 x) #s(literal -1 binary64)) x))","(*.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (*.f64 (neg.f64 x) x) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (/.f64 (neg.f64 (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64))","(*.f64 (/.f64 #s(literal 2 binary64) x) (/.f64 (neg.f64 (pow.f64 x #s(literal -1 binary64))) (*.f64 x #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal 2 binary64) x) (/.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (/.f64 x (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 x #s(literal -2 binary64)))","(*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -3 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","(pow.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -2 binary64) x) #s(literal 1 binary64))) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) (neg.f64 (*.f64 x #s(literal 1/2 binary64))))","(/.f64 (neg.f64 (pow.f64 x #s(literal -1 binary64))) (neg.f64 (/.f64 x (/.f64 #s(literal 2 binary64) x))))","(/.f64 (*.f64 (/.f64 #s(literal -2 binary64) x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))","(/.f64 (*.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 1 binary64)) (*.f64 x x))","(/.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 x #s(literal 1/2 binary64)))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (/.f64 #s(literal 2 binary64) x)))","(/.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) (neg.f64 x))","(/.f64 #s(literal -2 binary64) (neg.f64 (neg.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal -2 binary64) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (/.f64 #s(literal -2 binary64) x) (neg.f64 (neg.f64 (*.f64 (neg.f64 x) x))))","(/.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 (neg.f64 x) x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64))))","(/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (neg.f64 (neg.f64 x)))","(/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) x)","(/.f64 (/.f64 #s(literal 2 binary64) x) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x))","(/.f64 #s(literal 2 binary64) (neg.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64)))","(neg.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64))))","(neg.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)))","(exp.f64 (*.f64 (log.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (exp.f64 (log.f64 x)) (exp.f64 (log.f64 x)))","(*.f64 (neg.f64 x) (neg.f64 x))","(*.f64 (*.f64 x x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 x x))","(*.f64 x x)","(pow.f64 (exp.f64 (log.f64 x)) #s(literal 2 binary64))","(pow.f64 (neg.f64 x) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1 binary64))","(pow.f64 x #s(literal 2 binary64))","(exp.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 x #s(literal -2 binary64))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (/.f64 #s(literal -1 binary64) (*.f64 x x)) (/.f64 (/.f64 #s(literal 2 binary64) x) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal -2 binary64) x) #s(literal 1 binary64)) (/.f64 (pow.f64 (neg.f64 x) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (/.f64 #s(literal 2 binary64) x) x))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -2 binary64) (*.f64 x x)))","(*.f64 (/.f64 (/.f64 #s(literal -2 binary64) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) #s(literal -1 binary64)) (/.f64 (neg.f64 (pow.f64 x #s(literal -1 binary64))) x))","(*.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (pow.f64 (/.f64 x (/.f64 #s(literal -2 binary64) x)) #s(literal -1 binary64)) (pow.f64 (neg.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 x x) #s(literal -2 binary64)) #s(literal -1 binary64)) (pow.f64 (neg.f64 x) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64))","(*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 1 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) x))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal 1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal 2 binary64) x) x))","(*.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) (/.f64 (pow.f64 (neg.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) (pow.f64 (neg.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal -2 binary64) (/.f64 (neg.f64 (pow.f64 x #s(literal -1 binary64))) (*.f64 x x)))","(*.f64 #s(literal -2 binary64) (pow.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -2 binary64) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -2 binary64) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (/.f64 #s(literal -2 binary64) x) (/.f64 (neg.f64 (pow.f64 x #s(literal -1 binary64))) x))","(*.f64 (/.f64 #s(literal -2 binary64) x) (/.f64 (pow.f64 (neg.f64 x) #s(literal -1 binary64)) x))","(*.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (*.f64 (neg.f64 x) x) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (/.f64 (neg.f64 (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64))","(*.f64 (/.f64 #s(literal 2 binary64) x) (/.f64 (neg.f64 (pow.f64 x #s(literal -1 binary64))) (*.f64 x #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal 2 binary64) x) (/.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (/.f64 x (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 x #s(literal -2 binary64)))","(*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -3 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","(pow.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -2 binary64) x) #s(literal 1 binary64))) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) (neg.f64 (*.f64 x #s(literal 1/2 binary64))))","(/.f64 (neg.f64 (pow.f64 x #s(literal -1 binary64))) (neg.f64 (/.f64 x (/.f64 #s(literal 2 binary64) x))))","(/.f64 (*.f64 (/.f64 #s(literal -2 binary64) x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))","(/.f64 (*.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 1 binary64)) (*.f64 x x))","(/.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 x #s(literal 1/2 binary64)))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (/.f64 #s(literal 2 binary64) x)))","(/.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) (neg.f64 x))","(/.f64 #s(literal -2 binary64) (neg.f64 (neg.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal -2 binary64) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (/.f64 #s(literal -2 binary64) x) (neg.f64 (neg.f64 (*.f64 (neg.f64 x) x))))","(/.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 (neg.f64 x) x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64))))","(/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (neg.f64 (neg.f64 x)))","(/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) x)","(/.f64 (/.f64 #s(literal 2 binary64) x) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x))","(/.f64 #s(literal 2 binary64) (neg.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64)))","(neg.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64))))","(neg.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)))","(exp.f64 (*.f64 (log.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64))) #s(literal -1 binary64)))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","(*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 2 binary64))","(*.f64 #s(literal -2 binary64) (pow.f64 (neg.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) x))","(pow.f64 (/.f64 (*.f64 x #s(literal 1/2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 x #s(literal 1/2 binary64)) #s(literal -1 binary64))","(/.f64 #s(literal -2 binary64) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 #s(literal -2 binary64) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 x #s(literal 1/2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 x #s(literal 1/2 binary64))))","(/.f64 #s(literal 2 binary64) (neg.f64 (neg.f64 x)))","(/.f64 #s(literal 2 binary64) x)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64)))","(neg.f64 (/.f64 #s(literal -2 binary64) x))","(exp.f64 (*.f64 (log.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 x #s(literal -2 binary64))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (/.f64 #s(literal -1 binary64) (*.f64 x x)) (/.f64 (/.f64 #s(literal 2 binary64) x) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal -2 binary64) x) #s(literal 1 binary64)) (/.f64 (pow.f64 (neg.f64 x) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (/.f64 #s(literal 2 binary64) x) x))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -2 binary64) (*.f64 x x)))","(*.f64 (/.f64 (/.f64 #s(literal -2 binary64) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) #s(literal -1 binary64)) (/.f64 (neg.f64 (pow.f64 x #s(literal -1 binary64))) x))","(*.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (pow.f64 (/.f64 x (/.f64 #s(literal -2 binary64) x)) #s(literal -1 binary64)) (pow.f64 (neg.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 x x) #s(literal -2 binary64)) #s(literal -1 binary64)) (pow.f64 (neg.f64 x) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64))","(*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 1 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) x))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal 1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal 2 binary64) x) x))","(*.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) (/.f64 (pow.f64 (neg.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) (pow.f64 (neg.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal -2 binary64) (/.f64 (neg.f64 (pow.f64 x #s(literal -1 binary64))) (*.f64 x x)))","(*.f64 #s(literal -2 binary64) (pow.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -2 binary64) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -2 binary64) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (/.f64 #s(literal -2 binary64) x) (/.f64 (neg.f64 (pow.f64 x #s(literal -1 binary64))) x))","(*.f64 (/.f64 #s(literal -2 binary64) x) (/.f64 (pow.f64 (neg.f64 x) #s(literal -1 binary64)) x))","(*.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (*.f64 (neg.f64 x) x) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (/.f64 (neg.f64 (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64))","(*.f64 (/.f64 #s(literal 2 binary64) x) (/.f64 (neg.f64 (pow.f64 x #s(literal -1 binary64))) (*.f64 x #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal 2 binary64) x) (/.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (/.f64 x (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 x #s(literal -2 binary64)))","(*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -3 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","(pow.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -2 binary64) x) #s(literal 1 binary64))) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) (neg.f64 (*.f64 x #s(literal 1/2 binary64))))","(/.f64 (neg.f64 (pow.f64 x #s(literal -1 binary64))) (neg.f64 (/.f64 x (/.f64 #s(literal 2 binary64) x))))","(/.f64 (*.f64 (/.f64 #s(literal -2 binary64) x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))","(/.f64 (*.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 1 binary64)) (*.f64 x x))","(/.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 x #s(literal 1/2 binary64)))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (/.f64 #s(literal 2 binary64) x)))","(/.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) (neg.f64 x))","(/.f64 #s(literal -2 binary64) (neg.f64 (neg.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal -2 binary64) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (/.f64 #s(literal -2 binary64) x) (neg.f64 (neg.f64 (*.f64 (neg.f64 x) x))))","(/.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 (neg.f64 x) x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64))))","(/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (neg.f64 (neg.f64 x)))","(/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) x)","(/.f64 (/.f64 #s(literal 2 binary64) x) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x))","(/.f64 #s(literal 2 binary64) (neg.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64)))","(neg.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64))))","(neg.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)))","(exp.f64 (*.f64 (log.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64))) #s(literal -1 binary64)))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) x))","(*.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x #s(literal -2 binary64)) #s(literal -1 binary64)) (pow.f64 (neg.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal 2 binary64) x))","(*.f64 #s(literal -2 binary64) (/.f64 (neg.f64 (pow.f64 x #s(literal -1 binary64))) x))","(*.f64 #s(literal -2 binary64) (/.f64 (pow.f64 (neg.f64 x) #s(literal -1 binary64)) x))","(*.f64 (/.f64 #s(literal -2 binary64) x) (/.f64 (pow.f64 (neg.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (neg.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal 1 binary64))","(*.f64 (/.f64 #s(literal 2 binary64) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -2 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 2 binary64) x) x))","(pow.f64 (/.f64 (*.f64 x x) #s(literal 2 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 x (/.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 x (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (pow.f64 x #s(literal -1 binary64))) (neg.f64 (*.f64 x #s(literal 1/2 binary64))))","(/.f64 (*.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 1 binary64)) x)","(/.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64)))","(/.f64 #s(literal -2 binary64) (*.f64 (neg.f64 x) x))","(/.f64 (/.f64 #s(literal -2 binary64) x) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 (/.f64 #s(literal -2 binary64) x) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 x (/.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 x x) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (/.f64 #s(literal 2 binary64) x))))","(/.f64 (/.f64 #s(literal 2 binary64) x) (neg.f64 (neg.f64 x)))","(/.f64 (/.f64 #s(literal 2 binary64) x) x)","(/.f64 #s(literal 2 binary64) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 x (/.f64 #s(literal 2 binary64) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) #s(literal 2 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (/.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 x (/.f64 #s(literal 2 binary64) x)))","(neg.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (/.f64 #s(literal -2 binary64) (*.f64 x x)))","(exp.f64 (*.f64 (log.f64 (/.f64 x (/.f64 #s(literal 2 binary64) x))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (pow.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)))) (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (-.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)))) (neg.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)))) (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)))) (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))))","(fma.f64 (/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))) (fma.f64 x x x))","(fma.f64 (/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))","(fma.f64 (/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (fma.f64 x x x))","(fma.f64 (/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (fma.f64 x x x))","(fma.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))) (fma.f64 x x x))","(fma.f64 (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 x #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (+.f64 #s(literal 1 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 x (-.f64 x #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (+.f64 #s(literal 1 binary64) x)) (fma.f64 x x x))","(fma.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 x (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 (fma.f64 x x x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 (fma.f64 x x x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 (fma.f64 x x x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 (fma.f64 x x x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 (fma.f64 x x x) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 (fma.f64 x x x) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 (fma.f64 x x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 (fma.f64 x x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))) (+.f64 #s(literal 1 binary64) x) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 x #s(literal 1 binary64))) (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 x #s(literal 1 binary64))) (/.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (fma.f64 x x #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) x) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 (fma.f64 x x x) (-.f64 x #s(literal 1 binary64))) (/.f64 (*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 (fma.f64 x x x) (-.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (fma.f64 x x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (fma.f64 x x x) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (fma.f64 x x x) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (/.f64 (fma.f64 x x x) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (fma.f64 x x x) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 x (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (+.f64 #s(literal 1 binary64) x) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 x (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 x (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (+.f64 #s(literal 1 binary64) x)) (fma.f64 x x x))","(fma.f64 (/.f64 x (-.f64 x #s(literal 1 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 x (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (fma.f64 x x x))","(fma.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (/.f64 x (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (fma.f64 x x x))","(fma.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (+.f64 #s(literal 1 binary64) x)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (fma.f64 x x x))","(fma.f64 (/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (fma.f64 x x x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (fma.f64 x x x) #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (+.f64 #s(literal 1 binary64) x) x (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64)) (fma.f64 x x x))","(fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (fma.f64 x x x))","(fma.f64 #s(literal 1 binary64) (fma.f64 x x x) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 x (+.f64 #s(literal 1 binary64) x) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))) (/.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))))","(-.f64 (/.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))))","(+.f64 (fma.f64 x x x) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))","(+.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))","(*.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64))) (pow.f64 (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x) (*.f64 x x)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x) (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (fma.f64 #s(literal -8 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 #s(literal 4 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (-.f64 (*.f64 x x) (*.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x) (*.f64 x x)))))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 x x (-.f64 (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64)) (*.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))))","(/.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64))) (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64)) (*.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))))))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 3 binary64))) (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x) (*.f64 x x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x) (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x) (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 3 binary64)))))","(fma.f64 (/.f64 #s(literal -2 binary64) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (+.f64 #s(literal 1 binary64) x) x)","(fma.f64 (/.f64 #s(literal -2 binary64) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) x)","(fma.f64 (/.f64 #s(literal -2 binary64) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) x)","(fma.f64 (/.f64 #s(literal -2 binary64) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) x)","(fma.f64 (/.f64 #s(literal -2 binary64) (-.f64 x #s(literal 1 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 2 binary64) x)","(fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x)","(fma.f64 #s(literal -1 binary64) (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) x)","(fma.f64 #s(literal 2 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x)","(fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x)","(fma.f64 #s(literal 1 binary64) x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)))","(fma.f64 x #s(literal 1 binary64) (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)))) (/.f64 (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)))))","(-.f64 (-.f64 x (*.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))","(-.f64 (/.f64 (*.f64 x x) (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x)) (/.f64 (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x)))","(-.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x) (*.f64 x x))) (/.f64 (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x) (*.f64 x x))))","(-.f64 x (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)))","(+.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x)","(+.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (+.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (+.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (+.f64 #s(literal 1 binary64) x)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))","(*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)))","(*.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64)))","(*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x))","(/.f64 (+.f64 (pow.f64 (*.f64 x (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x)) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -1 binary64) (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x)) #s(literal 3 binary64))) (fma.f64 (*.f64 x (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x)) (*.f64 x (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x)) (-.f64 (*.f64 (*.f64 #s(literal -1 binary64) (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x)) (*.f64 #s(literal -1 binary64) (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x))) (*.f64 (*.f64 x (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x)) (*.f64 #s(literal -1 binary64) (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) x) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) x) (-.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) x) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) #s(literal -1 binary64))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) #s(literal 3 binary64)) (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) #s(literal 3 binary64))) (fma.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) x) (-.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)))) (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)))))))","(/.f64 (+.f64 (pow.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) (*.f64 x (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) (-.f64 x #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) (-.f64 x #s(literal 1 binary64)))) (*.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) (-.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64)))) (neg.f64 (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 3 binary64))) (-.f64 x #s(literal 1 binary64)))) (neg.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x) (*.f64 x x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x))) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (fma.f64 x x #s(literal -1 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64))))) (neg.f64 (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x) (*.f64 x x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64))) (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (*.f64 (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x) (+.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 3 binary64))) (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x) (*.f64 x x)) (+.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 3 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x) (*.f64 x x)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64))))) (neg.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 3 binary64))))) (neg.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x) (*.f64 x x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64))))) (neg.f64 (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 3 binary64))))) (neg.f64 (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x) (*.f64 x x)))))","(/.f64 (*.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64))) (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 3 binary64))) (-.f64 x #s(literal 1 binary64))) (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x) (*.f64 x x)))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x)) (+.f64 #s(literal 1 binary64) x))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (fma.f64 x x #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) x))","(/.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64)))) (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x))","(/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 3 binary64)))) (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x) (*.f64 x x)))","(/.f64 (*.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64))) (fma.f64 x x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x) (+.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 3 binary64))) (fma.f64 x x #s(literal -1 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x) (*.f64 x x)) (+.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 3 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x) (*.f64 x x)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64)))) (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x)))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 3 binary64)))) (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x) (*.f64 x x))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64)))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 3 binary64)))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x) (*.f64 x x))))","(fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) x (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) #s(literal -1 binary64)))","(fma.f64 (-.f64 x #s(literal 1 binary64)) x (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))))","(fma.f64 x (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (*.f64 #s(literal -1 binary64) (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x)))","(fma.f64 x (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) (-.f64 x #s(literal 1 binary64))))","(+.f64 (*.f64 x (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x)) (*.f64 #s(literal -1 binary64) (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x)))","(+.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) x) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) #s(literal -1 binary64)))","(+.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))))","(+.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (*.f64 (-.f64 x #s(literal 1 binary64)) x)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64)) (/.f64 (fma.f64 x x #s(literal 1 binary64)) x))","(*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) x) (/.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64))) #s(literal 1 binary64)) (/.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)) x))","(*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64))) x) (/.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)) #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)) (/.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (/.f64 #s(literal 1 binary64) (*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))))","(*.f64 (/.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) x)) (/.f64 (pow.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (pow.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (fma.f64 x x x)) (/.f64 (pow.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (fma.f64 x x x)) (/.f64 (pow.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)) (/.f64 (pow.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) x) (/.f64 (pow.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) x)) (/.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (fma.f64 x x x)) (/.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))))","(*.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (fma.f64 x x x)) (/.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)) (/.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)))","(*.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) x) (/.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (neg.f64 x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (+.f64 #s(literal 1 binary64) x)) (/.f64 (pow.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (+.f64 #s(literal 1 binary64) x)) (/.f64 (pow.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)) (*.f64 x (-.f64 x #s(literal 1 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64))) (/.f64 (pow.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)) (fma.f64 x x x)))","(*.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) x)) (/.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) x)))","(*.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) x)) (/.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 x (-.f64 x #s(literal 1 binary64)))))","(*.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (-.f64 x #s(literal 1 binary64))) (/.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) #s(literal -1 binary64)) (fma.f64 x x x)))","(*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 x x x)) (/.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (neg.f64 (fma.f64 x x #s(literal -1 binary64)))))","(*.f64 (pow.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) x) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) x) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (+.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 x #s(literal 1 binary64)) x)))","(*.f64 (/.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (+.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) (*.f64 x (-.f64 x #s(literal 1 binary64)))))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 x (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) x))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (/.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64))) (/.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (neg.f64 (fma.f64 x x x))))","(*.f64 (/.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x) (pow.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x) (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))))","(*.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64))) (pow.f64 (+.f64 (/.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))) (pow.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (/.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)))) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))))","(*.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal 1 binary64))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)))","(*.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(pow.f64 (/.f64 x (/.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (/.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal 3 binary64)) (*.f64 #s(literal -8 binary64) (pow.f64 x #s(literal -3 binary64)))) (fma.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 (pow.f64 (/.f64 #s(literal -2 binary64) x) #s(literal 2 binary64)) (*.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (/.f64 #s(literal -2 binary64) x)))))","(/.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (pow.f64 (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (-.f64 (*.f64 (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))))","(/.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (pow.f64 (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (-.f64 (*.f64 (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))))","(/.f64 (neg.f64 (/.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) x)) (neg.f64 (fma.f64 x x #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x))) (neg.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x))) (neg.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) #s(literal 1 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)))) (neg.f64 (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (+.f64 (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))))) (neg.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))) (neg.f64 (neg.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (+.f64 (/.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal -2 binary64) x) #s(literal 2 binary64)))))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (+.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 x x x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x)))) (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal -2 binary64) x) #s(literal 2 binary64)))))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal -2 binary64) x) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64)))) (neg.f64 (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal -2 binary64) x) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal 1 binary64)))) (neg.f64 (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) #s(literal -1 binary64)))) (neg.f64 (*.f64 (+.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) #s(literal 1 binary64)))) (neg.f64 (*.f64 (+.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (fma.f64 x x x) #s(literal -1 binary64)))) (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x))))","(/.f64 (/.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) x) (fma.f64 x x #s(literal -1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x)) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x)) (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))","(/.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64))) (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (+.f64 (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (/.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 x))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)))) (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (neg.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (/.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)))) (neg.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal -2 binary64) x) #s(literal 2 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (+.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 x x x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal -2 binary64) x) #s(literal 2 binary64))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal -2 binary64) x) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64))) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal -2 binary64) x) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal 1 binary64))) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) #s(literal -1 binary64))) (*.f64 (+.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) #s(literal 1 binary64))) (*.f64 (+.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (fma.f64 x x x) #s(literal -1 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (/.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) x)","(/.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))))","(/.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64))))))","(/.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64))) (+.f64 (/.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))))","(/.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (/.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (/.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64))))","(/.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 x (/.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (/.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)))","(neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(neg.f64 (/.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x))))","(fma.f64 (/.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64))) (fma.f64 x x x)) (/.f64 (pow.f64 (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64))) (+.f64 #s(literal 1 binary64) x)) (/.f64 (pow.f64 (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x) #s(literal -1 binary64)) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x) #s(literal -1 binary64)) (fma.f64 x x x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64))) x) (/.f64 (pow.f64 (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 3 binary64))) (fma.f64 x x x)) (/.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x) (*.f64 x x)) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) x)) (/.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x) (*.f64 x x)) #s(literal -1 binary64)) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x) (*.f64 x x)) #s(literal -1 binary64)) (fma.f64 x x x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 3 binary64))) x) (/.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) x) x) (*.f64 x x)) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) x) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal -2 binary64) x) #s(literal 2 binary64))) (pow.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (pow.f64 (+.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 #s(literal 1 binary64) x)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 #s(literal 1 binary64) x)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64))) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(-.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))) (/.f64 (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(-.f64 (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))) (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))))","(-.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (+.f64 (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))) (/.f64 (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 3 binary64)) (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (+.f64 (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)))))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)))))))","(-.f64 (/.f64 (/.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)) (/.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64))))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x))) (/.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x))))","(-.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (/.f64 #s(literal 2 binary64) x))","(-.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (/.f64 #s(literal -2 binary64) x))","(+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(+.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(*.f64 (/.f64 (fma.f64 x x x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (fma.f64 x x x) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 x x x) (+.f64 #s(literal 1 binary64) x)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (fma.f64 x x x) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (fma.f64 x x x) (+.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (fma.f64 x x x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 x x x) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 x x x) #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 x x x) (+.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (fma.f64 x x x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (fma.f64 x x x) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (+.f64 #s(literal 1 binary64) x))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) x)","(*.f64 (fma.f64 x x x) (*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(*.f64 (fma.f64 x x x) (-.f64 x #s(literal 1 binary64)))","(*.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(*.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 x (-.f64 x #s(literal 1 binary64))))","(*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) #s(literal 1 binary64))","(*.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))","(*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(*.f64 x (fma.f64 x x #s(literal -1 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 x (fma.f64 x x x)) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -1 binary64) (fma.f64 x x x)) #s(literal 3 binary64))) (fma.f64 (*.f64 x (fma.f64 x x x)) (*.f64 x (fma.f64 x x x)) (-.f64 (*.f64 (*.f64 #s(literal -1 binary64) (fma.f64 x x x)) (*.f64 #s(literal -1 binary64) (fma.f64 x x x))) (*.f64 (*.f64 x (fma.f64 x x x)) (*.f64 #s(literal -1 binary64) (fma.f64 x x x))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x x x) x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 x x x) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 (fma.f64 x x x) x) (*.f64 (fma.f64 x x x) x) (-.f64 (*.f64 (*.f64 (fma.f64 x x x) #s(literal -1 binary64)) (*.f64 (fma.f64 x x x) #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 x x x) x) (*.f64 (fma.f64 x x x) #s(literal -1 binary64))))))","(/.f64 (+.f64 (pow.f64 (*.f64 x #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 9 binary64))) (fma.f64 (*.f64 x #s(literal -1 binary64)) (*.f64 x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 6 binary64)) (*.f64 (*.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 9 binary64))) (fma.f64 x x (-.f64 (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) (pow.f64 (*.f64 x #s(literal -1 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal 6 binary64)) (-.f64 (*.f64 (*.f64 x #s(literal -1 binary64)) (*.f64 x #s(literal -1 binary64))) (*.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 x #s(literal -1 binary64))))))","(/.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal 6 binary64)) (-.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 x)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x x))) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) x)) (neg.f64 (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)) x)) (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x x) (fma.f64 x x #s(literal -1 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 x (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 x (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) (+.f64 #s(literal 1 binary64) x))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) x) (fma.f64 x x #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)) x) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 (*.f64 (fma.f64 x x x) (fma.f64 x x #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) x))","(/.f64 (*.f64 (fma.f64 x x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 x (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (fma.f64 x x #s(literal 1 binary64)))","(/.f64 (*.f64 x (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))","(fma.f64 (pow.f64 x #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)) (*.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 x #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)) (neg.f64 x))","(fma.f64 (fma.f64 x x x) x (*.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) x (pow.f64 x #s(literal 3 binary64)))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64) (*.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64) (neg.f64 x))","(fma.f64 (*.f64 x x) x (*.f64 x #s(literal -1 binary64)))","(fma.f64 (*.f64 x x) x (neg.f64 x))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)) (*.f64 x #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)) (neg.f64 x))","(fma.f64 x (fma.f64 x x x) (*.f64 #s(literal -1 binary64) (fma.f64 x x x)))","(fma.f64 x #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))","(fma.f64 x (*.f64 x x) (*.f64 x #s(literal -1 binary64)))","(fma.f64 x (*.f64 x x) (neg.f64 x))","(+.f64 (*.f64 x (fma.f64 x x x)) (*.f64 #s(literal -1 binary64) (fma.f64 x x x)))","(+.f64 (*.f64 (fma.f64 x x x) x) (*.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(+.f64 (*.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal 3 binary64)))","(+.f64 (neg.f64 x) (pow.f64 x #s(literal 3 binary64)))","(+.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 x #s(literal -1 binary64)))","(+.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 x))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":322.550048828125,"type":"rewrite"},{"compiler":[[29430,2588]],"memory":[[5943744,69202896]],"time":92.248046875,"type":"eval"},{"alts":[["(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64)))","next",0.15234375,"binary64"],["(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64))) x)","fresh",0.1484375,"binary64"],["(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))","next",0.14453125,"binary64"],["(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (fma.f64 x x x) (-.f64 x #s(literal 1 binary64))))","fresh",0.48310191190683005,"binary64"],["(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","next",0.47919566190683005,"binary64"],["(*.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x x)) (+.f64 #s(literal 1 binary64) x))","fresh",5.923899739504624,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) x))","done",0.7666259019159771,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) x))","next",0.7900666610736631,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x)))","done",0.7861571355562907,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (*.f64 (*.f64 x x) x)))","done",1.1247310729804931,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))","done",60.79444651831434,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","next",0.6611604274333495,"binary64"]],"compiler":[[30,18],[28,17],[30,18],[30,18],[28,17],[35,21],[23,15],[23,15],[23,15],[23,15],[19,13],[21,15],[30,18],[28,17],[30,18],[30,18],[28,17],[35,21],[23,15],[21,15]],"count":[[858,12]],"kept":[{"done":[1,1],"fresh":[2,1],"new":[850,7],"picked":[5,3]}],"memory":[[461152,35650304]],"min-error":[[0.0,"binary64"]],"time":18.932861328125,"type":"prune"},{"egraph":[[0,8069,151,0.094625199],[7,7867,151,0.01083051],[6,6055,151,0.022149637],[5,3929,151,0.019683235],[4,1522,151,0.016587272],[3,558,247,0.004840376],[2,238,275,0.002090564],[1,95,275,0.00083885],[0,50,285,0.000538427],[0,35,307,0.000271931]],"inputs":[["(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))","(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64)))","#s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))","#s(literal 2 binary64)","(-.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(fma.f64 x x x)","(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","#s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))","#s(literal 2 binary64)","(*.f64 (fma.f64 x x #s(literal -1 binary64)) x)","(fma.f64 x x #s(literal -1 binary64))","x","#s(literal -1 binary64)","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) x))","(/.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) x)","(/.f64 #s(literal 2 binary64) (*.f64 x x))","#s(literal 2 binary64)","(*.f64 x x)","x","(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64)))","(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x))","#s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))","#s(literal 2 binary64)","(fma.f64 x x x)","x","(-.f64 x #s(literal 1 binary64))","#s(literal 1 binary64)","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64))","(pow.f64 x #s(literal -3 binary64))","x","#s(literal -3 binary64)","#s(literal 2 binary64)"]],"locations":[["(pow.f64 x #s(literal -3 binary64))","cost-diff",0],["(*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64))","cost-diff",0],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","cost-diff",0],["(fma.f64 x x x)","cost-diff",0],["#s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))","cost-diff",0],["(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x))","cost-diff",0],["(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64)))","cost-diff",3],["(*.f64 x x)","cost-diff",0],["(/.f64 #s(literal 2 binary64) (*.f64 x x))","cost-diff",0],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) x))","cost-diff",0],["(/.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) x)","cost-diff",2],["(fma.f64 x x #s(literal -1 binary64))","cost-diff",0],["#s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))","cost-diff",0],["(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","cost-diff",0],["(*.f64 (fma.f64 x x #s(literal -1 binary64)) x)","cost-diff",1],["(-.f64 x #s(literal 1 binary64))","cost-diff",0],["#s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))","cost-diff",0],["(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64)))","cost-diff",0],["(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))","cost-diff",3]],"memory":[[-5505984,41172864]],"method":["egg-herbie"],"outputs":[["(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))","(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) x))","(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64)))","#s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))","#s(literal 2 binary64)","(-.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(fma.f64 x x x)","(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) x))","#s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))","#s(literal 2 binary64)","(*.f64 (fma.f64 x x #s(literal -1 binary64)) x)","(-.f64 (pow.f64 x #s(literal 3 binary64)) x)","(fma.f64 x x #s(literal -1 binary64))","x","#s(literal -1 binary64)","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) x))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) x)","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(/.f64 (/.f64 #s(literal 2 binary64) x) x)","#s(literal 2 binary64)","(*.f64 x x)","x","(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64)))","(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) x))","(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x))","#s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))","#s(literal 2 binary64)","(fma.f64 x x x)","x","(-.f64 x #s(literal 1 binary64))","#s(literal 1 binary64)","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64))","(pow.f64 x #s(literal -3 binary64))","x","#s(literal -3 binary64)","#s(literal 2 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":314.80810546875,"type":"simplify"},{"compiler":[[287,33]],"locations":[["(pow.f64 x #s(literal -3 binary64))","accuracy",0.0],["(*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64))","accuracy",0.0078125],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","accuracy",0.6533479274333495],["(-.f64 x #s(literal 1 binary64))","accuracy",0.0],["#s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))","accuracy",0.0],["(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64)))","accuracy",0.08984375],["(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x))","accuracy",0.9066406384198347],["(*.f64 x x)","accuracy",0.0],["(/.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) x)","accuracy",0.0859375],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) x))","accuracy",0.6533479274333495],["(/.f64 #s(literal 2 binary64) (*.f64 x x))","accuracy",0.9066406384198347],["(fma.f64 x x #s(literal -1 binary64))","accuracy",0.0],["#s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))","accuracy",0.0],["(*.f64 (fma.f64 x x #s(literal -1 binary64)) x)","accuracy",0.10546875],["(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","accuracy",0.43394190213838807],["(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64)))","accuracy",0.0],["(-.f64 x #s(literal 1 binary64))","accuracy",0.0],["#s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))","accuracy",0.0],["(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))","accuracy",0.14453125]],"memory":[[1485056,49411648]],"mixsample":[[0.31884765625,"ival-add",1200],[0.43310546875,"ival-sub",1200],[17.267822265625,"adjust",800],[25.27197265625,"ival-div",0],[1.098876953125,"ival-mult",1200],[0.50341796875,"ival-sub",1600],[5.213623046875,"ival-div",400],[0.451416015625,"ival-sub",2000],[1.1806640625,"ival-mult",2000],[0.181640625,"ival-div",1600],[0.13525390625,"ival-assert",0],[3.86328125,"ival-sub",0],[1.08642578125,"ival-sub",400],[0.838134765625,"adjust",2000],[4.273681640625,"ival-pow",0],[0.29052734375,"ival-sub",2400],[10.585205078125,"ival-add",0],[1.44091796875,"ival-mult",800],[0.43994140625,"ival-add",1600],[0.135009765625,"ival-mult",400],[14.02490234375,"ival-mult",0],[0.53466796875,"ival-sub",800],[1.239013671875,"ival-mult",1600],[0.339599609375,"ival-add",2000],[0.004150390625,"ival-add",400],[0.228271484375,"ival-true",0],[0.825927734375,"ival-mult",2400],[0.24560546875,"ival-add",2400],[0.35595703125,"ival-add",800],[0.526611328125,"exact",0]],"outcomes":[[116.87890625,1,"valid",239],[8.395751953125,2,"valid",13],[0.906005859375,0,"valid",4]],"time":154.136962890625,"type":"localize"},{"count":[[17,46]],"inputs":[["(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))","(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64)))","#s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))","(-.f64 x #s(literal 1 binary64))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) x)","(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(fma.f64 x x #s(literal -1 binary64))","(/.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) x)","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) x))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(*.f64 x x)","(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64)))","(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x))","(fma.f64 x x x)","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64))","(pow.f64 x #s(literal -3 binary64))"]],"memory":[[-2419696,5451808]],"outputs":[["(/ -2 x)","(/ (- (* -2 (pow x 2)) 2) x)","(/ (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2) x)","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2)) 2) x)","-2","(- (* -2 x) 2)","(- (* x (- (* -2 x) 2)) 2)","(- (* x (- (* x (- (* -2 x) 2)) 2)) 2)","2","-1","(- x 1)","(* -1 x)","(* x (- (pow x 2) 1))","(- (pow x 2) 1)","(/ 2 (pow x 3))","(/ 2 (pow x 2))","(pow x 2)","(/ 2 x)","(/ (+ 2 (* -2 x)) x)","(/ (+ 2 (* x (- (* 2 x) 2))) x)","(/ (+ 2 (* x (- (* x (+ 2 (* -2 x))) 2))) x)","x","(* x (+ 1 x))","(/ 1 (pow x 3))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))) (pow x 3))","(/ (+ 2 (* 2 (/ 1 x))) x)","(/ (+ 2 (+ (* 2 (/ 1 x)) (/ 2 (pow x 2)))) x)","(/ (+ 2 (+ (* 2 (/ 1 x)) (+ (* 2 (/ 1 (pow x 3))) (/ 2 (pow x 2))))) x)","(* x (- 1 (/ 1 x)))","(pow x 3)","(* (pow x 3) (- 1 (/ 1 (pow x 2))))","(* (pow x 2) (- 1 (/ 1 (pow x 2))))","(/ (- 2 (* 2 (/ 1 x))) (pow x 2))","(/ (- (+ 2 (/ 2 (pow x 2))) (* 2 (/ 1 x))) (pow x 2))","(/ (- (+ 2 (/ 2 (pow x 2))) (+ (* 2 (/ 1 x)) (* 2 (/ 1 (pow x 3))))) (pow x 2))","(* (pow x 2) (+ 1 (/ 1 x)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 2))) 2) (pow x 3)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 4))) (+ 2 (* 2 (/ 1 (pow x 2))))) (pow x 3)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 x))) x)) 2) x))","(* -1 (/ (- (* -1 (/ (+ 2 (+ (* 2 (/ 1 x)) (/ 2 (pow x 2)))) x)) 2) x))","(* -1 (* x (- (/ 1 x) 1)))","(* -1 (* (pow x 3) (- (/ 1 (pow x 2)) 1)))","(/ (+ 2 (* -1 (/ (- 2 (* 2 (/ 1 x))) x))) (pow x 2))","(/ (+ 2 (* -1 (/ (+ 2 (* -1 (/ (- 2 (* 2 (/ 1 x))) x))) x))) (pow x 2))"]],"series":[[4.4541015625,"((/ (/ (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (- x 1)) (+ (* x x) x)) (/ (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (- x 1)) (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (- x 1) (* (+ (* x x) -1) x) (/ (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (* (+ (* x x) -1) x)) (+ (* x x) -1) (/ (/ 2 (* x x)) x) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ 2 (* x x)) (* x x) (/ (/ (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (+ (* x x) x)) (- x 1)) (/ (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (+ (* x x) x)) (+ (* x x) x) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (* (pow x -3) 2) (pow x -3))","x","-inf"],[2.781982421875,"((/ (/ (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (- x 1)) (+ (* x x) x)) (/ (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (- x 1)) (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (- x 1) (* (+ (* x x) -1) x) (/ (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (* (+ (* x x) -1) x)) (+ (* x x) -1) (/ (/ 2 (* x x)) x) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ 2 (* x x)) (* x x) (/ (/ (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (+ (* x x) x)) (- x 1)) (/ (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (+ (* x x) x)) (+ (* x x) x) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (* (pow x -3) 2) (pow x -3))","x","inf"],[2.238037109375,"((/ (/ (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (- x 1)) (+ (* x x) x)) (/ (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (- x 1)) (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (- x 1) (* (+ (* x x) -1) x) (/ (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (* (+ (* x x) -1) x)) (+ (* x x) -1) (/ (/ 2 (* x x)) x) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ 2 (* x x)) (* x x) (/ (/ (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (+ (* x x) x)) (- x 1)) (/ (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (+ (* x x) x)) (+ (* x x) x) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (* (pow x -3) 2) (pow x -3))","x","0"]],"time":10.549072265625,"type":"series"},{"count":[[46,45]],"egraph":[[0,8272,364,0.082977033],[3,2903,381,0.034816469],[2,877,404,0.010166398],[1,322,428,0.002962589],[0,123,435,0.000963633]],"inputs":[["(/ -2 x)","(/ (- (* -2 (pow x 2)) 2) x)","(/ (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2) x)","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2)) 2) x)","-2","(- (* -2 x) 2)","(- (* x (- (* -2 x) 2)) 2)","(- (* x (- (* x (- (* -2 x) 2)) 2)) 2)","2","-1","(- x 1)","(* -1 x)","(* x (- (pow x 2) 1))","(- (pow x 2) 1)","(/ 2 (pow x 3))","(/ 2 (pow x 2))","(pow x 2)","(/ 2 x)","(/ (+ 2 (* -2 x)) x)","(/ (+ 2 (* x (- (* 2 x) 2))) x)","(/ (+ 2 (* x (- (* x (+ 2 (* -2 x))) 2))) x)","x","(* x (+ 1 x))","(/ 1 (pow x 3))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))) (pow x 3))","(/ (+ 2 (* 2 (/ 1 x))) x)","(/ (+ 2 (+ (* 2 (/ 1 x)) (/ 2 (pow x 2)))) x)","(/ (+ 2 (+ (* 2 (/ 1 x)) (+ (* 2 (/ 1 (pow x 3))) (/ 2 (pow x 2))))) x)","(* x (- 1 (/ 1 x)))","(pow x 3)","(* (pow x 3) (- 1 (/ 1 (pow x 2))))","(* (pow x 2) (- 1 (/ 1 (pow x 2))))","(/ (- 2 (* 2 (/ 1 x))) (pow x 2))","(/ (- (+ 2 (/ 2 (pow x 2))) (* 2 (/ 1 x))) (pow x 2))","(/ (- (+ 2 (/ 2 (pow x 2))) (+ (* 2 (/ 1 x)) (* 2 (/ 1 (pow x 3))))) (pow x 2))","(* (pow x 2) (+ 1 (/ 1 x)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 2))) 2) (pow x 3)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 4))) (+ 2 (* 2 (/ 1 (pow x 2))))) (pow x 3)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 x))) x)) 2) x))","(* -1 (/ (- (* -1 (/ (+ 2 (+ (* 2 (/ 1 x)) (/ 2 (pow x 2)))) x)) 2) x))","(* -1 (* x (- (/ 1 x) 1)))","(* -1 (* (pow x 3) (- (/ 1 (pow x 2)) 1)))","(/ (+ 2 (* -1 (/ (- 2 (* 2 (/ 1 x))) x))) (pow x 2))","(/ (+ 2 (* -1 (/ (+ 2 (* -1 (/ (- 2 (* 2 (/ 1 x))) x))) x))) (pow x 2))"]],"memory":[[4864048,35590080]],"method":["egg-herbie"],"outputs":[["(/ -2 x)","(/.f64 #s(literal -2 binary64) x)","(/ (- (* -2 (pow x 2)) 2) x)","(fma.f64 #s(literal -2 binary64) x (/.f64 #s(literal -2 binary64) x))","(/ (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2) x)","(fma.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) x) #s(literal -2 binary64) (/.f64 #s(literal -2 binary64) x))","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2)) 2) x)","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (fma.f64 (*.f64 x x) #s(literal -2 binary64) #s(literal -2 binary64))) x)","-2","#s(literal -2 binary64)","(- (* -2 x) 2)","(fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))","(- (* x (- (* -2 x) 2)) 2)","(fma.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x #s(literal -2 binary64))","(- (* x (- (* x (- (* -2 x) 2)) 2)) 2)","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)))","2","#s(literal 2 binary64)","-1","#s(literal -1 binary64)","(- x 1)","(-.f64 x #s(literal 1 binary64))","(* -1 x)","(neg.f64 x)","(* x (- (pow x 2) 1))","(-.f64 (pow.f64 x #s(literal 3 binary64)) x)","(- (pow x 2) 1)","(fma.f64 x x #s(literal -1 binary64))","(/ 2 (pow x 3))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))","(/ 2 (pow x 2))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(pow x 2)","(*.f64 x x)","(/ 2 x)","(/.f64 #s(literal 2 binary64) x)","(/ (+ 2 (* -2 x)) x)","(/.f64 (fma.f64 #s(literal -2 binary64) x #s(literal 2 binary64)) x)","(/ (+ 2 (* x (- (* 2 x) 2))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal -2 binary64)) x #s(literal 2 binary64)) x)","(/ (+ 2 (* x (- (* x (+ 2 (* -2 x))) 2))) x)","(/.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 #s(literal -2 binary64) x #s(literal 2 binary64))) x)","x","(* x (+ 1 x))","(fma.f64 x x x)","(/ 1 (pow x 3))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 3))","(/.f64 (+.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal 2 binary64)) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))) (pow x 3))","(/.f64 (+.f64 (+.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 2 binary64)) (/.f64 #s(literal 2 binary64) (*.f64 x x))) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))) (pow x 3))","(/.f64 (+.f64 (+.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 2 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) (/.f64 #s(literal 2 binary64) (*.f64 x x)))) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 2 (* 2 (/ 1 x))) x)","(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) #s(literal -2 binary64)) x)","(/ (+ 2 (+ (* 2 (/ 1 x)) (/ 2 (pow x 2)))) x)","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) #s(literal -2 binary64)) x) #s(literal -2 binary64)) x)","(/ (+ 2 (+ (* 2 (/ 1 x)) (+ (* 2 (/ 1 (pow x 3))) (/ 2 (pow x 2))))) x)","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) #s(literal -2 binary64)) x) #s(literal -2 binary64)) x) #s(literal -2 binary64)) x)","(* x (- 1 (/ 1 x)))","(-.f64 x #s(literal 1 binary64))","(pow x 3)","(pow.f64 x #s(literal 3 binary64))","(* (pow x 3) (- 1 (/ 1 (pow x 2))))","(-.f64 (pow.f64 x #s(literal 3 binary64)) x)","(* (pow x 2) (- 1 (/ 1 (pow x 2))))","(fma.f64 x x #s(literal -1 binary64))","(/ (- 2 (* 2 (/ 1 x))) (pow x 2))","(/.f64 (/.f64 (-.f64 #s(literal 2 binary64) (/.f64 #s(literal 2 binary64) x)) x) x)","(/ (- (+ 2 (/ 2 (pow x 2))) (* 2 (/ 1 x))) (pow x 2))","(/.f64 (-.f64 #s(literal 2 binary64) (/.f64 (-.f64 #s(literal 2 binary64) (/.f64 #s(literal 2 binary64) x)) x)) (*.f64 x x))","(/ (- (+ 2 (/ 2 (pow x 2))) (+ (* 2 (/ 1 x)) (* 2 (/ 1 (pow x 3))))) (pow x 2))","(*.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64)) x) (/.f64 (-.f64 #s(literal 2 binary64) (/.f64 #s(literal 2 binary64) x)) x))","(* (pow x 2) (+ 1 (/ 1 x)))","(fma.f64 x x x)","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 2))) 2) (pow x 3)))","(/.f64 (-.f64 (/.f64 (/.f64 (+.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal 2 binary64)) x) x) #s(literal -2 binary64)) (pow.f64 x #s(literal 3 binary64)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 4))) (+ 2 (* 2 (/ 1 (pow x 2))))) (pow x 3)))","(/.f64 (*.f64 (+.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 x))) x)) 2) x))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) #s(literal -2 binary64)) x) #s(literal -2 binary64)) x)","(* -1 (/ (- (* -1 (/ (+ 2 (+ (* 2 (/ 1 x)) (/ 2 (pow x 2)))) x)) 2) x))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) #s(literal -2 binary64)) x) #s(literal -2 binary64)) x) #s(literal -2 binary64)) x)","(* -1 (* x (- (/ 1 x) 1)))","(-.f64 x #s(literal 1 binary64))","(* -1 (* (pow x 3) (- (/ 1 (pow x 2)) 1)))","(-.f64 (pow.f64 x #s(literal 3 binary64)) x)","(/ (+ 2 (* -1 (/ (- 2 (* 2 (/ 1 x))) x))) (pow x 2))","(/.f64 (-.f64 #s(literal 2 binary64) (/.f64 (-.f64 #s(literal 2 binary64) (/.f64 #s(literal 2 binary64) x)) x)) (*.f64 x x))","(/ (+ 2 (* -1 (/ (+ 2 (* -1 (/ (- 2 (* 2 (/ 1 x))) x))) x))) (pow x 2))","(*.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64)) x) (/.f64 (-.f64 #s(literal 2 binary64) (/.f64 #s(literal 2 binary64) x)) x))"]],"stop":[["iter limit",1],["node limit",1]],"time":219.932861328125,"type":"simplify"},{"count":[[17,778]],"egraph":[[0,8437,204,0.093891932],[2,2440,218,0.031821864],[1,250,218,0.008144178],[0,50,232,0.001696519],[0,35,244,0.000260079]],"inputs":[["(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))","(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64)))","#s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))","(-.f64 x #s(literal 1 binary64))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) x)","(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(fma.f64 x x #s(literal -1 binary64))","(/.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) x)","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) x))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(*.f64 x x)","(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64)))","(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x))","(fma.f64 x x x)","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64))","(pow.f64 x #s(literal -3 binary64))"]],"memory":[[-5720608,64228720]],"outputs":[["(*.f64 (pow.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (neg.f64 (fma.f64 x x x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 x x x) (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64))))","(*.f64 (pow.f64 (/.f64 x #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 x (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 (fma.f64 x x x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (fma.f64 x x (neg.f64 x)))","(*.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 x #s(literal 1 binary64))))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 x #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (+.f64 x #s(literal 1 binary64))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) x) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x x)))","(*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) #s(literal -1 binary64)) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64))) (pow.f64 (neg.f64 (fma.f64 x x x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (fma.f64 x x x)) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64))))","(*.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (pow.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (/.f64 x (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x x)))","(*.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) x) (fma.f64 x x #s(literal -1 binary64))))","(pow.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 x #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 x (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64)))) #s(literal -1 binary64))","(pow.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 x #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64)))) (neg.f64 x))","(/.f64 (neg.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) x)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (neg.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x x)))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x x)))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) #s(literal -1 binary64))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (neg.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) x)) (neg.f64 (fma.f64 x x #s(literal -1 binary64))))","(/.f64 (neg.f64 (neg.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64))))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (neg.f64 (fma.f64 x x x)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (neg.f64 (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (fma.f64 x x x))))","(/.f64 (neg.f64 (*.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 x x x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (neg.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) x) (fma.f64 x x #s(literal -1 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))))","(/.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64))) x)","(/.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) x) (+.f64 x #s(literal 1 binary64)))","(/.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64)) (fma.f64 x x x))","(/.f64 (*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64)) (fma.f64 x x x))","(/.f64 (*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (neg.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) (neg.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 (fma.f64 x x x) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))))","(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) x) (fma.f64 x x #s(literal -1 binary64)))","(/.f64 (neg.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 x))","(/.f64 (neg.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 (fma.f64 x x x)))))","(/.f64 (neg.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))) (neg.f64 (*.f64 (fma.f64 x x x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))) (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x))))","(/.f64 (*.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 x x x)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (fma.f64 x x x)))","(/.f64 (*.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) #s(literal -1 binary64)) (*.f64 (fma.f64 x x x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (*.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64))) x)","(/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (/.f64 (-.f64 x #s(literal 1 binary64)) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))))","(/.f64 (/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64))) (neg.f64 (neg.f64 (neg.f64 (fma.f64 x x x)))))","(/.f64 (/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64))) (neg.f64 (fma.f64 x x x)))","(/.f64 (/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (fma.f64 x x x)) (neg.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (fma.f64 x x x)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 (fma.f64 x x x))))","(/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (*.f64 (fma.f64 x x x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) x) (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64))","(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 x x x) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 x #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 x #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (*.f64 (/.f64 (fma.f64 x x x) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) (neg.f64 (neg.f64 (fma.f64 x x x))))","(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))","(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 x #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (/.f64 (fma.f64 x x x) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 x #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 x (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 x #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))))","(neg.f64 (/.f64 (/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)))","(neg.f64 (/.f64 (/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))))","(neg.f64 (/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)))","(neg.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (fma.f64 x x x))) (/.f64 (/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)))","(-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (/.f64 (/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 (fma.f64 x x x)))) (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 (fma.f64 x x x)))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (fma.f64 x x x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))) (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (fma.f64 x x x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x))) (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x))))","(exp.f64 (*.f64 (log.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 x #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 x #s(literal 1 binary64))))","(*.f64 (*.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64)))","(*.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64))))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))","(*.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))))","(pow.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) #s(literal -1 binary64))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (*.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (*.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))))","(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x #s(literal 1 binary64)) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))))","(neg.f64 (/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64))))","(exp.f64 (*.f64 (log.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))) #s(literal -1 binary64)))","#s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(pow.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (fma.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))) (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64)))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64)))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64)))) (fma.f64 (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64)))) (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (/.f64 x #s(literal 1 binary64)) (/.f64 x #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (*.f64 (/.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) (neg.f64 x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x x (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (-.f64 x #s(literal -1 binary64))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) #s(literal 1 binary64))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64)))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 x x (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 x #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) x #s(literal -1 binary64))","(expm1.f64 (*.f64 (log.f64 x) #s(literal 1 binary64)))","(expm1.f64 (log.f64 x))","(-.f64 (/.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal 1 binary64))) (-.f64 x #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal -1 binary64))))","(-.f64 (/.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64))))","(-.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 x x (+.f64 x #s(literal 1 binary64))))) (/.f64 #s(literal 1 binary64) (*.f64 #s(literal 1 binary64) (fma.f64 x x (+.f64 x #s(literal 1 binary64))))))","(-.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1 binary64))))) (/.f64 #s(literal 1 binary64) (fma.f64 x x (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1 binary64))))))","(-.f64 (/.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64)))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))","(-.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64)))) (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(-.f64 (/.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 #s(literal 0 binary64) (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 x #s(literal 1 binary64))","(exp.f64 (log.f64 (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(literal -1 binary64) x)","(+.f64 x #s(literal -1 binary64))","(*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (+.f64 x #s(literal 1 binary64)))","(*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) #s(literal 1 binary64))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) x)","(*.f64 (fma.f64 x x x) (*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(*.f64 (fma.f64 x x x) (-.f64 x #s(literal 1 binary64)))","(*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))","(*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x (-.f64 x #s(literal 1 binary64))))","(*.f64 x (fma.f64 x x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) (*.f64 x (-.f64 x #s(literal 1 binary64)))) (*.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 x (-.f64 x #s(literal 1 binary64)))))))","(/.f64 (+.f64 (pow.f64 (*.f64 x (fma.f64 x x x)) #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 x x x)) #s(literal 3 binary64))) (fma.f64 (*.f64 x (fma.f64 x x x)) (*.f64 x (fma.f64 x x x)) (-.f64 (*.f64 (neg.f64 (fma.f64 x x x)) (neg.f64 (fma.f64 x x x))) (*.f64 (*.f64 x (fma.f64 x x x)) (neg.f64 (fma.f64 x x x))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) #s(literal 3 binary64))) (fma.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) (-.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) x)) (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) (*.f64 (-.f64 x #s(literal 1 binary64)) x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) #s(literal 3 binary64)) (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) #s(literal 3 binary64))) (fma.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) x) (-.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 x x))) (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 x x))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x x x) x) #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 x x x)) #s(literal 3 binary64))) (fma.f64 (*.f64 (fma.f64 x x x) x) (*.f64 (fma.f64 x x x) x) (-.f64 (*.f64 (neg.f64 (fma.f64 x x x)) (neg.f64 (fma.f64 x x x))) (*.f64 (*.f64 (fma.f64 x x x) x) (neg.f64 (fma.f64 x x x))))))","(/.f64 (+.f64 (pow.f64 (*.f64 x #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 9 binary64))) (fma.f64 (*.f64 x #s(literal -1 binary64)) (*.f64 x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 6 binary64)) (*.f64 (*.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 (+.f64 (pow.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) (*.f64 x (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64)))) (*.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64)))))))","(/.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) (pow.f64 (*.f64 x #s(literal -1 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal 6 binary64)) (-.f64 (*.f64 (*.f64 x #s(literal -1 binary64)) (*.f64 x #s(literal -1 binary64))) (*.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 x #s(literal -1 binary64))))))","(/.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal 6 binary64)) (-.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 x)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 9 binary64))) (fma.f64 x x (-.f64 (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) x)) (neg.f64 (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)) x)) (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x x))) (neg.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (-.f64 x #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (-.f64 x #s(literal 1 binary64)))) (neg.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (neg.f64 (*.f64 x (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 x (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))) (neg.f64 (fma.f64 x x (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x x) (fma.f64 x x #s(literal -1 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))) (neg.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (fma.f64 x x (neg.f64 x)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))) (neg.f64 (*.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) (fma.f64 x x (neg.f64 x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (*.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (*.f64 (fma.f64 x x (neg.f64 x)) (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (fma.f64 x x (neg.f64 x)) (fma.f64 x x (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (*.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 x x (+.f64 x #s(literal 1 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) x) (fma.f64 x x #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)) x) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) (+.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x (+.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x (neg.f64 x)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (-.f64 x #s(literal 1 binary64))) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (*.f64 x (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (fma.f64 x x #s(literal 1 binary64)))","(/.f64 (*.f64 x (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (fma.f64 x x (neg.f64 x)))","(/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (*.f64 (fma.f64 x x x) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 (fma.f64 x x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (*.f64 (+.f64 x #s(literal 1 binary64)) (fma.f64 x x (neg.f64 x))))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (+.f64 x #s(literal 1 binary64)) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (*.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) (fma.f64 x x (neg.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64))) (*.f64 (fma.f64 x x (neg.f64 x)) (+.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 x x (neg.f64 x)) (fma.f64 x x (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x #s(literal -1 binary64))) (*.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (+.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 x x (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 x #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)) (*.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 x #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)) (neg.f64 x))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64) (*.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64) (neg.f64 x))","(fma.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64)) (*.f64 x (-.f64 x #s(literal 1 binary64))))","(fma.f64 (*.f64 x x) x (*.f64 x #s(literal -1 binary64)))","(fma.f64 (*.f64 x x) x (neg.f64 x))","(fma.f64 #s(literal -1 binary64) x (pow.f64 x #s(literal 3 binary64)))","(fma.f64 (fma.f64 x x x) x (neg.f64 (fma.f64 x x x)))","(fma.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 x x) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(fma.f64 (-.f64 x #s(literal 1 binary64)) x (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 x x)))","(fma.f64 x (*.f64 x x) (*.f64 x #s(literal -1 binary64)))","(fma.f64 x (*.f64 x x) (neg.f64 x))","(fma.f64 x #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))","(fma.f64 x (fma.f64 x x x) (neg.f64 (fma.f64 x x x)))","(fma.f64 x (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)) (*.f64 x #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)) (neg.f64 x))","(+.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 x (-.f64 x #s(literal 1 binary64))))","(+.f64 (*.f64 x (fma.f64 x x x)) (neg.f64 (fma.f64 x x x)))","(+.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(+.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 x x)))","(+.f64 (*.f64 (fma.f64 x x x) x) (neg.f64 (fma.f64 x x x)))","(+.f64 (*.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal 3 binary64)))","(+.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))))","(+.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 x #s(literal -1 binary64)))","(+.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 x))","(+.f64 (neg.f64 x) (pow.f64 x #s(literal 3 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (neg.f64 (fma.f64 x x x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 x x x) (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64))))","(*.f64 (pow.f64 (/.f64 x #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 x (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 (fma.f64 x x x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (fma.f64 x x (neg.f64 x)))","(*.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 x #s(literal 1 binary64))))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 x #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (+.f64 x #s(literal 1 binary64))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) x) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x x)))","(*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) #s(literal -1 binary64)) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64))) (pow.f64 (neg.f64 (fma.f64 x x x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (fma.f64 x x x)) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64))))","(*.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (pow.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (/.f64 x (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x x)))","(*.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) x) (fma.f64 x x #s(literal -1 binary64))))","(pow.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 x #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 x (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64)))) #s(literal -1 binary64))","(pow.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 x #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64)))) (neg.f64 x))","(/.f64 (neg.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) x)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (neg.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x x)))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x x)))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) #s(literal -1 binary64))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (neg.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) x)) (neg.f64 (fma.f64 x x #s(literal -1 binary64))))","(/.f64 (neg.f64 (neg.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64))))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (neg.f64 (fma.f64 x x x)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (neg.f64 (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (fma.f64 x x x))))","(/.f64 (neg.f64 (*.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 x x x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (neg.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) x) (fma.f64 x x #s(literal -1 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))))","(/.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64))) x)","(/.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) x) (+.f64 x #s(literal 1 binary64)))","(/.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64)) (fma.f64 x x x))","(/.f64 (*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64)) (fma.f64 x x x))","(/.f64 (*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (neg.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) (neg.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 (fma.f64 x x x) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))))","(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) x) (fma.f64 x x #s(literal -1 binary64)))","(/.f64 (neg.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 x))","(/.f64 (neg.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 (fma.f64 x x x)))))","(/.f64 (neg.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))) (neg.f64 (*.f64 (fma.f64 x x x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))) (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x))))","(/.f64 (*.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 x x x)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (fma.f64 x x x)))","(/.f64 (*.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) #s(literal -1 binary64)) (*.f64 (fma.f64 x x x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (*.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64))) x)","(/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (/.f64 (-.f64 x #s(literal 1 binary64)) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))))","(/.f64 (/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64))) (neg.f64 (neg.f64 (neg.f64 (fma.f64 x x x)))))","(/.f64 (/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64))) (neg.f64 (fma.f64 x x x)))","(/.f64 (/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (fma.f64 x x x)) (neg.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (fma.f64 x x x)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 (fma.f64 x x x))))","(/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (*.f64 (fma.f64 x x x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) x) (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64))","(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 x x x) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 x #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 x #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (*.f64 (/.f64 (fma.f64 x x x) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) (neg.f64 (neg.f64 (fma.f64 x x x))))","(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))","(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 x #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (/.f64 (fma.f64 x x x) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 x #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 x (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 x #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))))","(neg.f64 (/.f64 (/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)))","(neg.f64 (/.f64 (/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))))","(neg.f64 (/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)))","(neg.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (fma.f64 x x x))) (/.f64 (/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)))","(-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (/.f64 (/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 (fma.f64 x x x)))) (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 (fma.f64 x x x)))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (fma.f64 x x x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))) (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (fma.f64 x x x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x))) (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x))))","(exp.f64 (*.f64 (log.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 x #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)) #s(literal -1 binary64)))","(*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64)))","(*.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))","(pow.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)) (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal 1 binary64))) (fma.f64 (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal 1 binary64))) (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) (pow.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (fma.f64 x x x) (*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (fma.f64 x x x) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (neg.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 (-.f64 #s(literal -1 binary64) (*.f64 x x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (*.f64 x x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 x x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))))","(/.f64 (neg.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 2 binary64))) (neg.f64 (fma.f64 x x #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (fma.f64 x x (+.f64 x #s(literal 1 binary64))))))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal -1 binary64) (*.f64 x x)))","(/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (*.f64 x x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64)))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (fma.f64 x x (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (fma.f64 x x #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)) (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)) (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64))))","(fma.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 x x (neg.f64 x)) #s(literal -1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 x x (neg.f64 x)) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(fma.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(fma.f64 (neg.f64 x) (neg.f64 x) #s(literal -1 binary64))","(fma.f64 (*.f64 x x) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 (fma.f64 x x x) #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (fma.f64 x x x) #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(fma.f64 (+.f64 x #s(literal 1 binary64)) x (*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (+.f64 x #s(literal 1 binary64)) x (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(fma.f64 x (+.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 x (+.f64 x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(fma.f64 x x #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 x x) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) (fma.f64 x x x) (*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (fma.f64 x x x) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(expm1.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (*.f64 x x))) (/.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal -1 binary64) (*.f64 x x))))","(-.f64 (/.f64 (pow.f64 x #s(literal 6 binary64)) (+.f64 (pow.f64 x #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (*.f64 x x)))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (*.f64 x x)))))","(-.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal 1 binary64))) (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (*.f64 x x) #s(literal 1 binary64))","(+.f64 (*.f64 x x) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (*.f64 x x))","(+.f64 (fma.f64 x x x) (*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(+.f64 (fma.f64 x x x) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x #s(literal -2 binary64)) #s(literal -1 binary64)) (pow.f64 (*.f64 (neg.f64 x) x) #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -3/2 binary64))) (pow.f64 x #s(literal -3/2 binary64)))","(*.f64 (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal 2 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal 2 binary64) (*.f64 x x)))","(*.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) (pow.f64 (neg.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64))","(*.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 2 binary64) (/.f64 (pow.f64 x #s(literal -2 binary64)) x))","(*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -3 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 2 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 x (*.f64 (*.f64 x x) #s(literal 1/2 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) x) #s(literal -1 binary64))","(pow.f64 (*.f64 x (*.f64 (*.f64 x x) #s(literal 1/2 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) x))","(/.f64 (*.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal 1 binary64)) x)","(/.f64 (neg.f64 (pow.f64 x #s(literal -1 binary64))) (neg.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","(/.f64 (*.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 1 binary64)) (*.f64 x x))","(/.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 (neg.f64 x) x))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(/.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) (neg.f64 x))","(/.f64 #s(literal -2 binary64) (*.f64 x (*.f64 (neg.f64 x) x)))","(/.f64 #s(literal -2 binary64) (*.f64 (*.f64 (neg.f64 x) x) x))","(/.f64 #s(literal -2 binary64) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (/.f64 #s(literal 2 binary64) x) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x))","(/.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) (neg.f64 (neg.f64 x)))","(/.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) x)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 x (*.f64 (*.f64 x x) #s(literal 1/2 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 x (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))","(/.f64 #s(literal 2 binary64) (neg.f64 (*.f64 x (*.f64 (neg.f64 x) x))))","(/.f64 #s(literal 2 binary64) (neg.f64 (*.f64 (*.f64 (neg.f64 x) x) x)))","(/.f64 #s(literal 2 binary64) (neg.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 x (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 2 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x (*.f64 (*.f64 x x) #s(literal 1/2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) x))","(/.f64 #s(literal 1 binary64) (*.f64 x (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","(neg.f64 (/.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) x))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x)) (/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 (neg.f64 x) x)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (/.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) x))","(exp.f64 (*.f64 (log.f64 (*.f64 x (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))) #s(literal -1 binary64)))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal 2 binary64) x))","(*.f64 #s(literal -2 binary64) (pow.f64 (*.f64 (neg.f64 x) x) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -2 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (*.f64 x x)))","(pow.f64 (/.f64 x (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (*.f64 x #s(literal 1/2 binary64)) x) #s(literal -1 binary64))","(pow.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) #s(literal -1 binary64))","(/.f64 (/.f64 #s(literal -2 binary64) x) (neg.f64 x))","(/.f64 #s(literal -2 binary64) (neg.f64 (neg.f64 (*.f64 (neg.f64 x) x))))","(/.f64 #s(literal -2 binary64) (*.f64 (neg.f64 x) x))","(/.f64 (/.f64 #s(literal 2 binary64) x) (neg.f64 (neg.f64 x)))","(/.f64 (/.f64 #s(literal 2 binary64) x) x)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (/.f64 #s(literal 2 binary64) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","(/.f64 #s(literal 2 binary64) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 x (/.f64 #s(literal 2 binary64) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(neg.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (/.f64 #s(literal -2 binary64) (*.f64 x x)))","(exp.f64 (*.f64 (log.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 x) (neg.f64 x))","(*.f64 (*.f64 x x) #s(literal 1 binary64))","(*.f64 x x)","(*.f64 #s(literal 1 binary64) (*.f64 x x))","(pow.f64 (neg.f64 x) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1 binary64))","(pow.f64 x #s(literal 2 binary64))","(exp.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (neg.f64 (fma.f64 x x x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 x x x) (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64))))","(*.f64 (pow.f64 (/.f64 x #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 x (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 (fma.f64 x x x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (fma.f64 x x (neg.f64 x)))","(*.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 x #s(literal 1 binary64))))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 x #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (+.f64 x #s(literal 1 binary64))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) x) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x x)))","(*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) #s(literal -1 binary64)) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64))) (pow.f64 (neg.f64 (fma.f64 x x x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (fma.f64 x x x)) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64))))","(*.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (pow.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (/.f64 x (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x x)))","(*.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) x) (fma.f64 x x #s(literal -1 binary64))))","(pow.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 x #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 x (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64)))) #s(literal -1 binary64))","(pow.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 x #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64)))) (neg.f64 x))","(/.f64 (neg.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) x)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (neg.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x x)))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x x)))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) #s(literal -1 binary64))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (neg.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) x)) (neg.f64 (fma.f64 x x #s(literal -1 binary64))))","(/.f64 (neg.f64 (neg.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64))))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (neg.f64 (fma.f64 x x x)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (neg.f64 (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (fma.f64 x x x))))","(/.f64 (neg.f64 (*.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 x x x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (neg.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) x) (fma.f64 x x #s(literal -1 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))))","(/.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64))) x)","(/.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) x) (+.f64 x #s(literal 1 binary64)))","(/.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64)) (fma.f64 x x x))","(/.f64 (*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64)) (fma.f64 x x x))","(/.f64 (*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (neg.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) (neg.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 (fma.f64 x x x) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))))","(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) x) (fma.f64 x x #s(literal -1 binary64)))","(/.f64 (neg.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 x))","(/.f64 (neg.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 (fma.f64 x x x)))))","(/.f64 (neg.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))) (neg.f64 (*.f64 (fma.f64 x x x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))) (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x))))","(/.f64 (*.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 x x x)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (fma.f64 x x x)))","(/.f64 (*.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) #s(literal -1 binary64)) (*.f64 (fma.f64 x x x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (*.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64))) x)","(/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (/.f64 (-.f64 x #s(literal 1 binary64)) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))))","(/.f64 (/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64))) (neg.f64 (neg.f64 (neg.f64 (fma.f64 x x x)))))","(/.f64 (/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64))) (neg.f64 (fma.f64 x x x)))","(/.f64 (/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (fma.f64 x x x)) (neg.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (fma.f64 x x x)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 (fma.f64 x x x))))","(/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (*.f64 (fma.f64 x x x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) x) (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64))","(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 x x x) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 x #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 x #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (*.f64 (/.f64 (fma.f64 x x x) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) (neg.f64 (neg.f64 (fma.f64 x x x))))","(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))","(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 x #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (/.f64 (fma.f64 x x x) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 x #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 x (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 x #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))))","(neg.f64 (/.f64 (/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)))","(neg.f64 (/.f64 (/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))))","(neg.f64 (/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)))","(neg.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (fma.f64 x x x))) (/.f64 (/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)))","(-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (/.f64 (/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 (fma.f64 x x x)))) (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 (fma.f64 x x x)))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (fma.f64 x x x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))) (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (fma.f64 x x x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x))) (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x))))","(exp.f64 (*.f64 (log.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 x #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (fma.f64 x x (neg.f64 x)))","(*.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))","(*.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (pow.f64 (neg.f64 (fma.f64 x x x)) #s(literal -1 binary64)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (/.f64 x #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)))","(pow.f64 (/.f64 (/.f64 (fma.f64 x x x) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x x x) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x x)))","(/.f64 (neg.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (+.f64 x #s(literal 1 binary64)))) (neg.f64 x))","(/.f64 (neg.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) x)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (neg.f64 (*.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x x)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (neg.f64 (fma.f64 x x x)))))","(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (+.f64 x #s(literal 1 binary64))) x)","(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) x) (+.f64 x #s(literal 1 binary64)))","(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 x x x))","(/.f64 (neg.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))) (neg.f64 (neg.f64 (fma.f64 x x x))))","(/.f64 (*.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 x x x))","(/.f64 (/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (fma.f64 x x x)) #s(literal -1 binary64))","(/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (neg.f64 (fma.f64 x x x)))","(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (fma.f64 x x x) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x x x) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))))","(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (fma.f64 x x x) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (fma.f64 x x x) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x x) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))))","(neg.f64 (/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (fma.f64 x x x)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (fma.f64 x x x))) (/.f64 (neg.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64))) (fma.f64 x x x)))","(exp.f64 (*.f64 (log.f64 (/.f64 (fma.f64 x x x) #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 x x (neg.f64 x)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 x x x) #s(literal 1 binary64))","(*.f64 (+.f64 x #s(literal 1 binary64)) x)","(*.f64 x (+.f64 x #s(literal 1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 x x x))","(pow.f64 (/.f64 (fma.f64 x x (neg.f64 x)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x (neg.f64 x))) #s(literal 3 binary64)) (pow.f64 (/.f64 (*.f64 x x) (fma.f64 x x (neg.f64 x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x (neg.f64 x))) (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x (neg.f64 x))) (fma.f64 (/.f64 (*.f64 x x) (fma.f64 x x (neg.f64 x))) (/.f64 (*.f64 x x) (fma.f64 x x (neg.f64 x))) (*.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x (neg.f64 x))) (/.f64 (*.f64 x x) (fma.f64 x x (neg.f64 x)))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) x)) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))) (neg.f64 (fma.f64 x x (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 (-.f64 x (*.f64 x x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))) (neg.f64 (neg.f64 (fma.f64 x x (neg.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 1 binary64)) (fma.f64 x x (neg.f64 x)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) x) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (fma.f64 x x (neg.f64 x)))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (-.f64 (*.f64 x x) (pow.f64 x #s(literal 4 binary64))) (-.f64 x (*.f64 x x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (neg.f64 (fma.f64 x x (neg.f64 x))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x x (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (-.f64 x #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (fma.f64 x x (neg.f64 x)))","(/.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x x (neg.f64 x)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (neg.f64 x)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(fma.f64 (neg.f64 x) (neg.f64 x) x)","(fma.f64 (*.f64 x x) #s(literal 1 binary64) x)","(fma.f64 x x x)","(fma.f64 x #s(literal 1 binary64) (*.f64 x x))","(fma.f64 #s(literal 1 binary64) (*.f64 x x) x)","(fma.f64 #s(literal 1 binary64) x (*.f64 x x))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x (*.f64 x x))) (/.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 x (*.f64 x x))))","(-.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x (neg.f64 x))) (/.f64 (*.f64 x x) (fma.f64 x x (neg.f64 x))))","(+.f64 (*.f64 x x) x)","(+.f64 x (*.f64 x x))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(*.f64 (pow.f64 (/.f64 x #s(literal -2 binary64)) #s(literal -1 binary64)) (pow.f64 (*.f64 (neg.f64 x) x) #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -3/2 binary64))) (pow.f64 x #s(literal -3/2 binary64)))","(*.f64 (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal 2 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal 2 binary64) (*.f64 x x)))","(*.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) (pow.f64 (neg.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64))","(*.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 2 binary64) (/.f64 (pow.f64 x #s(literal -2 binary64)) x))","(*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -3 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 2 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 x (*.f64 (*.f64 x x) #s(literal 1/2 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) x) #s(literal -1 binary64))","(pow.f64 (*.f64 x (*.f64 (*.f64 x x) #s(literal 1/2 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) x))","(/.f64 (*.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal 1 binary64)) x)","(/.f64 (neg.f64 (pow.f64 x #s(literal -1 binary64))) (neg.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","(/.f64 (*.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 1 binary64)) (*.f64 x x))","(/.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 (neg.f64 x) x))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(/.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) (neg.f64 x))","(/.f64 #s(literal -2 binary64) (*.f64 x (*.f64 (neg.f64 x) x)))","(/.f64 #s(literal -2 binary64) (*.f64 (*.f64 (neg.f64 x) x) x))","(/.f64 #s(literal -2 binary64) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (/.f64 #s(literal 2 binary64) x) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x))","(/.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) (neg.f64 (neg.f64 x)))","(/.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) x)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 x (*.f64 (*.f64 x x) #s(literal 1/2 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 x (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))","(/.f64 #s(literal 2 binary64) (neg.f64 (*.f64 x (*.f64 (neg.f64 x) x))))","(/.f64 #s(literal 2 binary64) (neg.f64 (*.f64 (*.f64 (neg.f64 x) x) x)))","(/.f64 #s(literal 2 binary64) (neg.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 x (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 2 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x (*.f64 (*.f64 x x) #s(literal 1/2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) x))","(/.f64 #s(literal 1 binary64) (*.f64 x (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","(neg.f64 (/.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) x))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x)) (/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 (neg.f64 x) x)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (/.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) x))","(exp.f64 (*.f64 (log.f64 (*.f64 x (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal -3/2 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -3 binary64)))","(pow.f64 (exp.f64 #s(literal -3 binary64)) (log.f64 x))","(pow.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 3 binary64))","(pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 x x) #s(literal -3/2 binary64))","(pow.f64 x #s(literal -3 binary64))","(/.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (/.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))","(exp.f64 (neg.f64 (*.f64 (log.f64 x) #s(literal 3 binary64))))","(exp.f64 (fma.f64 (log.f64 x) #s(literal -3/2 binary64) (*.f64 (log.f64 x) #s(literal -3/2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal -3/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal -3/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 x #s(literal -3/2 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal -3 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":351.416015625,"type":"rewrite"},{"compiler":[[23907,1939]],"memory":[[7109344,53643072]],"time":96.527099609375,"type":"eval"},{"alts":[["(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64)))","done",0.15234375,"binary64"],["(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64))) x)","fresh",0.1484375,"binary64"],["(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))","done",0.14453125,"binary64"],["(/.f64 #s(approx (/ (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (- x 1)) #s(literal -2 binary64)) (fma.f64 x x x))","fresh",31.03260927637233,"binary64"],["(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (fma.f64 x x x) (-.f64 x #s(literal 1 binary64))))","fresh",0.48310191190683005,"binary64"],["(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","done",0.47919566190683005,"binary64"],["(*.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64)))","fresh",5.923899739504624,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) x))","done",0.7666259019159771,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) x))","done",0.7900666610736631,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x)))","done",0.7861571355562907,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (*.f64 (*.f64 x x) x)))","done",1.1247310729804931,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))","done",60.79444651831434,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","done",0.6611604274333495,"binary64"]],"compiler":[[798,130],[30,18],[28,17],[30,18],[30,16],[30,18],[28,17],[35,21],[23,15],[23,15],[23,15],[23,15],[19,13],[21,15]],"count":[[675,13]],"kept":[{"done":[4,4],"fresh":[3,2],"new":[663,2],"picked":[5,5]}],"memory":[[-4693888,31523904]],"min-error":[[0.0,"binary64"]],"time":25.673095703125,"type":"prune"},{"accuracy":[0.14453125],"baseline":[0.14453125],"branch":[["x",0.14453125,1,"binary64"],["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))",0.14453125,1,"binary64"]],"compiler":[[1,1],[15,10]],"count":[[32,1]],"inputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))","(/.f64 #s(approx (/ (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (- x 1)) #s(literal -2 binary64)) (fma.f64 x x x))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (*.f64 (*.f64 x x) x)))","(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (fma.f64 x x x) (-.f64 x #s(literal 1 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x)))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) x))","(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x)))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64))) x)","(+.f64 (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))","(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64)))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) x))","(*.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x x)) (+.f64 #s(literal 1 binary64) x))","(*.f64 (/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64)))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 (/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 x #s(literal 1 binary64)) x) (*.f64 (+.f64 x #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 (-.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) x) (*.f64 x (-.f64 x #s(literal 1 binary64))))","(/.f64 (+.f64 x (*.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))))) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))))","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 3 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))))","(fma.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64))) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))"]],"memory":[[1822096,9644688]],"oracle":[63.11909312434407],"outputs":[["(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))"]],"repr":["binary64"],"time":15.887939453125,"times":[[7.623046875,"x"],[6.0869140625,"(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))"]],"type":"regimes"},{"accuracy":[0.1484375],"baseline":[0.1484375],"branch":[["x",0.1484375,1,"binary64"],["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))",0.1484375,1,"binary64"]],"compiler":[[1,1],[15,10]],"count":[[11,1]],"inputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))","(/.f64 #s(approx (/ (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (- x 1)) #s(literal -2 binary64)) (fma.f64 x x x))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (*.f64 (*.f64 x x) x)))","(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (fma.f64 x x x) (-.f64 x #s(literal 1 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x)))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) x))","(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x)))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64))) x)","(+.f64 (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))"]],"memory":[[4843984,4843984]],"oracle":[62.1340243514842],"outputs":[["(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64))) x)"]],"repr":["binary64"],"time":7.947998046875,"times":[[3.537109375,"x"],[3.4140625,"(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))"]],"type":"regimes"},{"accuracy":[0.47919566190683005],"baseline":[0.47919566190683005],"branch":[["x",0.4791956619068301,1,"binary64"],["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))",0.47919566190683005,1,"binary64"]],"compiler":[[1,1],[15,10]],"count":[[9,1]],"inputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))","(/.f64 #s(approx (/ (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (- x 1)) #s(literal -2 binary64)) (fma.f64 x x x))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (*.f64 (*.f64 x x) x)))","(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (fma.f64 x x x) (-.f64 x #s(literal 1 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x)))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) x))","(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x)))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))"]],"memory":[[-3651536,4555248]],"oracle":[60.79444651831434],"outputs":[["(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))"]],"repr":["binary64"],"time":6.39697265625,"times":[[2.97119140625,"x"],[2.64990234375,"(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))"]],"type":"regimes"},{"accuracy":[1.1247310729804931],"baseline":[1.1247310729804931],"branch":[["x",1.1247310729804931,1,"binary64"],["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))",1.1247310729804931,1,"binary64"]],"compiler":[[1,1],[15,10]],"count":[[3,1]],"inputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))","(/.f64 #s(approx (/ (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (- x 1)) #s(literal -2 binary64)) (fma.f64 x x x))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (*.f64 (*.f64 x x) x)))"]],"memory":[[3169376,3169376]],"oracle":[60.79444651831434],"outputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (*.f64 (*.f64 x x) x)))"]],"repr":["binary64"],"time":3.765869140625,"times":[[1.733154296875,"x"],[1.486083984375,"(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))"]],"type":"regimes"},{"accuracy":[31.032609276372334],"baseline":[31.03260927637233],"branch":[["x",31.032609276372334,1,"binary64"],["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))",31.032609276372334,1,"binary64"]],"compiler":[[1,1],[15,10]],"count":[[2,1]],"inputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))","(/.f64 #s(approx (/ (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (- x 1)) #s(literal -2 binary64)) (fma.f64 x x x))"]],"memory":[[-10585680,2932464]],"oracle":[60.79444651831434],"outputs":[["(/.f64 #s(approx (/ (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (- x 1)) #s(literal -2 binary64)) (fma.f64 x x x))"]],"repr":["binary64"],"time":6.43310546875,"times":[[4.5869140625,"x"],[1.320068359375,"(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))"]],"type":"regimes"},{"accuracy":[60.79444651831431],"baseline":[60.79444651831434],"branch":[["x",60.79444651831431,1,"binary64"],["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))",60.79444651831434,1,"binary64"]],"compiler":[[1,1],[15,10]],"count":[[1,1]],"inputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))"]],"link":["."],"memory":[[2750688,2750688]],"name":["3frac (problem 3.3.3)"],"oracle":[60.79444651831434],"outputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))"]],"repr":["binary64"],"time":2.905029296875,"times":[[1.132080078125,"x"],[1.0791015625,"(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))"]],"type":"regimes"},{"egraph":[[6,7959,134,0.021186271],[5,3837,134,0.025598068],[4,1146,150,0.016384431],[3,377,150,0.003636428],[2,152,150,0.001511436],[1,68,150,0.00079718],[0,37,150,0.000572207]],"inputs":[["(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))","(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64))) x)","(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (*.f64 (*.f64 x x) x)))","(/.f64 #s(approx (/ (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (- x 1)) #s(literal -2 binary64)) (fma.f64 x x x))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))"]],"memory":[[2997360,11334656]],"method":["egg-herbie"],"outputs":[["(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))","(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64))) x)","(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (*.f64 (*.f64 x x) x)))","(/.f64 #s(approx (/ (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (- x 1)) #s(literal -2 binary64)) (fma.f64 x x x))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))"]],"stop":[["node limit",1]],"time":93.91796875,"type":"simplify"},{"compiler":[[158,39],[3,3],[6,4],[31,19],[11,8],[15,10],[21,15],[5,5],[59,23],[11,8],[15,10],[31,19],[11,8],[15,10],[31,19],[11,8],[15,10]],"egraph":[[0,8514,32,0.084806451],[2,1095,35,0.023959419],[1,94,35,0.003896738],[0,17,35,0.000795726],[0,10,35,0.000124723],[0,8290,188,0.082605745],[2,2165,204,0.029358992],[1,242,204,0.008499501],[0,62,222,0.00199226],[0,40,237,0.000320746],[0,8077,313,0.061886267],[4,6992,319,0.01837747],[3,2230,319,0.029521448],[2,701,332,0.008053118],[1,268,353,0.002089236],[0,102,373,0.00085406],[0,8222,195,0.062507166],[2,3288,211,0.038194046],[1,316,211,0.009390399],[0,64,222,0.002232558],[0,39,235,0.000365762],[0,8254,327,0.084473399],[4,7620,337,0.02207661],[3,3181,337,0.038689203],[2,799,352,0.013046591],[1,293,367,0.002604606],[0,116,385,0.001279946],[0,8272,364,0.074090212],[3,2903,381,0.034721156],[2,877,404,0.009529773],[1,322,428,0.002590585],[0,123,435,0.000998853]],"memory":[[-1085168,7194144]],"stop":[["fuel",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1]],"time":1699.87109375,"type":"soundness"},{"compiler":[[158,39],[158,39],[9,7],[9,7],[15,10],[15,10],[30,18],[30,18]],"memory":[[1848432,25986368]],"remove-preprocessing":[["(negabs x)"],[],[],[],[],[],[]],"time":158.77880859375,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.010009765625,"type":"end"}]