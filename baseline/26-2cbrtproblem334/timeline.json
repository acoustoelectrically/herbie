[{"memory":[[15120,15120]],"time":0.029052734375,"type":"start"},{"compiler":[[15,11]],"memory":[[568208,568208]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.00012196451865783376,"valid":0.24966136969258573}],[11,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.00024392903731566753,"valid":0.2495394051739279}],[10,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.00048785807463133505,"valid":0.2492954761366122}],[9,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.0009757161492626701,"valid":0.24880761806198087}],[8,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.0019514322985253402,"valid":0.24783190191271823}],[7,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.0039028645970506804,"valid":0.24588046961419288}],[6,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.007805729194101361,"valid":0.2419776050171422}],[5,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.015611458388202722,"valid":0.23417187582304083}],[4,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.031222916776405443,"valid":0.21856041743483812}],[3,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.06244583355281089,"valid":0.18733750065843266}],[2,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.12489166710562177,"valid":0.12489166710562177}],[1,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.24978333421124355,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.24978333421124355,"valid":0.0}]],"time":2.802978515625,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.7502166657887565,"valid":0.24978333421124357}],"memory":[[19500032,387155152]],"mixsample":[[0.4775390625,"ival-cbrt",1600],[170.390380859375,"adjust",800],[4.286865234375,"ival-assert",0],[97.5458984375,"ival-sub",0],[14.90673828125,"ival-and",0],[0.052490234375,"ival-sub",400],[82.3505859375,"ival-cbrt",400],[146.27587890625,"const",0],[24.67236328125,"ival-cbrt",2000],[79.43701171875,"ival-cbrt",800],[32.610107421875,"adjust",2000],[56.93994140625,"ival-add",0],[0.10302734375,"ival-sub",800],[136.72802734375,"ival-cbrt",0],[5.631591796875,"ival-add",2000],[25.632080078125,"ival-add",400],[27.137939453125,"ival->",0],[8.6572265625,"exact",0],[24.007080078125,"ival-add",800],[23.55859375,"ival-<",0]],"outcomes":[[877.20703125,1,"valid",6342],[328.85302734375,2,"valid",1656],[19.88525390625,0,"valid",258]],"time":1590.302978515625,"type":"sample"},{"compiler":[[7,6],[20,8],[20,8]],"confusion":[[255,0,0,1]],"explanations":[["-.f64","(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","cancellation",255,1,[],[[]]]],"fperrors":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))",255,0,false,0,false],["(+.f64 x #s(literal 1 binary64))",0,0,false,0,false],["(cbrt.f64 (+.f64 x #s(literal 1 binary64)))",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(cbrt.f64 x)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,255],[0,1]],"maybe-confusion":[[255,0,0,0,1,0]],"memory":[[3485408,46907568]],"mixsample":[[0.0400390625,"ival-cbrt",1600],[8.927978515625,"adjust",800],[2.991455078125,"ival-add",0],[0.0078125,"ival-sub",800],[0.2607421875,"ival-add",2000],[7.301513671875,"ival-cbrt",0],[0.225830078125,"ival-assert",0],[1.322265625,"ival-add",400],[5.21923828125,"ival-sub",0],[0.44580078125,"ival-true",0],[5.029052734375,"ival-cbrt",400],[1.23095703125,"ival-cbrt",2000],[4.48095703125,"ival-cbrt",800],[1.22412109375,"ival-add",800],[0.31298828125,"exact",0],[1.568603515625,"adjust",2000]],"outcomes":[[42.57568359375,1,"valid",394],[18.069580078125,2,"valid",110],[0.355224609375,0,"valid",8]],"time":109.670166015625,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[7,6]],"egraph":[[0,182,7,0.000725571],[10,182,7,0.000706328],[9,174,7,0.000855775],[8,158,7,0.00089347],[7,109,7,0.000803107],[6,80,7,0.000792565],[5,48,7,0.000477471],[4,33,7,0.000222803],[3,25,7,0.000175363],[2,19,7,0.000130175],[1,15,7,0.000116592],[0,10,7,0.000146666],[0,6,7,9.4648e-5],[7,215,16,0.00086713],[6,204,16,0.001186558],[5,180,16,0.000999061],[4,122,16,0.000907407],[3,74,16,0.000604151],[2,41,16,0.000368908],[1,18,17,0.000165072],[0,8,19,0.00014153]],"inputs":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))"]],"memory":[[-3173184,5594000]],"method":["egg-herbie"],"outputs":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","(-.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1],["saturated",1]],"symmetry":[[]],"time":29.467041015625,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[40816,40816]],"time":0.06689453125,"type":"eval"},{"alts":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","next",60.29627493697794,"binary64"]],"compiler":[[7,6]],"memory":[[314704,314704]],"time":0.486083984375,"type":"prune"},{"egraph":[[0,182,18,0.000718122],[10,182,18,0.000749824],[9,174,18,0.000891128],[8,158,18,0.0010048],[7,109,18,0.000743337],[6,80,18,0.000780985],[5,48,18,0.000415178],[4,33,18,0.000224002],[3,25,18,0.000173844],[2,19,18,0.000128917],[1,15,18,0.000116185],[0,10,18,0.000153448],[0,6,18,9.3263e-5]],"inputs":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","(cbrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(cbrt.f64 x)"]],"locations":[["(cbrt.f64 x)","cost-diff",0],["(+.f64 x #s(literal 1 binary64))","cost-diff",0],["(cbrt.f64 (+.f64 x #s(literal 1 binary64)))","cost-diff",0],["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","cost-diff",0]],"memory":[[825472,825472]],"method":["egg-herbie"],"outputs":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","(-.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))","(cbrt.f64 (+.f64 x #s(literal 1 binary64)))","(cbrt.f64 (+.f64 #s(literal 1 binary64) x))","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) x)","x","#s(literal 1 binary64)","(cbrt.f64 x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":12.5068359375,"type":"simplify"},{"compiler":[[20,8]],"locations":[["(+.f64 x #s(literal 1 binary64))","accuracy",0.0],["(cbrt.f64 (+.f64 x #s(literal 1 binary64)))","accuracy",0.0625],["(cbrt.f64 x)","accuracy",0.0625],["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","accuracy",60.29627493697794]],"memory":[[4027008,12024496]],"mixsample":[[0.02001953125,"ival-cbrt",1600],[4.890380859375,"adjust",800],[1.68115234375,"ival-add",0],[0.004150390625,"ival-sub",800],[0.131103515625,"ival-add",2000],[5.96728515625,"ival-cbrt",0],[0.111572265625,"ival-assert",0],[0.803955078125,"ival-add",400],[2.88720703125,"ival-sub",0],[0.222412109375,"ival-true",0],[2.2890625,"ival-cbrt",400],[0.65576171875,"ival-cbrt",2000],[2.38427734375,"ival-cbrt",800],[0.87353515625,"ival-add",800],[0.199462890625,"exact",0],[0.83056640625,"adjust",2000]],"outcomes":[[23.681640625,1,"valid",197],[11.8359375,2,"valid",55],[0.1689453125,0,"valid",4]],"time":45.43603515625,"type":"localize"},{"count":[[4,27]],"inputs":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","(cbrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(cbrt.f64 x)"]],"memory":[[-707280,7367680]],"outputs":[["(- 1 (cbrt x))","(- (+ 1 (* 1/3 x)) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* -1/9 x)))) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))) (cbrt x))","1","(+ 1 (* 1/3 x))","(+ 1 (* x (+ 1/3 (* -1/9 x))))","(+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9)))))","(+ 1 x)","(cbrt x)","(* 1/3 (cbrt (/ 1 (pow x 2))))","(/ (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4))))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* -10/243 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(* x (+ (cbrt (/ 1 (pow x 2))) (* 1/3 (cbrt (/ 1 (pow x 5))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 5)))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 5/81 (cbrt (/ 1 (pow x 11)))) (* 1/3 (cbrt (/ 1 (pow x 5))))))))","x","(* x (+ 1 (/ 1 x)))","(* 1/3 (* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2))))","(/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 10/243 (* (cbrt (pow x 13)) (/ 1 (pow (cbrt -1) 11)))) (* 5/81 (* (cbrt (pow x 16)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(* -1 (* (cbrt x) (cbrt -1)))","(* -1 (* x (+ (* -1/3 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))"]],"series":[[7.6640625,"((- (cbrt (+ x 1)) (cbrt x)) (cbrt (+ x 1)) (+ x 1) (cbrt x))","x","-inf"],[5.35888671875,"((- (cbrt (+ x 1)) (cbrt x)) (cbrt (+ x 1)) (+ x 1) (cbrt x))","x","inf"],[4.044189453125,"((- (cbrt (+ x 1)) (cbrt x)) (cbrt (+ x 1)) (+ x 1) (cbrt x))","x","0"]],"time":17.68603515625,"type":"series"},{"count":[[27,26]],"egraph":[[0,8190,465,0.056638874],[4,6064,498,0.02920065],[3,2619,498,0.024026026],[2,902,501,0.010697364],[1,350,501,0.00300595],[0,146,539,0.001203342]],"inputs":[["(- 1 (cbrt x))","(- (+ 1 (* 1/3 x)) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* -1/9 x)))) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))) (cbrt x))","1","(+ 1 (* 1/3 x))","(+ 1 (* x (+ 1/3 (* -1/9 x))))","(+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9)))))","(+ 1 x)","(cbrt x)","(* 1/3 (cbrt (/ 1 (pow x 2))))","(/ (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4))))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* -10/243 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(* x (+ (cbrt (/ 1 (pow x 2))) (* 1/3 (cbrt (/ 1 (pow x 5))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 5)))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 5/81 (cbrt (/ 1 (pow x 11)))) (* 1/3 (cbrt (/ 1 (pow x 5))))))))","x","(* x (+ 1 (/ 1 x)))","(* 1/3 (* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2))))","(/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 10/243 (* (cbrt (pow x 13)) (/ 1 (pow (cbrt -1) 11)))) (* 5/81 (* (cbrt (pow x 16)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(* -1 (* (cbrt x) (cbrt -1)))","(* -1 (* x (+ (* -1/3 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))"]],"memory":[[-1648128,28604368]],"method":["egg-herbie"],"outputs":[["(- 1 (cbrt x))","(-.f64 #s(literal 1 binary64) (cbrt.f64 x))","(- (+ 1 (* 1/3 x)) (cbrt x))","(fma.f64 #s(literal 1/3 binary64) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x)))","(- (+ 1 (* x (+ 1/3 (* -1/9 x)))) (cbrt x))","(fma.f64 (fma.f64 #s(literal -1/9 binary64) x #s(literal 1/3 binary64)) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x)))","(- (+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))) (cbrt x))","(fma.f64 (fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64)) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x)))","1","#s(literal 1 binary64)","(+ 1 (* 1/3 x))","(fma.f64 #s(literal 1/3 binary64) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/3 (* -1/9 x))))","(fma.f64 (fma.f64 #s(literal -1/9 binary64) x #s(literal 1/3 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64)) x #s(literal 1 binary64))","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(cbrt x)","(cbrt.f64 x)","(* 1/3 (cbrt (/ 1 (pow x 2))))","(*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64))","(/ (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))) (pow x 2))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x))","(/ (+ (* -1/9 (cbrt x)) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4))))) (pow x 2))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x))","(/ (+ (* -1/9 (cbrt x)) (+ (* -10/243 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(/.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -10/243 binary64) (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) (*.f64 x x))","(* x (+ (cbrt (/ 1 (pow x 2))) (* 1/3 (cbrt (/ 1 (pow x 5))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/3 binary64) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))) x)","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 5)))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal -1/9 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/3 binary64) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)))) x)","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 5/81 (cbrt (/ 1 (pow x 11)))) (* 1/3 (cbrt (/ 1 (pow x 5))))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 11 binary64)))) #s(literal 5/81 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal -1/9 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/3 binary64) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))))) x)","x","(* x (+ 1 (/ 1 x)))","(+.f64 #s(literal 1 binary64) x)","(* 1/3 (* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2))))","(*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)))","(/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/.f64 (fma.f64 (/.f64 #s(literal 1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 x) (*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))))) (*.f64 x x))","(/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/.f64 (fma.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) #s(literal 5/81 binary64) (*.f64 (/.f64 #s(literal 1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 (pow.f64 x #s(literal 10 binary64))))) (pow.f64 x #s(literal 3 binary64)))) (*.f64 x x))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 10/243 (* (cbrt (pow x 13)) (/ 1 (pow (cbrt -1) 11)))) (* 5/81 (* (cbrt (pow x 16)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/.f64 (fma.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (/.f64 (fma.f64 (/.f64 #s(literal 1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 (pow.f64 x #s(literal 10 binary64))) (/.f64 (fma.f64 (/.f64 #s(literal 10/243 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 11 binary64))) (cbrt.f64 (pow.f64 x #s(literal 13 binary64))) (*.f64 (/.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) (cbrt.f64 (pow.f64 x #s(literal 16 binary64))))) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 x #s(literal 3 binary64)))) (*.f64 x x))","(* -1 (* (cbrt x) (cbrt -1)))","(*.f64 (neg.f64 (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 x))","(* -1 (* x (+ (* -1/3 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(*.f64 (neg.f64 x) (fma.f64 (/.f64 #s(literal -1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)))))","(* -1 (* x (+ (* -1 (/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(*.f64 (fma.f64 (neg.f64 (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) (/.f64 (fma.f64 (/.f64 #s(literal 1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 x) (*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))))) (pow.f64 x #s(literal 3 binary64)))) x)","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(*.f64 (neg.f64 x) (fma.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) (/.f64 (fma.f64 (/.f64 #s(literal -1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (/.f64 (fma.f64 (/.f64 #s(literal -1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 (pow.f64 x #s(literal 10 binary64))) (*.f64 (/.f64 #s(literal -5/81 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) (cbrt.f64 (pow.f64 x #s(literal 7 binary64))))) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 x #s(literal 3 binary64)))))"]],"stop":[["iter limit",1],["node limit",1]],"time":201.7548828125,"type":"simplify"},{"count":[[4,357]],"egraph":[[0,9092,16,0.060632003],[3,3101,16,0.04040567],[2,282,16,0.009804754],[1,43,16,0.001228941],[0,10,16,0.000772406],[0,6,16,9.3229e-5]],"inputs":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","(cbrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(cbrt.f64 x)"]],"memory":[[7437344,47800048]],"outputs":[["(*.f64 (/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x) (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 4/3 binary64))) (pow.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x x))) #s(literal 2 binary64)))) (-.f64 (-.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (cbrt.f64 (fma.f64 x x x))))","(*.f64 (/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x) (fma.f64 (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) #s(literal 3 binary64)) x (fma.f64 x x #s(literal 1 binary64)))) (fma.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x x))) (-.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x x))) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 4/3 binary64)))))","(*.f64 (/.f64 (-.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (-.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))","(*.f64 (/.f64 (-.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (-.f64 (-.f64 #s(literal 1 binary64) x) x)) (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))))","(*.f64 (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) (pow.f64 x #s(literal 1/6 binary64))) (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) (pow.f64 x #s(literal 1/6 binary64))))","(*.f64 (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)) (-.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 (pow.f64 (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) #s(literal -1 binary64)) (-.f64 (-.f64 #s(literal 1 binary64) x) x))","(*.f64 (neg.f64 (-.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (pow.f64 (neg.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x)) (pow.f64 (neg.f64 (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))) #s(literal -1 binary64)))","(*.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (/.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))))","(*.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (*.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64))))","(*.f64 (-.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) (/.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))))","(*.f64 (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) (*.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (pow.f64 (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) #s(literal -1 binary64))))","(*.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x) (pow.f64 (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))","(pow.f64 (/.f64 (pow.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 4/3 binary64))) (*.f64 (cbrt.f64 x) x)) (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (fma.f64 x x #s(literal 1 binary64)) (*.f64 x x)) (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64))) (+.f64 (fma.f64 (cbrt.f64 x) x (cbrt.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 4/3 binary64)))))","(/.f64 (*.f64 (-.f64 (fma.f64 x x #s(literal 1 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) #s(literal -1 binary64))) (-.f64 (-.f64 #s(literal 1 binary64) x) x))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) #s(literal -1 binary64))) (fma.f64 x (-.f64 (-.f64 #s(literal 1 binary64) x) x) (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))) #s(literal 2 binary64))) (+.f64 (/.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))) #s(literal 2 binary64)) (pow.f64 (/.f64 x (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))) #s(literal 2 binary64))) (+.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))) (/.f64 x (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))))))","(/.f64 (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) (-.f64 (neg.f64 (cbrt.f64 x)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) #s(literal 3 binary64))) (/.f64 (*.f64 x x) (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) #s(literal 3 binary64)))) (+.f64 (pow.f64 (/.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))) #s(literal 2 binary64)) (*.f64 (/.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))) #s(literal 3 binary64)) (pow.f64 (/.f64 x (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 x (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))) #s(literal 2 binary64)) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))) (/.f64 x (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x))) (neg.f64 (neg.f64 (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))))))","(/.f64 (*.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64)) (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 4/3 binary64))) (*.f64 (cbrt.f64 x) x)) #s(literal 1 binary64)) (*.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (*.f64 (-.f64 (fma.f64 x x #s(literal 1 binary64)) (*.f64 x x)) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 (cbrt.f64 x) x (cbrt.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 4/3 binary64)))) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (*.f64 (-.f64 (fma.f64 x x #s(literal 1 binary64)) (*.f64 x x)) #s(literal 1 binary64)) (*.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x) (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 x (-.f64 (-.f64 #s(literal 1 binary64) x) x) (fma.f64 x x #s(literal 1 binary64))) (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))))","(/.f64 (-.f64 (*.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))) (*.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))) (*.f64 (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) x)) (pow.f64 (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) #s(literal 2 binary64)))","(/.f64 (-.f64 (fma.f64 x x #s(literal 1 binary64)) (*.f64 x x)) (*.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (+.f64 (fma.f64 (cbrt.f64 x) x (cbrt.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 4/3 binary64))))))","(/.f64 (-.f64 (fma.f64 x x #s(literal 1 binary64)) (*.f64 x x)) (*.f64 (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) (-.f64 (-.f64 #s(literal 1 binary64) x) x)))","(/.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 4/3 binary64))) (*.f64 (cbrt.f64 x) x)) (*.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (*.f64 (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) (fma.f64 x (-.f64 (-.f64 #s(literal 1 binary64) x) x) (fma.f64 x x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x)) (neg.f64 (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))))","(/.f64 (-.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (-.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (neg.f64 (cbrt.f64 (fma.f64 x x x))))))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x) (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) #s(literal -1 binary64)))","(neg.f64 (/.f64 (neg.f64 (-.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x)) (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))))","(neg.f64 (/.f64 (-.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (neg.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))))","(neg.f64 (/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x) (neg.f64 (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))))))","(fma.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (cbrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal 1 binary64))))) (cbrt.f64 (-.f64 (fma.f64 x x #s(literal -1 binary64)) x)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))))) (cbrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 5/6 binary64))) (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (cbrt.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal 1 binary64))) (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 x x #s(literal 1 binary64)))) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (cbrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64))) (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 5/6 binary64))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 4/3 binary64))) (pow.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x x))) #s(literal 2 binary64)))) (-.f64 (-.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (cbrt.f64 (fma.f64 x x x))) (neg.f64 (/.f64 x (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))))))","(fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) #s(literal 3 binary64)) x (fma.f64 x x #s(literal 1 binary64)))) (fma.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x x))) (-.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x x))) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 4/3 binary64)))) (neg.f64 (/.f64 x (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))))))","(fma.f64 (/.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (-.f64 (-.f64 #s(literal 1 binary64) x) x)) (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) (neg.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))))","(fma.f64 (/.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (-.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (neg.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))))","(fma.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 1/6 binary64))) (pow.f64 x #s(literal 1/6 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (neg.f64 (pow.f64 x #s(literal 1/6 binary64))) (pow.f64 x #s(literal 1/6 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (cbrt.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (cbrt.f64 (pow.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal -1 binary64))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (pow.f64 (cbrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal -1 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) (cbrt.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) x)) (/.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) x)) (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))) (neg.f64 (/.f64 x (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))))))","(fma.f64 (pow.f64 x #s(literal 1/6 binary64)) (neg.f64 (pow.f64 x #s(literal 1/6 binary64))) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 #s(literal -1 binary64) (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (cbrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))) (neg.f64 (/.f64 x (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))))))","(fma.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (/.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))) (neg.f64 (/.f64 x (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))))))","(fma.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))))","(fma.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))) (neg.f64 (/.f64 x (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))))))","(fma.f64 (cbrt.f64 x) #s(literal -1 binary64) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (/.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))) (neg.f64 (/.f64 x (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))))))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (/.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))) (neg.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64) (neg.f64 (cbrt.f64 x)))","(fma.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) #s(literal -1 binary64)) (neg.f64 (/.f64 x (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))))))","(fma.f64 #s(literal 1 binary64) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (neg.f64 (cbrt.f64 x)))","(-.f64 (+.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 0 binary64)) (cbrt.f64 x))","(-.f64 (/.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))))","(-.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))) (/.f64 x (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))))","(-.f64 #s(literal 0 binary64) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (/.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))) (neg.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))))","(+.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))) (neg.f64 (/.f64 x (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))))))","(+.f64 (neg.f64 (cbrt.f64 x)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(+.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (neg.f64 (cbrt.f64 x)))","(*.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (cbrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(*.f64 (cbrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal 1 binary64))))) (cbrt.f64 (-.f64 (fma.f64 x x #s(literal -1 binary64)) x)))","(*.f64 (cbrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))))) (cbrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(*.f64 (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 5/6 binary64))) (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64))))","(*.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(*.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (cbrt.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(*.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal 1 binary64))) (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 x x #s(literal 1 binary64)))) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(*.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (cbrt.f64 (-.f64 x #s(literal 1 binary64))))","(*.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (cbrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (-.f64 x #s(literal 1 binary64))))","(*.f64 (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64))) (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 5/6 binary64))))","(*.f64 (cbrt.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (cbrt.f64 (pow.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))))","(*.f64 (pow.f64 (cbrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal -1 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(*.f64 (cbrt.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))))","(*.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) (cbrt.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)))","(*.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (cbrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(pow.f64 (exp.f64 #s(literal 1/3 binary64)) (log1p.f64 x))","(pow.f64 (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) #s(literal 2 binary64))","(pow.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 2/3 binary64))","(pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1/3 binary64))","(pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 1/9 binary64))","(pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal 1/6 binary64))","(pow.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) #s(literal 1/2 binary64))","(pow.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","(pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/3 binary64))","(/.f64 (cbrt.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (cbrt.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (cbrt.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)))) (cbrt.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (cbrt.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)))) (cbrt.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (cbrt.f64 (cbrt.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal 1 binary64))))) (cbrt.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x #s(literal 1 binary64))))) (cbrt.f64 (cbrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (cbrt.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)))) (cbrt.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (cbrt.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (cbrt.f64 (cbrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (-.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (cbrt.f64 (fma.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (cbrt.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)))) (cbrt.f64 (+.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))))","(/.f64 (cbrt.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (cbrt.f64 (neg.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))))","(/.f64 (cbrt.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (cbrt.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (cbrt.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (cbrt.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (cbrt.f64 (*.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))) (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)))","(/.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (sqrt.f64 (-.f64 #s(literal 1 binary64) x)))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)))","(/.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))) (cbrt.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))) (cbrt.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (cbrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (cbrt.f64 (neg.f64 (fma.f64 x x #s(literal 1 binary64)))) (cbrt.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64))) (cbrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (pow.f64 (cbrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (exp.f64 (log.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))))) (exp.f64 (log.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))))))","(/.f64 (exp.f64 (*.f64 #s(literal 1/3 binary64) (log1p.f64 (pow.f64 x #s(literal 3 binary64))))) (exp.f64 (*.f64 #s(literal 1/3 binary64) (log1p.f64 (fma.f64 x x x)))))","(/.f64 (neg.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (cbrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (cbrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (cbrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal 1 binary64))))))","(/.f64 (cbrt.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (cbrt.f64 (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal 1 binary64))) (cbrt.f64 (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 (cbrt.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (cbrt.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (cbrt.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (cbrt.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (cbrt.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (cbrt.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (cbrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 #s(literal 1 binary64) x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (cbrt.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(cbrt.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (fma.f64 x x #s(literal 1 binary64))))","(cbrt.f64 (-.f64 #s(literal 1 binary64) x))","(exp.f64 (-.f64 (log1p.f64 x) (*.f64 #s(literal 2/3 binary64) (log1p.f64 x))))","(exp.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) (log1p.f64 x)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (log1p.f64 x)) #s(literal 2/3 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log1p.f64 x)) #s(literal 1/6 binary64)))","(exp.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal 1/3 binary64)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log1p.f64 x) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) #s(literal 3 binary64)) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) #s(literal 3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) #s(literal 3 binary64)) (pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) #s(literal 3 binary64)))","(*.f64 (cbrt.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 3 binary64))) (cbrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))))","(*.f64 (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64))) (cbrt.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -3 binary64))))","(*.f64 (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))))","(*.f64 (exp.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64)))) (exp.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 x))))","(*.f64 (exp.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (exp.f64 (neg.f64 (log1p.f64 (fma.f64 x x x)))))","(*.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 x x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal 1 binary64)))) (-.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) x))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 5/6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 5/6 binary64)))","(*.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 (-.f64 #s(literal 1 binary64) x)))","(*.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 3 binary64)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (pow.f64 (cbrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 3 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x))","(pow.f64 (exp.f64 #s(literal 3 binary64)) (*.f64 (log1p.f64 x) #s(literal 1/3 binary64)))","(pow.f64 (exp.f64 #s(literal 1 binary64)) (log1p.f64 x))","(pow.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) #s(literal 6 binary64))","(pow.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))","(pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 1/3 binary64))","(pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal 1/2 binary64))","(pow.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) #s(literal 3/2 binary64))","(pow.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64))","(pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(/.f64 (pow.f64 (neg.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64)))) #s(literal 3 binary64)) (pow.f64 (neg.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64)))) #s(literal 3 binary64)))","(/.f64 (pow.f64 (neg.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) #s(literal 3 binary64)) (pow.f64 (neg.f64 (cbrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) #s(literal 3 binary64)))","(/.f64 (pow.f64 (cbrt.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) #s(literal 3 binary64)) (pow.f64 (cbrt.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) #s(literal 3 binary64)))","(/.f64 (cbrt.f64 (pow.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 3 binary64))) (cbrt.f64 (pow.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 3 binary64))))","(/.f64 (cbrt.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 3 binary64))) (cbrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64))))","(/.f64 (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64))) (cbrt.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 3 binary64))))","(/.f64 (exp.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 (pow.f64 x #s(literal 3 binary64))))) (exp.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 (fma.f64 x x x)))))","(/.f64 (exp.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64)))) (exp.f64 (log.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (exp.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (exp.f64 (log1p.f64 (fma.f64 x x x))))","(/.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (sqrt.f64 (-.f64 #s(literal 1 binary64) x))) (sqrt.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (fma.f64 x x #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (+.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (cbrt.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal 1 binary64)))) (cbrt.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x #s(literal 1 binary64)))) (cbrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (cbrt.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (cbrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (fma.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (+.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal 1 binary64))) (neg.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (cbrt.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (cbrt.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal 3 binary64)))","(/.f64 #s(literal 1 binary64) (cbrt.f64 (exp.f64 (*.f64 (neg.f64 (log1p.f64 x)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(neg.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(neg.f64 (/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(neg.f64 (-.f64 x #s(literal 1 binary64)))","(fma.f64 (pow.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 1/6 binary64))) #s(literal 3 binary64)) (sqrt.f64 x) #s(literal 1 binary64))","(fma.f64 (pow.f64 (neg.f64 (pow.f64 x #s(literal 1/6 binary64))) #s(literal 3 binary64)) (sqrt.f64 x) #s(literal 1 binary64))","(fma.f64 (pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal 3 binary64)) (pow.f64 (cbrt.f64 (cbrt.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 (cbrt.f64 (cbrt.f64 x)) #s(literal 3 binary64)) (pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))","(fma.f64 (cbrt.f64 (pow.f64 x #s(literal 5/2 binary64))) (pow.f64 x #s(literal 1/6 binary64)) #s(literal 1 binary64))","(fma.f64 (cbrt.f64 (pow.f64 x #s(literal 3/2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 3/2 binary64))) #s(literal 1 binary64))","(fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 7 binary64))) (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))","(fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 8 binary64))) (cbrt.f64 (cbrt.f64 x)) #s(literal 1 binary64))","(fma.f64 (/.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) x) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 x #s(literal 5/6 binary64)) (pow.f64 x #s(literal 1/6 binary64)) #s(literal 1 binary64))","(fma.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x) #s(literal 1 binary64))","(fma.f64 (pow.f64 (neg.f64 (cbrt.f64 x)) #s(literal 3/2 binary64)) (pow.f64 (neg.f64 (cbrt.f64 x)) #s(literal 3/2 binary64)) #s(literal 1 binary64))","(fma.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 8 binary64))) #s(literal 1 binary64))","(fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 7 binary64))) #s(literal 1 binary64))","(fma.f64 (pow.f64 x #s(literal 1/6 binary64)) (cbrt.f64 (pow.f64 x #s(literal 5/2 binary64))) #s(literal 1 binary64))","(fma.f64 (pow.f64 x #s(literal 1/6 binary64)) (pow.f64 x #s(literal 5/6 binary64)) #s(literal 1 binary64))","(fma.f64 (sqrt.f64 x) (pow.f64 (neg.f64 (pow.f64 x #s(literal 1/6 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))","(fma.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))","(fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))","(fma.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (cbrt.f64 x) #s(literal 1 binary64))","(fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))","(fma.f64 (neg.f64 (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (neg.f64 (cbrt.f64 x)) #s(literal 1 binary64))","(fma.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (cbrt.f64 x) #s(literal 1 binary64))","(fma.f64 (*.f64 x x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (cbrt.f64 x) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))","(fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) x #s(literal 1 binary64))","(fma.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 x #s(literal -1 binary64) #s(literal 1 binary64))","(fma.f64 x #s(literal 1 binary64) #s(literal 1 binary64))","(cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)))","(-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)))","(-.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (-.f64 x #s(literal 1 binary64)))","(-.f64 #s(literal 1 binary64) x)","(exp.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (log1p.f64 x)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal 3 binary64)) #s(literal 1/3 binary64)))","(exp.f64 (*.f64 (neg.f64 (log1p.f64 x)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64))) #s(literal 1/3 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal 2/3 binary64) (log1p.f64 x)) #s(literal 3/2 binary64)))","(exp.f64 (log1p.f64 x))","(+.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 #s(literal 1 binary64) x)","(+.f64 x #s(literal 1 binary64))","(*.f64 (cbrt.f64 (pow.f64 x #s(literal 5/6 binary64))) (cbrt.f64 (pow.f64 x #s(literal 1/6 binary64))))","(*.f64 (cbrt.f64 (pow.f64 x #s(literal 1/6 binary64))) (cbrt.f64 (pow.f64 x #s(literal 5/6 binary64))))","(*.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (cbrt.f64 (cbrt.f64 x)))","(*.f64 (pow.f64 x #s(literal 1/6 binary64)) (pow.f64 x #s(literal 1/6 binary64)))","(*.f64 (cbrt.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (cbrt.f64 x))","(pow.f64 (exp.f64 #s(literal 1/3 binary64)) (log.f64 x))","(pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 2 binary64))","(pow.f64 (sqrt.f64 x) #s(literal 2/3 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1/6 binary64))","(pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/9 binary64))","(pow.f64 (cbrt.f64 x) #s(literal 1 binary64))","(pow.f64 x #s(literal 1/3 binary64))","(cbrt.f64 x)","(exp.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) (log.f64 x)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 x)) #s(literal 2/3 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) #s(literal 1/6 binary64)))","(exp.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal 1 binary64)))","(exp.f64 (log.f64 (cbrt.f64 x)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":252.760009765625,"type":"rewrite"},{"compiler":[[7589,1335]],"memory":[[-7457488,34955936]],"time":55.9912109375,"type":"eval"},{"alts":[["(fma.f64 (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (cbrt.f64 x)))","next",60.80765191753776,"binary64"],["(-.f64 (pow.f64 (exp.f64 #s(literal 1/3 binary64)) (log1p.f64 x)) (cbrt.f64 x))","fresh",61.218841502605336,"binary64"],["(-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 1/3 binary64))) (cbrt.f64 x))","fresh",61.35634997599079,"binary64"],["(-.f64 (cbrt.f64 (fma.f64 (pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal 3 binary64)) (pow.f64 (cbrt.f64 (cbrt.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (cbrt.f64 x))","fresh",60.08243540543497,"binary64"],["(-.f64 (cbrt.f64 (fma.f64 (pow.f64 x #s(literal 5/6 binary64)) (pow.f64 x #s(literal 1/6 binary64)) #s(literal 1 binary64))) (cbrt.f64 x))","fresh",59.54395005260695,"binary64"],["(-.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))) (cbrt.f64 x))","next",60.36081670215733,"binary64"],["(-.f64 (cbrt.f64 (pow.f64 (exp.f64 #s(literal 1 binary64)) (log1p.f64 x))) (cbrt.f64 x))","fresh",61.530811567379615,"binary64"],["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 2 binary64)))","fresh",59.5847038775417,"binary64"],["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (pow.f64 (sqrt.f64 x) #s(literal 2/3 binary64)))","fresh",59.57965848973856,"binary64"],["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (pow.f64 (exp.f64 #s(literal 1/3 binary64)) (log.f64 x)))","fresh",60.31611845839995,"binary64"],["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 1/3 binary64)))","fresh",59.59152491862182,"binary64"],["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (cbrt.f64 (cbrt.f64 x))))","fresh",60.55842201144765,"binary64"],["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (exp.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) #s(literal 1/6 binary64))))","fresh",60.172315769077954,"binary64"],["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (exp.f64 (log.f64 (cbrt.f64 x))))","fresh",60.5624061522272,"binary64"],["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","done",60.29627493697794,"binary64"],["(-.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (cbrt.f64 x))","next",60.75453786238865,"binary64"],["(-.f64 #s(approx (cbrt (+ x 1)) (fma.f64 #s(literal 1/3 binary64) x #s(literal 1 binary64))) (cbrt.f64 x))","fresh",61.363189241395496,"binary64"],["(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","next",62.86772102304903,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (fma.f64 #s(literal 1/3 binary64) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x))))","fresh",61.363189241395496,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x)))","fresh",48.2336463974876,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x)))","fresh",48.35623713611538,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -10/243 binary64) (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) (*.f64 x x)))","fresh",48.129191207924485,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","next",30.90374653482893,"binary64"]],"compiler":[[15,11],[8,7],[8,7],[18,13],[12,10],[10,7],[9,8],[10,9],[9,8],[10,9],[8,7],[14,11],[12,11],[9,8],[7,6],[7,6],[12,10],[9,8],[15,12],[30,23],[22,17],[38,29],[16,13],[15,11],[8,7],[8,7],[18,13],[12,10],[10,7],[9,8],[10,9],[9,8],[10,9],[8,7],[14,11],[12,11],[9,8],[7,6],[12,10],[9,8],[15,12],[30,23],[22,17],[38,29],[16,13]],"count":[[383,23]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[382,22],"picked":[1,1]}],"memory":[[7696080,24287264]],"min-error":[[30.207742071897734,"binary64"]],"time":24.07080078125,"type":"prune"},{"egraph":[[0,8396,142,0.092087397],[7,7166,142,0.021913264],[6,2490,142,0.02927293],[5,812,142,0.009971034],[4,348,142,0.003722026],[3,182,142,0.001420332],[2,113,142,0.000744174],[1,77,144,0.000472325],[0,56,144,0.000499051],[0,31,153,0.00035226]],"inputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64))","(cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))","(/.f64 (/.f64 #s(literal 1 binary64) x) x)","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(literal 1/3 binary64)","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","#s(approx (cbrt (+ x 1)) #s(literal 1 binary64))","#s(literal 1 binary64)","(cbrt.f64 x)","x","(-.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))) (cbrt.f64 x))","(cbrt.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64)))","(fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))","(sqrt.f64 x)","x","#s(literal 1 binary64)","(cbrt.f64 x)","(-.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (cbrt.f64 x))","(cbrt.f64 (exp.f64 (log1p.f64 x)))","(exp.f64 (log1p.f64 x))","(log1p.f64 x)","x","(cbrt.f64 x)","(fma.f64 (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (cbrt.f64 x)))","(pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))","(cbrt.f64 (-.f64 x #s(literal 1 binary64)))","(-.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","#s(literal -1 binary64)","(cbrt.f64 (fma.f64 x x #s(literal -1 binary64)))","(fma.f64 x x #s(literal -1 binary64))","(neg.f64 (cbrt.f64 x))","(cbrt.f64 x)"]],"locations":[["(-.f64 x #s(literal 1 binary64))","cost-diff",0],["(cbrt.f64 (-.f64 x #s(literal 1 binary64)))","cost-diff",0],["(pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))","cost-diff",0],["(fma.f64 (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (cbrt.f64 x)))","cost-diff",2],["(log1p.f64 x)","cost-diff",0],["(exp.f64 (log1p.f64 x))","cost-diff",0],["(cbrt.f64 (exp.f64 (log1p.f64 x)))","cost-diff",0],["(-.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (cbrt.f64 x))","cost-diff",0],["(sqrt.f64 x)","cost-diff",0],["(cbrt.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64)))","cost-diff",0],["(-.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))) (cbrt.f64 x))","cost-diff",0],["(fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))","cost-diff",3],["(cbrt.f64 x)","cost-diff",0],["#s(approx (cbrt (+ x 1)) #s(literal 1 binary64))","cost-diff",0],["(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","cost-diff",0],["(/.f64 (/.f64 #s(literal 1 binary64) x) x)","cost-diff",0],["(cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))","cost-diff",0],["(*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64))","cost-diff",0],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","cost-diff",0]],"memory":[[-51504,38496496]],"method":["egg-herbie"],"outputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))))","(*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64))","(*.f64 #s(literal 1/3 binary64) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)))","(cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))","(/.f64 (/.f64 #s(literal 1 binary64) x) x)","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(literal 1/3 binary64)","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","#s(approx (cbrt (+ x 1)) #s(literal 1 binary64))","#s(literal 1 binary64)","(cbrt.f64 x)","x","(-.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))) (cbrt.f64 x))","(-.f64 (cbrt.f64 (-.f64 x #s(literal -1 binary64))) (cbrt.f64 x))","(cbrt.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64)))","(cbrt.f64 (-.f64 x #s(literal -1 binary64)))","(fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))","(-.f64 x #s(literal -1 binary64))","(sqrt.f64 x)","x","#s(literal 1 binary64)","(cbrt.f64 x)","(-.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (cbrt.f64 x))","(-.f64 (cbrt.f64 (-.f64 x #s(literal -1 binary64))) (cbrt.f64 x))","(cbrt.f64 (exp.f64 (log1p.f64 x)))","(cbrt.f64 (-.f64 x #s(literal -1 binary64)))","(exp.f64 (log1p.f64 x))","(-.f64 x #s(literal -1 binary64))","(log1p.f64 x)","x","(cbrt.f64 x)","(fma.f64 (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (cbrt.f64 x)))","(-.f64 (/.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (cbrt.f64 (-.f64 x #s(literal 1 binary64)))) (cbrt.f64 x))","(pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))","(cbrt.f64 (-.f64 x #s(literal 1 binary64)))","(-.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","#s(literal -1 binary64)","(cbrt.f64 (fma.f64 x x #s(literal -1 binary64)))","(fma.f64 x x #s(literal -1 binary64))","(neg.f64 (cbrt.f64 x))","(cbrt.f64 x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":250.842041015625,"type":"simplify"},{"compiler":[[157,32]],"locations":[["(cbrt.f64 x)","accuracy",0.0625],["(pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))","accuracy",0.19921875],["(cbrt.f64 (fma.f64 x x #s(literal -1 binary64)))","accuracy",30.771825920606325],["(fma.f64 (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (cbrt.f64 x)))","accuracy",60.68430218392402],["(cbrt.f64 (exp.f64 (log1p.f64 x)))","accuracy",0.0625],["(cbrt.f64 x)","accuracy",0.0625],["(exp.f64 (log1p.f64 x))","accuracy",5.9522124852305485],["(-.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (cbrt.f64 x))","accuracy",60.29627493697794],["(cbrt.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64)))","accuracy",0.0625],["(cbrt.f64 x)","accuracy",0.0625],["(fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))","accuracy",0.5078125],["(-.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))) (cbrt.f64 x))","accuracy",60.29627493697794],["(cbrt.f64 x)","accuracy",0.0625],["#s(approx (cbrt (+ x 1)) #s(literal 1 binary64))","accuracy",59.040660249906146],["(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","accuracy",60.29627493697794],["(/.f64 (/.f64 #s(literal 1 binary64) x) x)","accuracy",0.15625],["(*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64))","accuracy",0.36328125],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","accuracy",0.696096278712372],["(cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))","accuracy",30.09255941516785]],"memory":[[-8414432,54962528]],"mixsample":[[18.36767578125,"adjust",800],[3.792236328125,"ival-div",0],[4.579345703125,"ival-exp",0],[0.014892578125,"ival-pow",1600],[0.13037109375,"ival-assert",0],[0.60498046875,"ival-neg",800],[9.17529296875,"ival-sub",0],[5.48486328125,"ival-log1p",800],[1.949951171875,"ival-sqrt",0],[4.462158203125,"const",0],[0.4228515625,"ival-sub",400],[1.949951171875,"ival-cbrt",2000],[1.906982421875,"ival-pow",800],[3.78076171875,"ival-log1p",400],[3.451416015625,"ival-pow",0],[0.540283203125,"ival-neg",400],[2.63623046875,"ival-exp",2000],[7.040771484375,"ival-add",0],[2.061279296875,"ival-mult",800],[0.524658203125,"ival-sub",800],[5.293212890625,"ival-exp",800],[0.013671875,"ival-mult",1600],[12.00830078125,"ival-cbrt",0],[2.109130859375,"ival-add",400],[0.099853515625,"ival-exp",1600],[4.338134765625,"ival-log1p",0],[1.670166015625,"ival-pow",400],[1.093017578125,"ival-sqrt",400],[0.06103515625,"ival-cbrt",1600],[0.328125,"ival-sqrt",2000],[0.09521484375,"ival-sub",2000],[0.456787109375,"ival-mult",2000],[1.210693359375,"ival-sqrt",800],[0.004150390625,"ival-neg",1600],[4.32080078125,"ival-exp",400],[0.071044921875,"ival-log1p",1600],[0.461669921875,"ival-pow",2000],[6.24267578125,"ival-cbrt",400],[6.70166015625,"ival-cbrt",800],[3.8447265625,"adjust",2000],[0.008056640625,"ival-sqrt",1600],[0.00927734375,"ival-add",1600],[6.46875,"ival-mult",0],[1.883056640625,"ival-mult",400],[2.19384765625,"ival-log1p",2000],[1.058837890625,"ival-add",2000],[0.118408203125,"ival-neg",2000],[0.20556640625,"ival-true",0],[2.418701171875,"ival-add",800],[0.38427734375,"exact",0],[1.162109375,"ival-neg",0]],"outcomes":[[117.783203125,1,"valid",197],[58.976806640625,2,"valid",55],[1.20947265625,0,"valid",4]],"time":274.924072265625,"type":"localize"},{"count":[[20,91]],"inputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64))","(cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))","(/.f64 (/.f64 #s(literal 1 binary64) x) x)","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","#s(approx (cbrt (+ x 1)) #s(literal 1 binary64))","(cbrt.f64 x)","(fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))","(-.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))) (cbrt.f64 x))","(cbrt.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64)))","(sqrt.f64 x)","(-.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (cbrt.f64 x))","(cbrt.f64 (exp.f64 (log1p.f64 x)))","(exp.f64 (log1p.f64 x))","(log1p.f64 x)","(fma.f64 (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (cbrt.f64 x)))","(pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))","(cbrt.f64 (-.f64 x #s(literal 1 binary64)))","(-.f64 x #s(literal 1 binary64))","(cbrt.f64 (fma.f64 x x #s(literal -1 binary64)))"]],"memory":[[-1723632,16124272]],"outputs":[["(- 1 (cbrt x))","(- (+ 1 (* 1/3 x)) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* -1/9 x)))) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))) (cbrt x))","(* 1/3 (cbrt (/ 1 (pow x 2))))","(cbrt (/ 1 (pow x 2)))","(/ 1 (pow x 2))","1","(+ 1 (* 1/3 x))","(+ 1 (* x (+ 1/3 (* -1/9 x))))","(+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9)))))","(cbrt x)","(+ 1 x)","(sqrt x)","x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(cbrt -1)","(+ (cbrt -1) (* -1/3 (* x (cbrt (/ 1 (pow (cbrt -1) 2))))))","(+ (cbrt -1) (* x (+ (* -1/3 (cbrt (/ 1 (pow (cbrt -1) 2)))) (* -1/3 (/ (* x (+ 1 (* 1/3 (cbrt (/ 1 (cbrt -1)))))) (pow (cbrt -1) 2))))))","(+ (cbrt -1) (* x (+ (* -1/3 (cbrt (/ 1 (pow (cbrt -1) 2)))) (* x (+ (* -1/3 (/ (+ 1 (* 1/3 (cbrt (/ 1 (cbrt -1))))) (pow (cbrt -1) 2))) (* 1/3 (/ (* x (- (* 1/27 (/ 1 (pow (cbrt -1) 2))) (+ 1 (* 2/3 (* (cbrt (/ 1 (pow (cbrt -1) 5))) (+ 1 (* 1/3 (cbrt (/ 1 (cbrt -1)))))))))) (pow (cbrt -1) 2))))))))","(+ (cbrt -1) (* 1/3 (* x (cbrt (/ 1 (pow (cbrt -1) 2))))))","(+ (cbrt -1) (* x (+ (* -1/9 (* x (cbrt (/ 1 (pow (cbrt -1) 7))))) (* 1/3 (cbrt (/ 1 (pow (cbrt -1) 2)))))))","(+ (cbrt -1) (* x (+ (* 1/3 (cbrt (/ 1 (pow (cbrt -1) 2)))) (* x (+ (* -1/9 (cbrt (/ 1 (pow (cbrt -1) 7)))) (* 5/81 (/ x (pow (cbrt -1) 4))))))))","-1","(- x 1)","(+ (cbrt -1) (* 1/3 (/ (pow x 2) (pow (cbrt -1) 2))))","(+ (cbrt -1) (* (pow x 2) (+ (* -1/9 (/ (pow x 2) (pow (cbrt -1) 5))) (* 1/3 (/ 1 (pow (cbrt -1) 2))))))","(+ (cbrt -1) (* (pow x 2) (+ (* (pow x 2) (- (* 5/81 (/ (pow x 2) (pow (cbrt -1) 8))) (* 1/9 (/ 1 (pow (cbrt -1) 5))))) (* 1/3 (/ 1 (pow (cbrt -1) 2))))))","(/ (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4))))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* -10/243 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(* x (+ (cbrt (/ 1 (pow x 2))) (* 1/3 (cbrt (/ 1 (pow x 5))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 5)))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 5/81 (cbrt (/ 1 (pow x 11)))) (* 1/3 (cbrt (/ 1 (pow x 5))))))))","(* x (+ 1 (/ 1 x)))","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(cbrt (+ (/ 1 x) (/ 1 (pow x 2))))","(+ (cbrt (+ (/ 1 x) (/ 1 (pow x 2)))) (* 1/3 (* (/ 1 (pow x 3)) (cbrt (/ 1 (pow (+ (/ 1 x) (/ 1 (pow x 2))) 2))))))","(+ (cbrt (+ (/ 1 x) (/ 1 (pow x 2)))) (+ (* 1/3 (* (/ 1 (pow x 3)) (cbrt (/ 1 (pow (+ (/ 1 x) (/ 1 (pow x 2))) 2))))) (* 1/3 (* (/ 1 (pow x 4)) (cbrt (/ 1 (pow (+ (/ 1 x) (/ 1 (pow x 2))) 2)))))))","(+ (cbrt (+ (/ 1 x) (/ 1 (pow x 2)))) (+ (* 1/3 (* (/ 1 (pow x 3)) (cbrt (/ 1 (pow (+ (/ 1 x) (/ 1 (pow x 2))) 2))))) (+ (* 1/3 (* (/ 1 (pow x 4)) (cbrt (/ 1 (pow (+ (/ 1 x) (/ 1 (pow x 2))) 2))))) (* 1/3 (* (/ 1 (pow x 5)) (cbrt (/ 1 (pow (+ (/ 1 x) (/ 1 (pow x 2))) 2))))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (* -1/3 (cbrt (/ 1 (pow x 5))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/3 (cbrt (/ 1 (pow x 5)))) (* -1/9 (cbrt (/ 1 (pow x 8)))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/3 (cbrt (/ 1 (pow x 5)))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (* -5/81 (cbrt (/ 1 (pow x 11))))))))","(* x (- 1 (/ 1 x)))","(cbrt (pow x 2))","(* x (+ (cbrt (/ 1 x)) (* -1/3 (cbrt (/ 1 (pow x 7))))))","(* x (+ (cbrt (/ 1 x)) (+ (* -1/3 (cbrt (/ 1 (pow x 7)))) (* -1/9 (cbrt (/ 1 (pow x 13)))))))","(* x (+ (cbrt (/ 1 x)) (+ (* -1/3 (cbrt (/ 1 (pow x 7)))) (+ (* -1/9 (cbrt (/ 1 (pow x 13)))) (* -5/81 (cbrt (/ 1 (pow x 19))))))))","(* 1/3 (* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2))))","(/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 10/243 (* (cbrt (pow x 13)) (/ 1 (pow (cbrt -1) 11)))) (* 5/81 (* (cbrt (pow x 16)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(* -1 (* (cbrt x) (cbrt -1)))","(* -1 (* x (+ (* -1/3 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (pow (sqrt -1) 2)))","(* -1 (* x (- (pow (sqrt -1) 2) (/ 1 x))))","(* -1 (* x (- (cbrt (/ (pow (sqrt -1) 2) (pow x 2))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (- (+ (cbrt (/ (pow (sqrt -1) 2) (pow x 2))) (* -1/3 (cbrt (/ 1 (* (pow x 5) (pow (sqrt -1) 4)))))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (- (+ (cbrt (/ (pow (sqrt -1) 2) (pow x 2))) (* -1 (/ (+ (* 1/9 (cbrt (/ x (pow (sqrt -1) 10)))) (* 1/3 (cbrt (/ (pow x 4) (pow (sqrt -1) 4))))) (pow x 3)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (- (+ (cbrt (/ (pow (sqrt -1) 2) (pow x 2))) (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (cbrt (/ (pow x 10) (pow (sqrt -1) 10)))) (* -5/81 (cbrt (/ (pow x 7) (pow (sqrt -1) 16))))) (pow x 3))) (* 1/3 (cbrt (/ (pow x 4) (pow (sqrt -1) 4))))) (pow x 3)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (cbrt (* x (pow (sqrt -1) 2))))","(* -1 (* x (+ (cbrt (/ (pow (sqrt -1) 2) (pow x 2))) (* -1/3 (cbrt (/ 1 (* (pow x 5) (pow (sqrt -1) 4))))))))","(* -1 (* x (+ (cbrt (/ (pow (sqrt -1) 2) (pow x 2))) (* -1 (/ (+ (* 1/9 (cbrt (/ x (pow (sqrt -1) 10)))) (* 1/3 (cbrt (/ (pow x 4) (pow (sqrt -1) 4))))) (pow x 3))))))","(* -1 (* x (+ (cbrt (/ (pow (sqrt -1) 2) (pow x 2))) (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (cbrt (/ (pow x 10) (pow (sqrt -1) 10)))) (* -5/81 (cbrt (/ (pow x 7) (pow (sqrt -1) 16))))) (pow x 3))) (* 1/3 (cbrt (/ (pow x 4) (pow (sqrt -1) 4))))) (pow x 3))))))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(* -1 (* x (- (* (cbrt (/ 1 (pow x 2))) (/ 1 (cbrt -1))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (- (+ (* 1/3 (* (cbrt (/ 1 (pow x 5))) (/ 1 (cbrt -1)))) (* (cbrt (/ 1 (pow x 2))) (/ 1 (cbrt -1)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (- (+ (* -1 (/ (+ (* -1/3 (* (cbrt (pow x 4)) (/ 1 (cbrt -1)))) (* 1/9 (* (cbrt x) (/ 1 (cbrt -1))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (/ 1 (cbrt -1)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (- (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (cbrt -1)))) (* 5/81 (* (cbrt (pow x 7)) (/ 1 (cbrt -1))))) (pow x 3))) (* -1/3 (* (cbrt (pow x 4)) (/ 1 (cbrt -1))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (/ 1 (cbrt -1)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(+ (cbrt (+ (/ 1 x) (/ 1 (pow x 2)))) (* -1/3 (* (/ 1 (* (pow x 3) (cbrt -1))) (cbrt (/ 1 (pow (+ (/ 1 x) (/ 1 (pow x 2))) 2))))))","(+ (cbrt (+ (/ 1 x) (/ 1 (pow x 2)))) (* -1 (/ (+ (* 1/3 (* (/ 1 (cbrt -1)) (cbrt (/ 1 (pow (+ (/ 1 x) (/ 1 (pow x 2))) 2))))) (* 1/3 (* (/ 1 (* x (cbrt -1))) (cbrt (/ 1 (pow (+ (/ 1 x) (/ 1 (pow x 2))) 2)))))) (pow x 3))))","(+ (cbrt (+ (/ 1 x) (/ 1 (pow x 2)))) (* -1 (/ (+ (* -1 (/ (+ (* -1/3 (* (/ 1 (cbrt -1)) (cbrt (/ 1 (pow (+ (/ 1 x) (/ 1 (pow x 2))) 2))))) (* -1/3 (* (/ 1 (* x (cbrt -1))) (cbrt (/ 1 (pow (+ (/ 1 x) (/ 1 (pow x 2))) 2)))))) x)) (* 1/3 (* (/ 1 (cbrt -1)) (cbrt (/ 1 (pow (+ (/ 1 x) (/ 1 (pow x 2))) 2)))))) (pow x 3))))","(* -1 (* x (+ (* -1/3 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* 1/9 (* (cbrt x) (cbrt -1))) (* 1/3 (* (cbrt (pow x 4)) (cbrt -1)))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (cbrt -1))) (* -5/81 (* (cbrt (pow x 7)) (cbrt -1)))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (cbrt -1)))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (- (/ 1 x) 1)))","(* -1 (* (cbrt (pow x 2)) (cbrt -1)))","(* -1 (* x (+ (* 1/3 (cbrt (/ 1 (pow x 7)))) (* (cbrt (/ 1 x)) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* -1/3 (cbrt (pow x 2))) (* 1/9 (* (cbrt (/ 1 (pow x 4))) (cbrt -1)))) (pow x 3))) (* (cbrt (/ 1 x)) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 5)) (cbrt -1))) (* 5/81 (cbrt (/ 1 x)))) (pow x 3))) (* -1/3 (cbrt (pow x 2)))) (pow x 3))) (* (cbrt (/ 1 x)) (cbrt -1)))))"]],"series":[[12.06591796875,"((- (cbrt (+ x 1)) (cbrt x)) (* (cbrt (/ (/ 1 x) x)) 1/3) (cbrt (/ (/ 1 x) x)) (/ (/ 1 x) x) (- (cbrt (+ x 1)) (cbrt x)) (cbrt (+ x 1)) (cbrt x) (+ (* (sqrt x) (sqrt x)) 1) (- (cbrt (+ (* (sqrt x) (sqrt x)) 1)) (cbrt x)) (cbrt (+ (* (sqrt x) (sqrt x)) 1)) (sqrt x) (- (cbrt (exp (log (+ 1 x)))) (cbrt x)) (cbrt (exp (log (+ 1 x)))) (exp (log (+ 1 x))) (log (+ 1 x)) (+ (* (pow (cbrt (- x 1)) -1) (cbrt (+ (* x x) -1))) (neg (cbrt x))) (pow (cbrt (- x 1)) -1) (cbrt (- x 1)) (- x 1) (cbrt (+ (* x x) -1)))","x","-inf"],[7.984130859375,"((- (cbrt (+ x 1)) (cbrt x)) (* (cbrt (/ (/ 1 x) x)) 1/3) (cbrt (/ (/ 1 x) x)) (/ (/ 1 x) x) (- (cbrt (+ x 1)) (cbrt x)) (cbrt (+ x 1)) (cbrt x) (+ (* (sqrt x) (sqrt x)) 1) (- (cbrt (+ (* (sqrt x) (sqrt x)) 1)) (cbrt x)) (cbrt (+ (* (sqrt x) (sqrt x)) 1)) (sqrt x) (- (cbrt (exp (log (+ 1 x)))) (cbrt x)) (cbrt (exp (log (+ 1 x)))) (exp (log (+ 1 x))) (log (+ 1 x)) (+ (* (pow (cbrt (- x 1)) -1) (cbrt (+ (* x x) -1))) (neg (cbrt x))) (pow (cbrt (- x 1)) -1) (cbrt (- x 1)) (- x 1) (cbrt (+ (* x x) -1)))","x","inf"],[8.01904296875,"((- (cbrt (+ x 1)) (cbrt x)) (* (cbrt (/ (/ 1 x) x)) 1/3) (cbrt (/ (/ 1 x) x)) (/ (/ 1 x) x) (- (cbrt (+ x 1)) (cbrt x)) (cbrt (+ x 1)) (cbrt x) (+ (* (sqrt x) (sqrt x)) 1) (- (cbrt (+ (* (sqrt x) (sqrt x)) 1)) (cbrt x)) (cbrt (+ (* (sqrt x) (sqrt x)) 1)) (sqrt x) (- (cbrt (exp (log (+ 1 x)))) (cbrt x)) (cbrt (exp (log (+ 1 x)))) (exp (log (+ 1 x))) (log (+ 1 x)) (+ (* (pow (cbrt (- x 1)) -1) (cbrt (+ (* x x) -1))) (neg (cbrt x))) (pow (cbrt (- x 1)) -1) (cbrt (- x 1)) (- x 1) (cbrt (+ (* x x) -1)))","x","0"]],"time":31.35107421875,"type":"series"},{"count":[[91,90]],"egraph":[[0,8169,1853,0.083527198],[2,4163,1941,0.026019463],[1,1367,1963,0.014313552],[0,501,2151,0.004357549]],"inputs":[["(- 1 (cbrt x))","(- (+ 1 (* 1/3 x)) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* -1/9 x)))) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))) (cbrt x))","(* 1/3 (cbrt (/ 1 (pow x 2))))","(cbrt (/ 1 (pow x 2)))","(/ 1 (pow x 2))","1","(+ 1 (* 1/3 x))","(+ 1 (* x (+ 1/3 (* -1/9 x))))","(+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9)))))","(cbrt x)","(+ 1 x)","(sqrt x)","x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(cbrt -1)","(+ (cbrt -1) (* -1/3 (* x (cbrt (/ 1 (pow (cbrt -1) 2))))))","(+ (cbrt -1) (* x (+ (* -1/3 (cbrt (/ 1 (pow (cbrt -1) 2)))) (* -1/3 (/ (* x (+ 1 (* 1/3 (cbrt (/ 1 (cbrt -1)))))) (pow (cbrt -1) 2))))))","(+ (cbrt -1) (* x (+ (* -1/3 (cbrt (/ 1 (pow (cbrt -1) 2)))) (* x (+ (* -1/3 (/ (+ 1 (* 1/3 (cbrt (/ 1 (cbrt -1))))) (pow (cbrt -1) 2))) (* 1/3 (/ (* x (- (* 1/27 (/ 1 (pow (cbrt -1) 2))) (+ 1 (* 2/3 (* (cbrt (/ 1 (pow (cbrt -1) 5))) (+ 1 (* 1/3 (cbrt (/ 1 (cbrt -1)))))))))) (pow (cbrt -1) 2))))))))","(+ (cbrt -1) (* 1/3 (* x (cbrt (/ 1 (pow (cbrt -1) 2))))))","(+ (cbrt -1) (* x (+ (* -1/9 (* x (cbrt (/ 1 (pow (cbrt -1) 7))))) (* 1/3 (cbrt (/ 1 (pow (cbrt -1) 2)))))))","(+ (cbrt -1) (* x (+ (* 1/3 (cbrt (/ 1 (pow (cbrt -1) 2)))) (* x (+ (* -1/9 (cbrt (/ 1 (pow (cbrt -1) 7)))) (* 5/81 (/ x (pow (cbrt -1) 4))))))))","-1","(- x 1)","(+ (cbrt -1) (* 1/3 (/ (pow x 2) (pow (cbrt -1) 2))))","(+ (cbrt -1) (* (pow x 2) (+ (* -1/9 (/ (pow x 2) (pow (cbrt -1) 5))) (* 1/3 (/ 1 (pow (cbrt -1) 2))))))","(+ (cbrt -1) (* (pow x 2) (+ (* (pow x 2) (- (* 5/81 (/ (pow x 2) (pow (cbrt -1) 8))) (* 1/9 (/ 1 (pow (cbrt -1) 5))))) (* 1/3 (/ 1 (pow (cbrt -1) 2))))))","(/ (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4))))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* -10/243 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(* x (+ (cbrt (/ 1 (pow x 2))) (* 1/3 (cbrt (/ 1 (pow x 5))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 5)))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 5/81 (cbrt (/ 1 (pow x 11)))) (* 1/3 (cbrt (/ 1 (pow x 5))))))))","(* x (+ 1 (/ 1 x)))","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(cbrt (+ (/ 1 x) (/ 1 (pow x 2))))","(+ (cbrt (+ (/ 1 x) (/ 1 (pow x 2)))) (* 1/3 (* (/ 1 (pow x 3)) (cbrt (/ 1 (pow (+ (/ 1 x) (/ 1 (pow x 2))) 2))))))","(+ (cbrt (+ (/ 1 x) (/ 1 (pow x 2)))) (+ (* 1/3 (* (/ 1 (pow x 3)) (cbrt (/ 1 (pow (+ (/ 1 x) (/ 1 (pow x 2))) 2))))) (* 1/3 (* (/ 1 (pow x 4)) (cbrt (/ 1 (pow (+ (/ 1 x) (/ 1 (pow x 2))) 2)))))))","(+ (cbrt (+ (/ 1 x) (/ 1 (pow x 2)))) (+ (* 1/3 (* (/ 1 (pow x 3)) (cbrt (/ 1 (pow (+ (/ 1 x) (/ 1 (pow x 2))) 2))))) (+ (* 1/3 (* (/ 1 (pow x 4)) (cbrt (/ 1 (pow (+ (/ 1 x) (/ 1 (pow x 2))) 2))))) (* 1/3 (* (/ 1 (pow x 5)) (cbrt (/ 1 (pow (+ (/ 1 x) (/ 1 (pow x 2))) 2))))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (* -1/3 (cbrt (/ 1 (pow x 5))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/3 (cbrt (/ 1 (pow x 5)))) (* -1/9 (cbrt (/ 1 (pow x 8)))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/3 (cbrt (/ 1 (pow x 5)))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (* -5/81 (cbrt (/ 1 (pow x 11))))))))","(* x (- 1 (/ 1 x)))","(cbrt (pow x 2))","(* x (+ (cbrt (/ 1 x)) (* -1/3 (cbrt (/ 1 (pow x 7))))))","(* x (+ (cbrt (/ 1 x)) (+ (* -1/3 (cbrt (/ 1 (pow x 7)))) (* -1/9 (cbrt (/ 1 (pow x 13)))))))","(* x (+ (cbrt (/ 1 x)) (+ (* -1/3 (cbrt (/ 1 (pow x 7)))) (+ (* -1/9 (cbrt (/ 1 (pow x 13)))) (* -5/81 (cbrt (/ 1 (pow x 19))))))))","(* 1/3 (* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2))))","(/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 10/243 (* (cbrt (pow x 13)) (/ 1 (pow (cbrt -1) 11)))) (* 5/81 (* (cbrt (pow x 16)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(* -1 (* (cbrt x) (cbrt -1)))","(* -1 (* x (+ (* -1/3 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (pow (sqrt -1) 2)))","(* -1 (* x (- (pow (sqrt -1) 2) (/ 1 x))))","(* -1 (* x (- (cbrt (/ (pow (sqrt -1) 2) (pow x 2))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (- (+ (cbrt (/ (pow (sqrt -1) 2) (pow x 2))) (* -1/3 (cbrt (/ 1 (* (pow x 5) (pow (sqrt -1) 4)))))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (- (+ (cbrt (/ (pow (sqrt -1) 2) (pow x 2))) (* -1 (/ (+ (* 1/9 (cbrt (/ x (pow (sqrt -1) 10)))) (* 1/3 (cbrt (/ (pow x 4) (pow (sqrt -1) 4))))) (pow x 3)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (- (+ (cbrt (/ (pow (sqrt -1) 2) (pow x 2))) (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (cbrt (/ (pow x 10) (pow (sqrt -1) 10)))) (* -5/81 (cbrt (/ (pow x 7) (pow (sqrt -1) 16))))) (pow x 3))) (* 1/3 (cbrt (/ (pow x 4) (pow (sqrt -1) 4))))) (pow x 3)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (cbrt (* x (pow (sqrt -1) 2))))","(* -1 (* x (+ (cbrt (/ (pow (sqrt -1) 2) (pow x 2))) (* -1/3 (cbrt (/ 1 (* (pow x 5) (pow (sqrt -1) 4))))))))","(* -1 (* x (+ (cbrt (/ (pow (sqrt -1) 2) (pow x 2))) (* -1 (/ (+ (* 1/9 (cbrt (/ x (pow (sqrt -1) 10)))) (* 1/3 (cbrt (/ (pow x 4) (pow (sqrt -1) 4))))) (pow x 3))))))","(* -1 (* x (+ (cbrt (/ (pow (sqrt -1) 2) (pow x 2))) (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (cbrt (/ (pow x 10) (pow (sqrt -1) 10)))) (* -5/81 (cbrt (/ (pow x 7) (pow (sqrt -1) 16))))) (pow x 3))) (* 1/3 (cbrt (/ (pow x 4) (pow (sqrt -1) 4))))) (pow x 3))))))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(* -1 (* x (- (* (cbrt (/ 1 (pow x 2))) (/ 1 (cbrt -1))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (- (+ (* 1/3 (* (cbrt (/ 1 (pow x 5))) (/ 1 (cbrt -1)))) (* (cbrt (/ 1 (pow x 2))) (/ 1 (cbrt -1)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (- (+ (* -1 (/ (+ (* -1/3 (* (cbrt (pow x 4)) (/ 1 (cbrt -1)))) (* 1/9 (* (cbrt x) (/ 1 (cbrt -1))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (/ 1 (cbrt -1)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (- (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (cbrt -1)))) (* 5/81 (* (cbrt (pow x 7)) (/ 1 (cbrt -1))))) (pow x 3))) (* -1/3 (* (cbrt (pow x 4)) (/ 1 (cbrt -1))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (/ 1 (cbrt -1)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(+ (cbrt (+ (/ 1 x) (/ 1 (pow x 2)))) (* -1/3 (* (/ 1 (* (pow x 3) (cbrt -1))) (cbrt (/ 1 (pow (+ (/ 1 x) (/ 1 (pow x 2))) 2))))))","(+ (cbrt (+ (/ 1 x) (/ 1 (pow x 2)))) (* -1 (/ (+ (* 1/3 (* (/ 1 (cbrt -1)) (cbrt (/ 1 (pow (+ (/ 1 x) (/ 1 (pow x 2))) 2))))) (* 1/3 (* (/ 1 (* x (cbrt -1))) (cbrt (/ 1 (pow (+ (/ 1 x) (/ 1 (pow x 2))) 2)))))) (pow x 3))))","(+ (cbrt (+ (/ 1 x) (/ 1 (pow x 2)))) (* -1 (/ (+ (* -1 (/ (+ (* -1/3 (* (/ 1 (cbrt -1)) (cbrt (/ 1 (pow (+ (/ 1 x) (/ 1 (pow x 2))) 2))))) (* -1/3 (* (/ 1 (* x (cbrt -1))) (cbrt (/ 1 (pow (+ (/ 1 x) (/ 1 (pow x 2))) 2)))))) x)) (* 1/3 (* (/ 1 (cbrt -1)) (cbrt (/ 1 (pow (+ (/ 1 x) (/ 1 (pow x 2))) 2)))))) (pow x 3))))","(* -1 (* x (+ (* -1/3 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* 1/9 (* (cbrt x) (cbrt -1))) (* 1/3 (* (cbrt (pow x 4)) (cbrt -1)))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (cbrt -1))) (* -5/81 (* (cbrt (pow x 7)) (cbrt -1)))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (cbrt -1)))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (- (/ 1 x) 1)))","(* -1 (* (cbrt (pow x 2)) (cbrt -1)))","(* -1 (* x (+ (* 1/3 (cbrt (/ 1 (pow x 7)))) (* (cbrt (/ 1 x)) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* -1/3 (cbrt (pow x 2))) (* 1/9 (* (cbrt (/ 1 (pow x 4))) (cbrt -1)))) (pow x 3))) (* (cbrt (/ 1 x)) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 5)) (cbrt -1))) (* 5/81 (cbrt (/ 1 x)))) (pow x 3))) (* -1/3 (cbrt (pow x 2)))) (pow x 3))) (* (cbrt (/ 1 x)) (cbrt -1)))))"]],"memory":[[6075968,45756384]],"method":["egg-herbie"],"outputs":[["(- 1 (cbrt x))","(-.f64 #s(literal 1 binary64) (cbrt.f64 x))","(- (+ 1 (* 1/3 x)) (cbrt x))","(fma.f64 #s(literal 1/3 binary64) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x)))","(- (+ 1 (* x (+ 1/3 (* -1/9 x)))) (cbrt x))","(fma.f64 (fma.f64 #s(literal -1/9 binary64) x #s(literal 1/3 binary64)) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x)))","(- (+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))) (cbrt x))","(fma.f64 (fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64)) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x)))","(* 1/3 (cbrt (/ 1 (pow x 2))))","(*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))","(cbrt (/ 1 (pow x 2)))","(cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))","(/ 1 (pow x 2))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","1","#s(literal 1 binary64)","(+ 1 (* 1/3 x))","(fma.f64 #s(literal 1/3 binary64) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/3 (* -1/9 x))))","(fma.f64 (fma.f64 #s(literal -1/9 binary64) x #s(literal 1/3 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64)) x #s(literal 1 binary64))","(cbrt x)","(cbrt.f64 x)","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(sqrt x)","(sqrt.f64 x)","x","(* x (+ 1 (* -1/2 x)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(cbrt -1)","(cbrt.f64 #s(literal -1 binary64))","(+ (cbrt -1) (* -1/3 (* x (cbrt (/ 1 (pow (cbrt -1) 2))))))","(fma.f64 (*.f64 #s(literal -1/3 binary64) x) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (cbrt.f64 #s(literal -1 binary64)))","(+ (cbrt -1) (* x (+ (* -1/3 (cbrt (/ 1 (pow (cbrt -1) 2)))) (* -1/3 (/ (* x (+ 1 (* 1/3 (cbrt (/ 1 (cbrt -1)))))) (pow (cbrt -1) 2))))))","(fma.f64 (*.f64 #s(literal -1/3 binary64) x) (fma.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (cbrt.f64 #s(literal -1 binary64)))) #s(literal 1/3 binary64) #s(literal 1 binary64)) (/.f64 x (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (cbrt.f64 #s(literal -1 binary64)))","(+ (cbrt -1) (* x (+ (* -1/3 (cbrt (/ 1 (pow (cbrt -1) 2)))) (* x (+ (* -1/3 (/ (+ 1 (* 1/3 (cbrt (/ 1 (cbrt -1))))) (pow (cbrt -1) 2))) (* 1/3 (/ (* x (- (* 1/27 (/ 1 (pow (cbrt -1) 2))) (+ 1 (* 2/3 (* (cbrt (/ 1 (pow (cbrt -1) 5))) (+ 1 (* 1/3 (cbrt (/ 1 (cbrt -1)))))))))) (pow (cbrt -1) 2))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (-.f64 (/.f64 #s(literal 1/27 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (fma.f64 (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) #s(literal 2/3 binary64)) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (cbrt.f64 #s(literal -1 binary64)))) #s(literal 1/3 binary64) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 x (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal 1/3 binary64) (*.f64 (/.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (cbrt.f64 #s(literal -1 binary64)))) #s(literal 1/3 binary64) #s(literal 1 binary64)) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal -1/3 binary64))) x (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -1/3 binary64))) x (cbrt.f64 #s(literal -1 binary64)))","(+ (cbrt -1) (* 1/3 (* x (cbrt (/ 1 (pow (cbrt -1) 2))))))","(fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 #s(literal -1 binary64)))","(+ (cbrt -1) (* x (+ (* -1/9 (* x (cbrt (/ 1 (pow (cbrt -1) 7))))) (* 1/3 (cbrt (/ 1 (pow (cbrt -1) 2)))))))","(fma.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 7 binary64)))) (*.f64 #s(literal -1/9 binary64) x) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal 1/3 binary64))) x (cbrt.f64 #s(literal -1 binary64)))","(+ (cbrt -1) (* x (+ (* 1/3 (cbrt (/ 1 (pow (cbrt -1) 2)))) (* x (+ (* -1/9 (cbrt (/ 1 (pow (cbrt -1) 7)))) (* 5/81 (/ x (pow (cbrt -1) 4))))))))","(fma.f64 (fma.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 7 binary64)))) #s(literal -1/9 binary64) (*.f64 (/.f64 x (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) #s(literal 5/81 binary64))) x (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal 1/3 binary64))) x (cbrt.f64 #s(literal -1 binary64)))","-1","#s(literal -1 binary64)","(- x 1)","(-.f64 x #s(literal 1 binary64))","(+ (cbrt -1) (* 1/3 (/ (pow x 2) (pow (cbrt -1) 2))))","(fma.f64 (*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) x) x (cbrt.f64 #s(literal -1 binary64)))","(+ (cbrt -1) (* (pow x 2) (+ (* -1/9 (/ (pow x 2) (pow (cbrt -1) 5))) (* 1/3 (/ 1 (pow (cbrt -1) 2))))))","(fma.f64 (fma.f64 (*.f64 x (/.f64 x (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) #s(literal -1/9 binary64) (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (*.f64 x x) (cbrt.f64 #s(literal -1 binary64)))","(+ (cbrt -1) (* (pow x 2) (+ (* (pow x 2) (- (* 5/81 (/ (pow x 2) (pow (cbrt -1) 8))) (* 1/9 (/ 1 (pow (cbrt -1) 5))))) (* 1/3 (/ 1 (pow (cbrt -1) 2))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 x (/.f64 x (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64)))) #s(literal 5/81 binary64) (/.f64 #s(literal -1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) (*.f64 x x) (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (*.f64 x x) (cbrt.f64 #s(literal -1 binary64)))","(/ (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))) (pow x 2))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x))","(/ (+ (* -1/9 (cbrt x)) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4))))) (pow x 2))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x))","(/ (+ (* -1/9 (cbrt x)) (+ (* -10/243 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(/.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -10/243 binary64) (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) (*.f64 x x))","(* x (+ (cbrt (/ 1 (pow x 2))) (* 1/3 (cbrt (/ 1 (pow x 5))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/3 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) x)","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 5)))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal -1/9 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/3 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))))) x)","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 5/81 (cbrt (/ 1 (pow x 11)))) (* 1/3 (cbrt (/ 1 (pow x 5))))))))","(*.f64 (+.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 11 binary64)))) #s(literal 5/81 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/3 binary64)))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) x)","(* x (+ 1 (/ 1 x)))","(+.f64 #s(literal 1 binary64) x)","(* -1 (log (/ 1 x)))","(log.f64 x)","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(+.f64 (log.f64 x) (/.f64 #s(literal 1 binary64) x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(-.f64 (+.f64 (log.f64 x) (/.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1/2 binary64) (*.f64 x x)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(+.f64 (+.f64 (log.f64 x) (/.f64 #s(literal 1 binary64) x)) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) x))","(cbrt (+ (/ 1 x) (/ 1 (pow x 2))))","(cbrt.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (*.f64 x x))))","(+ (cbrt (+ (/ 1 x) (/ 1 (pow x 2)))) (* 1/3 (* (/ 1 (pow x 3)) (cbrt (/ 1 (pow (+ (/ 1 x) (/ 1 (pow x 2))) 2))))))","(fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 2 binary64)))) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 3 binary64))) (cbrt.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (*.f64 x x)))))","(+ (cbrt (+ (/ 1 x) (/ 1 (pow x 2)))) (+ (* 1/3 (* (/ 1 (pow x 3)) (cbrt (/ 1 (pow (+ (/ 1 x) (/ 1 (pow x 2))) 2))))) (* 1/3 (* (/ 1 (pow x 4)) (cbrt (/ 1 (pow (+ (/ 1 x) (/ 1 (pow x 2))) 2)))))))","(fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 2 binary64)))) (+.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 4 binary64))) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 3 binary64)))) (cbrt.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (*.f64 x x)))))","(+ (cbrt (+ (/ 1 x) (/ 1 (pow x 2)))) (+ (* 1/3 (* (/ 1 (pow x 3)) (cbrt (/ 1 (pow (+ (/ 1 x) (/ 1 (pow x 2))) 2))))) (+ (* 1/3 (* (/ 1 (pow x 4)) (cbrt (/ 1 (pow (+ (/ 1 x) (/ 1 (pow x 2))) 2))))) (* 1/3 (* (/ 1 (pow x 5)) (cbrt (/ 1 (pow (+ (/ 1 x) (/ 1 (pow x 2))) 2))))))))","(fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 2 binary64)))) (+.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 4 binary64)))) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 3 binary64)))) (cbrt.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (*.f64 x x)))))","(* x (+ (cbrt (/ 1 (pow x 2))) (* -1/3 (cbrt (/ 1 (pow x 5))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/3 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) x)","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/3 (cbrt (/ 1 (pow x 5)))) (* -1/9 (cbrt (/ 1 (pow x 8)))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal -1/9 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/3 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))))) x)","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/3 (cbrt (/ 1 (pow x 5)))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (* -5/81 (cbrt (/ 1 (pow x 11))))))))","(*.f64 (+.f64 (fma.f64 #s(literal -5/81 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 11 binary64)))) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/3 binary64)))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) x)","(* x (- 1 (/ 1 x)))","(-.f64 x #s(literal 1 binary64))","(cbrt (pow x 2))","(cbrt.f64 (*.f64 x x))","(* x (+ (cbrt (/ 1 x)) (* -1/3 (cbrt (/ 1 (pow x 7))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) #s(literal -1/3 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(* x (+ (cbrt (/ 1 x)) (+ (* -1/3 (cbrt (/ 1 (pow x 7)))) (* -1/9 (cbrt (/ 1 (pow x 13)))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 13 binary64)))) #s(literal -1/9 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) #s(literal -1/3 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) x)))) x)","(* x (+ (cbrt (/ 1 x)) (+ (* -1/3 (cbrt (/ 1 (pow x 7)))) (+ (* -1/9 (cbrt (/ 1 (pow x 13)))) (* -5/81 (cbrt (/ 1 (pow x 19))))))))","(*.f64 (+.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 19 binary64)))) #s(literal -5/81 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 13 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) #s(literal -1/3 binary64)))) (cbrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(* 1/3 (* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2))))","(*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))))","(/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (*.f64 (/.f64 #s(literal 1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 x))) (*.f64 x x))","(/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 1/3 binary64) (/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) #s(literal -5/81 binary64) (*.f64 (/.f64 #s(literal -1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 (pow.f64 x #s(literal 10 binary64))))) (neg.f64 (pow.f64 x #s(literal 3 binary64))))) (*.f64 x x))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 10/243 (* (cbrt (pow x 13)) (/ 1 (pow (cbrt -1) 11)))) (* 5/81 (* (cbrt (pow x 16)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 1/3 binary64) (/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 10 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) #s(literal -1/9 binary64) (/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 16 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) #s(literal 5/81 binary64) (*.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 13 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 11 binary64))) #s(literal 10/243 binary64))) (neg.f64 (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (pow.f64 x #s(literal 3 binary64))))) (*.f64 x x))","(* -1 (* (cbrt x) (cbrt -1)))","(*.f64 (neg.f64 (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 x))","(* -1 (* x (+ (* -1/3 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(*.f64 (neg.f64 x) (fma.f64 (/.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal -1/3 binary64) (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))))))","(* -1 (* x (+ (* -1 (/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(*.f64 (neg.f64 x) (fma.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (*.f64 (/.f64 #s(literal 1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 x))) (neg.f64 (pow.f64 x #s(literal 3 binary64))))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(*.f64 (neg.f64 x) (fma.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 1/3 binary64) (/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) #s(literal -5/81 binary64) (*.f64 (/.f64 #s(literal -1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 (pow.f64 x #s(literal 10 binary64))))) (neg.f64 (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (pow.f64 x #s(literal 3 binary64))))))","(* -1 (* x (pow (sqrt -1) 2)))","x","(* -1 (* x (- (pow (sqrt -1) 2) (/ 1 x))))","(+.f64 #s(literal 1 binary64) x)","(* -1 (* x (- (cbrt (/ (pow (sqrt -1) 2) (pow x 2))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(*.f64 (neg.f64 x) (fma.f64 (neg.f64 (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (cbrt.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) x))))","(* -1 (* x (- (+ (cbrt (/ (pow (sqrt -1) 2) (pow x 2))) (* -1/3 (cbrt (/ 1 (* (pow x 5) (pow (sqrt -1) 4)))))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(*.f64 (neg.f64 x) (fma.f64 (neg.f64 (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/3 binary64) (cbrt.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) x)))))","(* -1 (* x (- (+ (cbrt (/ (pow (sqrt -1) 2) (pow x 2))) (* -1 (/ (+ (* 1/9 (cbrt (/ x (pow (sqrt -1) 10)))) (* 1/3 (cbrt (/ (pow x 4) (pow (sqrt -1) 4))))) (pow x 3)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(*.f64 (neg.f64 x) (fma.f64 (neg.f64 (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) x)) (/.f64 (fma.f64 (cbrt.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64)))) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 (/.f64 x (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 10 binary64)))) #s(literal 1/9 binary64))) (pow.f64 x #s(literal 3 binary64))))))","(* -1 (* x (- (+ (cbrt (/ (pow (sqrt -1) 2) (pow x 2))) (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (cbrt (/ (pow x 10) (pow (sqrt -1) 10)))) (* -5/81 (cbrt (/ (pow x 7) (pow (sqrt -1) 16))))) (pow x 3))) (* 1/3 (cbrt (/ (pow x 4) (pow (sqrt -1) 4))))) (pow x 3)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(*.f64 (neg.f64 x) (fma.f64 (neg.f64 (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) x)) (/.f64 (-.f64 (*.f64 (cbrt.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64)))) #s(literal 1/3 binary64)) (/.f64 (fma.f64 (cbrt.f64 (/.f64 (pow.f64 x #s(literal 7 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 16 binary64)))) #s(literal -5/81 binary64) (*.f64 (cbrt.f64 (/.f64 (pow.f64 x #s(literal 10 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 10 binary64)))) #s(literal -1/9 binary64))) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 x #s(literal 3 binary64))))))","(* -1 (cbrt (* x (pow (sqrt -1) 2))))","(neg.f64 (cbrt.f64 (neg.f64 x)))","(* -1 (* x (+ (cbrt (/ (pow (sqrt -1) 2) (pow x 2))) (* -1/3 (cbrt (/ 1 (* (pow x 5) (pow (sqrt -1) 4))))))))","(*.f64 (neg.f64 x) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/3 binary64) (cbrt.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) x))))","(* -1 (* x (+ (cbrt (/ (pow (sqrt -1) 2) (pow x 2))) (* -1 (/ (+ (* 1/9 (cbrt (/ x (pow (sqrt -1) 10)))) (* 1/3 (cbrt (/ (pow x 4) (pow (sqrt -1) 4))))) (pow x 3))))))","(*.f64 (neg.f64 x) (-.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) x)) (/.f64 (fma.f64 (cbrt.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64)))) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 (/.f64 x (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 10 binary64)))) #s(literal 1/9 binary64))) (pow.f64 x #s(literal 3 binary64)))))","(* -1 (* x (+ (cbrt (/ (pow (sqrt -1) 2) (pow x 2))) (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (cbrt (/ (pow x 10) (pow (sqrt -1) 10)))) (* -5/81 (cbrt (/ (pow x 7) (pow (sqrt -1) 16))))) (pow x 3))) (* 1/3 (cbrt (/ (pow x 4) (pow (sqrt -1) 4))))) (pow x 3))))))","(*.f64 (neg.f64 x) (-.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) x)) (/.f64 (-.f64 (*.f64 (cbrt.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64)))) #s(literal 1/3 binary64)) (/.f64 (fma.f64 (cbrt.f64 (/.f64 (pow.f64 x #s(literal 7 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 16 binary64)))) #s(literal -5/81 binary64) (*.f64 (cbrt.f64 (/.f64 (pow.f64 x #s(literal 10 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 10 binary64)))) #s(literal -1/9 binary64))) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 x #s(literal 3 binary64)))))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(sqrt.f64 x)","(+ (log -1) (* -1 (log (/ -1 x))))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) (log.f64 (/.f64 #s(literal -1 binary64) x))) (log.f64 #s(literal -1 binary64)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x))","(* -1 (* x (- (* (cbrt (/ 1 (pow x 2))) (/ 1 (cbrt -1))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(*.f64 (*.f64 (neg.f64 x) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) (-.f64 (/.f64 #s(literal 1 binary64) (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 #s(literal -1 binary64))))","(* -1 (* x (- (+ (* 1/3 (* (cbrt (/ 1 (pow x 5))) (/ 1 (cbrt -1)))) (* (cbrt (/ 1 (pow x 2))) (/ 1 (cbrt -1)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(*.f64 (neg.f64 x) (fma.f64 (/.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (cbrt.f64 #s(literal -1 binary64))) #s(literal 1/3 binary64) (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))))))","(* -1 (* x (- (+ (* -1 (/ (+ (* -1/3 (* (cbrt (pow x 4)) (/ 1 (cbrt -1)))) (* 1/9 (* (cbrt x) (/ 1 (cbrt -1))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (/ 1 (cbrt -1)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(*.f64 (neg.f64 x) (fma.f64 (-.f64 (/.f64 #s(literal 1 binary64) (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (cbrt.f64 #s(literal -1 binary64))) (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal -1/3 binary64) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x)))) (neg.f64 (pow.f64 x #s(literal 3 binary64))))))","(* -1 (* x (- (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (cbrt -1)))) (* 5/81 (* (cbrt (pow x 7)) (/ 1 (cbrt -1))))) (pow x 3))) (* -1/3 (* (cbrt (pow x 4)) (/ 1 (cbrt -1))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (/ 1 (cbrt -1)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(*.f64 (neg.f64 x) (fma.f64 (-.f64 (/.f64 #s(literal 1 binary64) (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (cbrt.f64 #s(literal -1 binary64))) #s(literal -1/3 binary64) (/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (cbrt.f64 #s(literal -1 binary64))) (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 (pow.f64 x #s(literal 10 binary64))) #s(literal -1/9 binary64)))) (neg.f64 (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (pow.f64 x #s(literal 3 binary64))))))","(+ (cbrt (+ (/ 1 x) (/ 1 (pow x 2)))) (* -1/3 (* (/ 1 (* (pow x 3) (cbrt -1))) (cbrt (/ 1 (pow (+ (/ 1 x) (/ 1 (pow x 2))) 2))))))","(fma.f64 (/.f64 #s(literal -1/3 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) (cbrt.f64 #s(literal -1 binary64)))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 2 binary64)))) (cbrt.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (*.f64 x x)))))","(+ (cbrt (+ (/ 1 x) (/ 1 (pow x 2)))) (* -1 (/ (+ (* 1/3 (* (/ 1 (cbrt -1)) (cbrt (/ 1 (pow (+ (/ 1 x) (/ 1 (pow x 2))) 2))))) (* 1/3 (* (/ 1 (* x (cbrt -1))) (cbrt (/ 1 (pow (+ (/ 1 x) (/ 1 (pow x 2))) 2)))))) (pow x 3))))","(fma.f64 #s(literal -1/3 binary64) (/.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 2 binary64)))) (cbrt.f64 #s(literal -1 binary64))) (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) (pow.f64 x #s(literal 3 binary64))) (cbrt.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (*.f64 x x)))))","(+ (cbrt (+ (/ 1 x) (/ 1 (pow x 2)))) (* -1 (/ (+ (* -1 (/ (+ (* -1/3 (* (/ 1 (cbrt -1)) (cbrt (/ 1 (pow (+ (/ 1 x) (/ 1 (pow x 2))) 2))))) (* -1/3 (* (/ 1 (* x (cbrt -1))) (cbrt (/ 1 (pow (+ (/ 1 x) (/ 1 (pow x 2))) 2)))))) x)) (* 1/3 (* (/ 1 (cbrt -1)) (cbrt (/ 1 (pow (+ (/ 1 x) (/ 1 (pow x 2))) 2)))))) (pow x 3))))","(-.f64 (cbrt.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (*.f64 x x)))) (/.f64 (fma.f64 (/.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 2 binary64)))) (cbrt.f64 #s(literal -1 binary64))) #s(literal 1/3 binary64) (*.f64 (/.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 2 binary64)))) (cbrt.f64 #s(literal -1 binary64))) (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) x) #s(literal 1/3 binary64))) (pow.f64 x #s(literal 3 binary64))))","(* -1 (* x (+ (* -1/3 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(*.f64 (*.f64 (neg.f64 (cbrt.f64 #s(literal -1 binary64))) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/3 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))))) x)","(* -1 (* x (+ (* -1 (/ (+ (* 1/9 (* (cbrt x) (cbrt -1))) (* 1/3 (* (cbrt (pow x 4)) (cbrt -1)))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(*.f64 (neg.f64 x) (fma.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x)))) (neg.f64 (pow.f64 x #s(literal 3 binary64))))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (cbrt -1))) (* -5/81 (* (cbrt (pow x 7)) (cbrt -1)))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (cbrt -1)))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(*.f64 (neg.f64 x) (fma.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 (fma.f64 (*.f64 #s(literal 1/3 binary64) (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (/.f64 (*.f64 (neg.f64 (cbrt.f64 #s(literal -1 binary64))) (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) #s(literal -5/81 binary64) (*.f64 (cbrt.f64 (pow.f64 x #s(literal 10 binary64))) #s(literal -1/9 binary64)))) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (pow.f64 x #s(literal 3 binary64))))))","(* -1 (* x (- (/ 1 x) 1)))","(-.f64 x #s(literal 1 binary64))","(* -1 (* (cbrt (pow x 2)) (cbrt -1)))","(*.f64 (neg.f64 (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (*.f64 x x)))","(* -1 (* x (+ (* 1/3 (cbrt (/ 1 (pow x 7)))) (* (cbrt (/ 1 x)) (cbrt -1)))))","(*.f64 (neg.f64 x) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) x)) (cbrt.f64 #s(literal -1 binary64)))))","(* -1 (* x (+ (* -1 (/ (+ (* -1/3 (cbrt (pow x 2))) (* 1/9 (* (cbrt (/ 1 (pow x 4))) (cbrt -1)))) (pow x 3))) (* (cbrt (/ 1 x)) (cbrt -1)))))","(*.f64 (neg.f64 x) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) x)) (cbrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/9 binary64) (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (cbrt.f64 (*.f64 x x)) #s(literal -1/3 binary64))) (neg.f64 (pow.f64 x #s(literal 3 binary64))))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 5)) (cbrt -1))) (* 5/81 (cbrt (/ 1 x)))) (pow x 3))) (* -1/3 (cbrt (pow x 2)))) (pow x 3))) (* (cbrt (/ 1 x)) (cbrt -1)))))","(*.f64 (neg.f64 x) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) x)) (cbrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (cbrt.f64 (*.f64 x x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (pow.f64 x #s(literal 5 binary64))) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 5/81 binary64))) (neg.f64 (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (pow.f64 x #s(literal 3 binary64))))))"]],"stop":[["iter limit",1],["node limit",1]],"time":256.61181640625,"type":"simplify"},{"count":[[20,1448]],"egraph":[[0,9157,97,0.064105159],[2,1267,101,0.033087544],[1,206,101,0.004697072],[0,56,109,0.001778679],[0,31,126,0.000316261]],"inputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64))","(cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))","(/.f64 (/.f64 #s(literal 1 binary64) x) x)","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","#s(approx (cbrt (+ x 1)) #s(literal 1 binary64))","(cbrt.f64 x)","(fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))","(-.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))) (cbrt.f64 x))","(cbrt.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64)))","(sqrt.f64 x)","(-.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (cbrt.f64 x))","(cbrt.f64 (exp.f64 (log1p.f64 x)))","(exp.f64 (log1p.f64 x))","(log1p.f64 x)","(fma.f64 (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (cbrt.f64 x)))","(pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))","(cbrt.f64 (-.f64 x #s(literal 1 binary64)))","(-.f64 x #s(literal 1 binary64))","(cbrt.f64 (fma.f64 x x #s(literal -1 binary64)))"]],"memory":[[-2797648,65772816]],"outputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 1/6 binary64))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal 1/6 binary64))))","(*.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal 1/6 binary64))) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 1/6 binary64))))","(*.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 1/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64))","(/.f64 (neg.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 1/3 binary64))) (cbrt.f64 x))","(/.f64 (neg.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) (cbrt.f64 x))","(/.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 1/3 binary64)) (cbrt.f64 x))","(/.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (cbrt.f64 x))","(/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (cbrt.f64 x) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 1/3 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (cbrt.f64 x) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 1/6 binary64))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal 1/6 binary64))))","(*.f64 (cbrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (cbrt.f64 (pow.f64 x #s(literal -3/2 binary64))))","(*.f64 (pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1/3 binary64)) (pow.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(*.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(pow.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal 1/6 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 x x) #s(literal -1/3 binary64))","(pow.f64 (cbrt.f64 x) #s(literal -2 binary64))","(pow.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/3 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 2/3 binary64))","(pow.f64 x #s(literal -2/3 binary64))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))) (cbrt.f64 x))","(/.f64 (cbrt.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))) (cbrt.f64 x))","(/.f64 (cbrt.f64 (pow.f64 x #s(literal -3/2 binary64))) (pow.f64 x #s(literal 1/6 binary64)))","(/.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) (cbrt.f64 x))","(/.f64 (cbrt.f64 #s(literal -1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (cbrt.f64 x))","(/.f64 #s(literal -1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(cbrt.f64 (pow.f64 x #s(literal -2 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal -2 binary64) (log.f64 x)) #s(literal 1/3 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 x))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 x))) (pow.f64 x #s(literal -3/2 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (cbrt.f64 x)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (cbrt.f64 x)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (pow.f64 x #s(literal -3/2 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -3/2 binary64)))","(*.f64 (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 x))))","(*.f64 (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (/.f64 (pow.f64 x #s(literal -1 binary64)) (cbrt.f64 x)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 x))))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)))","(pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/2 binary64))","(pow.f64 (*.f64 x x) #s(literal -1 binary64))","(pow.f64 (sqrt.f64 x) #s(literal -4 binary64))","(pow.f64 (cbrt.f64 x) #s(literal -6 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 2 binary64))","(pow.f64 x #s(literal -2 binary64))","(/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))) x)","(/.f64 (neg.f64 (pow.f64 x #s(literal -3/2 binary64))) (neg.f64 (sqrt.f64 x)))","(/.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) x)","(/.f64 (pow.f64 x #s(literal -3/2 binary64)) (sqrt.f64 x))","(/.f64 #s(literal -1 binary64) (*.f64 x x))","(/.f64 (pow.f64 x #s(literal -1 binary64)) x)","(/.f64 #s(literal 1 binary64) (/.f64 x (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 x) (pow.f64 x #s(literal -3/2 binary64))))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(neg.f64 (pow.f64 x #s(literal -2 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) x) (pow.f64 x #s(literal -2 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -2 binary64)))","(exp.f64 (-.f64 (*.f64 (log.f64 x) #s(literal -1 binary64)) (log.f64 x)))","(exp.f64 (fma.f64 (log.f64 x) #s(literal -1 binary64) (*.f64 (log.f64 x) #s(literal -1 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal -2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 #s(literal -2 binary64) (log.f64 x)))","(*.f64 (/.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x)) (/.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 (fma.f64 (cbrt.f64 x) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(literal -1 binary64)) (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 (neg.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)))))","(*.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x)) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (cbrt.f64 x) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))))))","(*.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x) (/.f64 #s(literal 1 binary64) (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (*.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))))))","(*.f64 (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x) (pow.f64 (fma.f64 (cbrt.f64 x) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)))","(pow.f64 (pow.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))) (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)))) (*.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))))) (+.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 (cbrt.f64 x) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 (cbrt.f64 x) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))))) (*.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 x (fma.f64 (cbrt.f64 x) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))))) (+.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 (cbrt.f64 x) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 x (fma.f64 (cbrt.f64 x) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))) (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))) (fma.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))) (*.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 (cbrt.f64 x) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 (cbrt.f64 x) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 (cbrt.f64 x) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (fma.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 x (fma.f64 (cbrt.f64 x) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (*.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 (cbrt.f64 x) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 x (fma.f64 (cbrt.f64 x) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))))))))","(/.f64 (+.f64 x (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x))) (neg.f64 (neg.f64 (fma.f64 (cbrt.f64 x) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))) (*.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 (cbrt.f64 x) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (*.f64 (fma.f64 (cbrt.f64 x) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))) x)) (*.f64 (fma.f64 (cbrt.f64 x) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))) (fma.f64 (cbrt.f64 x) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x)) (neg.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (*.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x)) (neg.f64 (fma.f64 (cbrt.f64 x) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)))","(/.f64 (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x) (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (*.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))))))","(/.f64 (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x) (fma.f64 (cbrt.f64 x) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (*.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))))) (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(literal -1 binary64)))","(fma.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (cbrt.f64 (cbrt.f64 x)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 (cbrt.f64 (neg.f64 (sqrt.f64 x))) (pow.f64 x #s(literal 1/6 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/6 binary64)) (pow.f64 (sqrt.f64 x) #s(literal 1/6 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sqrt.f64 x) #s(literal 1/6 binary64)) (pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/6 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal 2/3 binary64)) (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal 2/3 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 1/3 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (cbrt.f64 x) #s(literal 1/3 binary64)) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1/3 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)) (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 x #s(literal 1/6 binary64)) (cbrt.f64 (neg.f64 (sqrt.f64 x))) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 x #s(literal 1/6 binary64)) (pow.f64 x #s(literal 1/6 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)))))","(fma.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (cbrt.f64 x) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))))))","(fma.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 #s(literal -1 binary64) (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 (cbrt.f64 x) (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 (cbrt.f64 x) #s(literal -1 binary64) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 (cbrt.f64 x) #s(literal 1 binary64) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 #s(literal 1 binary64) (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (*.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))))) (/.f64 x (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (*.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))))))","(-.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))))","(-.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 (cbrt.f64 x) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 x (fma.f64 (cbrt.f64 x) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))))","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","(+.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))) (neg.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)))))","(+.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 (cbrt.f64 x) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (neg.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))))))","(+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","#s(approx (cbrt (+ x 1)) #s(literal 1 binary64))","(/.f64 (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) #s(literal 0 binary64)) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 0 binary64)))","(/.f64 (+.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 0 binary64)) (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (-.f64 #s(literal 0 binary64) (*.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 0 binary64)))))","(+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 0 binary64))","(*.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (cbrt.f64 (cbrt.f64 x)))","(*.f64 (cbrt.f64 (neg.f64 (sqrt.f64 x))) (pow.f64 x #s(literal 1/6 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/6 binary64)) (pow.f64 (sqrt.f64 x) #s(literal 1/6 binary64)))","(*.f64 (pow.f64 (sqrt.f64 x) #s(literal 1/6 binary64)) (pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/6 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal 2/3 binary64)) (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal 2/3 binary64)))","(*.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal 1/3 binary64)) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)) (cbrt.f64 x))","(*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 x))","(*.f64 (pow.f64 x #s(literal 1/6 binary64)) (cbrt.f64 (neg.f64 (sqrt.f64 x))))","(*.f64 (pow.f64 x #s(literal 1/6 binary64)) (pow.f64 x #s(literal 1/6 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (cbrt.f64 x))","(*.f64 (cbrt.f64 x) (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 x) #s(literal -1 binary64))","(*.f64 (cbrt.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (cbrt.f64 x))","(*.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))))","(pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64))","(pow.f64 (*.f64 x x) #s(literal 1/6 binary64))","(pow.f64 (sqrt.f64 x) #s(literal 2/3 binary64))","(pow.f64 (cbrt.f64 x) #s(literal 1 binary64))","(pow.f64 x #s(literal 1/3 binary64))","(/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (cbrt.f64 x))","(/.f64 (cbrt.f64 x) (cbrt.f64 #s(literal -1 binary64)))","(/.f64 (cbrt.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64)) x))","(/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(/.f64 x (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 0 binary64))))","(/.f64 x (neg.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))))","(/.f64 x (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64)))","(neg.f64 (cbrt.f64 x))","(cbrt.f64 x)","(-.f64 (/.f64 #s(literal 0 binary64) (cbrt.f64 x)) (cbrt.f64 x))","(-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))) (cbrt.f64 x))","(-.f64 #s(literal 0 binary64) (cbrt.f64 x))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal 1/6 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 x)) #s(literal 2/3 binary64)))","(exp.f64 (log.f64 (cbrt.f64 x)))","(+.f64 #s(literal 0 binary64) (cbrt.f64 x))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (/.f64 (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (sqrt.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (/.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 (sqrt.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (*.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64)) #s(literal 3 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) #s(literal 3 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) #s(literal 3 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64)))) #s(literal 3 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64)) (pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 1 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(*.f64 (-.f64 (sqrt.f64 x) #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 (sqrt.f64 x) #s(literal 1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 x #s(literal 1 binary64)))))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 1 binary64)))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x))","(pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 1/3 binary64))","(pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64))","(pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 3/2 binary64))","(pow.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64))","(pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(/.f64 (-.f64 (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x))) (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(/.f64 (-.f64 (*.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64))))) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (fma.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x) #s(literal 3 binary64))) (fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (exp.f64 (neg.f64 (log1p.f64 x))) (fma.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))))","(/.f64 (-.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) (fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (neg.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (pow.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 3 binary64)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (pow.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 3 binary64)) (pow.f64 (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 3 binary64)))","(/.f64 (pow.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 3 binary64)) (pow.f64 (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal 3 binary64)))","(/.f64 (exp.f64 (log1p.f64 (*.f64 x x))) (-.f64 #s(literal 1 binary64) x))","(/.f64 (exp.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (exp.f64 (log1p.f64 (fma.f64 x x x))))","(/.f64 (exp.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (exp.f64 (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (exp.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64)))) (exp.f64 (log.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 #s(literal 1 binary64) x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 x #s(literal 1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (-.f64 x #s(literal 1 binary64))) (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (-.f64 x #s(literal 1 binary64))) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (-.f64 #s(literal 1 binary64) x)) (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (-.f64 #s(literal 1 binary64) x)) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 x #s(literal 1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (/.f64 (-.f64 (sqrt.f64 x) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (/.f64 (-.f64 (sqrt.f64 x) #s(literal 1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 (sqrt.f64 x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (/.f64 (-.f64 (sqrt.f64 x) #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (/.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (/.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (/.f64 (sqrt.f64 x) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1 binary64)) (/.f64 (sqrt.f64 x) (-.f64 x #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (sqrt.f64 x) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (sqrt.f64 x) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) (/.f64 (sqrt.f64 x) (-.f64 (sqrt.f64 x) #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (sqrt.f64 x) (exp.f64 (neg.f64 (log1p.f64 x)))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (sqrt.f64 x) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sqrt.f64 x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sqrt.f64 x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sqrt.f64 x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sqrt.f64 x) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (-.f64 (sqrt.f64 x) #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sqrt.f64 x) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sqrt.f64 x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 x (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (/.f64 x (-.f64 #s(literal 1 binary64) x)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 x (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 x (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 x (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 x (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 x (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) (/.f64 x (-.f64 (sqrt.f64 x) #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 x (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 x (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) x) x) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (fabs.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (fabs.f64 (cbrt.f64 x)) #s(literal 1 binary64))","(fma.f64 (fabs.f64 (cbrt.f64 x)) (fabs.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))","(fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 x #s(literal 1/4 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/2 binary64)) (pow.f64 x #s(literal 1/4 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 3 binary64)) (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (cbrt.f64 x) #s(literal 1 binary64))","(fma.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x) #s(literal 1 binary64))","(fma.f64 (pow.f64 x #s(literal 1/4 binary64)) (sqrt.f64 (pow.f64 x #s(literal 3/2 binary64))) #s(literal 1 binary64))","(fma.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (cbrt.f64 x) #s(literal 1 binary64))","(fma.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (*.f64 x x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))","(fma.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 x #s(literal 1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (sqrt.f64 x) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (-.f64 x #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))","(fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))","(fma.f64 (cbrt.f64 x) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))","(fma.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 #s(literal 1 binary64) x #s(literal 1 binary64))","(fma.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 x #s(literal -1 binary64) #s(literal 1 binary64))","(fma.f64 x #s(literal 1 binary64) #s(literal 1 binary64))","(cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64))))","(-.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(-.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x))","(-.f64 #s(literal 1 binary64) x)","(-.f64 x #s(literal -1 binary64))","(exp.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)))","(exp.f64 (log1p.f64 x))","(+.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(+.f64 #s(literal 1 binary64) x)","(+.f64 x #s(literal 1 binary64))","(*.f64 (/.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (-.f64 (-.f64 #s(literal 1 binary64) x) x)) (/.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (pow.f64 (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (/.f64 #s(literal 1 binary64) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))))","(*.f64 (pow.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) #s(literal -1 binary64)) (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x) (/.f64 #s(literal 1 binary64) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) x))))))","(*.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x) (pow.f64 (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))))","(*.f64 (neg.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x)) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))))","(*.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))","(pow.f64 (pow.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))) (*.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))))) (+.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))))","(/.f64 (-.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))) (*.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 x (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))))) (+.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 x (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))) (+.f64 #s(literal 0 binary64) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (fma.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (*.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) #s(literal 3 binary64)) (pow.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (fma.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 x (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 x (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (*.f64 #s(literal 0 binary64) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))","(/.f64 (neg.f64 (neg.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x))) (neg.f64 (neg.f64 (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))))","(/.f64 (-.f64 (*.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (*.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (*.f64 (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) x)) (*.f64 (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))))","(/.f64 (-.f64 (*.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (cbrt.f64 x)) (*.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (*.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (cbrt.f64 x)))","(/.f64 (-.f64 (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (cbrt.f64 x)) (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) x)))","(/.f64 (-.f64 (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))) (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) x)) (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))))","(/.f64 (-.f64 (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (cbrt.f64 x)) (*.f64 (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (*.f64 (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (cbrt.f64 x)))","(/.f64 (-.f64 (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))) (*.f64 (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) x)) (*.f64 (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))))","(/.f64 (-.f64 (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (cbrt.f64 x)) (*.f64 (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (*.f64 (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x)))","(/.f64 (-.f64 (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))) (*.f64 (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) x)) (*.f64 (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))))","(/.f64 (-.f64 (*.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))) (*.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) x)) (*.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))))","(/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (*.f64 (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))))) (*.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (*.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))))) (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) x)))","(/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (cbrt.f64 x) (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (*.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (cbrt.f64 x) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (fma.f64 x (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))))) (*.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (fma.f64 x (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64)) (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (fma.f64 x (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (*.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64)) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (fma.f64 x (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (*.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))))) (*.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64)) (cbrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (cbrt.f64 x) (*.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (*.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (cbrt.f64 x)))","(/.f64 (fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (cbrt.f64 x) (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) x)))","(/.f64 (fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64)) (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) x)) (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))))","(/.f64 (fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (cbrt.f64 x) (*.f64 (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (*.f64 (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (cbrt.f64 x)))","(/.f64 (fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64)) (*.f64 (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) x)) (*.f64 (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))))","(/.f64 (fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (cbrt.f64 x) (*.f64 (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (*.f64 (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x)))","(/.f64 (fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64)) (*.f64 (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) x)) (*.f64 (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))))","(/.f64 (fma.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64)) (*.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) x)) (*.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))))","(/.f64 (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) x)))))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x) (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))","(/.f64 (neg.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))))","(/.f64 (neg.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x)) (neg.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) x))))))","(/.f64 (neg.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x)) (neg.f64 (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))))","(/.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) x)))) (-.f64 (-.f64 #s(literal 1 binary64) x) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) #s(literal -1 binary64)))","(neg.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(fma.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) (/.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) (cbrt.f64 x))","(fma.f64 (/.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) (cbrt.f64 x))","(fma.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1/6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1/6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) (cbrt.f64 x))","(fma.f64 (/.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) (/.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (cbrt.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (cbrt.f64 (neg.f64 (sqrt.f64 x))) (pow.f64 x #s(literal 1/6 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1/3 binary64)) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x))","(fma.f64 (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/3 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/3 binary64)) (cbrt.f64 x))","(fma.f64 (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/3 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (cbrt.f64 x))","(fma.f64 (pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 1/3 binary64)) (pow.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 1/3 binary64)) (cbrt.f64 x))","(fma.f64 (pow.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 1/3 binary64)) (pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 1/3 binary64)) (cbrt.f64 x))","(fma.f64 (pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/6 binary64)) (pow.f64 (sqrt.f64 x) #s(literal 1/6 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (pow.f64 (sqrt.f64 x) #s(literal 1/6 binary64)) (pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/6 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal 2/3 binary64)) (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal 2/3 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 1/3 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (pow.f64 (cbrt.f64 x) #s(literal 1/3 binary64)) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1/3 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)) (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))","(fma.f64 (*.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64)) (cbrt.f64 x))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1/3 binary64)) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (cbrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (cbrt.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1/3 binary64)) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/3 binary64)) (cbrt.f64 x))","(fma.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (pow.f64 x #s(literal 1/6 binary64)) (cbrt.f64 (neg.f64 (sqrt.f64 x))) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (pow.f64 x #s(literal 1/6 binary64)) (pow.f64 x #s(literal 1/6 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64)) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64)))) (cbrt.f64 x))","(fma.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))))","(fma.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (cbrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/3 binary64)) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (cbrt.f64 x))","(fma.f64 (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (cbrt.f64 x))","(fma.f64 #s(literal -1 binary64) (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (cbrt.f64 x) (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (cbrt.f64 x) #s(literal -1 binary64) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (cbrt.f64 x) #s(literal 1 binary64) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64) (cbrt.f64 x))","(fma.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) #s(literal -1 binary64)) (neg.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))))","(fma.f64 #s(literal 1 binary64) (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 #s(literal 1 binary64) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))","(fma.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(-.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))) (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))))","(-.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) x))))) (/.f64 x (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) x))))))","(-.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))))","(-.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 x (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))))","(-.f64 #s(literal 0 binary64) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))","(+.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (neg.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))))","(+.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (neg.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))))","(+.f64 #s(literal 0 binary64) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))","(+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(+.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) (/.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))))","(*.f64 (/.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1/6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1/6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))))","(*.f64 (/.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) (/.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))))","(*.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))))","(*.f64 (cbrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))))","(*.f64 (cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (cbrt.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(*.f64 (cbrt.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))","(*.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1/3 binary64)) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/3 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/3 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))))","(*.f64 (pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 1/3 binary64)) (pow.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 1/3 binary64)) (pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(*.f64 (*.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (cbrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (cbrt.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64)) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64)))))","(*.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (cbrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) #s(literal 1/6 binary64))","(pow.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","(pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/3 binary64))","(/.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 0 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 0 binary64)) (+.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (+.f64 #s(literal 0 binary64) (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 0 binary64)))))","(/.f64 (+.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 0 binary64)) (+.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 #s(literal 0 binary64) (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 0 binary64)))))","(/.f64 (neg.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (neg.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (cbrt.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (cbrt.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (cbrt.f64 (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (cbrt.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (cbrt.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (cbrt.f64 (neg.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (cbrt.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(fma.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) (/.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) #s(literal 0 binary64))","(fma.f64 (/.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1/6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1/6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) #s(literal 0 binary64))","(fma.f64 (/.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) (/.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) #s(literal 0 binary64))","(fma.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal 0 binary64))","(fma.f64 (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) #s(literal 0 binary64))","(fma.f64 (cbrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 0 binary64))","(fma.f64 (cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (cbrt.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) #s(literal 0 binary64))","(fma.f64 (cbrt.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) #s(literal 0 binary64))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1/3 binary64)) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal 0 binary64))","(fma.f64 (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/3 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/3 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/3 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 0 binary64))","(fma.f64 (pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 1/3 binary64)) (pow.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 1/3 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 1/3 binary64)) (pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 1/3 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 0 binary64))","(fma.f64 (*.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) #s(literal 0 binary64))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) #s(literal 0 binary64))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal 0 binary64))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1/3 binary64)) #s(literal 0 binary64))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))) #s(literal 0 binary64))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))) #s(literal 0 binary64))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (cbrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) #s(literal 0 binary64))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (cbrt.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 0 binary64))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1/3 binary64)) #s(literal 0 binary64))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/3 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64)) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64)))) #s(literal 0 binary64))","(fma.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (cbrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 0 binary64))","(fma.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/3 binary64)) #s(literal 0 binary64))","(fma.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 0 binary64))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)) #s(literal 0 binary64))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64) #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 0 binary64))","(cbrt.f64 (-.f64 #s(literal 1 binary64) x))","(-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 0 binary64))","(exp.f64 (-.f64 (*.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 1/3 binary64)) (log.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))))))","(exp.f64 (fma.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 1/3 binary64) (neg.f64 (log.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64)))))))","(exp.f64 (fma.f64 (log.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64) (*.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 1/3 binary64))))","(exp.f64 (*.f64 (log1p.f64 x) #s(literal 1/3 binary64)))","(+.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 0 binary64))","(*.f64 (sqrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (sqrt.f64 (cbrt.f64 x)))","(*.f64 (sqrt.f64 (cbrt.f64 x)) (sqrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 3/2 binary64)) (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 3/2 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/4 binary64)) (pow.f64 (sqrt.f64 x) #s(literal 1/4 binary64)))","(*.f64 (pow.f64 (sqrt.f64 x) #s(literal 1/4 binary64)) (pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/4 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1/2 binary64)) (pow.f64 x #s(literal 1/6 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal 1/2 binary64)) (sqrt.f64 x))","(*.f64 (pow.f64 #s(literal -1 binary64) #s(literal 3/2 binary64)) (sqrt.f64 x))","(*.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 1/4 binary64)))","(*.f64 (pow.f64 x #s(literal 1/6 binary64)) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 x) (pow.f64 #s(literal 1 binary64) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 x) (pow.f64 #s(literal -1 binary64) #s(literal 3/2 binary64)))","(*.f64 (sqrt.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (sqrt.f64 x))","(pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/8 binary64))","(pow.f64 (*.f64 x x) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 x) #s(literal 1 binary64))","(pow.f64 (cbrt.f64 x) #s(literal 3/2 binary64))","(pow.f64 x #s(literal 1/2 binary64))","(/.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))","(/.f64 (sqrt.f64 x) (sqrt.f64 #s(literal -1 binary64)))","(/.f64 (sqrt.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (pow.f64 x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(sqrt.f64 x)","(fabs.f64 (neg.f64 (sqrt.f64 x)))","(fabs.f64 (sqrt.f64 x))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal 1/4 binary64)))","(exp.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal 3/2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 x)) #s(literal 1 binary64)))","(exp.f64 (log.f64 (sqrt.f64 x)))","(*.f64 (/.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (-.f64 (-.f64 #s(literal 1 binary64) x) x)) (/.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (pow.f64 (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (/.f64 #s(literal 1 binary64) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))))","(*.f64 (pow.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) #s(literal -1 binary64)) (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x) (/.f64 #s(literal 1 binary64) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) x))))))","(*.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x) (pow.f64 (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))))","(*.f64 (neg.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x)) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))))","(*.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))","(pow.f64 (pow.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))) (*.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))))) (+.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))))","(/.f64 (-.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))) (*.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 x (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))))) (+.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 x (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))) (+.f64 #s(literal 0 binary64) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (fma.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (*.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) #s(literal 3 binary64)) (pow.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (fma.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 x (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 x (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (*.f64 #s(literal 0 binary64) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))","(/.f64 (neg.f64 (neg.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x))) (neg.f64 (neg.f64 (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))))","(/.f64 (-.f64 (*.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (*.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (*.f64 (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) x)) (*.f64 (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))))","(/.f64 (-.f64 (*.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (cbrt.f64 x)) (*.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (*.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (cbrt.f64 x)))","(/.f64 (-.f64 (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (cbrt.f64 x)) (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) x)))","(/.f64 (-.f64 (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))) (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) x)) (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))))","(/.f64 (-.f64 (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (cbrt.f64 x)) (*.f64 (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (*.f64 (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (cbrt.f64 x)))","(/.f64 (-.f64 (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))) (*.f64 (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) x)) (*.f64 (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))))","(/.f64 (-.f64 (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (cbrt.f64 x)) (*.f64 (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (*.f64 (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x)))","(/.f64 (-.f64 (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))) (*.f64 (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) x)) (*.f64 (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))))","(/.f64 (-.f64 (*.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))) (*.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) x)) (*.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))))","(/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (*.f64 (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))))) (*.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (*.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))))) (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) x)))","(/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (cbrt.f64 x) (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (*.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (cbrt.f64 x) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (fma.f64 x (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))))) (*.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (fma.f64 x (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64)) (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (fma.f64 x (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (*.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64)) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (fma.f64 x (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (*.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))))) (*.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64)) (cbrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (cbrt.f64 x) (*.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (*.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (cbrt.f64 x)))","(/.f64 (fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (cbrt.f64 x) (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) x)))","(/.f64 (fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64)) (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) x)) (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))))","(/.f64 (fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (cbrt.f64 x) (*.f64 (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (*.f64 (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (cbrt.f64 x)))","(/.f64 (fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64)) (*.f64 (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) x)) (*.f64 (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))))","(/.f64 (fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (cbrt.f64 x) (*.f64 (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (*.f64 (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x)))","(/.f64 (fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64)) (*.f64 (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) x)) (*.f64 (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))))","(/.f64 (fma.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64)) (*.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) x)) (*.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))))","(/.f64 (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) x)))))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x) (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))","(/.f64 (neg.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))))","(/.f64 (neg.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x)) (neg.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) x))))))","(/.f64 (neg.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x)) (neg.f64 (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))))","(/.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) x)))) (-.f64 (-.f64 #s(literal 1 binary64) x) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) #s(literal -1 binary64)))","(neg.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(fma.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) (/.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) (cbrt.f64 x))","(fma.f64 (/.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) (cbrt.f64 x))","(fma.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1/6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1/6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) (cbrt.f64 x))","(fma.f64 (/.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) (/.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (cbrt.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (cbrt.f64 (neg.f64 (sqrt.f64 x))) (pow.f64 x #s(literal 1/6 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1/3 binary64)) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x))","(fma.f64 (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/3 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/3 binary64)) (cbrt.f64 x))","(fma.f64 (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/3 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (cbrt.f64 x))","(fma.f64 (pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 1/3 binary64)) (pow.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 1/3 binary64)) (cbrt.f64 x))","(fma.f64 (pow.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 1/3 binary64)) (pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 1/3 binary64)) (cbrt.f64 x))","(fma.f64 (pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/6 binary64)) (pow.f64 (sqrt.f64 x) #s(literal 1/6 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (pow.f64 (sqrt.f64 x) #s(literal 1/6 binary64)) (pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/6 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal 2/3 binary64)) (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal 2/3 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 1/3 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (pow.f64 (cbrt.f64 x) #s(literal 1/3 binary64)) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1/3 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)) (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))","(fma.f64 (*.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64)) (cbrt.f64 x))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1/3 binary64)) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (cbrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (cbrt.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1/3 binary64)) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/3 binary64)) (cbrt.f64 x))","(fma.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (pow.f64 x #s(literal 1/6 binary64)) (cbrt.f64 (neg.f64 (sqrt.f64 x))) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (pow.f64 x #s(literal 1/6 binary64)) (pow.f64 x #s(literal 1/6 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64)) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64)))) (cbrt.f64 x))","(fma.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))))","(fma.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (cbrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/3 binary64)) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (cbrt.f64 x))","(fma.f64 (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (cbrt.f64 x))","(fma.f64 #s(literal -1 binary64) (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (cbrt.f64 x) (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (cbrt.f64 x) #s(literal -1 binary64) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (cbrt.f64 x) #s(literal 1 binary64) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64) (cbrt.f64 x))","(fma.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) #s(literal -1 binary64)) (neg.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))))","(fma.f64 #s(literal 1 binary64) (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 #s(literal 1 binary64) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))","(fma.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(-.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))) (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))))","(-.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) x))))) (/.f64 x (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) x))))))","(-.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))))","(-.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 x (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))))","(-.f64 #s(literal 0 binary64) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))","(+.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (neg.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))))","(+.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (neg.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))))","(+.f64 #s(literal 0 binary64) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))","(+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(+.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) (/.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))))","(*.f64 (/.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1/6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1/6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))))","(*.f64 (/.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) (/.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))))","(*.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))))","(*.f64 (cbrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))))","(*.f64 (cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (cbrt.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(*.f64 (cbrt.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))","(*.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1/3 binary64)) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/3 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/3 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))))","(*.f64 (pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 1/3 binary64)) (pow.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 1/3 binary64)) (pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(*.f64 (*.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (cbrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (cbrt.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64)) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64)))))","(*.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (cbrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) #s(literal 1/6 binary64))","(pow.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","(pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/3 binary64))","(/.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 0 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 0 binary64)) (+.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (+.f64 #s(literal 0 binary64) (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 0 binary64)))))","(/.f64 (+.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 0 binary64)) (+.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 #s(literal 0 binary64) (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 0 binary64)))))","(/.f64 (neg.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (neg.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (cbrt.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (cbrt.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (cbrt.f64 (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (cbrt.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (cbrt.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (cbrt.f64 (neg.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (cbrt.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(fma.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) (/.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) #s(literal 0 binary64))","(fma.f64 (/.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1/6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1/6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) #s(literal 0 binary64))","(fma.f64 (/.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) (/.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) #s(literal 0 binary64))","(fma.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal 0 binary64))","(fma.f64 (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) #s(literal 0 binary64))","(fma.f64 (cbrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 0 binary64))","(fma.f64 (cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (cbrt.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) #s(literal 0 binary64))","(fma.f64 (cbrt.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) #s(literal 0 binary64))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1/3 binary64)) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal 0 binary64))","(fma.f64 (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/3 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/3 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/3 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 0 binary64))","(fma.f64 (pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 1/3 binary64)) (pow.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 1/3 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 1/3 binary64)) (pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 1/3 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 0 binary64))","(fma.f64 (*.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) #s(literal 0 binary64))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) #s(literal 0 binary64))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal 0 binary64))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1/3 binary64)) #s(literal 0 binary64))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))) #s(literal 0 binary64))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))) #s(literal 0 binary64))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (cbrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) #s(literal 0 binary64))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (cbrt.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 0 binary64))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1/3 binary64)) #s(literal 0 binary64))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/3 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64)) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64)))) #s(literal 0 binary64))","(fma.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (cbrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 0 binary64))","(fma.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/3 binary64)) #s(literal 0 binary64))","(fma.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 0 binary64))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)) #s(literal 0 binary64))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64) #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 0 binary64))","(cbrt.f64 (-.f64 #s(literal 1 binary64) x))","(-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 0 binary64))","(exp.f64 (-.f64 (*.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 1/3 binary64)) (log.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))))))","(exp.f64 (fma.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 1/3 binary64) (neg.f64 (log.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64)))))))","(exp.f64 (fma.f64 (log.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64) (*.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 1/3 binary64))))","(exp.f64 (*.f64 (log1p.f64 x) #s(literal 1/3 binary64)))","(+.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 0 binary64))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (/.f64 (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (sqrt.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (/.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 (sqrt.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (*.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64)) #s(literal 3 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) #s(literal 3 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) #s(literal 3 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64)))) #s(literal 3 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64)) (pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 1 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(*.f64 (-.f64 (sqrt.f64 x) #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 (sqrt.f64 x) #s(literal 1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 x #s(literal 1 binary64)))))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 1 binary64)))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x))","(pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 1/3 binary64))","(pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64))","(pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 3/2 binary64))","(pow.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64))","(pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(/.f64 (-.f64 (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x))) (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(/.f64 (-.f64 (*.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64))))) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (fma.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x) #s(literal 3 binary64))) (fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (exp.f64 (neg.f64 (log1p.f64 x))) (fma.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))))","(/.f64 (-.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) (fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (neg.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (pow.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 3 binary64)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (pow.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 3 binary64)) (pow.f64 (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 3 binary64)))","(/.f64 (pow.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 3 binary64)) (pow.f64 (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal 3 binary64)))","(/.f64 (exp.f64 (log1p.f64 (*.f64 x x))) (-.f64 #s(literal 1 binary64) x))","(/.f64 (exp.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (exp.f64 (log1p.f64 (fma.f64 x x x))))","(/.f64 (exp.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (exp.f64 (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (exp.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64)))) (exp.f64 (log.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 #s(literal 1 binary64) x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 x #s(literal 1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (-.f64 x #s(literal 1 binary64))) (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (-.f64 x #s(literal 1 binary64))) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (-.f64 #s(literal 1 binary64) x)) (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (-.f64 #s(literal 1 binary64) x)) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 x #s(literal 1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (/.f64 (-.f64 (sqrt.f64 x) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (/.f64 (-.f64 (sqrt.f64 x) #s(literal 1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 (sqrt.f64 x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (/.f64 (-.f64 (sqrt.f64 x) #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (/.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (/.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (/.f64 (sqrt.f64 x) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1 binary64)) (/.f64 (sqrt.f64 x) (-.f64 x #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (sqrt.f64 x) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (sqrt.f64 x) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) (/.f64 (sqrt.f64 x) (-.f64 (sqrt.f64 x) #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (sqrt.f64 x) (exp.f64 (neg.f64 (log1p.f64 x)))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (sqrt.f64 x) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sqrt.f64 x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sqrt.f64 x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sqrt.f64 x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sqrt.f64 x) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (-.f64 (sqrt.f64 x) #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sqrt.f64 x) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sqrt.f64 x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 x (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (/.f64 x (-.f64 #s(literal 1 binary64) x)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 x (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 x (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 x (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 x (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 x (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) (/.f64 x (-.f64 (sqrt.f64 x) #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 x (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 x (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) x) x) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (fabs.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (fabs.f64 (cbrt.f64 x)) #s(literal 1 binary64))","(fma.f64 (fabs.f64 (cbrt.f64 x)) (fabs.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))","(fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 x #s(literal 1/4 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/2 binary64)) (pow.f64 x #s(literal 1/4 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 3 binary64)) (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (cbrt.f64 x) #s(literal 1 binary64))","(fma.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x) #s(literal 1 binary64))","(fma.f64 (pow.f64 x #s(literal 1/4 binary64)) (sqrt.f64 (pow.f64 x #s(literal 3/2 binary64))) #s(literal 1 binary64))","(fma.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (cbrt.f64 x) #s(literal 1 binary64))","(fma.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (*.f64 x x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))","(fma.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 x #s(literal 1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (sqrt.f64 x) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (-.f64 x #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))","(fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))","(fma.f64 (cbrt.f64 x) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))","(fma.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(fma.f64 #s(literal 1 binary64) x #s(literal 1 binary64))","(fma.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 x #s(literal -1 binary64) #s(literal 1 binary64))","(fma.f64 x #s(literal 1 binary64) #s(literal 1 binary64))","(cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64))))","(-.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(-.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x))","(-.f64 #s(literal 1 binary64) x)","(-.f64 x #s(literal -1 binary64))","(exp.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)))","(exp.f64 (log1p.f64 x))","(+.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)))","(+.f64 #s(literal 1 binary64) x)","(+.f64 x #s(literal 1 binary64))","(*.f64 (*.f64 (log1p.f64 x) #s(literal 1/3 binary64)) #s(literal 3 binary64))","(*.f64 #s(literal 3 binary64) (*.f64 (log1p.f64 x) #s(literal 1/3 binary64)))","(*.f64 #s(literal 1 binary64) (log1p.f64 x))","(log1p.f64 x)","(/.f64 (-.f64 (*.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 (*.f64 x x))) (*.f64 (log1p.f64 x) (log1p.f64 x))) (+.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 x)))","(/.f64 (-.f64 (*.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (fma.f64 x x #s(literal -1 binary64)))) (*.f64 (log.f64 (-.f64 x #s(literal 1 binary64))) (log.f64 (-.f64 x #s(literal 1 binary64))))) (+.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (*.f64 (log1p.f64 (fma.f64 x x x)) (log1p.f64 (fma.f64 x x x)))) (+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x))))","(/.f64 (-.f64 (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (*.f64 (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))) (+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) (fma.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 (*.f64 x x)) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 x)))))","(/.f64 (-.f64 (pow.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (log.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 (log.f64 (-.f64 x #s(literal 1 binary64))) (log.f64 (-.f64 x #s(literal 1 binary64))) (*.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (-.f64 x #s(literal 1 binary64)))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 3 binary64))) (fma.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (fma.f64 (log1p.f64 (fma.f64 x x x)) (log1p.f64 (fma.f64 x x x)) (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal 3 binary64))) (fma.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (fma.f64 (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))))","(neg.f64 (log.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(fma.f64 (*.f64 (log1p.f64 x) #s(literal 1/3 binary64)) #s(literal 3 binary64) #s(literal 0 binary64))","(fma.f64 #s(literal 3 binary64) (*.f64 (log1p.f64 x) #s(literal 1/3 binary64)) #s(literal 0 binary64))","(fma.f64 (log1p.f64 x) #s(literal 1/3 binary64) (log.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))","(fma.f64 #s(literal 1/3 binary64) (log1p.f64 x) (log.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))","(fma.f64 #s(literal 1 binary64) (log1p.f64 x) #s(literal 0 binary64))","(-.f64 (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(-.f64 (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (log.f64 (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (log.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(-.f64 (log.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (log.f64 (neg.f64 (-.f64 x #s(literal 1 binary64)))))","(-.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 x))","(-.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (-.f64 x #s(literal 1 binary64))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x)))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(-.f64 #s(literal 0 binary64) (log.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(+.f64 (log.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(+.f64 (log.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (log.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))))","(+.f64 (log.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (log.f64 (fma.f64 x x #s(literal -1 binary64))))","(+.f64 (log.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (*.f64 (log1p.f64 x) #s(literal 1/3 binary64)))","(+.f64 (*.f64 (log1p.f64 x) #s(literal 1/3 binary64)) (log.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))","(+.f64 (log1p.f64 (*.f64 x x)) (neg.f64 (log1p.f64 x)))","(+.f64 (log1p.f64 (*.f64 x x)) (log.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(+.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (log.f64 (-.f64 x #s(literal 1 binary64)))))","(+.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (neg.f64 (log1p.f64 (fma.f64 x x x))))","(+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (neg.f64 (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 #s(literal 0 binary64) (log1p.f64 x))","(+.f64 (log1p.f64 x) #s(literal 0 binary64))","(log.f64 (-.f64 #s(literal 1 binary64) x))","(*.f64 (/.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (-.f64 (-.f64 #s(literal 1 binary64) x) x)) (/.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (pow.f64 (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (/.f64 #s(literal 1 binary64) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))))","(*.f64 (pow.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) #s(literal -1 binary64)) (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x) (/.f64 #s(literal 1 binary64) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) x))))))","(*.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x) (pow.f64 (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))))","(*.f64 (neg.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x)) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))))","(*.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))","(pow.f64 (pow.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))) (*.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))))) (+.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))))","(/.f64 (-.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))) (*.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 x (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))))) (+.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 x (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))) (+.f64 #s(literal 0 binary64) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (fma.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (*.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) #s(literal 3 binary64)) (pow.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (fma.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 x (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 x (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (*.f64 #s(literal 0 binary64) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))","(/.f64 (neg.f64 (neg.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x))) (neg.f64 (neg.f64 (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))))","(/.f64 (-.f64 (*.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (*.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (*.f64 (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) x)) (*.f64 (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))))","(/.f64 (-.f64 (*.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (cbrt.f64 x)) (*.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (*.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (cbrt.f64 x)))","(/.f64 (-.f64 (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (cbrt.f64 x)) (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) x)))","(/.f64 (-.f64 (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))) (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) x)) (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))))","(/.f64 (-.f64 (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (cbrt.f64 x)) (*.f64 (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (*.f64 (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (cbrt.f64 x)))","(/.f64 (-.f64 (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))) (*.f64 (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) x)) (*.f64 (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))))","(/.f64 (-.f64 (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (cbrt.f64 x)) (*.f64 (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (*.f64 (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x)))","(/.f64 (-.f64 (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))) (*.f64 (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) x)) (*.f64 (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))))","(/.f64 (-.f64 (*.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))) (*.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) x)) (*.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))))","(/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (*.f64 (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))))) (*.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (*.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))))) (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) x)))","(/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (cbrt.f64 x) (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (*.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (cbrt.f64 x) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (fma.f64 x (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))))) (*.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (fma.f64 x (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64)) (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (fma.f64 x (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (*.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64)) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (fma.f64 x (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (*.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))))) (*.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64)) (cbrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (cbrt.f64 x) (*.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (*.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (cbrt.f64 x)))","(/.f64 (fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (cbrt.f64 x) (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) x)))","(/.f64 (fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64)) (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) x)) (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))))","(/.f64 (fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (cbrt.f64 x) (*.f64 (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (*.f64 (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (cbrt.f64 x)))","(/.f64 (fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64)) (*.f64 (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) x)) (*.f64 (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))))","(/.f64 (fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (cbrt.f64 x) (*.f64 (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (*.f64 (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x)))","(/.f64 (fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64)) (*.f64 (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) x)) (*.f64 (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))))","(/.f64 (fma.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64)) (*.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) x)) (*.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))))","(/.f64 (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) x)))))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x) (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))","(/.f64 (neg.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))))","(/.f64 (neg.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x)) (neg.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) x))))))","(/.f64 (neg.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x)) (neg.f64 (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))))","(/.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) x)))) (-.f64 (-.f64 #s(literal 1 binary64) x) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) #s(literal -1 binary64)))","(neg.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(fma.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) (/.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) (cbrt.f64 x))","(fma.f64 (/.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) (cbrt.f64 x))","(fma.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1/6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1/6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) (cbrt.f64 x))","(fma.f64 (/.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) (/.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64))) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (cbrt.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (cbrt.f64 (neg.f64 (sqrt.f64 x))) (pow.f64 x #s(literal 1/6 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1/3 binary64)) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x))","(fma.f64 (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/3 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/3 binary64)) (cbrt.f64 x))","(fma.f64 (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/3 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (cbrt.f64 x))","(fma.f64 (pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 1/3 binary64)) (pow.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 1/3 binary64)) (cbrt.f64 x))","(fma.f64 (pow.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 1/3 binary64)) (pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 1/3 binary64)) (cbrt.f64 x))","(fma.f64 (pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/6 binary64)) (pow.f64 (sqrt.f64 x) #s(literal 1/6 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (pow.f64 (sqrt.f64 x) #s(literal 1/6 binary64)) (pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/6 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal 2/3 binary64)) (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal 2/3 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 1/3 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (pow.f64 (cbrt.f64 x) #s(literal 1/3 binary64)) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1/3 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)) (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))","(fma.f64 (*.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64)) (cbrt.f64 x))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1/3 binary64)) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (cbrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (cbrt.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1/3 binary64)) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/3 binary64)) (cbrt.f64 x))","(fma.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (pow.f64 x #s(literal 1/6 binary64)) (cbrt.f64 (neg.f64 (sqrt.f64 x))) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (pow.f64 x #s(literal 1/6 binary64)) (pow.f64 x #s(literal 1/6 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64)) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64)))) (cbrt.f64 x))","(fma.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))))","(fma.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (cbrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/3 binary64)) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (cbrt.f64 x))","(fma.f64 (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (cbrt.f64 x))","(fma.f64 #s(literal -1 binary64) (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (cbrt.f64 x) (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (cbrt.f64 x) #s(literal -1 binary64) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (cbrt.f64 x) #s(literal 1 binary64) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64) (cbrt.f64 x))","(fma.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) #s(literal -1 binary64)) (neg.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))))","(fma.f64 #s(literal 1 binary64) (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 #s(literal 1 binary64) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))","(fma.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(-.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))) (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))))","(-.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) x))))) (/.f64 x (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) x))))))","(-.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))))","(-.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 x (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))))","(-.f64 #s(literal 0 binary64) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))","(+.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (neg.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))))","(+.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (neg.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))))","(+.f64 #s(literal 0 binary64) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))","(+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(+.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))","(*.f64 (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal -1/3 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1/3 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/3 binary64)) (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/3 binary64)) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1/3 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/3 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1/3 binary64)))","(*.f64 (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64)) (pow.f64 (-.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64)))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1/3 binary64)) (pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1/3 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1/3 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1/3 binary64)))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))))))","(*.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64)))))","(pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) #s(literal -1/6 binary64))","(pow.f64 (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64)) #s(literal 2 binary64))","(pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/3 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))))))","(/.f64 #s(literal 1 binary64) (cbrt.f64 (-.f64 x #s(literal 1 binary64))))","(exp.f64 (fma.f64 (log.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64)))) #s(literal -1/2 binary64) (*.f64 (log.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64)))) #s(literal -1/2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64)))) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1/3 binary64)))","(exp.f64 (neg.f64 (log.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))))))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1/6 binary64)) (*.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64)))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1/6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64))))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1/6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1/6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64))))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1/6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1/6 binary64)) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))))))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1/6 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1/6 binary64)) (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1/6 binary64)) (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1/6 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64)))))","(*.f64 (/.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (*.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64)))) (/.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64))))","(*.f64 (/.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64))) (/.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64))))","(*.f64 (/.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64))) (/.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/6 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))))))","(*.f64 (/.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (/.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64)))))","(*.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(*.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (cbrt.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) (cbrt.f64 (-.f64 (sqrt.f64 x) #s(literal 1 binary64))))","(*.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(*.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/3 binary64)) (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/3 binary64)) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 1/3 binary64)) (pow.f64 (-.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)) (cbrt.f64 (-.f64 x #s(literal 1 binary64))))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64)))","(*.f64 (cbrt.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(*.f64 (cbrt.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (cbrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (cbrt.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(*.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (cbrt.f64 (-.f64 x #s(literal 1 binary64))))","(pow.f64 (exp.f64 (log.f64 (-.f64 x #s(literal 1 binary64)))) #s(literal 1/3 binary64))","(pow.f64 (exp.f64 #s(literal 1/3 binary64)) (log.f64 (-.f64 x #s(literal 1 binary64))))","(pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) #s(literal 1/6 binary64))","(pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/6 binary64)) #s(literal 2 binary64))","(pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1/3 binary64))","(/.f64 (neg.f64 (cbrt.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (cbrt.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (cbrt.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (cbrt.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (cbrt.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64))","(/.f64 (cbrt.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (cbrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(cbrt.f64 (-.f64 x #s(literal 1 binary64)))","(exp.f64 (-.f64 (*.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 1/3 binary64)) (*.f64 (log1p.f64 x) #s(literal 1/3 binary64))))","(exp.f64 (log.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (/.f64 (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (/.f64 (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (/.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (/.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (/.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (/.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (/.f64 (-.f64 #s(literal 1 binary64) x) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (/.f64 (-.f64 #s(literal 1 binary64) x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (/.f64 (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (/.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (/.f64 (-.f64 x #s(literal 1 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (/.f64 (-.f64 x #s(literal 1 binary64)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) x)) (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 #s(literal 1 binary64) x))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(*.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) (-.f64 (sqrt.f64 x) #s(literal 1 binary64)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (fma.f64 x x #s(literal -1 binary64)))","(*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(*.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","(pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (exp.f64 (neg.f64 (log1p.f64 x))))) (fma.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))) (*.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x) #s(literal 3 binary64)) (pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 3 binary64))) (fma.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x) (fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (fma.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) x)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))) (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal -1 binary64) x))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (sqrt.f64 x) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(fma.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 (sqrt.f64 x) (exp.f64 (neg.f64 (log1p.f64 x)))) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(fma.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (sqrt.f64 x) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(fma.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (sqrt.f64 x) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(fma.f64 (/.f64 (sqrt.f64 x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(fma.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(fma.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (/.f64 (sqrt.f64 x) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(fma.f64 (/.f64 (sqrt.f64 x) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(fma.f64 (/.f64 (sqrt.f64 x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(fma.f64 (/.f64 (sqrt.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(fma.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (/.f64 (sqrt.f64 x) (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(fma.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (/.f64 (sqrt.f64 x) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(fma.f64 (/.f64 (sqrt.f64 x) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(fma.f64 (/.f64 (sqrt.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(fma.f64 (/.f64 (sqrt.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(fma.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (/.f64 (sqrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(fma.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(fma.f64 (/.f64 (sqrt.f64 x) (-.f64 #s(literal 1 binary64) x)) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1 binary64)) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(fma.f64 (/.f64 x (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 x (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(fma.f64 (/.f64 x (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (/.f64 x (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(fma.f64 (/.f64 x (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (/.f64 x (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(fma.f64 (/.f64 x (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (/.f64 x (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(fma.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(fma.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1 binary64)) (/.f64 (sqrt.f64 x) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(fma.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (sqrt.f64 x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(fma.f64 (/.f64 (sqrt.f64 x) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(fma.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x x) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(fma.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (-.f64 #s(literal 1 binary64) x) x) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(fma.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 x (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(fma.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 x (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(fma.f64 (fabs.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (fabs.f64 (cbrt.f64 x)) #s(literal -1 binary64))","(fma.f64 (fabs.f64 (cbrt.f64 x)) (fabs.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))","(fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64))","(fma.f64 (pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/2 binary64)) (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64))","(fma.f64 (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 3 binary64)) (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 3 binary64)) #s(literal -1 binary64))","(fma.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (cbrt.f64 x) #s(literal -1 binary64))","(fma.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x) #s(literal -1 binary64))","(fma.f64 (pow.f64 x #s(literal 1/4 binary64)) (sqrt.f64 (pow.f64 x #s(literal 3/2 binary64))) #s(literal -1 binary64))","(fma.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/2 binary64)) #s(literal -1 binary64))","(fma.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (cbrt.f64 x) #s(literal -1 binary64))","(fma.f64 (fma.f64 x x x) (/.f64 x (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(fma.f64 (*.f64 x x) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))","(fma.f64 (sqrt.f64 x) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(fma.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))","(fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal -1 binary64))","(fma.f64 (cbrt.f64 x) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) x #s(literal -1 binary64))","(fma.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(fma.f64 x #s(literal -1 binary64) #s(literal -1 binary64))","(fma.f64 x #s(literal 1 binary64) #s(literal -1 binary64))","(expm1.f64 (neg.f64 (*.f64 (log.f64 x) #s(literal -1 binary64))))","(expm1.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))","(expm1.f64 (*.f64 (log.f64 x) #s(literal 1 binary64)))","(expm1.f64 (log.f64 x))","(-.f64 (/.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x)) (/.f64 (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(-.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x) (exp.f64 (neg.f64 (log1p.f64 x))))","(-.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(-.f64 x #s(literal 1 binary64))","(+.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(+.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (neg.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(+.f64 #s(literal -1 binary64) x)","(+.f64 x #s(literal -1 binary64))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1/6 binary64)) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1/6 binary64)))","(*.f64 (cbrt.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))))","(*.f64 (cbrt.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (cbrt.f64 (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (cbrt.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)))))","(*.f64 (cbrt.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (cbrt.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)) #s(literal -1 binary64))))","(*.f64 (cbrt.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)) #s(literal -1 binary64)) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64))","(*.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 (-.f64 x #s(literal 1 binary64))))","(*.f64 #s(literal 1 binary64) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))))","(pow.f64 (exp.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64)))) #s(literal 1/3 binary64))","(pow.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1/6 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal 1/6 binary64))","(pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1/3 binary64))","(/.f64 (neg.f64 (cbrt.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)))) (neg.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (cbrt.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)))) (neg.f64 (cbrt.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)))))","(/.f64 (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 x #s(literal 1 binary64)))) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (cbrt.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))) (cbrt.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 x #s(literal 1 binary64)))) (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 x #s(literal 1 binary64)))) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (cbrt.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)))) (cbrt.f64 (neg.f64 (fma.f64 x x #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)))) (cbrt.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x)))))","(/.f64 (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64)))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))","(/.f64 (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (cbrt.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (cbrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x #s(literal -1 binary64)))) (cbrt.f64 (*.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))))","(/.f64 (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x #s(literal -1 binary64)))) (cbrt.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) x))))","(/.f64 (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (cbrt.f64 (*.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (cbrt.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64)))) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))))","(/.f64 (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (cbrt.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))))","(/.f64 (cbrt.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (cbrt.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (cbrt.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))))","(/.f64 (cbrt.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (cbrt.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (cbrt.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (cbrt.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 x x))) (cbrt.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal -1 binary64)))))","(cbrt.f64 (fma.f64 x x #s(literal -1 binary64)))","(exp.f64 (fma.f64 (log1p.f64 x) #s(literal 1/3 binary64) (log.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))))))","(exp.f64 (*.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 1/3 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":232.841064453125,"type":"rewrite"},{"compiler":[[26644,4165]],"memory":[[4296784,115497664]],"time":197.3359375,"type":"eval"},{"alts":[["(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/3 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (cbrt.f64 x)))","fresh",60.127678427313434,"binary64"],["(fma.f64 (/.f64 #s(literal 1 binary64) (cbrt.f64 (-.f64 x #s(literal 1 binary64)))) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (cbrt.f64 x)))","fresh",60.80765191753776,"binary64"],["(/.f64 (-.f64 (*.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))) (*.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) x)) (*.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))))","fresh",61.25373770383933,"binary64"],["(/.f64 (-.f64 (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (cbrt.f64 x)) (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) x)))","fresh",61.72247830212508,"binary64"],["(-.f64 (cbrt.f64 (/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))) (cbrt.f64 x))","fresh",61.967273376523224,"binary64"],["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","done",60.29627493697794,"binary64"],["(+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","next",60.63917809431693,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x)))","fresh",48.2336463974876,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x)))","fresh",48.35623713611538,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -10/243 binary64) (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) (*.f64 x x)))","fresh",48.129191207924485,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (cbrt.f64 x)))","fresh",1.2997111204621226,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 1/3 binary64)) (cbrt.f64 x)))","fresh",1.3088511595358903,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1 binary64) (/.f64 (cbrt.f64 x) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)))))","fresh",1.3521199704618794,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","next",1.2756098509252476,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal 1/3 binary64)))","fresh",1.401042250319517,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (*.f64 x x) #s(literal -1/3 binary64)) #s(literal 1/3 binary64)))","fresh",33.91365880519614,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64)))","fresh",1.3065661497832552,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 x #s(literal -2/3 binary64)) #s(literal 1/3 binary64)))","fresh",6.679088646846171,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal 1/3 binary64)))","next",1.3361949095516972,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))))","next",1.3140849486096557,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (cbrt.f64 (pow.f64 x #s(literal -3/2 binary64)))) #s(literal 1/3 binary64)))","next",21.459114973219084,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","done",30.90374653482893,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))","fresh",31.574547025454315,"binary64"],["#s(approx (+ (* (pow (cbrt (- x 1)) -1) (cbrt (+ (* x x) -1))) (neg (cbrt x))) (*.f64 (neg.f64 x) (fma.f64 (-.f64 (/.f64 #s(literal 1 binary64) (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (cbrt.f64 #s(literal -1 binary64))) (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal -1/3 binary64) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x)))) (neg.f64 (pow.f64 x #s(literal 3 binary64)))))))","fresh",48.64432118693672,"binary64"]],"compiler":[[14,11],[15,11],[31,15],[26,16],[25,12],[7,6],[9,8],[30,22],[22,17],[38,28],[15,11],[17,13],[17,13],[14,12],[16,14],[15,12],[14,12],[13,11],[16,14],[17,13],[19,16],[16,13],[16,13],[55,38],[14,11],[15,11],[31,15],[26,16],[25,12],[9,8],[30,22],[22,17],[38,28],[15,11],[17,13],[17,13],[14,12],[16,14],[15,12],[14,12],[13,11],[16,14],[17,13],[19,16],[16,13],[55,38]],"count":[[1198,24]],"kept":[{"done":[1,1],"fresh":[17,1],"new":[1175,21],"picked":[5,1]}],"memory":[[3610400,55350336]],"min-error":[[0.18227257069442182,"binary64"]],"time":45.191162109375,"type":"prune"},{"egraph":[[0,674,172,0.00312173],[14,674,172,0.004183443],[13,670,172,0.004273938],[12,646,172,0.004851567],[11,588,172,0.005273265],[10,493,172,0.00536635],[9,311,172,0.00249592],[8,269,172,0.001561198],[7,199,172,0.001383503],[6,164,172,0.001157805],[5,132,172,0.000859535],[4,116,172,0.000678328],[3,98,172,0.000651106],[2,82,174,0.000492926],[1,63,174,0.000451013],[0,46,174,0.000458656],[0,31,184,0.000432494]],"inputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","#s(literal 1/3 binary64)","(pow.f64 (cbrt.f64 x) #s(literal 2 binary64))","(cbrt.f64 x)","x","#s(literal 2 binary64)","(+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(cbrt.f64 x)","x","#s(approx (cbrt (+ x 1)) #s(literal 1 binary64))","#s(literal 1 binary64)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal 1/3 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal 1/3 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","#s(literal 1 binary64)","(pow.f64 (cbrt.f64 x) #s(literal 2 binary64))","(cbrt.f64 x)","x","#s(literal 2 binary64)","#s(literal 1/3 binary64)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(/.f64 #s(literal 1/3 binary64) (cbrt.f64 x))","#s(literal 1/3 binary64)","(cbrt.f64 x)","x","(pow.f64 (cbrt.f64 x) #s(literal -1 binary64))","#s(literal -1 binary64)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (cbrt.f64 (pow.f64 x #s(literal -3/2 binary64)))) #s(literal 1/3 binary64)))","(*.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (cbrt.f64 (pow.f64 x #s(literal -3/2 binary64)))) #s(literal 1/3 binary64))","(*.f64 (cbrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (cbrt.f64 (pow.f64 x #s(literal -3/2 binary64))))","(cbrt.f64 (pow.f64 x #s(literal -1/2 binary64)))","(pow.f64 x #s(literal -1/2 binary64))","x","#s(literal -1/2 binary64)","(cbrt.f64 (pow.f64 x #s(literal -3/2 binary64)))","(pow.f64 x #s(literal -3/2 binary64))","#s(literal -3/2 binary64)","#s(literal 1/3 binary64)"]],"locations":[["(cbrt.f64 (pow.f64 x #s(literal -1/2 binary64)))","cost-diff",0],["(*.f64 (cbrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (cbrt.f64 (pow.f64 x #s(literal -3/2 binary64))))","cost-diff",0],["(*.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (cbrt.f64 (pow.f64 x #s(literal -3/2 binary64)))) #s(literal 1/3 binary64))","cost-diff",0],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (cbrt.f64 (pow.f64 x #s(literal -3/2 binary64)))) #s(literal 1/3 binary64)))","cost-diff",0],["(cbrt.f64 x)","cost-diff",0],["(/.f64 #s(literal 1/3 binary64) (cbrt.f64 x))","cost-diff",0],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))))","cost-diff",0],["(*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","cost-diff",3],["(pow.f64 (cbrt.f64 x) #s(literal 2 binary64))","cost-diff",0],["(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal 1/3 binary64))","cost-diff",0],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal 1/3 binary64)))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","cost-diff",2],["#s(approx (cbrt (+ x 1)) #s(literal 1 binary64))","cost-diff",0],["(cbrt.f64 x)","cost-diff",0],["(+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","cost-diff",0],["(cbrt.f64 x)","cost-diff",0],["(pow.f64 (cbrt.f64 x) #s(literal 2 binary64))","cost-diff",0],["(/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","cost-diff",0],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","cost-diff",0]],"memory":[[2719568,2719568]],"method":["egg-herbie"],"outputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64)))","(/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64))","#s(literal 1/3 binary64)","(pow.f64 (cbrt.f64 x) #s(literal 2 binary64))","(cbrt.f64 x)","x","#s(literal 2 binary64)","(+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","(cbrt.f64 x)","x","#s(approx (cbrt (+ x 1)) #s(literal 1 binary64))","#s(literal 1 binary64)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal 1/3 binary64))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(pow.f64 (cbrt.f64 x) #s(literal -2 binary64))","#s(literal 1 binary64)","(pow.f64 (cbrt.f64 x) #s(literal 2 binary64))","(cbrt.f64 x)","x","#s(literal 2 binary64)","#s(literal 1/3 binary64)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64)))","(*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64))","(/.f64 #s(literal 1/3 binary64) (cbrt.f64 x))","#s(literal 1/3 binary64)","(cbrt.f64 x)","x","(pow.f64 (cbrt.f64 x) #s(literal -1 binary64))","#s(literal -1 binary64)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (cbrt.f64 (pow.f64 x #s(literal -3/2 binary64)))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal -1/2 binary64))) #s(literal 1/3 binary64)) (cbrt.f64 (pow.f64 x #s(literal -3/2 binary64)))))","(*.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (cbrt.f64 (pow.f64 x #s(literal -3/2 binary64)))) #s(literal 1/3 binary64))","(*.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal -1/2 binary64))) #s(literal 1/3 binary64)) (cbrt.f64 (pow.f64 x #s(literal -3/2 binary64))))","(*.f64 (cbrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (cbrt.f64 (pow.f64 x #s(literal -3/2 binary64))))","(*.f64 (cbrt.f64 (pow.f64 x #s(literal -3/2 binary64))) (cbrt.f64 (pow.f64 x #s(literal -1/2 binary64))))","(cbrt.f64 (pow.f64 x #s(literal -1/2 binary64)))","(pow.f64 x #s(literal -1/2 binary64))","x","#s(literal -1/2 binary64)","(cbrt.f64 (pow.f64 x #s(literal -3/2 binary64)))","(pow.f64 x #s(literal -3/2 binary64))","#s(literal -3/2 binary64)","#s(literal 1/3 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":49.9638671875,"type":"simplify"},{"compiler":[[144,27]],"locations":[["(*.f64 (cbrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (cbrt.f64 (pow.f64 x #s(literal -3/2 binary64))))","accuracy",0.3203125],["(*.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (cbrt.f64 (pow.f64 x #s(literal -3/2 binary64)))) #s(literal 1/3 binary64))","accuracy",0.36328125],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (cbrt.f64 (pow.f64 x #s(literal -3/2 binary64)))) #s(literal 1/3 binary64)))","accuracy",0.696096278712372],["(cbrt.f64 (pow.f64 x #s(literal -3/2 binary64)))","accuracy",20.6608473227127],["(pow.f64 (cbrt.f64 x) #s(literal -1 binary64))","accuracy",0.21484375],["(*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","accuracy",0.34765625],["(/.f64 #s(literal 1/3 binary64) (cbrt.f64 x))","accuracy",0.41015625],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))))","accuracy",0.696096278712372],["(/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","accuracy",0.26953125],["(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal 1/3 binary64))","accuracy",0.36328125],["(pow.f64 (cbrt.f64 x) #s(literal 2 binary64))","accuracy",0.48275375976844204],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal 1/3 binary64)))","accuracy",0.696096278712372],["(+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","accuracy",0.00390625],["(cbrt.f64 x)","accuracy",0.0625],["#s(approx (cbrt (+ x 1)) #s(literal 1 binary64))","accuracy",59.040660249906146],["(cbrt.f64 x)","accuracy",0.0625],["(/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","accuracy",0.38966752930532605],["(pow.f64 (cbrt.f64 x) #s(literal 2 binary64))","accuracy",0.48275375976844204],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","accuracy",0.696096278712372]],"memory":[[-4858880,43004416]],"mixsample":[[0.02197265625,"ival-cbrt",1600],[10.413818359375,"ival-div",0],[12.170654296875,"adjust",800],[0.124755859375,"ival-assert",0],[2.856689453125,"ival-sub",0],[9.00732421875,"const",0],[2.34423828125,"ival-cbrt",400],[0.65771484375,"ival-cbrt",2000],[2.937255859375,"ival-cbrt",800],[2.240478515625,"adjust",2000],[33.438720703125,"ival-pow",0],[4.238037109375,"ival-add",0],[0.0048828125,"ival-sub",800],[9.42236328125,"ival-mult",0],[0.159423828125,"ival-add",2000],[7.5146484375,"ival-cbrt",0],[0.844970703125,"ival-add",400],[0.2265625,"ival-true",0],[0.835205078125,"ival-add",800],[0.734619140625,"exact",0],[6.208251953125,"ival-pow2",0]],"outcomes":[[99.97705078125,1,"valid",198],[42.122314453125,2,"valid",54],[1.031982421875,0,"valid",4]],"time":171.655029296875,"type":"localize"},{"count":[[18,48]],"inputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(pow.f64 (cbrt.f64 x) #s(literal 2 binary64))","(cbrt.f64 x)","(+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","#s(approx (cbrt (+ x 1)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal 1/3 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal 1/3 binary64))","(*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))))","(/.f64 #s(literal 1/3 binary64) (cbrt.f64 x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (cbrt.f64 (pow.f64 x #s(literal -3/2 binary64)))) #s(literal 1/3 binary64)))","(*.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (cbrt.f64 (pow.f64 x #s(literal -3/2 binary64)))) #s(literal 1/3 binary64))","(*.f64 (cbrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (cbrt.f64 (pow.f64 x #s(literal -3/2 binary64))))","(cbrt.f64 (pow.f64 x #s(literal -1/2 binary64)))","(pow.f64 (cbrt.f64 x) #s(literal -1 binary64))","(cbrt.f64 (pow.f64 x #s(literal -3/2 binary64)))"]],"memory":[[-5963312,75285808]],"outputs":[["(- 1 (cbrt x))","(- (+ 1 (* 1/3 x)) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* -1/9 x)))) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))) (cbrt x))","(* 1/3 (cbrt (/ 1 (pow x 2))))","(cbrt (pow x 2))","(cbrt x)","(+ 1 (cbrt x))","(+ 1 (+ (cbrt x) (* 1/3 x)))","(+ 1 (+ (cbrt x) (* x (+ 1/3 (* -1/9 x)))))","(+ 1 (+ (cbrt x) (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))))","1","(+ 1 (* 1/3 x))","(+ 1 (* x (+ 1/3 (* -1/9 x))))","(+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9)))))","(cbrt (/ 1 (pow x 2)))","(* 1/3 (cbrt (/ 1 x)))","(pow (/ 1 x) 1/6)","(cbrt (/ 1 x))","(sqrt (/ 1 x))","(/ (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4))))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* -10/243 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(* 2 (cbrt x))","(* x (+ (* 1/3 (cbrt (/ 1 (pow x 5)))) (* 2 (cbrt (/ 1 (pow x 2))))))","(* x (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 1/3 (cbrt (/ 1 (pow x 5)))) (* 2 (cbrt (/ 1 (pow x 2)))))))","(* x (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 5/81 (cbrt (/ 1 (pow x 11)))) (+ (* 1/3 (cbrt (/ 1 (pow x 5)))) (* 2 (cbrt (/ 1 (pow x 2))))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (* 1/3 (cbrt (/ 1 (pow x 5))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 5)))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 5/81 (cbrt (/ 1 (pow x 11)))) (* 1/3 (cbrt (/ 1 (pow x 5))))))))","(* 1/3 (* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2))))","(/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 10/243 (* (cbrt (pow x 13)) (/ 1 (pow (cbrt -1) 11)))) (* 5/81 (* (cbrt (pow x 16)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(* -1 (* (cbrt (pow x 2)) (pow (cbrt -1) 3)))","(* -1 (* (cbrt x) (cbrt -1)))","(* -2 (* (cbrt x) (cbrt -1)))","(* -1 (* x (+ (* -1/3 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* 2 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))))","(* -1 (* x (+ (* -1 (/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* 2 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* 2 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))))","(* -1 (* x (+ (* -1/3 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2)))","(* 1/3 (cbrt (/ (pow (sqrt -1) 2) (pow x 2))))","(cbrt (/ (pow (sqrt -1) 2) (pow x 2)))","(* (pow (/ -1 x) 1/6) (cbrt (sqrt -1)))","(* (sqrt (/ 1 x)) (cbrt (pow (sqrt -1) 4)))"]],"series":[[38.92578125,"((- (cbrt (+ x 1)) (cbrt x)) (/ 1/3 (pow (cbrt x) 2)) (pow (cbrt x) 2) (cbrt x) (+ (cbrt x) (cbrt (+ x 1))) (cbrt (+ x 1)) (/ 1 (pow (cbrt x) 2)) (- (cbrt (+ x 1)) (cbrt x)) (* (/ 1 (pow (cbrt x) 2)) 1/3) (* (/ 1/3 (cbrt x)) (pow (cbrt x) -1)) (- (cbrt (+ x 1)) (cbrt x)) (/ 1/3 (cbrt x)) (- (cbrt (+ x 1)) (cbrt x)) (* (* (cbrt (pow x -1/2)) (cbrt (pow x -3/2))) 1/3) (* (cbrt (pow x -1/2)) (cbrt (pow x -3/2))) (cbrt (pow x -1/2)) (pow (cbrt x) -1) (cbrt (pow x -3/2)))","x","-inf"],[37.888916015625,"((- (cbrt (+ x 1)) (cbrt x)) (/ 1/3 (pow (cbrt x) 2)) (pow (cbrt x) 2) (cbrt x) (+ (cbrt x) (cbrt (+ x 1))) (cbrt (+ x 1)) (/ 1 (pow (cbrt x) 2)) (- (cbrt (+ x 1)) (cbrt x)) (* (/ 1 (pow (cbrt x) 2)) 1/3) (* (/ 1/3 (cbrt x)) (pow (cbrt x) -1)) (- (cbrt (+ x 1)) (cbrt x)) (/ 1/3 (cbrt x)) (- (cbrt (+ x 1)) (cbrt x)) (* (* (cbrt (pow x -1/2)) (cbrt (pow x -3/2))) 1/3) (* (cbrt (pow x -1/2)) (cbrt (pow x -3/2))) (cbrt (pow x -1/2)) (pow (cbrt x) -1) (cbrt (pow x -3/2)))","x","inf"],[103.302978515625,"((- (cbrt (+ x 1)) (cbrt x)) (/ 1/3 (pow (cbrt x) 2)) (pow (cbrt x) 2) (cbrt x) (+ (cbrt x) (cbrt (+ x 1))) (cbrt (+ x 1)) (/ 1 (pow (cbrt x) 2)) (- (cbrt (+ x 1)) (cbrt x)) (* (/ 1 (pow (cbrt x) 2)) 1/3) (* (/ 1/3 (cbrt x)) (pow (cbrt x) -1)) (- (cbrt (+ x 1)) (cbrt x)) (/ 1/3 (cbrt x)) (- (cbrt (+ x 1)) (cbrt x)) (* (* (cbrt (pow x -1/2)) (cbrt (pow x -3/2))) 1/3) (* (cbrt (pow x -1/2)) (cbrt (pow x -3/2))) (cbrt (pow x -1/2)) (pow (cbrt x) -1) (cbrt (pow x -3/2)))","x","0"]],"time":181.296142578125,"type":"series"},{"count":[[48,48]],"egraph":[[0,8021,775,0.065453972],[4,7070,826,0.020200991],[3,2986,826,0.024516065],[2,1223,832,0.008798188],[1,464,832,0.0031781],[0,192,893,0.001502105]],"inputs":[["(- 1 (cbrt x))","(- (+ 1 (* 1/3 x)) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* -1/9 x)))) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))) (cbrt x))","(* 1/3 (cbrt (/ 1 (pow x 2))))","(cbrt (pow x 2))","(cbrt x)","(+ 1 (cbrt x))","(+ 1 (+ (cbrt x) (* 1/3 x)))","(+ 1 (+ (cbrt x) (* x (+ 1/3 (* -1/9 x)))))","(+ 1 (+ (cbrt x) (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))))","1","(+ 1 (* 1/3 x))","(+ 1 (* x (+ 1/3 (* -1/9 x))))","(+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9)))))","(cbrt (/ 1 (pow x 2)))","(* 1/3 (cbrt (/ 1 x)))","(pow (/ 1 x) 1/6)","(cbrt (/ 1 x))","(sqrt (/ 1 x))","(/ (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4))))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* -10/243 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(* 2 (cbrt x))","(* x (+ (* 1/3 (cbrt (/ 1 (pow x 5)))) (* 2 (cbrt (/ 1 (pow x 2))))))","(* x (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 1/3 (cbrt (/ 1 (pow x 5)))) (* 2 (cbrt (/ 1 (pow x 2)))))))","(* x (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 5/81 (cbrt (/ 1 (pow x 11)))) (+ (* 1/3 (cbrt (/ 1 (pow x 5)))) (* 2 (cbrt (/ 1 (pow x 2))))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (* 1/3 (cbrt (/ 1 (pow x 5))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 5)))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 5/81 (cbrt (/ 1 (pow x 11)))) (* 1/3 (cbrt (/ 1 (pow x 5))))))))","(* 1/3 (* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2))))","(/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 10/243 (* (cbrt (pow x 13)) (/ 1 (pow (cbrt -1) 11)))) (* 5/81 (* (cbrt (pow x 16)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(* -1 (* (cbrt (pow x 2)) (pow (cbrt -1) 3)))","(* -1 (* (cbrt x) (cbrt -1)))","(* -2 (* (cbrt x) (cbrt -1)))","(* -1 (* x (+ (* -1/3 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* 2 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))))","(* -1 (* x (+ (* -1 (/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* 2 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* 2 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))))","(* -1 (* x (+ (* -1/3 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2)))","(* 1/3 (cbrt (/ (pow (sqrt -1) 2) (pow x 2))))","(cbrt (/ (pow (sqrt -1) 2) (pow x 2)))","(* (pow (/ -1 x) 1/6) (cbrt (sqrt -1)))","(* (sqrt (/ 1 x)) (cbrt (pow (sqrt -1) 4)))"]],"memory":[[2150256,35413568]],"method":["egg-herbie"],"outputs":[["(- 1 (cbrt x))","(-.f64 #s(literal 1 binary64) (cbrt.f64 x))","(- (+ 1 (* 1/3 x)) (cbrt x))","(fma.f64 #s(literal 1/3 binary64) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x)))","(- (+ 1 (* x (+ 1/3 (* -1/9 x)))) (cbrt x))","(fma.f64 (fma.f64 #s(literal -1/9 binary64) x #s(literal 1/3 binary64)) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x)))","(- (+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))) (cbrt x))","(fma.f64 (fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64)) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x)))","(* 1/3 (cbrt (/ 1 (pow x 2))))","(*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64))","(cbrt (pow x 2))","(cbrt.f64 (*.f64 x x))","(cbrt x)","(cbrt.f64 x)","(+ 1 (cbrt x))","(+.f64 (cbrt.f64 x) #s(literal 1 binary64))","(+ 1 (+ (cbrt x) (* 1/3 x)))","(fma.f64 #s(literal 1/3 binary64) x (+.f64 (cbrt.f64 x) #s(literal 1 binary64)))","(+ 1 (+ (cbrt x) (* x (+ 1/3 (* -1/9 x)))))","(fma.f64 (fma.f64 #s(literal -1/9 binary64) x #s(literal 1/3 binary64)) x (+.f64 (cbrt.f64 x) #s(literal 1 binary64)))","(+ 1 (+ (cbrt x) (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64)) x (+.f64 (cbrt.f64 x) #s(literal 1 binary64)))","1","#s(literal 1 binary64)","(+ 1 (* 1/3 x))","(fma.f64 #s(literal 1/3 binary64) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/3 (* -1/9 x))))","(fma.f64 (fma.f64 #s(literal -1/9 binary64) x #s(literal 1/3 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64)) x #s(literal 1 binary64))","(cbrt (/ 1 (pow x 2)))","(cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))","(* 1/3 (cbrt (/ 1 x)))","(*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/3 binary64))","(pow (/ 1 x) 1/6)","(pow.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64))","(cbrt (/ 1 x))","(cbrt.f64 (/.f64 #s(literal 1 binary64) x))","(sqrt (/ 1 x))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/ (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))) (pow x 2))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x))","(/ (+ (* -1/9 (cbrt x)) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4))))) (pow x 2))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x))","(/ (+ (* -1/9 (cbrt x)) (+ (* -10/243 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(/.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -10/243 binary64) (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) (*.f64 x x))","(* 2 (cbrt x))","(*.f64 #s(literal 2 binary64) (cbrt.f64 x))","(* x (+ (* 1/3 (cbrt (/ 1 (pow x 5)))) (* 2 (cbrt (/ 1 (pow x 2))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 2 binary64))) x)","(* x (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 1/3 (cbrt (/ 1 (pow x 5)))) (* 2 (cbrt (/ 1 (pow x 2)))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal -1/9 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 2 binary64)))) x)","(* x (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 5/81 (cbrt (/ 1 (pow x 11)))) (+ (* 1/3 (cbrt (/ 1 (pow x 5)))) (* 2 (cbrt (/ 1 (pow x 2))))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 11 binary64)))) #s(literal 5/81 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal -1/9 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 2 binary64))))) x)","(* x (+ (cbrt (/ 1 (pow x 2))) (* 1/3 (cbrt (/ 1 (pow x 5))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/3 binary64) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))) x)","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 5)))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal -1/9 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/3 binary64) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)))) x)","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 5/81 (cbrt (/ 1 (pow x 11)))) (* 1/3 (cbrt (/ 1 (pow x 5))))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 11 binary64)))) #s(literal 5/81 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal -1/9 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/3 binary64) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))))) x)","(* 1/3 (* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2))))","(*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)))","(/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/.f64 (fma.f64 (/.f64 #s(literal 1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 x) (*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))))) (*.f64 x x))","(/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 1/3 binary64) (/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 10 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) #s(literal 1/9 binary64) (*.f64 (/.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) (cbrt.f64 (pow.f64 x #s(literal 7 binary64))))) (pow.f64 x #s(literal 3 binary64)))) (*.f64 x x))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 10/243 (* (cbrt (pow x 13)) (/ 1 (pow (cbrt -1) 11)))) (* 5/81 (* (cbrt (pow x 16)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 1/3 binary64) (/.f64 (fma.f64 (/.f64 #s(literal 1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 (pow.f64 x #s(literal 10 binary64))) (/.f64 (fma.f64 (/.f64 #s(literal 10/243 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 11 binary64))) (cbrt.f64 (pow.f64 x #s(literal 13 binary64))) (*.f64 (/.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) (cbrt.f64 (pow.f64 x #s(literal 16 binary64))))) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 x #s(literal 3 binary64)))) (*.f64 x x))","(* -1 (* (cbrt (pow x 2)) (pow (cbrt -1) 3)))","(cbrt.f64 (*.f64 x x))","(* -1 (* (cbrt x) (cbrt -1)))","(*.f64 (neg.f64 (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 x))","(* -2 (* (cbrt x) (cbrt -1)))","(*.f64 (*.f64 #s(literal -2 binary64) (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 x))","(* -1 (* x (+ (* -1/3 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* 2 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))) (cbrt.f64 #s(literal -1 binary64)) (*.f64 (/.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 1/3 binary64))) x)","(* -1 (* x (+ (* -1 (/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* 2 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))))","(fma.f64 (*.f64 #s(literal -2 binary64) x) (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))) (/.f64 (fma.f64 (/.f64 #s(literal 1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 x) (*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))))) (*.f64 x x)))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* 2 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))) (cbrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 1/3 binary64) (/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 10 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) #s(literal 1/9 binary64) (*.f64 (/.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) (cbrt.f64 (pow.f64 x #s(literal 7 binary64))))) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 x #s(literal 3 binary64)))) x)","(* -1 (* x (+ (* -1/3 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(*.f64 (neg.f64 x) (fma.f64 (/.f64 #s(literal -1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)))))","(* -1 (* x (+ (* -1 (/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(fma.f64 (*.f64 (neg.f64 (cbrt.f64 #s(literal -1 binary64))) x) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) (/.f64 (fma.f64 (/.f64 #s(literal 1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 x) (*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))))) (*.f64 x x)))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(*.f64 (neg.f64 x) (fma.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) (/.f64 (fma.f64 (/.f64 #s(literal -1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (/.f64 (fma.f64 (/.f64 #s(literal -1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 (pow.f64 x #s(literal 10 binary64))) (*.f64 (/.f64 #s(literal -5/81 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) (cbrt.f64 (pow.f64 x #s(literal 7 binary64))))) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 x #s(literal 3 binary64)))))","(* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2)))","(/.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))","(* 1/3 (cbrt (/ (pow (sqrt -1) 2) (pow x 2))))","(*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) x)) #s(literal 1/3 binary64))","(cbrt (/ (pow (sqrt -1) 2) (pow x 2)))","(cbrt.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) x))","(* (pow (/ -1 x) 1/6) (cbrt (sqrt -1)))","(*.f64 (cbrt.f64 (sqrt.f64 #s(literal -1 binary64))) (pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1/6 binary64)))","(* (sqrt (/ 1 x)) (cbrt (pow (sqrt -1) 4)))","(*.f64 (cbrt.f64 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))"]],"stop":[["iter limit",1],["node limit",1]],"time":226.915771484375,"type":"simplify"},{"count":[[18,650]],"egraph":[[0,8209,111,0.07002245],[3,5808,123,0.043646953],[2,686,123,0.023142613],[1,145,123,0.00372994],[0,46,125,0.001513124],[0,31,152,0.000351231]],"inputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(pow.f64 (cbrt.f64 x) #s(literal 2 binary64))","(cbrt.f64 x)","(+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","#s(approx (cbrt (+ x 1)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal 1/3 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal 1/3 binary64))","(*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))))","(/.f64 #s(literal 1/3 binary64) (cbrt.f64 x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (cbrt.f64 (pow.f64 x #s(literal -3/2 binary64)))) #s(literal 1/3 binary64)))","(*.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (cbrt.f64 (pow.f64 x #s(literal -3/2 binary64)))) #s(literal 1/3 binary64))","(*.f64 (cbrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (cbrt.f64 (pow.f64 x #s(literal -3/2 binary64))))","(cbrt.f64 (pow.f64 x #s(literal -1/2 binary64)))","(pow.f64 (cbrt.f64 x) #s(literal -1 binary64))","(cbrt.f64 (pow.f64 x #s(literal -3/2 binary64)))"]],"memory":[[1782656,50829584]],"outputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64)))","(*.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)))","(*.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1/3 binary64)) (pow.f64 x #s(literal -1/12 binary64))) (pow.f64 x #s(literal -1/12 binary64)))","(*.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal 1/3 binary64)) (pow.f64 x #s(literal -1/4 binary64))) (pow.f64 x #s(literal -1/4 binary64)))","(*.f64 (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1/3 binary64) (cbrt.f64 x)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/6 binary64)) (cbrt.f64 x)) (/.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal 3 binary64)))","(*.f64 (/.f64 (*.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal 1/3 binary64)) (pow.f64 x #s(literal 1/6 binary64))) (/.f64 (pow.f64 x #s(literal -1/6 binary64)) (pow.f64 x #s(literal 1/6 binary64))))","(*.f64 (/.f64 #s(literal -1/3 binary64) (pow.f64 x #s(literal 1/6 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) (cbrt.f64 x)) (pow.f64 x #s(literal 1/6 binary64))))","(*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 1/6 binary64))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal 1/6 binary64))))","(*.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (pow.f64 x #s(literal 1/6 binary64))) (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal 1/6 binary64))) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 1/6 binary64))))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (pow.f64 x #s(literal 1/6 binary64))))","(*.f64 (/.f64 #s(literal -1/3 binary64) (cbrt.f64 x)) (/.f64 #s(literal -1 binary64) (cbrt.f64 x)))","(*.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1/3 binary64)) (pow.f64 x #s(literal -1/6 binary64)))","(*.f64 (*.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal 1/3 binary64)) (/.f64 (pow.f64 x #s(literal -1/6 binary64)) (cbrt.f64 x)))","(*.f64 (*.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal 1/3 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (*.f64 #s(literal -1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64))","(*.f64 (pow.f64 x #s(literal -1/12 binary64)) (*.f64 (pow.f64 x #s(literal -1/12 binary64)) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1/3 binary64))))","(*.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))) #s(literal -1/3 binary64))","(*.f64 (pow.f64 x #s(literal -1/4 binary64)) (*.f64 (pow.f64 x #s(literal -1/4 binary64)) (*.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal 1/3 binary64))))","(*.f64 #s(literal -1/3 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))))","(*.f64 #s(literal -1/3 binary64) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(*.f64 (pow.f64 x #s(literal -1/6 binary64)) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (*.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)))","(*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))) #s(literal 1/3 binary64)))","(*.f64 #s(literal -1 binary64) (*.f64 #s(literal -1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64)) #s(literal 1 binary64))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64))","(*.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64)))","(pow.f64 (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))","(/.f64 (/.f64 (/.f64 #s(literal -1/3 binary64) (cbrt.f64 x)) #s(literal -1 binary64)) (cbrt.f64 x))","(/.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) (*.f64 (cbrt.f64 x) #s(literal -3 binary64)))","(/.f64 (*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) #s(literal -1 binary64)) (neg.f64 (cbrt.f64 x)))","(/.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (cbrt.f64 x) #s(literal -3 binary64)))","(/.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (pow.f64 x #s(literal 1/6 binary64))) (pow.f64 x #s(literal 1/6 binary64)))","(/.f64 (/.f64 #s(literal -1/3 binary64) (cbrt.f64 x)) (neg.f64 (cbrt.f64 x)))","(/.f64 (/.f64 #s(literal -1 binary64) (cbrt.f64 x)) (*.f64 (cbrt.f64 x) #s(literal -3 binary64)))","(/.f64 #s(literal -1/3 binary64) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal 3 binary64) (cbrt.f64 x)))","(/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (cbrt.f64 x) #s(literal -3 binary64)) (cbrt.f64 x)))","(/.f64 #s(literal -1 binary64) (*.f64 (*.f64 #s(literal 3 binary64) (cbrt.f64 x)) (neg.f64 (cbrt.f64 x))))","(/.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64)))","(/.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (cbrt.f64 x))","(/.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64)) #s(literal 1 binary64))","(/.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64))","(/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(neg.f64 (/.f64 #s(literal -1 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))))","(neg.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (neg.f64 (cbrt.f64 x))))","(neg.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1/3 binary64) (cbrt.f64 x))))","(neg.f64 (*.f64 #s(literal 1/3 binary64) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))))","(neg.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))))","(neg.f64 (*.f64 (/.f64 #s(literal -1/3 binary64) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))))","(neg.f64 (*.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))) #s(literal 1/3 binary64)))","(neg.f64 (*.f64 #s(literal -1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(-.f64 #s(literal 0 binary64) (*.f64 #s(literal -1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(exp.f64 (*.f64 (fma.f64 #s(literal 2/3 binary64) (log.f64 x) (log.f64 #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/6 binary64) (log.f64 x))) (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/6 binary64) (log.f64 x))))","(*.f64 (*.f64 (neg.f64 (cbrt.f64 x)) #s(literal -1 binary64)) (cbrt.f64 x))","(*.f64 (*.f64 (cbrt.f64 x) (pow.f64 x #s(literal 1/6 binary64))) (pow.f64 x #s(literal 1/6 binary64)))","(*.f64 (exp.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (log.f64 x)) #s(literal 2/3 binary64))) (exp.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (log.f64 x)) #s(literal 2/3 binary64))))","(*.f64 (exp.f64 (*.f64 (*.f64 #s(literal 2/3 binary64) (log.f64 x)) #s(literal 2/3 binary64))) (exp.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal 2/3 binary64))))","(*.f64 (exp.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal 2/3 binary64))) (exp.f64 (*.f64 (*.f64 #s(literal 2/3 binary64) (log.f64 x)) #s(literal 2/3 binary64))))","(*.f64 (pow.f64 x #s(literal 1/6 binary64)) (*.f64 (pow.f64 x #s(literal 1/6 binary64)) (cbrt.f64 x)))","(*.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))","(*.f64 (neg.f64 (cbrt.f64 x)) (/.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(*.f64 (neg.f64 (cbrt.f64 x)) (neg.f64 (cbrt.f64 x)))","(*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))","(*.f64 (cbrt.f64 x) (cbrt.f64 x))","(*.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(pow.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (log.f64 x)) #s(literal 1/3 binary64))","(pow.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) #s(literal 1/3 binary64)) (*.f64 (log.f64 x) #s(literal 1 binary64)))","(pow.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) #s(literal 1/3 binary64)) (log.f64 x))","(pow.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) #s(literal 1 binary64)) (log.f64 (cbrt.f64 x)))","(pow.f64 (exp.f64 #s(literal 2 binary64)) (log.f64 (cbrt.f64 x)))","(pow.f64 (exp.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (log.f64 x)) #s(literal 2/3 binary64))) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1/3 binary64))","(pow.f64 (neg.f64 (cbrt.f64 x)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))","(pow.f64 (cbrt.f64 x) #s(literal 2 binary64))","(pow.f64 x #s(literal 2/3 binary64))","(/.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))","(/.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(neg.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(cbrt.f64 (*.f64 x x))","(-.f64 #s(literal 0 binary64) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(exp.f64 (*.f64 (log.f64 (exp.f64 #s(literal 2 binary64))) (log.f64 (cbrt.f64 x))))","(exp.f64 (*.f64 (log.f64 (neg.f64 (cbrt.f64 x))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal -2/3 binary64) (log.f64 x)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) #s(literal 1/3 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal 2/3 binary64) (log.f64 x)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal 2/3 binary64)))","(exp.f64 (*.f64 #s(literal 2/3 binary64) (log.f64 x)))","(*.f64 (pow.f64 (exp.f64 #s(literal 1/3 binary64)) (*.f64 #s(literal 1/2 binary64) (log.f64 x))) (pow.f64 (exp.f64 #s(literal 1/3 binary64)) (*.f64 #s(literal 1/2 binary64) (log.f64 x))))","(*.f64 (pow.f64 (exp.f64 #s(literal 1/3 binary64)) (*.f64 #s(literal 2/3 binary64) (log.f64 x))) (pow.f64 (exp.f64 #s(literal 1/3 binary64)) (log.f64 (cbrt.f64 x))))","(*.f64 (pow.f64 (exp.f64 #s(literal 1/3 binary64)) (log.f64 (cbrt.f64 x))) (pow.f64 (exp.f64 #s(literal 1/3 binary64)) (*.f64 #s(literal 2/3 binary64) (log.f64 x))))","(*.f64 (cbrt.f64 (pow.f64 x #s(literal 1/2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 1/2 binary64))))","(*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (cbrt.f64 (cbrt.f64 x)))","(*.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 1 binary64)))","(*.f64 (exp.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (log.f64 x)) #s(literal 1/3 binary64))) (exp.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (log.f64 x)) #s(literal 1/3 binary64))))","(*.f64 (exp.f64 (*.f64 (*.f64 #s(literal 2/3 binary64) (log.f64 x)) #s(literal 1/3 binary64))) (exp.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal 1/3 binary64))))","(*.f64 (exp.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal 1/3 binary64))) (exp.f64 (*.f64 (*.f64 #s(literal 2/3 binary64) (log.f64 x)) #s(literal 1/3 binary64))))","(*.f64 (pow.f64 x #s(literal 1/6 binary64)) (/.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 x #s(literal 1/6 binary64)) (pow.f64 x #s(literal 1/6 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (cbrt.f64 x)))","(*.f64 (cbrt.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (cbrt.f64 x))","(pow.f64 (pow.f64 (exp.f64 #s(literal 1/3 binary64)) #s(literal 3 binary64)) (log.f64 (cbrt.f64 x)))","(pow.f64 (pow.f64 (exp.f64 #s(literal 1/3 binary64)) (log.f64 (cbrt.f64 x))) #s(literal 3 binary64))","(pow.f64 (pow.f64 (exp.f64 #s(literal 1/3 binary64)) #s(literal 1/3 binary64)) (*.f64 #s(literal 3 binary64) (log.f64 x)))","(pow.f64 (pow.f64 (exp.f64 #s(literal 1/3 binary64)) #s(literal 1 binary64)) (log.f64 x))","(pow.f64 (cbrt.f64 (pow.f64 x #s(literal 1/2 binary64))) #s(literal 2 binary64))","(pow.f64 (exp.f64 #s(literal 1/3 binary64)) (log.f64 x))","(pow.f64 (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64))","(pow.f64 (exp.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (log.f64 x)) #s(literal 1/3 binary64))) #s(literal 2 binary64))","(pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1/6 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (cbrt.f64 x) #s(literal 1 binary64))","(pow.f64 x #s(literal 1/3 binary64))","(/.f64 (neg.f64 (cbrt.f64 x)) #s(literal -1 binary64))","(/.f64 (cbrt.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(neg.f64 (neg.f64 (cbrt.f64 x)))","(cbrt.f64 x)","(-.f64 #s(literal 0 binary64) (neg.f64 (cbrt.f64 x)))","(exp.f64 (*.f64 (log.f64 (exp.f64 #s(literal 1/3 binary64))) (log.f64 x)))","(exp.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) (log.f64 x)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) #s(literal 1/6 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal 2/3 binary64) (log.f64 x)) #s(literal 1/2 binary64)))","(exp.f64 (log.f64 (cbrt.f64 x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 x (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)))) (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (+.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x) (-.f64 (*.f64 (cbrt.f64 x) x) (pow.f64 (*.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) #s(literal 2 binary64)))) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))))","(*.f64 (/.f64 (+.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x) (fma.f64 x x (pow.f64 (*.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) #s(literal 3 binary64)))) (fma.f64 (*.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (-.f64 (*.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (*.f64 (cbrt.f64 x) x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)))","(*.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (pow.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))))","(*.f64 (pow.f64 (fma.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (+.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x))","(*.f64 (neg.f64 (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (pow.f64 (neg.f64 (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (+.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x)) (pow.f64 (neg.f64 (fma.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))) (pow.f64 (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (/.f64 (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (fma.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))))","(*.f64 (fma.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (*.f64 (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 (fma.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (+.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x) (pow.f64 (fma.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (/.f64 (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))))","(*.f64 (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (*.f64 (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) #s(literal -1 binary64))))","(*.f64 #s(literal 1 binary64) (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)))","(pow.f64 (/.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (*.f64 (cbrt.f64 x) x) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 4 binary64))) (pow.f64 (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) #s(literal -1 binary64))) (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (*.f64 x x) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 6 binary64))) (pow.f64 (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) #s(literal -1 binary64))) (+.f64 (fma.f64 (cbrt.f64 x) x (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 4 binary64))) (pow.f64 (*.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (*.f64 x x) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 6 binary64))) (pow.f64 (fma.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (-.f64 x (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 9 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (fma.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x) (*.f64 x x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal 1 binary64)) (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x) #s(literal 1 binary64)) (fma.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))) #s(literal 2 binary64))) (fma.f64 (cbrt.f64 x) (/.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))) (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))) (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))))))))","(/.f64 (neg.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))) (neg.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x))) (neg.f64 (neg.f64 (fma.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (*.f64 (cbrt.f64 x) x) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (*.f64 x x) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 (cbrt.f64 x) x (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 4 binary64))) (pow.f64 (*.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(literal 2 binary64))) (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (*.f64 x x) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 x (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64))) (fma.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 (+.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 9 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x) (*.f64 x x)) (fma.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))) (*.f64 (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (pow.f64 (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (cbrt.f64 x) x) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 4 binary64))) (*.f64 (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 x x) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 6 binary64))) (*.f64 (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (+.f64 (fma.f64 (cbrt.f64 x) x (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 4 binary64))) (pow.f64 (*.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 x x) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 6 binary64))) (*.f64 (fma.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (-.f64 x (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)))))","(/.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)))","(/.f64 (+.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 9 binary64)) (pow.f64 x #s(literal 3 binary64))) (*.f64 (fma.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (fma.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x) (*.f64 x x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x)) (neg.f64 (fma.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))))","(/.f64 (+.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x) (fma.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(literal -1 binary64)))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))))","(neg.f64 (/.f64 (neg.f64 (+.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x)) (fma.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))) (neg.f64 (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))))))","(neg.f64 (/.f64 (+.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x) (neg.f64 (fma.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))))","(fma.f64 (pow.f64 (exp.f64 #s(literal 1/3 binary64)) (*.f64 #s(literal 1/2 binary64) (log.f64 x))) (pow.f64 (exp.f64 #s(literal 1/3 binary64)) (*.f64 #s(literal 1/2 binary64) (log.f64 x))) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (exp.f64 #s(literal 1/3 binary64)) (*.f64 #s(literal 2/3 binary64) (log.f64 x))) (pow.f64 (exp.f64 #s(literal 1/3 binary64)) (log.f64 (cbrt.f64 x))) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (exp.f64 #s(literal 1/3 binary64)) (log.f64 (cbrt.f64 x))) (pow.f64 (exp.f64 #s(literal 1/3 binary64)) (*.f64 #s(literal 2/3 binary64) (log.f64 x))) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 x (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)))) (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (neg.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))))))","(fma.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (neg.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))))))","(fma.f64 (cbrt.f64 (pow.f64 x #s(literal 1/2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 1/2 binary64))) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (cbrt.f64 (cbrt.f64 x)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 (exp.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (log.f64 x)) #s(literal 1/3 binary64))) (exp.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (log.f64 x)) #s(literal 1/3 binary64))) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 (exp.f64 (*.f64 (*.f64 #s(literal 2/3 binary64) (log.f64 x)) #s(literal 1/3 binary64))) (exp.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal 1/3 binary64))) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 (exp.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal 1/3 binary64))) (exp.f64 (*.f64 (*.f64 #s(literal 2/3 binary64) (log.f64 x)) #s(literal 1/3 binary64))) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 x #s(literal 1/6 binary64)) (/.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 x #s(literal 1/6 binary64)) (pow.f64 x #s(literal 1/6 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 #s(literal -1 binary64) (neg.f64 (cbrt.f64 x)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))))))","(fma.f64 (cbrt.f64 x) (/.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))) (neg.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))))))","(fma.f64 (cbrt.f64 x) #s(literal 1 binary64) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 #s(literal 1 binary64) (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))))","(-.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))) (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))) (neg.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))))))","(+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","(+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","#s(approx (cbrt (+ x 1)) #s(literal 1 binary64))","(*.f64 (*.f64 (pow.f64 x #s(literal -1/6 binary64)) (pow.f64 x #s(literal -1/4 binary64))) (pow.f64 x #s(literal -1/4 binary64)))","(*.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/12 binary64))) (pow.f64 x #s(literal -1/12 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/6 binary64)) (pow.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/6 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/6 binary64)) (pow.f64 x #s(literal 1/6 binary64))) (/.f64 (pow.f64 x #s(literal -1/6 binary64)) (pow.f64 x #s(literal 1/6 binary64))))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal 1/6 binary64))))","(*.f64 (cbrt.f64 (pow.f64 x #s(literal -5/4 binary64))) (pow.f64 x #s(literal -1/4 binary64)))","(*.f64 (cbrt.f64 (pow.f64 x #s(literal -1 binary64))) (cbrt.f64 (pow.f64 x #s(literal -1 binary64))))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal -2 binary64)) (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal -2 binary64)))","(*.f64 (exp.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (log.f64 x)) #s(literal -2/3 binary64))) (exp.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (log.f64 x)) #s(literal -2/3 binary64))))","(*.f64 (exp.f64 (*.f64 (*.f64 #s(literal 2/3 binary64) (log.f64 x)) #s(literal -2/3 binary64))) (exp.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal -2/3 binary64))))","(*.f64 (exp.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal -2/3 binary64))) (exp.f64 (*.f64 (*.f64 #s(literal 2/3 binary64) (log.f64 x)) #s(literal -2/3 binary64))))","(*.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 x #s(literal -5/4 binary64))) #s(literal 1/3 binary64))) (pow.f64 x #s(literal -1/4 binary64)))","(*.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 x #s(literal -1 binary64))) #s(literal 1/3 binary64))) (exp.f64 (*.f64 (log.f64 (pow.f64 x #s(literal -1 binary64))) #s(literal 1/3 binary64))))","(*.f64 (pow.f64 x #s(literal -1/12 binary64)) (*.f64 (pow.f64 x #s(literal -1/12 binary64)) (pow.f64 x #s(literal -1/2 binary64))))","(*.f64 (pow.f64 x #s(literal -1/12 binary64)) (cbrt.f64 (pow.f64 x #s(literal -7/4 binary64))))","(*.f64 (pow.f64 x #s(literal -1/12 binary64)) (exp.f64 (*.f64 (log.f64 (pow.f64 x #s(literal -7/4 binary64))) #s(literal 1/3 binary64))))","(*.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64))","(*.f64 (pow.f64 x #s(literal -1/4 binary64)) (*.f64 (pow.f64 x #s(literal -1/4 binary64)) (pow.f64 x #s(literal -1/6 binary64))))","(*.f64 (pow.f64 x #s(literal -1/6 binary64)) (/.f64 (pow.f64 x #s(literal -1/6 binary64)) (cbrt.f64 x)))","(*.f64 (pow.f64 x #s(literal -1/6 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/6 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(pow.f64 (pow.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/6 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (pow.f64 x #s(literal -1/6 binary64)) (pow.f64 x #s(literal 1/6 binary64))) #s(literal 2 binary64))","(pow.f64 (cbrt.f64 (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64))","(pow.f64 (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal -2 binary64)) #s(literal 2 binary64))","(pow.f64 (exp.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (log.f64 x)) #s(literal -2/3 binary64))) #s(literal 2 binary64))","(pow.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 x #s(literal -1 binary64))) #s(literal 1/3 binary64))) #s(literal 2 binary64))","(pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal -1/2 binary64))","(pow.f64 (*.f64 x x) #s(literal -1/3 binary64))","(pow.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/3 binary64))","(pow.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal 4 binary64))","(pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 4/3 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))","(pow.f64 (cbrt.f64 x) #s(literal -2 binary64))","(pow.f64 x #s(literal -2/3 binary64))","(/.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) (neg.f64 (cbrt.f64 x)))","(/.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (cbrt.f64 x)))","(/.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal 1/6 binary64))) (pow.f64 x #s(literal 1/6 binary64)))","(/.f64 (/.f64 #s(literal -1 binary64) (cbrt.f64 x)) (neg.f64 (cbrt.f64 x)))","(/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (cbrt.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(/.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(neg.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(cbrt.f64 (pow.f64 x #s(literal -2 binary64)))","(-.f64 #s(literal 0 binary64) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(exp.f64 (*.f64 (log.f64 (*.f64 (cbrt.f64 x) x)) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) #s(literal -1/3 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (log.f64 x)) #s(literal 4 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal -1/2 binary64)) #s(literal 4/3 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal -2 binary64) (log.f64 x)) #s(literal 1/3 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal -2/3 binary64)))","(exp.f64 (*.f64 #s(literal -2/3 binary64) (log.f64 x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64)))","(*.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)))","(*.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1/3 binary64)) (pow.f64 x #s(literal -1/12 binary64))) (pow.f64 x #s(literal -1/12 binary64)))","(*.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal 1/3 binary64)) (pow.f64 x #s(literal -1/4 binary64))) (pow.f64 x #s(literal -1/4 binary64)))","(*.f64 (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1/3 binary64) (cbrt.f64 x)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/6 binary64)) (cbrt.f64 x)) (/.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal 3 binary64)))","(*.f64 (/.f64 (*.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal 1/3 binary64)) (pow.f64 x #s(literal 1/6 binary64))) (/.f64 (pow.f64 x #s(literal -1/6 binary64)) (pow.f64 x #s(literal 1/6 binary64))))","(*.f64 (/.f64 #s(literal -1/3 binary64) (pow.f64 x #s(literal 1/6 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) (cbrt.f64 x)) (pow.f64 x #s(literal 1/6 binary64))))","(*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 1/6 binary64))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal 1/6 binary64))))","(*.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (pow.f64 x #s(literal 1/6 binary64))) (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal 1/6 binary64))) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 1/6 binary64))))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (pow.f64 x #s(literal 1/6 binary64))))","(*.f64 (/.f64 #s(literal -1/3 binary64) (cbrt.f64 x)) (/.f64 #s(literal -1 binary64) (cbrt.f64 x)))","(*.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1/3 binary64)) (pow.f64 x #s(literal -1/6 binary64)))","(*.f64 (*.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal 1/3 binary64)) (/.f64 (pow.f64 x #s(literal -1/6 binary64)) (cbrt.f64 x)))","(*.f64 (*.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal 1/3 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (*.f64 #s(literal -1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64))","(*.f64 (pow.f64 x #s(literal -1/12 binary64)) (*.f64 (pow.f64 x #s(literal -1/12 binary64)) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1/3 binary64))))","(*.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))) #s(literal -1/3 binary64))","(*.f64 (pow.f64 x #s(literal -1/4 binary64)) (*.f64 (pow.f64 x #s(literal -1/4 binary64)) (*.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal 1/3 binary64))))","(*.f64 #s(literal -1/3 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))))","(*.f64 #s(literal -1/3 binary64) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(*.f64 (pow.f64 x #s(literal -1/6 binary64)) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (*.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)))","(*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))) #s(literal 1/3 binary64)))","(*.f64 #s(literal -1 binary64) (*.f64 #s(literal -1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64)) #s(literal 1 binary64))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64))","(*.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64)))","(pow.f64 (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))","(/.f64 (/.f64 (/.f64 #s(literal -1/3 binary64) (cbrt.f64 x)) #s(literal -1 binary64)) (cbrt.f64 x))","(/.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) (*.f64 (cbrt.f64 x) #s(literal -3 binary64)))","(/.f64 (*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) #s(literal -1 binary64)) (neg.f64 (cbrt.f64 x)))","(/.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (cbrt.f64 x) #s(literal -3 binary64)))","(/.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (pow.f64 x #s(literal 1/6 binary64))) (pow.f64 x #s(literal 1/6 binary64)))","(/.f64 (/.f64 #s(literal -1/3 binary64) (cbrt.f64 x)) (neg.f64 (cbrt.f64 x)))","(/.f64 (/.f64 #s(literal -1 binary64) (cbrt.f64 x)) (*.f64 (cbrt.f64 x) #s(literal -3 binary64)))","(/.f64 #s(literal -1/3 binary64) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal 3 binary64) (cbrt.f64 x)))","(/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (cbrt.f64 x) #s(literal -3 binary64)) (cbrt.f64 x)))","(/.f64 #s(literal -1 binary64) (*.f64 (*.f64 #s(literal 3 binary64) (cbrt.f64 x)) (neg.f64 (cbrt.f64 x))))","(/.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64)))","(/.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (cbrt.f64 x))","(/.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64)) #s(literal 1 binary64))","(/.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64))","(/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(neg.f64 (/.f64 #s(literal -1 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))))","(neg.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (neg.f64 (cbrt.f64 x))))","(neg.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1/3 binary64) (cbrt.f64 x))))","(neg.f64 (*.f64 #s(literal 1/3 binary64) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))))","(neg.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))))","(neg.f64 (*.f64 (/.f64 #s(literal -1/3 binary64) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))))","(neg.f64 (*.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))) #s(literal 1/3 binary64)))","(neg.f64 (*.f64 #s(literal -1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(-.f64 #s(literal 0 binary64) (*.f64 #s(literal -1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(exp.f64 (*.f64 (fma.f64 #s(literal 2/3 binary64) (log.f64 x) (log.f64 #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)))","(*.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1/3 binary64)) (pow.f64 x #s(literal -1/12 binary64))) (pow.f64 x #s(literal -1/12 binary64)))","(*.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal 1/3 binary64)) (pow.f64 x #s(literal -1/4 binary64))) (pow.f64 x #s(literal -1/4 binary64)))","(*.f64 (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1/3 binary64) (cbrt.f64 x)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/6 binary64)) (cbrt.f64 x)) (/.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal 3 binary64)))","(*.f64 (/.f64 (*.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal 1/3 binary64)) (pow.f64 x #s(literal 1/6 binary64))) (/.f64 (pow.f64 x #s(literal -1/6 binary64)) (pow.f64 x #s(literal 1/6 binary64))))","(*.f64 (/.f64 #s(literal -1/3 binary64) (pow.f64 x #s(literal 1/6 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) (cbrt.f64 x)) (pow.f64 x #s(literal 1/6 binary64))))","(*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 1/6 binary64))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal 1/6 binary64))))","(*.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (pow.f64 x #s(literal 1/6 binary64))) (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal 1/6 binary64))) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 1/6 binary64))))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (pow.f64 x #s(literal 1/6 binary64))))","(*.f64 (/.f64 #s(literal -1/3 binary64) (cbrt.f64 x)) (/.f64 #s(literal -1 binary64) (cbrt.f64 x)))","(*.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1/3 binary64)) (pow.f64 x #s(literal -1/6 binary64)))","(*.f64 (*.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal 1/3 binary64)) (/.f64 (pow.f64 x #s(literal -1/6 binary64)) (cbrt.f64 x)))","(*.f64 (*.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal 1/3 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (*.f64 #s(literal -1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64))","(*.f64 (pow.f64 x #s(literal -1/12 binary64)) (*.f64 (pow.f64 x #s(literal -1/12 binary64)) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1/3 binary64))))","(*.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))) #s(literal -1/3 binary64))","(*.f64 (pow.f64 x #s(literal -1/4 binary64)) (*.f64 (pow.f64 x #s(literal -1/4 binary64)) (*.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal 1/3 binary64))))","(*.f64 #s(literal -1/3 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))))","(*.f64 #s(literal -1/3 binary64) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(*.f64 (pow.f64 x #s(literal -1/6 binary64)) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (*.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)))","(*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))) #s(literal 1/3 binary64)))","(*.f64 #s(literal -1 binary64) (*.f64 #s(literal -1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64)) #s(literal 1 binary64))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64))","(*.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64)))","(pow.f64 (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))","(/.f64 (/.f64 (/.f64 #s(literal -1/3 binary64) (cbrt.f64 x)) #s(literal -1 binary64)) (cbrt.f64 x))","(/.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) (*.f64 (cbrt.f64 x) #s(literal -3 binary64)))","(/.f64 (*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) #s(literal -1 binary64)) (neg.f64 (cbrt.f64 x)))","(/.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (cbrt.f64 x) #s(literal -3 binary64)))","(/.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (pow.f64 x #s(literal 1/6 binary64))) (pow.f64 x #s(literal 1/6 binary64)))","(/.f64 (/.f64 #s(literal -1/3 binary64) (cbrt.f64 x)) (neg.f64 (cbrt.f64 x)))","(/.f64 (/.f64 #s(literal -1 binary64) (cbrt.f64 x)) (*.f64 (cbrt.f64 x) #s(literal -3 binary64)))","(/.f64 #s(literal -1/3 binary64) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal 3 binary64) (cbrt.f64 x)))","(/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (cbrt.f64 x) #s(literal -3 binary64)) (cbrt.f64 x)))","(/.f64 #s(literal -1 binary64) (*.f64 (*.f64 #s(literal 3 binary64) (cbrt.f64 x)) (neg.f64 (cbrt.f64 x))))","(/.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64)))","(/.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (cbrt.f64 x))","(/.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64)) #s(literal 1 binary64))","(/.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64))","(/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(neg.f64 (/.f64 #s(literal -1 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))))","(neg.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (neg.f64 (cbrt.f64 x))))","(neg.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1/3 binary64) (cbrt.f64 x))))","(neg.f64 (*.f64 #s(literal 1/3 binary64) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))))","(neg.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))))","(neg.f64 (*.f64 (/.f64 #s(literal -1/3 binary64) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))))","(neg.f64 (*.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))) #s(literal 1/3 binary64)))","(neg.f64 (*.f64 #s(literal -1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(-.f64 #s(literal 0 binary64) (*.f64 #s(literal -1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(exp.f64 (*.f64 (fma.f64 #s(literal 2/3 binary64) (log.f64 x) (log.f64 #s(literal 3 binary64))) #s(literal -1 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64)))","(*.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal 1/3 binary64)) (pow.f64 x #s(literal -1/12 binary64))) (pow.f64 x #s(literal -1/12 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal 1/3 binary64))) (pow.f64 x #s(literal -1/6 binary64)))","(*.f64 (pow.f64 (*.f64 #s(literal 3 binary64) (cbrt.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (*.f64 #s(literal 3 binary64) (cbrt.f64 x)) #s(literal -1/2 binary64)))","(*.f64 (*.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal 1/3 binary64)) (pow.f64 x #s(literal -1/6 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (cbrt.f64 x)) #s(literal -1/3 binary64))","(*.f64 #s(literal -1/3 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (cbrt.f64 x)) #s(literal 1 binary64)))","(*.f64 #s(literal -1/3 binary64) (/.f64 #s(literal -1 binary64) (cbrt.f64 x)))","(*.f64 (pow.f64 x #s(literal -1/6 binary64)) (*.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 1/3 binary64))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1/3 binary64) (cbrt.f64 x)))","(*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) #s(literal 1 binary64))","(*.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)))","(pow.f64 (pow.f64 (*.f64 #s(literal 3 binary64) (cbrt.f64 x)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 #s(literal 3 binary64) (cbrt.f64 x)) #s(literal -1 binary64))","(/.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 1/6 binary64))) (pow.f64 x #s(literal 1/6 binary64)))","(/.f64 #s(literal -1/3 binary64) (neg.f64 (cbrt.f64 x)))","(/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 3 binary64))","(/.f64 #s(literal -1 binary64) (*.f64 (cbrt.f64 x) #s(literal -3 binary64)))","(/.f64 #s(literal 1/3 binary64) (cbrt.f64 x))","(/.f64 #s(literal 1 binary64) (*.f64 #s(literal 3 binary64) (cbrt.f64 x)))","(neg.f64 (*.f64 (/.f64 #s(literal -1/3 binary64) (cbrt.f64 x)) #s(literal 1 binary64)))","(neg.f64 (/.f64 #s(literal -1/3 binary64) (cbrt.f64 x)))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1/3 binary64) (cbrt.f64 x)))","(exp.f64 (*.f64 (log.f64 (*.f64 #s(literal 3 binary64) (cbrt.f64 x))) #s(literal -1 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64)))","(*.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)))","(*.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1/3 binary64)) (pow.f64 x #s(literal -1/12 binary64))) (pow.f64 x #s(literal -1/12 binary64)))","(*.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal 1/3 binary64)) (pow.f64 x #s(literal -1/4 binary64))) (pow.f64 x #s(literal -1/4 binary64)))","(*.f64 (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1/3 binary64) (cbrt.f64 x)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/6 binary64)) (cbrt.f64 x)) (/.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal 3 binary64)))","(*.f64 (/.f64 (*.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal 1/3 binary64)) (pow.f64 x #s(literal 1/6 binary64))) (/.f64 (pow.f64 x #s(literal -1/6 binary64)) (pow.f64 x #s(literal 1/6 binary64))))","(*.f64 (/.f64 #s(literal -1/3 binary64) (pow.f64 x #s(literal 1/6 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) (cbrt.f64 x)) (pow.f64 x #s(literal 1/6 binary64))))","(*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 1/6 binary64))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal 1/6 binary64))))","(*.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (pow.f64 x #s(literal 1/6 binary64))) (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal 1/6 binary64))) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 1/6 binary64))))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (pow.f64 x #s(literal 1/6 binary64))))","(*.f64 (/.f64 #s(literal -1/3 binary64) (cbrt.f64 x)) (/.f64 #s(literal -1 binary64) (cbrt.f64 x)))","(*.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1/3 binary64)) (pow.f64 x #s(literal -1/6 binary64)))","(*.f64 (*.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal 1/3 binary64)) (/.f64 (pow.f64 x #s(literal -1/6 binary64)) (cbrt.f64 x)))","(*.f64 (*.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal 1/3 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (*.f64 #s(literal -1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64))","(*.f64 (pow.f64 x #s(literal -1/12 binary64)) (*.f64 (pow.f64 x #s(literal -1/12 binary64)) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1/3 binary64))))","(*.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))) #s(literal -1/3 binary64))","(*.f64 (pow.f64 x #s(literal -1/4 binary64)) (*.f64 (pow.f64 x #s(literal -1/4 binary64)) (*.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal 1/3 binary64))))","(*.f64 #s(literal -1/3 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))))","(*.f64 #s(literal -1/3 binary64) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(*.f64 (pow.f64 x #s(literal -1/6 binary64)) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (*.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)))","(*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))) #s(literal 1/3 binary64)))","(*.f64 #s(literal -1 binary64) (*.f64 #s(literal -1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64)) #s(literal 1 binary64))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64))","(*.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64)))","(pow.f64 (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))","(/.f64 (/.f64 (/.f64 #s(literal -1/3 binary64) (cbrt.f64 x)) #s(literal -1 binary64)) (cbrt.f64 x))","(/.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) (*.f64 (cbrt.f64 x) #s(literal -3 binary64)))","(/.f64 (*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) #s(literal -1 binary64)) (neg.f64 (cbrt.f64 x)))","(/.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (cbrt.f64 x) #s(literal -3 binary64)))","(/.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (pow.f64 x #s(literal 1/6 binary64))) (pow.f64 x #s(literal 1/6 binary64)))","(/.f64 (/.f64 #s(literal -1/3 binary64) (cbrt.f64 x)) (neg.f64 (cbrt.f64 x)))","(/.f64 (/.f64 #s(literal -1 binary64) (cbrt.f64 x)) (*.f64 (cbrt.f64 x) #s(literal -3 binary64)))","(/.f64 #s(literal -1/3 binary64) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal 3 binary64) (cbrt.f64 x)))","(/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (cbrt.f64 x) #s(literal -3 binary64)) (cbrt.f64 x)))","(/.f64 #s(literal -1 binary64) (*.f64 (*.f64 #s(literal 3 binary64) (cbrt.f64 x)) (neg.f64 (cbrt.f64 x))))","(/.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64)))","(/.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (cbrt.f64 x))","(/.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64)) #s(literal 1 binary64))","(/.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64))","(/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(neg.f64 (/.f64 #s(literal -1 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))))","(neg.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (neg.f64 (cbrt.f64 x))))","(neg.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1/3 binary64) (cbrt.f64 x))))","(neg.f64 (*.f64 #s(literal 1/3 binary64) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))))","(neg.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))))","(neg.f64 (*.f64 (/.f64 #s(literal -1/3 binary64) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))))","(neg.f64 (*.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))) #s(literal 1/3 binary64)))","(neg.f64 (*.f64 #s(literal -1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(-.f64 #s(literal 0 binary64) (*.f64 #s(literal -1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(exp.f64 (*.f64 (fma.f64 #s(literal 2/3 binary64) (log.f64 x) (log.f64 #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 x #s(literal -1/6 binary64)) (pow.f64 x #s(literal -1/4 binary64))) (pow.f64 x #s(literal -1/4 binary64)))","(*.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/12 binary64))) (pow.f64 x #s(literal -1/12 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/6 binary64)) (pow.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/6 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/6 binary64)) (pow.f64 x #s(literal 1/6 binary64))) (/.f64 (pow.f64 x #s(literal -1/6 binary64)) (pow.f64 x #s(literal 1/6 binary64))))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal 1/6 binary64))))","(*.f64 (cbrt.f64 (pow.f64 x #s(literal -5/4 binary64))) (pow.f64 x #s(literal -1/4 binary64)))","(*.f64 (cbrt.f64 (pow.f64 x #s(literal -1 binary64))) (cbrt.f64 (pow.f64 x #s(literal -1 binary64))))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal -2 binary64)) (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal -2 binary64)))","(*.f64 (exp.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (log.f64 x)) #s(literal -2/3 binary64))) (exp.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (log.f64 x)) #s(literal -2/3 binary64))))","(*.f64 (exp.f64 (*.f64 (*.f64 #s(literal 2/3 binary64) (log.f64 x)) #s(literal -2/3 binary64))) (exp.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal -2/3 binary64))))","(*.f64 (exp.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal -2/3 binary64))) (exp.f64 (*.f64 (*.f64 #s(literal 2/3 binary64) (log.f64 x)) #s(literal -2/3 binary64))))","(*.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 x #s(literal -5/4 binary64))) #s(literal 1/3 binary64))) (pow.f64 x #s(literal -1/4 binary64)))","(*.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 x #s(literal -1 binary64))) #s(literal 1/3 binary64))) (exp.f64 (*.f64 (log.f64 (pow.f64 x #s(literal -1 binary64))) #s(literal 1/3 binary64))))","(*.f64 (pow.f64 x #s(literal -1/12 binary64)) (*.f64 (pow.f64 x #s(literal -1/12 binary64)) (pow.f64 x #s(literal -1/2 binary64))))","(*.f64 (pow.f64 x #s(literal -1/12 binary64)) (cbrt.f64 (pow.f64 x #s(literal -7/4 binary64))))","(*.f64 (pow.f64 x #s(literal -1/12 binary64)) (exp.f64 (*.f64 (log.f64 (pow.f64 x #s(literal -7/4 binary64))) #s(literal 1/3 binary64))))","(*.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64))","(*.f64 (pow.f64 x #s(literal -1/4 binary64)) (*.f64 (pow.f64 x #s(literal -1/4 binary64)) (pow.f64 x #s(literal -1/6 binary64))))","(*.f64 (pow.f64 x #s(literal -1/6 binary64)) (/.f64 (pow.f64 x #s(literal -1/6 binary64)) (cbrt.f64 x)))","(*.f64 (pow.f64 x #s(literal -1/6 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/6 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(pow.f64 (pow.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/6 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (pow.f64 x #s(literal -1/6 binary64)) (pow.f64 x #s(literal 1/6 binary64))) #s(literal 2 binary64))","(pow.f64 (cbrt.f64 (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64))","(pow.f64 (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal -2 binary64)) #s(literal 2 binary64))","(pow.f64 (exp.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (log.f64 x)) #s(literal -2/3 binary64))) #s(literal 2 binary64))","(pow.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 x #s(literal -1 binary64))) #s(literal 1/3 binary64))) #s(literal 2 binary64))","(pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal -1/2 binary64))","(pow.f64 (*.f64 x x) #s(literal -1/3 binary64))","(pow.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/3 binary64))","(pow.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal 4 binary64))","(pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 4/3 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))","(pow.f64 (cbrt.f64 x) #s(literal -2 binary64))","(pow.f64 x #s(literal -2/3 binary64))","(/.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) (neg.f64 (cbrt.f64 x)))","(/.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (cbrt.f64 x)))","(/.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal 1/6 binary64))) (pow.f64 x #s(literal 1/6 binary64)))","(/.f64 (/.f64 #s(literal -1 binary64) (cbrt.f64 x)) (neg.f64 (cbrt.f64 x)))","(/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (cbrt.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(/.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(neg.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(cbrt.f64 (pow.f64 x #s(literal -2 binary64)))","(-.f64 #s(literal 0 binary64) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(exp.f64 (*.f64 (log.f64 (*.f64 (cbrt.f64 x) x)) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) #s(literal -1/3 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (log.f64 x)) #s(literal 4 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal -1/2 binary64)) #s(literal 4/3 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal -2 binary64) (log.f64 x)) #s(literal 1/3 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal -2/3 binary64)))","(exp.f64 (*.f64 #s(literal -2/3 binary64) (log.f64 x)))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal -1/6 binary64)) (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal -1/6 binary64)))","(*.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal -1/6 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -1/6 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1/6 binary64)) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal -1/6 binary64)))","(*.f64 (pow.f64 x #s(literal -1/12 binary64)) (pow.f64 x #s(literal -1/12 binary64)))","(*.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/6 binary64)))","(pow.f64 (pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 2 binary64)) #s(literal 1/6 binary64))","(pow.f64 (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal -1/6 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 x #s(literal -1/12 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 x #s(literal -1/4 binary64)) #s(literal 2/3 binary64))","(pow.f64 (*.f64 x x) #s(literal -1/12 binary64))","(pow.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal 1/9 binary64))","(pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1/3 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal -1/4 binary64))","(pow.f64 (cbrt.f64 x) #s(literal -1/2 binary64))","(pow.f64 x #s(literal -1/6 binary64))","(cbrt.f64 (pow.f64 x #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 2 binary64))) #s(literal 1/6 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 x #s(literal -1/12 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal -1/4 binary64) (log.f64 x)) #s(literal 2/3 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) #s(literal -1/12 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal -3/2 binary64)) #s(literal 1/9 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal 2/3 binary64) (log.f64 x)) #s(literal -1/4 binary64)))","(exp.f64 (*.f64 #s(literal -1/6 binary64) (log.f64 x)))","(*.f64 (pow.f64 (exp.f64 #s(literal -1 binary64)) (*.f64 #s(literal 1/6 binary64) (log.f64 x))) (pow.f64 (exp.f64 #s(literal -1 binary64)) (*.f64 #s(literal 1/6 binary64) (log.f64 x))))","(*.f64 (pow.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal -1 binary64)))","(*.f64 (exp.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (log.f64 x)) #s(literal -1/3 binary64))) (exp.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (log.f64 x)) #s(literal -1/3 binary64))))","(*.f64 (exp.f64 (*.f64 (*.f64 #s(literal 2/3 binary64) (log.f64 x)) #s(literal -1/3 binary64))) (exp.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal -1/3 binary64))))","(*.f64 (exp.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal -1/3 binary64))) (exp.f64 (*.f64 (*.f64 #s(literal 2/3 binary64) (log.f64 x)) #s(literal -1/3 binary64))))","(*.f64 (pow.f64 x #s(literal -1/12 binary64)) (pow.f64 x #s(literal -1/4 binary64)))","(*.f64 (pow.f64 x #s(literal -1/4 binary64)) (pow.f64 x #s(literal -1/12 binary64)))","(*.f64 (pow.f64 x #s(literal -1/6 binary64)) (pow.f64 x #s(literal -1/6 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cbrt.f64 x)))","(*.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(pow.f64 (pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 x)) #s(literal 1/3 binary64))","(pow.f64 (pow.f64 (exp.f64 #s(literal -1 binary64)) #s(literal 1/3 binary64)) (*.f64 (log.f64 x) #s(literal 1 binary64)))","(pow.f64 (pow.f64 (exp.f64 #s(literal -1 binary64)) #s(literal 1/3 binary64)) (log.f64 x))","(pow.f64 (pow.f64 (exp.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) (log.f64 (cbrt.f64 x)))","(pow.f64 (pow.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal -1 binary64)) #s(literal 2 binary64))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (cbrt.f64 x)))","(pow.f64 (pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 2 binary64)) #s(literal 1/3 binary64))","(pow.f64 (exp.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (log.f64 x)) #s(literal -1/3 binary64))) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal -1/6 binary64))","(pow.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 2/3 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (cbrt.f64 x) #s(literal -1 binary64))","(pow.f64 x #s(literal -1/3 binary64))","(/.f64 (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal 1/6 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (cbrt.f64 x)))","(/.f64 #s(literal 1 binary64) (cbrt.f64 x))","(neg.f64 (/.f64 #s(literal -1 binary64) (cbrt.f64 x)))","(cbrt.f64 (pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (exp.f64 #s(literal -1 binary64))) (log.f64 (cbrt.f64 x))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 2 binary64))) #s(literal 1/3 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) #s(literal -1/6 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal -1/2 binary64)) #s(literal 2/3 binary64)))","(exp.f64 (fma.f64 #s(literal -1/6 binary64) (log.f64 x) (*.f64 #s(literal -1/6 binary64) (log.f64 x))))","(exp.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (log.f64 x)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal 2/3 binary64) (log.f64 x)) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal -1/3 binary64)))","(exp.f64 (*.f64 #s(literal -1/3 binary64) (log.f64 x)))","(*.f64 (pow.f64 (exp.f64 #s(literal -1/2 binary64)) (*.f64 #s(literal 1/2 binary64) (log.f64 x))) (pow.f64 (exp.f64 #s(literal -1/2 binary64)) (*.f64 #s(literal 1/2 binary64) (log.f64 x))))","(*.f64 (pow.f64 (exp.f64 #s(literal -1/2 binary64)) (*.f64 #s(literal 2/3 binary64) (log.f64 x))) (pow.f64 (exp.f64 #s(literal -1/2 binary64)) (log.f64 (cbrt.f64 x))))","(*.f64 (pow.f64 (exp.f64 #s(literal -1/2 binary64)) (log.f64 (cbrt.f64 x))) (pow.f64 (exp.f64 #s(literal -1/2 binary64)) (*.f64 #s(literal 2/3 binary64) (log.f64 x))))","(*.f64 (*.f64 (pow.f64 x #s(literal -1/4 binary64)) (pow.f64 x #s(literal -1/8 binary64))) (pow.f64 x #s(literal -1/8 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal -1/4 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 x #s(literal -1/4 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/8 binary64)) (*.f64 (pow.f64 x #s(literal -1/8 binary64)) (pow.f64 x #s(literal -1/4 binary64))))","(*.f64 (pow.f64 x #s(literal -1/4 binary64)) (pow.f64 x #s(literal -1/4 binary64)))","(*.f64 (pow.f64 x #s(literal -1/6 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1/6 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(pow.f64 (pow.f64 (exp.f64 #s(literal -1/2 binary64)) #s(literal 3 binary64)) (log.f64 (cbrt.f64 x)))","(pow.f64 (pow.f64 (exp.f64 #s(literal -1/2 binary64)) (log.f64 (cbrt.f64 x))) #s(literal 3 binary64))","(pow.f64 (pow.f64 (exp.f64 #s(literal -1/2 binary64)) #s(literal 1/3 binary64)) (*.f64 #s(literal 3 binary64) (log.f64 x)))","(pow.f64 (pow.f64 (exp.f64 #s(literal -1/2 binary64)) #s(literal 1 binary64)) (log.f64 x))","(pow.f64 (pow.f64 (pow.f64 x #s(literal -1/4 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64))","(pow.f64 (exp.f64 #s(literal -1/2 binary64)) (log.f64 x))","(pow.f64 (pow.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal 2 binary64)) #s(literal 1/6 binary64))","(pow.f64 (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 x #s(literal -1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 x #s(literal -3/4 binary64)) #s(literal 2/3 binary64))","(pow.f64 (*.f64 x x) #s(literal -1/4 binary64))","(pow.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal 1/3 binary64))","(pow.f64 (cbrt.f64 x) #s(literal -3/2 binary64))","(pow.f64 x #s(literal -1/2 binary64))","(cbrt.f64 (pow.f64 x #s(literal -3/2 binary64)))","(exp.f64 (*.f64 (log.f64 (exp.f64 #s(literal -1/2 binary64))) (log.f64 x)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal 2 binary64))) #s(literal 1/6 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal -3/4 binary64) (log.f64 x)) #s(literal 2/3 binary64)))","(exp.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal -3/2 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal -1/4 binary64) (log.f64 x)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) #s(literal -1/4 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal -1/2 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":278.05517578125,"type":"rewrite"},{"compiler":[[14324,2215]],"memory":[[8157824,63212736]],"time":78.755859375,"type":"eval"},{"alts":[["(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/3 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (cbrt.f64 x)))","fresh",60.127678427313434,"binary64"],["(fma.f64 (/.f64 #s(literal 1 binary64) (cbrt.f64 (-.f64 x #s(literal 1 binary64)))) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (cbrt.f64 x)))","fresh",60.80765191753776,"binary64"],["(/.f64 (-.f64 (*.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))) (*.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) x)) (*.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))))","fresh",61.25373770383933,"binary64"],["(/.f64 (-.f64 (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (cbrt.f64 x)) (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) x)))","fresh",61.72247830212508,"binary64"],["(-.f64 (cbrt.f64 (/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))) (cbrt.f64 x))","next",61.967273376523224,"binary64"],["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","done",60.29627493697794,"binary64"],["(+.f64 (pow.f64 x #s(literal 1/3 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","next",60.63917809431693,"binary64"],["(+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","done",60.63917809431693,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (pow.f64 (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","fresh",1.3521759417246741,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x)))","fresh",48.2336463974876,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x)))","next",48.35623713611538,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -10/243 binary64) (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) (*.f64 x x)))","fresh",48.129191207924485,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64)))","fresh",1.2055923848474557,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (cbrt.f64 x)))","fresh",1.2997111204621226,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))))","fresh",1.244359850941054,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 (pow.f64 (cbrt.f64 (pow.f64 x #s(literal 1/2 binary64))) #s(literal 2 binary64)) #s(literal 2 binary64))))","fresh",1.7060615936607408,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","done",1.2756098509252476,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 2/3 binary64))))","fresh",6.679953116375525,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))))","fresh",1.3336161986254655,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 (*.f64 x x))))","fresh",31.642643190705492,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (cbrt.f64 x) #s(literal -3 binary64)) (cbrt.f64 x))))","fresh",1.2447299193201389,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal 1/3 binary64)))","fresh",1.401042250319517,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal -1/2 binary64)) #s(literal 1/3 binary64)))","next",17.830632207492886,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (*.f64 x x) #s(literal -1/3 binary64)) #s(literal 1/3 binary64)))","fresh",33.91365880519614,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (cbrt.f64 (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1/3 binary64)))","fresh",1.2137176143583828,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64)))","fresh",1.3065661497832552,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 x #s(literal -2/3 binary64)) #s(literal 1/3 binary64)))","fresh",6.679088646846171,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal 1/3 binary64)))","done",1.3361949095516972,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 2/3 binary64))) #s(literal 1/3 binary64)))","fresh",6.680831104061996,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))) #s(literal 1/3 binary64)))","fresh",1.3329524290885812,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1 binary64) (*.f64 #s(literal 3 binary64) (cbrt.f64 x))) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))))","fresh",1.247972399767446,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1 binary64) (cbrt.f64 (*.f64 x x))) #s(literal 1/3 binary64)))","fresh",31.65790314934597,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (/.f64 #s(literal 1 binary64) (cbrt.f64 x))))","fresh",1.3140849486096557,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (*.f64 (pow.f64 x #s(literal -1/12 binary64)) (pow.f64 x #s(literal -1/4 binary64)))))","fresh",3.865940010479786,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) #s(approx (pow (cbrt x) -1) (cbrt.f64 (/.f64 #s(literal 1 binary64) x)))))","next",1.1179763057319239,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (*.f64 (pow.f64 x #s(literal -1/8 binary64)) (*.f64 (pow.f64 x #s(literal -1/8 binary64)) (pow.f64 x #s(literal -1/4 binary64))))) #s(literal 1/3 binary64)))","fresh",1.340806829130142,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal -1/2 binary64))) #s(approx (cbrt (pow x -3/2)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) #s(literal 1/3 binary64)))","fresh",1.2000075557319416,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal -5/4 binary64))) (pow.f64 x #s(literal -1/4 binary64))) #s(literal 1/3 binary64)))","fresh",11.454688399431534,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (exp.f64 (*.f64 (log.f64 (*.f64 (cbrt.f64 x) x)) #s(literal -1/2 binary64))) #s(literal 1/3 binary64)))","fresh",20.987646149890452,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","done",30.90374653482893,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))","fresh",31.574547025454315,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 #s(approx (/ 1/3 (cbrt x)) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))))","fresh",1.20463358140415,"binary64"]],"compiler":[[14,11],[15,11],[31,15],[26,16],[25,12],[7,6],[10,9],[9,8],[18,15],[30,22],[22,17],[38,28],[14,12],[15,11],[16,14],[18,15],[14,12],[13,11],[16,14],[14,11],[17,13],[16,14],[16,13],[15,12],[16,14],[14,12],[13,11],[16,14],[15,13],[18,15],[19,15],[16,13],[17,13],[20,16],[22,17],[26,19],[24,20],[18,15],[18,15],[16,13],[16,13],[24,19],[14,11],[15,11],[31,15],[26,16],[25,12],[10,9],[18,15],[30,22],[22,17],[38,28],[14,12],[15,11],[16,14],[18,15],[13,11],[16,14],[14,11],[17,13],[16,14],[16,13],[15,12],[16,14],[14,12],[13,11],[15,13],[18,15],[19,15],[16,13],[17,13],[20,16],[22,17],[26,19],[24,20],[18,15],[18,15],[16,13],[24,19]],"count":[[686,42]],"kept":[{"done":[2,2],"fresh":[17,14],"new":[662,23],"picked":[5,3]}],"memory":[[-7133376,44211856]],"min-error":[[0.04946007069442183,"binary64"]],"time":42.677001953125,"type":"prune"},{"egraph":[[0,8215,230,0.114752916],[5,5400,236,0.030291424],[4,1372,236,0.020061132],[3,545,236,0.006035348],[2,195,254,0.002262318],[1,107,278,0.000955457],[0,67,286,0.000617423],[0,41,298,0.000455245]],"inputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) #s(approx (pow (cbrt x) -1) (cbrt.f64 (/.f64 #s(literal 1 binary64) x)))))","(*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) #s(approx (pow (cbrt x) -1) (cbrt.f64 (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal 1/3 binary64) (cbrt.f64 x))","#s(literal 1/3 binary64)","(cbrt.f64 x)","x","#s(approx (pow (cbrt x) -1) (cbrt.f64 (/.f64 #s(literal 1 binary64) x)))","(cbrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","(+.f64 (pow.f64 x #s(literal 1/3 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(pow.f64 x #s(literal 1/3 binary64))","x","#s(literal 1/3 binary64)","#s(approx (cbrt (+ x 1)) #s(literal 1 binary64))","#s(literal 1 binary64)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal -1/2 binary64)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal -1/2 binary64)) #s(literal 1/3 binary64))","(pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal -1/2 binary64))","(*.f64 (cbrt.f64 x) x)","(cbrt.f64 x)","x","#s(literal -1/2 binary64)","#s(literal 1/3 binary64)","(-.f64 (cbrt.f64 (/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))) (cbrt.f64 x))","(cbrt.f64 (/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64)))","(*.f64 x x)","x","(-.f64 x #s(literal 1 binary64))","#s(literal 1 binary64)","(*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))","(cbrt.f64 x)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x)))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x))","(fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))","(cbrt.f64 (pow.f64 x #s(literal 4 binary64)))","(pow.f64 x #s(literal 4 binary64))","x","#s(literal 4 binary64)","#s(literal 1/3 binary64)","(*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))","#s(literal -1/9 binary64)","(cbrt.f64 x)","(*.f64 x x)"]],"locations":[["(cbrt.f64 (pow.f64 x #s(literal 4 binary64)))","cost-diff",0],["(fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))","cost-diff",0],["(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x))","cost-diff",0],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x)))","cost-diff",0],["(*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))","cost-diff",1],["(*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","cost-diff",2],["(-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","cost-diff",3],["(/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","cost-diff",12],["(*.f64 (cbrt.f64 x) x)","cost-diff",0],["(pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal -1/2 binary64))","cost-diff",0],["(*.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal -1/2 binary64)) #s(literal 1/3 binary64))","cost-diff",0],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal -1/2 binary64)) #s(literal 1/3 binary64)))","cost-diff",0],["#s(approx (cbrt (+ x 1)) #s(literal 1 binary64))","cost-diff",0],["(+.f64 (pow.f64 x #s(literal 1/3 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","cost-diff",0],["(pow.f64 x #s(literal 1/3 binary64))","cost-diff","Infinite"],["(cbrt.f64 x)","cost-diff",0],["(/.f64 #s(literal 1/3 binary64) (cbrt.f64 x))","cost-diff",0],["(*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) #s(approx (pow (cbrt x) -1) (cbrt.f64 (/.f64 #s(literal 1 binary64) x))))","cost-diff",0],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) #s(approx (pow (cbrt x) -1) (cbrt.f64 (/.f64 #s(literal 1 binary64) x)))))","cost-diff",0]],"memory":[[-3640944,49522240]],"method":["egg-herbie"],"outputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) #s(approx (pow (cbrt x) -1) (cbrt.f64 (/.f64 #s(literal 1 binary64) x)))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 #s(approx (pow (cbrt x) -1) (cbrt.f64 (/.f64 #s(literal 1 binary64) x))) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x))))","(*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) #s(approx (pow (cbrt x) -1) (cbrt.f64 (/.f64 #s(literal 1 binary64) x))))","(*.f64 #s(approx (pow (cbrt x) -1) (cbrt.f64 (/.f64 #s(literal 1 binary64) x))) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)))","(/.f64 #s(literal 1/3 binary64) (cbrt.f64 x))","#s(literal 1/3 binary64)","(cbrt.f64 x)","x","#s(approx (pow (cbrt x) -1) (cbrt.f64 (/.f64 #s(literal 1 binary64) x)))","(cbrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","(+.f64 (pow.f64 x #s(literal 1/3 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","(pow.f64 x #s(literal 1/3 binary64))","(cbrt.f64 x)","x","#s(literal 1/3 binary64)","#s(approx (cbrt (+ x 1)) #s(literal 1 binary64))","#s(literal 1 binary64)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal -1/2 binary64)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal -1/2 binary64)) #s(literal 1/3 binary64))","(pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal -1/2 binary64))","(*.f64 (cbrt.f64 x) x)","(cbrt.f64 x)","x","#s(literal -1/2 binary64)","#s(literal 1/3 binary64)","(-.f64 (cbrt.f64 (/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))) (cbrt.f64 x))","(-.f64 (cbrt.f64 (-.f64 x #s(literal -1 binary64))) (cbrt.f64 x))","(cbrt.f64 (/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))","(cbrt.f64 (-.f64 x #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(-.f64 x #s(literal -1 binary64))","(-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))","(*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64)))","(*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(*.f64 x x)","x","(-.f64 x #s(literal 1 binary64))","#s(literal 1 binary64)","(*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 x #s(literal 1 binary64))","(*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))","(fma.f64 (-.f64 x #s(literal 2 binary64)) x #s(literal 1 binary64))","(cbrt.f64 x)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x)))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x))","(fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))","(cbrt.f64 (pow.f64 x #s(literal 4 binary64)))","(pow.f64 x #s(literal 4 binary64))","x","#s(literal 4 binary64)","#s(literal 1/3 binary64)","(*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))","#s(literal -1/9 binary64)","(cbrt.f64 x)","(*.f64 x x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":332.25,"type":"simplify"},{"compiler":[[249,37]],"locations":[["(*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))","accuracy",0.3359375],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x)))","accuracy",0.41081269579987845],["(cbrt.f64 (pow.f64 x #s(literal 4 binary64)))","accuracy",28.650248193421547],["(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x))","accuracy",31.438929956997253],["(cbrt.f64 x)","accuracy",0.0625],["(*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64)))","accuracy",0.078125],["(/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","accuracy",40.628934286466524],["(-.f64 (cbrt.f64 (/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))) (cbrt.f64 x))","accuracy",60.29627493697794],["(*.f64 (cbrt.f64 x) x)","accuracy",0.17578125],["(*.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal -1/2 binary64)) #s(literal 1/3 binary64))","accuracy",0.36328125],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal -1/2 binary64)) #s(literal 1/3 binary64)))","accuracy",0.696096278712372],["(pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal -1/2 binary64))","accuracy",16.921551944762758],["(+.f64 (pow.f64 x #s(literal 1/3 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","accuracy",0.00390625],["(pow.f64 x #s(literal 1/3 binary64))","accuracy",5.1331579215680065],["#s(approx (cbrt (+ x 1)) #s(literal 1 binary64))","accuracy",59.040660249906146],["(cbrt.f64 (/.f64 #s(literal 1 binary64) x))","accuracy",0.12890625],["(*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) #s(approx (pow (cbrt x) -1) (cbrt.f64 (/.f64 #s(literal 1 binary64) x))))","accuracy",0.34765625],["(/.f64 #s(literal 1/3 binary64) (cbrt.f64 x))","accuracy",0.41015625],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) #s(approx (pow (cbrt x) -1) (cbrt.f64 (/.f64 #s(literal 1 binary64) x)))))","accuracy",0.696096278712372]],"memory":[[9358432,65307136]],"mixsample":[[0.033935546875,"ival-cbrt",1600],[10.834716796875,"ival-div",0],[17.869384765625,"adjust",800],[0.00390625,"ival-sub",1600],[0.898681640625,"ival-div",400],[0.224365234375,"ival-sub",2000],[0.326904296875,"ival-mult",2000],[0.010986328125,"ival-div",1600],[0.126708984375,"ival-assert",0],[7.346435546875,"ival-sub",0],[1.05322265625,"ival-sub",400],[3.744873046875,"ival-cbrt",400],[11.380126953125,"const",0],[1.0732421875,"ival-cbrt",2000],[3.782958984375,"ival-cbrt",800],[44.69189453125,"ival-pow",0],[3.609375,"adjust",2000],[1.78125,"ival-mult",800],[6.578857421875,"ival-add",0],[1.406494140625,"ival-mult",400],[1.287353515625,"ival-sub",800],[24.67236328125,"ival-mult",0],[0.010009765625,"ival-mult",1600],[0.166259765625,"ival-add",2000],[10.888427734375,"ival-cbrt",0],[0.85888671875,"ival-div",800],[0.903076171875,"ival-add",400],[0.225830078125,"ival-true",0],[0.425048828125,"ival-div",2000],[0.801513671875,"ival-add",800],[0.62255859375,"exact",0]],"outcomes":[[143.4580078125,1,"valid",198],[55.637451171875,2,"valid",54],[1.39013671875,0,"valid",4]],"time":240.381103515625,"type":"localize"},{"count":[[23,78]],"inputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) #s(approx (pow (cbrt x) -1) (cbrt.f64 (/.f64 #s(literal 1 binary64) x)))))","(*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) #s(approx (pow (cbrt x) -1) (cbrt.f64 (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal 1/3 binary64) (cbrt.f64 x))","(cbrt.f64 x)","(pow.f64 x #s(literal 1/3 binary64))","(+.f64 (pow.f64 x #s(literal 1/3 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","#s(approx (cbrt (+ x 1)) #s(literal 1 binary64))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal -1/2 binary64)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal -1/2 binary64)) #s(literal 1/3 binary64))","(pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal -1/2 binary64))","(*.f64 (cbrt.f64 x) x)","(/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x)))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x))","(fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))","(cbrt.f64 (pow.f64 x #s(literal 4 binary64)))","(cbrt.f64 (/.f64 #s(literal 1 binary64) x))","(-.f64 (cbrt.f64 (/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))) (cbrt.f64 x))","(*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64)))","(*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))"]],"memory":[[577968,24676928]],"outputs":[["(- 1 (cbrt x))","(- (+ 1 (* 1/3 x)) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* -1/9 x)))) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))) (cbrt x))","(* 1/3 (cbrt (/ 1 (pow x 2))))","(* 1/3 (cbrt (/ 1 x)))","(cbrt x)","(+ 1 (cbrt x))","(+ 1 (+ (cbrt x) (* 1/3 x)))","(+ 1 (+ (cbrt x) (* x (+ 1/3 (* -1/9 x)))))","(+ 1 (+ (cbrt x) (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))))","1","(+ 1 (* 1/3 x))","(+ 1 (* x (+ 1/3 (* -1/9 x))))","(+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9)))))","(cbrt (/ 1 (pow x 2)))","(cbrt (pow x 4))","(+ 1 x)","(+ 1 (* -1 x))","(+ 1 (* x (- (* -1 x) 1)))","(+ 1 (* x (- (* x (- x 1)) 1)))","-1","(- x 1)","(+ 1 (* -2 x))","(+ 1 (* x (- x 2)))","(* -1/9 (cbrt (/ 1 (pow x 5))))","(/ (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))) (pow x 2))","(* -1/9 (cbrt x))","(+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4))))","(cbrt (/ 1 x))","(* -1 (pow x 2))","(* (pow x 2) (- x 1))","(/ (+ (* -1/9 (cbrt x)) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4))))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* -10/243 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(* 2 (cbrt x))","(* x (+ (* 1/3 (cbrt (/ 1 (pow x 5)))) (* 2 (cbrt (/ 1 (pow x 2))))))","(* x (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 1/3 (cbrt (/ 1 (pow x 5)))) (* 2 (cbrt (/ 1 (pow x 2)))))))","(* x (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 5/81 (cbrt (/ 1 (pow x 11)))) (+ (* 1/3 (cbrt (/ 1 (pow x 5)))) (* 2 (cbrt (/ 1 (pow x 2))))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (* 1/3 (cbrt (/ 1 (pow x 5))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 5)))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 5/81 (cbrt (/ 1 (pow x 11)))) (* 1/3 (cbrt (/ 1 (pow x 5))))))))","x","(* x (+ 1 (/ 1 x)))","(pow x 3)","(* (pow x 3) (- 1 (/ 1 x)))","(* (pow x 3) (+ 1 (* -1 (/ (+ 1 (/ 1 x)) x))))","(* (pow x 3) (- (+ 1 (/ 1 (pow x 3))) (+ (/ 1 x) (/ 1 (pow x 2)))))","(* x (- 1 (/ 1 x)))","(pow x 2)","(* (pow x 2) (- 1 (* 2 (/ 1 x))))","(* (pow x 2) (- (+ 1 (/ 1 (pow x 2))) (* 2 (/ 1 x))))","(+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(* 1/3 (cbrt (pow x 4)))","(* (pow x 2) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* 1/3 (* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2))))","(/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 10/243 (* (cbrt (pow x 13)) (/ 1 (pow (cbrt -1) 11)))) (* 5/81 (* (cbrt (pow x 16)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(* -1 (* (cbrt x) (cbrt -1)))","(* -2 (* (cbrt x) (cbrt -1)))","(* -1 (* x (+ (* -1/3 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* 2 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))))","(* -1 (* x (+ (* -1 (/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* 2 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* 2 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))))","(* -1 (* x (+ (* -1/3 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* 1/3 (* (cbrt (/ 1 (pow x 2))) (* (sqrt (/ 1 (cbrt -1))) (sqrt -1))))","(* (cbrt (/ 1 (pow x 2))) (* (sqrt (/ 1 (cbrt -1))) (sqrt -1)))","(* -1 (* (cbrt (pow x 4)) (cbrt -1)))","(* -1 (* (pow x 3) (- (/ 1 x) 1)))","(* -1 (* (pow x 3) (- (+ (/ 1 x) (/ 1 (pow x 2))) 1)))","(* -1 (* (pow x 3) (- (* -1 (/ (- (* -1 (/ (- 1 (/ 1 x)) x)) 1) x)) 1)))","(* -1 (* x (- (/ 1 x) 1)))","(* (pow x 2) (+ 1 (* -1 (/ (- 2 (/ 1 x)) x))))","(+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(* (pow x 2) (+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* (cbrt (/ 1 x)) (pow (cbrt -1) 2))","(* 1/9 (* (cbrt x) (cbrt -1)))"]],"series":[[15.49609375,"((- (cbrt (+ x 1)) (cbrt x)) (* (/ 1/3 (cbrt x)) (pow (cbrt x) -1)) (/ 1/3 (cbrt x)) (cbrt x) (pow x 1/3) (+ (pow x 1/3) (cbrt (+ x 1))) (cbrt (+ x 1)) (- (cbrt (+ x 1)) (cbrt x)) (* (pow (* (cbrt x) x) -1/2) 1/3) (pow (* (cbrt x) x) -1/2) (* (cbrt x) x) (/ (- (* (* x x) (- x 1)) (* (- x 1) 1)) (* (- x 1) (- x 1))) (- (* (* x x) (- x 1)) (* (- x 1) 1)) (* (- x 1) 1) (* (- x 1) (- x 1)) (- (cbrt (+ x 1)) (cbrt x)) (/ (+ (* (cbrt (pow x 4)) 1/3) (* -1/9 (cbrt x))) (* x x)) (+ (* (cbrt (pow x 4)) 1/3) (* -1/9 (cbrt x))) (cbrt (pow x 4)) (cbrt (/ 1 x)) (- (cbrt (/ (- (* (* x x) (- x 1)) (* (- x 1) 1)) (* (- x 1) (- x 1)))) (cbrt x)) (* (* x x) (- x 1)) (* -1/9 (cbrt x)))","x","-inf"],[8.94091796875,"((- (cbrt (+ x 1)) (cbrt x)) (* (/ 1/3 (cbrt x)) (pow (cbrt x) -1)) (/ 1/3 (cbrt x)) (cbrt x) (pow x 1/3) (+ (pow x 1/3) (cbrt (+ x 1))) (cbrt (+ x 1)) (- (cbrt (+ x 1)) (cbrt x)) (* (pow (* (cbrt x) x) -1/2) 1/3) (pow (* (cbrt x) x) -1/2) (* (cbrt x) x) (/ (- (* (* x x) (- x 1)) (* (- x 1) 1)) (* (- x 1) (- x 1))) (- (* (* x x) (- x 1)) (* (- x 1) 1)) (* (- x 1) 1) (* (- x 1) (- x 1)) (- (cbrt (+ x 1)) (cbrt x)) (/ (+ (* (cbrt (pow x 4)) 1/3) (* -1/9 (cbrt x))) (* x x)) (+ (* (cbrt (pow x 4)) 1/3) (* -1/9 (cbrt x))) (cbrt (pow x 4)) (cbrt (/ 1 x)) (- (cbrt (/ (- (* (* x x) (- x 1)) (* (- x 1) 1)) (* (- x 1) (- x 1)))) (cbrt x)) (* (* x x) (- x 1)) (* -1/9 (cbrt x)))","x","inf"],[9.9150390625,"((- (cbrt (+ x 1)) (cbrt x)) (* (/ 1/3 (cbrt x)) (pow (cbrt x) -1)) (/ 1/3 (cbrt x)) (cbrt x) (pow x 1/3) (+ (pow x 1/3) (cbrt (+ x 1))) (cbrt (+ x 1)) (- (cbrt (+ x 1)) (cbrt x)) (* (pow (* (cbrt x) x) -1/2) 1/3) (pow (* (cbrt x) x) -1/2) (* (cbrt x) x) (/ (- (* (* x x) (- x 1)) (* (- x 1) 1)) (* (- x 1) (- x 1))) (- (* (* x x) (- x 1)) (* (- x 1) 1)) (* (- x 1) 1) (* (- x 1) (- x 1)) (- (cbrt (+ x 1)) (cbrt x)) (/ (+ (* (cbrt (pow x 4)) 1/3) (* -1/9 (cbrt x))) (* x x)) (+ (* (cbrt (pow x 4)) 1/3) (* -1/9 (cbrt x))) (cbrt (pow x 4)) (cbrt (/ 1 x)) (- (cbrt (/ (- (* (* x x) (- x 1)) (* (- x 1) 1)) (* (- x 1) (- x 1)))) (cbrt x)) (* (* x x) (- x 1)) (* -1/9 (cbrt x)))","x","0"]],"time":35.904052734375,"type":"series"},{"count":[[78,77]],"egraph":[[0,8320,1016,0.087866645],[3,4250,1082,0.030271211],[2,1855,1104,0.015343725],[1,659,1111,0.006322748],[0,249,1167,0.001993363]],"inputs":[["(- 1 (cbrt x))","(- (+ 1 (* 1/3 x)) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* -1/9 x)))) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))) (cbrt x))","(* 1/3 (cbrt (/ 1 (pow x 2))))","(* 1/3 (cbrt (/ 1 x)))","(cbrt x)","(+ 1 (cbrt x))","(+ 1 (+ (cbrt x) (* 1/3 x)))","(+ 1 (+ (cbrt x) (* x (+ 1/3 (* -1/9 x)))))","(+ 1 (+ (cbrt x) (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))))","1","(+ 1 (* 1/3 x))","(+ 1 (* x (+ 1/3 (* -1/9 x))))","(+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9)))))","(cbrt (/ 1 (pow x 2)))","(cbrt (pow x 4))","(+ 1 x)","(+ 1 (* -1 x))","(+ 1 (* x (- (* -1 x) 1)))","(+ 1 (* x (- (* x (- x 1)) 1)))","-1","(- x 1)","(+ 1 (* -2 x))","(+ 1 (* x (- x 2)))","(* -1/9 (cbrt (/ 1 (pow x 5))))","(/ (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))) (pow x 2))","(* -1/9 (cbrt x))","(+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4))))","(cbrt (/ 1 x))","(* -1 (pow x 2))","(* (pow x 2) (- x 1))","(/ (+ (* -1/9 (cbrt x)) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4))))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* -10/243 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(* 2 (cbrt x))","(* x (+ (* 1/3 (cbrt (/ 1 (pow x 5)))) (* 2 (cbrt (/ 1 (pow x 2))))))","(* x (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 1/3 (cbrt (/ 1 (pow x 5)))) (* 2 (cbrt (/ 1 (pow x 2)))))))","(* x (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 5/81 (cbrt (/ 1 (pow x 11)))) (+ (* 1/3 (cbrt (/ 1 (pow x 5)))) (* 2 (cbrt (/ 1 (pow x 2))))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (* 1/3 (cbrt (/ 1 (pow x 5))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 5)))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 5/81 (cbrt (/ 1 (pow x 11)))) (* 1/3 (cbrt (/ 1 (pow x 5))))))))","x","(* x (+ 1 (/ 1 x)))","(pow x 3)","(* (pow x 3) (- 1 (/ 1 x)))","(* (pow x 3) (+ 1 (* -1 (/ (+ 1 (/ 1 x)) x))))","(* (pow x 3) (- (+ 1 (/ 1 (pow x 3))) (+ (/ 1 x) (/ 1 (pow x 2)))))","(* x (- 1 (/ 1 x)))","(pow x 2)","(* (pow x 2) (- 1 (* 2 (/ 1 x))))","(* (pow x 2) (- (+ 1 (/ 1 (pow x 2))) (* 2 (/ 1 x))))","(+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(* 1/3 (cbrt (pow x 4)))","(* (pow x 2) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* 1/3 (* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2))))","(/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 10/243 (* (cbrt (pow x 13)) (/ 1 (pow (cbrt -1) 11)))) (* 5/81 (* (cbrt (pow x 16)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(* -1 (* (cbrt x) (cbrt -1)))","(* -2 (* (cbrt x) (cbrt -1)))","(* -1 (* x (+ (* -1/3 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* 2 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))))","(* -1 (* x (+ (* -1 (/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* 2 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* 2 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))))","(* -1 (* x (+ (* -1/3 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* 1/3 (* (cbrt (/ 1 (pow x 2))) (* (sqrt (/ 1 (cbrt -1))) (sqrt -1))))","(* (cbrt (/ 1 (pow x 2))) (* (sqrt (/ 1 (cbrt -1))) (sqrt -1)))","(* -1 (* (cbrt (pow x 4)) (cbrt -1)))","(* -1 (* (pow x 3) (- (/ 1 x) 1)))","(* -1 (* (pow x 3) (- (+ (/ 1 x) (/ 1 (pow x 2))) 1)))","(* -1 (* (pow x 3) (- (* -1 (/ (- (* -1 (/ (- 1 (/ 1 x)) x)) 1) x)) 1)))","(* -1 (* x (- (/ 1 x) 1)))","(* (pow x 2) (+ 1 (* -1 (/ (- 2 (/ 1 x)) x))))","(+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(* (pow x 2) (+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* (cbrt (/ 1 x)) (pow (cbrt -1) 2))","(* 1/9 (* (cbrt x) (cbrt -1)))"]],"memory":[[-8183504,41383024]],"method":["egg-herbie"],"outputs":[["(- 1 (cbrt x))","(-.f64 #s(literal 1 binary64) (cbrt.f64 x))","(- (+ 1 (* 1/3 x)) (cbrt x))","(fma.f64 #s(literal 1/3 binary64) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x)))","(- (+ 1 (* x (+ 1/3 (* -1/9 x)))) (cbrt x))","(fma.f64 (fma.f64 #s(literal -1/9 binary64) x #s(literal 1/3 binary64)) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x)))","(- (+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))) (cbrt x))","(fma.f64 (fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64)) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x)))","(* 1/3 (cbrt (/ 1 (pow x 2))))","(*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))","(* 1/3 (cbrt (/ 1 x)))","(*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/3 binary64))","(cbrt x)","(cbrt.f64 x)","(+ 1 (cbrt x))","(+.f64 (cbrt.f64 x) #s(literal 1 binary64))","(+ 1 (+ (cbrt x) (* 1/3 x)))","(fma.f64 #s(literal 1/3 binary64) x (+.f64 (cbrt.f64 x) #s(literal 1 binary64)))","(+ 1 (+ (cbrt x) (* x (+ 1/3 (* -1/9 x)))))","(fma.f64 (fma.f64 #s(literal -1/9 binary64) x #s(literal 1/3 binary64)) x (+.f64 (cbrt.f64 x) #s(literal 1 binary64)))","(+ 1 (+ (cbrt x) (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64)) x (+.f64 (cbrt.f64 x) #s(literal 1 binary64)))","1","#s(literal 1 binary64)","(+ 1 (* 1/3 x))","(fma.f64 #s(literal 1/3 binary64) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/3 (* -1/9 x))))","(fma.f64 (fma.f64 #s(literal -1/9 binary64) x #s(literal 1/3 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64)) x #s(literal 1 binary64))","(cbrt (/ 1 (pow x 2)))","(cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))","(cbrt (pow x 4))","(cbrt.f64 (pow.f64 x #s(literal 4 binary64)))","(+ 1 x)","(-.f64 x #s(literal -1 binary64))","(+ 1 (* -1 x))","(-.f64 #s(literal 1 binary64) x)","(+ 1 (* x (- (* -1 x) 1)))","(fma.f64 (-.f64 #s(literal -1 binary64) x) x #s(literal 1 binary64))","(+ 1 (* x (- (* x (- x 1)) 1)))","(fma.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64))","-1","#s(literal -1 binary64)","(- x 1)","(-.f64 x #s(literal 1 binary64))","(+ 1 (* -2 x))","(fma.f64 #s(literal -2 binary64) x #s(literal 1 binary64))","(+ 1 (* x (- x 2)))","(fma.f64 (-.f64 x #s(literal 2 binary64)) x #s(literal 1 binary64))","(* -1/9 (cbrt (/ 1 (pow x 5))))","(*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64))","(/ (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))) (pow x 2))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x))","(* -1/9 (cbrt x))","(*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))","(+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4))))","(fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))","(cbrt (/ 1 x))","(cbrt.f64 (/.f64 #s(literal 1 binary64) x))","(* -1 (pow x 2))","(*.f64 (neg.f64 x) x)","(* (pow x 2) (- x 1))","(*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(/ (+ (* -1/9 (cbrt x)) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4))))) (pow x 2))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x))","(/ (+ (* -1/9 (cbrt x)) (+ (* -10/243 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(/.f64 (fma.f64 #s(literal -10/243 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) (*.f64 x x))","(* 2 (cbrt x))","(*.f64 #s(literal 2 binary64) (cbrt.f64 x))","(* x (+ (* 1/3 (cbrt (/ 1 (pow x 5)))) (* 2 (cbrt (/ 1 (pow x 2))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 2 binary64))) x)","(* x (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 1/3 (cbrt (/ 1 (pow x 5)))) (* 2 (cbrt (/ 1 (pow x 2)))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal -1/9 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 2 binary64)))) x)","(* x (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 5/81 (cbrt (/ 1 (pow x 11)))) (+ (* 1/3 (cbrt (/ 1 (pow x 5)))) (* 2 (cbrt (/ 1 (pow x 2))))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 11 binary64)))) #s(literal 5/81 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal -1/9 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 2 binary64))))) x)","(* x (+ (cbrt (/ 1 (pow x 2))) (* 1/3 (cbrt (/ 1 (pow x 5))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/3 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) x)","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 5)))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal -1/9 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/3 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))))) x)","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 5/81 (cbrt (/ 1 (pow x 11)))) (* 1/3 (cbrt (/ 1 (pow x 5))))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 11 binary64)))) #s(literal 5/81 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal -1/9 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/3 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))))) x)","x","(* x (+ 1 (/ 1 x)))","(-.f64 x #s(literal -1 binary64))","(pow x 3)","(pow.f64 x #s(literal 3 binary64))","(* (pow x 3) (- 1 (/ 1 x)))","(*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(* (pow x 3) (+ 1 (* -1 (/ (+ 1 (/ 1 x)) x))))","(*.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal -1 binary64)) x)","(* (pow x 3) (- (+ 1 (/ 1 (pow x 3))) (+ (/ 1 x) (/ 1 (pow x 2)))))","(fma.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64))","(* x (- 1 (/ 1 x)))","(-.f64 x #s(literal 1 binary64))","(pow x 2)","(*.f64 x x)","(* (pow x 2) (- 1 (* 2 (/ 1 x))))","(*.f64 (fma.f64 (/.f64 #s(literal -2 binary64) x) x x) x)","(* (pow x 2) (- (+ 1 (/ 1 (pow x 2))) (* 2 (/ 1 x))))","(fma.f64 (fma.f64 (/.f64 #s(literal -2 binary64) x) x x) x #s(literal 1 binary64))","(+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))","(* 1/3 (cbrt (pow x 4)))","(*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64))","(* (pow x 2) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))) (*.f64 x x))","(* 1/3 (* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2))))","(*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))))","(/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/.f64 (fma.f64 (/.f64 #s(literal 1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 x) (*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))))) (*.f64 x x))","(/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/.f64 (fma.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) #s(literal 5/81 binary64) (*.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 10 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) #s(literal 1/9 binary64))) (pow.f64 x #s(literal 3 binary64)))) (*.f64 x x))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 10/243 (* (cbrt (pow x 13)) (/ 1 (pow (cbrt -1) 11)))) (* 5/81 (* (cbrt (pow x 16)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/.f64 (fma.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 10 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) #s(literal 1/9 binary64) (/.f64 (fma.f64 (/.f64 #s(literal 10/243 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 11 binary64))) (cbrt.f64 (pow.f64 x #s(literal 13 binary64))) (*.f64 (/.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) (cbrt.f64 (pow.f64 x #s(literal 16 binary64))))) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 x #s(literal 3 binary64)))) (*.f64 x x))","(* -1 (* (cbrt x) (cbrt -1)))","(*.f64 (neg.f64 (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 x))","(* -2 (* (cbrt x) (cbrt -1)))","(*.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal -2 binary64)) (cbrt.f64 x))","(* -1 (* x (+ (* -1/3 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* 2 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) (cbrt.f64 #s(literal -1 binary64)) (*.f64 (/.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 1/3 binary64))) x)","(* -1 (* x (+ (* -1 (/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* 2 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))))","(*.f64 (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal -2 binary64) (/.f64 (fma.f64 (/.f64 #s(literal 1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 x) (*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))))) (pow.f64 x #s(literal 3 binary64)))) x)","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* 2 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) (cbrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) #s(literal 5/81 binary64) (*.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 10 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) #s(literal 1/9 binary64))) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 x #s(literal 3 binary64)))) x)","(* -1 (* x (+ (* -1/3 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))))) (neg.f64 x))","(* -1 (* x (+ (* -1 (/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(*.f64 (fma.f64 (neg.f64 (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 (fma.f64 (/.f64 #s(literal 1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 x) (*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))))) (pow.f64 x #s(literal 3 binary64)))) x)","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(*.f64 (fma.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 (fma.f64 #s(literal -1/3 binary64) (/.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (/.f64 (fma.f64 (/.f64 #s(literal -1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 (pow.f64 x #s(literal 10 binary64))) (*.f64 (/.f64 #s(literal -5/81 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) (cbrt.f64 (pow.f64 x #s(literal 7 binary64))))) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 x))","(* 1/3 (* (cbrt (/ 1 (pow x 2))) (* (sqrt (/ 1 (cbrt -1))) (sqrt -1))))","(*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (cbrt.f64 #s(literal -1 binary64))))) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))","(* (cbrt (/ 1 (pow x 2))) (* (sqrt (/ 1 (cbrt -1))) (sqrt -1)))","(*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (cbrt.f64 #s(literal -1 binary64)))))","(* -1 (* (cbrt (pow x 4)) (cbrt -1)))","(*.f64 (neg.f64 (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))))","(* -1 (* (pow x 3) (- (/ 1 x) 1)))","(*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(* -1 (* (pow x 3) (- (+ (/ 1 x) (/ 1 (pow x 2))) 1)))","(*.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal -1 binary64)) x)","(* -1 (* (pow x 3) (- (* -1 (/ (- (* -1 (/ (- 1 (/ 1 x)) x)) 1) x)) 1)))","(fma.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64))","(* -1 (* x (- (/ 1 x) 1)))","(-.f64 x #s(literal 1 binary64))","(* (pow x 2) (+ 1 (* -1 (/ (- 2 (/ 1 x)) x))))","(fma.f64 (fma.f64 (/.f64 #s(literal -2 binary64) x) x x) x #s(literal 1 binary64))","(+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 1/9 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))","(* (pow x 2) (+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(*.f64 (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 1/9 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))) (*.f64 x x))","(* (cbrt (/ 1 x)) (pow (cbrt -1) 2))","(*.f64 (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) x)))","(* 1/9 (* (cbrt x) (cbrt -1)))","(*.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 1/9 binary64)) (cbrt.f64 x))"]],"stop":[["iter limit",1],["node limit",1]],"time":276.927978515625,"type":"simplify"},{"count":[[23,983]],"egraph":[[0,9067,165,0.087789841],[2,1618,182,0.035160285],[1,246,209,0.00631163],[0,67,215,0.002040856],[0,41,231,0.00043779]],"inputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) #s(approx (pow (cbrt x) -1) (cbrt.f64 (/.f64 #s(literal 1 binary64) x)))))","(*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) #s(approx (pow (cbrt x) -1) (cbrt.f64 (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal 1/3 binary64) (cbrt.f64 x))","(cbrt.f64 x)","(pow.f64 x #s(literal 1/3 binary64))","(+.f64 (pow.f64 x #s(literal 1/3 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","#s(approx (cbrt (+ x 1)) #s(literal 1 binary64))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal -1/2 binary64)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal -1/2 binary64)) #s(literal 1/3 binary64))","(pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal -1/2 binary64))","(*.f64 (cbrt.f64 x) x)","(/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x)))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x))","(fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))","(cbrt.f64 (pow.f64 x #s(literal 4 binary64)))","(cbrt.f64 (/.f64 #s(literal 1 binary64) x))","(-.f64 (cbrt.f64 (/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))) (cbrt.f64 x))","(*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64)))","(*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))"]],"memory":[[-2947920,70628944]],"outputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 #s(approx (pow (cbrt x) -1) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x))))","(*.f64 (/.f64 #s(literal -1/3 binary64) (pow.f64 x #s(literal 1/6 binary64))) (/.f64 #s(approx (pow (cbrt x) -1) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) (neg.f64 (pow.f64 x #s(literal 1/6 binary64)))))","(*.f64 (/.f64 #s(approx (pow (cbrt x) -1) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) (neg.f64 (pow.f64 x #s(literal 1/6 binary64)))) (/.f64 #s(literal -1/3 binary64) (pow.f64 x #s(literal 1/6 binary64))))","(*.f64 (/.f64 #s(approx (pow (cbrt x) -1) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal -1/3 binary64) (cbrt.f64 x)))","(*.f64 (/.f64 #s(approx (pow (cbrt x) -1) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) (cbrt.f64 x)) #s(literal 1/3 binary64))","(*.f64 (/.f64 #s(approx (pow (cbrt x) -1) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) (pow.f64 x #s(literal 1/6 binary64))) (/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 1/3 binary64))))","(*.f64 (/.f64 #s(approx (pow (cbrt x) -1) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) (pow.f64 x #s(literal 1/6 binary64))) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 1/6 binary64))))","(*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 1/6 binary64))) (/.f64 #s(approx (pow (cbrt x) -1) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) (pow.f64 x #s(literal 1/6 binary64))))","(*.f64 (*.f64 #s(approx (pow (cbrt x) -1) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) #s(literal 1/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1/6 binary64)) (/.f64 #s(approx (pow (cbrt x) -1) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 1/3 binary64))))","(*.f64 #s(approx (pow (cbrt x) -1) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (/.f64 #s(approx (pow (cbrt x) -1) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) #s(literal 3 binary64)))","(*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) #s(approx (pow (cbrt x) -1) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))))","(*.f64 #s(literal 1/3 binary64) (/.f64 #s(approx (pow (cbrt x) -1) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) (cbrt.f64 x)))","(*.f64 #s(literal 1/3 binary64) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(approx (pow (cbrt x) -1) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))))","(pow.f64 (/.f64 (cbrt.f64 x) (*.f64 #s(approx (pow (cbrt x) -1) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) #s(literal 1/3 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (*.f64 #s(approx (pow (cbrt x) -1) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) #s(literal 1/3 binary64)) (pow.f64 x #s(literal 1/6 binary64)))) (neg.f64 (pow.f64 x #s(literal 1/6 binary64))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/3 binary64) #s(approx (pow (cbrt x) -1) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))))) (neg.f64 (neg.f64 (cbrt.f64 x))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) #s(approx (pow (cbrt x) -1) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))))) (neg.f64 (*.f64 (cbrt.f64 x) #s(literal 3 binary64))))","(/.f64 (neg.f64 (*.f64 #s(approx (pow (cbrt x) -1) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) #s(literal -1/3 binary64))) (neg.f64 (neg.f64 (cbrt.f64 x))))","(/.f64 (neg.f64 (*.f64 #s(approx (pow (cbrt x) -1) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (cbrt.f64 x) #s(literal 3 binary64))))","(/.f64 (neg.f64 (neg.f64 (*.f64 #s(approx (pow (cbrt x) -1) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) #s(literal 1/3 binary64)))) (neg.f64 (neg.f64 (cbrt.f64 x))))","(/.f64 (neg.f64 #s(approx (pow (cbrt x) -1) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))) (neg.f64 (*.f64 (cbrt.f64 x) #s(literal 3 binary64))))","(/.f64 (/.f64 (*.f64 #s(approx (pow (cbrt x) -1) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) #s(literal 1/3 binary64)) (pow.f64 x #s(literal 1/6 binary64))) (pow.f64 x #s(literal 1/6 binary64)))","(/.f64 (*.f64 #s(literal -1/3 binary64) #s(approx (pow (cbrt x) -1) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))) (neg.f64 (cbrt.f64 x)))","(/.f64 (*.f64 #s(literal 1 binary64) #s(approx (pow (cbrt x) -1) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))) (*.f64 (cbrt.f64 x) #s(literal 3 binary64)))","(/.f64 (*.f64 #s(approx (pow (cbrt x) -1) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) #s(literal -1/3 binary64)) (neg.f64 (cbrt.f64 x)))","(/.f64 (*.f64 #s(approx (pow (cbrt x) -1) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) #s(literal 1 binary64)) (*.f64 (cbrt.f64 x) #s(literal 3 binary64)))","(/.f64 (neg.f64 (*.f64 #s(approx (pow (cbrt x) -1) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) #s(literal 1/3 binary64))) (neg.f64 (cbrt.f64 x)))","(/.f64 (*.f64 #s(approx (pow (cbrt x) -1) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) #s(literal 1/3 binary64)) (cbrt.f64 x))","(/.f64 #s(approx (pow (cbrt x) -1) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) (*.f64 (cbrt.f64 x) #s(literal 3 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (cbrt.f64 x) (*.f64 #s(approx (pow (cbrt x) -1) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) #s(literal 1/3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (cbrt.f64 x) (*.f64 #s(approx (pow (cbrt x) -1) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) #s(literal 1/3 binary64))))","(*.f64 (*.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal -1/6 binary64))) (pow.f64 x #s(literal -1/6 binary64)))","(*.f64 #s(literal -1/3 binary64) (pow.f64 (neg.f64 (cbrt.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1/6 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 1/3 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 1/3 binary64))","(*.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)))","(pow.f64 (/.f64 (*.f64 (cbrt.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (cbrt.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 1/6 binary64)))) (neg.f64 (pow.f64 x #s(literal 1/6 binary64))))","(/.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 1/6 binary64))) (pow.f64 x #s(literal 1/6 binary64)))","(/.f64 #s(literal -1/3 binary64) (neg.f64 (neg.f64 (neg.f64 (cbrt.f64 x)))))","(/.f64 #s(literal -1/3 binary64) (neg.f64 (cbrt.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (cbrt.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (cbrt.f64 x) #s(literal 3 binary64))))","(/.f64 #s(literal 1/3 binary64) (neg.f64 (neg.f64 (cbrt.f64 x))))","(/.f64 #s(literal 1/3 binary64) (cbrt.f64 x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (cbrt.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (cbrt.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (cbrt.f64 x) #s(literal 3 binary64)))","(neg.f64 (/.f64 #s(literal -1/3 binary64) (cbrt.f64 x)))","(exp.f64 (*.f64 (log.f64 (*.f64 (cbrt.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (cbrt.f64 (pow.f64 x #s(literal 1/2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 1/2 binary64))))","(*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (cbrt.f64 (cbrt.f64 x)))","(*.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal 1/3 binary64)) (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal 1/3 binary64)) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 x #s(literal 1/6 binary64)) (pow.f64 x #s(literal 1/6 binary64)))","(*.f64 (cbrt.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (cbrt.f64 x))","(pow.f64 (exp.f64 #s(literal 1/3 binary64)) (log.f64 x))","(pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1/6 binary64))","(pow.f64 (cbrt.f64 x) #s(literal 1 binary64))","(pow.f64 x #s(literal 1/3 binary64))","(/.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 #s(literal -1 binary64)))","(/.f64 (neg.f64 (cbrt.f64 x)) #s(literal -1 binary64))","(/.f64 (cbrt.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(cbrt.f64 x)","(exp.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) (log.f64 x)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal 1/6 binary64)))","(exp.f64 (*.f64 (log.f64 (*.f64 x x)) #s(literal 1/6 binary64)))","(exp.f64 (log.f64 (cbrt.f64 x)))","(*.f64 (cbrt.f64 (pow.f64 x #s(literal 1/2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 1/2 binary64))))","(*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (cbrt.f64 (cbrt.f64 x)))","(*.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal 1/3 binary64)) (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal 1/3 binary64)) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 x #s(literal 1/6 binary64)) (pow.f64 x #s(literal 1/6 binary64)))","(*.f64 (cbrt.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (cbrt.f64 x))","(pow.f64 (exp.f64 #s(literal 1/3 binary64)) (log.f64 x))","(pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1/6 binary64))","(pow.f64 (cbrt.f64 x) #s(literal 1 binary64))","(pow.f64 x #s(literal 1/3 binary64))","(/.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 #s(literal -1 binary64)))","(/.f64 (neg.f64 (cbrt.f64 x)) #s(literal -1 binary64))","(/.f64 (cbrt.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(cbrt.f64 x)","(exp.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) (log.f64 x)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal 1/6 binary64)))","(exp.f64 (*.f64 (log.f64 (*.f64 x x)) #s(literal 1/6 binary64)))","(exp.f64 (log.f64 (cbrt.f64 x)))","(*.f64 (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))) (pow.f64 (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x) (pow.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x)) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x))) (neg.f64 (neg.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))) (*.f64 (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (*.f64 (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x)) (neg.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (*.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x)) (neg.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))))","(/.f64 (+.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x) (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (*.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)))))","(/.f64 (+.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x) (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x)))","(fma.f64 (cbrt.f64 (pow.f64 x #s(literal 1/2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 1/2 binary64))) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (cbrt.f64 (cbrt.f64 x)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal 1/3 binary64)) (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal 1/3 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 1/3 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (cbrt.f64 x) #s(literal 1/3 binary64)) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1/3 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 x #s(literal 1/6 binary64)) (pow.f64 x #s(literal 1/6 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 (cbrt.f64 x) #s(literal 1 binary64) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 #s(literal 1 binary64) (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))))","(-.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))) (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))))","(+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","(+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","#s(approx (cbrt (+ x 1)) #s(literal 1 binary64))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/6 binary64)) #s(literal 1/3 binary64)))","(*.f64 (*.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal -1/6 binary64))) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/6 binary64)) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/6 binary64)) #s(literal 1/3 binary64))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)))","(*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal 1/3 binary64) (pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/6 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal 7/6 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/12 binary64)))","(*.f64 (pow.f64 x #s(literal -1/12 binary64)) (pow.f64 (pow.f64 x #s(literal 7/6 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/6 binary64)))","(*.f64 (pow.f64 x #s(literal -1/6 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(pow.f64 (exp.f64 #s(literal -1/2 binary64)) (*.f64 #s(literal 4/3 binary64) (log.f64 x)))","(pow.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) #s(literal -1/4 binary64))","(pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/6 binary64))","(pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64))","(pow.f64 x #s(literal -2/3 binary64))","(exp.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) (log.f64 x)) #s(literal -1/4 binary64) (*.f64 (*.f64 #s(literal 4/3 binary64) (log.f64 x)) #s(literal -1/4 binary64))))","(exp.f64 (fma.f64 (log.f64 x) #s(literal -1/2 binary64) (*.f64 (log.f64 (cbrt.f64 x)) #s(literal -1/2 binary64))))","(exp.f64 (fma.f64 (log.f64 (cbrt.f64 x)) #s(literal -1/2 binary64) (*.f64 (log.f64 x) #s(literal -1/2 binary64))))","(exp.f64 (*.f64 (*.f64 (*.f64 #s(literal 4/3 binary64) (log.f64 x)) #s(literal -1/4 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64))) #s(literal -1/4 binary64)))","(exp.f64 (*.f64 (neg.f64 (log.f64 (cbrt.f64 x))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal 4/3 binary64) (log.f64 x)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal 4/3 binary64)) (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal 4/3 binary64)))","(*.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 4/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 4/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal 4/3 binary64)) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 4/3 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal 4/3 binary64)) (*.f64 (cbrt.f64 x) x))","(*.f64 (pow.f64 x #s(literal 7/6 binary64)) (pow.f64 x #s(literal 1/6 binary64)))","(*.f64 (pow.f64 x #s(literal 1/6 binary64)) (pow.f64 x #s(literal 7/6 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(*.f64 (*.f64 (cbrt.f64 x) x) (pow.f64 #s(literal 1 binary64) #s(literal 4/3 binary64)))","(*.f64 (cbrt.f64 x) x)","(*.f64 x (cbrt.f64 x))","(pow.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64))) #s(literal 1/6 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/3 binary64))","(pow.f64 (*.f64 x x) #s(literal 2/3 binary64))","(pow.f64 (cbrt.f64 x) #s(literal 4 binary64))","(pow.f64 x #s(literal 4/3 binary64))","(cbrt.f64 (pow.f64 x #s(literal 4 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal 4/3 binary64)))","(exp.f64 (*.f64 #s(literal 4/3 binary64) (log.f64 x)))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))) (fma.f64 x x #s(literal 1 binary64))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x)) (+.f64 #s(literal 1 binary64) x)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x)) (+.f64 #s(literal 1 binary64) x)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x)) (+.f64 #s(literal 1 binary64) x)) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (+.f64 #s(literal 1 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (/.f64 (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x)) (+.f64 #s(literal 1 binary64) x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x)) (+.f64 #s(literal 1 binary64) x)) (-.f64 x #s(literal 1 binary64))) (+.f64 #s(literal 1 binary64) x))","(*.f64 (/.f64 (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x)) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (/.f64 (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64))) (/.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64)) (/.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))","(*.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))) #s(literal 1 binary64)) (/.f64 (pow.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal 3 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))) (-.f64 x #s(literal 1 binary64))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (fma.f64 x x #s(literal 1 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))) (-.f64 x #s(literal 1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal 3 binary64))) (-.f64 x #s(literal 1 binary64))) (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64))) (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(*.f64 (pow.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64)) (pow.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x))","(*.f64 (pow.f64 (/.f64 (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(*.f64 (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) #s(literal 3 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x))","(*.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 1 binary64)) (cbrt.f64 (+.f64 #s(literal 1 binary64) x)))","(*.f64 (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (+.f64 #s(literal 1 binary64) x))","(*.f64 (/.f64 (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) x))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))","(*.f64 (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x)) (+.f64 #s(literal 1 binary64) x)) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (+.f64 #s(literal 1 binary64) x))","(*.f64 (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x)) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(*.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (cbrt.f64 (+.f64 #s(literal 1 binary64) x)))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (pow.f64 (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (cbrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal 3 binary64)))","(*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))","(*.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 1 binary64)))","(*.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))","(*.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 1/3 binary64))","(pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 3/2 binary64))","(pow.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64))","(pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) #s(literal 2 binary64)) (-.f64 (*.f64 (neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))))) (*.f64 (*.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (neg.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal 3 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) #s(literal 2 binary64)) (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (*.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))))))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x)))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))))) (neg.f64 (neg.f64 (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))) #s(literal 1 binary64))) (neg.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 4 binary64))))","(/.f64 (neg.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x) (-.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x) (-.f64 x #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))) (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x) (-.f64 x #s(literal 1 binary64))) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) x))) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x) (-.f64 x #s(literal 1 binary64))) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x) (-.f64 x #s(literal 1 binary64))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x)) (-.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))) (*.f64 (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))) (*.f64 (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x)) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) x))) (*.f64 (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (fma.f64 x x #s(literal -1 binary64)))) (*.f64 (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x)) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))) (*.f64 (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (*.f64 (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (*.f64 (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x)) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal 3 binary64))) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) x))) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x)) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))) (*.f64 (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))) (*.f64 (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))) (*.f64 (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) x))) (*.f64 (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x)) (fma.f64 x x #s(literal -1 binary64)))) (*.f64 (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x)) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))) (*.f64 (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (*.f64 (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x)) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x)) (-.f64 x #s(literal 1 binary64)))) (*.f64 (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 (-.f64 (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x))) (*.f64 (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x)) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (neg.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 (pow.f64 (neg.f64 (cbrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))) #s(literal 3 binary64)) (pow.f64 (neg.f64 (cbrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))) #s(literal 3 binary64)))","(/.f64 (pow.f64 (cbrt.f64 (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x))) #s(literal 3 binary64)) (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)))","(/.f64 (pow.f64 (cbrt.f64 (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))) #s(literal 3 binary64)) (pow.f64 (cbrt.f64 (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))) #s(literal 3 binary64)))","(/.f64 (pow.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)))","(/.f64 (pow.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal 3 binary64)))","(/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal 3 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))))","(/.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) #s(literal 2 binary64)) (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))) #s(literal 2 binary64))) (fma.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (neg.f64 (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))) (neg.f64 (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))) (neg.f64 (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal 3 binary64)))) (neg.f64 (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) x))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 4 binary64)))","(/.f64 (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal 3 binary64))) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) x)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal 3 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(neg.f64 (*.f64 #s(literal -1 binary64) (+.f64 #s(literal 1 binary64) x)))","(neg.f64 (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (+.f64 #s(literal 1 binary64) x)))","(fma.f64 (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) x) (neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))))","(fma.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) x) x) (neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (cbrt.f64 x) #s(literal 1 binary64))","(fma.f64 (*.f64 (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) x) x) (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))))","(fma.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))) x) x (neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))))","(fma.f64 (pow.f64 x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 1/2 binary64)) #s(literal 1 binary64))","(fma.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))))","(fma.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (*.f64 x x) #s(literal 1 binary64)) (neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))))","(fma.f64 (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))) (/.f64 x (-.f64 x #s(literal 1 binary64))) (neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))))","(fma.f64 (/.f64 x (-.f64 x #s(literal 1 binary64))) (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))) (neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))))","(fma.f64 (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) x) (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)) (neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x) (-.f64 x #s(literal 1 binary64))) (neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))))","(fma.f64 (*.f64 (/.f64 x (-.f64 x #s(literal 1 binary64))) x) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))))","(fma.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (*.f64 (/.f64 x (-.f64 x #s(literal 1 binary64))) x) (neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) (neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (cbrt.f64 x) #s(literal 1 binary64))","(fma.f64 (*.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) #s(literal 1 binary64) (neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))))","(fma.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))))","(fma.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) x) x) (neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))))","(fma.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))))","(fma.f64 (cbrt.f64 x) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))))","(fma.f64 #s(literal 1 binary64) x #s(literal 1 binary64))","(fma.f64 x (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))) x) (neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))))","(fma.f64 x #s(literal 1 binary64) #s(literal 1 binary64))","(cbrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) #s(literal 2 binary64)) (fma.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))))) (/.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))) #s(literal 2 binary64)) (fma.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))))))) (/.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))))))))","(-.f64 (/.f64 (*.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 4 binary64))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 4 binary64))))","(-.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))))","(-.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64))) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))))))","(-.f64 (/.f64 (*.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) #s(literal 1 binary64)) (/.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64)))","(-.f64 (/.f64 (-.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(-.f64 (/.f64 (*.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 x #s(literal 1 binary64))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (fma.f64 x x #s(literal 1 binary64)))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (/.f64 (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(-.f64 (/.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (/.f64 (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))) (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (+.f64 #s(literal 1 binary64) x)))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)))","(-.f64 (/.f64 (*.f64 (/.f64 x (-.f64 x #s(literal 1 binary64))) x) #s(literal 1 binary64)) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(-.f64 (*.f64 (/.f64 x (-.f64 x #s(literal 1 binary64))) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (*.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))))","(exp.f64 (*.f64 (log.f64 (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)))","(exp.f64 (log1p.f64 x))","(+.f64 (*.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))))","(+.f64 #s(literal 1 binary64) x)","(+.f64 x #s(literal 1 binary64))","(*.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x #s(literal 1 binary64))) (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64))) (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x #s(literal 1 binary64))))","(*.f64 (pow.f64 (cbrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) #s(literal 2 binary64)) (cbrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))) (pow.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)))","(*.f64 (cbrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (pow.f64 (cbrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) #s(literal 2 binary64)))","(*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))","(pow.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (cbrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) #s(literal 3 binary64))","(pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64))","(/.f64 (+.f64 (pow.f64 (-.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (-.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x) x) (-.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x) x) (-.f64 #s(literal 1 binary64) (*.f64 (-.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x) x) #s(literal 1 binary64)))))","(/.f64 (fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal -1 binary64) (*.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)))) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))) (neg.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))) (*.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))) (*.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)) (+.f64 #s(literal 1 binary64) x)) (*.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))) (*.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)))) (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)) (+.f64 #s(literal 1 binary64) x)) (*.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal -1 binary64))))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))) (*.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))) (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))) (*.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))) (*.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)) (neg.f64 (+.f64 #s(literal 1 binary64) x))) (*.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 (fma.f64 x x #s(literal -1 binary64))))) (*.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)) (-.f64 x #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) (*.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)) (+.f64 #s(literal 1 binary64) x)) (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1 binary64))))) (*.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))) (*.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) (+.f64 #s(literal 1 binary64) x)) (*.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)) (/.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (+.f64 #s(literal 1 binary64) x)) (*.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 x x)) (+.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (+.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 x x)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)))) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 x x)) (+.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal -1 binary64))))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (+.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 x x)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 x x)) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 x x)) (neg.f64 (+.f64 #s(literal 1 binary64) x))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (neg.f64 (fma.f64 x x #s(literal -1 binary64))))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (neg.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 x x)) (-.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (fma.f64 x x #s(literal -1 binary64)))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (-.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 x x)) (+.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (fma.f64 x x #s(literal -1 binary64)))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (+.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 x x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1 binary64))))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 x x)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 x x)) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 x x)) (/.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (/.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) x)) (*.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))) (*.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)))) (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) x)) (*.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal -1 binary64))))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))) (*.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))) (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))) (*.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))) (*.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) x))) (*.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 (fma.f64 x x #s(literal -1 binary64))))) (*.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) (*.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) x)) (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1 binary64))))) (*.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))) (*.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) (+.f64 #s(literal 1 binary64) x)) (*.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (+.f64 #s(literal 1 binary64) x)) (*.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (+.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)))) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal -1 binary64))))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (+.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) x))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (neg.f64 (fma.f64 x x #s(literal -1 binary64))))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (neg.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (fma.f64 x x #s(literal -1 binary64)))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (-.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (fma.f64 x x #s(literal -1 binary64)))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (+.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1 binary64))))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (/.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 #s(literal 1 binary64) x) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (+.f64 #s(literal 1 binary64) x)))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 x x)))) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 #s(literal 1 binary64) x) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (+.f64 #s(literal 1 binary64) x)))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))","(/.f64 (fma.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) x) (*.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(/.f64 (fma.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (*.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 x x)))) (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) x) (*.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(/.f64 (fma.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (*.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))) (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (fma.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) x) (*.f64 (neg.f64 (+.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)))) (*.f64 (neg.f64 (+.f64 #s(literal 1 binary64) x)) (+.f64 #s(literal 1 binary64) x)))","(/.f64 (fma.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (*.f64 (neg.f64 (+.f64 #s(literal 1 binary64) x)) (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 x x)))) (*.f64 (neg.f64 (+.f64 #s(literal 1 binary64) x)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (fma.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) x) (*.f64 (neg.f64 (+.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))))) (*.f64 (neg.f64 (+.f64 #s(literal 1 binary64) x)) (+.f64 #s(literal 1 binary64) x)))","(/.f64 (fma.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (*.f64 (neg.f64 (+.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))) (*.f64 (neg.f64 (+.f64 #s(literal 1 binary64) x)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (fma.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x) (*.f64 (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)))) (*.f64 (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x))) (+.f64 #s(literal 1 binary64) x)))","(/.f64 (fma.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (*.f64 (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x))) (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 x x)))) (*.f64 (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (fma.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x) (*.f64 (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x))) (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))))) (*.f64 (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x))) (+.f64 #s(literal 1 binary64) x)))","(/.f64 (fma.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (*.f64 (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x))) (*.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))) (*.f64 (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (fma.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (*.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))) (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (fma.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)) (+.f64 #s(literal 1 binary64) x) (*.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 (fma.f64 x x #s(literal -1 binary64))))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(/.f64 (fma.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)) (neg.f64 (+.f64 #s(literal 1 binary64) x)) (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) (*.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (fma.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x))) (*.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (*.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (fma.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 x x)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))","(/.f64 (fma.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 x x)) (+.f64 #s(literal 1 binary64) x) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (neg.f64 (fma.f64 x x #s(literal -1 binary64))))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (+.f64 #s(literal 1 binary64) x)))","(/.f64 (fma.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 x x)) (neg.f64 (+.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (fma.f64 x x #s(literal -1 binary64)))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (neg.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (fma.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 x x)) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (*.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))) (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) x) (*.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 (fma.f64 x x #s(literal -1 binary64))))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(/.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) x)) (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) (*.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x))) (*.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (*.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (fma.f64 (*.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))","(/.f64 (fma.f64 (*.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 #s(literal 1 binary64) x) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (neg.f64 (fma.f64 x x #s(literal -1 binary64))))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (+.f64 #s(literal 1 binary64) x)))","(/.f64 (fma.f64 (*.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (fma.f64 x x #s(literal -1 binary64)))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (neg.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (fma.f64 (*.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64))) (+.f64 #s(literal 1 binary64) x))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64))) (+.f64 #s(literal 1 binary64) x))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 x x)) (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)) (*.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal -1 binary64)))) (+.f64 #s(literal 1 binary64) x))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal -1 binary64)))) (+.f64 #s(literal 1 binary64) x))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 x x)) (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) x))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) x))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))","(/.f64 (pow.f64 (cbrt.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))) #s(literal 3 binary64)) (pow.f64 (cbrt.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))) #s(literal 3 binary64)))","(/.f64 (pow.f64 (cbrt.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal 3 binary64)))) #s(literal 3 binary64)) (pow.f64 (cbrt.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))) #s(literal 3 binary64)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))) (neg.f64 (-.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))) (neg.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))) (-.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal 3 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal 3 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal 3 binary64)))))","(fma.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (*.f64 x x) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(fma.f64 (/.f64 (*.f64 x x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (-.f64 x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(fma.f64 (/.f64 (*.f64 x x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(fma.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (/.f64 (*.f64 x x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(fma.f64 (/.f64 (*.f64 x x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(fma.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (/.f64 (*.f64 x x) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(fma.f64 (/.f64 (*.f64 x x) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(fma.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (/.f64 (*.f64 x x) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(fma.f64 (/.f64 (*.f64 x x) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(fma.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (*.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)) x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(fma.f64 (/.f64 (*.f64 x x) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(fma.f64 (/.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(fma.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (*.f64 x x) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(fma.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (*.f64 x x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(fma.f64 (*.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)) x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(fma.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal 1 binary64) (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x))","(fma.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(fma.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (*.f64 x x) #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(fma.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 x x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(fma.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64) (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x))","(fma.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(fma.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x))","(fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x))","(fma.f64 #s(literal 1 binary64) (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(fma.f64 x (*.f64 (-.f64 x #s(literal 1 binary64)) x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(-.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(-.f64 (-.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x) x) #s(literal -1 binary64))","(-.f64 (*.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 x #s(literal 1 binary64))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (fma.f64 x x #s(literal 1 binary64)))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))","(-.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))))","(-.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x) (-.f64 x #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))) #s(literal 3 binary64)))","(+.f64 (-.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x) x) #s(literal 1 binary64))","(+.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x))","(+.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (/.f64 (-.f64 x #s(literal 1 binary64)) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (/.f64 (-.f64 x #s(literal 1 binary64)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (/.f64 #s(literal 1 binary64) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 #s(literal 1 binary64) x)) (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","(pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (+.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (neg.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (+.f64 #s(literal 1 binary64) x)) (+.f64 #s(literal 1 binary64) x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) x))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (-.f64 x #s(literal -1 binary64))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) x)))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64)))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) x))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(fma.f64 (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(fma.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (cbrt.f64 x) #s(literal -1 binary64))","(fma.f64 (pow.f64 x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 1/2 binary64)) #s(literal -1 binary64))","(fma.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (cbrt.f64 x) #s(literal -1 binary64))","(fma.f64 (cbrt.f64 x) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) x #s(literal -1 binary64))","(fma.f64 x #s(literal 1 binary64) #s(literal -1 binary64))","(expm1.f64 (*.f64 (log.f64 x) #s(literal 1 binary64)))","(expm1.f64 (log.f64 x))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1 binary64))))) (/.f64 #s(literal 1 binary64) (fma.f64 x x (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1 binary64))))))","(-.f64 (*.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)) x) (exp.f64 (neg.f64 (log1p.f64 x))))","(-.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(-.f64 x #s(literal 1 binary64))","(exp.f64 (*.f64 (log.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64)))","(+.f64 #s(literal -1 binary64) x)","(+.f64 x #s(literal -1 binary64))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (/.f64 (pow.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal 3 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal 3 binary64))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal 3 binary64))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal 3 binary64))) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))) (+.f64 #s(literal 1 binary64) x)) (/.f64 (pow.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) x)) (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (pow.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal 3 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal 3 binary64))) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (/.f64 (-.f64 x #s(literal 1 binary64)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (/.f64 (-.f64 x #s(literal 1 binary64)) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (exp.f64 (log.f64 (-.f64 x #s(literal 1 binary64)))) (exp.f64 (log.f64 (-.f64 x #s(literal 1 binary64)))))","(*.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))","(*.f64 (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (cbrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 4 binary64))) (cbrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 2 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(*.f64 (cbrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 4 binary64))))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) #s(literal 1 binary64))","(*.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))","(pow.f64 (exp.f64 (log.f64 (-.f64 x #s(literal 1 binary64)))) #s(literal 2 binary64))","(pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal 2 binary64))","(pow.f64 (cbrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64))","(pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) #s(literal 1 binary64))","(pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))","(/.f64 (+.f64 (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))) (neg.f64 (+.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 2 binary64))) (neg.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (+.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64))) (neg.f64 (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (*.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))) (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) x) (*.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 (fma.f64 x x #s(literal -1 binary64))))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(/.f64 (fma.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) x)) (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) (*.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x))) (*.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (*.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (fma.f64 (*.f64 x (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))","(/.f64 (fma.f64 (*.f64 x (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 #s(literal 1 binary64) x) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (neg.f64 (fma.f64 x x #s(literal -1 binary64))))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (+.f64 #s(literal 1 binary64) x)))","(/.f64 (fma.f64 (*.f64 x (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (fma.f64 x x #s(literal -1 binary64)))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (neg.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (fma.f64 (*.f64 x (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64))) (+.f64 #s(literal 1 binary64) x))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))","(/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (+.f64 #s(literal 1 binary64) x)))","(/.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))","(/.f64 (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (+.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) x))","(fma.f64 (/.f64 x (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(fma.f64 (/.f64 x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(fma.f64 (/.f64 x (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(fma.f64 (/.f64 x (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(fma.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(fma.f64 (/.f64 x (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (-.f64 x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(fma.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(fma.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(fma.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(fma.f64 (-.f64 x #s(literal 1 binary64)) x (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(fma.f64 x (-.f64 x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(-.f64 (/.f64 (-.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x) x) (+.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal -1 binary64) (+.f64 #s(literal 1 binary64) x)))","(-.f64 (/.f64 (*.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 x #s(literal 1 binary64))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (fma.f64 x x #s(literal 1 binary64)))) (+.f64 #s(literal 1 binary64) x)) (/.f64 (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))) (+.f64 #s(literal 1 binary64) x)))","(-.f64 (/.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))) (+.f64 #s(literal 1 binary64) x)) (/.f64 (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))) (+.f64 #s(literal 1 binary64) x)))","(-.f64 (/.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x) (+.f64 #s(literal 1 binary64) x)) (/.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x)))","(exp.f64 (*.f64 (log.f64 (cbrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))) #s(literal 3 binary64)))","(exp.f64 (*.f64 (log.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)))","(+.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))))","(*.f64 (/.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (pow.f64 x #s(literal 1/2 binary64))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal 1/2 binary64))))","(*.f64 (/.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (cbrt.f64 x)))","(*.f64 (/.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (cbrt.f64 x)) (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (-.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))) (*.f64 x x)) (/.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (fma.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (-.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))))))","(*.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) #s(literal 2 binary64))) x) (/.f64 (pow.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal -1/729 binary64) x)) x) (/.f64 (pow.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (-.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))) #s(literal -1 binary64)) x))","(*.f64 (pow.f64 (/.f64 (*.f64 x x) (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 x x) (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal -1/729 binary64) x))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (-.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (neg.f64 x)))","(*.f64 (/.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))","(*.f64 (neg.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (pow.f64 (*.f64 (neg.f64 x) x) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (/.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))) (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x)))))","(*.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) x))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -2 binary64)) (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))))","(pow.f64 (/.f64 x (/.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) x)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 x (/.f64 x (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 x (/.f64 x (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal -1/729 binary64) x)) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (-.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (neg.f64 (/.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) x))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))))) (neg.f64 (neg.f64 (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))) (*.f64 x x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal -1/729 binary64) x)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (-.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))) (*.f64 x x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal -1/729 binary64) x)) (pow.f64 x #s(literal -2 binary64))) (fma.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (-.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))))","(/.f64 (*.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 1 binary64)) (*.f64 x x))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) #s(literal 2 binary64)))) (neg.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal -1/729 binary64) x))) (neg.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (-.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))))))","(/.f64 (neg.f64 (/.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) x)) (neg.f64 x))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))) (*.f64 x x)))","(/.f64 (*.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal -1/729 binary64) x)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (-.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))) (*.f64 x x)))","(/.f64 (/.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) x) x)","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) #s(literal 2 binary64))) (*.f64 (*.f64 x x) (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x)))))","(/.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal -1/729 binary64) x)) (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (-.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (/.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 x (/.f64 x (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 x (/.f64 x (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 x (/.f64 x (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))))))","(/.f64 #s(literal 1 binary64) (/.f64 x (/.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x (/.f64 x (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 x (/.f64 x (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x)))","(neg.f64 (/.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 (neg.f64 x) x)))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 x x) (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))))) (/.f64 (pow.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 x x) (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x)) (/.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 (neg.f64 x) x)))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x)))) (*.f64 x x)) (/.f64 (/.f64 (pow.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) #s(literal 2 binary64)) (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x)))) (*.f64 x x)))","(exp.f64 (*.f64 (log.f64 (*.f64 x (/.f64 x (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) #s(literal 2 binary64))) (pow.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal -1/729 binary64) x)) (pow.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (-.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))) (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (-.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))) (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal -1/729 binary64) x))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal -1/729 binary64) x)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (-.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x)))) (*.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))) (pow.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) #s(literal 2 binary64)))) (*.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))) (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x)))))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64))) (-.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal -1/729 binary64) x))) (neg.f64 (fma.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal -1/9 binary64)) (cbrt.f64 x))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal -1/729 binary64) x))) (neg.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (-.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) #s(literal 2 binary64))) (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))))","(/.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal -1/729 binary64) x)) (fma.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal -1/9 binary64)) (cbrt.f64 x)))))","(/.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal -1/729 binary64) x)) (fma.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (-.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))) (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (-.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))) (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal -1/729 binary64) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))) (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (-.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))) (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal -1/729 binary64) x))))","(fma.f64 (*.f64 #s(literal -1/9 binary64) (pow.f64 x #s(literal 1/6 binary64))) (pow.f64 x #s(literal 1/6 binary64)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))","(fma.f64 (pow.f64 x #s(literal 1/6 binary64)) (*.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal -1/9 binary64)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))","(fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))","(fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))","(fma.f64 (cbrt.f64 x) #s(literal -1/9 binary64) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))","(fma.f64 #s(literal 1/3 binary64) (*.f64 (cbrt.f64 x) x) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x)))) (/.f64 (pow.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) #s(literal 2 binary64)) (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x)))))","(+.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))","(+.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal 4/3 binary64)) (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal 4/3 binary64)))","(*.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 4/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 4/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal 4/3 binary64)) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 4/3 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal 4/3 binary64)) (*.f64 (cbrt.f64 x) x))","(*.f64 (pow.f64 x #s(literal 7/6 binary64)) (pow.f64 x #s(literal 1/6 binary64)))","(*.f64 (pow.f64 x #s(literal 1/6 binary64)) (pow.f64 x #s(literal 7/6 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(*.f64 (*.f64 (cbrt.f64 x) x) (pow.f64 #s(literal 1 binary64) #s(literal 4/3 binary64)))","(*.f64 (cbrt.f64 x) x)","(*.f64 x (cbrt.f64 x))","(pow.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64))) #s(literal 1/6 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/3 binary64))","(pow.f64 (*.f64 x x) #s(literal 2/3 binary64))","(pow.f64 (cbrt.f64 x) #s(literal 4 binary64))","(pow.f64 x #s(literal 4/3 binary64))","(cbrt.f64 (pow.f64 x #s(literal 4 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal 4/3 binary64)))","(exp.f64 (*.f64 #s(literal 4/3 binary64) (log.f64 x)))","(*.f64 (cbrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (cbrt.f64 (pow.f64 x #s(literal -1/2 binary64))))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/12 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1/3 binary64)) (pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal -1/3 binary64)) (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal -1/3 binary64)))","(*.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -1/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1/3 binary64)) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal 7/6 binary64)) #s(literal -1/4 binary64)) (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal -1/4 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal -1/4 binary64)) (pow.f64 (pow.f64 x #s(literal 7/6 binary64)) #s(literal -1/4 binary64)))","(*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal -1 binary64) x)))","(*.f64 (cbrt.f64 #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 x #s(literal -1/12 binary64)) (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/12 binary64)) (pow.f64 x #s(literal -1/4 binary64)))","(*.f64 (pow.f64 x #s(literal -1/4 binary64)) (pow.f64 x #s(literal -1/12 binary64)))","(*.f64 (pow.f64 x #s(literal -1/6 binary64)) (pow.f64 x #s(literal -1/6 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (cbrt.f64 x)))","(pow.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) #s(literal -1/8 binary64))","(pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal -2 binary64))","(pow.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/6 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64))","(pow.f64 (*.f64 x x) #s(literal -1/6 binary64))","(pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal -1/4 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/3 binary64))","(pow.f64 (cbrt.f64 x) #s(literal -1 binary64))","(pow.f64 x #s(literal -1/3 binary64))","(/.f64 (neg.f64 (pow.f64 x #s(literal -1/6 binary64))) (neg.f64 (pow.f64 x #s(literal 1/6 binary64))))","(/.f64 (neg.f64 (cbrt.f64 #s(literal -1 binary64))) (neg.f64 (cbrt.f64 (neg.f64 x))))","(/.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (neg.f64 x)))","(/.f64 (pow.f64 x #s(literal -1/6 binary64)) (pow.f64 x #s(literal 1/6 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (cbrt.f64 x)))","(/.f64 #s(literal 1 binary64) (cbrt.f64 (neg.f64 (neg.f64 x))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (cbrt.f64 x))))","(/.f64 #s(literal 1 binary64) (cbrt.f64 x))","(cbrt.f64 (pow.f64 x #s(literal -1 binary64)))","(exp.f64 (fma.f64 (log.f64 (cbrt.f64 x)) #s(literal -1/2 binary64) (*.f64 (log.f64 (cbrt.f64 x)) #s(literal -1/2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 x #s(literal -1/6 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal -1/3 binary64)))","(exp.f64 (neg.f64 (log.f64 (cbrt.f64 x))))","(exp.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal 1/3 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal 4/3 binary64) (log.f64 x)) #s(literal -1/4 binary64)))","(*.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)))","(*.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (-.f64 (+.f64 #s(literal 1 binary64) x) x)) #s(literal -1 binary64))","(/.f64 (fma.f64 #s(literal -1 binary64) x (+.f64 #s(literal 1 binary64) x)) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (*.f64 (neg.f64 (cbrt.f64 x)) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x))) (neg.f64 (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))))","(/.f64 (-.f64 (*.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 #s(literal 1 binary64) x)))) (*.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (*.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) x)) (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))))","(/.f64 (neg.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (cbrt.f64 x)))))","(/.f64 (neg.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (neg.f64 (+.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (*.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (cbrt.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))))","(/.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (-.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (cbrt.f64 x))))","(/.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (+.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (*.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (cbrt.f64 x))))))","(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (-.f64 (+.f64 #s(literal 1 binary64) x) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (-.f64 (+.f64 #s(literal 1 binary64) x) x)))","(fma.f64 (cbrt.f64 (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (/.f64 (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (cbrt.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (cbrt.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (cbrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (cbrt.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal 1/3 binary64)) (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1/3 binary64)) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal 1/3 binary64)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/3 binary64)) (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/3 binary64)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 1/3 binary64)) (pow.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 1/3 binary64)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (pow.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 1/3 binary64)) (pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 1/3 binary64)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (pow.f64 (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal 1/3 binary64)) (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (pow.f64 (/.f64 (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1/3 binary64)) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal 1/3 binary64)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (neg.f64 (pow.f64 x #s(literal 1/6 binary64))) (pow.f64 x #s(literal 1/6 binary64)) (cbrt.f64 (+.f64 #s(literal 1 binary64) x)))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (cbrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/3 binary64)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (cbrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1/3 binary64)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x))) (cbrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x))) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/3 binary64)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))) (cbrt.f64 (pow.f64 (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))) (pow.f64 (pow.f64 (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1/3 binary64)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (cbrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (pow.f64 x #s(literal 1/6 binary64)) (neg.f64 (pow.f64 x #s(literal 1/6 binary64))) (cbrt.f64 (+.f64 #s(literal 1 binary64) x)))","(fma.f64 (cbrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (cbrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (neg.f64 (cbrt.f64 x)))","(fma.f64 #s(literal -1 binary64) (cbrt.f64 x) (cbrt.f64 (+.f64 #s(literal 1 binary64) x)))","(fma.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64) (neg.f64 (cbrt.f64 x)))","(fma.f64 #s(literal 1 binary64) (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (cbrt.f64 x)))","(-.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (cbrt.f64 x)))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (cbrt.f64 x)))))","(-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))))","(-.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 #s(literal 1 binary64) x)))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(-.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))","(+.f64 (neg.f64 (cbrt.f64 x)) (cbrt.f64 (+.f64 #s(literal 1 binary64) x)))","(+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (cbrt.f64 x)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (*.f64 x x) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (*.f64 x x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (*.f64 x x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (/.f64 (*.f64 x x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))))","(*.f64 (/.f64 (*.f64 x x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (/.f64 (*.f64 x x) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))","(*.f64 (/.f64 (*.f64 x x) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (/.f64 (*.f64 x x) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (*.f64 x x) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (*.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)) x))","(*.f64 (/.f64 (*.f64 x x) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (*.f64 x x) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (*.f64 x x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (*.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)) x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(*.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64))","(*.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (*.f64 x x) #s(literal 1 binary64)))","(*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 x x))","(*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x))","(*.f64 x (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(/.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) (pow.f64 (*.f64 (*.f64 x x) #s(literal -1 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal 6 binary64)) (-.f64 (*.f64 (*.f64 (*.f64 x x) #s(literal -1 binary64)) (*.f64 (*.f64 x x) #s(literal -1 binary64))) (*.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (*.f64 x x) #s(literal -1 binary64))))))","(/.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal 6 binary64)) (-.f64 (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (neg.f64 x) x)) (*.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (neg.f64 x) x)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x))) (neg.f64 (+.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 x x))) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (+.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (*.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)) (+.f64 #s(literal 1 binary64) x))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 x x)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) x))","(/.f64 (*.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))","(fma.f64 (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (*.f64 (*.f64 x x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (*.f64 (neg.f64 x) x))","(fma.f64 (pow.f64 x #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)) (*.f64 (*.f64 x x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 x #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)) (*.f64 (neg.f64 x) x))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64) (*.f64 (*.f64 x x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64) (*.f64 (neg.f64 x) x))","(fma.f64 (*.f64 x x) x (*.f64 (*.f64 x x) #s(literal -1 binary64)))","(fma.f64 (*.f64 x x) x (*.f64 (neg.f64 x) x))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)) (*.f64 (*.f64 x x) #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)) (*.f64 (neg.f64 x) x))","(fma.f64 x (*.f64 x x) (*.f64 (*.f64 x x) #s(literal -1 binary64)))","(fma.f64 x (*.f64 x x) (*.f64 (neg.f64 x) x))","(+.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (*.f64 x x) #s(literal -1 binary64)))","(+.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (neg.f64 x) x))","(*.f64 (*.f64 #s(literal -1/9 binary64) (pow.f64 x #s(literal 1/6 binary64))) (pow.f64 x #s(literal 1/6 binary64)))","(*.f64 (pow.f64 x #s(literal 1/6 binary64)) (*.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal -1/9 binary64)))","(*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))","(*.f64 (cbrt.f64 x) #s(literal -1/9 binary64))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":286.308837890625,"type":"rewrite"},{"compiler":[[34003,4829]],"memory":[[7441488,100819600]],"time":167.26904296875,"type":"eval"},{"alts":[["(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/3 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (cbrt.f64 x)))","fresh",60.127678427313434,"binary64"],["(fma.f64 (pow.f64 x #s(literal 1/6 binary64)) (neg.f64 (pow.f64 x #s(literal 1/6 binary64))) (cbrt.f64 (+.f64 #s(literal 1 binary64) x)))","fresh",59.576461224228545,"binary64"],["(fma.f64 (cbrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (cbrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (neg.f64 (cbrt.f64 x)))","fresh",60.51212196186954,"binary64"],["(fma.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (cbrt.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x))) (neg.f64 (cbrt.f64 x)))","fresh",61.59384981599946,"binary64"],["(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))","fresh",59.67332215819802,"binary64"],["(-.f64 (cbrt.f64 (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))) (cbrt.f64 x))","fresh",61.967273376523224,"binary64"],["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","done",60.29627493697794,"binary64"],["(+.f64 (pow.f64 x #s(literal 1/3 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","done",60.63917809431693,"binary64"],["(+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","done",60.63917809431693,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (pow.f64 (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","fresh",1.3521759417246741,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x)))","fresh",32.32077865718985,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x)))","fresh",48.2336463974876,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64)))","fresh",1.2055923848474557,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (/.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) x) x))","fresh",18.145139218513226,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (cbrt.f64 x)))","fresh",1.2997111204621226,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1 binary64) (*.f64 x (/.f64 x (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))))))","fresh",18.19724800753472,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))))","fresh",1.244359850941054,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","done",1.2756098509252476,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 2/3 binary64))))","fresh",6.679953116375525,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))))","fresh",1.3336161986254655,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 (*.f64 x x))))","fresh",31.642643190705492,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (cbrt.f64 x) #s(literal -3 binary64)) (cbrt.f64 x))))","fresh",1.2447299193201389,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal -1/2 binary64)) #s(literal 1/3 binary64)))","done",17.830632207492886,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (*.f64 x x) #s(literal -1/3 binary64)) #s(literal 1/3 binary64)))","fresh",33.91365880519614,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64)))","fresh",1.3065661497832552,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 x #s(literal -2/3 binary64)) #s(literal 1/3 binary64)))","fresh",6.679088646846171,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal 1/3 binary64)))","done",1.3361949095516972,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 2/3 binary64))) #s(literal 1/3 binary64)))","fresh",6.680831104061996,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))) #s(literal 1/3 binary64)))","fresh",1.3329524290885812,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1 binary64) (*.f64 (cbrt.f64 x) #s(literal 3 binary64))) #s(approx (pow (cbrt x) -1) (cbrt.f64 (/.f64 #s(literal 1 binary64) x)))))","fresh",1.1567451045741337,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1 binary64) (cbrt.f64 (*.f64 x x))) #s(literal 1/3 binary64)))","fresh",31.65790314934597,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (/.f64 #s(literal 1 binary64) (cbrt.f64 x))))","fresh",1.3140849486096557,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) #s(approx (pow (cbrt x) -1) (cbrt.f64 (/.f64 #s(literal 1 binary64) x)))))","done",1.1179763057319239,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (*.f64 (pow.f64 x #s(literal -1/8 binary64)) (*.f64 (pow.f64 x #s(literal -1/8 binary64)) (pow.f64 x #s(literal -1/4 binary64))))) #s(literal 1/3 binary64)))","fresh",1.340806829130142,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal -1/2 binary64))) #s(approx (cbrt (pow x -3/2)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) #s(literal 1/3 binary64)))","fresh",1.2000075557319416,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","done",30.90374653482893,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))","fresh",31.574547025454315,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 #s(approx (/ 1/3 (cbrt x)) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/3 binary64))) #s(approx (pow (cbrt x) -1) (cbrt.f64 (/.f64 #s(literal 1 binary64) x)))))","fresh",1.2566863643583737,"binary64"]],"compiler":[[1357,352],[14,11],[12,8],[16,9],[22,15],[21,13],[20,11],[7,6],[10,9],[9,8],[18,15],[22,15],[30,22],[14,12],[22,15],[15,11],[24,17],[16,14],[14,12],[13,11],[16,14],[14,11],[17,13],[16,13],[15,12],[14,12],[13,11],[16,14],[15,13],[18,15],[24,18],[16,13],[17,13],[22,17],[26,19],[24,20],[16,13],[16,13],[29,19]],"count":[[1126,38]],"kept":[{"done":[5,5],"fresh":[32,20],"new":[1084,10],"picked":[5,3]}],"memory":[[-5109312,62351728]],"min-error":[[0.00390625,"binary64"]],"time":49.83203125,"type":"prune"},{"accuracy":[1.1179763057319239],"baseline":[1.1179763057319239],"branch":[["x",1.1179763057319236,1,"binary64"],["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))",1.1179763057319239,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[77,1]],"inputs":[["(+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","(+.f64 (pow.f64 x #s(literal 1/3 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 x #s(literal -2/3 binary64)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (fma.f64 #s(literal 1/3 binary64) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x))))","(-.f64 #s(approx (cbrt (+ x 1)) (fma.f64 #s(literal 1/3 binary64) x #s(literal 1 binary64))) (cbrt.f64 x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (*.f64 x x) #s(literal -1/3 binary64)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 2/3 binary64))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 (*.f64 x x))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 2/3 binary64))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1 binary64) (cbrt.f64 (*.f64 x x))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64)))","(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal -1/2 binary64)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))))","(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (pow.f64 (sqrt.f64 x) #s(literal 2/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (cbrt.f64 x) #s(literal -3 binary64)) (cbrt.f64 x))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (cbrt.f64 x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) #s(approx (pow (cbrt x) -1) (cbrt.f64 (/.f64 #s(literal 1 binary64) x)))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (/.f64 #s(literal 1 binary64) (cbrt.f64 x))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))) #s(literal 1/3 binary64)))","(-.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))) (cbrt.f64 x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 #s(approx (/ 1/3 (cbrt x)) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/3 binary64))) #s(approx (pow (cbrt x) -1) (cbrt.f64 (/.f64 #s(literal 1 binary64) x)))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal -1/2 binary64))) #s(approx (cbrt (pow x -3/2)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1 binary64) (*.f64 (cbrt.f64 x) #s(literal 3 binary64))) #s(approx (pow (cbrt x) -1) (cbrt.f64 (/.f64 #s(literal 1 binary64) x)))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1 binary64) (/.f64 (cbrt.f64 x) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (/.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) x) x))","(-.f64 (cbrt.f64 (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))) (cbrt.f64 x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1 binary64) (*.f64 x (/.f64 x (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))))))","(-.f64 (cbrt.f64 (/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))) (cbrt.f64 x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (cbrt.f64 (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal 1/3 binary64)))","(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 2 binary64)))","(-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 1/3 binary64))) (cbrt.f64 x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal -5/4 binary64))) (pow.f64 x #s(literal -1/4 binary64))) #s(literal 1/3 binary64)))","(fma.f64 (pow.f64 x #s(literal 1/6 binary64)) (neg.f64 (pow.f64 x #s(literal 1/6 binary64))) (cbrt.f64 (+.f64 #s(literal 1 binary64) x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (exp.f64 (*.f64 (log.f64 (*.f64 (cbrt.f64 x) x)) #s(literal -1/2 binary64))) #s(literal 1/3 binary64)))","(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (exp.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) #s(literal 1/6 binary64))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 1/3 binary64)) (cbrt.f64 x)))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/3 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (cbrt.f64 x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 #s(approx (/ 1/3 (cbrt x)) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1 binary64) (*.f64 #s(literal 3 binary64) (cbrt.f64 x))) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (*.f64 (pow.f64 x #s(literal -1/12 binary64)) (pow.f64 x #s(literal -1/4 binary64)))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x)))","(fma.f64 (/.f64 #s(literal 1 binary64) (cbrt.f64 (-.f64 x #s(literal 1 binary64)))) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (cbrt.f64 x)))","(-.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (cbrt.f64 x))","(-.f64 (pow.f64 (exp.f64 #s(literal 1/3 binary64)) (log1p.f64 x)) (cbrt.f64 x))","(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (exp.f64 (log.f64 (cbrt.f64 x))))","(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (pow.f64 (exp.f64 #s(literal 1/3 binary64)) (log.f64 x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (pow.f64 (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(-.f64 (cbrt.f64 (fma.f64 (pow.f64 x #s(literal 5/6 binary64)) (pow.f64 x #s(literal 1/6 binary64)) #s(literal 1 binary64))) (cbrt.f64 x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (cbrt.f64 (pow.f64 x #s(literal -3/2 binary64)))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 (pow.f64 (cbrt.f64 (pow.f64 x #s(literal 1/2 binary64))) #s(literal 2 binary64)) #s(literal 2 binary64))))","(fma.f64 (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (cbrt.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x))) (neg.f64 (cbrt.f64 x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x)))","(-.f64 (cbrt.f64 (pow.f64 (exp.f64 #s(literal 1 binary64)) (log1p.f64 x))) (cbrt.f64 x))","(fma.f64 (cbrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (cbrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (neg.f64 (cbrt.f64 x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (*.f64 (pow.f64 x #s(literal -1/8 binary64)) (*.f64 (pow.f64 x #s(literal -1/8 binary64)) (pow.f64 x #s(literal -1/4 binary64))))) #s(literal 1/3 binary64)))","(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))","(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (cbrt.f64 (cbrt.f64 x))))","(/.f64 (-.f64 (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (cbrt.f64 x)) (*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -10/243 binary64) (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -10/243 binary64) (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))) (*.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) x)) (*.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) #s(literal 0 binary64))))","#s(approx (+ (* (pow (cbrt (- x 1)) -1) (cbrt (+ (* x x) -1))) (neg (cbrt x))) (*.f64 (neg.f64 x) (fma.f64 (-.f64 (/.f64 #s(literal 1 binary64) (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (cbrt.f64 #s(literal -1 binary64))) (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal -1/3 binary64) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x)))) (neg.f64 (pow.f64 x #s(literal 3 binary64)))))))","(-.f64 (cbrt.f64 (fma.f64 (pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal 3 binary64)) (pow.f64 (cbrt.f64 (cbrt.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (cbrt.f64 x))"]],"memory":[[-1320640,21053184]],"oracle":[63.6617279749764],"outputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) #s(approx (pow (cbrt x) -1) (cbrt.f64 (/.f64 #s(literal 1 binary64) x)))))"]],"repr":["binary64"],"time":37.10498046875,"times":[[17.2900390625,"x"],[15.548828125,"(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))"]],"type":"regimes"},{"accuracy":[1.205592384847455],"baseline":[1.2055923848474557],"branch":[["x",1.205592384847455,1,"binary64"],["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))",1.2055923848474557,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[25,1]],"inputs":[["(+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","(+.f64 (pow.f64 x #s(literal 1/3 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 x #s(literal -2/3 binary64)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (fma.f64 #s(literal 1/3 binary64) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x))))","(-.f64 #s(approx (cbrt (+ x 1)) (fma.f64 #s(literal 1/3 binary64) x #s(literal 1 binary64))) (cbrt.f64 x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (*.f64 x x) #s(literal -1/3 binary64)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 2/3 binary64))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 (*.f64 x x))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 2/3 binary64))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1 binary64) (cbrt.f64 (*.f64 x x))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64)))","(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal -1/2 binary64)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))))","(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (pow.f64 (sqrt.f64 x) #s(literal 2/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (cbrt.f64 x) #s(literal -3 binary64)) (cbrt.f64 x))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (cbrt.f64 x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))))"]],"memory":[[8271360,8271360]],"oracle":[62.86772102304903],"outputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64)))"]],"repr":["binary64"],"time":13.5810546875,"times":[[5.904052734375,"x"],[5.98095703125,"(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))"]],"type":"regimes"},{"accuracy":[1.275609850925247],"baseline":[1.2756098509252476],"branch":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))",1.2756098509252478,1,"binary64"],["x",1.275609850925247,1,"binary64"]],"compiler":[[7,6],[1,1]],"count":[[18,1]],"inputs":[["(+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","(+.f64 (pow.f64 x #s(literal 1/3 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 x #s(literal -2/3 binary64)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (fma.f64 #s(literal 1/3 binary64) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x))))","(-.f64 #s(approx (cbrt (+ x 1)) (fma.f64 #s(literal 1/3 binary64) x #s(literal 1 binary64))) (cbrt.f64 x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (*.f64 x x) #s(literal -1/3 binary64)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 2/3 binary64))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 (*.f64 x x))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 2/3 binary64))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1 binary64) (cbrt.f64 (*.f64 x x))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64)))","(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal -1/2 binary64)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))"]],"memory":[[-4515984,6770064]],"oracle":[62.86772102304903],"outputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))"]],"repr":["binary64"],"time":10.200927734375,"times":[[4.10693359375,"(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))"],[4.446044921875,"x"]],"type":"regimes"},{"accuracy":[1.3065661497832544],"baseline":[1.3065661497832552],"branch":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))",1.306566149783256,1,"binary64"],["x",1.3065661497832544,1,"binary64"]],"compiler":[[7,6],[1,1]],"count":[[17,1]],"inputs":[["(+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","(+.f64 (pow.f64 x #s(literal 1/3 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 x #s(literal -2/3 binary64)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (fma.f64 #s(literal 1/3 binary64) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x))))","(-.f64 #s(approx (cbrt (+ x 1)) (fma.f64 #s(literal 1/3 binary64) x #s(literal 1 binary64))) (cbrt.f64 x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (*.f64 x x) #s(literal -1/3 binary64)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 2/3 binary64))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 (*.f64 x x))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 2/3 binary64))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1 binary64) (cbrt.f64 (*.f64 x x))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64)))","(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal -1/2 binary64)) #s(literal 1/3 binary64)))"]],"memory":[[-1510128,6486624]],"oracle":[62.86772102304903],"outputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64)))"]],"repr":["binary64"],"time":9.365966796875,"times":[[3.495849609375,"(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))"],[4.659912109375,"x"]],"type":"regimes"},{"accuracy":[4.301366017784636],"baseline":[6.679088646846171],"branch":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))",6.679088646846168,1,"binary64"],["x",4.301366017784636,2,"binary64"]],"compiler":[[7,6],[1,1]],"count":[[13,2]],"inputs":[["(+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","(+.f64 (pow.f64 x #s(literal 1/3 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 x #s(literal -2/3 binary64)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (fma.f64 #s(literal 1/3 binary64) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x))))","(-.f64 #s(approx (cbrt (+ x 1)) (fma.f64 #s(literal 1/3 binary64) x #s(literal 1 binary64))) (cbrt.f64 x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (*.f64 x x) #s(literal -1/3 binary64)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 2/3 binary64))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 (*.f64 x x))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 2/3 binary64))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1 binary64) (cbrt.f64 (*.f64 x x))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))"]],"memory":[[-2607424,5545536]],"oracle":[62.86772102304903],"outputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 2/3 binary64))))"]],"repr":["binary64"],"time":7.774169921875,"times":[[3.135009765625,"(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))"],[3.60498046875,"x"]],"type":"regimes"},{"accuracy":[4.339729415671176],"baseline":[6.679088646846171],"branch":[["x",4.339729415671176,2,"binary64"]],"compiler":[[1,1]],"count":[[12,2]],"inputs":[["(+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","(+.f64 (pow.f64 x #s(literal 1/3 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 x #s(literal -2/3 binary64)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (fma.f64 #s(literal 1/3 binary64) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x))))","(-.f64 #s(approx (cbrt (+ x 1)) (fma.f64 #s(literal 1/3 binary64) x #s(literal 1 binary64))) (cbrt.f64 x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (*.f64 x x) #s(literal -1/3 binary64)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 2/3 binary64))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 (*.f64 x x))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 2/3 binary64))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1 binary64) (cbrt.f64 (*.f64 x x))) #s(literal 1/3 binary64)))"]],"memory":[[3314528,3314528]],"oracle":[62.86772102304903],"outputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 2/3 binary64))))"]],"repr":["binary64"],"time":4.161865234375,"times":[[3.25390625,"x"]],"type":"regimes"},{"accuracy":[4.407825580922348],"baseline":[6.679088646846171],"branch":[["x",4.407825580922348,2,"binary64"]],"compiler":[[1,1]],"count":[[10,2]],"inputs":[["(+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","(+.f64 (pow.f64 x #s(literal 1/3 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 x #s(literal -2/3 binary64)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (fma.f64 #s(literal 1/3 binary64) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x))))","(-.f64 #s(approx (cbrt (+ x 1)) (fma.f64 #s(literal 1/3 binary64) x #s(literal 1 binary64))) (cbrt.f64 x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (*.f64 x x) #s(literal -1/3 binary64)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 2/3 binary64))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 (*.f64 x x))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 2/3 binary64))) #s(literal 1/3 binary64)))"]],"memory":[[3080688,3080688]],"oracle":[62.86772102304903],"outputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 (*.f64 x x))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 2/3 binary64))))"]],"repr":["binary64"],"time":3.594970703125,"times":[[2.88818359375,"x"]],"type":"regimes"},{"accuracy":[6.679088646846161],"baseline":[6.679088646846171],"branch":[["x",6.679088646846161,1,"binary64"]],"compiler":[[1,1]],"count":[[8,1]],"inputs":[["(+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","(+.f64 (pow.f64 x #s(literal 1/3 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 x #s(literal -2/3 binary64)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (fma.f64 #s(literal 1/3 binary64) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x))))","(-.f64 #s(approx (cbrt (+ x 1)) (fma.f64 #s(literal 1/3 binary64) x #s(literal 1 binary64))) (cbrt.f64 x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (*.f64 x x) #s(literal -1/3 binary64)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 2/3 binary64))))"]],"memory":[[-5514144,2723344]],"oracle":[62.86772102304903],"outputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 x #s(literal -2/3 binary64)) #s(literal 1/3 binary64)))"]],"repr":["binary64"],"time":3.2060546875,"times":[[2.460205078125,"x"]],"type":"regimes"},{"accuracy":[60.639178094316925],"baseline":[60.63917809431693],"branch":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))",60.639178094316925,1,"binary64"],["x",60.639178094316925,1,"binary64"]],"compiler":[[7,6],[1,1]],"count":[[3,1]],"inputs":[["(+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","(+.f64 (pow.f64 x #s(literal 1/3 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))"]],"link":["."],"memory":[[3264224,3264224]],"name":["2cbrt (problem 3.3.4)"],"oracle":[62.86772102304903],"outputs":[["(+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))"]],"repr":["binary64"],"time":3.400146484375,"times":[[1.30908203125,"(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))"],[1.430908203125,"x"]],"type":"regimes"},{"bstep":[[12.722900390625,3.760835397241305e+154,4.2882062165431775e+155]],"compiler":[[13,12],[16,14],[13,12],[16,14],[13,12],[16,14],[13,12],[16,14],[13,12],[16,14],[13,12],[16,14],[9,9],[1,1]],"memory":[[-4701184,4243808]],"method":["binary-search"],"mixsample":[[1.635498046875,"adjust",800],[0.518798828125,"ival-add",0],[1.131591796875,"ival-cbrt",0],[0.160888671875,"ival-assert",0],[1.32666015625,"ival-sub",0],[0.462890625,"ival-add",400],[0.075927734375,"ival-true",0],[1.43017578125,"ival-cbrt",400],[0.054443359375,"exact",0]],"outcomes":[[9.18798828125,1,"valid",96]],"stop":[["narrow-enough",1]],"time":14.587890625,"type":"bsearch"},{"bstep":[[10.012939453125,6.2954170787063764e+153,1.740674507045574e+154]],"compiler":[[13,12],[16,14],[13,12],[16,14],[13,12],[16,14],[13,12],[16,14],[13,12],[16,14],[9,9],[1,1]],"memory":[[3498720,3498720]],"method":["binary-search"],"mixsample":[[1.302490234375,"adjust",800],[0.429931640625,"ival-add",0],[0.979736328125,"ival-cbrt",0],[0.036376953125,"ival-assert",0],[0.66796875,"ival-sub",0],[0.39111328125,"ival-add",400],[0.048583984375,"ival-true",0],[1.137451171875,"ival-cbrt",400],[0.0380859375,"exact",0]],"outcomes":[[6.925048828125,1,"valid",80]],"stop":[["narrow-enough",1]],"time":11.866943359375,"type":"bsearch"},{"bstep":[[0.634033203125,6.2954170787063764e+153,1.740674507045574e+154]],"compiler":[[13,12],[14,12],[13,12],[14,12],[13,12],[14,12],[13,12],[14,12],[13,12],[14,12],[9,9],[1,1]],"memory":[[437872,437872]],"method":["binary-search"],"stop":[["narrow-enough",1]],"time":1.0791015625,"type":"bsearch"},{"egraph":[[9,7288,183,0.016346075],[8,3307,183,0.041131795],[7,413,183,0.009190016],[6,157,183,0.002554228],[5,100,183,0.001365771],[4,84,183,0.001166743],[3,73,183,0.00110969],[2,67,183,0.000996644],[1,64,183,0.000977604],[0,56,183,0.000930646]],"inputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) #s(approx (pow (cbrt x) -1) (cbrt.f64 (/.f64 #s(literal 1 binary64) x)))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64)))","(if (<=.f64 x #s(literal 320000000000000011823214620178632493113893754554966030461528913668817397099111027110928419510573066478288376117991445354058784107186348933473478158344781824 binary64)) #s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64))) #s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 2/3 binary64)))))","(if (<=.f64 x #s(literal 13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) #s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))) #s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 2/3 binary64)))))","(if (<=.f64 x #s(literal 13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) #s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 (*.f64 x x)))) #s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 2/3 binary64)))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 x #s(literal -2/3 binary64)) #s(literal 1/3 binary64)))","(+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))"]],"memory":[[1391056,9523376]],"method":["egg-herbie"],"outputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) #s(approx (pow (cbrt x) -1) (cbrt.f64 (/.f64 #s(literal 1 binary64) x)))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) #s(approx (pow (cbrt x) -1) (cbrt.f64 (pow.f64 x #s(literal -1 binary64))))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64)))","(if (<=.f64 x #s(literal 320000000000000011823214620178632493113893754554966030461528913668817397099111027110928419510573066478288376117991445354058784107186348933473478158344781824 binary64)) #s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64))) #s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 2/3 binary64)))))","(if (<=.f64 x #s(literal 320000000000000011823214620178632493113893754554966030461528913668817397099111027110928419510573066478288376117991445354058784107186348933473478158344781824 binary64)) #s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) x)) #s(literal 1/3 binary64))) #s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 2/3 binary64)))))","(if (<=.f64 x #s(literal 13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) #s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))) #s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 2/3 binary64)))))","(if (<=.f64 x #s(literal 13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) #s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (pow.f64 (*.f64 x x) #s(literal -1 binary64))) #s(literal 1/3 binary64))) #s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 2/3 binary64)))))","(if (<=.f64 x #s(literal 13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) #s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 (*.f64 x x)))) #s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 2/3 binary64)))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 x #s(literal -2/3 binary64)) #s(literal 1/3 binary64)))","(+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))"]],"stop":[["node limit",1]],"time":92.97998046875,"type":"simplify"},{"compiler":[[183,58],[18,9],[4,4],[16,13],[8,7],[14,12],[16,13],[8,7],[14,12],[16,13],[8,7],[14,12],[16,13],[8,7],[16,13],[8,7],[14,12],[16,13],[8,7],[8,7],[16,13],[8,7],[16,13],[8,7],[14,12],[16,13],[8,7],[0,1],[16,13],[8,7]],"egraph":[[0,9157,97,0.0600637],[2,1267,101,0.031953327],[1,206,101,0.004830335],[0,56,109,0.001680739],[0,31,126,0.000317799],[0,8209,111,0.069369989],[3,5808,123,0.040081821],[2,686,123,0.021608615],[1,145,123,0.003621726],[0,46,125,0.001583139],[0,31,152,0.000294599],[0,8190,465,0.05065728],[4,6064,498,0.02524159],[3,2619,498,0.022482287],[2,902,501,0.009286653],[1,350,501,0.002646817],[0,146,539,0.001185744],[0,8021,775,0.066701414],[4,7070,826,0.019266904],[3,2986,826,0.024851022],[2,1223,832,0.009783912],[1,464,832,0.003550591],[0,192,893,0.001579533]],"memory":[[-5363504,11189232]],"stop":[["fuel",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1]],"time":1516.77197265625,"type":"soundness"},{"compiler":[[183,58],[183,58],[25,11],[25,11],[7,6],[7,6]],"memory":[[5406544,37447840]],"remove-preprocessing":[[],[],[],[],[],[],[],[],[],[]],"time":64.013916015625,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.010009765625,"type":"end"}]