[{"memory":[[15584,15584]],"time":0.031005859375,"type":"start"},{"compiler":[[16,12]],"memory":[[1522656,1522656]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.50309375,"unknown":0.0007278900146484375,"valid":0.49617835998535154}],[11,{"invalid":0.0,"precondition":0.50309375,"unknown":0.001455780029296875,"valid":0.49545046997070313}],[10,{"invalid":0.0,"precondition":0.5030937499999999,"unknown":0.00291156005859375,"valid":0.4939946899414063}],[9,{"invalid":0.0,"precondition":0.50309375,"unknown":0.0058231201171875,"valid":0.4910831298828125}],[8,{"invalid":0.0,"precondition":0.50309375,"unknown":0.011646240234375,"valid":0.485260009765625}],[7,{"invalid":0.0,"precondition":0.50309375,"unknown":0.02329248046875,"valid":0.47361376953125}],[6,{"invalid":0.0,"precondition":0.50309375,"unknown":0.0465849609375,"valid":0.4503212890625}],[5,{"invalid":0.0,"precondition":0.50309375,"unknown":0.093169921875,"valid":0.403736328125}],[4,{"invalid":0.0,"precondition":0.50309375,"unknown":0.18633984375,"valid":0.31056640625}],[3,{"invalid":0.0,"precondition":0.50309375,"unknown":0.3726796875,"valid":0.1242265625}],[2,{"invalid":0.0,"precondition":0.50309375,"unknown":0.49690625,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.50309375,"unknown":0.49690625,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.50309375,"unknown":0.49690625,"valid":0.0}]],"time":5.844970703125,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.50309375,"valid":0.49690625}],"memory":[[23671040,489205904]],"mixsample":[[619.87109375,"ival-tan",2000],[157.8994140625,"ival-div",0],[203.474365234375,"adjust",800],[24.779296875,"ival-div",400],[3.83349609375,"ival-div",1600],[5.521484375,"ival-assert",0],[6626.75439453125,"ival-tan",2400],[123.29345703125,"ival-sub",0],[88.846923828125,"ival-tan",0],[20.841796875,"ival-and",0],[0.02294921875,"ival-sub",400],[300.84619140625,"const",0],[40.154296875,"ival-tan",400],[76.219482421875,"adjust",2000],[1.610107421875,"ival-tan",1600],[810.536376953125,"ival-tan",800],[82.990966796875,"ival-div",1200],[0.059326171875,"ival-sub",800],[76.996337890625,"ival-div",800],[22.331298828125,"ival-div",2000],[8.428955078125,"exact",0],[67.27099609375,"ival-tan",1200],[109.290771484375,"ival-div",2400],[62.624755859375,"ival-<",0]],"outcomes":[[1576.471435546875,1,"valid",4213],[8373.421142578125,2,"valid",3948],[11.78271484375,0,"valid",95]],"time":10493.947998046875,"type":"sample"},{"compiler":[[8,6],[21,8],[21,8]],"confusion":[[256,0,0,0]],"explanations":[["-.f64","(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","cancellation",256,0,[],[[]]]],"fperrors":[["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))",256,0,false,0,false],["(/.f64 #s(literal 1 binary64) x)",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(tan.f64 x)",0,0,false,0,false],["(/.f64 #s(literal 1 binary64) (tan.f64 x))",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,256]],"maybe-confusion":[[256,0,0,0,0,0]],"memory":[[-38320,52587440]],"mixsample":[[67.081298828125,"ival-tan",2000],[8.679443359375,"ival-div",0],[10.962890625,"adjust",800],[1.40380859375,"ival-div",400],[0.307373046875,"ival-assert",0],[0.1328125,"ival-div",1600],[6.764892578125,"ival-sub",0],[333.45361328125,"ival-tan",2400],[5.175537109375,"ival-tan",0],[2.660888671875,"ival-tan",400],[4.161376953125,"adjust",2000],[37.543701171875,"ival-tan",800],[0.05908203125,"ival-tan",1600],[4.08251953125,"ival-div",1200],[4.289306640625,"ival-div",800],[0.5810546875,"ival-true",0],[1.391357421875,"ival-div",2000],[0.475830078125,"exact",0],[5.667236328125,"ival-div",2400],[3.848876953125,"ival-tan",1200]],"outcomes":[[72.85595703125,1,"valid",258],[456.395751953125,2,"valid",250],[0.260986328125,0,"valid",4]],"time":595.52001953125,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[8,6]],"egraph":[[0,257,8,0.000932497],[10,257,8,0.001381362],[9,235,8,0.001892828],[8,200,8,0.001485768],[7,137,8,0.001050364],[6,102,8,0.000899938],[5,63,8,0.000485151],[4,43,8,0.000278093],[3,31,8,0.000240706],[2,22,8,0.00017152],[1,14,8,0.000148891],[0,10,8,0.000139448],[0,6,8,9.6191e-5],[6,232,16,0.001337222],[5,230,16,0.001422472],[4,205,16,0.001715209],[3,131,16,0.001114459],[2,54,16,0.00058496],[1,21,19,0.000296689],[0,8,21,0.000155999]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))"]],"memory":[[-1390960,6432384]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) x))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1],["saturated",1]],"symmetry":[["(negabs x)"]],"time":34.886962890625,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[40816,40816]],"time":0.065185546875,"type":"eval"},{"alts":[["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","next",59.96997395783022,"binary64"]],"compiler":[[8,6]],"memory":[[312160,312160]],"time":0.468017578125,"type":"prune"},{"egraph":[[0,257,19,0.000994827],[10,257,19,0.001359106],[9,235,19,0.001782751],[8,200,19,0.001367531],[7,137,19,0.000997141],[6,102,19,0.00088188],[5,63,19,0.000507526],[4,43,19,0.000296191],[3,31,19,0.000321316],[2,22,19,0.000179485],[1,14,19,0.000146837],[0,10,19,0.000148444],[0,6,19,8.7443e-5]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(/.f64 #s(literal 1 binary64) (tan.f64 x))","(tan.f64 x)"]],"locations":[["(tan.f64 x)","cost-diff",0],["(/.f64 #s(literal 1 binary64) (tan.f64 x))","cost-diff",0],["(/.f64 #s(literal 1 binary64) x)","cost-diff",0],["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","cost-diff",0]],"memory":[[1042624,1042624]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(/.f64 #s(literal 1 binary64) (tan.f64 x))","(tan.f64 x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":15.554931640625,"type":"simplify"},{"compiler":[[21,8]],"locations":[["(/.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(tan.f64 x)","accuracy",0.00390625],["(/.f64 #s(literal 1 binary64) (tan.f64 x))","accuracy",0.0078125],["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","accuracy",59.94833950452337]],"memory":[[-3628448,13544816]],"mixsample":[[30.059326171875,"ival-tan",2000],[4.434326171875,"ival-div",0],[5.0029296875,"adjust",800],[0.787109375,"ival-div",400],[4.001708984375,"ival-assert",0],[0.060302734375,"ival-div",1600],[3.205810546875,"ival-sub",0],[159.058837890625,"ival-tan",2400],[2.422607421875,"ival-tan",0],[1.252685546875,"ival-tan",400],[1.74609375,"adjust",2000],[17.595947265625,"ival-tan",800],[0.03076171875,"ival-tan",1600],[2.242431640625,"ival-div",1200],[1.760009765625,"ival-div",800],[0.29736328125,"ival-true",0],[0.717529296875,"ival-div",2000],[0.333984375,"exact",0],[3.0703125,"ival-div",2400],[1.771484375,"ival-tan",1200]],"outcomes":[[37.942138671875,1,"valid",129],[219.238525390625,2,"valid",125],[0.1279296875,0,"valid",2]],"time":266.89990234375,"type":"localize"},{"count":[[4,16]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(/.f64 #s(literal 1 binary64) x)","(/.f64 #s(literal 1 binary64) (tan.f64 x))","(tan.f64 x)"]],"memory":[[1389216,1389216]],"outputs":[["(* 1/3 x)","(* x (+ 1/3 (* 1/45 (pow x 2))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))))","(/ 1 x)","(/ (+ 1 (* -1/3 (pow x 2))) x)","(/ (+ 1 (* (pow x 2) (- (* -1/45 (pow x 2)) 1/3))) x)","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (- (* -2/945 (pow x 2)) 1/45)) 1/3))) x)","x","(* x (+ 1 (* 1/3 (pow x 2))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","(* -1 (/ (cos x) (sin x)))","(- (/ 1 x) (/ (cos x) (sin x)))","(/ (cos x) (sin x))","(/ (sin x) (cos x))"]],"series":[[1.242919921875,"((- (/ 1 x) (/ 1 (tan x))) (/ 1 x) (/ 1 (tan x)) (tan x))","x","-inf"],[1.196044921875,"((- (/ 1 x) (/ 1 (tan x))) (/ 1 x) (/ 1 (tan x)) (tan x))","x","inf"],[1.156982421875,"((- (/ 1 x) (/ 1 (tan x))) (/ 1 x) (/ 1 (tan x)) (tan x))","x","0"]],"time":3.906982421875,"type":"series"},{"count":[[16,15]],"egraph":[[0,8214,143,0.093401004],[9,7281,161,0.019061405],[8,5095,161,0.022358769],[7,3955,161,0.013950085],[6,3691,161,0.010941151],[5,3100,161,0.012252382],[4,2099,161,0.010626045],[3,1335,161,0.007730062],[2,458,161,0.004284101],[1,179,167,0.001369674],[0,67,167,0.000580558]],"inputs":[["(* 1/3 x)","(* x (+ 1/3 (* 1/45 (pow x 2))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))))","(/ 1 x)","(/ (+ 1 (* -1/3 (pow x 2))) x)","(/ (+ 1 (* (pow x 2) (- (* -1/45 (pow x 2)) 1/3))) x)","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (- (* -2/945 (pow x 2)) 1/45)) 1/3))) x)","x","(* x (+ 1 (* 1/3 (pow x 2))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","(* -1 (/ (cos x) (sin x)))","(- (/ 1 x) (/ (cos x) (sin x)))","(/ (cos x) (sin x))","(/ (sin x) (cos x))"]],"memory":[[-2569632,38739312]],"method":["egg-herbie"],"outputs":[["(* 1/3 x)","(*.f64 #s(literal 1/3 binary64) x)","(* x (+ 1/3 (* 1/45 (pow x 2))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ (+ 1 (* -1/3 (pow x 2))) x)","(/.f64 (fma.f64 #s(literal -1/3 binary64) (*.f64 x x) #s(literal 1 binary64)) x)","(/ (+ 1 (* (pow x 2) (- (* -1/45 (pow x 2)) 1/3))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x)","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (- (* -2/945 (pow x 2)) 1/45)) 1/3))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x)","x","(* x (+ 1 (* 1/3 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/3 binary64) x)","(* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(fma.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal 2/15 binary64) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/3 binary64) x))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","(fma.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 #s(literal 17/315 binary64) (*.f64 x x) #s(literal 2/15 binary64)) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/3 binary64) x))","(* -1 (/ (cos x) (sin x)))","(/.f64 (neg.f64 (cos.f64 x)) (sin.f64 x))","(- (/ 1 x) (/ (cos x) (sin x)))","(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 (cos.f64 x) (sin.f64 x)))","(/ (cos x) (sin x))","(/.f64 (cos.f64 x) (sin.f64 x))","(/ (sin x) (cos x))","(/.f64 (sin.f64 x) (cos.f64 x))"]],"stop":[["iter limit",1],["node limit",1]],"time":337.7001953125,"type":"simplify"},{"count":[[4,277]],"egraph":[[0,9224,17,0.03547535],[3,5712,17,0.036427901],[2,454,17,0.019218261],[1,49,17,0.001958856],[0,10,17,0.000593668],[0,6,17,8.8626e-5]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(/.f64 #s(literal 1 binary64) x)","(/.f64 #s(literal 1 binary64) (tan.f64 x))","(tan.f64 x)"]],"memory":[[-724720,32404800]],"outputs":[["(*.f64 (/.f64 (-.f64 (tan.f64 x) x) (*.f64 x (sin.f64 x))) (cos.f64 x))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (/.f64 (-.f64 (tan.f64 x) x) x)) (tan.f64 x))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (-.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -4 binary64)) (pow.f64 (*.f64 x (tan.f64 x)) #s(literal -2 binary64))))) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (+.f64 (pow.f64 (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)) #s(literal 3 binary64)) (pow.f64 x #s(literal -6 binary64)))) (fma.f64 (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)) (-.f64 (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -4 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (-.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64)))) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (-.f64 (tan.f64 x) x)) (*.f64 x (tan.f64 x)))","(*.f64 (/.f64 (/.f64 (-.f64 (tan.f64 x) x) x) (sin.f64 x)) (neg.f64 (cos.f64 x)))","(*.f64 (/.f64 (/.f64 (-.f64 (tan.f64 x) x) x) (sin.f64 x)) (cos.f64 x))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) #s(literal 1 binary64)) (*.f64 (tan.f64 x) (/.f64 x (-.f64 (tan.f64 x) x))))","(*.f64 (*.f64 (-.f64 (tan.f64 x) x) (pow.f64 (tan.f64 x) #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (tan.f64 x) #s(literal -1/2 binary64))) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (tan.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64)))) (/.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) (-.f64 (tan.f64 x) x)) (-.f64 (tan.f64 x) x))","(*.f64 (*.f64 (-.f64 (tan.f64 x) x) #s(literal 1 binary64)) (/.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 (tan.f64 x) x) x) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(*.f64 (-.f64 (tan.f64 x) x) (/.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) x))","(*.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))) #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))))","(*.f64 (*.f64 (tan.f64 x) (/.f64 x (-.f64 (tan.f64 x) x))) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))))","(*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64))","(*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal 1 binary64))","(*.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (*.f64 (tan.f64 x) (/.f64 x (-.f64 (tan.f64 x) x))))","(*.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))) (/.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)))))","(*.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))) (*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) x) (-.f64 (tan.f64 x) x))","(*.f64 (-.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (pow.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))","(*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))","(pow.f64 (/.f64 (tan.f64 x) (/.f64 (-.f64 (tan.f64 x) x) x)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (tan.f64 x) (/.f64 x (-.f64 (tan.f64 x) x))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (tan.f64 x) (/.f64 x (-.f64 (tan.f64 x) x))) #s(literal -1 binary64))","(/.f64 (/.f64 (-.f64 (tan.f64 x) x) (tan.f64 x)) x)","(/.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) (*.f64 (tan.f64 x) (/.f64 x (-.f64 (tan.f64 x) x))))","(/.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (-.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64)))) (pow.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))) #s(literal -1 binary64)))","(/.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (-.f64 (tan.f64 x) x)) (/.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) x))","(/.f64 (/.f64 (/.f64 (-.f64 (tan.f64 x) x) x) (sin.f64 x)) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))","(/.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) #s(literal 1 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (tan.f64 x) #s(literal -4 binary64))) (*.f64 (tan.f64 x) (/.f64 x (-.f64 (tan.f64 x) x)))) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (tan.f64 x) #s(literal -6 binary64))) (*.f64 (tan.f64 x) (/.f64 x (-.f64 (tan.f64 x) x)))) (-.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -4 binary64)) (pow.f64 (*.f64 x (tan.f64 x)) #s(literal -2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (tan.f64 x) #s(literal -6 binary64))) (pow.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))) #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -9 binary64)) (pow.f64 (tan.f64 x) #s(literal -9 binary64))) (pow.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (*.f64 x (tan.f64 x)) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -6 binary64))) (pow.f64 x #s(literal -6 binary64))))","(/.f64 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) (*.f64 x x)) (/.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) x)) (-.f64 (tan.f64 x) x))","(/.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) x)) (fma.f64 x (-.f64 (tan.f64 x) x) (pow.f64 (tan.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (tan.f64 x) x) #s(literal -1 binary64)) (*.f64 x (tan.f64 x)))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (tan.f64 x) x) x)) (tan.f64 x))","(/.f64 (*.f64 (-.f64 (tan.f64 x) x) (pow.f64 (tan.f64 x) #s(literal -1 binary64))) x)","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))) #s(literal 2 binary64))) (fma.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (tan.f64 x) (/.f64 x (-.f64 (tan.f64 x) x))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)))) #s(literal 2 binary64))) (+.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))))))","(/.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))))))))","(/.f64 (neg.f64 (/.f64 (-.f64 (tan.f64 x) x) x)) (tan.f64 x))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (tan.f64 x) #s(literal -4 binary64))) #s(literal 1 binary64)) (pow.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (tan.f64 x) #s(literal -6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -4 binary64)) (pow.f64 (*.f64 x (tan.f64 x)) #s(literal -2 binary64)))) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (tan.f64 x) #s(literal -6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -9 binary64)) (pow.f64 (tan.f64 x) #s(literal -9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (*.f64 x (tan.f64 x)) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -6 binary64))) (pow.f64 x #s(literal -6 binary64))) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)))))","(/.f64 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) (*.f64 x x)) #s(literal -1 binary64)) (*.f64 (-.f64 (tan.f64 x) x) (*.f64 x (tan.f64 x))))","(/.f64 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) (*.f64 x x)) (pow.f64 (tan.f64 x) #s(literal -1 binary64))) (*.f64 (-.f64 (tan.f64 x) x) x))","(/.f64 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) (*.f64 x x)) (pow.f64 x #s(literal -1 binary64))) (*.f64 (-.f64 (tan.f64 x) x) (tan.f64 x)))","(/.f64 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) (*.f64 x x)) #s(literal 1 binary64)) (*.f64 (-.f64 (tan.f64 x) x) (*.f64 x (tan.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 x (-.f64 (tan.f64 x) x) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (*.f64 x (tan.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (tan.f64 x) #s(literal -1 binary64))) (*.f64 (fma.f64 x (-.f64 (tan.f64 x) x) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) x))","(/.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 x (-.f64 (tan.f64 x) x) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (tan.f64 x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 x (-.f64 (tan.f64 x) x) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (*.f64 x (tan.f64 x))))","(/.f64 (*.f64 (-.f64 (tan.f64 x) x) #s(literal 1 binary64)) (*.f64 x (tan.f64 x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) #s(literal 1 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)))) (*.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))) (pow.f64 (tan.f64 x) #s(literal -3 binary64)))) (-.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -4 binary64)) (pow.f64 (*.f64 x (tan.f64 x)) #s(literal -2 binary64)))))","(/.f64 (-.f64 (*.f64 (tan.f64 x) (*.f64 x (tan.f64 x))) (*.f64 (*.f64 x (tan.f64 x)) x)) (pow.f64 (*.f64 x (tan.f64 x)) #s(literal 2 binary64)))","(/.f64 (/.f64 (-.f64 (tan.f64 x) x) x) (tan.f64 x))","(/.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (tan.f64 x) #s(literal -4 binary64))) (*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))))","(/.f64 (-.f64 (tan.f64 x) x) (*.f64 x (tan.f64 x)))","(/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) (*.f64 x x)) (*.f64 (*.f64 x (tan.f64 x)) (-.f64 (tan.f64 x) x)))","(/.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (tan.f64 x) #s(literal -6 binary64))) (*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -4 binary64)) (pow.f64 (*.f64 x (tan.f64 x)) #s(literal -2 binary64))))))","(/.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (tan.f64 x) #s(literal -6 binary64))) (*.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))) (-.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (*.f64 (*.f64 x (tan.f64 x)) (fma.f64 x (-.f64 (tan.f64 x) x) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal -9 binary64)) (pow.f64 (tan.f64 x) #s(literal -9 binary64))) (*.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))) (+.f64 (+.f64 (pow.f64 (*.f64 x (tan.f64 x)) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -6 binary64))) (pow.f64 x #s(literal -6 binary64)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal 1 binary64))","(/.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) x))))","(/.f64 (-.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (tan.f64 x) (/.f64 x (-.f64 (tan.f64 x) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (tan.f64 x) (/.f64 (-.f64 (tan.f64 x) x) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (tan.f64 x) (/.f64 x (-.f64 (tan.f64 x) x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (tan.f64 x) (/.f64 x (-.f64 (tan.f64 x) x))))","(neg.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))","(fma.f64 (/.f64 (tan.f64 x) (*.f64 x (sin.f64 x))) (cos.f64 x) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -4 binary64)) (pow.f64 (*.f64 x (tan.f64 x)) #s(literal -2 binary64))))) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (+.f64 (pow.f64 (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)) #s(literal 3 binary64)) (pow.f64 x #s(literal -6 binary64)))) (fma.f64 (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)) (-.f64 (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -4 binary64))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (tan.f64 x) x)) (*.f64 x (tan.f64 x)) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64)))) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))))","(fma.f64 (/.f64 x (*.f64 x (sin.f64 x))) (cos.f64 x) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (cos.f64 x) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 x) #s(literal -1/2 binary64))) (pow.f64 (tan.f64 x) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (cos.f64 x) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1/2 binary64))) (pow.f64 (tan.f64 x) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (/.f64 (sin.f64 x) x) (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 (sin.f64 x) (tan.f64 x)) (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) x) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 x (tan.f64 x)) (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (/.f64 (tan.f64 x) x) (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 x #s(literal -3/2 binary64)) (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))))))","(fma.f64 (pow.f64 (tan.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (tan.f64 x) #s(literal -1/2 binary64)) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (tan.f64 x) #s(literal -1/2 binary64)) (pow.f64 (tan.f64 x) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 x (/.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) x) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))))))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (tan.f64 x) (/.f64 x (-.f64 (tan.f64 x) x))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))))","(fma.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (sin.f64 x) (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (*.f64 x (tan.f64 x))) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (/.f64 (tan.f64 x) x) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (tan.f64 x) (/.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) x) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (tan.f64 x)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))))","(fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(-.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 0 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))))","(-.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)))))","(-.f64 #s(literal 0 binary64) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))","(-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (*.f64 (tan.f64 x) (/.f64 x (-.f64 (tan.f64 x) x)))) #s(literal -1 binary64)))","(+.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 0 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(+.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))))","(+.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))))))","(+.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 (tan.f64 x) (*.f64 x (sin.f64 x))) (cos.f64 x))","(*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (/.f64 (sin.f64 x) x) (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (tan.f64 x)))","(*.f64 (/.f64 (sin.f64 x) (tan.f64 x)) (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (tan.f64 x) x) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (sin.f64 x) (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (*.f64 x (tan.f64 x))))","(*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (/.f64 (tan.f64 x) x))","(*.f64 (tan.f64 x) (/.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) x))","(*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)))","(pow.f64 (/.f64 (*.f64 x (tan.f64 x)) (tan.f64 x)) #s(literal -1 binary64))","(pow.f64 (*.f64 (*.f64 x (tan.f64 x)) (pow.f64 (tan.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (*.f64 x (tan.f64 x))) #s(literal -1 binary64))","(pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal -1/2 binary64))","(pow.f64 x #s(literal -1 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))","(/.f64 (/.f64 (tan.f64 x) x) (tan.f64 x))","(/.f64 #s(literal -1 binary64) x)","(/.f64 (sin.f64 x) (*.f64 (*.f64 x (tan.f64 x)) (neg.f64 (cos.f64 x))))","(/.f64 (sin.f64 x) (*.f64 (*.f64 x (tan.f64 x)) (cos.f64 x)))","(/.f64 (tan.f64 x) (*.f64 (*.f64 x (tan.f64 x)) #s(literal -1 binary64)))","(/.f64 (tan.f64 x) (*.f64 x (tan.f64 x)))","(/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x (tan.f64 x)) (tan.f64 x)))","(/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x (tan.f64 x)) (pow.f64 (tan.f64 x) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) x)","(neg.f64 (pow.f64 x #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -1 binary64)))","(exp.f64 (+.f64 (log.f64 (tan.f64 x)) (neg.f64 (log.f64 (*.f64 x (tan.f64 x))))))","(exp.f64 (+.f64 (log.f64 (tan.f64 x)) (*.f64 (log.f64 (*.f64 x (tan.f64 x))) #s(literal -1 binary64))))","(exp.f64 (fma.f64 (log.f64 x) #s(literal -1/2 binary64) (*.f64 (log.f64 x) #s(literal -1/2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (log.f64 x)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) #s(literal -1/2 binary64)))","(exp.f64 (neg.f64 (log.f64 x)))","(*.f64 (/.f64 x (*.f64 x (sin.f64 x))) (cos.f64 x))","(*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (cos.f64 x))","(*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 x) #s(literal -1/2 binary64))) (pow.f64 (tan.f64 x) #s(literal -1/2 binary64)))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (cos.f64 x))","(*.f64 (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1/2 binary64))) (pow.f64 (tan.f64 x) #s(literal -1/2 binary64)))","(*.f64 (/.f64 x (tan.f64 x)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x))","(*.f64 (pow.f64 (tan.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (tan.f64 x) #s(literal -1/2 binary64)) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1/2 binary64))))","(*.f64 (pow.f64 (tan.f64 x) #s(literal -1/2 binary64)) (pow.f64 (tan.f64 x) #s(literal -1/2 binary64)))","(*.f64 x (/.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) x))","(*.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (tan.f64 x)))","(*.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(pow.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x (tan.f64 x))) #s(literal -1 binary64))","(pow.f64 (*.f64 (*.f64 x (tan.f64 x)) (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 x (tan.f64 x)) x) #s(literal -1 binary64))","(pow.f64 (pow.f64 (tan.f64 x) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))","(pow.f64 (tan.f64 x) #s(literal -1 binary64))","(/.f64 (/.f64 x (tan.f64 x)) x)","(/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))","(/.f64 (neg.f64 (cos.f64 x)) (sin.f64 x))","(/.f64 x (*.f64 (*.f64 x (tan.f64 x)) #s(literal -1 binary64)))","(/.f64 x (*.f64 x (tan.f64 x)))","(/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64))))))","(/.f64 #s(literal -1 binary64) (tan.f64 x))","(/.f64 (cos.f64 x) (sin.f64 x))","(/.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x (tan.f64 x)) (pow.f64 x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x (tan.f64 x)) x))","(/.f64 #s(literal 1 binary64) (tan.f64 x))","(neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(exp.f64 (fma.f64 (log.f64 (tan.f64 x)) #s(literal -1/2 binary64) (*.f64 (log.f64 (tan.f64 x)) #s(literal -1/2 binary64))))","(exp.f64 (+.f64 (log.f64 x) (neg.f64 (log.f64 (*.f64 x (tan.f64 x))))))","(exp.f64 (+.f64 (log.f64 x) (*.f64 (log.f64 (*.f64 x (tan.f64 x))) #s(literal -1 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (tan.f64 x)) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (neg.f64 (log.f64 (tan.f64 x))) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (tan.f64 x) #s(literal -1/2 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)))","(exp.f64 (neg.f64 (log.f64 (tan.f64 x))))","(+.f64 #s(literal 0 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))","(*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (tan.f64 x))","(*.f64 (sin.f64 x) (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (sin.f64 x) (*.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (sin.f64 x) (neg.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64))))","(*.f64 (sin.f64 x) (pow.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))","(*.f64 (tan.f64 x) #s(literal -1 binary64))","(*.f64 (tan.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (tan.f64 x))","(pow.f64 (*.f64 (pow.f64 (tan.f64 x) #s(literal -1/2 binary64)) (tan.f64 x)) #s(literal 2 binary64))","(pow.f64 (*.f64 (tan.f64 x) (pow.f64 (tan.f64 x) #s(literal -1/2 binary64))) #s(literal 2 binary64))","(pow.f64 (pow.f64 (tan.f64 x) #s(literal -1/2 binary64)) #s(literal -2 binary64))","(pow.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (tan.f64 x) #s(literal 1 binary64))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x))","(/.f64 (pow.f64 (tan.f64 x) #s(literal 1/2 binary64)) (pow.f64 (tan.f64 x) #s(literal -1/2 binary64)))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (tan.f64 x))","(/.f64 (/.f64 (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) (*.f64 #s(literal 0 binary64) (tan.f64 x)))))","(/.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(/.f64 (sin.f64 x) (neg.f64 (neg.f64 (cos.f64 x))))","(/.f64 (sin.f64 x) (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))","(/.f64 (sin.f64 x) (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))","(/.f64 (sin.f64 x) (neg.f64 (cos.f64 x)))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (tan.f64 x) #s(literal -1 binary64))","(/.f64 (tan.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(neg.f64 (tan.f64 x))","(tan.f64 x)","(-.f64 #s(literal 0 binary64) (tan.f64 x))","(exp.f64 (*.f64 (neg.f64 (log.f64 (tan.f64 x))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (tan.f64 x)) #s(literal 1 binary64)))","(exp.f64 (log.f64 (tan.f64 x)))","(+.f64 #s(literal 0 binary64) (tan.f64 x))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":183.751953125,"type":"rewrite"},{"compiler":[[5199,765]],"memory":[[1018288,25474800]],"time":32.7119140625,"type":"eval"},{"alts":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","next",0.3359375,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","next",0.39246003511156136,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","next",0.6144691813284442,"binary64"]],"compiler":[[22,14],[17,12],[12,9]],"count":[[293,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[292,3],"picked":[1,0]}],"memory":[[3018880,11292080]],"min-error":[[0.3359375,"binary64"]],"time":4.361083984375,"type":"prune"},{"egraph":[[0,2724,113,0.013209678],[14,2724,113,0.019734326],[13,2723,113,0.025564654],[12,2721,113,0.01534537],[11,2721,113,0.011201018],[10,2610,113,0.013527638],[9,2026,113,0.018279723],[8,603,113,0.008201529],[7,347,113,0.002375636],[6,312,113,0.001557705],[5,270,113,0.001183579],[4,241,113,0.001165121],[3,147,113,0.001022059],[2,83,113,0.000580523],[1,48,113,0.000395568],[0,29,113,0.000316525],[0,19,113,0.000189761]],"inputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","(*.f64 #s(literal 1/3 binary64) x)","#s(literal 1/3 binary64)","x","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","(fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))","(*.f64 x x)","x","#s(literal 1/45 binary64)","#s(literal 1/3 binary64)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","(*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))","(fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))","#s(literal 2/945 binary64)","(*.f64 x x)","x","#s(literal 1/45 binary64)","#s(literal 1/3 binary64)"]],"locations":[["(fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))","cost-diff",0],["(fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))","cost-diff",0],["(*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","cost-diff",0],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","cost-diff",0],["(*.f64 x x)","cost-diff",0],["(fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))","cost-diff",0],["(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","cost-diff",0],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","cost-diff",0],["(*.f64 #s(literal 1/3 binary64) x)","cost-diff",0],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","cost-diff",0]],"memory":[[-624176,7128464]],"method":["egg-herbie"],"outputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","(*.f64 #s(literal 1/3 binary64) x)","#s(literal 1/3 binary64)","x","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","(*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x)","(fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))","(fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))","(*.f64 x x)","x","#s(literal 1/45 binary64)","#s(literal 1/3 binary64)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","(*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))","(fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))","#s(literal 2/945 binary64)","(*.f64 x x)","x","#s(literal 1/45 binary64)","#s(literal 1/3 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":162.56591796875,"type":"simplify"},{"compiler":[[95,21]],"locations":[["(*.f64 x x)","accuracy",0.0],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","accuracy",0.0],["(fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))","accuracy",0.01171875],["(*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","accuracy",0.3359375],["(*.f64 x x)","accuracy",0.0],["(fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))","accuracy",0.00390625],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","accuracy",0.05652005085870934],["(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","accuracy",0.33984375],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","accuracy",0.2863111282843665],["(*.f64 #s(literal 1/3 binary64) x)","accuracy",0.3359375]],"memory":[[1383104,35037168]],"mixsample":[[30.530029296875,"ival-tan",2000],[3.99951171875,"ival-div",0],[10.002197265625,"adjust",800],[0.68896484375,"ival-div",400],[0.140380859375,"ival-assert",0],[0.066650390625,"ival-div",1600],[3.228515625,"ival-sub",0],[159.470703125,"ival-tan",2400],[3.27978515625,"ival-tan",0],[15.861572265625,"const",0],[1.3173828125,"ival-tan",400],[4.6142578125,"adjust",2000],[16.896728515625,"ival-tan",800],[0.033935546875,"ival-tan",1600],[2.15478515625,"ival-div",1200],[8.0830078125,"ival-add",0],[18.726318359375,"ival-mult",0],[1.97314453125,"ival-div",800],[0.212158203125,"ival-true",0],[0.626953125,"ival-div",2000],[0.2197265625,"exact",0],[1.802490234375,"ival-tan",1200],[2.896240234375,"ival-div",2400]],"outcomes":[[72.180419921875,1,"valid",129],[249.861328125,2,"valid",125],[0.41015625,0,"valid",2]],"time":342.1650390625,"type":"localize"},{"count":[[10,25]],"inputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","(*.f64 #s(literal 1/3 binary64) x)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","(fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))","(*.f64 x x)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","(*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))","(fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))"]],"memory":[[3142736,3142736]],"outputs":[["(* 1/3 x)","(* x (+ 1/3 (* 1/45 (pow x 2))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))))","1/3","(+ 1/3 (* 1/45 (pow x 2)))","(pow x 2)","(+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2)))))","1/45","(+ 1/45 (* 2/945 (pow x 2)))","(* -1 (/ (cos x) (sin x)))","(- (/ 1 x) (/ (cos x) (sin x)))","(* 1/45 (pow x 3))","(* (pow x 3) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(* 1/45 (pow x 2))","(* (pow x 2) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(* 2/945 (pow x 5))","(* (pow x 5) (+ 2/945 (* 1/45 (/ 1 (pow x 2)))))","(* (pow x 5) (+ 2/945 (+ (/ 1/3 (pow x 4)) (* 1/45 (/ 1 (pow x 2))))))","(* 2/945 (pow x 4))","(* (pow x 4) (+ 2/945 (* 1/45 (/ 1 (pow x 2)))))","(* (pow x 4) (+ 2/945 (+ (/ 1/3 (pow x 4)) (* 1/45 (/ 1 (pow x 2))))))","(* 2/945 (pow x 2))","(* (pow x 2) (+ 2/945 (* 1/45 (/ 1 (pow x 2)))))","(* -1 (* (pow x 5) (- (* -1 (/ (+ 1/45 (* 1/3 (/ 1 (pow x 2)))) (pow x 2))) 2/945)))"]],"series":[[1.9619140625,"((- (/ 1 x) (/ 1 (tan x))) (* 1/3 x) (- (/ 1 x) (/ 1 (tan x))) (* (+ (* (* x x) 1/45) 1/3) x) (+ (* (* x x) 1/45) 1/3) (* x x) (- (/ 1 x) (/ 1 (tan x))) (* (+ (* (+ (* 2/945 (* x x)) 1/45) (* x x)) 1/3) x) (+ (* (+ (* 2/945 (* x x)) 1/45) (* x x)) 1/3) (+ (* 2/945 (* x x)) 1/45))","x","-inf"],[2.14501953125,"((- (/ 1 x) (/ 1 (tan x))) (* 1/3 x) (- (/ 1 x) (/ 1 (tan x))) (* (+ (* (* x x) 1/45) 1/3) x) (+ (* (* x x) 1/45) 1/3) (* x x) (- (/ 1 x) (/ 1 (tan x))) (* (+ (* (+ (* 2/945 (* x x)) 1/45) (* x x)) 1/3) x) (+ (* (+ (* 2/945 (* x x)) 1/45) (* x x)) 1/3) (+ (* 2/945 (* x x)) 1/45))","x","inf"],[2.08984375,"((- (/ 1 x) (/ 1 (tan x))) (* 1/3 x) (- (/ 1 x) (/ 1 (tan x))) (* (+ (* (* x x) 1/45) 1/3) x) (+ (* (* x x) 1/45) 1/3) (* x x) (- (/ 1 x) (/ 1 (tan x))) (* (+ (* (+ (* 2/945 (* x x)) 1/45) (* x x)) 1/3) x) (+ (* (+ (* 2/945 (* x x)) 1/45) (* x x)) 1/3) (+ (* 2/945 (* x x)) 1/45))","x","0"]],"time":6.803955078125,"type":"series"},{"count":[[25,25]],"egraph":[[0,8113,187,0.062886597],[5,5679,208,0.024991186],[4,2330,208,0.018270992],[3,1158,208,0.00921553],[2,478,208,0.003748329],[1,185,208,0.001714234],[0,60,208,0.000643112]],"inputs":[["(* 1/3 x)","(* x (+ 1/3 (* 1/45 (pow x 2))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))))","1/3","(+ 1/3 (* 1/45 (pow x 2)))","(pow x 2)","(+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2)))))","1/45","(+ 1/45 (* 2/945 (pow x 2)))","(* -1 (/ (cos x) (sin x)))","(- (/ 1 x) (/ (cos x) (sin x)))","(* 1/45 (pow x 3))","(* (pow x 3) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(* 1/45 (pow x 2))","(* (pow x 2) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(* 2/945 (pow x 5))","(* (pow x 5) (+ 2/945 (* 1/45 (/ 1 (pow x 2)))))","(* (pow x 5) (+ 2/945 (+ (/ 1/3 (pow x 4)) (* 1/45 (/ 1 (pow x 2))))))","(* 2/945 (pow x 4))","(* (pow x 4) (+ 2/945 (* 1/45 (/ 1 (pow x 2)))))","(* (pow x 4) (+ 2/945 (+ (/ 1/3 (pow x 4)) (* 1/45 (/ 1 (pow x 2))))))","(* 2/945 (pow x 2))","(* (pow x 2) (+ 2/945 (* 1/45 (/ 1 (pow x 2)))))","(* -1 (* (pow x 5) (- (* -1 (/ (+ 1/45 (* 1/3 (/ 1 (pow x 2)))) (pow x 2))) 2/945)))"]],"memory":[[1269008,32369584]],"method":["egg-herbie"],"outputs":[["(* 1/3 x)","(*.f64 #s(literal 1/3 binary64) x)","(* x (+ 1/3 (* 1/45 (pow x 2))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","1/3","#s(literal 1/3 binary64)","(+ 1/3 (* 1/45 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))","(pow x 2)","(*.f64 x x)","(+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))","1/45","#s(literal 1/45 binary64)","(+ 1/45 (* 2/945 (pow x 2)))","(fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))","(* -1 (/ (cos x) (sin x)))","(/.f64 (neg.f64 (cos.f64 x)) (sin.f64 x))","(- (/ 1 x) (/ (cos x) (sin x)))","(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 (cos.f64 x) (sin.f64 x)))","(* 1/45 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))","(* (pow x 3) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","(* 1/45 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/45 binary64))","(* (pow x 2) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))","(* 2/945 (pow x 5))","(*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal 2/945 binary64))","(* (pow x 5) (+ 2/945 (* 1/45 (/ 1 (pow x 2)))))","(*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)))","(* (pow x 5) (+ 2/945 (+ (/ 1/3 (pow x 4)) (* 1/45 (/ 1 (pow x 2))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(* 2/945 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2/945 binary64))","(* (pow x 4) (+ 2/945 (* 1/45 (/ 1 (pow x 2)))))","(*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x)","(* (pow x 4) (+ 2/945 (+ (/ 1/3 (pow x 4)) (* 1/45 (/ 1 (pow x 2))))))","(fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))","(* 2/945 (pow x 2))","(*.f64 #s(literal 2/945 binary64) (*.f64 x x))","(* (pow x 2) (+ 2/945 (* 1/45 (/ 1 (pow x 2)))))","(fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))","(* -1 (* (pow x 5) (- (* -1 (/ (+ 1/45 (* 1/3 (/ 1 (pow x 2)))) (pow x 2))) 2/945)))","(*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)"]],"stop":[["iter limit",1],["node limit",1]],"time":197.362060546875,"type":"simplify"},{"count":[[10,309]],"egraph":[[0,8775,101,0.078911239],[2,933,101,0.029023628],[1,123,101,0.003794083],[0,29,101,0.001154656],[0,19,101,0.000197649]],"inputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","(*.f64 #s(literal 1/3 binary64) x)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","(fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))","(*.f64 x x)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","(*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))","(fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))"]],"memory":[[1700096,51044736]],"outputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","(*.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 1 binary64))","(*.f64 #s(literal 1/3 binary64) x)","(*.f64 x #s(literal 1/3 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/3 binary64) x))","(/.f64 (*.f64 (neg.f64 x) #s(literal 1/3 binary64)) #s(literal -1 binary64))","(/.f64 (*.f64 #s(literal 1/3 binary64) (neg.f64 x)) #s(literal -1 binary64))","(/.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 1 binary64))","(/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal -1 binary64)))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x))","(*.f64 (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) #s(literal 1 binary64)) x)","(*.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) x) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x)))) #s(literal -1 binary64)))","(*.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))) (pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) (*.f64 (pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (*.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x)))) #s(literal -1 binary64)) x))","(*.f64 (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x) #s(literal 1 binary64))","(*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x)","(*.f64 x (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x))","(/.f64 (*.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64))) x) (-.f64 #s(literal 1/3 binary64) (*.f64 #s(literal 1/45 binary64) (*.f64 x x))))","(/.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))) x) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(/.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64))) x) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x))))))","(/.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))) #s(literal -1 binary64))","(/.f64 (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (neg.f64 x)) #s(literal -1 binary64))","(/.f64 (*.f64 x (-.f64 #s(literal 1/9 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64)))) (-.f64 #s(literal 1/3 binary64) (*.f64 #s(literal 1/45 binary64) (*.f64 x x))))","(/.f64 (*.f64 x (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)))) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(/.f64 (*.f64 x (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x))))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))) (*.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 #s(literal 1/3 binary64) x))) (-.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 #s(literal 1/3 binary64) x)))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 #s(literal 1/3 binary64) x)) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)))) (-.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))))","(/.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64))) (fma.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (-.f64 (*.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 #s(literal 1/3 binary64) x)) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 #s(literal 1/3 binary64) x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64)) (pow.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 #s(literal 1/3 binary64) x) (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))) (*.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) x)) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) x)) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x))))))","(/.f64 (neg.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)))) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(/.f64 (neg.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x))))))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) x) (+.f64 #s(literal 1/9 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) x) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x)))))","(/.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)))","(/.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64))) (+.f64 #s(literal 1/9 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))))","(/.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x)))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x) #s(literal 1 binary64))","(/.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (pow.f64 x #s(literal -1 binary64)))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x)))) (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x)))) (*.f64 x (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)))))","(fma.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) #s(literal 1 binary64) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 (*.f64 #s(literal 1/45 binary64) x) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) x (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 #s(literal 1/45 binary64) (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 (*.f64 x x) (*.f64 #s(literal 1/45 binary64) x) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)))","(fma.f64 #s(literal 1/3 binary64) x (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)))","(fma.f64 x (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 x #s(literal 1/3 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)))","(fma.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)))","(+.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 #s(literal 1/3 binary64) x))","(+.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)))","(*.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/3 binary64) (*.f64 #s(literal 1/45 binary64) (*.f64 x x)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x)))))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) (pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/9 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64))))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) #s(literal 4 binary64)) #s(literal 1/81 binary64)) (pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal -1 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal 1/9 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 3 binary64)) #s(literal 1/8303765625 binary64) #s(literal -1/729 binary64)) (pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) #s(literal 4 binary64)) #s(literal 1/81 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/18225 binary64))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 3 binary64)) #s(literal 1/8303765625 binary64) #s(literal -1/729 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x)))) #s(literal -1 binary64))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal -1/27 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 3 binary64)) #s(literal 1/756680642578125 binary64) #s(literal 1/19683 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x)))) #s(literal -1 binary64))) (fma.f64 (pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 3 binary64)) #s(literal 1/8303765625 binary64) (-.f64 #s(literal 1/729 binary64) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2460375 binary64)))))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) #s(literal 1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x)))))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) #s(literal 1 binary64)) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64)) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))) (/.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64)) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)))) (*.f64 (/.f64 #s(literal -1/9 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))) (/.f64 #s(literal -1/9 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))) (+.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64)) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))) (/.f64 #s(literal -1/9 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64)) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal -1/9 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64)) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))) (/.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64)) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))) (fma.f64 (/.f64 #s(literal -1/9 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))) (/.f64 #s(literal -1/9 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))) (*.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64)) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))) (/.f64 #s(literal -1/9 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64)))) (neg.f64 (-.f64 #s(literal 1/3 binary64) (*.f64 #s(literal 1/45 binary64) (*.f64 x x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)))) (neg.f64 (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x)))))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64)) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))) (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal 1/9 binary64))) (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))))","(/.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64))) (-.f64 #s(literal 1/3 binary64) (*.f64 #s(literal 1/45 binary64) (*.f64 x x))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64))) (neg.f64 (+.f64 #s(literal 1/9 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)))","(/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (+.f64 #s(literal 1/9 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (*.f64 #s(literal 1/45 binary64) (*.f64 x x))) (-.f64 #s(literal 1/9 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/9 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x))))))","(neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))","(neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x)))))))","(fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal 1/3 binary64))","(fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64)) (pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal -1/9 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))))","(fma.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) #s(literal 1 binary64) #s(literal 1/3 binary64))","(fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))","(fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))","(fma.f64 x (*.f64 #s(literal 1/45 binary64) x) #s(literal 1/3 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) #s(literal 1/3 binary64))","(-.f64 (/.f64 #s(literal 1/9 binary64) (-.f64 #s(literal 1/3 binary64) (*.f64 #s(literal 1/45 binary64) (*.f64 x x)))) (/.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64)) (-.f64 #s(literal 1/3 binary64) (*.f64 #s(literal 1/45 binary64) (*.f64 x x)))))","(-.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64)) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))) (/.f64 #s(literal -1/9 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))","(+.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64)) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))) (neg.f64 (/.f64 #s(literal -1/9 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))))","(+.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) #s(literal 1/3 binary64))","(+.f64 #s(literal 1/3 binary64) (*.f64 #s(literal 1/45 binary64) (*.f64 x x)))","(*.f64 (neg.f64 x) (neg.f64 x))","(*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) x))","(*.f64 (*.f64 x x) #s(literal 1 binary64))","(*.f64 x x)","(*.f64 #s(literal 1 binary64) (*.f64 x x))","(pow.f64 (neg.f64 x) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1 binary64))","(pow.f64 x #s(literal 2 binary64))","(/.f64 (*.f64 (neg.f64 x) x) #s(literal -1 binary64))","(/.f64 (*.f64 x x) #s(literal 1 binary64))","(/.f64 x (pow.f64 x #s(literal -1 binary64)))","(neg.f64 (*.f64 (neg.f64 x) x))","(exp.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) #s(literal 1 binary64)) x)","(*.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (pow.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) x) (pow.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64)) x)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (pow.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64)) x)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (*.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) (*.f64 (pow.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64)) x)) #s(literal -1 binary64)) x))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x) #s(literal 1 binary64))","(*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(*.f64 x (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","(/.f64 (*.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) x) (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x)))","(/.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) x) (fma.f64 (*.f64 (neg.f64 x) x) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 1/3 binary64)))","(/.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) x) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64)) x))))","(/.f64 (*.f64 (neg.f64 x) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))) #s(literal -1 binary64))","(/.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) (neg.f64 x)) #s(literal -1 binary64))","(/.f64 (*.f64 x (-.f64 #s(literal 1/9 binary64) (*.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))))) (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x)))","(/.f64 (*.f64 x (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))) (fma.f64 (*.f64 (neg.f64 x) x) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 1/3 binary64)))","(/.f64 (*.f64 x (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64)) x))))","(/.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))) (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)))) (*.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 #s(literal 1/3 binary64) x))) (-.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))) (*.f64 #s(literal 1/3 binary64) x)))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 #s(literal 1/3 binary64) x)) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))) (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))))) (-.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64))) (fma.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))) (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))) (-.f64 (*.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 #s(literal 1/3 binary64) x)) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))) (*.f64 #s(literal 1/3 binary64) x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64)) (pow.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 #s(literal 1/3 binary64) x) (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))) (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)))) (*.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x)) (fma.f64 (*.f64 (neg.f64 x) x) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 1/3 binary64)))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) x)) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64)) x))))","(/.f64 (neg.f64 (*.f64 x (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))) (fma.f64 (*.f64 (neg.f64 x) x) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 1/3 binary64)))","(/.f64 (neg.f64 (*.f64 x (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64)) x))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) x) (+.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) x) (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64)) x)))","(/.f64 (*.f64 x (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)))","(/.f64 (*.f64 x (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (+.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)))))","(/.f64 (*.f64 x (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64)) x)))","(/.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x) #s(literal 1 binary64))","(/.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) (pow.f64 x #s(literal -1 binary64)))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64)) x)) (*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64)) x)) (*.f64 x (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)))))","(fma.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))) #s(literal 1 binary64) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x) x (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 (*.f64 x x) (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))))","(fma.f64 #s(literal 1/3 binary64) x (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))))","(fma.f64 x (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 x #s(literal 1/3 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))))","(fma.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))))","(+.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))) (*.f64 #s(literal 1/3 binary64) x))","(+.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))))","(*.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (neg.f64 x) x) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 1/3 binary64))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64)) x)))))","(*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))))))","(*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) (pow.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64)) x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x) #s(literal 4 binary64)) #s(literal 1/81 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal -1 binary64))) (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x) #s(literal 6 binary64)) #s(literal 1/729 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal -1 binary64))) (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x) #s(literal 4 binary64)) (+.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x) #s(literal 6 binary64)) #s(literal 1/729 binary64)) (pow.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64)) x)) #s(literal -1 binary64))) (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x) #s(literal 9 binary64)) #s(literal 1/19683 binary64)) (pow.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64)) x)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x) #s(literal 6 binary64)) #s(literal 1/729 binary64)) (*.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal 1 binary64)) (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64)) x)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))) (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)))) (*.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))))) (+.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))) (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))) (fma.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))) (*.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))) (neg.f64 (fma.f64 (*.f64 (neg.f64 x) x) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 1/3 binary64))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)))) (neg.f64 (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64)) x)))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal 1/9 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))))","(/.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (fma.f64 (*.f64 (neg.f64 x) x) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 1/3 binary64)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (neg.f64 (+.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64)) x))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)))","(/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) (+.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64)) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x)) (-.f64 #s(literal 1/9 binary64) (*.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)))) (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64)) x))))","(neg.f64 (/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (fma.f64 (*.f64 (neg.f64 x) x) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 1/3 binary64))))","(neg.f64 (/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64)) x)))))","(fma.f64 (*.f64 (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/2025 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64)) #s(literal -1 binary64)) #s(literal 1/3 binary64))","(fma.f64 (*.f64 (fma.f64 #s(literal 8/843908625 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/2025 binary64) (*.f64 #s(literal 2/42525 binary64) (*.f64 x x)))) #s(literal -1 binary64)) #s(literal 1/3 binary64))","(fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/2025 binary64))) (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64)) #s(literal -1 binary64)) #s(literal 1/3 binary64))","(fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 8/843908625 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64))) (pow.f64 (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/2025 binary64) (*.f64 #s(literal 2/42525 binary64) (*.f64 x x)))) #s(literal -1 binary64)) #s(literal 1/3 binary64))","(fma.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 2/945 binary64)) x (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2/945 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(fma.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/3 binary64) (*.f64 #s(literal 1/45 binary64) (*.f64 x x)))) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2/945 binary64)))","(fma.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2/945 binary64)))","(fma.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x)))))) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2/945 binary64)))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 2/945 binary64) x) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(fma.f64 (*.f64 #s(literal 1/45 binary64) x) x (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2/945 binary64) #s(literal 1/3 binary64)))","(fma.f64 (*.f64 #s(literal 2/945 binary64) x) (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(fma.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x #s(literal 1/3 binary64))","(fma.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) (pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2/945 binary64)))","(fma.f64 (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/2025 binary64)) (*.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64)) #s(literal -1 binary64)) (*.f64 x x)) #s(literal 1/3 binary64))","(fma.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/9 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64))))) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2/945 binary64)))","(fma.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x)))) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2/945 binary64)))","(fma.f64 (fma.f64 #s(literal 8/843908625 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64)) (*.f64 (pow.f64 (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/2025 binary64) (*.f64 #s(literal 2/42525 binary64) (*.f64 x x)))) #s(literal -1 binary64)) (*.f64 x x)) #s(literal 1/3 binary64))","(fma.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)))))","(fma.f64 (*.f64 #s(literal 2/945 binary64) (*.f64 x x)) (*.f64 x x) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(fma.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) #s(literal 1 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2/945 binary64) #s(literal 1/3 binary64)))","(fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x) #s(literal 1 binary64) #s(literal 1/3 binary64))","(fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))","(fma.f64 #s(literal 2/945 binary64) (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(fma.f64 #s(literal 1/45 binary64) (*.f64 x x) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2/945 binary64) #s(literal 1/3 binary64)))","(fma.f64 (*.f64 x x) (*.f64 #s(literal 2/945 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(fma.f64 (*.f64 x x) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 1/3 binary64))","(fma.f64 (*.f64 x x) #s(literal 1/45 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2/945 binary64) #s(literal 1/3 binary64)))","(fma.f64 x (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 2/945 binary64)) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(fma.f64 x (*.f64 #s(literal 1/45 binary64) x) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2/945 binary64) #s(literal 1/3 binary64)))","(fma.f64 x (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2/945 binary64) #s(literal 1/3 binary64)))","(fma.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x) #s(literal 1/3 binary64))","(fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2/945 binary64)))","(-.f64 (/.f64 #s(literal 1/9 binary64) (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x))) (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x))))","(-.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))))","(+.f64 (+.f64 #s(literal 1/3 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2/945 binary64))) (*.f64 #s(literal 1/45 binary64) (*.f64 x x)))","(+.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2/945 binary64)) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(+.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)))))","(+.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2/945 binary64) #s(literal 1/3 binary64)))","(+.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x) #s(literal 1/3 binary64))","(+.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2/945 binary64)))","(+.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x))","(*.f64 (-.f64 #s(literal 1/2025 binary64) (*.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/45 binary64) (*.f64 #s(literal 2/945 binary64) (*.f64 x x)))))","(*.f64 (neg.f64 (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/2025 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))))","(*.f64 (neg.f64 (fma.f64 #s(literal 8/843908625 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/2025 binary64) (*.f64 #s(literal 2/42525 binary64) (*.f64 x x)))))))","(*.f64 (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/2025 binary64)) (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 8/843908625 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2025 binary64) (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (*.f64 x x) #s(literal -2/42525 binary64))))))","(*.f64 (fma.f64 #s(literal 8/843908625 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64)) (pow.f64 (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/2025 binary64) (*.f64 #s(literal 2/42525 binary64) (*.f64 x x)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 2/945 binary64) (*.f64 x x)) #s(literal 4 binary64)) #s(literal 1/4100625 binary64)) (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64)) #s(literal -1 binary64))) (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64)))","(/.f64 (*.f64 (fma.f64 #s(literal 64/712181767349390625 binary64) (pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 3 binary64)) #s(literal -1/8303765625 binary64)) (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64)) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (*.f64 #s(literal 2/945 binary64) (*.f64 x x)) #s(literal 4 binary64)) #s(literal 1/4100625 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 4/1808375625 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal 64/712181767349390625 binary64) (pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 3 binary64)) #s(literal -1/8303765625 binary64)) (pow.f64 (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/2025 binary64) (*.f64 #s(literal 2/42525 binary64) (*.f64 x x)))) #s(literal -1 binary64))) (fma.f64 #s(literal 8/843908625 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/91125 binary64)))","(/.f64 (*.f64 (fma.f64 #s(literal 512/601016336033894136931640625 binary64) (pow.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 3 binary64)) #s(literal 1/756680642578125 binary64)) (pow.f64 (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/2025 binary64) (*.f64 #s(literal 2/42525 binary64) (*.f64 x x)))) #s(literal -1 binary64))) (fma.f64 #s(literal 64/712181767349390625 binary64) (pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 3 binary64)) (-.f64 #s(literal 1/8303765625 binary64) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 8/76901173453125 binary64)))))","(/.f64 (*.f64 (fma.f64 #s(literal 8/843908625 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64)) #s(literal 1 binary64)) (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/2025 binary64) (*.f64 #s(literal 2/42525 binary64) (*.f64 x x)))))","(/.f64 (*.f64 (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/2025 binary64)) #s(literal 1 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64))) (/.f64 (*.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64)))) (*.f64 (/.f64 #s(literal -1/2025 binary64) (fma.f64 #s(literal -2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))) (/.f64 #s(literal -1/2025 binary64) (fma.f64 #s(literal -2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))))) (+.f64 (/.f64 (*.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64))) (/.f64 #s(literal -1/2025 binary64) (fma.f64 #s(literal -2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal -1/2025 binary64) (fma.f64 #s(literal -2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64))) (/.f64 (*.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64))) (fma.f64 (/.f64 #s(literal -1/2025 binary64) (fma.f64 #s(literal -2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))) (/.f64 #s(literal -1/2025 binary64) (fma.f64 #s(literal -2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64))) (/.f64 #s(literal -1/2025 binary64) (fma.f64 #s(literal -2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/2025 binary64) (*.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (-.f64 #s(literal 1/45 binary64) (*.f64 #s(literal 2/945 binary64) (*.f64 x x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/2025 binary64)))) (neg.f64 (fma.f64 #s(literal -2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 8/843908625 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/2025 binary64) (*.f64 #s(literal 2/42525 binary64) (*.f64 x x)))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64))) (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64)) #s(literal 1/2025 binary64))) (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64))))","(/.f64 (-.f64 #s(literal 1/2025 binary64) (*.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 #s(literal 1/45 binary64) (*.f64 #s(literal 2/945 binary64) (*.f64 x x))))","(/.f64 (neg.f64 (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/2025 binary64))) (fma.f64 #s(literal -2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)))","(/.f64 (neg.f64 (fma.f64 #s(literal 8/843908625 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64))) (neg.f64 (+.f64 #s(literal 1/2025 binary64) (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (*.f64 x x) #s(literal -2/42525 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 8/843908625 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64))) (neg.f64 (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/2025 binary64) (*.f64 #s(literal 2/42525 binary64) (*.f64 x x))))))","(/.f64 (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/2025 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64)))","(/.f64 (fma.f64 #s(literal 8/843908625 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64)) (+.f64 #s(literal 1/2025 binary64) (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (*.f64 x x) #s(literal -2/42525 binary64)))))","(/.f64 (fma.f64 #s(literal 8/843908625 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64)) (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/2025 binary64) (*.f64 #s(literal 2/42525 binary64) (*.f64 x x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/45 binary64) (*.f64 #s(literal 2/945 binary64) (*.f64 x x))) (-.f64 #s(literal 1/2025 binary64) (*.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/2025 binary64) (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (*.f64 x x) #s(literal -2/42525 binary64)))) (fma.f64 #s(literal 8/843908625 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/2025 binary64))) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 #s(literal 8/843908625 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64))) (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/2025 binary64) (*.f64 #s(literal 2/42525 binary64) (*.f64 x x))))))","(neg.f64 (/.f64 (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/2025 binary64)) (fma.f64 #s(literal -2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))))","(neg.f64 (/.f64 (fma.f64 #s(literal 8/843908625 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64)) (neg.f64 (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/2025 binary64) (*.f64 #s(literal 2/42525 binary64) (*.f64 x x)))))))","(fma.f64 (*.f64 #s(literal 2/945 binary64) x) x #s(literal 1/45 binary64))","(fma.f64 (*.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal -1/2025 binary64) (fma.f64 #s(literal -2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)))))","(fma.f64 (*.f64 #s(literal 2/945 binary64) (*.f64 x x)) #s(literal 1 binary64) #s(literal 1/45 binary64))","(fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))","(fma.f64 (*.f64 x x) #s(literal 2/945 binary64) #s(literal 1/45 binary64))","(fma.f64 x (*.f64 #s(literal 2/945 binary64) x) #s(literal 1/45 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 2/945 binary64) (*.f64 x x)) #s(literal 1/45 binary64))","(-.f64 (/.f64 #s(literal 1/2025 binary64) (-.f64 #s(literal 1/45 binary64) (*.f64 #s(literal 2/945 binary64) (*.f64 x x)))) (/.f64 (*.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal 1/45 binary64) (*.f64 #s(literal 2/945 binary64) (*.f64 x x)))))","(-.f64 (/.f64 (*.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64))) (/.f64 #s(literal -1/2025 binary64) (fma.f64 #s(literal -2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))))","(+.f64 (/.f64 (*.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64))) (neg.f64 (/.f64 #s(literal -1/2025 binary64) (fma.f64 #s(literal -2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)))))","(+.f64 (*.f64 #s(literal 2/945 binary64) (*.f64 x x)) #s(literal 1/45 binary64))","(+.f64 #s(literal 1/45 binary64) (*.f64 #s(literal 2/945 binary64) (*.f64 x x)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":228.077880859375,"type":"rewrite"},{"compiler":[[11259,1400]],"memory":[[-3484992,34935824]],"time":43.81396484375,"type":"eval"},{"alts":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (fma.f64 (*.f64 x x) (*.f64 #s(literal 1/45 binary64) x) (*.f64 #s(literal 1/3 binary64) x)))","next",0.38855378511156136,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))))","next",0.37292630085870937,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))))","next",0.06824128511156133,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","done",0.3359375,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","done",0.39246003511156136,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","done",0.6144691813284442,"binary64"]],"compiler":[[19,13],[24,18],[19,14],[22,14],[17,12],[12,9]],"count":[[359,6]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[356,3],"picked":[3,3]}],"memory":[[6747984,15076304]],"min-error":[[0.0,"binary64"]],"time":7.412109375,"type":"prune"},{"egraph":[[0,3724,154,0.011907071],[19,3724,154,0.026974207],[18,3723,154,0.030923511],[17,3723,154,0.022173257],[16,3723,154,0.022425518],[15,3625,154,0.026657046],[14,3401,154,0.019989832],[13,3391,154,0.013313552],[12,3366,154,0.01314668],[11,3326,154,0.013891312],[10,2964,154,0.015702368],[9,2047,154,0.016967307],[8,700,154,0.009416335],[7,374,154,0.003277542],[6,341,154,0.002127902],[5,275,154,0.001744416],[4,204,154,0.001371771],[3,151,154,0.001126419],[2,99,154,0.000719806],[1,65,154,0.000521954],[0,42,162,0.000423953],[0,27,162,0.000278515]],"inputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))","x","(/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","#s(literal 1 binary64)","(fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))","#s(literal 1/45 binary64)","(*.f64 x x)","#s(literal 1/3 binary64)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) x)","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))","(pow.f64 x #s(literal 4 binary64))","x","#s(literal 4 binary64)","#s(literal 1/2025 binary64)","#s(literal -1/9 binary64)","(fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))","#s(literal 1/45 binary64)","(*.f64 x x)","#s(literal -1/3 binary64)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (fma.f64 (*.f64 x x) (*.f64 #s(literal 1/45 binary64) x) (*.f64 #s(literal 1/3 binary64) x)))","(fma.f64 (*.f64 x x) (*.f64 #s(literal 1/45 binary64) x) (*.f64 #s(literal 1/3 binary64) x))","(*.f64 x x)","x","(*.f64 #s(literal 1/45 binary64) x)","#s(literal 1/45 binary64)","(*.f64 #s(literal 1/3 binary64) x)","#s(literal 1/3 binary64)"]],"locations":[["(*.f64 #s(literal 1/45 binary64) x)","cost-diff",0],["(*.f64 x x)","cost-diff",0],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (fma.f64 (*.f64 x x) (*.f64 #s(literal 1/45 binary64) x) (*.f64 #s(literal 1/3 binary64) x)))","cost-diff",0],["(fma.f64 (*.f64 x x) (*.f64 #s(literal 1/45 binary64) x) (*.f64 #s(literal 1/3 binary64) x))","cost-diff",2],["(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))","cost-diff",0],["(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) x)","cost-diff",0],["(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)))","cost-diff",0],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))))","cost-diff",0],["(fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","cost-diff",0],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))))","cost-diff",0],["(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))","cost-diff",2]],"memory":[[-230768,7892016]],"method":["egg-herbie"],"outputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","x","(/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))","#s(literal 1 binary64)","(fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))","(fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))","#s(literal 1/45 binary64)","(*.f64 x x)","#s(literal 1/3 binary64)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)))","(*.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) x)","(*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x)","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))","(fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))","(pow.f64 x #s(literal 4 binary64))","x","#s(literal 4 binary64)","#s(literal 1/2025 binary64)","#s(literal -1/9 binary64)","(fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))","(fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))","#s(literal 1/45 binary64)","(*.f64 x x)","#s(literal -1/3 binary64)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (fma.f64 (*.f64 x x) (*.f64 #s(literal 1/45 binary64) x) (*.f64 #s(literal 1/3 binary64) x)))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","(fma.f64 (*.f64 x x) (*.f64 #s(literal 1/45 binary64) x) (*.f64 #s(literal 1/3 binary64) x))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","(*.f64 x x)","x","(*.f64 #s(literal 1/45 binary64) x)","#s(literal 1/45 binary64)","(*.f64 #s(literal 1/3 binary64) x)","#s(literal 1/3 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":294.300048828125,"type":"simplify"},{"compiler":[[135,29]],"locations":[["(*.f64 x x)","accuracy",0.0],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (fma.f64 (*.f64 x x) (*.f64 #s(literal 1/45 binary64) x) (*.f64 #s(literal 1/3 binary64) x)))","accuracy",0.05652005085870934],["(*.f64 #s(literal 1/45 binary64) x)","accuracy",0.2265625],["(*.f64 #s(literal 1/3 binary64) x)","accuracy",0.3359375],["(fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))","accuracy",0.00390625],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))))","accuracy",0.05652005085870934],["(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) x)","accuracy",0.30859375],["(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)))","accuracy",0.36328125],["(fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))","accuracy",0.00390625],["(/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","accuracy",0.00390625],["(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))","accuracy",0.015625],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))))","accuracy",0.05652005085870934]],"memory":[[-23751952,46641040]],"mixsample":[[31.01220703125,"ival-tan",2000],[14.781494140625,"adjust",800],[14.486328125,"ival-div",0],[1.739013671875,"ival-div",400],[0.16064453125,"ival-assert",0],[0.091064453125,"ival-div",1600],[3.347900390625,"ival-sub",0],[163.73779296875,"ival-tan",2400],[7.602294921875,"ival-tan",0],[26.08837890625,"const",0],[1.53515625,"ival-tan",400],[4.639892578125,"ival-pow",0],[7.06396484375,"adjust",2000],[0.044921875,"ival-tan",1600],[18.56884765625,"ival-tan",800],[2.450439453125,"ival-div",1200],[11.595703125,"ival-add",0],[15.126220703125,"ival-mult",0],[3.4462890625,"ival-div",800],[0.2666015625,"ival-true",0],[0.825927734375,"ival-div",2000],[0.50048828125,"exact",0],[2.259033203125,"ival-tan",1200],[3.10986328125,"ival-div",2400]],"outcomes":[[89.1962890625,1,"valid",129],[368.0849609375,2,"valid",125],[0.68896484375,0,"valid",2]],"time":485.14306640625,"type":"localize"},{"count":[[14,34]],"inputs":[["(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))))","(/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) x)","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))","(fma.f64 (*.f64 x x) (*.f64 #s(literal 1/45 binary64) x) (*.f64 #s(literal 1/3 binary64) x))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (fma.f64 (*.f64 x x) (*.f64 #s(literal 1/45 binary64) x) (*.f64 #s(literal 1/3 binary64) x)))","(*.f64 x x)","(*.f64 #s(literal 1/45 binary64) x)","(fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))","(*.f64 #s(literal 1/3 binary64) x)"]],"memory":[[5578304,5578304]],"outputs":[["(* 1/3 x)","(* x (+ 1/3 (* 1/45 (pow x 2))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))))","3","(+ 3 (* -1/5 (pow x 2)))","(+ 3 (* (pow x 2) (- (* 1/75 (pow x 2)) 1/5)))","(+ 3 (* (pow x 2) (- (* (pow x 2) (+ 1/75 (* -1/1125 (pow x 2)))) 1/5)))","1/3","(+ 1/3 (* 1/45 (pow x 2)))","(* -1/9 x)","(* x (- (* 1/2025 (pow x 4)) 1/9))","-1/9","(- (* 1/2025 (pow x 4)) 1/9)","(pow x 2)","(* 1/45 x)","-1/3","(- (* 1/45 (pow x 2)) 1/3)","(* 1/45 (pow x 3))","(* (pow x 3) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(* -1 (/ (cos x) (sin x)))","(- (/ 1 x) (/ (cos x) (sin x)))","(/ 45 (pow x 2))","(/ (- 45 (* 675 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (+ 45 (/ 10125 (pow x 4))) (* 675 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (+ 45 (/ 10125 (pow x 4))) (+ (* 675 (/ 1 (pow x 2))) (* 151875 (/ 1 (pow x 6))))) (pow x 2))","(* 1/45 (pow x 2))","(* (pow x 2) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(* 1/2025 (pow x 5))","(* (pow x 5) (- 1/2025 (* 1/9 (/ 1 (pow x 4)))))","(* 1/2025 (pow x 4))","(* (pow x 4) (- 1/2025 (* 1/9 (/ 1 (pow x 4)))))","(* (pow x 2) (- 1/45 (* 1/3 (/ 1 (pow x 2)))))","(* -1 (* (pow x 5) (- (* 1/9 (/ 1 (pow x 4))) 1/2025)))"]],"series":[[4.1640625,"((/ x (/ 1 (+ (* 1/45 (* x x)) 1/3))) (- (/ 1 x) (/ 1 (tan x))) (/ 1 (+ (* 1/45 (* x x)) 1/3)) (+ (* 1/45 (* x x)) 1/3) (- (/ 1 x) (/ 1 (tan x))) (/ (* (+ (* (pow x 4) 1/2025) -1/9) x) (+ (* 1/45 (* x x)) -1/3)) (* (+ (* (pow x 4) 1/2025) -1/9) x) (+ (* (pow x 4) 1/2025) -1/9) (+ (* (* x x) (* 1/45 x)) (* 1/3 x)) (- (/ 1 x) (/ 1 (tan x))) (* x x) (* 1/45 x) (+ (* 1/45 (* x x)) -1/3) (* 1/3 x))","x","-inf"],[3.863037109375,"((/ x (/ 1 (+ (* 1/45 (* x x)) 1/3))) (- (/ 1 x) (/ 1 (tan x))) (/ 1 (+ (* 1/45 (* x x)) 1/3)) (+ (* 1/45 (* x x)) 1/3) (- (/ 1 x) (/ 1 (tan x))) (/ (* (+ (* (pow x 4) 1/2025) -1/9) x) (+ (* 1/45 (* x x)) -1/3)) (* (+ (* (pow x 4) 1/2025) -1/9) x) (+ (* (pow x 4) 1/2025) -1/9) (+ (* (* x x) (* 1/45 x)) (* 1/3 x)) (- (/ 1 x) (/ 1 (tan x))) (* x x) (* 1/45 x) (+ (* 1/45 (* x x)) -1/3) (* 1/3 x))","x","inf"],[3.630126953125,"((/ x (/ 1 (+ (* 1/45 (* x x)) 1/3))) (- (/ 1 x) (/ 1 (tan x))) (/ 1 (+ (* 1/45 (* x x)) 1/3)) (+ (* 1/45 (* x x)) 1/3) (- (/ 1 x) (/ 1 (tan x))) (/ (* (+ (* (pow x 4) 1/2025) -1/9) x) (+ (* 1/45 (* x x)) -1/3)) (* (+ (* (pow x 4) 1/2025) -1/9) x) (+ (* (pow x 4) 1/2025) -1/9) (+ (* (* x x) (* 1/45 x)) (* 1/3 x)) (- (/ 1 x) (/ 1 (tan x))) (* x x) (* 1/45 x) (+ (* 1/45 (* x x)) -1/3) (* 1/3 x))","x","0"]],"time":12.537841796875,"type":"series"},{"count":[[34,34]],"egraph":[[0,8330,247,0.056873898],[5,6049,269,0.024178508],[4,3293,269,0.023493729],[3,1480,269,0.015149036],[2,626,269,0.005263592],[1,250,269,0.001917487],[0,99,269,0.000981537]],"inputs":[["(* 1/3 x)","(* x (+ 1/3 (* 1/45 (pow x 2))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))))","3","(+ 3 (* -1/5 (pow x 2)))","(+ 3 (* (pow x 2) (- (* 1/75 (pow x 2)) 1/5)))","(+ 3 (* (pow x 2) (- (* (pow x 2) (+ 1/75 (* -1/1125 (pow x 2)))) 1/5)))","1/3","(+ 1/3 (* 1/45 (pow x 2)))","(* -1/9 x)","(* x (- (* 1/2025 (pow x 4)) 1/9))","-1/9","(- (* 1/2025 (pow x 4)) 1/9)","(pow x 2)","(* 1/45 x)","-1/3","(- (* 1/45 (pow x 2)) 1/3)","(* 1/45 (pow x 3))","(* (pow x 3) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(* -1 (/ (cos x) (sin x)))","(- (/ 1 x) (/ (cos x) (sin x)))","(/ 45 (pow x 2))","(/ (- 45 (* 675 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (+ 45 (/ 10125 (pow x 4))) (* 675 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (+ 45 (/ 10125 (pow x 4))) (+ (* 675 (/ 1 (pow x 2))) (* 151875 (/ 1 (pow x 6))))) (pow x 2))","(* 1/45 (pow x 2))","(* (pow x 2) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(* 1/2025 (pow x 5))","(* (pow x 5) (- 1/2025 (* 1/9 (/ 1 (pow x 4)))))","(* 1/2025 (pow x 4))","(* (pow x 4) (- 1/2025 (* 1/9 (/ 1 (pow x 4)))))","(* (pow x 2) (- 1/45 (* 1/3 (/ 1 (pow x 2)))))","(* -1 (* (pow x 5) (- (* 1/9 (/ 1 (pow x 4))) 1/2025)))"]],"memory":[[1011664,30974560]],"method":["egg-herbie"],"outputs":[["(* 1/3 x)","(*.f64 #s(literal 1/3 binary64) x)","(* x (+ 1/3 (* 1/45 (pow x 2))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","3","#s(literal 3 binary64)","(+ 3 (* -1/5 (pow x 2)))","(fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))","(+ 3 (* (pow x 2) (- (* 1/75 (pow x 2)) 1/5)))","(fma.f64 (fma.f64 #s(literal 1/75 binary64) (*.f64 x x) #s(literal -1/5 binary64)) (*.f64 x x) #s(literal 3 binary64))","(+ 3 (* (pow x 2) (- (* (pow x 2) (+ 1/75 (* -1/1125 (pow x 2)))) 1/5)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/1125 binary64) (*.f64 x x) #s(literal 1/75 binary64)) (*.f64 x x) #s(literal -1/5 binary64)) (*.f64 x x) #s(literal 3 binary64))","1/3","#s(literal 1/3 binary64)","(+ 1/3 (* 1/45 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))","(* -1/9 x)","(*.f64 #s(literal -1/9 binary64) x)","(* x (- (* 1/2025 (pow x 4)) 1/9))","(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) x)","-1/9","#s(literal -1/9 binary64)","(- (* 1/2025 (pow x 4)) 1/9)","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))","(pow x 2)","(*.f64 x x)","(* 1/45 x)","(*.f64 #s(literal 1/45 binary64) x)","-1/3","#s(literal -1/3 binary64)","(- (* 1/45 (pow x 2)) 1/3)","(fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))","(* 1/45 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))","(* (pow x 3) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","(* -1 (/ (cos x) (sin x)))","(/.f64 (neg.f64 (cos.f64 x)) (sin.f64 x))","(- (/ 1 x) (/ (cos x) (sin x)))","(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 (cos.f64 x) (sin.f64 x)))","(/ 45 (pow x 2))","(/.f64 #s(literal 45 binary64) (*.f64 x x))","(/ (- 45 (* 675 (/ 1 (pow x 2)))) (pow x 2))","(/.f64 (/.f64 (-.f64 #s(literal 45 binary64) (/.f64 #s(literal 675 binary64) (*.f64 x x))) x) x)","(/ (- (+ 45 (/ 10125 (pow x 4))) (* 675 (/ 1 (pow x 2)))) (pow x 2))","(/.f64 (-.f64 (/.f64 #s(literal -675 binary64) (*.f64 x x)) (-.f64 #s(literal -45 binary64) (/.f64 #s(literal 10125 binary64) (pow.f64 x #s(literal 4 binary64))))) (*.f64 x x))","(/ (- (+ 45 (/ 10125 (pow x 4))) (+ (* 675 (/ 1 (pow x 2))) (* 151875 (/ 1 (pow x 6))))) (pow x 2))","(/.f64 (/.f64 (-.f64 (-.f64 (/.f64 #s(literal -675 binary64) (*.f64 x x)) (-.f64 #s(literal -45 binary64) (/.f64 #s(literal 10125 binary64) (pow.f64 x #s(literal 4 binary64))))) (/.f64 #s(literal 151875 binary64) (pow.f64 x #s(literal 6 binary64)))) x) x)","(* 1/45 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/45 binary64))","(* (pow x 2) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))","(* 1/2025 (pow x 5))","(*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal 1/2025 binary64))","(* (pow x 5) (- 1/2025 (* 1/9 (/ 1 (pow x 4)))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) x)","(* 1/2025 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64))","(* (pow x 4) (- 1/2025 (* 1/9 (/ 1 (pow x 4)))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))","(* (pow x 2) (- 1/45 (* 1/3 (/ 1 (pow x 2)))))","(fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))","(* -1 (* (pow x 5) (- (* 1/9 (/ 1 (pow x 4))) 1/2025)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) x)"]],"stop":[["iter limit",1],["node limit",1]],"time":201.780029296875,"type":"simplify"},{"count":[[14,890]],"egraph":[[0,8452,118,0.08986002],[2,1291,118,0.028668809],[1,175,118,0.005577258],[0,42,130,0.001561368],[0,27,140,0.000266985]],"inputs":[["(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))))","(/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) x)","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))","(fma.f64 (*.f64 x x) (*.f64 #s(literal 1/45 binary64) x) (*.f64 #s(literal 1/3 binary64) x))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (fma.f64 (*.f64 x x) (*.f64 #s(literal 1/45 binary64) x) (*.f64 #s(literal 1/3 binary64) x)))","(*.f64 x x)","(*.f64 #s(literal 1/45 binary64) x)","(fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))","(*.f64 #s(literal 1/3 binary64) x)"]],"memory":[[-3707888,67988352]],"outputs":[["(*.f64 (pow.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x) x) (/.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(*.f64 (/.f64 (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) #s(literal -1 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64)) (/.f64 (neg.f64 x) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal 1 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (/.f64 x (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal -1 binary64))) (/.f64 x (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64))))))","(*.f64 (/.f64 x (pow.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1/2 binary64))) (/.f64 x (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1/2 binary64))))","(*.f64 (/.f64 x (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1/2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","(*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))","(*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))))","(*.f64 (/.f64 x (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 x (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) #s(literal -1 binary64))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (pow.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 #s(literal 1/9 binary64) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/3 binary64) x (*.f64 #s(literal -1/45 binary64) (pow.f64 x #s(literal 3 binary64))))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64) (*.f64 #s(literal -1/9 binary64) (*.f64 x x)))) (/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64) (*.f64 (*.f64 #s(literal 1/3 binary64) x) (fma.f64 #s(literal 1/3 binary64) x (*.f64 #s(literal -1/45 binary64) (pow.f64 x #s(literal 3 binary64)))))))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) x) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) x) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(*.f64 (*.f64 x (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) #s(literal -1 binary64)))","(*.f64 (*.f64 x #s(literal -1 binary64)) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)))","(*.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64) (*.f64 #s(literal -1/9 binary64) (*.f64 x x))) (pow.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x))","(*.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/9 binary64) (*.f64 x x) (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 #s(literal 1/3 binary64) x))))))","(*.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64) (*.f64 (*.f64 #s(literal 1/3 binary64) x) (fma.f64 #s(literal 1/3 binary64) x (*.f64 #s(literal -1/45 binary64) (pow.f64 x #s(literal 3 binary64)))))) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (neg.f64 x)) (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(*.f64 (neg.f64 x) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x) #s(literal -1 binary64)))))","(*.f64 #s(literal -1 binary64) (*.f64 (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) x))","(*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x) #s(literal 1 binary64))","(*.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","(*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","(*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))","(pow.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))) (*.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))) (+.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (fma.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (*.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))) (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))) (neg.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64))))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/9 binary64) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)))) (neg.f64 (fma.f64 #s(literal 1/3 binary64) x (*.f64 #s(literal -1/45 binary64) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64) (*.f64 #s(literal -1/9 binary64) (*.f64 x x))))) (neg.f64 (neg.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64) (*.f64 (*.f64 #s(literal 1/3 binary64) x) (fma.f64 #s(literal 1/3 binary64) x (*.f64 #s(literal -1/45 binary64) (pow.f64 x #s(literal 3 binary64)))))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) x)) (neg.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) x)) (neg.f64 (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(/.f64 (neg.f64 (*.f64 x (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)))) (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (*.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (*.f64 #s(literal 1/9 binary64) (*.f64 x x)))) (*.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(/.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)))","(/.f64 (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)))","(/.f64 (*.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1/9 binary64) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64))) (fma.f64 #s(literal 1/3 binary64) x (*.f64 #s(literal -1/45 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64) (*.f64 #s(literal -1/9 binary64) (*.f64 x x)))) (neg.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(literal 1/9 binary64) (*.f64 x x) (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 #s(literal 1/3 binary64) x))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64) (*.f64 (*.f64 #s(literal 1/3 binary64) x) (fma.f64 #s(literal 1/3 binary64) x (*.f64 #s(literal -1/45 binary64) (pow.f64 x #s(literal 3 binary64))))))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) x) (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) x) (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(/.f64 (*.f64 x (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))))","(/.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64)))","(/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64) (*.f64 #s(literal -1/9 binary64) (*.f64 x x))) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) x))","(/.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64))) (fma.f64 #s(literal 1/9 binary64) (*.f64 x x) (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 #s(literal 1/3 binary64) x)))))","(/.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64) (*.f64 (*.f64 #s(literal 1/3 binary64) x) (fma.f64 #s(literal 1/3 binary64) x (*.f64 #s(literal -1/45 binary64) (pow.f64 x #s(literal 3 binary64)))))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (neg.f64 x)) (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)))","(/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x) #s(literal -1 binary64))))","(/.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x) #s(literal 1 binary64))","(/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))","(/.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) (pow.f64 x #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))) (*.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/3 binary64) x (*.f64 #s(literal -1/45 binary64) (pow.f64 x #s(literal 3 binary64)))) (-.f64 (*.f64 #s(literal 1/9 binary64) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (*.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) (*.f64 x (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/9 binary64) (*.f64 x x) (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 #s(literal 1/3 binary64) x)))) (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x) #s(literal -1 binary64)))","(/.f64 x (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)))","(neg.f64 (*.f64 (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) x))","(fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) x) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 #s(literal 1/45 binary64) x)) x) (/.f64 (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 x x)) x) (/.f64 (*.f64 #s(literal 1/45 binary64) x) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) x) x) (/.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/2025 binary64) (*.f64 x x)) x) (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x) (/.f64 (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) x) (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/45 binary64) x) x) (/.f64 (*.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) x) (/.f64 (*.f64 #s(literal 1/2025 binary64) (*.f64 x x)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 x x) x) (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) x) (/.f64 (*.f64 x (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 x x) (/.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) #s(literal 1/3 binary64)))","(fma.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) #s(literal 1/3 binary64) (*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)))","(fma.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64))) (*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))))","(fma.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))))","(fma.f64 (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal -1/9 binary64) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))))","(fma.f64 (*.f64 #s(literal -1/9 binary64) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))))","(fma.f64 (*.f64 x (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 x #s(literal -1/9 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))))","(fma.f64 (*.f64 x #s(literal -1/9 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 x (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))))","(fma.f64 (neg.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) (*.f64 x #s(literal -1 binary64)) (*.f64 #s(literal -1/3 binary64) (*.f64 x #s(literal -1 binary64))))","(fma.f64 (*.f64 x #s(literal -1 binary64)) (neg.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) (*.f64 (*.f64 x #s(literal -1 binary64)) #s(literal -1/3 binary64)))","(fma.f64 (*.f64 x #s(literal -1 binary64)) #s(literal -1/3 binary64) (*.f64 (*.f64 x #s(literal -1 binary64)) (neg.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) #s(literal -1/9 binary64)))","(fma.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) #s(literal -1/9 binary64) (*.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))))","(fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x) (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1/9 binary64) x)))","(fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1/9 binary64) x) (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x)))","(fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 x (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 x #s(literal -1/9 binary64))))","(fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 x #s(literal -1/9 binary64)) (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 x (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))))))","(fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (pow.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) #s(literal -1 binary64)) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(fma.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64))) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64)))))","(fma.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (*.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64))) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64)))))","(fma.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (*.f64 #s(literal -1/9 binary64) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(fma.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 1 binary64)))","(fma.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (*.f64 #s(literal 1/3 binary64) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))))","(fma.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) x (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 1 binary64) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) #s(literal 1 binary64)))","(fma.f64 (*.f64 #s(literal 1/45 binary64) x) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 #s(literal -1/3 binary64) (*.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) (*.f64 x #s(literal -1 binary64))))","(fma.f64 #s(literal -1/9 binary64) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(fma.f64 #s(literal 1/3 binary64) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))))","(fma.f64 #s(literal 1/3 binary64) x (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)))","(fma.f64 (*.f64 x x) (*.f64 #s(literal 1/45 binary64) x) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 #s(literal 1/45 binary64) (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/3 binary64) x)))","(fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/3 binary64) x) (*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))))","(fma.f64 x (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 x #s(literal 1/3 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)))","(-.f64 (/.f64 (*.f64 #s(literal 1/9 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/3 binary64) x (*.f64 #s(literal -1/45 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (fma.f64 #s(literal 1/3 binary64) x (*.f64 #s(literal -1/45 binary64) (pow.f64 x #s(literal 3 binary64))))))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x))) (*.f64 (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) x))","(-.f64 (/.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))) (*.f64 (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) x))","(-.f64 (/.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) #s(literal 1 binary64)) (/.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) #s(literal 1 binary64)))","(-.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(-.f64 #s(literal 0 binary64) (*.f64 (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))) (*.f64 #s(literal 1/3 binary64) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))))","(+.f64 (*.f64 #s(literal 1/3 binary64) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))) (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))))","(+.f64 (*.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64))) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64)))) (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64)))))","(+.f64 (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64)))) (*.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64))) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64)))))","(+.f64 (*.f64 (neg.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) (*.f64 x #s(literal -1 binary64))) (*.f64 #s(literal -1/3 binary64) (*.f64 x #s(literal -1 binary64))))","(+.f64 (*.f64 #s(literal -1/3 binary64) (*.f64 x #s(literal -1 binary64))) (*.f64 (neg.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) (*.f64 x #s(literal -1 binary64))))","(+.f64 (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (*.f64 #s(literal -1/9 binary64) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(+.f64 (*.f64 #s(literal -1/9 binary64) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(+.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal -1/9 binary64) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 (*.f64 #s(literal -1/9 binary64) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 (*.f64 x (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 x #s(literal -1/9 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 (*.f64 x #s(literal -1/9 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 x (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 1 binary64)))","(+.f64 (*.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 1 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) (*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) #s(literal 1/3 binary64)))","(+.f64 (*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) #s(literal 1/3 binary64)) (*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)))","(+.f64 (*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) (*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))))","(+.f64 (*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))))","(+.f64 (*.f64 (*.f64 x #s(literal -1 binary64)) (neg.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x))) (*.f64 (*.f64 x #s(literal -1 binary64)) #s(literal -1/3 binary64)))","(+.f64 (*.f64 (*.f64 x #s(literal -1 binary64)) #s(literal -1/3 binary64)) (*.f64 (*.f64 x #s(literal -1 binary64)) (neg.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x))))","(+.f64 (*.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) #s(literal -1/9 binary64)))","(+.f64 (*.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) #s(literal -1/9 binary64)) (*.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))))","(+.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x)) (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1/9 binary64) x)))","(+.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1/9 binary64) x)) (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x)))","(+.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 x (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 x #s(literal -1/9 binary64))))","(+.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 x #s(literal -1/9 binary64))) (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 x (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))))))","(+.f64 (*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))) (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/3 binary64) x)))","(+.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/3 binary64) x)) (*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))))","(+.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(+.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 #s(literal 1/3 binary64) x))","(+.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64))) (/.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64))) (/.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64)) (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64))) (/.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64)) (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64))) (/.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal -1 binary64)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))))","(*.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))","(*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1/2 binary64)))","(*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) (pow.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)))","(pow.f64 (exp.f64 (log.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))) #s(literal -1 binary64))","(pow.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64))","(/.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64))))) (neg.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))))","(/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)))","(/.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))))","(/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)))","(/.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))","(/.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))","(neg.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))))","(fma.f64 (pow.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64))) (*.f64 (pow.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))))","(fma.f64 (pow.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (pow.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))))","(fma.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (*.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64)) #s(literal -1/3 binary64)))","(fma.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64)) #s(literal -1/3 binary64) (*.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)))","(fma.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64))) (pow.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal -1 binary64))))","(fma.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64))) (pow.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal -1 binary64))))","(fma.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1/3 binary64) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal -1/3 binary64) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64))))","(-.f64 (/.f64 (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))))","(-.f64 (/.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 #s(literal 1/3 binary64) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))))","(-.f64 (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (/.f64 (*.f64 (*.f64 x x) #s(literal 1/135 binary64)) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))))","(exp.f64 (*.f64 (log.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) #s(literal -1 binary64)))","(+.f64 (*.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64))) (pow.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal -1 binary64))) (*.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64))) (pow.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 #s(literal -1/3 binary64) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64))) (*.f64 #s(literal -1/3 binary64) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) (*.f64 (pow.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))))","(+.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (pow.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))))","(+.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64)) #s(literal -1/3 binary64)) (*.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)))","(+.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) (*.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64)) #s(literal -1/3 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal 1/2 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal 1/2 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (/.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) #s(literal -1 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 (pow.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))) #s(literal -1 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(*.f64 (pow.f64 (pow.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (/.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64))))","(*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (*.f64 x x) #s(literal -1/135 binary64))))))","(*.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) (/.f64 (pow.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) #s(literal -1 binary64))))","(*.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))","(pow.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal 1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (*.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))) (+.f64 (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (fma.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal 1/9 binary64))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(/.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (neg.f64 (+.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (*.f64 x x) #s(literal -1/135 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)))","(/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))","(/.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) (+.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))))","(/.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))))","(/.f64 (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))))","(/.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)))","(neg.f64 (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)))","(fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (*.f64 #s(literal 1/45 binary64) x)) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (/.f64 x (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (*.f64 x x)) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (/.f64 #s(literal 1/45 binary64) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) #s(literal 1/45 binary64)) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (/.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/2025 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (/.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (/.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/45 binary64) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 #s(literal 1/2025 binary64) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (/.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (/.f64 #s(literal 1/2025 binary64) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 x x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (/.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 x x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (/.f64 (*.f64 #s(literal 1/2025 binary64) (*.f64 x x)) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 #s(literal 1/45 binary64) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (/.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (*.f64 #s(literal 1/45 binary64) x)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (*.f64 x x)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 #s(literal 1/45 binary64) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) #s(literal 1/45 binary64)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 (*.f64 x x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/2025 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 (*.f64 x x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/45 binary64) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 #s(literal 1/2025 binary64) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 #s(literal 1/2025 binary64) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 x x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 x x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 (*.f64 #s(literal 1/2025 binary64) (*.f64 x x)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 #s(literal 1/45 binary64) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(fma.f64 (neg.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) #s(literal -1 binary64) #s(literal 1/3 binary64))","(fma.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) #s(literal 1/3 binary64))","(fma.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) #s(literal 1 binary64) #s(literal 1/3 binary64))","(fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal 1/3 binary64))","(fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))","(fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) #s(literal 1/3 binary64))","(fma.f64 x (*.f64 #s(literal 1/45 binary64) x) #s(literal 1/3 binary64))","(-.f64 (/.f64 (*.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64))))) (/.f64 #s(literal -1/27 binary64) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64))))))","(-.f64 (/.f64 (/.f64 (*.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (/.f64 (/.f64 #s(literal 1/81 binary64) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(-.f64 (/.f64 (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) #s(literal 1 binary64)) (/.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) #s(literal 1 binary64)))","(-.f64 (/.f64 #s(literal 1/9 binary64) (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x))) (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x))))","(-.f64 (/.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) #s(literal 1 binary64)) #s(literal -1/3 binary64))","(-.f64 (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(-.f64 #s(literal 0 binary64) (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)))","(-.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) #s(literal -1/3 binary64))","(exp.f64 (neg.f64 (*.f64 (log.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) #s(literal -1 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) #s(literal 1 binary64)))","(+.f64 (*.f64 (neg.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) #s(literal -1 binary64)) #s(literal 1/3 binary64))","(+.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) #s(literal 1 binary64)) #s(literal 1/3 binary64))","(+.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x))) #s(literal 1/3 binary64))","(+.f64 (*.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) #s(literal 1/3 binary64))","(+.f64 (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(+.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) #s(literal 1/3 binary64))","(+.f64 #s(literal 1/3 binary64) (*.f64 (neg.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) #s(literal -1 binary64)))","(+.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) #s(literal 1 binary64)))","(+.f64 #s(literal 1/3 binary64) (*.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x))))","(+.f64 #s(literal 1/3 binary64) (*.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)))","(+.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","(*.f64 (pow.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x) x) (/.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(*.f64 (/.f64 (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) #s(literal -1 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64)) (/.f64 (neg.f64 x) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal 1 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (/.f64 x (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal -1 binary64))) (/.f64 x (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64))))))","(*.f64 (/.f64 x (pow.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1/2 binary64))) (/.f64 x (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1/2 binary64))))","(*.f64 (/.f64 x (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1/2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","(*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))","(*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))))","(*.f64 (/.f64 x (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 x (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) #s(literal -1 binary64))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (pow.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 #s(literal 1/9 binary64) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/3 binary64) x (*.f64 #s(literal -1/45 binary64) (pow.f64 x #s(literal 3 binary64))))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64) (*.f64 #s(literal -1/9 binary64) (*.f64 x x)))) (/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64) (*.f64 (*.f64 #s(literal 1/3 binary64) x) (fma.f64 #s(literal 1/3 binary64) x (*.f64 #s(literal -1/45 binary64) (pow.f64 x #s(literal 3 binary64)))))))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) x) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) x) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(*.f64 (*.f64 x (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) #s(literal -1 binary64)))","(*.f64 (*.f64 x #s(literal -1 binary64)) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)))","(*.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64) (*.f64 #s(literal -1/9 binary64) (*.f64 x x))) (pow.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x))","(*.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/9 binary64) (*.f64 x x) (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 #s(literal 1/3 binary64) x))))))","(*.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64) (*.f64 (*.f64 #s(literal 1/3 binary64) x) (fma.f64 #s(literal 1/3 binary64) x (*.f64 #s(literal -1/45 binary64) (pow.f64 x #s(literal 3 binary64)))))) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (neg.f64 x)) (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(*.f64 (neg.f64 x) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x) #s(literal -1 binary64)))))","(*.f64 #s(literal -1 binary64) (*.f64 (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) x))","(*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x) #s(literal 1 binary64))","(*.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","(*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","(*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))","(pow.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))) (*.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))) (+.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (fma.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (*.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))) (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))) (neg.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64))))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/9 binary64) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)))) (neg.f64 (fma.f64 #s(literal 1/3 binary64) x (*.f64 #s(literal -1/45 binary64) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64) (*.f64 #s(literal -1/9 binary64) (*.f64 x x))))) (neg.f64 (neg.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64) (*.f64 (*.f64 #s(literal 1/3 binary64) x) (fma.f64 #s(literal 1/3 binary64) x (*.f64 #s(literal -1/45 binary64) (pow.f64 x #s(literal 3 binary64)))))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) x)) (neg.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) x)) (neg.f64 (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(/.f64 (neg.f64 (*.f64 x (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)))) (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (*.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (*.f64 #s(literal 1/9 binary64) (*.f64 x x)))) (*.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(/.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)))","(/.f64 (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)))","(/.f64 (*.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1/9 binary64) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64))) (fma.f64 #s(literal 1/3 binary64) x (*.f64 #s(literal -1/45 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64) (*.f64 #s(literal -1/9 binary64) (*.f64 x x)))) (neg.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(literal 1/9 binary64) (*.f64 x x) (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 #s(literal 1/3 binary64) x))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64) (*.f64 (*.f64 #s(literal 1/3 binary64) x) (fma.f64 #s(literal 1/3 binary64) x (*.f64 #s(literal -1/45 binary64) (pow.f64 x #s(literal 3 binary64))))))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) x) (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) x) (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(/.f64 (*.f64 x (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))))","(/.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64)))","(/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64) (*.f64 #s(literal -1/9 binary64) (*.f64 x x))) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) x))","(/.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64))) (fma.f64 #s(literal 1/9 binary64) (*.f64 x x) (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 #s(literal 1/3 binary64) x)))))","(/.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64) (*.f64 (*.f64 #s(literal 1/3 binary64) x) (fma.f64 #s(literal 1/3 binary64) x (*.f64 #s(literal -1/45 binary64) (pow.f64 x #s(literal 3 binary64)))))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (neg.f64 x)) (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)))","(/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x) #s(literal -1 binary64))))","(/.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x) #s(literal 1 binary64))","(/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))","(/.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) (pow.f64 x #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))) (*.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/3 binary64) x (*.f64 #s(literal -1/45 binary64) (pow.f64 x #s(literal 3 binary64)))) (-.f64 (*.f64 #s(literal 1/9 binary64) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (*.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) (*.f64 x (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/9 binary64) (*.f64 x x) (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 #s(literal 1/3 binary64) x)))) (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x) #s(literal -1 binary64)))","(/.f64 x (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)))","(neg.f64 (*.f64 (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) x))","(fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) x) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 #s(literal 1/45 binary64) x)) x) (/.f64 (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 x x)) x) (/.f64 (*.f64 #s(literal 1/45 binary64) x) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) x) x) (/.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/2025 binary64) (*.f64 x x)) x) (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x) (/.f64 (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) x) (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/45 binary64) x) x) (/.f64 (*.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) x) (/.f64 (*.f64 #s(literal 1/2025 binary64) (*.f64 x x)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 x x) x) (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) x) (/.f64 (*.f64 x (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 x x) (/.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) #s(literal 1/3 binary64)))","(fma.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) #s(literal 1/3 binary64) (*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)))","(fma.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64))) (*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))))","(fma.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))))","(fma.f64 (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal -1/9 binary64) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))))","(fma.f64 (*.f64 #s(literal -1/9 binary64) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))))","(fma.f64 (*.f64 x (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 x #s(literal -1/9 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))))","(fma.f64 (*.f64 x #s(literal -1/9 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 x (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))))","(fma.f64 (neg.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) (*.f64 x #s(literal -1 binary64)) (*.f64 #s(literal -1/3 binary64) (*.f64 x #s(literal -1 binary64))))","(fma.f64 (*.f64 x #s(literal -1 binary64)) (neg.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) (*.f64 (*.f64 x #s(literal -1 binary64)) #s(literal -1/3 binary64)))","(fma.f64 (*.f64 x #s(literal -1 binary64)) #s(literal -1/3 binary64) (*.f64 (*.f64 x #s(literal -1 binary64)) (neg.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) #s(literal -1/9 binary64)))","(fma.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) #s(literal -1/9 binary64) (*.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))))","(fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x) (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1/9 binary64) x)))","(fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1/9 binary64) x) (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x)))","(fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 x (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 x #s(literal -1/9 binary64))))","(fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 x #s(literal -1/9 binary64)) (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 x (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))))))","(fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (pow.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) #s(literal -1 binary64)) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(fma.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64))) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64)))))","(fma.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (*.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64))) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64)))))","(fma.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (*.f64 #s(literal -1/9 binary64) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(fma.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 1 binary64)))","(fma.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (*.f64 #s(literal 1/3 binary64) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))))","(fma.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) x (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 1 binary64) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) #s(literal 1 binary64)))","(fma.f64 (*.f64 #s(literal 1/45 binary64) x) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 #s(literal -1/3 binary64) (*.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) (*.f64 x #s(literal -1 binary64))))","(fma.f64 #s(literal -1/9 binary64) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(fma.f64 #s(literal 1/3 binary64) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))))","(fma.f64 #s(literal 1/3 binary64) x (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)))","(fma.f64 (*.f64 x x) (*.f64 #s(literal 1/45 binary64) x) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 #s(literal 1/45 binary64) (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/3 binary64) x)))","(fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/3 binary64) x) (*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))))","(fma.f64 x (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 x #s(literal 1/3 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)))","(-.f64 (/.f64 (*.f64 #s(literal 1/9 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/3 binary64) x (*.f64 #s(literal -1/45 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (fma.f64 #s(literal 1/3 binary64) x (*.f64 #s(literal -1/45 binary64) (pow.f64 x #s(literal 3 binary64))))))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x))) (*.f64 (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) x))","(-.f64 (/.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))) (*.f64 (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) x))","(-.f64 (/.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) #s(literal 1 binary64)) (/.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) #s(literal 1 binary64)))","(-.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(-.f64 #s(literal 0 binary64) (*.f64 (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))) (*.f64 #s(literal 1/3 binary64) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))))","(+.f64 (*.f64 #s(literal 1/3 binary64) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))) (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))))","(+.f64 (*.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64))) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64)))) (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64)))))","(+.f64 (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64)))) (*.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64))) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64)))))","(+.f64 (*.f64 (neg.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) (*.f64 x #s(literal -1 binary64))) (*.f64 #s(literal -1/3 binary64) (*.f64 x #s(literal -1 binary64))))","(+.f64 (*.f64 #s(literal -1/3 binary64) (*.f64 x #s(literal -1 binary64))) (*.f64 (neg.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) (*.f64 x #s(literal -1 binary64))))","(+.f64 (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (*.f64 #s(literal -1/9 binary64) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(+.f64 (*.f64 #s(literal -1/9 binary64) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(+.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal -1/9 binary64) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 (*.f64 #s(literal -1/9 binary64) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 (*.f64 x (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 x #s(literal -1/9 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 (*.f64 x #s(literal -1/9 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 x (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 1 binary64)))","(+.f64 (*.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 1 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) (*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) #s(literal 1/3 binary64)))","(+.f64 (*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) #s(literal 1/3 binary64)) (*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)))","(+.f64 (*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) (*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))))","(+.f64 (*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))))","(+.f64 (*.f64 (*.f64 x #s(literal -1 binary64)) (neg.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x))) (*.f64 (*.f64 x #s(literal -1 binary64)) #s(literal -1/3 binary64)))","(+.f64 (*.f64 (*.f64 x #s(literal -1 binary64)) #s(literal -1/3 binary64)) (*.f64 (*.f64 x #s(literal -1 binary64)) (neg.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x))))","(+.f64 (*.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) #s(literal -1/9 binary64)))","(+.f64 (*.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) #s(literal -1/9 binary64)) (*.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))))","(+.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x)) (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1/9 binary64) x)))","(+.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1/9 binary64) x)) (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x)))","(+.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 x (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 x #s(literal -1/9 binary64))))","(+.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 x #s(literal -1/9 binary64))) (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 x (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))))))","(+.f64 (*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))) (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/3 binary64) x)))","(+.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/3 binary64) x)) (*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))))","(+.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(+.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 #s(literal 1/3 binary64) x))","(+.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)))","(*.f64 (*.f64 x (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64))) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64))) (pow.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x)","(*.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (neg.f64 x)))","(*.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) #s(literal 1 binary64))","(*.f64 x (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x) (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x)) (*.f64 (*.f64 #s(literal -1/9 binary64) x) (*.f64 #s(literal -1/9 binary64) x))) (-.f64 (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x) (*.f64 #s(literal -1/9 binary64) x)))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/9 binary64) x) (*.f64 #s(literal -1/9 binary64) x)) (*.f64 (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x) (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x))) (-.f64 (*.f64 #s(literal -1/9 binary64) x) (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x)))","(/.f64 (-.f64 (*.f64 (*.f64 x (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 x (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (*.f64 x #s(literal -1/9 binary64)) (*.f64 x #s(literal -1/9 binary64)))) (-.f64 (*.f64 x (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 x #s(literal -1/9 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 x #s(literal -1/9 binary64)) (*.f64 x #s(literal -1/9 binary64))) (*.f64 (*.f64 x (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 x (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))))) (-.f64 (*.f64 x #s(literal -1/9 binary64)) (*.f64 x (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -1/9 binary64) x) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x) (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x) (-.f64 (*.f64 (*.f64 #s(literal -1/9 binary64) x) (*.f64 #s(literal -1/9 binary64) x)) (*.f64 (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x) (*.f64 #s(literal -1/9 binary64) x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal -1/9 binary64) x) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal -1/9 binary64) x) (*.f64 #s(literal -1/9 binary64) x) (-.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x) (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x)) (*.f64 (*.f64 #s(literal -1/9 binary64) x) (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 x (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) #s(literal 3 binary64)) (pow.f64 (*.f64 x #s(literal -1/9 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 x (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 x (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (*.f64 (*.f64 x #s(literal -1/9 binary64)) (*.f64 x #s(literal -1/9 binary64))) (*.f64 (*.f64 x (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 x #s(literal -1/9 binary64))))))","(/.f64 (+.f64 (pow.f64 (*.f64 x #s(literal -1/9 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 x (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) #s(literal 3 binary64))) (fma.f64 (*.f64 x #s(literal -1/9 binary64)) (*.f64 x #s(literal -1/9 binary64)) (-.f64 (*.f64 (*.f64 x (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 x (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (*.f64 x #s(literal -1/9 binary64)) (*.f64 x (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))))))))","(/.f64 (neg.f64 (*.f64 x (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)))) (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))))","(/.f64 (neg.f64 (*.f64 x (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)))) (neg.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) x)) (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) x)) (neg.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64))))))","(/.f64 (*.f64 x (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64))) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)))","(/.f64 (*.f64 x (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64))) (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)))","(/.f64 (*.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) x) (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (pow.f64 x #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 x (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))) (*.f64 x (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))) (*.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) x)))","(/.f64 x (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64)))","(neg.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (neg.f64 x)))","(fma.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x (*.f64 #s(literal -1/9 binary64) x))","(fma.f64 #s(literal -1/9 binary64) x (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x))","(fma.f64 x (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 x #s(literal -1/9 binary64)))","(fma.f64 x #s(literal -1/9 binary64) (*.f64 x (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))))","(-.f64 #s(literal 0 binary64) (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (neg.f64 x)))","(+.f64 (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x) (*.f64 #s(literal -1/9 binary64) x))","(+.f64 (*.f64 #s(literal -1/9 binary64) x) (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x))","(+.f64 (*.f64 x (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 x #s(literal -1/9 binary64)))","(+.f64 (*.f64 x #s(literal -1/9 binary64)) (*.f64 x (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))))","(*.f64 (-.f64 #s(literal 1/81 binary64) (*.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))))))","(*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/81 binary64) (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/18225 binary64))))))","(*.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) (pow.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))","(pow.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))) (/.f64 (*.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)))) (*.f64 (/.f64 #s(literal 1/81 binary64) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))) (/.f64 #s(literal 1/81 binary64) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))))) (+.f64 (/.f64 (*.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))) (/.f64 #s(literal 1/81 binary64) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/81 binary64) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))) (/.f64 (*.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))) (fma.f64 (/.f64 #s(literal 1/81 binary64) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))) (/.f64 #s(literal 1/81 binary64) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))) (/.f64 #s(literal 1/81 binary64) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/81 binary64) (*.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64))))) (neg.f64 (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))) (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) #s(literal 1/81 binary64))) (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))))","(/.f64 (-.f64 #s(literal 1/81 binary64) (*.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)))) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64))) (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64))) (neg.f64 (+.f64 #s(literal 1/81 binary64) (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/18225 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64))) (neg.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64))))))","(/.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)))","(/.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) (+.f64 #s(literal 1/81 binary64) (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/18225 binary64)))))","(/.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 #s(literal 1/81 binary64) (*.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/81 binary64) (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/18225 binary64)))) (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) #s(literal 1 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) #s(literal 1 binary64)) #s(literal -1/9 binary64))","(fma.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (*.f64 #s(literal 1/45 binary64) x)) x #s(literal -1/9 binary64))","(fma.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (*.f64 x x)) #s(literal 1/45 binary64) #s(literal -1/9 binary64))","(fma.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/9 binary64))","(fma.f64 (*.f64 #s(literal 1/2025 binary64) (*.f64 x x)) (*.f64 x x) #s(literal -1/9 binary64))","(fma.f64 (*.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/81 binary64) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)))))","(fma.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) #s(literal -1/9 binary64))","(fma.f64 (*.f64 #s(literal 1/45 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) #s(literal -1/9 binary64))","(fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))","(fma.f64 (*.f64 x x) (*.f64 #s(literal 1/45 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) #s(literal -1/9 binary64))","(fma.f64 (*.f64 x x) (*.f64 #s(literal 1/2025 binary64) (*.f64 x x)) #s(literal -1/9 binary64))","(fma.f64 #s(literal 1/45 binary64) (*.f64 (*.f64 x x) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) #s(literal -1/9 binary64))","(-.f64 (/.f64 #s(literal 1/81 binary64) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))))) (/.f64 (*.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64))) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))))))","(-.f64 (/.f64 (*.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64))) (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64))))) (/.f64 #s(literal 1/729 binary64) (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64))))))","(-.f64 (/.f64 (*.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))) (/.f64 #s(literal 1/81 binary64) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))))","(-.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1/9 binary64))","(+.f64 (/.f64 (*.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))) (neg.f64 (/.f64 #s(literal 1/81 binary64) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)))))","(+.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -1/9 binary64))","(+.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (pow.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x) x) (/.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(*.f64 (/.f64 (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) #s(literal -1 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64)) (/.f64 (neg.f64 x) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal 1 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (/.f64 x (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal -1 binary64))) (/.f64 x (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64))))))","(*.f64 (/.f64 x (pow.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1/2 binary64))) (/.f64 x (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1/2 binary64))))","(*.f64 (/.f64 x (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1/2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","(*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))","(*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))))","(*.f64 (/.f64 x (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 x (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) #s(literal -1 binary64))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (pow.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 #s(literal 1/9 binary64) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/3 binary64) x (*.f64 #s(literal -1/45 binary64) (pow.f64 x #s(literal 3 binary64))))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64) (*.f64 #s(literal -1/9 binary64) (*.f64 x x)))) (/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64) (*.f64 (*.f64 #s(literal 1/3 binary64) x) (fma.f64 #s(literal 1/3 binary64) x (*.f64 #s(literal -1/45 binary64) (pow.f64 x #s(literal 3 binary64)))))))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) x) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) x) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(*.f64 (*.f64 x (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) #s(literal -1 binary64)))","(*.f64 (*.f64 x #s(literal -1 binary64)) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)))","(*.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64) (*.f64 #s(literal -1/9 binary64) (*.f64 x x))) (pow.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x))","(*.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/9 binary64) (*.f64 x x) (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 #s(literal 1/3 binary64) x))))))","(*.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64) (*.f64 (*.f64 #s(literal 1/3 binary64) x) (fma.f64 #s(literal 1/3 binary64) x (*.f64 #s(literal -1/45 binary64) (pow.f64 x #s(literal 3 binary64)))))) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (neg.f64 x)) (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(*.f64 (neg.f64 x) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x) #s(literal -1 binary64)))))","(*.f64 #s(literal -1 binary64) (*.f64 (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) x))","(*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x) #s(literal 1 binary64))","(*.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","(*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","(*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))","(pow.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))) (*.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))) (+.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (fma.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (*.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))) (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))) (neg.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64))))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/9 binary64) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)))) (neg.f64 (fma.f64 #s(literal 1/3 binary64) x (*.f64 #s(literal -1/45 binary64) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64) (*.f64 #s(literal -1/9 binary64) (*.f64 x x))))) (neg.f64 (neg.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64) (*.f64 (*.f64 #s(literal 1/3 binary64) x) (fma.f64 #s(literal 1/3 binary64) x (*.f64 #s(literal -1/45 binary64) (pow.f64 x #s(literal 3 binary64)))))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) x)) (neg.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) x)) (neg.f64 (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(/.f64 (neg.f64 (*.f64 x (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)))) (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (*.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (*.f64 #s(literal 1/9 binary64) (*.f64 x x)))) (*.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(/.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)))","(/.f64 (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)))","(/.f64 (*.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1/9 binary64) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64))) (fma.f64 #s(literal 1/3 binary64) x (*.f64 #s(literal -1/45 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64) (*.f64 #s(literal -1/9 binary64) (*.f64 x x)))) (neg.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(literal 1/9 binary64) (*.f64 x x) (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 #s(literal 1/3 binary64) x))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64) (*.f64 (*.f64 #s(literal 1/3 binary64) x) (fma.f64 #s(literal 1/3 binary64) x (*.f64 #s(literal -1/45 binary64) (pow.f64 x #s(literal 3 binary64))))))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) x) (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) x) (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(/.f64 (*.f64 x (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))))","(/.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64)))","(/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64) (*.f64 #s(literal -1/9 binary64) (*.f64 x x))) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) x))","(/.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64))) (fma.f64 #s(literal 1/9 binary64) (*.f64 x x) (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 #s(literal 1/3 binary64) x)))))","(/.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64) (*.f64 (*.f64 #s(literal 1/3 binary64) x) (fma.f64 #s(literal 1/3 binary64) x (*.f64 #s(literal -1/45 binary64) (pow.f64 x #s(literal 3 binary64)))))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (neg.f64 x)) (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)))","(/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x) #s(literal -1 binary64))))","(/.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x) #s(literal 1 binary64))","(/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))","(/.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) (pow.f64 x #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))) (*.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/3 binary64) x (*.f64 #s(literal -1/45 binary64) (pow.f64 x #s(literal 3 binary64)))) (-.f64 (*.f64 #s(literal 1/9 binary64) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (*.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) (*.f64 x (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/9 binary64) (*.f64 x x) (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 #s(literal 1/3 binary64) x)))) (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x) #s(literal -1 binary64)))","(/.f64 x (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)))","(neg.f64 (*.f64 (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) x))","(fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) x) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 #s(literal 1/45 binary64) x)) x) (/.f64 (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 x x)) x) (/.f64 (*.f64 #s(literal 1/45 binary64) x) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) x) x) (/.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/2025 binary64) (*.f64 x x)) x) (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x) (/.f64 (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) x) (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/45 binary64) x) x) (/.f64 (*.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) x) (/.f64 (*.f64 #s(literal 1/2025 binary64) (*.f64 x x)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 x x) x) (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) x) (/.f64 (*.f64 x (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 x x) (/.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) #s(literal 1/3 binary64)))","(fma.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) #s(literal 1/3 binary64) (*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)))","(fma.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64))) (*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))))","(fma.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))))","(fma.f64 (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal -1/9 binary64) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))))","(fma.f64 (*.f64 #s(literal -1/9 binary64) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))))","(fma.f64 (*.f64 x (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 x #s(literal -1/9 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))))","(fma.f64 (*.f64 x #s(literal -1/9 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 x (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))))","(fma.f64 (neg.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) (*.f64 x #s(literal -1 binary64)) (*.f64 #s(literal -1/3 binary64) (*.f64 x #s(literal -1 binary64))))","(fma.f64 (*.f64 x #s(literal -1 binary64)) (neg.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) (*.f64 (*.f64 x #s(literal -1 binary64)) #s(literal -1/3 binary64)))","(fma.f64 (*.f64 x #s(literal -1 binary64)) #s(literal -1/3 binary64) (*.f64 (*.f64 x #s(literal -1 binary64)) (neg.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) #s(literal -1/9 binary64)))","(fma.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) #s(literal -1/9 binary64) (*.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))))","(fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x) (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1/9 binary64) x)))","(fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1/9 binary64) x) (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x)))","(fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 x (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 x #s(literal -1/9 binary64))))","(fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 x #s(literal -1/9 binary64)) (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 x (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))))))","(fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (pow.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) #s(literal -1 binary64)) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(fma.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64))) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64)))))","(fma.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (*.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64))) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64)))))","(fma.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (*.f64 #s(literal -1/9 binary64) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(fma.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 1 binary64)))","(fma.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (*.f64 #s(literal 1/3 binary64) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))))","(fma.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) x (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 1 binary64) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) #s(literal 1 binary64)))","(fma.f64 (*.f64 #s(literal 1/45 binary64) x) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 #s(literal -1/3 binary64) (*.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) (*.f64 x #s(literal -1 binary64))))","(fma.f64 #s(literal -1/9 binary64) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(fma.f64 #s(literal 1/3 binary64) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))))","(fma.f64 #s(literal 1/3 binary64) x (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)))","(fma.f64 (*.f64 x x) (*.f64 #s(literal 1/45 binary64) x) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 #s(literal 1/45 binary64) (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/3 binary64) x)))","(fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/3 binary64) x) (*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))))","(fma.f64 x (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 x #s(literal 1/3 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)))","(-.f64 (/.f64 (*.f64 #s(literal 1/9 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/3 binary64) x (*.f64 #s(literal -1/45 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (fma.f64 #s(literal 1/3 binary64) x (*.f64 #s(literal -1/45 binary64) (pow.f64 x #s(literal 3 binary64))))))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x))) (*.f64 (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) x))","(-.f64 (/.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))) (*.f64 (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) x))","(-.f64 (/.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) #s(literal 1 binary64)) (/.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) #s(literal 1 binary64)))","(-.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(-.f64 #s(literal 0 binary64) (*.f64 (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))) (*.f64 #s(literal 1/3 binary64) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))))","(+.f64 (*.f64 #s(literal 1/3 binary64) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))) (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))))","(+.f64 (*.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64))) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64)))) (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64)))))","(+.f64 (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64)))) (*.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64))) (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64)))))","(+.f64 (*.f64 (neg.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) (*.f64 x #s(literal -1 binary64))) (*.f64 #s(literal -1/3 binary64) (*.f64 x #s(literal -1 binary64))))","(+.f64 (*.f64 #s(literal -1/3 binary64) (*.f64 x #s(literal -1 binary64))) (*.f64 (neg.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) (*.f64 x #s(literal -1 binary64))))","(+.f64 (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (*.f64 #s(literal -1/9 binary64) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(+.f64 (*.f64 #s(literal -1/9 binary64) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))))","(+.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal -1/9 binary64) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 (*.f64 #s(literal -1/9 binary64) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 (*.f64 x (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 x #s(literal -1/9 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 (*.f64 x #s(literal -1/9 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 x (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 1 binary64)))","(+.f64 (*.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 1 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) (*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) #s(literal 1/3 binary64)))","(+.f64 (*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) #s(literal 1/3 binary64)) (*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)))","(+.f64 (*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) (*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))))","(+.f64 (*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))))","(+.f64 (*.f64 (*.f64 x #s(literal -1 binary64)) (neg.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x))) (*.f64 (*.f64 x #s(literal -1 binary64)) #s(literal -1/3 binary64)))","(+.f64 (*.f64 (*.f64 x #s(literal -1 binary64)) #s(literal -1/3 binary64)) (*.f64 (*.f64 x #s(literal -1 binary64)) (neg.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x))))","(+.f64 (*.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) #s(literal -1/9 binary64)))","(+.f64 (*.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) #s(literal -1/9 binary64)) (*.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))))","(+.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x)) (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1/9 binary64) x)))","(+.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1/9 binary64) x)) (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x)))","(+.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 x (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 x #s(literal -1/9 binary64))))","(+.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 x #s(literal -1/9 binary64))) (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 x (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))))))","(+.f64 (*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))) (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/3 binary64) x)))","(+.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/3 binary64) x)) (*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))))","(+.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))))","(+.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 #s(literal 1/3 binary64) x))","(+.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","(*.f64 (neg.f64 x) (neg.f64 x))","(*.f64 (*.f64 x x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 x x))","(*.f64 x x)","(pow.f64 (neg.f64 x) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1 binary64))","(pow.f64 x #s(literal 2 binary64))","(/.f64 x (pow.f64 x #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)))","(*.f64 #s(literal 1/45 binary64) x)","(*.f64 x #s(literal 1/45 binary64))","(/.f64 #s(literal 1/45 binary64) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (/.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) (/.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) #s(literal -1 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 (pow.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))) #s(literal -1 binary64)) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) (/.f64 (pow.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))) #s(literal -1 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))))","(*.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))))))","(*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (/.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))))","(*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (*.f64 x x) #s(literal 1/135 binary64))))))","(*.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64)) (/.f64 (pow.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) #s(literal -1 binary64))))","(*.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64)) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))","(pow.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))) (*.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))))) (fma.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) #s(literal 1/2025 binary64) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) (fma.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal 1/9 binary64))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))))","(/.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (neg.f64 (+.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (*.f64 x x) #s(literal 1/135 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64))))))","(/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))","(/.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64)) (+.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))))","(/.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))))","(/.f64 (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))))","(/.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)))","(neg.f64 (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)))","(fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (*.f64 #s(literal 1/45 binary64) x)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (*.f64 #s(literal 1/45 binary64) x)) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (/.f64 x (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (*.f64 #s(literal 1/45 binary64) x)) #s(literal -1 binary64)) (/.f64 x (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (*.f64 #s(literal 1/45 binary64) x)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) x (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (*.f64 #s(literal 1/45 binary64) x)) #s(literal 1 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (*.f64 x x)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 #s(literal 1/45 binary64) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (*.f64 x x)) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (/.f64 #s(literal 1/45 binary64) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (*.f64 x x)) #s(literal -1 binary64)) (/.f64 #s(literal 1/45 binary64) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (*.f64 x x)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) #s(literal 1/45 binary64) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (*.f64 x x)) #s(literal 1 binary64)) (/.f64 #s(literal 1/45 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) #s(literal 1/45 binary64)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 (*.f64 x x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) #s(literal 1/45 binary64)) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (/.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) #s(literal 1/45 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) #s(literal 1/45 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) (/.f64 (*.f64 x x) #s(literal 1 binary64)) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) #s(literal 1/45 binary64)) #s(literal 1 binary64)) (/.f64 (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/2025 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 (*.f64 x x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/2025 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (/.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/2025 binary64) (*.f64 x x)) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/2025 binary64) (*.f64 x x)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) (/.f64 (*.f64 x x) #s(literal 1 binary64)) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/2025 binary64) (*.f64 x x)) #s(literal 1 binary64)) (/.f64 (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (/.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) #s(literal -1 binary64)) (/.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) (/.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) #s(literal 1 binary64)) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/45 binary64) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/45 binary64) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/45 binary64) x) #s(literal -1 binary64)) (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/45 binary64) x) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) #s(literal 1 binary64)) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/45 binary64) x) #s(literal 1 binary64)) (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 #s(literal 1/2025 binary64) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 #s(literal 1/2025 binary64) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (/.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 #s(literal -1/2025 binary64) (/.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 #s(literal 1/2025 binary64) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (/.f64 #s(literal 1/2025 binary64) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal 1/2025 binary64) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) #s(literal 1/2025 binary64) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 #s(literal 1/2025 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) (/.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2025 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 x x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 x x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 (*.f64 #s(literal 1/2025 binary64) (*.f64 x x)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 x x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (/.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 x x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (/.f64 (*.f64 #s(literal 1/2025 binary64) (*.f64 x x)) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 x x) #s(literal -1 binary64)) (/.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 x x) #s(literal -1 binary64)) (/.f64 (*.f64 #s(literal 1/2025 binary64) (*.f64 x x)) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) (/.f64 (*.f64 #s(literal 1/2025 binary64) (*.f64 x x)) #s(literal 1 binary64)) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) (/.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) #s(literal 1 binary64)) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (/.f64 (*.f64 #s(literal 1/2025 binary64) (*.f64 x x)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (/.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 #s(literal 1/45 binary64) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 #s(literal 1/45 binary64) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (/.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 #s(literal -1/45 binary64) (/.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 #s(literal 1/45 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) (/.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) #s(literal 1 binary64)) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) #s(literal 1 binary64)) (/.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) #s(literal 1 binary64) #s(literal -1/3 binary64))","(fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))","(fma.f64 #s(literal 1/2025 binary64) (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))","(fma.f64 #s(literal 1/45 binary64) (/.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) #s(literal -1/3 binary64))","(fma.f64 x (*.f64 #s(literal 1/45 binary64) x) #s(literal -1/3 binary64))","(-.f64 (/.f64 #s(literal 1/9 binary64) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x))) (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x))))","(-.f64 (/.f64 (*.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64))))) (/.f64 #s(literal 1/27 binary64) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64))))))","(-.f64 (/.f64 (/.f64 (*.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) (/.f64 (/.f64 #s(literal 1/81 binary64) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))))","(-.f64 (/.f64 (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) #s(literal 1 binary64)) (/.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) #s(literal 1 binary64)))","(-.f64 (/.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) #s(literal 1 binary64)) #s(literal 1/3 binary64))","(-.f64 (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))))","(-.f64 #s(literal 0 binary64) (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)))","(-.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) #s(literal 1/3 binary64))","(+.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) #s(literal 1 binary64)) #s(literal -1/3 binary64))","(+.f64 (*.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) #s(literal -1/3 binary64))","(+.f64 (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))))","(+.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) #s(literal -1/3 binary64))","(+.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) #s(literal 1 binary64)))","(+.f64 #s(literal -1/3 binary64) (*.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)))","(+.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x))","(*.f64 #s(literal 1/3 binary64) x)","(*.f64 x #s(literal 1/3 binary64))","(/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal -1 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":327.2890625,"type":"rewrite"},{"compiler":[[20629,2393]],"memory":[[3465664,58843104]],"time":73.54296875,"type":"eval"},{"alts":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (fma.f64 (*.f64 x x) (*.f64 #s(literal 1/45 binary64) x) (*.f64 #s(literal 1/3 binary64) x)))","done",0.38855378511156136,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 (*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))))","next",0.36098246479692214,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))))","next",0.05629496479692215,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","next",0.2863111282843665,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","done",0.3359375,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","done",0.39246003511156136,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","done",0.6144691813284442,"binary64"]],"compiler":[[19,13],[27,21],[27,19],[22,16],[22,14],[17,12],[12,9]],"count":[[596,7]],"kept":[{"done":[3,3],"fresh":[0,0],"new":[590,3],"picked":[3,1]}],"memory":[[-1323024,23188896]],"min-error":[[0.0,"binary64"]],"time":10.487060546875,"type":"prune"},{"egraph":[[0,2198,189,0.006391369],[17,2198,199,0.01150695],[16,2197,199,0.011472784],[15,2191,199,0.013623706],[14,2167,199,0.010288684],[13,2099,199,0.011055767],[12,1972,199,0.00948062],[11,1501,199,0.00936576],[10,1187,199,0.007699925],[9,766,199,0.008114596],[8,341,199,0.003651459],[7,193,199,0.001808241],[6,160,199,0.001264908],[5,121,199,0.000823062],[4,101,199,0.000605598],[3,88,199,0.000548216],[2,78,199,0.000470384],[1,61,199,0.00043384],[0,43,199,0.000400559],[0,34,199,0.000246133]],"inputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","(/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)))","x","#s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))","#s(literal 3 binary64)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))))","(/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))))","x","#s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))","(fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))","#s(literal -1/5 binary64)","(*.f64 x x)","#s(literal 3 binary64)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 (*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))))","(/.f64 (*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)))","(*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) x)","#s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64))","#s(literal -1/9 binary64)","x","(fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))","#s(literal 1/45 binary64)","(*.f64 x x)","#s(literal -1/3 binary64)"]],"locations":[["#s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64))","cost-diff",0],["(*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) x)","cost-diff",0],["(/.f64 (*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)))","cost-diff",0],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 (*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))))","cost-diff",0],["(fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))","cost-diff",0],["#s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))","cost-diff",0],["(/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))))","cost-diff",0],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))))","cost-diff",0],["#s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))","cost-diff",0],["(/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)))","cost-diff",0],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","cost-diff",0]],"memory":[[-6105536,4676176]],"method":["egg-herbie"],"outputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","(/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)))","x","#s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))","#s(literal 3 binary64)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64)))))","(/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))))","(/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64))))","x","#s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))","#s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64)))","(fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))","(fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64))","#s(literal -1/5 binary64)","(*.f64 x x)","#s(literal 3 binary64)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 (*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64))))","(/.f64 (*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)))","(*.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)))","(*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) x)","#s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64))","#s(literal -1/9 binary64)","x","(fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))","(fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))","#s(literal 1/45 binary64)","(*.f64 x x)","#s(literal -1/3 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":135.573974609375,"type":"simplify"},{"compiler":[[128,29]],"locations":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 (*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))))","accuracy",0.05652005085870934],["#s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64))","accuracy",0.05820632674993744],["(*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) x)","accuracy",0.30859375],["(/.f64 (*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)))","accuracy",0.36328125],["(*.f64 x x)","accuracy",0.0],["(/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))))","accuracy",0.015625],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))))","accuracy",0.05652005085870934],["#s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))","accuracy",0.056713008677384893],["(/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)))","accuracy",0.015625],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","accuracy",0.05652005085870934],["#s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))","accuracy",0.29412477511936885]],"memory":[[1956000,42559504]],"mixsample":[[29.704833984375,"ival-tan",2000],[13.813232421875,"adjust",800],[15.860595703125,"ival-div",0],[0.654052734375,"ival-div",400],[0.127197265625,"ival-assert",0],[0.067138671875,"ival-div",1600],[3.166015625,"ival-sub",0],[153.97314453125,"ival-tan",2400],[2.32275390625,"ival-tan",0],[26.736572265625,"const",0],[1.261474609375,"ival-tan",400],[3.951904296875,"ival-pow",0],[6.504638671875,"adjust",2000],[0.033935546875,"ival-tan",1600],[16.646240234375,"ival-tan",800],[2.090576171875,"ival-div",1200],[8.306640625,"ival-add",0],[9.5908203125,"ival-mult",0],[1.713134765625,"ival-div",800],[0.24365234375,"ival-true",0],[0.5947265625,"ival-div",2000],[0.487548828125,"exact",0],[1.821044921875,"ival-tan",1200],[2.819091796875,"ival-div",2400]],"outcomes":[[73.892822265625,1,"valid",129],[260.247314453125,2,"valid",125],[0.447265625,0,"valid",2]],"time":357.23388671875,"type":"localize"},{"count":[[12,28]],"inputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","(/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)))","#s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))))","(/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))))","#s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))","(fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 (*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))))","(/.f64 (*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)))","(*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) x)","#s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64))","(*.f64 x x)"]],"memory":[[3901808,3901808]],"outputs":[["(* 1/3 x)","(* x (+ 1/3 (* 1/45 (pow x 2))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))))","3","(+ 3 (* -1/5 (pow x 2)))","(+ 3 (* (pow x 2) (- (* 1/75 (pow x 2)) 1/5)))","(+ 3 (* (pow x 2) (- (* (pow x 2) (+ 1/75 (* -1/1125 (pow x 2)))) 1/5)))","(* -1/9 x)","(* x (- (* 1/2025 (pow x 4)) 1/9))","-1/9","(- (* 1/2025 (pow x 4)) 1/9)","(pow x 2)","(* -1 (/ (cos x) (sin x)))","(- (/ 1 x) (/ (cos x) (sin x)))","(* 1/45 (pow x 3))","(* (pow x 3) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(/ 45 (pow x 2))","(/ (- 45 (* 675 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (+ 45 (/ 10125 (pow x 4))) (* 675 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (+ 45 (/ 10125 (pow x 4))) (+ (* 675 (/ 1 (pow x 2))) (* 151875 (/ 1 (pow x 6))))) (pow x 2))","(* -1/5 (pow x 2))","(* (pow x 2) (- (* 3 (/ 1 (pow x 2))) 1/5))","(* 1/2025 (pow x 5))","(* (pow x 5) (- 1/2025 (* 1/9 (/ 1 (pow x 4)))))","(* 1/2025 (pow x 4))","(* (pow x 4) (- 1/2025 (* 1/9 (/ 1 (pow x 4)))))","(* -1 (* (pow x 5) (- (* 1/9 (/ 1 (pow x 4))) 1/2025)))"]],"series":[[2.043212890625,"((- (/ 1 x) (/ 1 (tan x))) (/ x (/ 1 (+ (* 1/45 (* x x)) 1/3))) (/ 1 (+ (* 1/45 (* x x)) 1/3)) (- (/ 1 x) (/ 1 (tan x))) (/ x (/ 1 (+ (* 1/45 (* x x)) 1/3))) (/ 1 (+ (* 1/45 (* x x)) 1/3)) (+ (* -1/5 (* x x)) 3) (- (/ 1 x) (/ 1 (tan x))) (/ (* (+ (* (pow x 4) 1/2025) -1/9) x) (+ (* 1/45 (* x x)) -1/3)) (* (+ (* (pow x 4) 1/2025) -1/9) x) (+ (* (pow x 4) 1/2025) -1/9) (* x x))","x","-inf"],[1.930908203125,"((- (/ 1 x) (/ 1 (tan x))) (/ x (/ 1 (+ (* 1/45 (* x x)) 1/3))) (/ 1 (+ (* 1/45 (* x x)) 1/3)) (- (/ 1 x) (/ 1 (tan x))) (/ x (/ 1 (+ (* 1/45 (* x x)) 1/3))) (/ 1 (+ (* 1/45 (* x x)) 1/3)) (+ (* -1/5 (* x x)) 3) (- (/ 1 x) (/ 1 (tan x))) (/ (* (+ (* (pow x 4) 1/2025) -1/9) x) (+ (* 1/45 (* x x)) -1/3)) (* (+ (* (pow x 4) 1/2025) -1/9) x) (+ (* (pow x 4) 1/2025) -1/9) (* x x))","x","inf"],[1.3671875,"((- (/ 1 x) (/ 1 (tan x))) (/ x (/ 1 (+ (* 1/45 (* x x)) 1/3))) (/ 1 (+ (* 1/45 (* x x)) 1/3)) (- (/ 1 x) (/ 1 (tan x))) (/ x (/ 1 (+ (* 1/45 (* x x)) 1/3))) (/ 1 (+ (* 1/45 (* x x)) 1/3)) (+ (* -1/5 (* x x)) 3) (- (/ 1 x) (/ 1 (tan x))) (/ (* (+ (* (pow x 4) 1/2025) -1/9) x) (+ (* 1/45 (* x x)) -1/3)) (* (+ (* (pow x 4) 1/2025) -1/9) x) (+ (* (pow x 4) 1/2025) -1/9) (* x x))","x","0"]],"time":6.03515625,"type":"series"},{"count":[[28,28]],"egraph":[[0,8034,224,0.049416625],[5,6557,243,0.018681467],[4,3010,243,0.023161258],[3,1423,243,0.01184804],[2,594,243,0.004974441],[1,238,243,0.001917281],[0,96,243,0.000966492]],"inputs":[["(* 1/3 x)","(* x (+ 1/3 (* 1/45 (pow x 2))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))))","3","(+ 3 (* -1/5 (pow x 2)))","(+ 3 (* (pow x 2) (- (* 1/75 (pow x 2)) 1/5)))","(+ 3 (* (pow x 2) (- (* (pow x 2) (+ 1/75 (* -1/1125 (pow x 2)))) 1/5)))","(* -1/9 x)","(* x (- (* 1/2025 (pow x 4)) 1/9))","-1/9","(- (* 1/2025 (pow x 4)) 1/9)","(pow x 2)","(* -1 (/ (cos x) (sin x)))","(- (/ 1 x) (/ (cos x) (sin x)))","(* 1/45 (pow x 3))","(* (pow x 3) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(/ 45 (pow x 2))","(/ (- 45 (* 675 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (+ 45 (/ 10125 (pow x 4))) (* 675 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (+ 45 (/ 10125 (pow x 4))) (+ (* 675 (/ 1 (pow x 2))) (* 151875 (/ 1 (pow x 6))))) (pow x 2))","(* -1/5 (pow x 2))","(* (pow x 2) (- (* 3 (/ 1 (pow x 2))) 1/5))","(* 1/2025 (pow x 5))","(* (pow x 5) (- 1/2025 (* 1/9 (/ 1 (pow x 4)))))","(* 1/2025 (pow x 4))","(* (pow x 4) (- 1/2025 (* 1/9 (/ 1 (pow x 4)))))","(* -1 (* (pow x 5) (- (* 1/9 (/ 1 (pow x 4))) 1/2025)))"]],"memory":[[1325024,26656400]],"method":["egg-herbie"],"outputs":[["(* 1/3 x)","(*.f64 #s(literal 1/3 binary64) x)","(* x (+ 1/3 (* 1/45 (pow x 2))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","3","#s(literal 3 binary64)","(+ 3 (* -1/5 (pow x 2)))","(fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))","(+ 3 (* (pow x 2) (- (* 1/75 (pow x 2)) 1/5)))","(fma.f64 (fma.f64 #s(literal 1/75 binary64) (*.f64 x x) #s(literal -1/5 binary64)) (*.f64 x x) #s(literal 3 binary64))","(+ 3 (* (pow x 2) (- (* (pow x 2) (+ 1/75 (* -1/1125 (pow x 2)))) 1/5)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/1125 binary64) (*.f64 x x) #s(literal 1/75 binary64)) (*.f64 x x) #s(literal -1/5 binary64)) (*.f64 x x) #s(literal 3 binary64))","(* -1/9 x)","(*.f64 #s(literal -1/9 binary64) x)","(* x (- (* 1/2025 (pow x 4)) 1/9))","(*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x)","-1/9","#s(literal -1/9 binary64)","(- (* 1/2025 (pow x 4)) 1/9)","(fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))","(pow x 2)","(*.f64 x x)","(* -1 (/ (cos x) (sin x)))","(/.f64 (neg.f64 (cos.f64 x)) (sin.f64 x))","(- (/ 1 x) (/ (cos x) (sin x)))","(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 (cos.f64 x) (sin.f64 x)))","(* 1/45 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))","(* (pow x 3) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","(/ 45 (pow x 2))","(/.f64 #s(literal 45 binary64) (*.f64 x x))","(/ (- 45 (* 675 (/ 1 (pow x 2)))) (pow x 2))","(/.f64 (/.f64 (-.f64 #s(literal 45 binary64) (/.f64 #s(literal 675 binary64) (*.f64 x x))) x) x)","(/ (- (+ 45 (/ 10125 (pow x 4))) (* 675 (/ 1 (pow x 2)))) (pow x 2))","(/.f64 (-.f64 (/.f64 #s(literal -675 binary64) (*.f64 x x)) (-.f64 #s(literal -45 binary64) (/.f64 #s(literal 10125 binary64) (pow.f64 x #s(literal 4 binary64))))) (*.f64 x x))","(/ (- (+ 45 (/ 10125 (pow x 4))) (+ (* 675 (/ 1 (pow x 2))) (* 151875 (/ 1 (pow x 6))))) (pow x 2))","(/.f64 (/.f64 (-.f64 (-.f64 (/.f64 #s(literal -675 binary64) (*.f64 x x)) (-.f64 #s(literal -45 binary64) (/.f64 #s(literal 10125 binary64) (pow.f64 x #s(literal 4 binary64))))) (/.f64 #s(literal 151875 binary64) (pow.f64 x #s(literal 6 binary64)))) x) x)","(* -1/5 (pow x 2))","(*.f64 #s(literal -1/5 binary64) (*.f64 x x))","(* (pow x 2) (- (* 3 (/ 1 (pow x 2))) 1/5))","(fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))","(* 1/2025 (pow x 5))","(*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal 1/2025 binary64))","(* (pow x 5) (- 1/2025 (* 1/9 (/ 1 (pow x 4)))))","(*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x)","(* 1/2025 (pow x 4))","(*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (- 1/2025 (* 1/9 (/ 1 (pow x 4)))))","(fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))","(* -1 (* (pow x 5) (- (* 1/9 (/ 1 (pow x 4))) 1/2025)))","(*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x)"]],"stop":[["iter limit",1],["node limit",1]],"time":199.889892578125,"type":"simplify"},{"count":[[12,175]],"egraph":[[0,8509,171,0.0628971],[2,1228,181,0.031305131],[1,179,181,0.005168366],[0,43,181,0.001556789],[0,34,181,0.000256081]],"inputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","(/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)))","#s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))))","(/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))))","#s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))","(fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 (*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))))","(/.f64 (*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)))","(*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) x)","#s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64))","(*.f64 x x)"]],"memory":[[1468128,41799200]],"outputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","(*.f64 (pow.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)) #s(literal -1 binary64)) x)","(*.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)) x))))","(*.f64 #s(literal -1 binary64) (/.f64 (neg.f64 x) #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","(*.f64 x (pow.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","(pow.f64 (/.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)) x) #s(literal -1 binary64))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)) #s(literal -1 binary64)))","(/.f64 (*.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)))))","(/.f64 (pow.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(/.f64 (neg.f64 x) (*.f64 (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))) #s(literal 1 binary64)))","(/.f64 (neg.f64 x) (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","(/.f64 #s(literal -1 binary64) (*.f64 (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))) (pow.f64 x #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)) x)))","(/.f64 x (*.f64 (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))) #s(literal -1 binary64)))","(/.f64 x (*.f64 #s(literal 1 binary64) #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","(/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)) x))))","(/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)) x))","(neg.f64 (/.f64 (neg.f64 x) #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)))) (/.f64 (neg.f64 x) #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","(-.f64 #s(literal 0 binary64) (/.f64 (neg.f64 x) #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","(exp.f64 (*.f64 (log.f64 (/.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)) x)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","(*.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)) #s(literal 1 binary64))","#s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))","(/.f64 (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))) #s(literal -1 binary64))","(/.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)) #s(literal -1 binary64)))","(neg.f64 (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","(-.f64 #s(literal 0 binary64) (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64)))))","(*.f64 (pow.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64))) #s(literal -1 binary64)) x)","(*.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64)))))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64))) x))))","(*.f64 #s(literal -1 binary64) (/.f64 (neg.f64 x) #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64)))))","(*.f64 x (pow.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64)))))","(pow.f64 (/.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64))) x) #s(literal -1 binary64))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64))) #s(literal -1 binary64)))","(/.f64 (*.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64))))))","(/.f64 (pow.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(/.f64 (neg.f64 x) (*.f64 (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64)))) #s(literal 1 binary64)))","(/.f64 (neg.f64 x) (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (*.f64 (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64)))) (pow.f64 x #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64))) x)))","(/.f64 x (*.f64 (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64)))) #s(literal -1 binary64)))","(/.f64 x (*.f64 #s(literal 1 binary64) #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64)))))","(/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64))) x))))","(/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64))) x))","(neg.f64 (/.f64 (neg.f64 x) #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64))))) (/.f64 (neg.f64 x) #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64)))))","(-.f64 #s(literal 0 binary64) (/.f64 (neg.f64 x) #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64)))))","(exp.f64 (*.f64 (log.f64 (/.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64))) x)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64)))))","(*.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64))) #s(literal 1 binary64))","#s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64)))","(/.f64 (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64))) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64))) #s(literal -1 binary64)))","(neg.f64 (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64)))))","(-.f64 #s(literal 0 binary64) (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64)))))","(*.f64 (-.f64 #s(literal 9 binary64) (*.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 3 binary64) (*.f64 (*.f64 x x) #s(literal -1/5 binary64)))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -9 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal -3 binary64)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1/125 binary64) #s(literal 27 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 9 binary64) (*.f64 (*.f64 x x) #s(literal -3/5 binary64)))))))","(*.f64 (fma.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -9 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal -3 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1/125 binary64) #s(literal 27 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 9 binary64) (-.f64 (*.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal -3/5 binary64))))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1/125 binary64) #s(literal 27 binary64)) (pow.f64 (fma.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 9 binary64) (*.f64 (*.f64 x x) #s(literal -3/5 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal -3 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 9 binary64) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal -3 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal -3 binary64))) (/.f64 (*.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal -3 binary64))) (fma.f64 (/.f64 #s(literal 9 binary64) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal -3 binary64))) (/.f64 #s(literal 9 binary64) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal -3 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal -3 binary64))) (/.f64 #s(literal 9 binary64) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal -3 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 9 binary64) (*.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (-.f64 #s(literal 3 binary64) (*.f64 (*.f64 x x) #s(literal -1/5 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -9 binary64)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal -3 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1/125 binary64) #s(literal 27 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 9 binary64) (*.f64 (*.f64 x x) #s(literal -3/5 binary64)))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 2 binary64)) #s(literal 81 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 9 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal -3 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/15625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -729 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 2 binary64)) (+.f64 #s(literal 81 binary64) (*.f64 (*.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 9 binary64)))) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal -3 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/15625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -729 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1/125 binary64) #s(literal -27 binary64)) (fma.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 9 binary64) (*.f64 (*.f64 x x) #s(literal -3/5 binary64))))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 3 binary64)) #s(literal -1/1953125 binary64) #s(literal 19683 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/15625 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 #s(literal 729 binary64) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -27/125 binary64)))) (fma.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 9 binary64) (*.f64 (*.f64 x x) #s(literal -3/5 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal -3 binary64))) (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal -3 binary64)) #s(literal 9 binary64))) (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal -3 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal -3 binary64))))","(/.f64 (-.f64 #s(literal 9 binary64) (*.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 #s(literal 3 binary64) (*.f64 (*.f64 x x) #s(literal -1/5 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -9 binary64))) (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal -3 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1/125 binary64) #s(literal 27 binary64))) (neg.f64 (+.f64 #s(literal 9 binary64) (-.f64 (*.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal -3/5 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1/125 binary64) #s(literal 27 binary64))) (neg.f64 (fma.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 9 binary64) (*.f64 (*.f64 x x) #s(literal -3/5 binary64))))))","(/.f64 (fma.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -9 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal -3 binary64)))","(/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1/125 binary64) #s(literal 27 binary64)) (+.f64 #s(literal 9 binary64) (-.f64 (*.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal -3/5 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1/125 binary64) #s(literal 27 binary64)) (fma.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 9 binary64) (*.f64 (*.f64 x x) #s(literal -3/5 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 3 binary64) (*.f64 (*.f64 x x) #s(literal -1/5 binary64))) (-.f64 #s(literal 9 binary64) (*.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 9 binary64) (-.f64 (*.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal -3/5 binary64)))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1/125 binary64) #s(literal 27 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64))))","(fma.f64 (*.f64 #s(literal -1/5 binary64) x) x #s(literal 3 binary64))","(fma.f64 (*.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal -3 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 9 binary64) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal -3 binary64)))))","(fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64))","(fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))","(fma.f64 x (*.f64 #s(literal -1/5 binary64) x) #s(literal 3 binary64))","(-.f64 (/.f64 #s(literal 9 binary64) (-.f64 #s(literal 3 binary64) (*.f64 (*.f64 x x) #s(literal -1/5 binary64)))) (/.f64 (*.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal 3 binary64) (*.f64 (*.f64 x x) #s(literal -1/5 binary64)))))","(-.f64 (/.f64 (*.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal -3 binary64))) (/.f64 #s(literal 9 binary64) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal -3 binary64))))","(+.f64 (/.f64 (*.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal -3 binary64))) (neg.f64 (/.f64 #s(literal 9 binary64) (fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal -3 binary64)))))","(+.f64 (*.f64 (*.f64 x x) #s(literal -1/5 binary64)) #s(literal 3 binary64))","(+.f64 #s(literal 3 binary64) (*.f64 (*.f64 x x) #s(literal -1/5 binary64)))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64))))","(*.f64 (/.f64 (neg.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64))) #s(literal -1 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(*.f64 (/.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 x (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (/.f64 x (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) #s(literal -1 binary64)) (/.f64 (neg.f64 x) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(*.f64 (/.f64 x #s(literal -1 binary64)) (/.f64 (neg.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(*.f64 (/.f64 x (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 x (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (/.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))","(*.f64 (/.f64 (*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))))","(*.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)))","(*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) x))","(*.f64 (*.f64 (neg.f64 x) #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) x) #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64))))))","(*.f64 #s(literal -1 binary64) (/.f64 (*.f64 (neg.f64 x) #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(*.f64 (*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)))","(*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(*.f64 x (/.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))) #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64))))","(pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) x) #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64))) #s(literal -1 binary64))","(/.f64 (*.f64 (*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) x) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) #s(literal 1/45 binary64)))))","(/.f64 (*.f64 (*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) x) (neg.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)))) (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))))))","(/.f64 (*.f64 (*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) x) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 x x) #s(literal 1/45 binary64)))) (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64)))","(/.f64 (*.f64 (*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) x) (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))) (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) #s(literal 1/45 binary64)))))","(/.f64 (*.f64 (*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(/.f64 (*.f64 (*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (+.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64))))))","(/.f64 (*.f64 (*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (+.f64 #s(literal 1/9 binary64) (-.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal 1/135 binary64))))))","(/.f64 (*.f64 (*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64))))))","(/.f64 (*.f64 (*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) x) (-.f64 (*.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64))) #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64)) (-.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64))))))","(/.f64 (*.f64 (*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) (pow.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64))) #s(literal 3 binary64)))) (*.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64)) (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64))))))))","(/.f64 (*.f64 #s(literal 1 binary64) #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64))) (*.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(/.f64 (*.f64 (*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) x) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))) (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal 1 binary64)))","(/.f64 (/.f64 (*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)))","(/.f64 (*.f64 (neg.f64 x) #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64))) (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) #s(literal 1/45 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) x) #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)))))","(/.f64 (*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) x) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)))","(/.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) x) #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) x) #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64))))","(neg.f64 (/.f64 (*.f64 (neg.f64 x) #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) #s(literal 1/45 binary64)))) (/.f64 (*.f64 (neg.f64 x) #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(-.f64 #s(literal 0 binary64) (/.f64 (*.f64 (neg.f64 x) #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64))))","(exp.f64 (*.f64 (log.f64 (/.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal -1/3 binary64)) x) #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64))))","(*.f64 (*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) x) #s(literal 1 binary64))","(*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) x)","(*.f64 x #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)))","(/.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) (pow.f64 x #s(literal -1 binary64)))","(neg.f64 (*.f64 (neg.f64 x) #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64))))","(-.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64))))","#s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64))","(*.f64 (neg.f64 x) (neg.f64 x))","(*.f64 (*.f64 x x) #s(literal 1 binary64))","(*.f64 x x)","(*.f64 #s(literal 1 binary64) (*.f64 x x))","(pow.f64 (neg.f64 x) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1 binary64))","(pow.f64 x #s(literal 2 binary64))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)))","(/.f64 (*.f64 (neg.f64 x) x) #s(literal -1 binary64))","(/.f64 (*.f64 x (neg.f64 x)) #s(literal -1 binary64))","(/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x))","(/.f64 (*.f64 x x) #s(literal 1 binary64))","(/.f64 x (pow.f64 x #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":201.7041015625,"type":"rewrite"},{"compiler":[[6866,909]],"memory":[[-6019760,20602240]],"time":25.2490234375,"type":"eval"},{"alts":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (fma.f64 (*.f64 x x) (*.f64 #s(literal 1/45 binary64) x) (*.f64 #s(literal 1/3 binary64) x)))","done",0.38855378511156136,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 (*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))))","done",0.36098246479692214,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))))","done",0.05629496479692215,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","done",0.2863111282843665,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","done",0.3359375,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","done",0.39246003511156136,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","done",0.6144691813284442,"binary64"]],"compiler":[[197,66],[19,13],[27,21],[27,19],[22,16],[22,14],[17,12],[12,9]],"count":[[221,7]],"kept":[{"done":[4,4],"fresh":[0,0],"new":[214,0],"picked":[3,3]}],"memory":[[2362416,10527504]],"min-error":[[0.0,"binary64"]],"time":7.560791015625,"type":"prune"},{"accuracy":[0.05629496479692215],"baseline":[0.05629496479692215],"branch":[["x",0.05629496479692215,1,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))",0.05629496479692215,1,"binary64"]],"compiler":[[1,1],[8,6]],"count":[[10,1]],"inputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (fma.f64 (*.f64 x x) (*.f64 #s(literal 1/45 binary64) x) (*.f64 #s(literal 1/3 binary64) x)))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 (*.f64 #s(approx (+ (* (pow x 4) 1/2025) -1/9) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))))"]],"memory":[[4381200,4381200]],"oracle":[60.05658577033549],"outputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))))"]],"repr":["binary64"],"time":5.5361328125,"times":[[2.7138671875,"x"],[2.1708984375,"(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))"]],"type":"regimes"},{"accuracy":[0.28631112828436656],"baseline":[0.2863111282843665],"branch":[["x",0.28631112828436656,1,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))",0.28631112828436656,1,"binary64"]],"compiler":[[1,1],[8,6]],"count":[[4,1]],"inputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (fma.f64 (*.f64 x x) (*.f64 #s(literal 1/45 binary64) x) (*.f64 #s(literal 1/3 binary64) x)))"]],"memory":[[-5092768,3203840]],"oracle":[0.6144691813284442],"outputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))"]],"repr":["binary64"],"time":3.7958984375,"times":[[1.652099609375,"x"],[1.3759765625,"(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))"]],"type":"regimes"},{"accuracy":[0.6144691813284441],"baseline":[0.6144691813284442],"branch":[["x",0.6144691813284441,1,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))",0.6144691813284441,1,"binary64"]],"compiler":[[1,1],[8,6]],"count":[[1,1]],"inputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))"]],"link":["."],"memory":[[2632560,2632560]],"name":["invcot (example 3.9)"],"oracle":[0.6144691813284442],"outputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))"]],"repr":["binary64"],"time":2.27001953125,"times":[[0.9931640625,"x"],[0.944091796875,"(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))"]],"type":"regimes"},{"egraph":[[9,7869,61,0.042384287],[8,3456,61,0.036467105],[7,1219,61,0.017316777],[6,259,61,0.004341292],[5,135,61,0.001589966],[4,75,61,0.000700396],[3,53,61,0.000507642],[2,43,61,0.000425274],[1,32,61,0.000396653],[0,24,61,0.00040906]],"inputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))"]],"memory":[[-5407232,13220672]],"method":["egg-herbie"],"outputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))"]],"stop":[["node limit",1]],"time":156.10205078125,"type":"simplify"},{"compiler":[[61,25],[3,3],[12,9],[17,12],[8,6],[0,1],[17,12],[8,6]],"egraph":[[0,8214,143,0.080095784],[9,7281,161,0.018125166],[8,5095,161,0.023166693],[7,3955,161,0.014595946],[6,3691,161,0.013020184],[5,3100,161,0.011846393],[4,2099,161,0.010712582],[3,1335,161,0.006937126],[2,458,161,0.00489742],[1,179,167,0.001427293],[0,67,167,0.000569585],[0,8330,247,0.074870916],[5,6049,269,0.02289053],[4,3293,269,0.018776978],[3,1480,269,0.011737208],[2,626,269,0.00487311],[1,250,269,0.002114104],[0,99,269,0.001009926],[0,8775,101,0.085209024],[2,933,101,0.032822441],[1,123,101,0.003619021],[0,29,101,0.001188524],[0,19,101,0.000196253]],"memory":[[2923280,2923280]],"stop":[["done",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1],["iter limit",1]],"time":1001.424072265625,"type":"soundness"},{"compiler":[[61,25],[61,25],[24,17],[24,17],[8,6],[8,6],[27,19],[27,19]],"memory":[[-2725168,21173248]],"remove-preprocessing":[["(negabs x)"],[],[],[]],"time":131.6689453125,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.010009765625,"type":"end"}]