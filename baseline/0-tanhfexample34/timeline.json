[{"memory":[[9760,9760]],"time":0.029052734375,"type":"start"},{"compiler":[[9,8]],"memory":[[-272992,32545248]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.5002439022064209,"valid":0.4992678165435791}],[11,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.5007319450378418,"valid":0.4987797737121582}],[10,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.5017080307006836,"valid":0.4978036880493164}],[9,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.5036602020263672,"valid":0.4958515167236328}],[8,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.5075645446777344,"valid":0.4919471740722656}],[7,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.5153732299804688,"valid":0.48413848876953125}],[6,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.5309906005859375,"valid":0.4685211181640625}],[5,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.562225341796875,"valid":0.437286376953125}],[4,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.62469482421875,"valid":0.37481689453125}],[3,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.7496337890625,"valid":0.2498779296875}],[2,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.99951171875,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.99951171875,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.99951171875,"valid":0.0}]],"time":99.695068359375,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.00048828125,"valid":0.99951171875}],"memory":[[7951120,320401472]],"mixsample":[[105.780029296875,"ival-div",0],[70.9287109375,"adjust",800],[0.029296875,"ival-div",400],[0.578125,"ival-cos",6000],[413.024658203125,"ival-cos",1600],[0.049072265625,"adjust",4000],[0.01904296875,"ival-sub",2000],[3.348388671875,"ival-assert",0],[94.182373046875,"ival-sub",0],[255.472412109375,"ival-cos",0],[0.019775390625,"ival-sub",400],[79.99072265625,"ival-cos",400],[0.80322265625,"ival-sin",4000],[39.709716796875,"adjust",2000],[0.005126953125,"ival-sub",800],[0.117919921875,"ival-sin",400],[223.84716796875,"ival-sin",0],[0.0087890625,"ival-div",800],[115.634033203125,"ival-cos",3600],[7.981689453125,"adjust",2800],[6.620361328125,"ival-true",0],[4.14599609375,"ival-sin",2000],[0.063232421875,"ival-div",2000],[0.0390625,"ival-div",4000],[0.015869140625,"ival-sub",4000],[0.133056640625,"ival-sin",800],[6.0322265625,"exact",0]],"outcomes":[[141.98583984375,1,"valid",1207],[708.212158203125,2,"valid",2208],[3.73193359375,4,"valid",2],[228.02001953125,3,"valid",566],[566.349365234375,0,"valid",4273]],"time":1938.180908203125,"type":"sample"},{"compiler":[[7,6],[19,8],[19,8]],"confusion":[[129,0,6,121]],"explanations":[["/.f64","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","u/n",57,0,[["(-.f64 #s(literal 1 binary64) (cos.f64 x))","underflow",57]],[[]]],["-.f64","(-.f64 #s(literal 1 binary64) (cos.f64 x))","cancellation",78,4,[],[[1]]]],"fperrors":[["(-.f64 #s(literal 1 binary64) (cos.f64 x))",71,7,[-1.4406985021229718e+210],0,false],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))",60,0,false,3,[2.6900223240653664e-160]],["#s(literal 1 binary64)",0,0,false,0,false],["(cos.f64 x)",0,0,false,0,false],["(sin.f64 x)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,135],[0,121]],"maybe-confusion":[[129,0,0,6,4,117]],"memory":[[-15546144,43829120]],"mixsample":[[4.491943359375,"adjust",800],[6.5517578125,"ival-div",0],[27.272705078125,"ival-cos",1600],[15.592041015625,"ival-sin",0],[0.227294921875,"ival-assert",0],[6.101806640625,"ival-cos",3600],[5.548095703125,"ival-sub",0],[0.501953125,"adjust",2800],[0.487060546875,"ival-true",0],[14.97314453125,"ival-cos",0],[3.361083984375,"ival-cos",400],[0.45166015625,"exact",0],[2.24169921875,"adjust",2000]],"outcomes":[[11.181640625,1,"valid",86],[44.398193359375,2,"valid",124],[12.765625,3,"valid",32],[39.15673828125,0,"valid",270]],"time":158.3779296875,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[7,6]],"egraph":[[0,626,4,0.001662412],[17,626,4,0.002909288],[16,625,4,0.002864164],[15,618,4,0.002755517],[14,611,4,0.002698567],[13,607,4,0.002894838],[12,601,4,0.002868793],[11,593,4,0.002640773],[10,590,4,0.002670248],[9,534,4,0.004214613],[8,317,4,0.003095152],[7,188,4,0.00188144],[6,114,4,0.000939872],[5,81,4,0.000620037],[4,58,4,0.000388224],[3,37,4,0.000279516],[2,26,4,0.000187283],[1,20,4,0.00014571],[0,10,4,0.000169762],[0,6,7,9.5267e-5],[6,708,8,0.003307338],[5,683,8,0.005616125],[4,448,8,0.005198987],[3,181,8,0.002686134],[2,73,8,0.000916112],[1,30,11,0.000391358],[0,8,11,0.000235436]],"inputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))"]],"memory":[[-921920,6950384]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(tan.f64 (/.f64 x #s(literal 2 binary64)))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1],["saturated",1]],"symmetry":[["(negabs x)"]],"time":78.236083984375,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[40864,40864]],"time":0.06396484375,"type":"eval"},{"alts":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","next",29.310971754888417,"binary64"]],"compiler":[[7,6]],"memory":[[352064,352064]],"time":3.87109375,"type":"prune"},{"egraph":[[0,626,14,0.001750331],[17,626,14,0.003310019],[16,625,14,0.003027429],[15,618,14,0.002766337],[14,611,14,0.00456597],[13,607,14,0.002995838],[12,601,14,0.003213863],[11,593,14,0.002574785],[10,590,14,0.003267275],[9,534,14,0.004118684],[8,317,14,0.002891319],[7,188,14,0.00184131],[6,114,14,0.000927197],[5,81,14,0.000587683],[4,58,14,0.000388837],[3,37,14,0.000264732],[2,26,14,0.000181792],[1,20,14,0.00014527],[0,10,14,0.000166552],[0,6,17,9.8448e-5]],"inputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","#s(literal 1 binary64)","(cos.f64 x)","x","(sin.f64 x)"]],"locations":[["(sin.f64 x)","cost-diff",0],["(cos.f64 x)","cost-diff",0],["(-.f64 #s(literal 1 binary64) (cos.f64 x))","cost-diff",0],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","cost-diff",3]],"memory":[[1532976,1532976]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(tan.f64 (/.f64 x #s(literal 2 binary64)))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","#s(literal 1 binary64)","(cos.f64 x)","x","(sin.f64 x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":47.281982421875,"type":"simplify"},{"compiler":[[19,8]],"locations":[["(cos.f64 x)","accuracy",0.13347626953688402],["(sin.f64 x)","accuracy",0.15529252930532603],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","accuracy",13.89053301874059],["(-.f64 #s(literal 1 binary64) (cos.f64 x))","accuracy",15.186865921198649]],"memory":[[3032208,11148624]],"mixsample":[[2.19287109375,"adjust",800],[3.308349609375,"ival-div",0],[13.77978515625,"ival-cos",1600],[7.0576171875,"ival-sin",0],[0.116455078125,"ival-assert",0],[2.9365234375,"ival-cos",3600],[2.78076171875,"ival-sub",0],[0.2119140625,"adjust",2800],[0.17333984375,"ival-true",0],[7.78857421875,"ival-cos",0],[1.672119140625,"ival-cos",400],[0.155517578125,"exact",0],[3.313232421875,"adjust",2000]],"outcomes":[[5.248046875,1,"valid",43],[22.5048828125,2,"valid",62],[9.261474609375,3,"valid",16],[18.617919921875,0,"valid",135]],"time":63.888916015625,"type":"localize"},{"count":[[4,20]],"inputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos.f64 x)","(sin.f64 x)"]],"memory":[[882336,882336]],"outputs":[["(* 1/2 x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(/ (- 1 (cos x)) (sin x))","(- 1 (cos x))","(cos x)","(sin x)"]],"series":[[1.0771484375,"((/ (- 1 (cos x)) (sin x)) (- 1 (cos x)) (cos x) (sin x))","x","-inf"],[0.72802734375,"((/ (- 1 (cos x)) (sin x)) (- 1 (cos x)) (cos x) (sin x))","x","inf"],[1.5869140625,"((/ (- 1 (cos x)) (sin x)) (- 1 (cos x)) (cos x) (sin x))","x","0"]],"time":3.842041015625,"type":"series"},{"count":[[20,19]],"egraph":[[0,8041,172,0.093233802],[8,6812,196,0.023764025],[7,5339,196,0.02414436],[6,4608,196,0.013408514],[5,4256,196,0.009825018],[4,3002,196,0.013421742],[3,1661,196,0.009953047],[2,555,196,0.005494888],[1,224,202,0.001637067],[0,79,202,0.000714861]],"inputs":[["(* 1/2 x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(/ (- 1 (cos x)) (sin x))","(- 1 (cos x))","(cos x)","(sin x)"]],"memory":[[-692816,40949152]],"method":["egg-herbie"],"outputs":[["(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* 1/2 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(*.f64 (*.f64 (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) x) x)","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x)","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x)","1","#s(literal 1 binary64)","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/6 binary64) x)","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal -1/6 binary64)) x)","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) x)","(/ (- 1 (cos x)) (sin x))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(- 1 (cos x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos x)","(cos.f64 x)","(sin x)","(sin.f64 x)"]],"stop":[["iter limit",1],["node limit",1]],"time":336.083984375,"type":"simplify"},{"count":[[4,645]],"egraph":[[0,9106,11,0.063207299],[3,2387,11,0.036257699],[2,247,12,0.00753429],[1,39,12,0.001066495],[0,10,12,0.000557518],[0,6,15,0.000120309]],"inputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos.f64 x)","(sin.f64 x)"]],"memory":[[2208112,58697120]],"outputs":[["(*.f64 (pow.f64 (/.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (pow.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (cos.f64 (/.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (pow.f64 (/.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (pow.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 (/.f64 x #s(literal -2 binary64))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (pow.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal 1 binary64)) (pow.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (+.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (sin.f64 x)) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (+.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x))))","(*.f64 (/.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(*.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(*.f64 (pow.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) #s(literal -1 binary64)) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(*.f64 (pow.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(*.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (cos.f64 (/.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (cos.f64 (/.f64 x #s(literal -2 binary64))))","(*.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (pow.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (sin.f64 x) (sin.f64 x)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (sin.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (sin.f64 x))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (sin.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)))","(*.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (cos.f64 (/.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (sin.f64 x)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) #s(literal 1 binary64))","(*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (sin.f64 x)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (/.f64 (sin.f64 x) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (sin.f64 x) (pow.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (sin.f64 x) (/.f64 (sin.f64 x) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))))","(*.f64 (sin.f64 x) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (sin.f64 x) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))","(pow.f64 (exp.f64 (log.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (cos.f64 (/.f64 x #s(literal -2 binary64))) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64))","(pow.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) #s(literal 1 binary64))","(pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) (fma.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (fma.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))))))","(/.f64 (-.f64 (pow.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64)) (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64)) (fma.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))) (*.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)))))))","(/.f64 (-.f64 (pow.f64 (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64)) (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64)) (fma.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x))) (*.f64 (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64)) (pow.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (sin.f64 x)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (sin.f64 x)) (fma.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (sin.f64 x)) (*.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (sin.f64 x))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64)) (pow.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (sin.f64 x)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (sin.f64 x)) (fma.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (sin.f64 x)) (*.f64 (/.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (sin.f64 x))))))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal 0 binary64) (sin.f64 x)) #s(literal 3 binary64)) (pow.f64 (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal 0 binary64) (sin.f64 x)) (/.f64 #s(literal 0 binary64) (sin.f64 x)) (fma.f64 (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) (*.f64 (/.f64 #s(literal 0 binary64) (sin.f64 x)) (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (/.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (fma.f64 (/.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) (*.f64 #s(literal 0 binary64) (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) #s(literal 3 binary64)) (pow.f64 (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (/.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (fma.f64 (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) (*.f64 (/.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64))) (fma.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))) (-.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))))","(/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64))))))","(/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))) #s(literal 3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x)))))))","(/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))) #s(literal 3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) #s(literal 3 binary64))) (fma.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (-.f64 (*.f64 (*.f64 (cos.f64 x) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (cos.f64 x) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (cos.f64 x) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (-.f64 (*.f64 (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))) (*.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (-.f64 (*.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))) (*.f64 (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (cos.f64 x)) #s(literal 3 binary64))) (fma.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 (*.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (cos.f64 x)) (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (cos.f64 x))) (*.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (cos.f64 x))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x))) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x))) (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x))) (-.f64 (*.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x))) (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x))) #s(literal 3 binary64))) (fma.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (-.f64 (*.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x))) (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)))) (*.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)))))))","(/.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64))) (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))))","(/.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64))) (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))))","(/.f64 (neg.f64 (/.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (sin.f64 x))) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x)))) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (neg.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x)))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x)))) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (neg.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 1 binary64))) (sin.f64 x))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))))) (neg.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))) (neg.f64 (cos.f64 (/.f64 x #s(literal -2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)))) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))))) (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))) (neg.f64 (neg.f64 (cos.f64 (/.f64 x #s(literal -2 binary64))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (neg.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (*.f64 (sin.f64 x) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))))","(/.f64 (neg.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (neg.f64 (sin.f64 x)))))","(/.f64 (neg.f64 (-.f64 (sin.f64 x) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x))))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 x)))) (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal -1 binary64) (tan.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 x))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x))))) (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (tan.f64 x)) (sin.f64 x))) (neg.f64 (*.f64 (sin.f64 x) (tan.f64 x))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (neg.f64 (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (neg.f64 (sin.f64 x)))))","(/.f64 (neg.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (neg.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (+.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)))))","(/.f64 (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 (neg.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 (sin.f64 x) (+.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (-.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x))))))","(/.f64 (neg.f64 (+.f64 (sin.f64 x) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x))))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (sin.f64 x) (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 x)))) (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (tan.f64 x) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 x))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x))))) (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (tan.f64 x) (sin.f64 x))) (neg.f64 (*.f64 (sin.f64 x) (tan.f64 x))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))) (sin.f64 x))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))))","(/.f64 (neg.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (sin.f64 x))))","(/.f64 (neg.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (neg.f64 (sin.f64 x)))))","(/.f64 (neg.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))))","(/.f64 (/.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (sin.f64 x)) (sin.f64 x))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64)))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (cos.f64 (/.f64 x #s(literal -2 binary64))))","(/.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))","(/.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (+.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64))))","(/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (sin.f64 x))","(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64)))) (neg.f64 (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (neg.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (neg.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (neg.f64 (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) (tan.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))))","(/.f64 (neg.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (neg.f64 (cos.f64 (/.f64 x #s(literal -2 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x))) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (neg.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (neg.f64 (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (neg.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x)))))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (neg.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)))))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (neg.f64 (sin.f64 x)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (sin.f64 x) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (*.f64 #s(literal -1 binary64) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (sin.f64 x) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (sin.f64 x)))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (*.f64 (sin.f64 x) (+.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (-.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)))))","(/.f64 (-.f64 (sin.f64 x) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 x))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (tan.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (tan.f64 x)) (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x)))","(/.f64 (+.f64 (sin.f64 x) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (fma.f64 #s(literal -1 binary64) (sin.f64 x) (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 x))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (tan.f64 x) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (tan.f64 x) (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x)))","(/.f64 (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64)) (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(/.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))))","(/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x))))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x))))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) (tan.f64 x))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (neg.f64 (sin.f64 x)))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (sin.f64 x) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (cos.f64 (/.f64 x #s(literal -2 binary64))) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))))","(/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (cos.f64 (/.f64 x #s(literal -2 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)))","(/.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) #s(literal 1 binary64))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(/.f64 (neg.f64 (sin.f64 x)) (*.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (sin.f64 x) (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))))","(/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (/.f64 x #s(literal -2 binary64))) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 #s(literal 1 binary64) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))","(neg.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))))","(neg.f64 (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (cos.f64 x)))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64) (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (cos.f64 x) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(fma.f64 (neg.f64 (cos.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(-.f64 (/.f64 (*.f64 #s(literal -1 binary64) (tan.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 x))) (/.f64 (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 x))))","(-.f64 (/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (/.f64 (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(-.f64 (/.f64 (*.f64 #s(literal 1 binary64) (tan.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))) (/.f64 (sin.f64 x) (*.f64 (sin.f64 x) (tan.f64 x))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x)))) (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)))) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (neg.f64 (sin.f64 x)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))) (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (sin.f64 x) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))) (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))))","(-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))) (/.f64 (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))))","(-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))) (/.f64 (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))))","(-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))) (/.f64 (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(-.f64 (/.f64 (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (neg.f64 (sin.f64 x)))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (neg.f64 (sin.f64 x)))))","(-.f64 (/.f64 (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (neg.f64 (sin.f64 x)))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (neg.f64 (sin.f64 x)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (neg.f64 (sin.f64 x)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (neg.f64 (sin.f64 x)))))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x))))","(-.f64 (/.f64 (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x))))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (neg.f64 (sin.f64 x))))","(-.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (neg.f64 (sin.f64 x))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))) (/.f64 (sin.f64 x) (*.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))))","(-.f64 (/.f64 (/.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) #s(literal 1 binary64)) (/.f64 (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))) #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x))) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 1 binary64)) (/.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (sin.f64 x)) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 1 binary64)) (/.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (sin.f64 x)) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 #s(literal 0 binary64) (sin.f64 x)) #s(literal 1 binary64)) (/.f64 (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (/.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))))","(-.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))))","(-.f64 (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x))))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (sin.f64 x)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (sin.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) (sin.f64 x)) (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))))","(-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) #s(literal 1 binary64)))","(-.f64 #s(literal 0 binary64) (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))))","(exp.f64 (neg.f64 (*.f64 (log.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) #s(literal -1 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(+.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (cos.f64 x) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(+.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(+.f64 (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(+.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (cos.f64 x)))","(+.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x))) (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x))))","(+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))","(*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (sin.f64 x) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))))","(*.f64 (sin.f64 x) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(pow.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))))))","(/.f64 (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -3 binary64)) (pow.f64 (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -2 binary64)) (-.f64 (*.f64 (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))))))","(/.f64 (+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -3 binary64)) (pow.f64 (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -2 binary64)) (-.f64 (*.f64 (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))) (*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))) (neg.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)))) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)))) (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -2 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal 2 binary64)))) (neg.f64 (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -2 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal 2 binary64)))) (neg.f64 (+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -3 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -3 binary64))))) (neg.f64 (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -3 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -3 binary64))))) (neg.f64 (+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (neg.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (neg.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (neg.f64 (-.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (-.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64))) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -2 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal 2 binary64))) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -2 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal 2 binary64))) (+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -3 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -3 binary64)))) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -3 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -3 binary64)))) (+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64)))) (neg.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (neg.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal 2 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(neg.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(fma.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x))) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(fma.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64)))) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)) #s(literal 1 binary64))","(fma.f64 #s(literal -1 binary64) (cos.f64 x) #s(literal 1 binary64))","(fma.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (sin.f64 x) (pow.f64 (/.f64 (sin.f64 x) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (cos.f64 x) #s(literal -1 binary64) #s(literal 1 binary64))","(fma.f64 (cos.f64 x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(fma.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (cos.f64 x) #s(literal 1 binary64))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -2 binary64)) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))) (/.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal 2 binary64)) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -2 binary64)) (+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))) (/.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal 2 binary64)) (+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -3 binary64)) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))))) (/.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -3 binary64))) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -3 binary64)) (+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))) (/.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -3 binary64))) (+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))))","(-.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 2 binary64))) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 2 binary64))))","(-.f64 (/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal 2 binary64))) (/.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal 2 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(-.f64 (/.f64 #s(literal 1/2 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(-.f64 (/.f64 (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(-.f64 (/.f64 (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(-.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(-.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(-.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(-.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(+.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64))","(+.f64 (cos.f64 x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)))","(+.f64 #s(literal 1 binary64) (cos.f64 x))","(*.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)))","(*.f64 (cos.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (cos.f64 x))","(pow.f64 (cos.f64 x) #s(literal 1 binary64))","(/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (fma.f64 (cos.f64 x) (cos.f64 x) (*.f64 #s(literal 0 binary64) (neg.f64 (cos.f64 x))))))","(neg.f64 (neg.f64 (cos.f64 x)))","(-.f64 #s(literal 0 binary64) (neg.f64 (cos.f64 x)))","(cos.f64 x)","(exp.f64 (*.f64 (log.f64 (cos.f64 x)) #s(literal 1 binary64)))","(exp.f64 (log.f64 (cos.f64 x)))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(*.f64 (sin.f64 x) (*.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (sin.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (sin.f64 x))","(pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (sin.f64 x) #s(literal 1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x))))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))) (neg.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (sin.f64 x))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal 1 binary64))) (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64)))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64)) (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (sin.f64 x)))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (sin.f64 x))","(/.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))","(/.f64 (sin.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(neg.f64 (neg.f64 (sin.f64 x)))","(sin.f64 x)","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (sin.f64 x)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (sin.f64 x)))","(-.f64 (/.f64 #s(literal 1/2 binary64) (sin.f64 x)) (/.f64 (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)) (sin.f64 x)))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (sin.f64 x)))","(-.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x)))","(exp.f64 (*.f64 (neg.f64 (log.f64 (sin.f64 x))) #s(literal -1 binary64)))","(exp.f64 (log.f64 (sin.f64 x)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":223.742919921875,"type":"rewrite"},{"compiler":[[14961,1738]],"memory":[[-215088,62814464]],"time":85.543212890625,"type":"eval"},{"alts":[["(fma.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","next",29.307571931838016,"binary64"],["(pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))","fresh",59.0843567212142,"binary64"],["(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","fresh",0.6512268554423705,"binary64"],["(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))))","fresh",14.21354454338246,"binary64"],["(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (/.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (fma.f64 (/.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))))","fresh",30.76682346186626,"binary64"],["(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (tan.f64 x)) (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x)))","fresh",30.430474423653177,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","fresh",29.32438175257309,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (-.f64 (/.f64 #s(literal 1/2 binary64) (sin.f64 x)) (/.f64 (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)) (sin.f64 x))))","fresh",31.03704980884431,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","next",30.35872241157479,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","done",29.310971754888417,"binary64"],["(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","fresh",30.3192244398209,"binary64"],["(/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","fresh",0.5264218091936519,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (/.f64 x #s(literal -2 binary64))) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))","fresh",0.4635989379157261,"binary64"],["(-.f64 (/.f64 (*.f64 #s(literal 1 binary64) (tan.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))) (/.f64 (sin.f64 x) (*.f64 (sin.f64 x) (tan.f64 x))))","fresh",30.567496304215883,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))))","fresh",29.591379879721124,"binary64"],["(-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","next",29.51052881934276,"binary64"],["(*.f64 (pow.f64 (/.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","fresh",14.319259338005066,"binary64"],["(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","fresh",14.26194209332735,"binary64"],["(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","fresh",29.295958521867703,"binary64"],["(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (cos.f64 (/.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)))","fresh",0.4030838867581883,"binary64"],["(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","next",0.34611137698974626,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","fresh",32.54439066033749,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","fresh",32.564161162101044,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x))","fresh",32.55354361238525,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","next",32.35325248702361,"binary64"]],"compiler":[[11,7],[3,4],[11,8],[13,10],[59,20],[13,8],[11,9],[19,14],[14,11],[7,6],[12,9],[8,7],[11,10],[19,9],[24,13],[9,7],[17,12],[14,10],[9,8],[11,10],[4,4],[26,16],[21,14],[16,12],[11,9],[11,7],[3,4],[11,8],[13,10],[59,20],[13,8],[11,9],[19,14],[14,11],[12,9],[8,7],[11,10],[19,9],[24,13],[9,7],[17,12],[14,10],[9,8],[11,10],[4,4],[26,16],[21,14],[16,12],[11,9]],"count":[[665,25]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[664,24],"picked":[1,1]}],"memory":[[-392928,35236656]],"min-error":[[0.0078125,"binary64"]],"time":29.697998046875,"type":"prune"},{"egraph":[[0,8057,89,0.030407917],[8,7406,89,0.0188272],[7,6344,89,0.024556063],[6,5339,89,0.022920662],[5,3557,89,0.025736829],[4,1312,89,0.011550309],[3,235,89,0.004213484],[2,99,89,0.000927397],[1,62,103,0.000444775],[0,39,103,0.000364536],[0,24,116,0.000246874]],"inputs":[["(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","x","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","x","(-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 #s(literal -1 binary64) (tan.f64 x))","#s(literal -1 binary64)","(tan.f64 x)","x","(/.f64 #s(literal -1 binary64) (sin.f64 x))","(sin.f64 x)","(fma.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(cos.f64 x)","x","(/.f64 #s(literal -1 binary64) (sin.f64 x))","#s(literal -1 binary64)","(sin.f64 x)","(pow.f64 (sin.f64 x) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","#s(literal 1 binary64)","(cos.f64 x)","x","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(pow.f64 (sin.f64 x) #s(literal 2 binary64))","(sin.f64 x)","#s(literal 2 binary64)","(pow.f64 (sin.f64 x) #s(literal -1 binary64))","#s(literal -1 binary64)"]],"locations":[["(cos.f64 x)","cost-diff",0],["(-.f64 #s(literal 1 binary64) (cos.f64 x))","cost-diff",0],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","cost-diff",3],["(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","cost-diff",7],["(sin.f64 x)","cost-diff",0],["(/.f64 #s(literal -1 binary64) (sin.f64 x))","cost-diff",0],["(cos.f64 x)","cost-diff",0],["(fma.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","cost-diff",7],["(/.f64 #s(literal -1 binary64) (sin.f64 x))","cost-diff",0],["(tan.f64 x)","cost-diff",0],["(/.f64 #s(literal -1 binary64) (tan.f64 x))","cost-diff",0],["(-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","cost-diff",0],["(*.f64 #s(literal 1/2 binary64) x)","cost-diff",0],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","cost-diff",0],["(*.f64 #s(literal 1/2 binary64) x)","cost-diff",0],["(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","cost-diff",0]],"memory":[[-8134896,18339296]],"method":["egg-herbie"],"outputs":[["(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(tan.f64 (*.f64 x #s(literal 1/2 binary64)))","(*.f64 #s(literal 1/2 binary64) x)","(*.f64 x #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","x","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 x #s(literal 1/2 binary64)))","(*.f64 #s(literal 1/2 binary64) x)","(*.f64 x #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","x","(-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(/.f64 #s(literal -1 binary64) (tan.f64 x))","#s(literal -1 binary64)","(tan.f64 x)","x","(/.f64 #s(literal -1 binary64) (sin.f64 x))","(sin.f64 x)","(fma.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(tan.f64 (/.f64 x #s(literal 2 binary64)))","(cos.f64 x)","x","(/.f64 #s(literal -1 binary64) (sin.f64 x))","#s(literal -1 binary64)","(sin.f64 x)","(pow.f64 (sin.f64 x) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(tan.f64 (/.f64 x #s(literal 2 binary64)))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","#s(literal 1 binary64)","(cos.f64 x)","x","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(sin.f64 x)","(pow.f64 (sin.f64 x) #s(literal 2 binary64))","(sin.f64 x)","#s(literal 2 binary64)","(pow.f64 (sin.f64 x) #s(literal -1 binary64))","#s(literal -1 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":227.5498046875,"type":"simplify"},{"compiler":[[115,23]],"locations":[["(pow.f64 (sin.f64 x) #s(literal 2 binary64))","accuracy",0.2890625],["(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","accuracy",13.883410993343675],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","accuracy",13.89053301874059],["(-.f64 #s(literal 1 binary64) (cos.f64 x))","accuracy",15.186865921198649],["(/.f64 #s(literal -1 binary64) (sin.f64 x))","accuracy",0.109375],["(cos.f64 x)","accuracy",0.13347626953688402],["(sin.f64 x)","accuracy",0.15529252930532603],["(fma.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","accuracy",29.241375412596035],["(/.f64 #s(literal -1 binary64) (tan.f64 x))","accuracy",0.1484375],["(sin.f64 x)","accuracy",0.15529252930532603],["(tan.f64 x)","accuracy",0.32134633791597816],["(-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","accuracy",29.3793966650616],["(*.f64 #s(literal 1/2 binary64) x)","accuracy",0.0],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","accuracy",32.35325248702361],["(*.f64 #s(literal 1/2 binary64) x)","accuracy",0.0],["(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","accuracy",0.34611137698974626]],"memory":[[1946336,36268960]],"mixsample":[[3.72998046875,"ival-tan",2000],[30.539794921875,"ival-div",0],[7.290771484375,"adjust",800],[0.421875,"ival-mult",1200],[0.49169921875,"ival-div",400],[0.076171875,"ival-pow",1600],[0.107666015625,"ival-div",1600],[0.125732421875,"ival-assert",0],[4.717529296875,"ival-sub",0],[14.91455078125,"ival-tan",0],[2.29833984375,"ival-sin",1200],[6.933349609375,"ival-cos",0],[0.8125,"ival-cos",1200],[0.44482421875,"ival-cos",400],[0.9755859375,"ival-pow",800],[0.571533203125,"ival-tan",400],[6.846435546875,"ival-pow",0],[52.77783203125,"ival-sin",2400],[0.077392578125,"ival-tan",1600],[8.010986328125,"ival-tan",800],[0.308349609375,"ival-mult",800],[2.283447265625,"ival-add",0],[2.851806640625,"ival-cos",800],[0.02880859375,"ival-mult",1600],[3.5771484375,"ival-sin",2000],[0.1396484375,"ival-div",2000],[0.56396484375,"ival-mult",2400],[0.421875,"ival-pow",400],[6.82373046875,"ival-sin",800],[1.547119140625,"ival-pow",2400],[1.549560546875,"ival-div",2400],[4.949462890625,"ival-pow2",0],[0.03369140625,"ival-cos",1600],[0.07666015625,"ival-mult",2000],[106.13818359375,"ival-tan",2400],[16.942138671875,"ival-cos",2400],[0.1630859375,"ival-pow",2000],[0.01708984375,"ival-sin",1600],[2.86328125,"adjust",2000],[1.124267578125,"ival-pow",1200],[0.851318359375,"ival-div",1200],[0.78515625,"ival-sin",400],[0.151123046875,"ival-mult",400],[6.59814453125,"ival-mult",0],[7.340087890625,"ival-sin",0],[1.718017578125,"ival-cos",2000],[0.7470703125,"ival-div",800],[0.32763671875,"ival-true",0],[0.71435546875,"exact",0],[0.78564453125,"ival-tan",1200]],"outcomes":[[44.809814453125,1,"valid",65],[227.9521484375,2,"valid",57],[70.77490234375,0,"valid",134]],"time":367.703125,"type":"localize"},{"count":[[14,41]],"inputs":[["(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","(-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 #s(literal -1 binary64) (tan.f64 x))","(tan.f64 x)","(/.f64 #s(literal -1 binary64) (sin.f64 x))","(fma.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(cos.f64 x)","(sin.f64 x)","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(pow.f64 (sin.f64 x) #s(literal 2 binary64))"]],"memory":[[-3043408,4451056]],"outputs":[["(* 1/2 x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(/ -1 x)","(/ (- (* 1/3 (pow x 2)) 1) x)","(/ (- (* (pow x 2) (+ 1/3 (* 1/45 (pow x 2)))) 1) x)","(/ (- (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2)))))) 1) x)","x","(* x (+ 1 (* 1/3 (pow x 2))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","(/ (- (* -1/6 (pow x 2)) 1) x)","(/ (- (* (pow x 2) (- (* -7/360 (pow x 2)) 1/6)) 1) x)","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -31/15120 (pow x 2)) 7/360)) 1/6)) 1) x)","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(pow x 2)","(* (pow x 2) (+ 1 (* -1/3 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* 2/45 (pow x 2)) 1/3))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 2/45 (* -1/315 (pow x 2)))) 1/3))))","(/ (sin (* 1/2 x)) (cos (* 1/2 x)))","(/ (- 1 (cos x)) (sin x))","(- (/ 1 (sin x)) (/ (cos x) (sin x)))","(* -1 (/ (cos x) (sin x)))","(/ (sin x) (cos x))","(/ -1 (sin x))","(+ (* -1 (/ (cos x) (sin x))) (/ 1 (sin x)))","(cos x)","(sin x)","(- 1 (cos x))","(pow (sin x) 2)"]],"series":[[4.544921875,"((tan (* 1/2 x)) (* 1/2 x) (/ (- 1 (cos x)) (sin x)) (- (/ -1 (tan x)) (/ -1 (sin x))) (/ -1 (tan x)) (tan x) (/ -1 (sin x)) (+ (* (cos x) (/ -1 (sin x))) (pow (sin x) -1)) (cos x) (sin x) (* (pow (sin x) 2) (pow (sin x) -1)) (/ (- 1 (cos x)) (* (pow (sin x) 2) (pow (sin x) -1))) (- 1 (cos x)) (pow (sin x) 2))","x","-inf"],[7.284912109375,"((tan (* 1/2 x)) (* 1/2 x) (/ (- 1 (cos x)) (sin x)) (- (/ -1 (tan x)) (/ -1 (sin x))) (/ -1 (tan x)) (tan x) (/ -1 (sin x)) (+ (* (cos x) (/ -1 (sin x))) (pow (sin x) -1)) (cos x) (sin x) (* (pow (sin x) 2) (pow (sin x) -1)) (/ (- 1 (cos x)) (* (pow (sin x) 2) (pow (sin x) -1))) (- 1 (cos x)) (pow (sin x) 2))","x","inf"],[2.468017578125,"((tan (* 1/2 x)) (* 1/2 x) (/ (- 1 (cos x)) (sin x)) (- (/ -1 (tan x)) (/ -1 (sin x))) (/ -1 (tan x)) (tan x) (/ -1 (sin x)) (+ (* (cos x) (/ -1 (sin x))) (pow (sin x) -1)) (cos x) (sin x) (* (pow (sin x) 2) (pow (sin x) -1)) (/ (- 1 (cos x)) (* (pow (sin x) 2) (pow (sin x) -1))) (- 1 (cos x)) (pow (sin x) 2))","x","0"]],"time":15.069091796875,"type":"series"},{"count":[[41,40]],"egraph":[[0,8067,352,0.068460202],[5,7196,400,0.019067037],[4,4038,400,0.021410099],[3,2241,400,0.014339193],[2,1125,412,0.007745092],[1,439,430,0.003460717],[0,161,430,0.00134219]],"inputs":[["(* 1/2 x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(/ -1 x)","(/ (- (* 1/3 (pow x 2)) 1) x)","(/ (- (* (pow x 2) (+ 1/3 (* 1/45 (pow x 2)))) 1) x)","(/ (- (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2)))))) 1) x)","x","(* x (+ 1 (* 1/3 (pow x 2))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","(/ (- (* -1/6 (pow x 2)) 1) x)","(/ (- (* (pow x 2) (- (* -7/360 (pow x 2)) 1/6)) 1) x)","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -31/15120 (pow x 2)) 7/360)) 1/6)) 1) x)","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(pow x 2)","(* (pow x 2) (+ 1 (* -1/3 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* 2/45 (pow x 2)) 1/3))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 2/45 (* -1/315 (pow x 2)))) 1/3))))","(/ (sin (* 1/2 x)) (cos (* 1/2 x)))","(/ (- 1 (cos x)) (sin x))","(- (/ 1 (sin x)) (/ (cos x) (sin x)))","(* -1 (/ (cos x) (sin x)))","(/ (sin x) (cos x))","(/ -1 (sin x))","(+ (* -1 (/ (cos x) (sin x))) (/ 1 (sin x)))","(cos x)","(sin x)","(- 1 (cos x))","(pow (sin x) 2)"]],"memory":[[3587296,33327264]],"method":["egg-herbie"],"outputs":[["(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(/ -1 x)","(/.f64 #s(literal -1 binary64) x)","(/ (- (* 1/3 (pow x 2)) 1) x)","(fma.f64 #s(literal 1/3 binary64) x (/.f64 #s(literal -1 binary64) x))","(/ (- (* (pow x 2) (+ 1/3 (* 1/45 (pow x 2)))) 1) x)","(fma.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x (/.f64 #s(literal -1 binary64) x))","(/ (- (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2)))))) 1) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x (/.f64 #s(literal -1 binary64) x))","x","(* x (+ 1 (* 1/3 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/3 binary64) x)","(* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/15 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x)","(* x (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal 17/315 binary64) (*.f64 x x) #s(literal 2/15 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(/ (- (* -1/6 (pow x 2)) 1) x)","(fma.f64 #s(literal -1/6 binary64) x (/.f64 #s(literal -1 binary64) x))","(/ (- (* (pow x 2) (- (* -7/360 (pow x 2)) 1/6)) 1) x)","(fma.f64 (fma.f64 #s(literal -7/360 binary64) (*.f64 x x) #s(literal -1/6 binary64)) x (/.f64 #s(literal -1 binary64) x))","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -31/15120 (pow x 2)) 7/360)) 1/6)) 1) x)","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -31/15120 binary64) x) x #s(literal -7/360 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) x (/.f64 #s(literal -1 binary64) x))","1","#s(literal 1 binary64)","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(* x (+ 1 (* -1/6 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/6 binary64) x)","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal -1/6 binary64)) x)","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) x)","(* 1/2 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(*.f64 (*.f64 (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) x) x)","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x)","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x)","(pow x 2)","(*.f64 x x)","(* (pow x 2) (+ 1 (* -1/3 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/3 binary64) (*.f64 x x))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* 2/45 (pow x 2)) 1/3))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 2/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 2/45 (* -1/315 (pow x 2)))) 1/3))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))","(/ (sin (* 1/2 x)) (cos (* 1/2 x)))","(/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/ (- 1 (cos x)) (sin x))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(- (/ 1 (sin x)) (/ (cos x) (sin x)))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(* -1 (/ (cos x) (sin x)))","(/.f64 (neg.f64 (cos.f64 x)) (sin.f64 x))","(/ (sin x) (cos x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/ -1 (sin x))","(/.f64 #s(literal -1 binary64) (sin.f64 x))","(+ (* -1 (/ (cos x) (sin x))) (/ 1 (sin x)))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(cos x)","(cos.f64 x)","(sin x)","(sin.f64 x)","(- 1 (cos x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(pow (sin x) 2)","(pow.f64 (sin.f64 x) #s(literal 2 binary64))"]],"stop":[["iter limit",1],["node limit",1]],"time":222.7568359375,"type":"simplify"},{"count":[[14,1987]],"egraph":[[0,8701,51,0.094061451],[2,1094,51,0.03718706],[1,143,51,0.006856379],[0,39,51,0.001465559],[0,24,83,0.000409876]],"inputs":[["(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","(-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 #s(literal -1 binary64) (tan.f64 x))","(tan.f64 x)","(/.f64 #s(literal -1 binary64) (sin.f64 x))","(fma.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(cos.f64 x)","(sin.f64 x)","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(pow.f64 (sin.f64 x) #s(literal 2 binary64))"]],"memory":[[-1380400,83485632]],"outputs":[["(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sqrt.f64 (sin.f64 x))) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))) #s(literal -1 binary64)) (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))))","(*.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (sqrt.f64 (sin.f64 x))) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (sin.f64 x) (sin.f64 x)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sqrt.f64 (sin.f64 x))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (sin.f64 x))) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x))","(*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64))) (pow.f64 (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64))) (pow.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))) (sin.f64 x))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (sin.f64 x)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (/.f64 (-.f64 (sin.f64 x) (tan.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)))","(*.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (sin.f64 x) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 #s(literal 1 binary64) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(pow.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))) (*.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) (*.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))) #s(literal 3 binary64)) (pow.f64 (/.f64 (neg.f64 (tan.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))) (/.f64 (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))) (fma.f64 (/.f64 (neg.f64 (tan.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))) (/.f64 (neg.f64 (tan.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))) (*.f64 (/.f64 (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))) (/.f64 (neg.f64 (tan.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x)))))))","(/.f64 (neg.f64 (/.f64 (/.f64 (-.f64 (sin.f64 x) (tan.f64 x)) #s(literal -1 binary64)) (tan.f64 x))) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))) (neg.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64))) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))))","(/.f64 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (neg.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (-.f64 (sin.f64 x) (tan.f64 x)) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (*.f64 (sin.f64 x) (tan.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))) (neg.f64 (neg.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64))))) (neg.f64 (neg.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))) (sin.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))))) (neg.f64 (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))))) (neg.f64 (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x))) (tan.f64 x))) (neg.f64 (*.f64 (tan.f64 x) (neg.f64 (sin.f64 x)))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (tan.f64 x)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (sin.f64 x)))))","(/.f64 (neg.f64 (-.f64 (sin.f64 x) (*.f64 (neg.f64 (tan.f64 x)) #s(literal -1 binary64)))) (neg.f64 (*.f64 (neg.f64 (tan.f64 x)) (sin.f64 x))))","(/.f64 (neg.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (fma.f64 (neg.f64 (cos.f64 x)) (sin.f64 x) (sin.f64 x))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x))))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))) (*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) (*.f64 (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (pow.f64 (sin.f64 x) #s(literal -3 binary64)))) (*.f64 (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))) (*.f64 (*.f64 (sin.f64 x) (tan.f64 x)) (neg.f64 (tan.f64 x)))) (*.f64 (*.f64 (sin.f64 x) (tan.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 4 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)))) (sin.f64 x))","(/.f64 (-.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (cos.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (sin.f64 x) (neg.f64 (tan.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (tan.f64 x))))","(/.f64 (-.f64 (*.f64 (sin.f64 x) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (tan.f64 x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))) (sin.f64 x))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (neg.f64 (tan.f64 x))) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (tan.f64 x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (tan.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (tan.f64 x))))","(/.f64 (-.f64 (neg.f64 (tan.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 x)))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (sin.f64 x) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (cos.f64 x))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (sin.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (tan.f64 x))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (tan.f64 x))))","(/.f64 (-.f64 (tan.f64 x) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (tan.f64 x)))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (sin.f64 x) (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x)))) (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (tan.f64 x))) (neg.f64 (sin.f64 x))) (*.f64 (sin.f64 x) (neg.f64 (tan.f64 x))))","(/.f64 (-.f64 (tan.f64 x) (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (cos.f64 x))) (neg.f64 (neg.f64 (sin.f64 x)))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (cos.f64 x))) (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (cos.f64 x))) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (cos.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))) (neg.f64 (sin.f64 x))) (*.f64 (sin.f64 x) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (cos.f64 x)) (sin.f64 x)) (neg.f64 (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (cos.f64 x)) (neg.f64 (sin.f64 x))) (sin.f64 x)) (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (*.f64 (cos.f64 x) (neg.f64 (neg.f64 (sin.f64 x)))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (*.f64 (cos.f64 x) (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x)))","(/.f64 (-.f64 (*.f64 (cos.f64 x) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sin.f64 x)))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) (sin.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sin.f64 x)))) (neg.f64 (tan.f64 x))) (*.f64 (tan.f64 x) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sin.f64 x)))) (*.f64 (neg.f64 (tan.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x)))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal 4 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (sin.f64 x))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (neg.f64 (sin.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (sin.f64 x))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal -3 binary64))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (cos.f64 x)) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (cos.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (cos.f64 x)) (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x)))","(/.f64 (-.f64 (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (cos.f64 x) (neg.f64 (sin.f64 x))) (neg.f64 (sin.f64 x))) (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (*.f64 (cos.f64 x) (neg.f64 (neg.f64 (sin.f64 x)))) (sin.f64 x)) (*.f64 (sin.f64 x) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (*.f64 (cos.f64 x) (sin.f64 x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (tan.f64 x)) (sin.f64 x))) (*.f64 (neg.f64 (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (neg.f64 (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (*.f64 (neg.f64 (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (tan.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sin.f64 x)))) (*.f64 (neg.f64 (tan.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (tan.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (tan.f64 x)) (sin.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sin.f64 x)))) (tan.f64 x)) (*.f64 (tan.f64 x) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (sin.f64 x) (tan.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x)))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (sin.f64 x) (tan.f64 x))) (*.f64 (tan.f64 x) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (tan.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (*.f64 (tan.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x))) (neg.f64 (tan.f64 x))) (*.f64 (tan.f64 x) (neg.f64 (sin.f64 x))))","(/.f64 (fma.f64 (sin.f64 x) (neg.f64 (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (neg.f64 (cos.f64 x))))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (cos.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (fma.f64 (sin.f64 x) (neg.f64 (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (fma.f64 (sin.f64 x) (neg.f64 (neg.f64 (tan.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (neg.f64 (tan.f64 x)))))","(/.f64 (fma.f64 (sin.f64 x) (tan.f64 x) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (tan.f64 x)))","(/.f64 (fma.f64 (sin.f64 x) (neg.f64 (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (tan.f64 x))))","(/.f64 (+.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (neg.f64 (cos.f64 x))))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x)))) #s(literal 1 binary64))","(/.f64 (+.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (tan.f64 x) #s(literal -1 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (neg.f64 (neg.f64 (tan.f64 x))) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (neg.f64 (tan.f64 x)))))","(/.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)))","(/.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (neg.f64 (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (tan.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (neg.f64 (cos.f64 x))))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (fma.f64 (sin.f64 x) #s(literal -1 binary64) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (tan.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (neg.f64 (tan.f64 x)))))","(/.f64 (fma.f64 (tan.f64 x) #s(literal -1 binary64) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (tan.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (tan.f64 x))))","(/.f64 (+.f64 (tan.f64 x) (neg.f64 (sin.f64 x))) (*.f64 (sin.f64 x) (tan.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (neg.f64 (cos.f64 x))))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (sin.f64 x))))","(/.f64 (+.f64 (sin.f64 x) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (sin.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (cos.f64 x))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (sin.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (tan.f64 x))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (neg.f64 (tan.f64 x)))))","(/.f64 (+.f64 (tan.f64 x) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (tan.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (tan.f64 x)) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (tan.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (neg.f64 (neg.f64 (cos.f64 x))))) (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (cos.f64 x))) (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (tan.f64 x))) (neg.f64 (sin.f64 x))) (*.f64 (sin.f64 x) (neg.f64 (neg.f64 (tan.f64 x)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (tan.f64 x)) (sin.f64 x)) (*.f64 (sin.f64 x) (neg.f64 (tan.f64 x))))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (cos.f64 x))) (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (cos.f64 x))) (neg.f64 (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (cos.f64 x))) (sin.f64 x) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x)))","(/.f64 (fma.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (fma.f64 (neg.f64 (cos.f64 x)) (neg.f64 (sin.f64 x)) (neg.f64 (sin.f64 x))) (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))))","(/.f64 (fma.f64 (neg.f64 (cos.f64 x)) (neg.f64 (neg.f64 (sin.f64 x))) (sin.f64 x)) (*.f64 (sin.f64 x) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (fma.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (fma.f64 (cos.f64 x) (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (fma.f64 (cos.f64 x) (neg.f64 (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (fma.f64 (cos.f64 x) (sin.f64 x) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) (sin.f64 x))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (+.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) (neg.f64 (sin.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (+.f64 (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) (sin.f64 x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (sin.f64 x) (tan.f64 x))) (*.f64 (tan.f64 x) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (+.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (tan.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (*.f64 (tan.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x)) (neg.f64 (tan.f64 x))) (*.f64 (tan.f64 x) (neg.f64 (sin.f64 x))))","(/.f64 (fma.f64 (sin.f64 x) #s(literal -1 binary64) (tan.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sin.f64 x))) (tan.f64 x)) (*.f64 (tan.f64 x) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 (neg.f64 (tan.f64 x)) (sin.f64 x))) (*.f64 (neg.f64 (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (*.f64 (neg.f64 (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (tan.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (tan.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (+.f64 (sin.f64 x) (*.f64 (neg.f64 (tan.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (tan.f64 x)) (sin.f64 x)))","(/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))) (neg.f64 (sin.f64 x)))","(/.f64 (-.f64 (neg.f64 (neg.f64 (cos.f64 x))) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)))","(/.f64 (-.f64 (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))","(/.f64 (-.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)) (sin.f64 x))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))","(/.f64 (/.f64 (/.f64 (-.f64 (sin.f64 x) (tan.f64 x)) #s(literal -1 binary64)) (tan.f64 x)) (sin.f64 x))","(/.f64 (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)) (sin.f64 x))","(/.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)))))","(/.f64 (neg.f64 (/.f64 (-.f64 (sin.f64 x) (tan.f64 x)) #s(literal -1 binary64))) (neg.f64 (*.f64 (sin.f64 x) (tan.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (neg.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (sin.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64)))) (neg.f64 (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))) (sin.f64 x)))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (neg.f64 (neg.f64 (sin.f64 x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x))) (tan.f64 x)) (*.f64 (tan.f64 x) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (tan.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (sin.f64 x) (*.f64 (neg.f64 (tan.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (tan.f64 x)) (sin.f64 x)))","(/.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (fma.f64 (neg.f64 (cos.f64 x)) (sin.f64 x) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (sin.f64 x)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64))) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64))))","(/.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64))) (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))) (sin.f64 x))))","(/.f64 (neg.f64 (sin.f64 x)) (neg.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (sin.f64 x))","(/.f64 (/.f64 (-.f64 (sin.f64 x) (tan.f64 x)) #s(literal -1 binary64)) (*.f64 (sin.f64 x) (tan.f64 x)))","(/.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (cos.f64 (*.f64 x #s(literal 1/2 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64))","(/.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (/.f64 (/.f64 (-.f64 (sin.f64 x) (tan.f64 x)) #s(literal -1 binary64)) (tan.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)))) (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (sin.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (tan.f64 x) (neg.f64 (sin.f64 x))) (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x))) (tan.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (sin.f64 x))) (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (tan.f64 x)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 (tan.f64 x)) (sin.f64 x)) (-.f64 (sin.f64 x) (*.f64 (neg.f64 (tan.f64 x)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (fma.f64 (neg.f64 (cos.f64 x)) (sin.f64 x) (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (sin.f64 x)))) (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(neg.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (sin.f64 x) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) #s(literal 1 binary64)) (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (cos.f64 x) (sqrt.f64 (sin.f64 x))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 (cos.f64 x) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (sqrt.f64 (sin.f64 x)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sin.f64 x) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal 1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -3/2 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (/.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (sin.f64 x))) (/.f64 (cos.f64 x) (sqrt.f64 (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -3/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -3/2 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (neg.f64 (sin.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (sin.f64 x) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (sin.f64 x) (/.f64 (cos.f64 x) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(tan.f64 (*.f64 x #s(literal 1/2 binary64)))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x))))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x))))))","(-.f64 (/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (tan.f64 x) (neg.f64 (sin.f64 x)))) (/.f64 (tan.f64 x) (*.f64 (tan.f64 x) (neg.f64 (sin.f64 x)))))","(-.f64 (/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (sin.f64 x)))) (/.f64 (*.f64 (neg.f64 (tan.f64 x)) #s(literal 1 binary64)) (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (sin.f64 x)))))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (neg.f64 (tan.f64 x)) (sin.f64 x))) (/.f64 (*.f64 (neg.f64 (tan.f64 x)) #s(literal -1 binary64)) (*.f64 (neg.f64 (tan.f64 x)) (sin.f64 x))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x))) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (sin.f64 x)))","(-.f64 (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))) (/.f64 (*.f64 #s(literal 1/2 binary64) (cos.f64 (+.f64 x x))) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (sin.f64 x)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))))","(-.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))))","(-.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))))","(-.f64 (/.f64 (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))) (/.f64 (neg.f64 (tan.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))))","(-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 x #s(literal 1/2 binary64))","(*.f64 #s(literal 1/2 binary64) x)","(pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 x)) #s(literal 2 binary64))","(/.f64 (neg.f64 x) #s(literal -2 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 2 binary64) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) x))","(/.f64 x #s(literal 2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 x #s(literal 1/2 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sqrt.f64 (sin.f64 x))) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))) #s(literal -1 binary64)) (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))))","(*.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (sqrt.f64 (sin.f64 x))) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (sin.f64 x) (sin.f64 x)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sqrt.f64 (sin.f64 x))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (sin.f64 x))) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x))","(*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64))) (pow.f64 (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64))) (pow.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))) (sin.f64 x))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (sin.f64 x)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (/.f64 (-.f64 (sin.f64 x) (tan.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)))","(*.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (sin.f64 x) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 #s(literal 1 binary64) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(pow.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))) (*.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) (*.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))) #s(literal 3 binary64)) (pow.f64 (/.f64 (neg.f64 (tan.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))) (/.f64 (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))) (fma.f64 (/.f64 (neg.f64 (tan.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))) (/.f64 (neg.f64 (tan.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))) (*.f64 (/.f64 (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))) (/.f64 (neg.f64 (tan.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x)))))))","(/.f64 (neg.f64 (/.f64 (/.f64 (-.f64 (sin.f64 x) (tan.f64 x)) #s(literal -1 binary64)) (tan.f64 x))) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))) (neg.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64))) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))))","(/.f64 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (neg.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (-.f64 (sin.f64 x) (tan.f64 x)) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (*.f64 (sin.f64 x) (tan.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))) (neg.f64 (neg.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64))))) (neg.f64 (neg.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))) (sin.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))))) (neg.f64 (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))))) (neg.f64 (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x))) (tan.f64 x))) (neg.f64 (*.f64 (tan.f64 x) (neg.f64 (sin.f64 x)))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (tan.f64 x)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (sin.f64 x)))))","(/.f64 (neg.f64 (-.f64 (sin.f64 x) (*.f64 (neg.f64 (tan.f64 x)) #s(literal -1 binary64)))) (neg.f64 (*.f64 (neg.f64 (tan.f64 x)) (sin.f64 x))))","(/.f64 (neg.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (fma.f64 (neg.f64 (cos.f64 x)) (sin.f64 x) (sin.f64 x))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x))))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))) (*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) (*.f64 (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (pow.f64 (sin.f64 x) #s(literal -3 binary64)))) (*.f64 (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))) (*.f64 (*.f64 (sin.f64 x) (tan.f64 x)) (neg.f64 (tan.f64 x)))) (*.f64 (*.f64 (sin.f64 x) (tan.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 4 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)))) (sin.f64 x))","(/.f64 (-.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (cos.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (sin.f64 x) (neg.f64 (tan.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (tan.f64 x))))","(/.f64 (-.f64 (*.f64 (sin.f64 x) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (tan.f64 x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))) (sin.f64 x))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (neg.f64 (tan.f64 x))) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (tan.f64 x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (tan.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (tan.f64 x))))","(/.f64 (-.f64 (neg.f64 (tan.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 x)))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (sin.f64 x) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (cos.f64 x))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (sin.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (tan.f64 x))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (tan.f64 x))))","(/.f64 (-.f64 (tan.f64 x) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (tan.f64 x)))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (sin.f64 x) (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x)))) (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (tan.f64 x))) (neg.f64 (sin.f64 x))) (*.f64 (sin.f64 x) (neg.f64 (tan.f64 x))))","(/.f64 (-.f64 (tan.f64 x) (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (cos.f64 x))) (neg.f64 (neg.f64 (sin.f64 x)))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (cos.f64 x))) (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (cos.f64 x))) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (cos.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))) (neg.f64 (sin.f64 x))) (*.f64 (sin.f64 x) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (cos.f64 x)) (sin.f64 x)) (neg.f64 (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (cos.f64 x)) (neg.f64 (sin.f64 x))) (sin.f64 x)) (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (*.f64 (cos.f64 x) (neg.f64 (neg.f64 (sin.f64 x)))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (*.f64 (cos.f64 x) (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x)))","(/.f64 (-.f64 (*.f64 (cos.f64 x) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sin.f64 x)))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) (sin.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sin.f64 x)))) (neg.f64 (tan.f64 x))) (*.f64 (tan.f64 x) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sin.f64 x)))) (*.f64 (neg.f64 (tan.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x)))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal 4 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (sin.f64 x))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (neg.f64 (sin.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (sin.f64 x))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal -3 binary64))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (cos.f64 x)) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (cos.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (cos.f64 x)) (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x)))","(/.f64 (-.f64 (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (cos.f64 x) (neg.f64 (sin.f64 x))) (neg.f64 (sin.f64 x))) (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (*.f64 (cos.f64 x) (neg.f64 (neg.f64 (sin.f64 x)))) (sin.f64 x)) (*.f64 (sin.f64 x) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (*.f64 (cos.f64 x) (sin.f64 x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (tan.f64 x)) (sin.f64 x))) (*.f64 (neg.f64 (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (neg.f64 (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (*.f64 (neg.f64 (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (tan.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sin.f64 x)))) (*.f64 (neg.f64 (tan.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (tan.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (tan.f64 x)) (sin.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sin.f64 x)))) (tan.f64 x)) (*.f64 (tan.f64 x) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (sin.f64 x) (tan.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x)))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (sin.f64 x) (tan.f64 x))) (*.f64 (tan.f64 x) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (tan.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (*.f64 (tan.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x))) (neg.f64 (tan.f64 x))) (*.f64 (tan.f64 x) (neg.f64 (sin.f64 x))))","(/.f64 (fma.f64 (sin.f64 x) (neg.f64 (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (neg.f64 (cos.f64 x))))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (cos.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (fma.f64 (sin.f64 x) (neg.f64 (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (fma.f64 (sin.f64 x) (neg.f64 (neg.f64 (tan.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (neg.f64 (tan.f64 x)))))","(/.f64 (fma.f64 (sin.f64 x) (tan.f64 x) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (tan.f64 x)))","(/.f64 (fma.f64 (sin.f64 x) (neg.f64 (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (tan.f64 x))))","(/.f64 (+.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (neg.f64 (cos.f64 x))))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x)))) #s(literal 1 binary64))","(/.f64 (+.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (tan.f64 x) #s(literal -1 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (neg.f64 (neg.f64 (tan.f64 x))) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (neg.f64 (tan.f64 x)))))","(/.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)))","(/.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (neg.f64 (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (tan.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (neg.f64 (cos.f64 x))))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (fma.f64 (sin.f64 x) #s(literal -1 binary64) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (tan.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (neg.f64 (tan.f64 x)))))","(/.f64 (fma.f64 (tan.f64 x) #s(literal -1 binary64) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (tan.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (tan.f64 x))))","(/.f64 (+.f64 (tan.f64 x) (neg.f64 (sin.f64 x))) (*.f64 (sin.f64 x) (tan.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (neg.f64 (cos.f64 x))))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (sin.f64 x))))","(/.f64 (+.f64 (sin.f64 x) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (sin.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (cos.f64 x))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (sin.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (tan.f64 x))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (neg.f64 (tan.f64 x)))))","(/.f64 (+.f64 (tan.f64 x) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (tan.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (tan.f64 x)) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (tan.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (neg.f64 (neg.f64 (cos.f64 x))))) (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (cos.f64 x))) (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (tan.f64 x))) (neg.f64 (sin.f64 x))) (*.f64 (sin.f64 x) (neg.f64 (neg.f64 (tan.f64 x)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (tan.f64 x)) (sin.f64 x)) (*.f64 (sin.f64 x) (neg.f64 (tan.f64 x))))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (cos.f64 x))) (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (cos.f64 x))) (neg.f64 (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (cos.f64 x))) (sin.f64 x) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x)))","(/.f64 (fma.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (fma.f64 (neg.f64 (cos.f64 x)) (neg.f64 (sin.f64 x)) (neg.f64 (sin.f64 x))) (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))))","(/.f64 (fma.f64 (neg.f64 (cos.f64 x)) (neg.f64 (neg.f64 (sin.f64 x))) (sin.f64 x)) (*.f64 (sin.f64 x) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (fma.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (fma.f64 (cos.f64 x) (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (fma.f64 (cos.f64 x) (neg.f64 (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (fma.f64 (cos.f64 x) (sin.f64 x) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) (sin.f64 x))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (+.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) (neg.f64 (sin.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (+.f64 (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) (sin.f64 x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (sin.f64 x) (tan.f64 x))) (*.f64 (tan.f64 x) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (+.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (tan.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (*.f64 (tan.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x)) (neg.f64 (tan.f64 x))) (*.f64 (tan.f64 x) (neg.f64 (sin.f64 x))))","(/.f64 (fma.f64 (sin.f64 x) #s(literal -1 binary64) (tan.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sin.f64 x))) (tan.f64 x)) (*.f64 (tan.f64 x) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 (neg.f64 (tan.f64 x)) (sin.f64 x))) (*.f64 (neg.f64 (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (*.f64 (neg.f64 (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (tan.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (tan.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (+.f64 (sin.f64 x) (*.f64 (neg.f64 (tan.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (tan.f64 x)) (sin.f64 x)))","(/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))) (neg.f64 (sin.f64 x)))","(/.f64 (-.f64 (neg.f64 (neg.f64 (cos.f64 x))) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)))","(/.f64 (-.f64 (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))","(/.f64 (-.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)) (sin.f64 x))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))","(/.f64 (/.f64 (/.f64 (-.f64 (sin.f64 x) (tan.f64 x)) #s(literal -1 binary64)) (tan.f64 x)) (sin.f64 x))","(/.f64 (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)) (sin.f64 x))","(/.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)))))","(/.f64 (neg.f64 (/.f64 (-.f64 (sin.f64 x) (tan.f64 x)) #s(literal -1 binary64))) (neg.f64 (*.f64 (sin.f64 x) (tan.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (neg.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (sin.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64)))) (neg.f64 (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))) (sin.f64 x)))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (neg.f64 (neg.f64 (sin.f64 x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x))) (tan.f64 x)) (*.f64 (tan.f64 x) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (tan.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (sin.f64 x) (*.f64 (neg.f64 (tan.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (tan.f64 x)) (sin.f64 x)))","(/.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (fma.f64 (neg.f64 (cos.f64 x)) (sin.f64 x) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (sin.f64 x)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64))) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64))))","(/.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64))) (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))) (sin.f64 x))))","(/.f64 (neg.f64 (sin.f64 x)) (neg.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (sin.f64 x))","(/.f64 (/.f64 (-.f64 (sin.f64 x) (tan.f64 x)) #s(literal -1 binary64)) (*.f64 (sin.f64 x) (tan.f64 x)))","(/.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (cos.f64 (*.f64 x #s(literal 1/2 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64))","(/.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (/.f64 (/.f64 (-.f64 (sin.f64 x) (tan.f64 x)) #s(literal -1 binary64)) (tan.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)))) (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (sin.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (tan.f64 x) (neg.f64 (sin.f64 x))) (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x))) (tan.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (sin.f64 x))) (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (tan.f64 x)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 (tan.f64 x)) (sin.f64 x)) (-.f64 (sin.f64 x) (*.f64 (neg.f64 (tan.f64 x)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (fma.f64 (neg.f64 (cos.f64 x)) (sin.f64 x) (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (sin.f64 x)))) (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(neg.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (sin.f64 x) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) #s(literal 1 binary64)) (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (cos.f64 x) (sqrt.f64 (sin.f64 x))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 (cos.f64 x) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (sqrt.f64 (sin.f64 x)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sin.f64 x) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal 1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -3/2 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (/.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (sin.f64 x))) (/.f64 (cos.f64 x) (sqrt.f64 (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -3/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -3/2 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (neg.f64 (sin.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (sin.f64 x) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (sin.f64 x) (/.f64 (cos.f64 x) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(tan.f64 (*.f64 x #s(literal 1/2 binary64)))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x))))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x))))))","(-.f64 (/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (tan.f64 x) (neg.f64 (sin.f64 x)))) (/.f64 (tan.f64 x) (*.f64 (tan.f64 x) (neg.f64 (sin.f64 x)))))","(-.f64 (/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (sin.f64 x)))) (/.f64 (*.f64 (neg.f64 (tan.f64 x)) #s(literal 1 binary64)) (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (sin.f64 x)))))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (neg.f64 (tan.f64 x)) (sin.f64 x))) (/.f64 (*.f64 (neg.f64 (tan.f64 x)) #s(literal -1 binary64)) (*.f64 (neg.f64 (tan.f64 x)) (sin.f64 x))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x))) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (sin.f64 x)))","(-.f64 (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))) (/.f64 (*.f64 #s(literal 1/2 binary64) (cos.f64 (+.f64 x x))) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (sin.f64 x)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))))","(-.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))))","(-.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))))","(-.f64 (/.f64 (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))) (/.f64 (neg.f64 (tan.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))))","(-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 (cos.f64 x) (sqrt.f64 (sin.f64 x))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (cos.f64 x) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (sin.f64 x))","(*.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(*.f64 (/.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (/.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))))","(*.f64 (/.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (/.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (sin.f64 x))) (/.f64 (cos.f64 x) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(*.f64 (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(*.f64 (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (neg.f64 (sin.f64 x)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 (neg.f64 (sin.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x))","(*.f64 (sin.f64 x) (/.f64 (cos.f64 x) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(*.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(pow.f64 (neg.f64 (tan.f64 x)) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (cos.f64 x)))) (neg.f64 (neg.f64 (sin.f64 x))))","(/.f64 (neg.f64 (neg.f64 (cos.f64 x))) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 (cos.f64 x)) (neg.f64 (neg.f64 (sin.f64 x))))","(/.f64 (neg.f64 (cos.f64 x)) (sin.f64 x))","(/.f64 (cos.f64 x) (neg.f64 (sin.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (tan.f64 x))))","(/.f64 #s(literal -1 binary64) (tan.f64 x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (neg.f64 (tan.f64 x)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (tan.f64 x)))","(neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (sin.f64 x)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 (tan.f64 x))) #s(literal -1 binary64)))","(*.f64 (/.f64 (sqrt.f64 (sin.f64 x)) #s(literal 1 binary64)) (/.f64 (sqrt.f64 (sin.f64 x)) (cos.f64 x)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (cos.f64 x)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (cos.f64 x)))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64)) (*.f64 (sin.f64 x) (tan.f64 x)))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (sin.f64 x) (tan.f64 x)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))","(*.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (cos.f64 x)) (/.f64 (sqrt.f64 (sin.f64 x)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (cos.f64 x)))","(*.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))","(*.f64 (neg.f64 (sin.f64 x)) (/.f64 #s(literal -1 binary64) (cos.f64 x)))","(*.f64 (*.f64 (sin.f64 x) (tan.f64 x)) (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64)))","(*.f64 (*.f64 (sin.f64 x) (tan.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 (tan.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (tan.f64 x))","(pow.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (tan.f64 x) #s(literal 1 binary64))","(/.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (neg.f64 (cos.f64 x))))","(/.f64 (neg.f64 (tan.f64 x)) #s(literal -1 binary64))","(/.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x)))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (tan.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(tan.f64 x)","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (cos.f64 x))) (neg.f64 (tan.f64 x)))","(*.f64 (pow.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (sin.f64 x))","(*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (neg.f64 (sin.f64 x)))","(*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 (sin.f64 x) (pow.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(pow.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sin.f64 x))))","(/.f64 #s(literal -1 binary64) (sin.f64 x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x)))","(neg.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 (sin.f64 x))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sqrt.f64 (sin.f64 x))) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))) #s(literal -1 binary64)) (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))))","(*.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (sqrt.f64 (sin.f64 x))) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (sin.f64 x) (sin.f64 x)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sqrt.f64 (sin.f64 x))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (sin.f64 x))) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x))","(*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64))) (pow.f64 (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64))) (pow.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))) (sin.f64 x))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (sin.f64 x)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (/.f64 (-.f64 (sin.f64 x) (tan.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)))","(*.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (sin.f64 x) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 #s(literal 1 binary64) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(pow.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))) (*.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) (*.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))) #s(literal 3 binary64)) (pow.f64 (/.f64 (neg.f64 (tan.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))) (/.f64 (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))) (fma.f64 (/.f64 (neg.f64 (tan.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))) (/.f64 (neg.f64 (tan.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))) (*.f64 (/.f64 (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))) (/.f64 (neg.f64 (tan.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x)))))))","(/.f64 (neg.f64 (/.f64 (/.f64 (-.f64 (sin.f64 x) (tan.f64 x)) #s(literal -1 binary64)) (tan.f64 x))) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))) (neg.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64))) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))))","(/.f64 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (neg.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (-.f64 (sin.f64 x) (tan.f64 x)) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (*.f64 (sin.f64 x) (tan.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))) (neg.f64 (neg.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64))))) (neg.f64 (neg.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))) (sin.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))))) (neg.f64 (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))))) (neg.f64 (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x))) (tan.f64 x))) (neg.f64 (*.f64 (tan.f64 x) (neg.f64 (sin.f64 x)))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (tan.f64 x)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (sin.f64 x)))))","(/.f64 (neg.f64 (-.f64 (sin.f64 x) (*.f64 (neg.f64 (tan.f64 x)) #s(literal -1 binary64)))) (neg.f64 (*.f64 (neg.f64 (tan.f64 x)) (sin.f64 x))))","(/.f64 (neg.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (fma.f64 (neg.f64 (cos.f64 x)) (sin.f64 x) (sin.f64 x))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x))))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))) (*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) (*.f64 (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (pow.f64 (sin.f64 x) #s(literal -3 binary64)))) (*.f64 (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))) (*.f64 (*.f64 (sin.f64 x) (tan.f64 x)) (neg.f64 (tan.f64 x)))) (*.f64 (*.f64 (sin.f64 x) (tan.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 4 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)))) (sin.f64 x))","(/.f64 (-.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (cos.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (sin.f64 x) (neg.f64 (tan.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (tan.f64 x))))","(/.f64 (-.f64 (*.f64 (sin.f64 x) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (tan.f64 x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))) (sin.f64 x))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (neg.f64 (tan.f64 x))) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (tan.f64 x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (tan.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (tan.f64 x))))","(/.f64 (-.f64 (neg.f64 (tan.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 x)))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (sin.f64 x) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (cos.f64 x))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (sin.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (tan.f64 x))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (tan.f64 x))))","(/.f64 (-.f64 (tan.f64 x) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (tan.f64 x)))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (sin.f64 x) (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x)))) (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (tan.f64 x))) (neg.f64 (sin.f64 x))) (*.f64 (sin.f64 x) (neg.f64 (tan.f64 x))))","(/.f64 (-.f64 (tan.f64 x) (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (cos.f64 x))) (neg.f64 (neg.f64 (sin.f64 x)))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (cos.f64 x))) (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (cos.f64 x))) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (cos.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))) (neg.f64 (sin.f64 x))) (*.f64 (sin.f64 x) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (cos.f64 x)) (sin.f64 x)) (neg.f64 (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (cos.f64 x)) (neg.f64 (sin.f64 x))) (sin.f64 x)) (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (*.f64 (cos.f64 x) (neg.f64 (neg.f64 (sin.f64 x)))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (*.f64 (cos.f64 x) (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x)))","(/.f64 (-.f64 (*.f64 (cos.f64 x) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sin.f64 x)))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) (sin.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sin.f64 x)))) (neg.f64 (tan.f64 x))) (*.f64 (tan.f64 x) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sin.f64 x)))) (*.f64 (neg.f64 (tan.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x)))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal 4 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (sin.f64 x))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (neg.f64 (sin.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (sin.f64 x))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal -3 binary64))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (cos.f64 x)) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (cos.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (cos.f64 x)) (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x)))","(/.f64 (-.f64 (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (cos.f64 x) (neg.f64 (sin.f64 x))) (neg.f64 (sin.f64 x))) (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (*.f64 (cos.f64 x) (neg.f64 (neg.f64 (sin.f64 x)))) (sin.f64 x)) (*.f64 (sin.f64 x) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (*.f64 (cos.f64 x) (sin.f64 x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (tan.f64 x)) (sin.f64 x))) (*.f64 (neg.f64 (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (neg.f64 (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (*.f64 (neg.f64 (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (tan.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sin.f64 x)))) (*.f64 (neg.f64 (tan.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (tan.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (tan.f64 x)) (sin.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sin.f64 x)))) (tan.f64 x)) (*.f64 (tan.f64 x) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (sin.f64 x) (tan.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x)))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (sin.f64 x) (tan.f64 x))) (*.f64 (tan.f64 x) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (tan.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (*.f64 (tan.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x))) (neg.f64 (tan.f64 x))) (*.f64 (tan.f64 x) (neg.f64 (sin.f64 x))))","(/.f64 (fma.f64 (sin.f64 x) (neg.f64 (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (neg.f64 (cos.f64 x))))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (cos.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (fma.f64 (sin.f64 x) (neg.f64 (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (fma.f64 (sin.f64 x) (neg.f64 (neg.f64 (tan.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (neg.f64 (tan.f64 x)))))","(/.f64 (fma.f64 (sin.f64 x) (tan.f64 x) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (tan.f64 x)))","(/.f64 (fma.f64 (sin.f64 x) (neg.f64 (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (tan.f64 x))))","(/.f64 (+.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (neg.f64 (cos.f64 x))))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x)))) #s(literal 1 binary64))","(/.f64 (+.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (tan.f64 x) #s(literal -1 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (neg.f64 (neg.f64 (tan.f64 x))) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (neg.f64 (tan.f64 x)))))","(/.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)))","(/.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (neg.f64 (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (tan.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (neg.f64 (cos.f64 x))))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (fma.f64 (sin.f64 x) #s(literal -1 binary64) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (tan.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (neg.f64 (tan.f64 x)))))","(/.f64 (fma.f64 (tan.f64 x) #s(literal -1 binary64) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (tan.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (tan.f64 x))))","(/.f64 (+.f64 (tan.f64 x) (neg.f64 (sin.f64 x))) (*.f64 (sin.f64 x) (tan.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (neg.f64 (cos.f64 x))))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (sin.f64 x))))","(/.f64 (+.f64 (sin.f64 x) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (sin.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (cos.f64 x))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (sin.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (tan.f64 x))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (neg.f64 (tan.f64 x)))))","(/.f64 (+.f64 (tan.f64 x) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (tan.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (tan.f64 x)) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (tan.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (neg.f64 (neg.f64 (cos.f64 x))))) (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (cos.f64 x))) (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (tan.f64 x))) (neg.f64 (sin.f64 x))) (*.f64 (sin.f64 x) (neg.f64 (neg.f64 (tan.f64 x)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (tan.f64 x)) (sin.f64 x)) (*.f64 (sin.f64 x) (neg.f64 (tan.f64 x))))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (cos.f64 x))) (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (cos.f64 x))) (neg.f64 (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (cos.f64 x))) (sin.f64 x) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x)))","(/.f64 (fma.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (fma.f64 (neg.f64 (cos.f64 x)) (neg.f64 (sin.f64 x)) (neg.f64 (sin.f64 x))) (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))))","(/.f64 (fma.f64 (neg.f64 (cos.f64 x)) (neg.f64 (neg.f64 (sin.f64 x))) (sin.f64 x)) (*.f64 (sin.f64 x) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (fma.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (fma.f64 (cos.f64 x) (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (fma.f64 (cos.f64 x) (neg.f64 (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (fma.f64 (cos.f64 x) (sin.f64 x) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) (sin.f64 x))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (+.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) (neg.f64 (sin.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (+.f64 (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) (sin.f64 x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (sin.f64 x) (tan.f64 x))) (*.f64 (tan.f64 x) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (+.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (tan.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (*.f64 (tan.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x)) (neg.f64 (tan.f64 x))) (*.f64 (tan.f64 x) (neg.f64 (sin.f64 x))))","(/.f64 (fma.f64 (sin.f64 x) #s(literal -1 binary64) (tan.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sin.f64 x))) (tan.f64 x)) (*.f64 (tan.f64 x) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 (neg.f64 (tan.f64 x)) (sin.f64 x))) (*.f64 (neg.f64 (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (*.f64 (neg.f64 (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (tan.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (tan.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (+.f64 (sin.f64 x) (*.f64 (neg.f64 (tan.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (tan.f64 x)) (sin.f64 x)))","(/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))) (neg.f64 (sin.f64 x)))","(/.f64 (-.f64 (neg.f64 (neg.f64 (cos.f64 x))) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)))","(/.f64 (-.f64 (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))","(/.f64 (-.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)) (sin.f64 x))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))","(/.f64 (/.f64 (/.f64 (-.f64 (sin.f64 x) (tan.f64 x)) #s(literal -1 binary64)) (tan.f64 x)) (sin.f64 x))","(/.f64 (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)) (sin.f64 x))","(/.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)))))","(/.f64 (neg.f64 (/.f64 (-.f64 (sin.f64 x) (tan.f64 x)) #s(literal -1 binary64))) (neg.f64 (*.f64 (sin.f64 x) (tan.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (neg.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (sin.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64)))) (neg.f64 (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))) (sin.f64 x)))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (neg.f64 (neg.f64 (sin.f64 x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x))) (tan.f64 x)) (*.f64 (tan.f64 x) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (tan.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (sin.f64 x) (*.f64 (neg.f64 (tan.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (tan.f64 x)) (sin.f64 x)))","(/.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (fma.f64 (neg.f64 (cos.f64 x)) (sin.f64 x) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (sin.f64 x)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64))) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64))))","(/.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64))) (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))) (sin.f64 x))))","(/.f64 (neg.f64 (sin.f64 x)) (neg.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (sin.f64 x))","(/.f64 (/.f64 (-.f64 (sin.f64 x) (tan.f64 x)) #s(literal -1 binary64)) (*.f64 (sin.f64 x) (tan.f64 x)))","(/.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (cos.f64 (*.f64 x #s(literal 1/2 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64))","(/.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (/.f64 (/.f64 (-.f64 (sin.f64 x) (tan.f64 x)) #s(literal -1 binary64)) (tan.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)))) (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (sin.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (tan.f64 x) (neg.f64 (sin.f64 x))) (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x))) (tan.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (sin.f64 x))) (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (tan.f64 x)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 (tan.f64 x)) (sin.f64 x)) (-.f64 (sin.f64 x) (*.f64 (neg.f64 (tan.f64 x)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (fma.f64 (neg.f64 (cos.f64 x)) (sin.f64 x) (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (sin.f64 x)))) (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(neg.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (sin.f64 x) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) #s(literal 1 binary64)) (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (cos.f64 x) (sqrt.f64 (sin.f64 x))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 (cos.f64 x) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (sqrt.f64 (sin.f64 x)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sin.f64 x) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal 1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -3/2 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (/.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (sin.f64 x))) (/.f64 (cos.f64 x) (sqrt.f64 (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -3/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -3/2 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (neg.f64 (sin.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (sin.f64 x) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (sin.f64 x) (/.f64 (cos.f64 x) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(tan.f64 (*.f64 x #s(literal 1/2 binary64)))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x))))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x))))))","(-.f64 (/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (tan.f64 x) (neg.f64 (sin.f64 x)))) (/.f64 (tan.f64 x) (*.f64 (tan.f64 x) (neg.f64 (sin.f64 x)))))","(-.f64 (/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (sin.f64 x)))) (/.f64 (*.f64 (neg.f64 (tan.f64 x)) #s(literal 1 binary64)) (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (sin.f64 x)))))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (neg.f64 (tan.f64 x)) (sin.f64 x))) (/.f64 (*.f64 (neg.f64 (tan.f64 x)) #s(literal -1 binary64)) (*.f64 (neg.f64 (tan.f64 x)) (sin.f64 x))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x))) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (sin.f64 x)))","(-.f64 (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))) (/.f64 (*.f64 #s(literal 1/2 binary64) (cos.f64 (+.f64 x x))) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (sin.f64 x)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))))","(-.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))))","(-.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))))","(-.f64 (/.f64 (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))) (/.f64 (neg.f64 (tan.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))))","(-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (cos.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (cos.f64 x))","(cos.f64 x)","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (sqrt.f64 (sin.f64 x))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sqrt.f64 (sin.f64 x))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (sin.f64 x))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (sqrt.f64 (sin.f64 x))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (sqrt.f64 (sin.f64 x))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (sqrt.f64 (sin.f64 x))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (sin.f64 x) (sqrt.f64 (sin.f64 x))) (/.f64 (sin.f64 x) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))))","(*.f64 (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 (sin.f64 x) (sin.f64 x)) (sin.f64 x))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (sin.f64 x)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (sin.f64 x)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (sin.f64 x))","(*.f64 (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(*.f64 (sqrt.f64 (sin.f64 x)) (sqrt.f64 (sin.f64 x)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(*.f64 (sin.f64 x) (/.f64 (sin.f64 x) (sin.f64 x)))","(*.f64 (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(*.f64 (sin.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (sin.f64 x))","(pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal -2 binary64))","(pow.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (sin.f64 x) #s(literal 1 binary64))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (sin.f64 x))","(/.f64 (sin.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(sin.f64 x)","(-.f64 (/.f64 #s(literal 1/2 binary64) (sin.f64 x)) (/.f64 (*.f64 #s(literal 1/2 binary64) (cos.f64 (+.f64 x x))) (sin.f64 x)))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (sin.f64 x)))","(exp.f64 (-.f64 (*.f64 (log.f64 (sin.f64 x)) #s(literal 2 binary64)) (log.f64 (sin.f64 x))))","(exp.f64 (neg.f64 (neg.f64 (log.f64 (sin.f64 x)))))","(exp.f64 (log.f64 (sin.f64 x)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (sqrt.f64 (sin.f64 x))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sqrt.f64 (sin.f64 x))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (sin.f64 x))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (sqrt.f64 (sin.f64 x))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (sqrt.f64 (sin.f64 x))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (sqrt.f64 (sin.f64 x))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (sin.f64 x) (sqrt.f64 (sin.f64 x))) (/.f64 (sin.f64 x) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))))","(*.f64 (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 (sin.f64 x) (sin.f64 x)) (sin.f64 x))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (sin.f64 x)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (sin.f64 x)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (sin.f64 x))","(*.f64 (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(*.f64 (sqrt.f64 (sin.f64 x)) (sqrt.f64 (sin.f64 x)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(*.f64 (sin.f64 x) (/.f64 (sin.f64 x) (sin.f64 x)))","(*.f64 (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(*.f64 (sin.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (sin.f64 x))","(pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal -2 binary64))","(pow.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (sin.f64 x) #s(literal 1 binary64))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (sin.f64 x))","(/.f64 (sin.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(sin.f64 x)","(-.f64 (/.f64 #s(literal 1/2 binary64) (sin.f64 x)) (/.f64 (*.f64 #s(literal 1/2 binary64) (cos.f64 (+.f64 x x))) (sin.f64 x)))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (sin.f64 x)))","(exp.f64 (-.f64 (*.f64 (log.f64 (sin.f64 x)) #s(literal 2 binary64)) (log.f64 (sin.f64 x))))","(exp.f64 (neg.f64 (neg.f64 (log.f64 (sin.f64 x)))))","(exp.f64 (log.f64 (sin.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sqrt.f64 (sin.f64 x))) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))) #s(literal -1 binary64)) (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))))","(*.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (sqrt.f64 (sin.f64 x))) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (sin.f64 x) (sin.f64 x)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sqrt.f64 (sin.f64 x))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (sin.f64 x))) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x))","(*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64))) (pow.f64 (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64))) (pow.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))) (sin.f64 x))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (sin.f64 x)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (/.f64 (-.f64 (sin.f64 x) (tan.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)))","(*.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (sin.f64 x) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 #s(literal 1 binary64) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(pow.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))) (*.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) (*.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))) #s(literal 3 binary64)) (pow.f64 (/.f64 (neg.f64 (tan.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))) (/.f64 (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))) (fma.f64 (/.f64 (neg.f64 (tan.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))) (/.f64 (neg.f64 (tan.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))) (*.f64 (/.f64 (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))) (/.f64 (neg.f64 (tan.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x)))))))","(/.f64 (neg.f64 (/.f64 (/.f64 (-.f64 (sin.f64 x) (tan.f64 x)) #s(literal -1 binary64)) (tan.f64 x))) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))) (neg.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64))) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))))","(/.f64 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (neg.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (-.f64 (sin.f64 x) (tan.f64 x)) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (*.f64 (sin.f64 x) (tan.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))) (neg.f64 (neg.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64))))) (neg.f64 (neg.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))) (sin.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))))) (neg.f64 (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))))) (neg.f64 (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x))) (tan.f64 x))) (neg.f64 (*.f64 (tan.f64 x) (neg.f64 (sin.f64 x)))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (tan.f64 x)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (sin.f64 x)))))","(/.f64 (neg.f64 (-.f64 (sin.f64 x) (*.f64 (neg.f64 (tan.f64 x)) #s(literal -1 binary64)))) (neg.f64 (*.f64 (neg.f64 (tan.f64 x)) (sin.f64 x))))","(/.f64 (neg.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (fma.f64 (neg.f64 (cos.f64 x)) (sin.f64 x) (sin.f64 x))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x))))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))) (*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) (*.f64 (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (pow.f64 (sin.f64 x) #s(literal -3 binary64)))) (*.f64 (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))) (*.f64 (*.f64 (sin.f64 x) (tan.f64 x)) (neg.f64 (tan.f64 x)))) (*.f64 (*.f64 (sin.f64 x) (tan.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 4 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)))) (sin.f64 x))","(/.f64 (-.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (cos.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (sin.f64 x) (neg.f64 (tan.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (tan.f64 x))))","(/.f64 (-.f64 (*.f64 (sin.f64 x) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (tan.f64 x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))) (sin.f64 x))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (neg.f64 (tan.f64 x))) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (tan.f64 x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (tan.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (tan.f64 x))))","(/.f64 (-.f64 (neg.f64 (tan.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 x)))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (sin.f64 x) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (cos.f64 x))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (sin.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (tan.f64 x))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (tan.f64 x))))","(/.f64 (-.f64 (tan.f64 x) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (tan.f64 x)))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (sin.f64 x) (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x)))) (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (tan.f64 x))) (neg.f64 (sin.f64 x))) (*.f64 (sin.f64 x) (neg.f64 (tan.f64 x))))","(/.f64 (-.f64 (tan.f64 x) (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (cos.f64 x))) (neg.f64 (neg.f64 (sin.f64 x)))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (cos.f64 x))) (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (cos.f64 x))) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (cos.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))) (neg.f64 (sin.f64 x))) (*.f64 (sin.f64 x) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (cos.f64 x)) (sin.f64 x)) (neg.f64 (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (cos.f64 x)) (neg.f64 (sin.f64 x))) (sin.f64 x)) (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (*.f64 (cos.f64 x) (neg.f64 (neg.f64 (sin.f64 x)))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (*.f64 (cos.f64 x) (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x)))","(/.f64 (-.f64 (*.f64 (cos.f64 x) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sin.f64 x)))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) (sin.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sin.f64 x)))) (neg.f64 (tan.f64 x))) (*.f64 (tan.f64 x) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sin.f64 x)))) (*.f64 (neg.f64 (tan.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x)))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal 4 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (sin.f64 x))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (neg.f64 (sin.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (sin.f64 x))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal -3 binary64))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (cos.f64 x)) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (cos.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (cos.f64 x)) (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x)))","(/.f64 (-.f64 (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (cos.f64 x) (neg.f64 (sin.f64 x))) (neg.f64 (sin.f64 x))) (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (*.f64 (cos.f64 x) (neg.f64 (neg.f64 (sin.f64 x)))) (sin.f64 x)) (*.f64 (sin.f64 x) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (*.f64 (cos.f64 x) (sin.f64 x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (tan.f64 x)) (sin.f64 x))) (*.f64 (neg.f64 (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (neg.f64 (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (*.f64 (neg.f64 (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (tan.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sin.f64 x)))) (*.f64 (neg.f64 (tan.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (tan.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (tan.f64 x)) (sin.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sin.f64 x)))) (tan.f64 x)) (*.f64 (tan.f64 x) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (sin.f64 x) (tan.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x)))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (sin.f64 x) (tan.f64 x))) (*.f64 (tan.f64 x) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (tan.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (*.f64 (tan.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x))) (neg.f64 (tan.f64 x))) (*.f64 (tan.f64 x) (neg.f64 (sin.f64 x))))","(/.f64 (fma.f64 (sin.f64 x) (neg.f64 (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (neg.f64 (cos.f64 x))))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (cos.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (fma.f64 (sin.f64 x) (neg.f64 (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (fma.f64 (sin.f64 x) (neg.f64 (neg.f64 (tan.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (neg.f64 (tan.f64 x)))))","(/.f64 (fma.f64 (sin.f64 x) (tan.f64 x) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (tan.f64 x)))","(/.f64 (fma.f64 (sin.f64 x) (neg.f64 (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (tan.f64 x))))","(/.f64 (+.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (neg.f64 (cos.f64 x))))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x)))) #s(literal 1 binary64))","(/.f64 (+.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (tan.f64 x) #s(literal -1 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (neg.f64 (neg.f64 (tan.f64 x))) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (neg.f64 (tan.f64 x)))))","(/.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)))","(/.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (neg.f64 (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (tan.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (neg.f64 (cos.f64 x))))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (fma.f64 (sin.f64 x) #s(literal -1 binary64) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (tan.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (neg.f64 (tan.f64 x)))))","(/.f64 (fma.f64 (tan.f64 x) #s(literal -1 binary64) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (tan.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (tan.f64 x))))","(/.f64 (+.f64 (tan.f64 x) (neg.f64 (sin.f64 x))) (*.f64 (sin.f64 x) (tan.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (neg.f64 (cos.f64 x))))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (sin.f64 x))))","(/.f64 (+.f64 (sin.f64 x) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (sin.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (cos.f64 x))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (sin.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (tan.f64 x))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (neg.f64 (tan.f64 x)))))","(/.f64 (+.f64 (tan.f64 x) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (tan.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (tan.f64 x)) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (tan.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (neg.f64 (neg.f64 (cos.f64 x))))) (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (cos.f64 x))) (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (tan.f64 x))) (neg.f64 (sin.f64 x))) (*.f64 (sin.f64 x) (neg.f64 (neg.f64 (tan.f64 x)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (tan.f64 x)) (sin.f64 x)) (*.f64 (sin.f64 x) (neg.f64 (tan.f64 x))))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (cos.f64 x))) (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (cos.f64 x))) (neg.f64 (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (cos.f64 x))) (sin.f64 x) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x)))","(/.f64 (fma.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (fma.f64 (neg.f64 (cos.f64 x)) (neg.f64 (sin.f64 x)) (neg.f64 (sin.f64 x))) (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))))","(/.f64 (fma.f64 (neg.f64 (cos.f64 x)) (neg.f64 (neg.f64 (sin.f64 x))) (sin.f64 x)) (*.f64 (sin.f64 x) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (fma.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (fma.f64 (cos.f64 x) (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (fma.f64 (cos.f64 x) (neg.f64 (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (fma.f64 (cos.f64 x) (sin.f64 x) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) (sin.f64 x))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (+.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) (neg.f64 (sin.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (+.f64 (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (tan.f64 x))) (sin.f64 x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (sin.f64 x) (tan.f64 x))) (*.f64 (tan.f64 x) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (+.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (tan.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (*.f64 (tan.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x)) (neg.f64 (tan.f64 x))) (*.f64 (tan.f64 x) (neg.f64 (sin.f64 x))))","(/.f64 (fma.f64 (sin.f64 x) #s(literal -1 binary64) (tan.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sin.f64 x))) (tan.f64 x)) (*.f64 (tan.f64 x) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 (neg.f64 (tan.f64 x)) (sin.f64 x))) (*.f64 (neg.f64 (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (*.f64 (neg.f64 (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (tan.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (tan.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (+.f64 (sin.f64 x) (*.f64 (neg.f64 (tan.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (tan.f64 x)) (sin.f64 x)))","(/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))) (neg.f64 (sin.f64 x)))","(/.f64 (-.f64 (neg.f64 (neg.f64 (cos.f64 x))) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)))","(/.f64 (-.f64 (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))","(/.f64 (-.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)) (sin.f64 x))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))","(/.f64 (/.f64 (/.f64 (-.f64 (sin.f64 x) (tan.f64 x)) #s(literal -1 binary64)) (tan.f64 x)) (sin.f64 x))","(/.f64 (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)) (sin.f64 x))","(/.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)))))","(/.f64 (neg.f64 (/.f64 (-.f64 (sin.f64 x) (tan.f64 x)) #s(literal -1 binary64))) (neg.f64 (*.f64 (sin.f64 x) (tan.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (neg.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (sin.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64)))) (neg.f64 (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))) (sin.f64 x)))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (neg.f64 (neg.f64 (sin.f64 x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x))) (tan.f64 x)) (*.f64 (tan.f64 x) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (tan.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (sin.f64 x) (*.f64 (neg.f64 (tan.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (tan.f64 x)) (sin.f64 x)))","(/.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (fma.f64 (neg.f64 (cos.f64 x)) (sin.f64 x) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (sin.f64 x)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64))) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64))))","(/.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64))) (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))) (sin.f64 x))))","(/.f64 (neg.f64 (sin.f64 x)) (neg.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (sin.f64 x))","(/.f64 (/.f64 (-.f64 (sin.f64 x) (tan.f64 x)) #s(literal -1 binary64)) (*.f64 (sin.f64 x) (tan.f64 x)))","(/.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (cos.f64 (*.f64 x #s(literal 1/2 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64))","(/.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (/.f64 (/.f64 (-.f64 (sin.f64 x) (tan.f64 x)) #s(literal -1 binary64)) (tan.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)))) (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (sin.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (tan.f64 x) (neg.f64 (sin.f64 x))) (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x))) (tan.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (sin.f64 x))) (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (tan.f64 x)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 (tan.f64 x)) (sin.f64 x)) (-.f64 (sin.f64 x) (*.f64 (neg.f64 (tan.f64 x)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (fma.f64 (neg.f64 (cos.f64 x)) (sin.f64 x) (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (sin.f64 x)))) (-.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(neg.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (sin.f64 x) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) #s(literal 1 binary64)) (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (cos.f64 x) (sqrt.f64 (sin.f64 x))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 (cos.f64 x) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (sqrt.f64 (sin.f64 x)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sin.f64 x) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal 1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -3/2 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (/.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (sin.f64 x))) (/.f64 (cos.f64 x) (sqrt.f64 (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal 3/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -3/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -3/2 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (neg.f64 (sin.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (sin.f64 x) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (sin.f64 x) (/.f64 (cos.f64 x) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(tan.f64 (*.f64 x #s(literal 1/2 binary64)))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x))))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x))))))","(-.f64 (/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (tan.f64 x) (neg.f64 (sin.f64 x)))) (/.f64 (tan.f64 x) (*.f64 (tan.f64 x) (neg.f64 (sin.f64 x)))))","(-.f64 (/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (sin.f64 x)))) (/.f64 (*.f64 (neg.f64 (tan.f64 x)) #s(literal 1 binary64)) (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (sin.f64 x)))))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (neg.f64 (tan.f64 x)) (sin.f64 x))) (/.f64 (*.f64 (neg.f64 (tan.f64 x)) #s(literal -1 binary64)) (*.f64 (neg.f64 (tan.f64 x)) (sin.f64 x))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x))) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (sin.f64 x)))","(-.f64 (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))) (/.f64 (*.f64 #s(literal 1/2 binary64) (cos.f64 (+.f64 x x))) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (sin.f64 x)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))))","(-.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))))","(-.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))))","(-.f64 (/.f64 (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))) (/.f64 (neg.f64 (tan.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))))","(-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))))","(/.f64 (-.f64 (pow.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))))","(/.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64) #s(literal 1 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (neg.f64 (neg.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (-.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(fma.f64 (cos.f64 x) #s(literal -1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal -1 binary64) (cos.f64 x) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)))))","(-.f64 (/.f64 #s(literal 1/2 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (/.f64 (*.f64 #s(literal 1/2 binary64) (cos.f64 (+.f64 x x))) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(-.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(-.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(+.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64)))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64)))","(*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (sin.f64 x)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal 3/2 binary64)) #s(literal 2 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(*.f64 (sin.f64 x) (sin.f64 x))","(*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(pow.f64 (exp.f64 #s(literal 2 binary64)) (log.f64 (sin.f64 x)))","(pow.f64 (neg.f64 (sin.f64 x)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))","(pow.f64 (sin.f64 x) #s(literal 2 binary64))","(/.f64 (-.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 #s(literal 1/2 binary64) (cos.f64 (+.f64 x x))) #s(literal 3 binary64))) (+.f64 #s(literal 1/4 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (cos.f64 (+.f64 x x))) (*.f64 #s(literal 1/2 binary64) (cos.f64 (+.f64 x x))) (*.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (+.f64 x x)))))))","(/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 x)) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 x)) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 x))) (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 x))))))","(/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (neg.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (neg.f64 (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (cos.f64 (-.f64 x x)) (cos.f64 (+.f64 x x)))) #s(literal -2 binary64))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (cos.f64 (-.f64 x x)) (cos.f64 (+.f64 x x))) #s(literal 2 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (-.f64 (cos.f64 (-.f64 x x)) (cos.f64 (+.f64 x x)))))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(-.f64 (/.f64 (cos.f64 (-.f64 x x)) #s(literal 2 binary64)) (/.f64 (cos.f64 (+.f64 x x)) #s(literal 2 binary64)))","(-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (+.f64 x x))))","(exp.f64 (+.f64 (log.f64 (sin.f64 x)) (log.f64 (sin.f64 x))))","(exp.f64 (*.f64 (*.f64 (log.f64 (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (sin.f64 x)) #s(literal 2 binary64)))","(+.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 x)))","(+.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":382.798095703125,"type":"rewrite"},{"compiler":[[21460,2700]],"memory":[[12968224,94627024]],"time":140.580078125,"type":"eval"},{"alts":[["(fma.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (-.f64 (/.f64 #s(literal 1/2 binary64) (sin.f64 x)) (/.f64 (*.f64 #s(literal 1/2 binary64) (cos.f64 (+.f64 x x))) (sin.f64 x)))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","fresh",31.480895266701385,"binary64"],["(fma.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","done",29.307571931838016,"binary64"],["(pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))","fresh",59.0843567212142,"binary64"],["(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","next",0.6512268554423705,"binary64"],["(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","fresh",14.21354454338246,"binary64"],["(/.f64 (-.f64 (tan.f64 x) (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x)))","fresh",30.430474423653177,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","fresh",29.341552730628777,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","done",29.310971754888417,"binary64"],["(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","fresh",30.3192244398209,"binary64"],["(/.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","next",0.40824766837884213,"binary64"],["(/.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","next",0.5264218091936519,"binary64"],["(/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","fresh",0.4535714356003984,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","fresh",0.6215265074886769,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (/.f64 (/.f64 (-.f64 (sin.f64 x) (tan.f64 x)) #s(literal -1 binary64)) (tan.f64 x))))","fresh",29.419046685466345,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64))))","fresh",29.309145711810782,"binary64"],["(-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","done",29.51052881934276,"binary64"],["(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","fresh",14.26194209332735,"binary64"],["(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","fresh",22.517246479643884,"binary64"],["(*.f64 (/.f64 (-.f64 (sin.f64 x) (tan.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)))","fresh",30.482132587585145,"binary64"],["(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","fresh",30.370274549889245,"binary64"],["(*.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","next",0.4030838867581883,"binary64"],["(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","fresh",29.29640960474825,"binary64"],["(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","done",0.34611137698974626,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) x)))","fresh",32.4281363725834,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","fresh",32.54439066033749,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","fresh",32.564161162101044,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x))","next",32.55354361238525,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","done",32.35325248702361,"binary64"]],"compiler":[[23,14],[11,7],[3,4],[11,8],[12,9],[11,6],[18,11],[7,6],[12,9],[14,11],[7,6],[8,8],[9,7],[15,10],[11,8],[9,7],[14,10],[17,12],[15,9],[16,12],[11,8],[10,9],[4,4],[13,11],[26,16],[21,14],[16,12],[11,9],[23,14],[3,4],[11,8],[12,9],[11,6],[18,11],[12,9],[14,11],[7,6],[8,8],[9,7],[15,10],[11,8],[14,10],[17,12],[15,9],[16,12],[11,8],[10,9],[13,11],[26,16],[21,14],[16,12]],"count":[[1096,28]],"kept":[{"done":[1,1],"fresh":[19,7],"new":[1071,16],"picked":[5,4]}],"memory":[[-6467488,51443552]],"min-error":[[0.0,"binary64"]],"time":44.93994140625,"type":"prune"},{"egraph":[[0,8038,126,0.029886806],[10,7692,126,0.017724844],[9,7165,126,0.021383608],[8,6705,126,0.022588276],[7,6033,126,0.020555665],[6,4757,126,0.023326893],[5,2438,126,0.024717739],[4,681,126,0.018781471],[3,278,126,0.002747543],[2,155,126,0.001090538],[1,90,128,0.000882334],[0,58,139,0.000497329],[0,34,160,0.000468342]],"inputs":[["(*.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(sin.f64 (*.f64 x #s(literal 1/2 binary64)))","(*.f64 x #s(literal 1/2 binary64))","x","#s(literal 1/2 binary64)","(pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))","(cos.f64 (*.f64 x #s(literal 1/2 binary64)))","#s(literal -1 binary64)","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x)","(fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64))","(*.f64 x x)","x","#s(literal 1/24 binary64)","#s(literal 1/2 binary64)","(/.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(sin.f64 x)","x","(+.f64 (cos.f64 x) #s(literal 1 binary64))","(cos.f64 x)","#s(literal 1 binary64)","(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))","(-.f64 #s(literal -1 binary64) (cos.f64 x))","#s(literal -1 binary64)","(cos.f64 x)","x","(/.f64 #s(literal -1 binary64) (sin.f64 x))","(sin.f64 x)","(/.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64)))","(/.f64 (neg.f64 x) #s(literal 2 binary64))","(neg.f64 x)","x","#s(literal 2 binary64)","(*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(neg.f64 (sin.f64 x))","(sin.f64 x)","(pow.f64 (sin.f64 x) #s(literal -1 binary64))","#s(literal -1 binary64)"]],"locations":[["(tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64)))","cost-diff",0],["(/.f64 (neg.f64 x) #s(literal 2 binary64))","cost-diff",1],["(/.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","cost-diff",2],["(*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","cost-diff",7],["(cos.f64 x)","cost-diff",0],["(-.f64 #s(literal -1 binary64) (cos.f64 x))","cost-diff",0],["(pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))","cost-diff",0],["(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","cost-diff",7],["(cos.f64 x)","cost-diff",0],["(+.f64 (cos.f64 x) #s(literal 1 binary64))","cost-diff",0],["(sin.f64 x)","cost-diff",0],["(/.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","cost-diff",3],["(*.f64 x x)","cost-diff",0],["(fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64))","cost-diff",0],["(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x)","cost-diff",0],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x))","cost-diff",0],["(pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))","cost-diff",0],["(*.f64 x #s(literal 1/2 binary64))","cost-diff",0],["(sin.f64 (*.f64 x #s(literal 1/2 binary64)))","cost-diff",0],["(*.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","cost-diff",2]],"memory":[[1112592,16236384]],"method":["egg-herbie"],"outputs":[["(*.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(sin.f64 (*.f64 x #s(literal 1/2 binary64)))","(sin.f64 (*.f64 #s(literal 1/2 binary64) x))","(*.f64 x #s(literal 1/2 binary64))","(*.f64 #s(literal 1/2 binary64) x)","x","#s(literal 1/2 binary64)","(pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))","(pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))","(cos.f64 (*.f64 x #s(literal 1/2 binary64)))","(cos.f64 (*.f64 #s(literal 1/2 binary64) x))","#s(literal -1 binary64)","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) x))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x)","(*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) x)","(fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))","(*.f64 x x)","x","#s(literal 1/24 binary64)","#s(literal 1/2 binary64)","(/.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(tan.f64 (/.f64 x #s(literal 2 binary64)))","(sin.f64 x)","x","(+.f64 (cos.f64 x) #s(literal 1 binary64))","(-.f64 (cos.f64 x) #s(literal -1 binary64))","(cos.f64 x)","#s(literal 1 binary64)","(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(tan.f64 (/.f64 x #s(literal 2 binary64)))","(pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))","(-.f64 #s(literal -1 binary64) (cos.f64 x))","#s(literal -1 binary64)","(cos.f64 x)","x","(/.f64 #s(literal -1 binary64) (sin.f64 x))","(sin.f64 x)","(/.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(tan.f64 (/.f64 x #s(literal 2 binary64)))","(tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64)))","(tan.f64 (*.f64 #s(literal -1/2 binary64) x))","(/.f64 (neg.f64 x) #s(literal 2 binary64))","(*.f64 #s(literal -1/2 binary64) x)","(neg.f64 x)","x","#s(literal 2 binary64)","(*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","#s(literal -1 binary64)","(neg.f64 (sin.f64 x))","(sin.f64 x)","(pow.f64 (sin.f64 x) #s(literal -1 binary64))","#s(literal -1 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":240.02001953125,"type":"simplify"},{"compiler":[[155,34]],"locations":[["(pow.f64 (sin.f64 x) #s(literal -1 binary64))","accuracy",0.10546875],["(sin.f64 x)","accuracy",0.15529252930532603],["(*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","accuracy",0.21484375],["(tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64)))","accuracy",0.34611137698974626],["(cos.f64 x)","accuracy",0.13347626953688402],["(sin.f64 x)","accuracy",0.15529252930532603],["(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","accuracy",0.27734375],["(-.f64 #s(literal -1 binary64) (cos.f64 x))","accuracy",0.39984127026949584],["(cos.f64 x)","accuracy",0.13347626953688402],["(sin.f64 x)","accuracy",0.15529252930532603],["(/.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","accuracy",0.15625],["(+.f64 (cos.f64 x) #s(literal 1 binary64))","accuracy",0.39984127026949584],["(*.f64 x x)","accuracy",0.0],["(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x)","accuracy",0.0390625],["(fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64))","accuracy",0.08984375],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x))","accuracy",32.5535436122653],["(pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))","accuracy",0.11328125],["(sin.f64 (*.f64 x #s(literal 1/2 binary64)))","accuracy",0.15757753907376806],["(cos.f64 (*.f64 x #s(literal 1/2 binary64)))","accuracy",0.16310502930532605],["(*.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","accuracy",0.234375]],"memory":[[-793696,49069664]],"mixsample":[[16.122802734375,"ival-div",0],[10.31201171875,"adjust",800],[13.88427734375,"ival-cos",1600],[0.133544921875,"ival-assert",0],[5.605224609375,"ival-sub",0],[7.066162109375,"ival-tan",0],[16.3740234375,"ival-cos",0],[4.97607421875,"const",0],[1.586669921875,"ival-cos",400],[34.577880859375,"ival-pow",0],[5.915283203125,"adjust",2000],[3.7265625,"ival-add",0],[12.269287109375,"ival-mult",0],[16.60546875,"ival-sin",0],[4.58447265625,"ival-cos",3600],[0.96875,"adjust",2800],[0.2509765625,"ival-true",0],[0.65576171875,"exact",0],[2.666748046875,"ival-neg",0]],"outcomes":[[28.63134765625,1,"valid",43],[86.921142578125,2,"valid",63],[20.877197265625,3,"valid",15],[74.920166015625,0,"valid",135]],"time":242.27490234375,"type":"localize"},{"count":[[21,63]],"inputs":[["(*.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(sin.f64 (*.f64 x #s(literal 1/2 binary64)))","(*.f64 x #s(literal 1/2 binary64))","(pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x)","(fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64))","(*.f64 x x)","(/.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(sin.f64 x)","(+.f64 (cos.f64 x) #s(literal 1 binary64))","(cos.f64 x)","(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))","(-.f64 #s(literal -1 binary64) (cos.f64 x))","(*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (neg.f64 x) #s(literal 2 binary64))","(tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64)))","(cos.f64 (*.f64 x #s(literal 1/2 binary64)))","(pow.f64 (sin.f64 x) #s(literal -1 binary64))"]],"memory":[[-1771728,5756752]],"outputs":[["(* 1/2 x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(* x (+ 1/2 (* -1/48 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (- (* 1/3840 (pow x 2)) 1/48))))","(* x (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/3840 (* -1/645120 (pow x 2)))) 1/48))))","1","(+ 1 (* 1/8 (pow x 2)))","(+ 1 (* (pow x 2) (+ 1/8 (* 5/384 (pow x 2)))))","(+ 1 (* (pow x 2) (+ 1/8 (* (pow x 2) (+ 5/384 (* 61/46080 (pow x 2)))))))","1/2","(+ 1/2 (* 1/24 (pow x 2)))","(pow x 2)","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","2","(+ 2 (* -1/2 (pow x 2)))","(+ 2 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 2 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","-1/2","(- (* -1/8 (pow x 2)) 1/2)","(- (* (pow x 2) (- (* -1/48 (pow x 2)) 1/8)) 1/2)","(- (* (pow x 2) (- (* (pow x 2) (- (* -17/5760 (pow x 2)) 1/48)) 1/8)) 1/2)","-2","(- (* 1/2 (pow x 2)) 2)","(- (* (pow x 2) (+ 1/2 (* -1/24 (pow x 2)))) 2)","(- (* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))) 2)","-1","(* -1/2 x)","(* x (- (* -1/24 (pow x 2)) 1/2))","(* x (- (* (pow x 2) (- (* -1/240 (pow x 2)) 1/24)) 1/2))","(* x (- (* (pow x 2) (- (* (pow x 2) (- (* -17/40320 (pow x 2)) 1/240)) 1/24)) 1/2))","(+ 1 (* -1/8 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/384 (pow x 2)) 1/8)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/384 (* -1/46080 (pow x 2)))) 1/8)))","(/ 1 x)","(/ (+ 1 (* 1/6 (pow x 2))) x)","(/ (+ 1 (* (pow x 2) (+ 1/6 (* 7/360 (pow x 2))))) x)","(/ (+ 1 (* (pow x 2) (+ 1/6 (* (pow x 2) (+ 7/360 (* 31/15120 (pow x 2))))))) x)","(/ (sin (* 1/2 x)) (cos (* 1/2 x)))","(sin (* 1/2 x))","(/ 1 (cos (* 1/2 x)))","(/ (- 1 (cos x)) (sin x))","(* 1/24 (pow x 3))","(* (pow x 3) (+ 1/24 (* 1/2 (/ 1 (pow x 2)))))","(* 1/24 (pow x 2))","(* (pow x 2) (+ 1/24 (* 1/2 (/ 1 (pow x 2)))))","(/ (sin x) (+ 1 (cos x)))","(sin x)","(+ 1 (cos x))","(cos x)","(/ -1 (+ 1 (cos x)))","(* -1 (+ 1 (cos x)))","(* -1 (/ (sin (* -1/2 x)) (cos (* -1/2 x))))","(/ (sin (* -1/2 x)) (cos (* -1/2 x)))","(cos (* 1/2 x))","(/ 1 (sin x))"]],"series":[[6.06396484375,"((* (sin (* x 1/2)) (pow (cos (* x 1/2)) -1)) (sin (* x 1/2)) (* x 1/2) (pow (cos (* x 1/2)) -1) (/ (- 1 (cos x)) (sin x)) (* (+ (* (* x x) 1/24) 1/2) x) (+ (* (* x x) 1/24) 1/2) (* x x) (/ (sin x) (+ (cos x) 1)) (sin x) (+ (cos x) 1) (cos x) (/ (pow (- -1 (cos x)) -1) (/ -1 (sin x))) (pow (- -1 (cos x)) -1) (- -1 (cos x)) (* (neg (sin x)) (pow (sin x) -1)) (/ (tan (/ (neg x) 2)) (* (neg (sin x)) (pow (sin x) -1))) (/ (neg x) 2) (tan (/ (neg x) 2)) (cos (* x 1/2)) (pow (sin x) -1))","x","-inf"],[8.012939453125,"((* (sin (* x 1/2)) (pow (cos (* x 1/2)) -1)) (sin (* x 1/2)) (* x 1/2) (pow (cos (* x 1/2)) -1) (/ (- 1 (cos x)) (sin x)) (* (+ (* (* x x) 1/24) 1/2) x) (+ (* (* x x) 1/24) 1/2) (* x x) (/ (sin x) (+ (cos x) 1)) (sin x) (+ (cos x) 1) (cos x) (/ (pow (- -1 (cos x)) -1) (/ -1 (sin x))) (pow (- -1 (cos x)) -1) (- -1 (cos x)) (* (neg (sin x)) (pow (sin x) -1)) (/ (tan (/ (neg x) 2)) (* (neg (sin x)) (pow (sin x) -1))) (/ (neg x) 2) (tan (/ (neg x) 2)) (cos (* x 1/2)) (pow (sin x) -1))","x","inf"],[4.68701171875,"((* (sin (* x 1/2)) (pow (cos (* x 1/2)) -1)) (sin (* x 1/2)) (* x 1/2) (pow (cos (* x 1/2)) -1) (/ (- 1 (cos x)) (sin x)) (* (+ (* (* x x) 1/24) 1/2) x) (+ (* (* x x) 1/24) 1/2) (* x x) (/ (sin x) (+ (cos x) 1)) (sin x) (+ (cos x) 1) (cos x) (/ (pow (- -1 (cos x)) -1) (/ -1 (sin x))) (pow (- -1 (cos x)) -1) (- -1 (cos x)) (* (neg (sin x)) (pow (sin x) -1)) (/ (tan (/ (neg x) 2)) (* (neg (sin x)) (pow (sin x) -1))) (/ (neg x) 2) (tan (/ (neg x) 2)) (cos (* x 1/2)) (pow (sin x) -1))","x","0"]],"time":20.06005859375,"type":"series"},{"count":[[63,62]],"egraph":[[0,8649,508,0.079322993],[3,3444,577,0.026531865],[2,1204,577,0.013552109],[1,495,578,0.004624177],[0,195,584,0.002157144]],"inputs":[["(* 1/2 x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(* x (+ 1/2 (* -1/48 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (- (* 1/3840 (pow x 2)) 1/48))))","(* x (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/3840 (* -1/645120 (pow x 2)))) 1/48))))","1","(+ 1 (* 1/8 (pow x 2)))","(+ 1 (* (pow x 2) (+ 1/8 (* 5/384 (pow x 2)))))","(+ 1 (* (pow x 2) (+ 1/8 (* (pow x 2) (+ 5/384 (* 61/46080 (pow x 2)))))))","1/2","(+ 1/2 (* 1/24 (pow x 2)))","(pow x 2)","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","2","(+ 2 (* -1/2 (pow x 2)))","(+ 2 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 2 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","-1/2","(- (* -1/8 (pow x 2)) 1/2)","(- (* (pow x 2) (- (* -1/48 (pow x 2)) 1/8)) 1/2)","(- (* (pow x 2) (- (* (pow x 2) (- (* -17/5760 (pow x 2)) 1/48)) 1/8)) 1/2)","-2","(- (* 1/2 (pow x 2)) 2)","(- (* (pow x 2) (+ 1/2 (* -1/24 (pow x 2)))) 2)","(- (* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))) 2)","-1","(* -1/2 x)","(* x (- (* -1/24 (pow x 2)) 1/2))","(* x (- (* (pow x 2) (- (* -1/240 (pow x 2)) 1/24)) 1/2))","(* x (- (* (pow x 2) (- (* (pow x 2) (- (* -17/40320 (pow x 2)) 1/240)) 1/24)) 1/2))","(+ 1 (* -1/8 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/384 (pow x 2)) 1/8)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/384 (* -1/46080 (pow x 2)))) 1/8)))","(/ 1 x)","(/ (+ 1 (* 1/6 (pow x 2))) x)","(/ (+ 1 (* (pow x 2) (+ 1/6 (* 7/360 (pow x 2))))) x)","(/ (+ 1 (* (pow x 2) (+ 1/6 (* (pow x 2) (+ 7/360 (* 31/15120 (pow x 2))))))) x)","(/ (sin (* 1/2 x)) (cos (* 1/2 x)))","(sin (* 1/2 x))","(/ 1 (cos (* 1/2 x)))","(/ (- 1 (cos x)) (sin x))","(* 1/24 (pow x 3))","(* (pow x 3) (+ 1/24 (* 1/2 (/ 1 (pow x 2)))))","(* 1/24 (pow x 2))","(* (pow x 2) (+ 1/24 (* 1/2 (/ 1 (pow x 2)))))","(/ (sin x) (+ 1 (cos x)))","(sin x)","(+ 1 (cos x))","(cos x)","(/ -1 (+ 1 (cos x)))","(* -1 (+ 1 (cos x)))","(* -1 (/ (sin (* -1/2 x)) (cos (* -1/2 x))))","(/ (sin (* -1/2 x)) (cos (* -1/2 x)))","(cos (* 1/2 x))","(/ 1 (sin x))"]],"memory":[[1479040,36798544]],"method":["egg-herbie"],"outputs":[["(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64) (*.f64 #s(literal 1/2 binary64) x))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(fma.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal 1/240 binary64) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64) (*.f64 #s(literal 1/2 binary64) x)))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(fma.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (*.f64 x x) #s(literal 17/40320 binary64) #s(literal 1/240 binary64)) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64) (*.f64 #s(literal 1/2 binary64) x)))","(* x (+ 1/2 (* -1/48 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/48 binary64) (*.f64 #s(literal 1/2 binary64) x))","(* x (+ 1/2 (* (pow x 2) (- (* 1/3840 (pow x 2)) 1/48))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/3840 binary64) #s(literal -1/48 binary64)) (*.f64 #s(literal 1/2 binary64) x))","(* x (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/3840 (* -1/645120 (pow x 2)))) 1/48))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal -1/48 binary64)) (*.f64 #s(literal 1/2 binary64) x))","1","#s(literal 1 binary64)","(+ 1 (* 1/8 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (+ 1/8 (* 5/384 (pow x 2)))))","(fma.f64 (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal 5/384 binary64) #s(literal 1/8 binary64)) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (+ 1/8 (* (pow x 2) (+ 5/384 (* 61/46080 (pow x 2)))))))","(fma.f64 (*.f64 x x) (fma.f64 (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal 61/46080 binary64) #s(literal 5/384 binary64)) #s(literal 1/8 binary64)) #s(literal 1 binary64))","1/2","#s(literal 1/2 binary64)","(+ 1/2 (* 1/24 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64))","(pow x 2)","(*.f64 x x)","x","(* x (+ 1 (* -1/6 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/6 binary64) x)","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/120 binary64) #s(literal -1/6 binary64)) x)","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal -1/5040 binary64) #s(literal 1/120 binary64)) #s(literal -1/6 binary64)) x)","2","#s(literal 2 binary64)","(+ 2 (* -1/2 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 2 binary64))","(+ 2 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(+ 2 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (*.f64 x x) (fma.f64 (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (*.f64 x x) (fma.f64 (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) #s(literal -1/2 binary64)) #s(literal 1 binary64))","-1/2","#s(literal -1/2 binary64)","(- (* -1/8 (pow x 2)) 1/2)","(fma.f64 (*.f64 x x) #s(literal -1/8 binary64) #s(literal -1/2 binary64))","(- (* (pow x 2) (- (* -1/48 (pow x 2)) 1/8)) 1/2)","(fma.f64 (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal -1/48 binary64) #s(literal -1/8 binary64)) #s(literal -1/2 binary64))","(- (* (pow x 2) (- (* (pow x 2) (- (* -17/5760 (pow x 2)) 1/48)) 1/8)) 1/2)","(fma.f64 (*.f64 x x) (fma.f64 (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal -17/5760 binary64) #s(literal -1/48 binary64)) #s(literal -1/8 binary64)) #s(literal -1/2 binary64))","-2","#s(literal -2 binary64)","(- (* 1/2 (pow x 2)) 2)","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) x #s(literal -2 binary64))","(- (* (pow x 2) (+ 1/2 (* -1/24 (pow x 2)))) 2)","(fma.f64 (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)) #s(literal -2 binary64))","(- (* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))) 2)","(fma.f64 (*.f64 x x) (fma.f64 (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal 1/720 binary64) #s(literal -1/24 binary64)) #s(literal 1/2 binary64)) #s(literal -2 binary64))","-1","#s(literal -1 binary64)","(* -1/2 x)","(*.f64 #s(literal -1/2 binary64) x)","(* x (- (* -1/24 (pow x 2)) 1/2))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/24 binary64) (*.f64 #s(literal -1/2 binary64) x))","(* x (- (* (pow x 2) (- (* -1/240 (pow x 2)) 1/24)) 1/2))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/240 binary64) #s(literal -1/24 binary64)) (*.f64 #s(literal -1/2 binary64) x))","(* x (- (* (pow x 2) (- (* (pow x 2) (- (* -17/40320 (pow x 2)) 1/240)) 1/24)) 1/2))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal -17/40320 binary64) #s(literal -1/240 binary64)) #s(literal -1/24 binary64)) (*.f64 #s(literal -1/2 binary64) x))","(+ 1 (* -1/8 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal -1/8 binary64) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/384 (pow x 2)) 1/8)))","(fma.f64 (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal 1/384 binary64) #s(literal -1/8 binary64)) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/384 (* -1/46080 (pow x 2)))) 1/8)))","(fma.f64 (*.f64 x x) (fma.f64 (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal -1/46080 binary64) #s(literal 1/384 binary64)) #s(literal -1/8 binary64)) #s(literal 1 binary64))","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ (+ 1 (* 1/6 (pow x 2))) x)","(/.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal 1 binary64)) x)","(/ (+ 1 (* (pow x 2) (+ 1/6 (* 7/360 (pow x 2))))) x)","(/.f64 (fma.f64 (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal 7/360 binary64) #s(literal 1/6 binary64)) #s(literal 1 binary64)) x)","(/ (+ 1 (* (pow x 2) (+ 1/6 (* (pow x 2) (+ 7/360 (* 31/15120 (pow x 2))))))) x)","(/.f64 (fma.f64 (*.f64 x x) (fma.f64 (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal 31/15120 binary64) #s(literal 7/360 binary64)) #s(literal 1/6 binary64)) #s(literal 1 binary64)) x)","(/ (sin (* 1/2 x)) (cos (* 1/2 x)))","(/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(sin (* 1/2 x))","(sin.f64 (*.f64 #s(literal 1/2 binary64) x))","(/ 1 (cos (* 1/2 x)))","(/.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/ (- 1 (cos x)) (sin x))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(* 1/24 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64))","(* (pow x 3) (+ 1/24 (* 1/2 (/ 1 (pow x 2)))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64) (*.f64 #s(literal 1/2 binary64) x))","(* 1/24 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/24 binary64))","(* (pow x 2) (+ 1/24 (* 1/2 (/ 1 (pow x 2)))))","(fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64))","(/ (sin x) (+ 1 (cos x)))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(sin x)","(sin.f64 x)","(+ 1 (cos x))","(-.f64 (cos.f64 x) #s(literal -1 binary64))","(cos x)","(cos.f64 x)","(/ -1 (+ 1 (cos x)))","(/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(* -1 (+ 1 (cos x)))","(-.f64 #s(literal -1 binary64) (cos.f64 x))","(* -1 (/ (sin (* -1/2 x)) (cos (* -1/2 x))))","(/.f64 (neg.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x))) (cos.f64 (*.f64 #s(literal -1/2 binary64) x)))","(/ (sin (* -1/2 x)) (cos (* -1/2 x)))","(/.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) (cos.f64 (*.f64 #s(literal -1/2 binary64) x)))","(cos (* 1/2 x))","(cos.f64 (*.f64 #s(literal 1/2 binary64) x))","(/ 1 (sin x))","(/.f64 #s(literal 1 binary64) (sin.f64 x))"]],"stop":[["iter limit",1],["node limit",1]],"time":211.633056640625,"type":"simplify"},{"count":[[21,1918]],"egraph":[[0,8832,93,0.068225514],[2,1103,93,0.047644776],[1,193,93,0.007402273],[0,58,130,0.001828804],[0,34,132,0.000404708]],"inputs":[["(*.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(sin.f64 (*.f64 x #s(literal 1/2 binary64)))","(*.f64 x #s(literal 1/2 binary64))","(pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x)","(fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64))","(*.f64 x x)","(/.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(sin.f64 x)","(+.f64 (cos.f64 x) #s(literal 1 binary64))","(cos.f64 x)","(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))","(-.f64 #s(literal -1 binary64) (cos.f64 x))","(*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (neg.f64 x) #s(literal 2 binary64))","(tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64)))","(cos.f64 (*.f64 x #s(literal 1/2 binary64)))","(pow.f64 (sin.f64 x) #s(literal -1 binary64))"]],"memory":[[7842432,71514736]],"outputs":[["(*.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)))","(*.f64 (*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64))) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/4 binary64))) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/4 binary64)))","(*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 (sin.f64 x) (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)))","(*.f64 (*.f64 (sin.f64 x) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))))","(*.f64 (*.f64 (sin.f64 x) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)))) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (sin.f64 x)))","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal 1 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (/.f64 (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (*.f64 #s(literal 1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 (sin.f64 x) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(*.f64 (pow.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (sin.f64 x)))","(*.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (neg.f64 (sin.f64 x)) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (/.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64))) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)))","(*.f64 (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (sin.f64 x)))","(*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x)))))","(*.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))))","(*.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (sin.f64 x)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (sin.f64 x)))","(*.f64 (/.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 x)) (neg.f64 (sin.f64 x)))","(*.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (sin.f64 x))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (*.f64 (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (sin.f64 x)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64))","(*.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x))","(*.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) (neg.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))","(*.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) (/.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))","(*.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) (/.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))","(*.f64 (sin.f64 x) (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)))","(*.f64 (sin.f64 x) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 #s(literal -1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(pow.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))) (+.f64 #s(literal 0 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (*.f64 #s(literal 0 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))))))","(/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x))))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))) (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))) (neg.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (/.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 x))) (sin.f64 x))","(/.f64 (neg.f64 (*.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64))) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (*.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (sin.f64 x) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (*.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 2 binary64)))) (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (cos.f64 x))))","(/.f64 (*.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 3 binary64)))) (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (cos.f64 x))))))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (sin.f64 x))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (*.f64 #s(literal 1 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (*.f64 #s(literal -1 binary64) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64))))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64))))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (sin.f64 x) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (sin.f64 x) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (sin.f64 x) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (tan.f64 x)) (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x)))","(/.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (sin.f64 x) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 x))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (tan.f64 x)) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 x)))","(/.f64 (-.f64 #s(literal 0 binary64) (sin.f64 (neg.f64 x))) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (/.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(/.f64 (*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 x)) (neg.f64 (sin.f64 x)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (/.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (*.f64 (sin.f64 x) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (sin.f64 x) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64))","(/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) (*.f64 (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64))","(/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 (sin.f64 x) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(/.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))) (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sin.f64 x) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (sin.f64 x)) (*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (sin.f64 (*.f64 #s(literal -1/2 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))) (sin.f64 (*.f64 #s(literal -1/2 binary64) x))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 (sin.f64 x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (sin.f64 x))))","(/.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (neg.f64 (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))","(/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (neg.f64 (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(neg.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(fma.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 0 binary64) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(fma.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))) (/.f64 (pow.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))) (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (sin.f64 x) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(-.f64 (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x))) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(-.f64 #s(literal 0 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(+.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(+.f64 (*.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (*.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(+.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 0 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 #s(literal 0 binary64) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 #s(literal -1 binary64) (sin.f64 (*.f64 #s(literal -1/2 binary64) x)))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64))","(neg.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)))","(sin.f64 (*.f64 #s(literal 1/2 binary64) x))","(-.f64 #s(literal 0 binary64) (sin.f64 (*.f64 #s(literal -1/2 binary64) x)))","(*.f64 #s(literal -1/2 binary64) (neg.f64 x))","(*.f64 (neg.f64 x) #s(literal -1/2 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal -1 binary64) (*.f64 #s(literal -1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","(*.f64 x #s(literal 1/2 binary64))","(pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal -1 binary64))","(/.f64 (neg.f64 x) #s(literal -2 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) x))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -2 binary64) x))","(/.f64 x #s(literal 2 binary64))","(neg.f64 (*.f64 #s(literal -1/2 binary64) x))","(-.f64 #s(literal 0 binary64) (*.f64 #s(literal -1/2 binary64) x))","(*.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/4 binary64))) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/4 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64))) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/4 binary64)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64))))","(*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(pow.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(neg.f64 (/.f64 #s(literal -1 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(exp.f64 (fma.f64 (log.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1/2 binary64) (*.f64 (log.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1/2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64))) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64))) #s(literal 2 binary64)))","(exp.f64 (neg.f64 (log.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) x))","(*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 1 binary64)) x)","(*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (neg.f64 x))","(*.f64 (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/48 binary64) (*.f64 x x)))) #s(literal -1 binary64)))","(*.f64 (*.f64 x (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64))) (pow.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64))) (pow.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/48 binary64) (*.f64 x x)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal -1 binary64)) x))","(*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)) (*.f64 (pow.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/48 binary64) (*.f64 x x)))) #s(literal -1 binary64)) x))","(*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) x)","(*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) x))","(*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))))","(*.f64 x (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64)) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64))) (*.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 #s(literal 1/2 binary64) x))) (-.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64)) (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 #s(literal 1/2 binary64) x)) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64)) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64)))) (-.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64))))","(/.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64))) (fma.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64)) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64)) (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 #s(literal 1/2 binary64) x)) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64)) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64)) (pow.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 #s(literal 1/2 binary64) x) (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64)) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64))) (*.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64)) x)) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)) x)) (neg.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/48 binary64) (*.f64 x x))))))","(/.f64 (neg.f64 (*.f64 x (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64)))) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)))","(/.f64 (neg.f64 (*.f64 x (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/48 binary64) (*.f64 x x))))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64)) x) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)))","(/.f64 (*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)) x) (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/48 binary64) (*.f64 x x)))))","(/.f64 (*.f64 x (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64))) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)))","(/.f64 (*.f64 x (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64))) (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/48 binary64) (*.f64 x x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/48 binary64) (*.f64 x x)))) (*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/48 binary64) (*.f64 x x)))) (*.f64 x (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)))))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))))","(neg.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (neg.f64 x)))","(neg.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))))","(fma.f64 (*.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) #s(literal 1 binary64)) x (*.f64 #s(literal 1/2 binary64) x))","(fma.f64 (*.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) #s(literal -1 binary64)) (neg.f64 x) (*.f64 #s(literal 1/2 binary64) x))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64) (*.f64 #s(literal 1/2 binary64) x))","(fma.f64 (*.f64 #s(literal 1/24 binary64) x) (*.f64 x x) (*.f64 #s(literal 1/2 binary64) x))","(fma.f64 #s(literal -1/2 binary64) (neg.f64 x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64)))","(fma.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) x (*.f64 #s(literal 1/2 binary64) x))","(fma.f64 (neg.f64 x) #s(literal -1/2 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64)))","(fma.f64 #s(literal 1/24 binary64) (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1/2 binary64) x))","(fma.f64 (*.f64 x x) (*.f64 #s(literal 1/24 binary64) x) (*.f64 #s(literal 1/2 binary64) x))","(fma.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64)) (*.f64 #s(literal 1/2 binary64) x))","(fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64)))","(fma.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 x x))) (*.f64 #s(literal 1/2 binary64) x))","(fma.f64 #s(literal -1 binary64) (*.f64 #s(literal -1/2 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64)))","(fma.f64 #s(literal 1/2 binary64) x (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64)))","(fma.f64 x (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) (*.f64 #s(literal 1/2 binary64) x))","(fma.f64 x #s(literal 1/2 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64)))","(+.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64)) (*.f64 #s(literal 1/2 binary64) x))","(+.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64)))","(*.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/24 binary64) (*.f64 x x)))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/48 binary64) (*.f64 x x)))))))","(*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64)) (pow.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (*.f64 x x) #s(literal -1/48 binary64))))))","(*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)) (pow.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/48 binary64) (*.f64 x x)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)))) (*.f64 (/.f64 #s(literal -1/4 binary64) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))) (/.f64 #s(literal -1/4 binary64) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))))) (+.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1/4 binary64) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal -1/4 binary64) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) (fma.f64 (/.f64 #s(literal -1/4 binary64) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))) (/.f64 #s(literal -1/4 binary64) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1/4 binary64) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/24 binary64) (*.f64 x x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64)))) (neg.f64 (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/48 binary64) (*.f64 x x)))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) #s(literal 4 binary64)) #s(literal 1/16 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/191102976 binary64) (pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 3 binary64)) #s(literal -1/64 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) #s(literal 4 binary64)) #s(literal 1/16 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2304 binary64))) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/191102976 binary64) (pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 3 binary64)) #s(literal -1/64 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/8 binary64)) (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/48 binary64) (*.f64 x x))))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/2641807540224 binary64) (pow.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 3 binary64)) #s(literal 1/512 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/191102976 binary64) (pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 3 binary64)) (-.f64 #s(literal 1/64 binary64) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/110592 binary64)))) (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/48 binary64) (*.f64 x x))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 1/4 binary64))) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/24 binary64) (*.f64 x x))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64))) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64))) (neg.f64 (+.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (*.f64 x x) #s(literal -1/48 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64))) (neg.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/48 binary64) (*.f64 x x))))))","(/.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64)) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)))","(/.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)) (+.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))))","(/.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)) (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/48 binary64) (*.f64 x x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/24 binary64) (*.f64 x x))) (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64))) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64))) (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/48 binary64) (*.f64 x x))))))","(neg.f64 (/.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64)) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))))","(neg.f64 (/.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)) (neg.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/48 binary64) (*.f64 x x)))))))","(fma.f64 (*.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 1 binary64)) x #s(literal 1/2 binary64))","(fma.f64 (*.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1 binary64)) (neg.f64 x) #s(literal 1/2 binary64))","(fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal 1/2 binary64))","(fma.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal -1/4 binary64) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)))))","(fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))","(fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) #s(literal 1/2 binary64))","(fma.f64 #s(literal -1 binary64) (*.f64 #s(literal -1/24 binary64) (*.f64 x x)) #s(literal 1/2 binary64))","(fma.f64 x (*.f64 #s(literal 1/24 binary64) x) #s(literal 1/2 binary64))","(-.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/24 binary64) (*.f64 x x)))) (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/24 binary64) (*.f64 x x)))))","(-.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1/4 binary64) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))))","(+.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) (neg.f64 (/.f64 #s(literal -1/4 binary64) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)))))","(+.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) #s(literal 1/2 binary64))","(+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/24 binary64) (*.f64 x x)))","(*.f64 (exp.f64 (log.f64 x)) (exp.f64 (log.f64 x)))","(*.f64 (neg.f64 x) (neg.f64 x))","(*.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 x) #s(literal 2 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 x x))","(*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) x))","(*.f64 x x)","(pow.f64 (exp.f64 (log.f64 x)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1 binary64))","(pow.f64 x #s(literal 2 binary64))","(neg.f64 (*.f64 x (neg.f64 x)))","(neg.f64 (*.f64 (neg.f64 x) x))","(exp.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)))","(*.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)))","(*.f64 (*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64))) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/4 binary64))) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/4 binary64)))","(*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 (sin.f64 x) (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)))","(*.f64 (*.f64 (sin.f64 x) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))))","(*.f64 (*.f64 (sin.f64 x) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)))) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (sin.f64 x)))","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal 1 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (/.f64 (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (*.f64 #s(literal 1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 (sin.f64 x) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(*.f64 (pow.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (sin.f64 x)))","(*.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (neg.f64 (sin.f64 x)) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (/.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64))) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)))","(*.f64 (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (sin.f64 x)))","(*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x)))))","(*.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))))","(*.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (sin.f64 x)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (sin.f64 x)))","(*.f64 (/.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 x)) (neg.f64 (sin.f64 x)))","(*.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (sin.f64 x))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (*.f64 (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (sin.f64 x)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64))","(*.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x))","(*.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) (neg.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))","(*.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) (/.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))","(*.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) (/.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))","(*.f64 (sin.f64 x) (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)))","(*.f64 (sin.f64 x) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 #s(literal -1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(pow.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))) (+.f64 #s(literal 0 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (*.f64 #s(literal 0 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))))))","(/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x))))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))) (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))) (neg.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (/.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 x))) (sin.f64 x))","(/.f64 (neg.f64 (*.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64))) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (*.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (sin.f64 x) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (*.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 2 binary64)))) (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (cos.f64 x))))","(/.f64 (*.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 3 binary64)))) (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (cos.f64 x))))))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (sin.f64 x))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (*.f64 #s(literal 1 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (*.f64 #s(literal -1 binary64) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64))))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64))))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (sin.f64 x) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (sin.f64 x) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (sin.f64 x) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (tan.f64 x)) (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x)))","(/.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (sin.f64 x) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 x))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (tan.f64 x)) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 x)))","(/.f64 (-.f64 #s(literal 0 binary64) (sin.f64 (neg.f64 x))) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (/.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(/.f64 (*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 x)) (neg.f64 (sin.f64 x)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (/.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (*.f64 (sin.f64 x) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (sin.f64 x) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64))","(/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) (*.f64 (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64))","(/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 (sin.f64 x) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(/.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))) (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sin.f64 x) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (sin.f64 x)) (*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (sin.f64 (*.f64 #s(literal -1/2 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))) (sin.f64 (*.f64 #s(literal -1/2 binary64) x))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 (sin.f64 x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (sin.f64 x))))","(/.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (neg.f64 (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))","(/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (neg.f64 (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(neg.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(fma.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 0 binary64) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(fma.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))) (/.f64 (pow.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))) (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (sin.f64 x) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(-.f64 (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x))) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(-.f64 #s(literal 0 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(+.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(+.f64 (*.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (*.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(+.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 0 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 #s(literal 0 binary64) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (*.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (*.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))","(*.f64 (sin.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (sin.f64 x))","(*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x)))","(pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal -2 binary64))","(pow.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (sin.f64 x) #s(literal 1 binary64))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 0 binary64))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal 2 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 2 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (sin.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (sin.f64 x))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))","(/.f64 (sin.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(neg.f64 (sin.f64 (neg.f64 x)))","(neg.f64 (neg.f64 (sin.f64 x)))","(sin.f64 x)","(-.f64 (*.f64 #s(literal 0 binary64) (cos.f64 x)) (*.f64 #s(literal 1 binary64) (sin.f64 (neg.f64 x))))","(-.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x)))","(exp.f64 (neg.f64 (neg.f64 (log.f64 (sin.f64 x)))))","(exp.f64 (log.f64 (sin.f64 x)))","(+.f64 #s(literal 0 binary64) (sin.f64 x))","(*.f64 (/.f64 (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 2 binary64) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(pow.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))) (*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 (cos.f64 x)) #s(literal 3 binary64))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (fma.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (neg.f64 (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))","(/.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(neg.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(fma.f64 (/.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (neg.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64) #s(literal 1 binary64))","(fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (cos.f64 x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (cos.f64 x) #s(literal 1 binary64))","(fma.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)) #s(literal 1 binary64))","(-.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(-.f64 (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(-.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(-.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)))","(+.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (cos.f64 x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (cos.f64 x))","(*.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64))","(*.f64 (cos.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (cos.f64 x))","(*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)))","(neg.f64 (neg.f64 (cos.f64 x)))","(fma.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64) (*.f64 #s(literal 0 binary64) (sin.f64 (neg.f64 x))))","(fma.f64 (cos.f64 x) #s(literal 1 binary64) (*.f64 #s(literal 0 binary64) (sin.f64 (neg.f64 x))))","(fma.f64 #s(literal 1 binary64) (cos.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 (neg.f64 x))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)) (*.f64 #s(literal 0 binary64) (sin.f64 (neg.f64 x))))","(-.f64 #s(literal 0 binary64) (neg.f64 (cos.f64 x)))","(cos.f64 (neg.f64 x))","(cos.f64 x)","(+.f64 (cos.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 (neg.f64 x))))","(*.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)))","(*.f64 (*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64))) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/4 binary64))) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/4 binary64)))","(*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 (sin.f64 x) (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)))","(*.f64 (*.f64 (sin.f64 x) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))))","(*.f64 (*.f64 (sin.f64 x) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)))) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (sin.f64 x)))","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal 1 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (/.f64 (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (*.f64 #s(literal 1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 (sin.f64 x) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(*.f64 (pow.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (sin.f64 x)))","(*.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (neg.f64 (sin.f64 x)) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (/.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64))) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)))","(*.f64 (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (sin.f64 x)))","(*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x)))))","(*.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))))","(*.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (sin.f64 x)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (sin.f64 x)))","(*.f64 (/.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 x)) (neg.f64 (sin.f64 x)))","(*.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (sin.f64 x))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (*.f64 (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (sin.f64 x)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64))","(*.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x))","(*.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) (neg.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))","(*.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) (/.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))","(*.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) (/.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))","(*.f64 (sin.f64 x) (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)))","(*.f64 (sin.f64 x) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 #s(literal -1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(pow.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))) (+.f64 #s(literal 0 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (*.f64 #s(literal 0 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))))))","(/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x))))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))) (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))) (neg.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (/.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 x))) (sin.f64 x))","(/.f64 (neg.f64 (*.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64))) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (*.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (sin.f64 x) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (*.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 2 binary64)))) (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (cos.f64 x))))","(/.f64 (*.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 3 binary64)))) (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (cos.f64 x))))))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (sin.f64 x))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (*.f64 #s(literal 1 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (*.f64 #s(literal -1 binary64) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64))))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64))))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (sin.f64 x) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (sin.f64 x) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (sin.f64 x) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (tan.f64 x)) (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x)))","(/.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (sin.f64 x) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 x))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (tan.f64 x)) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 x)))","(/.f64 (-.f64 #s(literal 0 binary64) (sin.f64 (neg.f64 x))) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (/.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(/.f64 (*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 x)) (neg.f64 (sin.f64 x)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (/.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (*.f64 (sin.f64 x) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (sin.f64 x) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64))","(/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) (*.f64 (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64))","(/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 (sin.f64 x) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(/.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))) (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sin.f64 x) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (sin.f64 x)) (*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (sin.f64 (*.f64 #s(literal -1/2 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))) (sin.f64 (*.f64 #s(literal -1/2 binary64) x))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 (sin.f64 x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (sin.f64 x))))","(/.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (neg.f64 (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))","(/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (neg.f64 (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(neg.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(fma.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 0 binary64) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(fma.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))) (/.f64 (pow.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))) (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (sin.f64 x) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(-.f64 (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x))) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(-.f64 #s(literal 0 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(+.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(+.f64 (*.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (*.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(+.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 0 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 #s(literal 0 binary64) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(*.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/4 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/4 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)))","(*.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (neg.f64 (pow.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (neg.f64 (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (pow.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/4 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)))","(*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (cos.f64 x)))))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (-.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))))","(/.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 #s(literal -1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(neg.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal 2 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(fma.f64 (-.f64 #s(literal 2 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x)))","(fma.f64 (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(fma.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(exp.f64 (fma.f64 (log.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x))) #s(literal -1/2 binary64) (*.f64 (log.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x))) #s(literal -1/2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x))) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 2 binary64))) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) #s(literal 2 binary64)))","(exp.f64 (neg.f64 (log.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)))))","(+.f64 (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (*.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(+.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(+.f64 (*.f64 (-.f64 #s(literal 2 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(+.f64 (*.f64 (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(+.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x)))","(+.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal 2 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(+.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(+.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(+.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(*.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 1 binary64))","(*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))","(*.f64 (sin.f64 x) (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(*.f64 #s(literal -1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -2 binary64))","(pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))) (*.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))) (+.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))))) (+.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 2 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (fma.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))))","(/.f64 (-.f64 (pow.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 2 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (neg.f64 (cos.f64 x)) #s(literal 3 binary64))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (exp.f64 (log.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (exp.f64 (log.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (exp.f64 (log.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (exp.f64 (log1p.f64 (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 1 binary64))","(/.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(neg.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(fma.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 (cos.f64 x) #s(literal -1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(fma.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)) #s(literal -1 binary64))","(fma.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(fma.f64 #s(literal -1 binary64) (cos.f64 x) #s(literal -1 binary64))","(-.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(-.f64 (/.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal 1 binary64)))","(-.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(-.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(-.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64))","(-.f64 #s(literal 0 binary64) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(-.f64 #s(literal -1 binary64) (/.f64 (cos.f64 x) #s(literal 1 binary64)))","(-.f64 #s(literal -1 binary64) (cos.f64 x))","(exp.f64 (neg.f64 (neg.f64 (log.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x))))))","(exp.f64 (log.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(+.f64 (-.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(+.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(+.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(+.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64))","(+.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(+.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)))","#s(literal -1 binary64)","(*.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)))","(*.f64 (*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64))) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/4 binary64))) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/4 binary64)))","(*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 (sin.f64 x) (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)))","(*.f64 (*.f64 (sin.f64 x) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))))","(*.f64 (*.f64 (sin.f64 x) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)))) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (sin.f64 x)))","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal 1 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (/.f64 (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (*.f64 #s(literal 1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 (sin.f64 x) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(*.f64 (pow.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (sin.f64 x)))","(*.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (neg.f64 (sin.f64 x)) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (/.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64))) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)))","(*.f64 (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (sin.f64 x)))","(*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x)))))","(*.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))))","(*.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (sin.f64 x)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (sin.f64 x)))","(*.f64 (/.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 x)) (neg.f64 (sin.f64 x)))","(*.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (sin.f64 x))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (*.f64 (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (sin.f64 x)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64))","(*.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x))","(*.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) (neg.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))","(*.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) (/.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))","(*.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) (/.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))","(*.f64 (sin.f64 x) (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)))","(*.f64 (sin.f64 x) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 #s(literal -1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(pow.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))) (+.f64 #s(literal 0 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (*.f64 #s(literal 0 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))))))","(/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x))))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))) (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))) (neg.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (/.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 x))) (sin.f64 x))","(/.f64 (neg.f64 (*.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64))) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (*.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (sin.f64 x) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (*.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 2 binary64)))) (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (cos.f64 x))))","(/.f64 (*.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 3 binary64)))) (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (cos.f64 x))))))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (sin.f64 x))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (*.f64 #s(literal 1 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (*.f64 #s(literal -1 binary64) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64))))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64))))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (sin.f64 x) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (sin.f64 x) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (sin.f64 x) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (tan.f64 x)) (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x)))","(/.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (sin.f64 x) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 x))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (tan.f64 x)) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 x)))","(/.f64 (-.f64 #s(literal 0 binary64) (sin.f64 (neg.f64 x))) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (/.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(/.f64 (*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 x)) (neg.f64 (sin.f64 x)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (/.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (*.f64 (sin.f64 x) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (sin.f64 x) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64))","(/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) (*.f64 (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64))","(/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 (sin.f64 x) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(/.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))) (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sin.f64 x) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (sin.f64 x)) (*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (sin.f64 (*.f64 #s(literal -1/2 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))) (sin.f64 (*.f64 #s(literal -1/2 binary64) x))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 (sin.f64 x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (sin.f64 x))))","(/.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (neg.f64 (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))","(/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (neg.f64 (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(neg.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(fma.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 0 binary64) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(fma.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))) (/.f64 (pow.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))) (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (sin.f64 x) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(-.f64 (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x))) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(-.f64 #s(literal 0 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(+.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(+.f64 (*.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (*.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(+.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 0 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 #s(literal 0 binary64) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(*.f64 (pow.f64 (/.f64 #s(literal -2 binary64) x) #s(literal -1/2 binary64)) (pow.f64 (/.f64 #s(literal -2 binary64) x) #s(literal -1/2 binary64)))","(*.f64 #s(literal -1/2 binary64) x)","(*.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal -1 binary64))","(*.f64 (neg.f64 x) #s(literal 1/2 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 #s(literal -1/2 binary64) x))","(*.f64 #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)))","(*.f64 #s(literal 1/2 binary64) (neg.f64 x))","(*.f64 x #s(literal -1/2 binary64))","(pow.f64 (/.f64 #s(literal -2 binary64) x) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 #s(literal 1/2 binary64) x))) (+.f64 #s(literal 0 binary64) (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 #s(literal 1/2 binary64) x) (*.f64 #s(literal 0 binary64) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (neg.f64 x) #s(literal 2 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal -2 binary64) x))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal 2 binary64) x))","(/.f64 x #s(literal -2 binary64))","(neg.f64 (*.f64 #s(literal 1/2 binary64) x))","(-.f64 #s(literal 0 binary64) (*.f64 #s(literal 1/2 binary64) x))","(exp.f64 (*.f64 (log.f64 (/.f64 #s(literal -2 binary64) x)) #s(literal -1 binary64)))","(+.f64 #s(literal 0 binary64) (*.f64 #s(literal -1/2 binary64) x))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64))) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)))","(*.f64 (neg.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(*.f64 (neg.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)))) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)))","(*.f64 (neg.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (sin.f64 x)))","(*.f64 (neg.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (neg.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal 1 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (/.f64 (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (sin.f64 x)))","(*.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) #s(literal 1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(*.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (sin.f64 x)) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64)) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (sin.f64 x)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (sin.f64 x)))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (neg.f64 (sin.f64 x)) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (sin.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (/.f64 (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64))) (neg.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64))))","(*.f64 (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (sin.f64 x) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(*.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (sin.f64 x)) (/.f64 (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (/.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 x)) (sin.f64 x))","(*.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (neg.f64 (sin.f64 x)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (sin.f64 x)))","(*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)) (neg.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))","(*.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))","(*.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal 1 binary64))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (sin.f64 x))","(*.f64 (sin.f64 x) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (sin.f64 (*.f64 #s(literal -1/2 binary64) x)))","(*.f64 #s(literal -1 binary64) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (neg.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(pow.f64 (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (neg.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (neg.f64 (/.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(/.f64 (neg.f64 (*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 x))) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 (*.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64))) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (+.f64 #s(literal 0 binary64) (sin.f64 (neg.f64 x))) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (/.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(/.f64 (*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 x)) (sin.f64 x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))))","(/.f64 (/.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (sin.f64 x) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (*.f64 (sin.f64 x) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))","(/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) (neg.f64 (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))","(/.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) (neg.f64 (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal 1 binary64))","(/.f64 (neg.f64 (sin.f64 x)) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(neg.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(fma.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (neg.f64 (sin.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (neg.f64 (sin.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (sin.f64 x) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(tan.f64 (*.f64 #s(literal -1/2 binary64) x))","(-.f64 (/.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (sin.f64 x))))","(-.f64 (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (sin.f64 x))))","(-.f64 (/.f64 #s(literal 0 binary64) (sin.f64 x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(-.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(exp.f64 (-.f64 (neg.f64 (log.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)))) (neg.f64 (log.f64 (sin.f64 x)))))","(+.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64))","(/.f64 (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 #s(literal 0 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))","(cos.f64 (*.f64 #s(literal 1/2 binary64) x))","(cos.f64 (*.f64 #s(literal -1/2 binary64) x))","(exp.f64 (log.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(+.f64 (*.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) x))) (*.f64 #s(literal 0 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(*.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(*.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/4 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64))","(*.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (sin.f64 x)))","(pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (sin.f64 x) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (+.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x))))))","(/.f64 (neg.f64 (sin.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 #s(literal 1 binary64) (sin.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x)))","(neg.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(exp.f64 (fma.f64 (log.f64 (sin.f64 x)) #s(literal -1/2 binary64) (*.f64 (log.f64 (sin.f64 x)) #s(literal -1/2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (sin.f64 x)) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)))","(exp.f64 (neg.f64 (log.f64 (sin.f64 x))))","(+.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":263.27587890625,"type":"rewrite"},{"compiler":[[22070,3133]],"memory":[[-2047248,104200912]],"time":196.6630859375,"type":"eval"},{"alts":[["(fma.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","done",29.307571931838016,"binary64"],["(pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))","fresh",59.0843567212142,"binary64"],["(/.f64 (/.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","fresh",0.45092271722105226,"binary64"],["(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","next",0.6512268554423705,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","fresh",29.341552730628777,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","done",29.310971754888417,"binary64"],["(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))) (+.f64 #s(literal 0 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))))","fresh",14.088377501436998,"binary64"],["(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","fresh",30.3192244398209,"binary64"],["(/.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","done",0.5264218091936519,"binary64"],["(/.f64 (sin.f64 x) (*.f64 #s(literal 2 binary64) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64))))","next",0.3855439453688405,"binary64"],["(/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","next",0.4535714356003984,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","fresh",0.6215265074886769,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64))))","fresh",29.309145711810782,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (sin.f64 x)) (*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 x))))","fresh",14.131545714109395,"binary64"],["(-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","done",29.51052881934276,"binary64"],["(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","fresh",22.517246479643884,"binary64"],["(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","fresh",29.29640960474825,"binary64"],["(*.f64 (*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","fresh",14.118205723877875,"binary64"],["(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","next",30.329486166463504,"binary64"],["(*.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","fresh",15.462928808610652,"binary64"],["(*.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (/.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","fresh",0.4030838867581883,"binary64"],["(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","done",0.34611137698974626,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (fma.f64 (*.f64 x x) (*.f64 #s(literal 1/24 binary64) x) (*.f64 #s(literal 1/2 binary64) x)))","next",32.5535436122653,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) x)))","fresh",32.4281363725834,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","fresh",32.54439066033749,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","fresh",32.564161162101044,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x))","done",32.55354361238525,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","done",32.35325248702361,"binary64"]],"compiler":[[11,7],[3,4],[12,9],[11,9],[18,11],[7,6],[18,9],[12,9],[7,6],[11,9],[8,8],[9,7],[11,8],[13,10],[9,7],[17,12],[9,8],[12,9],[13,10],[13,11],[11,9],[4,4],[18,13],[13,11],[26,16],[21,14],[16,12],[11,9],[3,4],[12,9],[11,9],[18,11],[18,9],[12,9],[11,9],[8,8],[9,7],[11,8],[13,10],[17,12],[9,8],[12,9],[13,10],[13,11],[11,9],[18,13],[13,11],[26,16],[21,14]],"count":[[1162,28]],"kept":[{"done":[5,5],"fresh":[18,9],"new":[1134,12],"picked":[5,2]}],"memory":[[2086032,53719680]],"min-error":[[0.0,"binary64"]],"time":38.94189453125,"type":"prune"},{"egraph":[[0,9088,142,0.047966574],[11,7885,144,0.057006465],[10,7854,144,0.02490139],[9,7697,144,0.023628866],[8,7445,144,0.027417368],[7,6119,144,0.028268121],[6,3437,144,0.024022209],[5,1428,144,0.022347223],[4,713,150,0.007512629],[3,387,152,0.002715641],[2,181,152,0.001853741],[1,97,158,0.000733319],[0,59,160,0.00053867],[0,35,173,0.00036553]],"inputs":[["(/.f64 (sin.f64 x) (*.f64 #s(literal 2 binary64) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64))))","(sin.f64 x)","x","(*.f64 #s(literal 2 binary64) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)))","#s(literal 2 binary64)","(pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64))","(cos.f64 (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","#s(approx (/ (- 1 (cos x)) (sin x)) (fma.f64 (*.f64 x x) (*.f64 #s(literal 1/24 binary64) x) (*.f64 #s(literal 1/2 binary64) x)))","(fma.f64 (*.f64 x x) (*.f64 #s(literal 1/24 binary64) x) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 x x)","x","(*.f64 #s(literal 1/24 binary64) x)","#s(literal 1/24 binary64)","(*.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","(/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","#s(literal 1 binary64)","(pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))","(tan.f64 (*.f64 x #s(literal 1/2 binary64)))","(*.f64 x #s(literal 1/2 binary64))","x","#s(literal 1/2 binary64)","#s(literal -1 binary64)","(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","#s(literal 1 binary64)","(-.f64 #s(literal -1 binary64) (cos.f64 x))","#s(literal -1 binary64)","(cos.f64 x)","x","(/.f64 #s(literal -1 binary64) (sin.f64 x))","(sin.f64 x)","(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(neg.f64 (sin.f64 x))","(sin.f64 x)","x","(pow.f64 (sin.f64 x) #s(literal -2 binary64))","#s(literal -2 binary64)","(-.f64 (cos.f64 x) #s(literal 1 binary64))","(cos.f64 x)","#s(literal 1 binary64)"]],"locations":[["(sin.f64 x)","cost-diff",0],["(neg.f64 (sin.f64 x))","cost-diff",0],["(*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","cost-diff",4],["(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","cost-diff",5],["(cos.f64 x)","cost-diff",0],["(-.f64 #s(literal -1 binary64) (cos.f64 x))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","cost-diff",0],["(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","cost-diff",7],["(*.f64 x #s(literal 1/2 binary64))","cost-diff",0],["(tan.f64 (*.f64 x #s(literal 1/2 binary64)))","cost-diff",0],["(pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","cost-diff",4],["(*.f64 #s(literal 1/24 binary64) x)","cost-diff",0],["(*.f64 x x)","cost-diff",0],["#s(approx (/ (- 1 (cos x)) (sin x)) (fma.f64 (*.f64 x x) (*.f64 #s(literal 1/24 binary64) x) (*.f64 #s(literal 1/2 binary64) x)))","cost-diff",0],["(fma.f64 (*.f64 x x) (*.f64 #s(literal 1/24 binary64) x) (*.f64 #s(literal 1/2 binary64) x))","cost-diff",2],["(pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64))","cost-diff",0],["(*.f64 #s(literal 2 binary64) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)))","cost-diff",0],["(sin.f64 x)","cost-diff",0],["(/.f64 (sin.f64 x) (*.f64 #s(literal 2 binary64) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64))))","cost-diff",0]],"memory":[[-14653760,19441648]],"method":["egg-herbie"],"outputs":[["(/.f64 (sin.f64 x) (*.f64 #s(literal 2 binary64) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (sin.f64 x)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)))","(sin.f64 x)","x","(*.f64 #s(literal 2 binary64) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)))","(*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)) #s(literal 2 binary64))","#s(literal 2 binary64)","(pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64))","(cos.f64 (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","#s(approx (/ (- 1 (cos x)) (sin x)) (fma.f64 (*.f64 x x) (*.f64 #s(literal 1/24 binary64) x) (*.f64 #s(literal 1/2 binary64) x)))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal 1/2 binary64)) x))","(fma.f64 (*.f64 x x) (*.f64 #s(literal 1/24 binary64) x) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal 1/2 binary64)) x)","(*.f64 x x)","x","(*.f64 #s(literal 1/24 binary64) x)","#s(literal 1/24 binary64)","(*.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","(/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","#s(literal 1 binary64)","(pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))","(pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))","(tan.f64 (*.f64 x #s(literal 1/2 binary64)))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(*.f64 x #s(literal 1/2 binary64))","(*.f64 #s(literal 1/2 binary64) x)","x","#s(literal 1/2 binary64)","#s(literal -1 binary64)","(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(tan.f64 (/.f64 x #s(literal 2 binary64)))","(/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","#s(literal 1 binary64)","(-.f64 #s(literal -1 binary64) (cos.f64 x))","#s(literal -1 binary64)","(cos.f64 x)","x","(/.f64 #s(literal -1 binary64) (sin.f64 x))","(sin.f64 x)","(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(tan.f64 (/.f64 x #s(literal 2 binary64)))","(*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(/.f64 #s(literal -1 binary64) (sin.f64 x))","(neg.f64 (sin.f64 x))","(sin.f64 x)","x","(pow.f64 (sin.f64 x) #s(literal -2 binary64))","#s(literal -2 binary64)","(-.f64 (cos.f64 x) #s(literal 1 binary64))","(cos.f64 x)","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":361.340087890625,"type":"simplify"},{"compiler":[[165,35]],"locations":[["(pow.f64 (sin.f64 x) #s(literal -2 binary64))","accuracy",0.25228500976844204],["(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","accuracy",13.920161778509032],["(*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","accuracy",14.167354913899352],["(-.f64 (cos.f64 x) #s(literal 1 binary64))","accuracy",15.186865921198649],["(cos.f64 x)","accuracy",0.13347626953688402],["(sin.f64 x)","accuracy",0.15529252930532603],["(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","accuracy",0.27734375],["(-.f64 #s(literal -1 binary64) (cos.f64 x))","accuracy",0.39984127026949584],["(*.f64 x #s(literal 1/2 binary64))","accuracy",0.0],["(pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))","accuracy",0.1640625],["(/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","accuracy",0.234375],["(tan.f64 (*.f64 x #s(literal 1/2 binary64)))","accuracy",0.34611137698974626],["(*.f64 #s(literal 1/2 binary64) x)","accuracy",0.0],["(fma.f64 (*.f64 x x) (*.f64 #s(literal 1/24 binary64) x) (*.f64 #s(literal 1/2 binary64) x))","accuracy",0.06640625],["(*.f64 #s(literal 1/24 binary64) x)","accuracy",0.30859375],["#s(approx (/ (- 1 (cos x)) (sin x)) (fma.f64 (*.f64 x x) (*.f64 #s(literal 1/24 binary64) x) (*.f64 #s(literal 1/2 binary64) x)))","accuracy",32.5535436122653],["(sin.f64 x)","accuracy",0.15529252930532603],["(/.f64 (sin.f64 x) (*.f64 #s(literal 2 binary64) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64))))","accuracy",0.15625],["(cos.f64 (*.f64 #s(literal 1/2 binary64) x))","accuracy",0.16310502930532605],["(pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64))","accuracy",0.22884750976844204]],"memory":[[2555696,50165056]],"mixsample":[[9.84033203125,"adjust",800],[20.10888671875,"ival-div",0],[15.988525390625,"ival-cos",1600],[0.175048828125,"ival-assert",0],[9.612060546875,"ival-sub",0],[9.4453125,"ival-tan",0],[16.5791015625,"ival-cos",0],[5.913818359375,"const",0],[2.006103515625,"ival-cos",400],[20.595947265625,"ival-pow",0],[6.278564453125,"adjust",2000],[2.250732421875,"ival-add",0],[19.44775390625,"ival-mult",0],[12.361083984375,"ival-sin",0],[5.27587890625,"ival-cos",3600],[0.989013671875,"adjust",2800],[0.371337890625,"ival-true",0],[1.010498046875,"exact",0],[2.123779296875,"ival-neg",0],[5.257568359375,"ival-pow2",0]],"outcomes":[[32.4638671875,1,"valid",43],[77.625,2,"valid",63],[23.299072265625,3,"valid",15],[80.6611328125,0,"valid",135]],"time":251.424072265625,"type":"localize"},{"count":[[23,71]],"inputs":[["(/.f64 (sin.f64 x) (*.f64 #s(literal 2 binary64) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64))))","(sin.f64 x)","(*.f64 #s(literal 2 binary64) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)))","(pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64))","(fma.f64 (*.f64 x x) (*.f64 #s(literal 1/24 binary64) x) (*.f64 #s(literal 1/2 binary64) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (fma.f64 (*.f64 x x) (*.f64 #s(literal 1/24 binary64) x) (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 x x)","(*.f64 #s(literal 1/24 binary64) x)","(/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))","(tan.f64 (*.f64 x #s(literal 1/2 binary64)))","(*.f64 x #s(literal 1/2 binary64))","(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(-.f64 #s(literal -1 binary64) (cos.f64 x))","(cos.f64 x)","(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(neg.f64 (sin.f64 x))","(cos.f64 (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","(-.f64 (cos.f64 x) #s(literal 1 binary64))","(pow.f64 (sin.f64 x) #s(literal -2 binary64))"]],"memory":[[7400864,7400864]],"outputs":[["(* 1/2 x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","2","(+ 2 (* -1/2 (pow x 2)))","(+ 2 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 2 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","1","(+ 1 (* -1/4 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/48 (pow x 2)) 1/4)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/48 (* -1/1440 (pow x 2)))) 1/4)))","(pow x 2)","(* 1/24 x)","(/ 2 x)","(/ (+ 2 (* -1/6 (pow x 2))) x)","(/ (+ 2 (* (pow x 2) (- (* -1/360 (pow x 2)) 1/6))) x)","(/ (+ 2 (* (pow x 2) (- (* (pow x 2) (- (* -1/15120 (pow x 2)) 1/360)) 1/6))) x)","-1/2","(- (* -1/8 (pow x 2)) 1/2)","(- (* (pow x 2) (- (* -1/48 (pow x 2)) 1/8)) 1/2)","(- (* (pow x 2) (- (* (pow x 2) (- (* -17/5760 (pow x 2)) 1/48)) 1/8)) 1/2)","-2","(- (* 1/2 (pow x 2)) 2)","(- (* (pow x 2) (+ 1/2 (* -1/24 (pow x 2)))) 2)","(- (* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))) 2)","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(/ -1 x)","(/ (- (* -1/6 (pow x 2)) 1) x)","(/ (- (* (pow x 2) (- (* -7/360 (pow x 2)) 1/6)) 1) x)","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -31/15120 (pow x 2)) 7/360)) 1/6)) 1) x)","(* -1 x)","(* x (- (* 1/6 (pow x 2)) 1))","(* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1))","(* x (- (* (pow x 2) (+ 1/6 (* (pow x 2) (- (* 1/5040 (pow x 2)) 1/120)))) 1))","(+ 1 (* -1/8 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/384 (pow x 2)) 1/8)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/384 (* -1/46080 (pow x 2)))) 1/8)))","(* -1/2 (pow x 2))","(* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))","(* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))","(* (pow x 2) (- (* (pow x 2) (+ 1/24 (* (pow x 2) (- (* 1/40320 (pow x 2)) 1/720)))) 1/2))","(/ 1 (pow x 2))","(/ (+ 1 (* 1/3 (pow x 2))) (pow x 2))","(/ (+ 1 (* (pow x 2) (+ 1/3 (* 1/15 (pow x 2))))) (pow x 2))","(/ (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 1/15 (* 2/189 (pow x 2))))))) (pow x 2))","(* 1/2 (/ (sin x) (pow (cos (* 1/2 x)) 2)))","(sin x)","(* 2 (pow (cos (* 1/2 x)) 2))","(pow (cos (* 1/2 x)) 2)","(* 1/24 (pow x 3))","(* (pow x 3) (+ 1/24 (* 1/2 (/ 1 (pow x 2)))))","(/ (- 1 (cos x)) (sin x))","(/ (sin (* 1/2 x)) (cos (* 1/2 x)))","(/ (cos (* 1/2 x)) (sin (* 1/2 x)))","(/ (sin x) (+ 1 (cos x)))","(/ -1 (+ 1 (cos x)))","(* -1 (+ 1 (cos x)))","(cos x)","(* -1 (/ (- (cos x) 1) (sin x)))","(/ -1 (sin x))","(* -1 (sin x))","(cos (* 1/2 x))","(- (cos x) 1)","(/ 1 (pow (sin x) 2))"]],"series":[[6.929931640625,"((/ (sin x) (* 2 (pow (cos (* 1/2 x)) 2))) (sin x) (* 2 (pow (cos (* 1/2 x)) 2)) (pow (cos (* 1/2 x)) 2) (+ (* (* x x) (* 1/24 x)) (* 1/2 x)) (/ (- 1 (cos x)) (sin x)) (* x x) (* 1/24 x) (/ 1 (pow (tan (* x 1/2)) -1)) (pow (tan (* x 1/2)) -1) (tan (* x 1/2)) (* x 1/2) (/ (/ 1 (- -1 (cos x))) (/ -1 (sin x))) (/ 1 (- -1 (cos x))) (- -1 (cos x)) (cos x) (* (* (neg (sin x)) (pow (sin x) -2)) (- (cos x) 1)) (* (neg (sin x)) (pow (sin x) -2)) (neg (sin x)) (cos (* 1/2 x)) (* 1/2 x) (- (cos x) 1) (pow (sin x) -2))","x","-inf"],[7.51806640625,"((/ (sin x) (* 2 (pow (cos (* 1/2 x)) 2))) (sin x) (* 2 (pow (cos (* 1/2 x)) 2)) (pow (cos (* 1/2 x)) 2) (+ (* (* x x) (* 1/24 x)) (* 1/2 x)) (/ (- 1 (cos x)) (sin x)) (* x x) (* 1/24 x) (/ 1 (pow (tan (* x 1/2)) -1)) (pow (tan (* x 1/2)) -1) (tan (* x 1/2)) (* x 1/2) (/ (/ 1 (- -1 (cos x))) (/ -1 (sin x))) (/ 1 (- -1 (cos x))) (- -1 (cos x)) (cos x) (* (* (neg (sin x)) (pow (sin x) -2)) (- (cos x) 1)) (* (neg (sin x)) (pow (sin x) -2)) (neg (sin x)) (cos (* 1/2 x)) (* 1/2 x) (- (cos x) 1) (pow (sin x) -2))","x","inf"],[4.6572265625,"((/ (sin x) (* 2 (pow (cos (* 1/2 x)) 2))) (sin x) (* 2 (pow (cos (* 1/2 x)) 2)) (pow (cos (* 1/2 x)) 2) (+ (* (* x x) (* 1/24 x)) (* 1/2 x)) (/ (- 1 (cos x)) (sin x)) (* x x) (* 1/24 x) (/ 1 (pow (tan (* x 1/2)) -1)) (pow (tan (* x 1/2)) -1) (tan (* x 1/2)) (* x 1/2) (/ (/ 1 (- -1 (cos x))) (/ -1 (sin x))) (/ 1 (- -1 (cos x))) (- -1 (cos x)) (cos x) (* (* (neg (sin x)) (pow (sin x) -2)) (- (cos x) 1)) (* (neg (sin x)) (pow (sin x) -2)) (neg (sin x)) (cos (* 1/2 x)) (* 1/2 x) (- (cos x) 1) (pow (sin x) -2))","x","0"]],"time":20.665771484375,"type":"series"},{"count":[[71,70]],"egraph":[[0,8024,603,0.104254515],[5,7337,679,0.023464355],[4,5463,679,0.023632827],[3,3975,679,0.019500961],[2,1339,685,0.017569453],[1,551,692,0.004304419],[0,231,698,0.002591194]],"inputs":[["(* 1/2 x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","2","(+ 2 (* -1/2 (pow x 2)))","(+ 2 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 2 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","1","(+ 1 (* -1/4 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/48 (pow x 2)) 1/4)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/48 (* -1/1440 (pow x 2)))) 1/4)))","(pow x 2)","(* 1/24 x)","(/ 2 x)","(/ (+ 2 (* -1/6 (pow x 2))) x)","(/ (+ 2 (* (pow x 2) (- (* -1/360 (pow x 2)) 1/6))) x)","(/ (+ 2 (* (pow x 2) (- (* (pow x 2) (- (* -1/15120 (pow x 2)) 1/360)) 1/6))) x)","-1/2","(- (* -1/8 (pow x 2)) 1/2)","(- (* (pow x 2) (- (* -1/48 (pow x 2)) 1/8)) 1/2)","(- (* (pow x 2) (- (* (pow x 2) (- (* -17/5760 (pow x 2)) 1/48)) 1/8)) 1/2)","-2","(- (* 1/2 (pow x 2)) 2)","(- (* (pow x 2) (+ 1/2 (* -1/24 (pow x 2)))) 2)","(- (* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))) 2)","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(/ -1 x)","(/ (- (* -1/6 (pow x 2)) 1) x)","(/ (- (* (pow x 2) (- (* -7/360 (pow x 2)) 1/6)) 1) x)","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -31/15120 (pow x 2)) 7/360)) 1/6)) 1) x)","(* -1 x)","(* x (- (* 1/6 (pow x 2)) 1))","(* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1))","(* x (- (* (pow x 2) (+ 1/6 (* (pow x 2) (- (* 1/5040 (pow x 2)) 1/120)))) 1))","(+ 1 (* -1/8 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/384 (pow x 2)) 1/8)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/384 (* -1/46080 (pow x 2)))) 1/8)))","(* -1/2 (pow x 2))","(* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))","(* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))","(* (pow x 2) (- (* (pow x 2) (+ 1/24 (* (pow x 2) (- (* 1/40320 (pow x 2)) 1/720)))) 1/2))","(/ 1 (pow x 2))","(/ (+ 1 (* 1/3 (pow x 2))) (pow x 2))","(/ (+ 1 (* (pow x 2) (+ 1/3 (* 1/15 (pow x 2))))) (pow x 2))","(/ (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 1/15 (* 2/189 (pow x 2))))))) (pow x 2))","(* 1/2 (/ (sin x) (pow (cos (* 1/2 x)) 2)))","(sin x)","(* 2 (pow (cos (* 1/2 x)) 2))","(pow (cos (* 1/2 x)) 2)","(* 1/24 (pow x 3))","(* (pow x 3) (+ 1/24 (* 1/2 (/ 1 (pow x 2)))))","(/ (- 1 (cos x)) (sin x))","(/ (sin (* 1/2 x)) (cos (* 1/2 x)))","(/ (cos (* 1/2 x)) (sin (* 1/2 x)))","(/ (sin x) (+ 1 (cos x)))","(/ -1 (+ 1 (cos x)))","(* -1 (+ 1 (cos x)))","(cos x)","(* -1 (/ (- (cos x) 1) (sin x)))","(/ -1 (sin x))","(* -1 (sin x))","(cos (* 1/2 x))","(- (cos x) 1)","(/ 1 (pow (sin x) 2))"]],"memory":[[-5678496,43891936]],"method":["egg-herbie"],"outputs":[["(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","x","(* x (+ 1 (* -1/6 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/6 binary64) x)","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal -1/6 binary64)) x)","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) x)","2","#s(literal 2 binary64)","(+ 2 (* -1/2 (pow x 2)))","(fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 2 binary64))","(+ 2 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 2 binary64))","(+ 2 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 2 binary64))","1","#s(literal 1 binary64)","(+ 1 (* -1/4 (pow x 2)))","(fma.f64 #s(literal -1/4 binary64) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/48 (pow x 2)) 1/4)))","(fma.f64 (fma.f64 #s(literal 1/48 binary64) (*.f64 x x) #s(literal -1/4 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/48 (* -1/1440 (pow x 2)))) 1/4)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/1440 binary64) (*.f64 x x) #s(literal 1/48 binary64)) (*.f64 x x) #s(literal -1/4 binary64)) (*.f64 x x) #s(literal 1 binary64))","(pow x 2)","(*.f64 x x)","(* 1/24 x)","(*.f64 #s(literal 1/24 binary64) x)","(/ 2 x)","(/.f64 #s(literal 2 binary64) x)","(/ (+ 2 (* -1/6 (pow x 2))) x)","(/.f64 (fma.f64 #s(literal -1/6 binary64) (*.f64 x x) #s(literal 2 binary64)) x)","(/ (+ 2 (* (pow x 2) (- (* -1/360 (pow x 2)) 1/6))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal -1/360 binary64) (*.f64 x x) #s(literal -1/6 binary64)) (*.f64 x x) #s(literal 2 binary64)) x)","(/ (+ 2 (* (pow x 2) (- (* (pow x 2) (- (* -1/15120 (pow x 2)) 1/360)) 1/6))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/15120 binary64) (*.f64 x x) #s(literal -1/360 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) (*.f64 x x) #s(literal 2 binary64)) x)","-1/2","#s(literal -1/2 binary64)","(- (* -1/8 (pow x 2)) 1/2)","(fma.f64 #s(literal -1/8 binary64) (*.f64 x x) #s(literal -1/2 binary64))","(- (* (pow x 2) (- (* -1/48 (pow x 2)) 1/8)) 1/2)","(fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 x x) #s(literal -1/8 binary64)) (*.f64 x x) #s(literal -1/2 binary64))","(- (* (pow x 2) (- (* (pow x 2) (- (* -17/5760 (pow x 2)) 1/48)) 1/8)) 1/2)","(fma.f64 (fma.f64 (fma.f64 #s(literal -17/5760 binary64) (*.f64 x x) #s(literal -1/48 binary64)) (*.f64 x x) #s(literal -1/8 binary64)) (*.f64 x x) #s(literal -1/2 binary64))","-2","#s(literal -2 binary64)","(- (* 1/2 (pow x 2)) 2)","(fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal -2 binary64))","(- (* (pow x 2) (+ 1/2 (* -1/24 (pow x 2)))) 2)","(fma.f64 (*.f64 (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) x) x #s(literal -2 binary64))","(- (* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))) 2)","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x #s(literal -2 binary64))","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(/ -1 x)","(/.f64 #s(literal -1 binary64) x)","(/ (- (* -1/6 (pow x 2)) 1) x)","(fma.f64 #s(literal -1/6 binary64) x (/.f64 #s(literal -1 binary64) x))","(/ (- (* (pow x 2) (- (* -7/360 (pow x 2)) 1/6)) 1) x)","(fma.f64 (fma.f64 #s(literal -7/360 binary64) (*.f64 x x) #s(literal -1/6 binary64)) x (/.f64 #s(literal -1 binary64) x))","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -31/15120 (pow x 2)) 7/360)) 1/6)) 1) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal -31/15120 binary64) (*.f64 x x) #s(literal -7/360 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) x (/.f64 #s(literal -1 binary64) x))","(* -1 x)","(neg.f64 x)","(* x (- (* 1/6 (pow x 2)) 1))","(neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/6 binary64) x))","(* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (neg.f64 x))","(* x (- (* (pow x 2) (+ 1/6 (* (pow x 2) (- (* 1/5040 (pow x 2)) 1/120)))) 1))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (neg.f64 x))","(+ 1 (* -1/8 (pow x 2)))","(fma.f64 #s(literal -1/8 binary64) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/384 (pow x 2)) 1/8)))","(fma.f64 (fma.f64 #s(literal 1/384 binary64) (*.f64 x x) #s(literal -1/8 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/384 (* -1/46080 (pow x 2)))) 1/8)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/46080 binary64) (*.f64 x x) #s(literal 1/384 binary64)) (*.f64 x x) #s(literal -1/8 binary64)) (*.f64 x x) #s(literal 1 binary64))","(* -1/2 (pow x 2))","(*.f64 #s(literal -1/2 binary64) (*.f64 x x))","(* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))","(*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) x) x)","(* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x)","(* (pow x 2) (- (* (pow x 2) (+ 1/24 (* (pow x 2) (- (* 1/40320 (pow x 2)) 1/720)))) 1/2))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/40320 binary64) (*.f64 x x) #s(literal -1/720 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x)","(/ 1 (pow x 2))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(/ (+ 1 (* 1/3 (pow x 2))) (pow x 2))","(/.f64 (/.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 x x) #s(literal 1 binary64)) x) x)","(/ (+ 1 (* (pow x 2) (+ 1/3 (* 1/15 (pow x 2))))) (pow x 2))","(/.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 1/15 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)","(/ (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 1/15 (* 2/189 (pow x 2))))))) (pow x 2))","(/.f64 (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 2/189 binary64) (*.f64 x x) #s(literal 1/15 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)","(* 1/2 (/ (sin x) (pow (cos (* 1/2 x)) 2)))","(*.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64))) #s(literal 1/2 binary64))","(sin x)","(sin.f64 x)","(* 2 (pow (cos (* 1/2 x)) 2))","(*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)) #s(literal 2 binary64))","(pow (cos (* 1/2 x)) 2)","(pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64))","(* 1/24 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64))","(* (pow x 3) (+ 1/24 (* 1/2 (/ 1 (pow x 2)))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x)","(/ (- 1 (cos x)) (sin x))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(/ (sin (* 1/2 x)) (cos (* 1/2 x)))","(/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/ (cos (* 1/2 x)) (sin (* 1/2 x)))","(/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/ (sin x) (+ 1 (cos x)))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(/ -1 (+ 1 (cos x)))","(/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(* -1 (+ 1 (cos x)))","(-.f64 #s(literal -1 binary64) (cos.f64 x))","(cos x)","(cos.f64 x)","(* -1 (/ (- (cos x) 1) (sin x)))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(/ -1 (sin x))","(/.f64 #s(literal -1 binary64) (sin.f64 x))","(* -1 (sin x))","(neg.f64 (sin.f64 x))","(cos (* 1/2 x))","(cos.f64 (*.f64 #s(literal 1/2 binary64) x))","(- (cos x) 1)","(-.f64 (cos.f64 x) #s(literal 1 binary64))","(/ 1 (pow (sin x) 2))","(/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))"]],"stop":[["iter limit",1],["node limit",1]],"time":312.522216796875,"type":"simplify"},{"count":[[23,1814]],"egraph":[[0,8994,113,0.085066419],[2,1180,115,0.038652286],[1,200,119,0.004909411],[0,59,121,0.001733573],[0,35,144,0.000354088]],"inputs":[["(/.f64 (sin.f64 x) (*.f64 #s(literal 2 binary64) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64))))","(sin.f64 x)","(*.f64 #s(literal 2 binary64) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)))","(pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64))","(fma.f64 (*.f64 x x) (*.f64 #s(literal 1/24 binary64) x) (*.f64 #s(literal 1/2 binary64) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (fma.f64 (*.f64 x x) (*.f64 #s(literal 1/24 binary64) x) (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 x x)","(*.f64 #s(literal 1/24 binary64) x)","(/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))","(tan.f64 (*.f64 x #s(literal 1/2 binary64)))","(*.f64 x #s(literal 1/2 binary64))","(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(-.f64 #s(literal -1 binary64) (cos.f64 x))","(cos.f64 x)","(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(neg.f64 (sin.f64 x))","(cos.f64 (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","(-.f64 (cos.f64 x) #s(literal 1 binary64))","(pow.f64 (sin.f64 x) #s(literal -2 binary64))"]],"memory":[[2470896,77255536]],"outputs":[["(*.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)) (/.f64 #s(literal 2 binary64) (sin.f64 x))) #s(literal -1/2 binary64)) (pow.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)) (/.f64 #s(literal 2 binary64) (sin.f64 x))) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (sin.f64 x) (*.f64 #s(literal 2 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (sin.f64 x) (cos.f64 (*.f64 #s(literal 1/2 binary64) x))) (/.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64))))","(*.f64 (/.f64 (sin.f64 x) (cos.f64 (*.f64 #s(literal 1/2 binary64) x))) (/.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)))) (*.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (sin.f64 x) (neg.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)))) #s(literal -1/2 binary64))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64))) (*.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -2 binary64)) (*.f64 (sin.f64 x) #s(literal 1/2 binary64)))","(*.f64 (/.f64 (*.f64 (sin.f64 x) #s(literal 1/2 binary64)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x))) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(*.f64 (*.f64 (sin.f64 x) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -2 binary64))) #s(literal 1/2 binary64))","(*.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)))))","(*.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64))))","(*.f64 (*.f64 (sin.f64 x) #s(literal 1/2 binary64)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -2 binary64)))","(*.f64 #s(literal -1/2 binary64) (/.f64 (neg.f64 (sin.f64 x)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64))))","(*.f64 #s(literal -1/2 binary64) (/.f64 (sin.f64 x) (neg.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)))))","(*.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -2 binary64)) #s(literal 1/2 binary64)) (sin.f64 x))","(*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -2 binary64)) #s(literal 1/2 binary64))))","(*.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -2 binary64)) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -2 binary64)) (*.f64 (sin.f64 x) #s(literal 1/2 binary64))))","(*.f64 #s(literal 1/2 binary64) (pow.f64 (/.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)) (sin.f64 x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1/2 binary64) (*.f64 (sin.f64 x) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -2 binary64))))","(*.f64 (sin.f64 x) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -2 binary64)) #s(literal 1/2 binary64)))","(pow.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)) (/.f64 #s(literal 2 binary64) (sin.f64 x))) #s(literal -1 binary64))","(/.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sin.f64 x) #s(literal 1/2 binary64)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -2 binary64)))) #s(literal 2 binary64))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) (neg.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64))))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -2 binary64)) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -2 binary64)) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))))) (+.f64 #s(literal 0 binary64) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -2 binary64)) (*.f64 (sin.f64 x) #s(literal -1/2 binary64)))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -2 binary64)) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -2 binary64)) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -2 binary64)) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) (*.f64 #s(literal 0 binary64) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -2 binary64)) (*.f64 (sin.f64 x) #s(literal -1/2 binary64)))))))","(/.f64 (neg.f64 (/.f64 (*.f64 (sin.f64 x) #s(literal 1/2 binary64)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (neg.f64 (*.f64 (sin.f64 x) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -2 binary64)))) #s(literal -2 binary64))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64))) (sin.f64 x))) (*.f64 (*.f64 #s(literal -2 binary64) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64))) (*.f64 #s(literal -2 binary64) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)))))","(/.f64 (/.f64 (*.f64 (sin.f64 x) #s(literal 1/2 binary64)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x))) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (*.f64 (sin.f64 x) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -2 binary64))) #s(literal 2 binary64))","(/.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) (neg.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64))))","(/.f64 (*.f64 (sin.f64 x) #s(literal 1/2 binary64)) (neg.f64 (neg.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (sin.f64 x) #s(literal 1/2 binary64)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)))","(/.f64 (neg.f64 (sin.f64 x)) (*.f64 #s(literal -2 binary64) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (*.f64 #s(literal -2 binary64) (/.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)) (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 (*.f64 (sin.f64 x) #s(literal 1/2 binary64)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (*.f64 (sin.f64 x) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)) (/.f64 #s(literal 2 binary64) (sin.f64 x))))","(/.f64 (sin.f64 x) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)) #s(literal 2 binary64)))","(neg.f64 (/.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64))))","(neg.f64 (/.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)) (/.f64 #s(literal 2 binary64) (sin.f64 x)))))","(neg.f64 (/.f64 (*.f64 (sin.f64 x) #s(literal 1/2 binary64)) (neg.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)))))","(neg.f64 (*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -2 binary64)) (*.f64 (sin.f64 x) #s(literal -1/2 binary64)))))","(neg.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -2 binary64)) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(-.f64 #s(literal 0 binary64) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -2 binary64)) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(exp.f64 (*.f64 (log.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)) (/.f64 #s(literal 2 binary64) (sin.f64 x)))) #s(literal -1 binary64)))","(+.f64 #s(literal 0 binary64) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -2 binary64)) (*.f64 (sin.f64 x) #s(literal 1/2 binary64))))","(*.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (sin.f64 x))","(*.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (neg.f64 (sin.f64 x)))","(*.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (*.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (*.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (*.f64 (sin.f64 x) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x)))","(*.f64 #s(literal 1 binary64) (sin.f64 x))","(*.f64 (sin.f64 x) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(*.f64 (sin.f64 x) #s(literal 1 binary64))","(pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (sin.f64 x) #s(literal 1 binary64))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64))) (+.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 0 binary64))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64)))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (sin.f64 x)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (sin.f64 x))","(/.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 (sin.f64 x) #s(literal 1 binary64))","(neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(neg.f64 (neg.f64 (sin.f64 x)))","(fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(sin.f64 x)","(-.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x)))","(exp.f64 (neg.f64 (*.f64 (log.f64 (sin.f64 x)) #s(literal -1 binary64))))","(exp.f64 (log.f64 (sin.f64 x)))","(+.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 #s(literal 0 binary64) (sin.f64 x))","(*.f64 (*.f64 (*.f64 #s(literal 2 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))) (sqrt.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (neg.f64 (neg.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)))) #s(literal 2 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) x))) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 (sqrt.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (sqrt.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64))))","(*.f64 (neg.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64))) #s(literal -2 binary64))","(*.f64 #s(literal -2 binary64) (neg.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64))))","(*.f64 #s(literal -1 binary64) (*.f64 #s(literal -2 binary64) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64))))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)) #s(literal 2 binary64)))","(*.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)) #s(literal 2 binary64)) #s(literal 1 binary64))","(*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)) #s(literal 2 binary64))","(*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)))","(*.f64 #s(literal 2 binary64) (neg.f64 (neg.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)))))","(*.f64 #s(literal 2 binary64) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)))","(/.f64 (*.f64 #s(literal 2 binary64) (+.f64 (cos.f64 (*.f64 #s(literal 1 binary64) x)) (cos.f64 #s(literal 0 binary64)))) #s(literal 2 binary64))","(/.f64 (*.f64 #s(literal -2 binary64) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64))) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -2 binary64)) #s(literal 1/2 binary64)))","(/.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)) #s(literal 2 binary64)) #s(literal 1 binary64))","(neg.f64 (*.f64 #s(literal -2 binary64) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64))))","(-.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64))))","(+.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 1 binary64) x))) #s(literal 2 binary64)))","(+.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 1 binary64) x)))))","(*.f64 (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (sqrt.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))) (sqrt.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (sqrt.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (sqrt.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))) (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (+.f64 (cos.f64 (*.f64 #s(literal 1 binary64) x)) (cos.f64 #s(literal 0 binary64))) #s(literal 1/2 binary64))","(*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(pow.f64 (exp.f64 #s(literal 2 binary64)) (log.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(pow.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)) #s(literal 1 binary64))","(pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)))) (+.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 1 binary64) x))) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 1 binary64) x))))) (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (fma.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64))))))","(/.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 1 binary64) x))) #s(literal 3 binary64))) (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 1 binary64) x))) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 1 binary64) x)))) (*.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 1 binary64) x)))))))","(/.f64 (neg.f64 (+.f64 (cos.f64 (*.f64 #s(literal 1 binary64) x)) (cos.f64 #s(literal 0 binary64)))) #s(literal -2 binary64))","(/.f64 (+.f64 (cos.f64 (*.f64 #s(literal 1 binary64) x)) (cos.f64 #s(literal 0 binary64))) #s(literal 2 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (+.f64 (cos.f64 (*.f64 #s(literal 1 binary64) x)) (cos.f64 #s(literal 0 binary64)))))","(-.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)))","(exp.f64 (+.f64 (log.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))) (log.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(exp.f64 (*.f64 (*.f64 (log.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64))) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64)))","(+.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))","(+.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64))))","(+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal 1/2 binary64))) x) (/.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64))) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64))))","(*.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x (*.f64 #s(literal -1/24 binary64) (pow.f64 x #s(literal 3 binary64))))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 #s(literal -1/4 binary64) (*.f64 x x)))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/24 binary64) (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/48 binary64))))))))","(*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 #s(literal -1/4 binary64) (*.f64 x x))) (/.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1/24 binary64) (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/48 binary64))))) (*.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal 1/2 binary64))) (pow.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/48 binary64))))) #s(literal -1 binary64))))","(*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal 1/4 binary64) x) x (*.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64))))))","(*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64))) (pow.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/48 binary64))))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal 1/2 binary64))))","(*.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal 1/2 binary64))) (*.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1/24 binary64) (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1/2 binary64) x)))))","(*.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal 1/2 binary64)))","(*.f64 x (+.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 #s(literal 1/24 binary64) x) x)))","(pow.f64 (/.f64 #s(literal 1 binary64) (*.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal 1/2 binary64)))) #s(literal -1 binary64))","(/.f64 (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 #s(literal -1/4 binary64) (*.f64 x x))) #s(literal 1 binary64)) (*.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64))))","(/.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64))) #s(literal 1 binary64)) (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/48 binary64))))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 6 binary64))) (*.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64)))) (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 6 binary64))) (*.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64))))) (*.f64 (*.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) x) (/.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64)))) (*.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) x) (/.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64)))))) (+.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 6 binary64))) (*.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64)))) (*.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) x) (/.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 6 binary64))) (*.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64)))) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) x) (/.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 6 binary64))) (*.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64)))) (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 6 binary64))) (*.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64)))) (fma.f64 (*.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) x) (/.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64)))) (*.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) x) (/.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64)))) (*.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 6 binary64))) (*.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64)))) (*.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) x) (/.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64))))))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (fma.f64 #s(literal 1/2 binary64) x (*.f64 #s(literal -1/24 binary64) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 #s(literal -1/4 binary64) (*.f64 x x))))) (neg.f64 (fma.f64 #s(literal -1/24 binary64) (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/48 binary64))))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 6 binary64))) (*.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64)))) (*.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64))) (*.f64 #s(literal 1/4 binary64) (*.f64 x x)))) (*.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64))) (*.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 #s(literal 1/2 binary64) x (*.f64 #s(literal -1/24 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 #s(literal -1/4 binary64) (*.f64 x x)))) (fma.f64 #s(literal -1/24 binary64) (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) x) x (*.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64))))))","(/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/48 binary64)))))))","(/.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 #s(literal -1/4 binary64) (*.f64 x x))) (*.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64))))","(/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64))) (fma.f64 (*.f64 #s(literal 1/4 binary64) x) x (*.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64)))))","(/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64))) (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/48 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (*.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal 1/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) x (*.f64 #s(literal -1/24 binary64) (pow.f64 x #s(literal 3 binary64)))) (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) x) x (*.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64)))) (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (*.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal 1/2 binary64)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (*.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal 1/2 binary64)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 #s(literal -1/4 binary64) (*.f64 x x)))) (*.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64)))))","(neg.f64 (/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)))) (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/48 binary64)))))))","(neg.f64 (/.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 #s(literal -1/4 binary64) (*.f64 x x))) (fma.f64 #s(literal -1/24 binary64) (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1/2 binary64) x))))","(neg.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64))) (neg.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/48 binary64))))))))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) x) x) (/.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) x) (/.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64))))))","(fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64)) x) x) (/.f64 (*.f64 #s(literal 1/24 binary64) x) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) x) (/.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64))))))","(fma.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64)) x) (/.f64 (*.f64 (*.f64 #s(literal 1/24 binary64) x) x) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) x) (/.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64))))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) (*.f64 x x)) x) (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) x) (/.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64))))))","(fma.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) x) (/.f64 (*.f64 #s(literal 1/576 binary64) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) x) (/.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64))))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) x) (/.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) x) (/.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64))))))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal 1/24 binary64) x) x) x) (/.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) x) (/.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64))))))","(fma.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64)) x) (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) x) (/.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64))))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/24 binary64) x) x) (/.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64)) x) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) x) (/.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64))))))","(fma.f64 (/.f64 (*.f64 x x) x) (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) x) (/.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64))))))","(fma.f64 (/.f64 x x) (/.f64 (*.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) x) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) x) (/.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64))))))","(fma.f64 (neg.f64 x) #s(literal -1/2 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64)))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64) (*.f64 #s(literal 1/2 binary64) x))","(fma.f64 (*.f64 (*.f64 #s(literal 1/24 binary64) x) x) x (*.f64 #s(literal 1/2 binary64) x))","(fma.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 6 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1/24 binary64) (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1/2 binary64) x))) (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) x) (/.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64))))))","(fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64)))","(fma.f64 (*.f64 #s(literal 1/24 binary64) x) (*.f64 x x) (*.f64 #s(literal 1/2 binary64) x))","(fma.f64 #s(literal 1/24 binary64) (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1/2 binary64) x))","(fma.f64 (*.f64 x x) (*.f64 #s(literal 1/24 binary64) x) (*.f64 #s(literal 1/2 binary64) x))","(fma.f64 #s(literal 1/2 binary64) x (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64)))","(fma.f64 x (*.f64 (*.f64 #s(literal 1/24 binary64) x) x) (*.f64 #s(literal 1/2 binary64) x))","(fma.f64 x #s(literal 1/2 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64)))","(-.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/2 binary64) x (*.f64 #s(literal -1/24 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/2 binary64) x (*.f64 #s(literal -1/24 binary64) (pow.f64 x #s(literal 3 binary64))))))","(-.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 6 binary64))) (*.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64)))) (*.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) x) (/.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64)))))","(+.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 6 binary64))) (*.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64)))) (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) x) (/.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal -1/2 binary64))))))","(+.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64)) (*.f64 #s(literal 1/2 binary64) x))","(+.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64)))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 x (fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal 1/2 binary64))))","(*.f64 (exp.f64 (log.f64 x)) (exp.f64 (log.f64 x)))","(*.f64 x x)","(pow.f64 (exp.f64 (log.f64 x)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1 binary64))","(pow.f64 x #s(literal 2 binary64))","(exp.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)))","(*.f64 #s(literal 1/24 binary64) x)","(*.f64 x #s(literal 1/24 binary64))","(*.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (sin.f64 x))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)))","(*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (sin.f64 x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (/.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (neg.f64 (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (pow.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (neg.f64 (sin.f64 x)) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(*.f64 (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal 1 binary64)))","(*.f64 (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64))","(*.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))))","(*.f64 (neg.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (/.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (neg.f64 (sin.f64 x))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (sin.f64 x))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))","(*.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 (sin.f64 x) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(pow.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))) #s(literal -1/2 binary64))","(pow.f64 (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64))","(pow.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)) #s(literal -2 binary64))","(pow.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64) #s(literal 1 binary64))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (sin.f64 x))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (sin.f64 x) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))) (-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(/.f64 (+.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64))) (fma.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)) (-.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64))) (fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)) (-.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))))","(/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))) (neg.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))) (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))) (neg.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))) (neg.f64 (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (-.f64 (sin.f64 x) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 x))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (tan.f64 x)) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (tan.f64 x)) (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x)))","(/.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (exp.f64 (log.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)))","(/.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (sin.f64 x) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (sin.f64 x) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)) (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))) (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sin.f64 x) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(neg.f64 (/.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal 1 binary64)))","(neg.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(fma.f64 (*.f64 (cos.f64 x) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (*.f64 (cos.f64 x) (sin.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (*.f64 (cos.f64 x) (neg.f64 (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)) #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (*.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (neg.f64 (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (neg.f64 (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (neg.f64 (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x)) (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal 0 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (neg.f64 (sin.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (neg.f64 (sin.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (neg.f64 (sin.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (neg.f64 (sin.f64 x)) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (neg.f64 (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 0 binary64) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(fma.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (sin.f64 x) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (sin.f64 x) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (sin.f64 x) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (sin.f64 x) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(-.f64 (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))) (/.f64 (pow.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))) (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (sin.f64 x) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (neg.f64 (sin.f64 x))) (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (neg.f64 (sin.f64 x))))","(-.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (sin.f64 x))) (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))","(-.f64 (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (sin.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x))) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(exp.f64 (log.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))","(+.f64 (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x)) (neg.f64 (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (*.f64 (neg.f64 (sin.f64 x)) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 0 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(+.f64 (*.f64 #s(literal 0 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(*.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (sqrt.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))) (sqrt.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/4 binary64))) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/4 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64))) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)))","(*.f64 (neg.f64 (neg.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)))) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (/.f64 (neg.f64 (sin.f64 x)) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))))","(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (neg.f64 (sin.f64 x)) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (sin.f64 x) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(*.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64)) (pow.f64 (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64))) (neg.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64))))","(*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/4 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x))","(*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))","(*.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)) (neg.f64 (neg.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)))))","(*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)))","(*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (sin.f64 x)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (sin.f64 x) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))))","(*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(*.f64 (sin.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal 1 binary64)))","(*.f64 (sin.f64 x) (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))","(pow.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64))","(pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))","(/.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (cos.f64 x)))","(/.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (+.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 3 binary64)))) (-.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 2 binary64))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))) (-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x))))","(/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x)))))","(/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (neg.f64 (sin.f64 x)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (+.f64 (sin.f64 x) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (sin.f64 x) (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 x))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (tan.f64 x) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (tan.f64 x) (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (sin.f64 x) (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (neg.f64 (sin.f64 x)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))) (neg.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (neg.f64 (sin.f64 x)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))","(/.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 (sin.f64 x)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(neg.f64 (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)) #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 #s(literal 2 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (cos.f64 x)))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64) (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x))))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (neg.f64 (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (neg.f64 (sin.f64 x)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (-.f64 #s(literal 2 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (cos.f64 x) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(fma.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (neg.f64 (cos.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (sin.f64 x)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (neg.f64 (sin.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(fma.f64 (neg.f64 (sin.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(fma.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (sin.f64 x) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(fma.f64 (sin.f64 x) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (sin.f64 x)) (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))) (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (-.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (tan.f64 x) #s(literal -1 binary64))))","(-.f64 #s(literal 0 binary64) (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)))","(exp.f64 (fma.f64 (log.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1/2 binary64) (*.f64 (log.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1/2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64))) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64))) #s(literal 2 binary64)))","(exp.f64 (neg.f64 (log.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(+.f64 (*.f64 (-.f64 #s(literal 2 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (cos.f64 x) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(+.f64 (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(+.f64 (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(+.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 #s(literal 2 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (cos.f64 x)))","(+.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x))) (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x))))","(+.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(*.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (sin.f64 x))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)))","(*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (sin.f64 x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (/.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (neg.f64 (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (pow.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (neg.f64 (sin.f64 x)) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(*.f64 (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal 1 binary64)))","(*.f64 (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64))","(*.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))))","(*.f64 (neg.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (/.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (neg.f64 (sin.f64 x))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (sin.f64 x))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))","(*.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 (sin.f64 x) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(pow.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))) #s(literal -1/2 binary64))","(pow.f64 (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64))","(pow.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)) #s(literal -2 binary64))","(pow.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64) #s(literal 1 binary64))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (sin.f64 x))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (sin.f64 x) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))) (-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(/.f64 (+.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64))) (fma.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)) (-.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64))) (fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)) (-.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))))","(/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))) (neg.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))) (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))) (neg.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))) (neg.f64 (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (-.f64 (sin.f64 x) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 x))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (tan.f64 x)) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (tan.f64 x)) (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x)))","(/.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (exp.f64 (log.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)))","(/.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (sin.f64 x) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (sin.f64 x) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)) (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))) (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sin.f64 x) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(neg.f64 (/.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal 1 binary64)))","(neg.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(fma.f64 (*.f64 (cos.f64 x) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (*.f64 (cos.f64 x) (sin.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (*.f64 (cos.f64 x) (neg.f64 (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)) #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (*.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (neg.f64 (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (neg.f64 (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (neg.f64 (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x)) (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal 0 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (neg.f64 (sin.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (neg.f64 (sin.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (neg.f64 (sin.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (neg.f64 (sin.f64 x)) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (neg.f64 (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 0 binary64) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(fma.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (sin.f64 x) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (sin.f64 x) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (sin.f64 x) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (sin.f64 x) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(-.f64 (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))) (/.f64 (pow.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))) (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (sin.f64 x) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (neg.f64 (sin.f64 x))) (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (neg.f64 (sin.f64 x))))","(-.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (sin.f64 x))) (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))","(-.f64 (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (sin.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x))) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(exp.f64 (log.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))","(+.f64 (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x)) (neg.f64 (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (*.f64 (neg.f64 (sin.f64 x)) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 0 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(+.f64 (*.f64 #s(literal 0 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(*.f64 (neg.f64 x) #s(literal -1/2 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","(*.f64 x #s(literal 1/2 binary64))","(pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 x)) #s(literal 2 binary64))","(/.f64 (neg.f64 x) #s(literal -2 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 2 binary64) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) x))","(/.f64 x #s(literal 2 binary64))","(neg.f64 (*.f64 #s(literal -1/2 binary64) x))","(*.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (sin.f64 x))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)))","(*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (sin.f64 x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (/.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (neg.f64 (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (pow.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (neg.f64 (sin.f64 x)) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(*.f64 (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal 1 binary64)))","(*.f64 (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64))","(*.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))))","(*.f64 (neg.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (/.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (neg.f64 (sin.f64 x))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (sin.f64 x))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))","(*.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 (sin.f64 x) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(pow.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))) #s(literal -1/2 binary64))","(pow.f64 (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64))","(pow.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)) #s(literal -2 binary64))","(pow.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64) #s(literal 1 binary64))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (sin.f64 x))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (sin.f64 x) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))) (-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(/.f64 (+.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64))) (fma.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)) (-.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64))) (fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)) (-.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))))","(/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))) (neg.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))) (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))) (neg.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))) (neg.f64 (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (-.f64 (sin.f64 x) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 x))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (tan.f64 x)) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (tan.f64 x)) (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x)))","(/.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (exp.f64 (log.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)))","(/.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (sin.f64 x) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (sin.f64 x) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)) (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))) (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sin.f64 x) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(neg.f64 (/.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal 1 binary64)))","(neg.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(fma.f64 (*.f64 (cos.f64 x) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (*.f64 (cos.f64 x) (sin.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (*.f64 (cos.f64 x) (neg.f64 (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)) #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (*.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (neg.f64 (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (neg.f64 (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (neg.f64 (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x)) (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal 0 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (neg.f64 (sin.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (neg.f64 (sin.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (neg.f64 (sin.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (neg.f64 (sin.f64 x)) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (neg.f64 (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 0 binary64) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(fma.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (sin.f64 x) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (sin.f64 x) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (sin.f64 x) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (sin.f64 x) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(-.f64 (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))) (/.f64 (pow.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))) (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (sin.f64 x) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (neg.f64 (sin.f64 x))) (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (neg.f64 (sin.f64 x))))","(-.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (sin.f64 x))) (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))","(-.f64 (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (sin.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x))) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(exp.f64 (log.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))","(+.f64 (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x)) (neg.f64 (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (*.f64 (neg.f64 (sin.f64 x)) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 0 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(+.f64 (*.f64 #s(literal 0 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)))","(*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) #s(literal -1 binary64))","(*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (neg.f64 (sin.f64 x)) (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (sin.f64 x)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))))","(*.f64 #s(literal -1 binary64) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(*.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(pow.f64 (exp.f64 (log.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)))) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (cos.f64 x))))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (cos.f64 x)))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64) #s(literal 1 binary64))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (-.f64 (*.f64 (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))))) (-.f64 (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x))) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))))) (-.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal 3 binary64)) (pow.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal 3 binary64))) (fma.f64 (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (*.f64 (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal 3 binary64))) (fma.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x)) (-.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)))))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) #s(literal -1 binary64))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(neg.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))))","(neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(neg.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(fma.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (cos.f64 x) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal 2 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(fma.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x)) #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(fma.f64 (-.f64 #s(literal 2 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(fma.f64 (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x)))","(fma.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(-.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(-.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(-.f64 (/.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(exp.f64 (*.f64 (log.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x))) #s(literal -1 binary64)))","(+.f64 (*.f64 (-.f64 #s(literal 2 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(+.f64 (*.f64 (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(+.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal 2 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(+.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(+.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(+.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(+.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(+.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x)))","(+.f64 (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(+.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(*.f64 (/.f64 (sin.f64 x) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (/.f64 (sin.f64 x) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))))","(*.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(*.f64 (sin.f64 x) (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)))","(pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 1 binary64))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal -1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal -1 binary64) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))))) (+.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))) (*.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))) (+.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (fma.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))))","(/.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64) #s(literal -1 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (neg.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (neg.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (cos.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(neg.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(fma.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(fma.f64 (cos.f64 x) #s(literal -1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(fma.f64 #s(literal -1 binary64) (cos.f64 x) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(fma.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)) #s(literal -1 binary64))","(-.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(-.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64)))","(-.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(-.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(-.f64 #s(literal 0 binary64) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(-.f64 #s(literal -1 binary64) (cos.f64 x))","(exp.f64 (neg.f64 (*.f64 (log.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x))) #s(literal -1 binary64))))","(+.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(+.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(+.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)))","(*.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64))","(*.f64 (cos.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)))","(*.f64 #s(literal 1 binary64) (cos.f64 x))","(/.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64))","(/.f64 (cos.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (cos.f64 x)))","(neg.f64 (neg.f64 (cos.f64 x)))","(-.f64 #s(literal 0 binary64) (neg.f64 (cos.f64 x)))","(cos.f64 x)","(*.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (sin.f64 x))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)))","(*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (sin.f64 x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (/.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (neg.f64 (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (pow.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (neg.f64 (sin.f64 x)) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(*.f64 (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal 1 binary64)))","(*.f64 (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64))","(*.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))))","(*.f64 (neg.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (/.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (neg.f64 (sin.f64 x))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (sin.f64 x))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))","(*.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 (sin.f64 x) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(pow.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))) #s(literal -1/2 binary64))","(pow.f64 (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64))","(pow.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)) #s(literal -2 binary64))","(pow.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64) #s(literal 1 binary64))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (sin.f64 x))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (sin.f64 x) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))) (-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(/.f64 (+.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64))) (fma.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)) (-.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64))) (fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)) (-.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))))","(/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))) (neg.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))) (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))) (neg.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))) (neg.f64 (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (-.f64 (sin.f64 x) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 x))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (tan.f64 x)) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (tan.f64 x)) (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x)))","(/.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (exp.f64 (log.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)))","(/.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (sin.f64 x) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (sin.f64 x) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)) (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))) (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sin.f64 x) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(neg.f64 (/.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal 1 binary64)))","(neg.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(fma.f64 (*.f64 (cos.f64 x) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (*.f64 (cos.f64 x) (sin.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (*.f64 (cos.f64 x) (neg.f64 (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)) #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (*.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (neg.f64 (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (neg.f64 (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (neg.f64 (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x)) (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal 0 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (neg.f64 (sin.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (neg.f64 (sin.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (neg.f64 (sin.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (neg.f64 (sin.f64 x)) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (neg.f64 (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 0 binary64) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(fma.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (sin.f64 x) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (sin.f64 x) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (sin.f64 x) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (sin.f64 x) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(-.f64 (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))) (/.f64 (pow.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))) (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (sin.f64 x) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (neg.f64 (sin.f64 x))) (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (neg.f64 (sin.f64 x))))","(-.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (sin.f64 x))) (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))","(-.f64 (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (sin.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x))) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(exp.f64 (log.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))","(+.f64 (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x)) (neg.f64 (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (*.f64 (neg.f64 (sin.f64 x)) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 0 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(+.f64 (*.f64 #s(literal 0 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (neg.f64 (sin.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (neg.f64 (sin.f64 x)) #s(literal -1/2 binary64)))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (sin.f64 x))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (neg.f64 (sin.f64 x)))","(*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (sin.f64 x) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(pow.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) #s(literal -1 binary64))","(pow.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))","(pow.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal 1 binary64))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal -3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (sin.f64 x))","(/.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x)))","(neg.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 (sin.f64 x))) #s(literal -1 binary64)))","(+.f64 (*.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(+.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal 0 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(+.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1/2 binary64)))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64))))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(*.f64 #s(literal -1 binary64) (sin.f64 x))","(*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x)))","(*.f64 (sin.f64 x) #s(literal -1 binary64))","(pow.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))","(pow.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64)))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (-.f64 #s(literal 2 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (sin.f64 x))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (sin.f64 x)))) (sin.f64 x))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (sin.f64 x))) (*.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64)))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (sin.f64 x))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 (sin.f64 x) #s(literal -1 binary64))","(neg.f64 (sin.f64 x))","(fma.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(fma.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(fma.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (neg.f64 (sin.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (neg.f64 (sin.f64 x)) #s(literal -1/2 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(fma.f64 (pow.f64 (neg.f64 (sin.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (neg.f64 (sin.f64 x)) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (sin.f64 x) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (sin.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (neg.f64 (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(fma.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal 1 binary64) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal 1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (sin.f64 x) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(fma.f64 (sin.f64 x) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (sin.f64 x)) (sin.f64 x))","(-.f64 #s(literal 0 binary64) (sin.f64 x))","(exp.f64 (*.f64 (log.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x))) #s(literal -1 binary64)))","(+.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x)))","(+.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(+.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(*.f64 (pow.f64 (sqrt.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal 1 binary64)))","(*.f64 (sqrt.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(pow.f64 (sqrt.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64))","(pow.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64))","(cos.f64 (*.f64 #s(literal 1/2 binary64) x))","(exp.f64 (log.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (neg.f64 x) #s(literal -1/2 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","(*.f64 x #s(literal 1/2 binary64))","(pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 x)) #s(literal 2 binary64))","(/.f64 (neg.f64 x) #s(literal -2 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 2 binary64) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) x))","(/.f64 x #s(literal 2 binary64))","(neg.f64 (*.f64 #s(literal -1/2 binary64) x))","(*.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(*.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(*.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 x))","(*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(*.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(pow.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64) #s(literal 1 binary64))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))) (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))))) (fma.f64 (/.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (cos.f64 x) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))) (*.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (+.f64 #s(literal 0 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (cos.f64 x)) #s(literal 3 binary64))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (*.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (fma.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 #s(literal 0 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64) #s(literal 1 binary64))) (neg.f64 (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))))) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64) #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (cos.f64 x) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64) #s(literal -1 binary64))","(fma.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) #s(literal -1 binary64) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (neg.f64 (sin.f64 x)) (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (sin.f64 x)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (cos.f64 x) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal -1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)) #s(literal -1 binary64))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (cos.f64 x) #s(literal -1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(-.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(-.f64 (cos.f64 x) #s(literal 1 binary64))","(-.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)))","(+.f64 (-.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) #s(literal 0 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(+.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(+.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(+.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 #s(literal 0 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(+.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(+.f64 (cos.f64 x) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (cos.f64 x))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(*.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal 2 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(pow.f64 (exp.f64 #s(literal -2 binary64)) (log.f64 (sin.f64 x)))","(pow.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64))","(pow.f64 (sin.f64 x) #s(literal -2 binary64))","(/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (sin.f64 x))","(/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (sin.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(exp.f64 (fma.f64 (log.f64 (sin.f64 x)) #s(literal -1 binary64) (*.f64 (log.f64 (sin.f64 x)) #s(literal -1 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (sin.f64 x)) #s(literal -1 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (sin.f64 x)) #s(literal -2 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":378.43896484375,"type":"rewrite"},{"compiler":[[26103,3634]],"memory":[[12440992,119548432]],"time":186.763916015625,"type":"eval"},{"alts":[["(fma.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","done",29.307571931838016,"binary64"],["(pow.f64 (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64))","fresh",17.94310385745286,"binary64"],["(pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))","fresh",59.0843567212142,"binary64"],["(/.f64 (/.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","fresh",0.45092271722105226,"binary64"],["(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (cos.f64 x))))) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","fresh",0.7360372298794863,"binary64"],["(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","done",0.6512268554423705,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","done",29.310971754888417,"binary64"],["(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","fresh",30.3192244398209,"binary64"],["(/.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","done",0.5264218091936519,"binary64"],["(/.f64 (sin.f64 x) (*.f64 #s(literal 2 binary64) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64))))","done",0.3855439453688405,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)))","fresh",0.6215265074886769,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","fresh",29.309145711810782,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))","fresh",0.4535714356003984,"binary64"],["(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","fresh",0.639806512012014,"binary64"],["(/.f64 #s(literal 1 binary64) #s(approx (pow (tan (* x 1/2)) -1) (/.f64 (fma.f64 #s(literal -1/6 binary64) (*.f64 x x) #s(literal 2 binary64)) x)))","fresh",32.217661741266355,"binary64"],["(/.f64 #s(literal 1 binary64) #s(approx (pow (tan (* x 1/2)) -1) (/.f64 #s(literal 2 binary64) x)))","fresh",32.4281363725834,"binary64"],["(-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","done",29.51052881934276,"binary64"],["(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","fresh",29.29640960474825,"binary64"],["(*.f64 (*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","fresh",14.118205723877875,"binary64"],["(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","done",30.329486166463504,"binary64"],["(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (*.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal 2 binary64)))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","fresh",30.42034000308832,"binary64"],["(*.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (/.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","fresh",0.4030838867581883,"binary64"],["(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","done",0.34611137698974626,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (fma.f64 (*.f64 x x) (*.f64 #s(literal 1/24 binary64) x) (*.f64 #s(literal 1/2 binary64) x)))","done",32.5535436122653,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","fresh",32.54439066033749,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","fresh",32.564161162101044,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x))","done",32.55354361238525,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","done",32.35325248702361,"binary64"]],"compiler":[[847,221],[11,7],[7,7],[3,4],[12,9],[15,11],[11,9],[7,6],[12,9],[7,6],[11,9],[9,8],[9,7],[8,7],[11,9],[17,14],[12,11],[9,7],[9,8],[12,9],[13,10],[17,13],[11,9],[4,4],[18,13],[26,16],[21,14],[16,12],[11,9]],"count":[[1323,28]],"kept":[{"done":[7,7],"fresh":[16,8],"new":[1295,9],"picked":[5,4]}],"memory":[[-2988432,64721792]],"min-error":[[0.0,"binary64"]],"time":55.235107421875,"type":"prune"},{"accuracy":[0.34611137698974626],"baseline":[0.34611137698974626],"branch":[["x",0.34611137698974626,1,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))",0.34611137698974626,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[62,1]],"inputs":[["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (fma.f64 (*.f64 x x) (*.f64 #s(literal 1/24 binary64) x) (*.f64 #s(literal 1/2 binary64) x)))","#s(approx (/ (- 1 (cos x)) (sin x)) (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) x)))","(/.f64 #s(literal 1 binary64) #s(approx (pow (tan (* x 1/2)) -1) (/.f64 #s(literal 2 binary64) x)))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","(/.f64 #s(literal 1 binary64) #s(approx (pow (tan (* x 1/2)) -1) (/.f64 (fma.f64 #s(literal -1/6 binary64) (*.f64 x x) #s(literal 2 binary64)) x)))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","(pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(pow.f64 (sqrt.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)))","(*.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (/.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (/.f64 x #s(literal -2 binary64))) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (cos.f64 x))))) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (cos.f64 (/.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)))","(/.f64 (sin.f64 x) (*.f64 #s(literal 2 binary64) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64))))","(*.f64 (*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (sin.f64 x)) (*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 x))))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))) (+.f64 #s(literal 0 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))))","(/.f64 (/.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(fma.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 (tan.f64 x) (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (tan.f64 x)) (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (*.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal 2 binary64)))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (/.f64 (/.f64 (-.f64 (sin.f64 x) (tan.f64 x)) #s(literal -1 binary64)) (tan.f64 x))))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (-.f64 (/.f64 #s(literal 1/2 binary64) (sin.f64 x)) (/.f64 (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)) (sin.f64 x))))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(*.f64 (/.f64 (-.f64 (sin.f64 x) (tan.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)))","(*.f64 (pow.f64 (/.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(-.f64 (/.f64 (*.f64 #s(literal 1 binary64) (tan.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))) (/.f64 (sin.f64 x) (*.f64 (sin.f64 x) (tan.f64 x))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))))","(fma.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (-.f64 (/.f64 #s(literal 1/2 binary64) (sin.f64 x)) (/.f64 (*.f64 #s(literal 1/2 binary64) (cos.f64 (+.f64 x x))) (sin.f64 x)))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (/.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (fma.f64 (/.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))))"]],"memory":[[696432,16868784]],"oracle":[63.732797466840914],"outputs":[["(tan.f64 (*.f64 #s(literal 1/2 binary64) x))"]],"repr":["binary64"],"time":34.18994140625,"times":[[13.77587890625,"x"],[16.873779296875,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[29.62040572701074],"baseline":[32.217661741266355],"branch":[["x",29.99427454814628,2,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))",29.62040572701074,2,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[9,2]],"inputs":[["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (fma.f64 (*.f64 x x) (*.f64 #s(literal 1/24 binary64) x) (*.f64 #s(literal 1/2 binary64) x)))","#s(approx (/ (- 1 (cos x)) (sin x)) (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) x)))","(/.f64 #s(literal 1 binary64) #s(approx (pow (tan (* x 1/2)) -1) (/.f64 #s(literal 2 binary64) x)))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","(/.f64 #s(literal 1 binary64) #s(approx (pow (tan (* x 1/2)) -1) (/.f64 (fma.f64 #s(literal -1/6 binary64) (*.f64 x x) #s(literal 2 binary64)) x)))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","(pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))"]],"memory":[[4798688,4798688]],"oracle":[61.83619595643629],"outputs":[["(/.f64 #s(literal 1 binary64) #s(approx (pow (tan (* x 1/2)) -1) (/.f64 (fma.f64 #s(literal -1/6 binary64) (*.f64 x x) #s(literal 2 binary64)) x)))","(pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))"]],"repr":["binary64"],"time":7.406005859375,"times":[[2.806884765625,"x"],[3.64794921875,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[32.21766174126634],"baseline":[32.217661741266355],"branch":[["x",32.21766174126634,1,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))",32.21766174126636,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[8,1]],"inputs":[["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (fma.f64 (*.f64 x x) (*.f64 #s(literal 1/24 binary64) x) (*.f64 #s(literal 1/2 binary64) x)))","#s(approx (/ (- 1 (cos x)) (sin x)) (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) x)))","(/.f64 #s(literal 1 binary64) #s(approx (pow (tan (* x 1/2)) -1) (/.f64 #s(literal 2 binary64) x)))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","(/.f64 #s(literal 1 binary64) #s(approx (pow (tan (* x 1/2)) -1) (/.f64 (fma.f64 #s(literal -1/6 binary64) (*.f64 x x) #s(literal 2 binary64)) x)))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))"]],"memory":[[-3695504,4562016]],"oracle":[33.03217267932499],"outputs":[["(/.f64 #s(literal 1 binary64) #s(approx (pow (tan (* x 1/2)) -1) (/.f64 (fma.f64 #s(literal -1/6 binary64) (*.f64 x x) #s(literal 2 binary64)) x)))"]],"repr":["binary64"],"time":5.89990234375,"times":[[2.5,"x"],[2.60302734375,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[32.3532524870236],"baseline":[32.35325248702361],"branch":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))",32.3532524870236,1,"binary64"],["x",32.35325248702361,1,"binary64"]],"compiler":[[7,6],[1,1]],"count":[[6,1]],"inputs":[["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (fma.f64 (*.f64 x x) (*.f64 #s(literal 1/24 binary64) x) (*.f64 #s(literal 1/2 binary64) x)))","#s(approx (/ (- 1 (cos x)) (sin x)) (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) x)))","(/.f64 #s(literal 1 binary64) #s(approx (pow (tan (* x 1/2)) -1) (/.f64 #s(literal 2 binary64) x)))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))"]],"link":["."],"memory":[[4112992,4112992]],"name":["tanhf (example 3.4)"],"oracle":[32.803586818502076],"outputs":[["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))"]],"repr":["binary64"],"time":5.052001953125,"times":[[2.3798828125,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))"],[1.966064453125,"x"]],"type":"regimes"},{"bstep":[[0.219970703125,0.014363871340382797,0.04110231675160633]],"compiler":[[3,4],[7,6]],"memory":[[170896,170896]],"method":["left-value"],"time":0.698974609375,"type":"bsearch"},{"egraph":[[9,6231,59,0.029626586],[8,4814,59,0.049569767],[7,436,59,0.015836706],[6,195,59,0.001899669],[5,120,59,0.001144041],[4,91,59,0.000956863],[3,64,59,0.000690361],[2,51,59,0.000595858],[1,44,59,0.000565877],[0,30,59,0.00059132]],"inputs":[["(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal 5764607523034235/288230376151711744 binary64)) (/.f64 #s(literal 1 binary64) #s(approx (pow (tan (* x 1/2)) -1) (/.f64 (fma.f64 #s(literal -1/6 binary64) (*.f64 x x) #s(literal 2 binary64)) x))) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))","(/.f64 #s(literal 1 binary64) #s(approx (pow (tan (* x 1/2)) -1) (/.f64 (fma.f64 #s(literal -1/6 binary64) (*.f64 x x) #s(literal 2 binary64)) x)))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))"]],"memory":[[-17686448,10786928]],"method":["egg-herbie"],"outputs":[["(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal 5764607523034235/288230376151711744 binary64)) (/.f64 #s(literal 1 binary64) #s(approx (pow (tan (* x 1/2)) -1) (/.f64 (fma.f64 #s(literal -1/6 binary64) (*.f64 x x) #s(literal 2 binary64)) x))) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))","(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal 5764607523034235/288230376151711744 binary64)) (pow.f64 #s(approx (pow (tan (* x 1/2)) -1) (/.f64 (fma.f64 #s(literal -1/6 binary64) (*.f64 x x) #s(literal 2 binary64)) x)) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))","(/.f64 #s(literal 1 binary64) #s(approx (pow (tan (* x 1/2)) -1) (/.f64 (fma.f64 #s(literal -1/6 binary64) (*.f64 x x) #s(literal 2 binary64)) x)))","(pow.f64 #s(approx (pow (tan (* x 1/2)) -1) (/.f64 (fma.f64 #s(literal -1/6 binary64) (*.f64 x x) #s(literal 2 binary64)) x)) #s(literal -1 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))"]],"stop":[["node limit",1]],"time":128.72412109375,"type":"simplify"},{"compiler":[[62,33],[3,3],[10,8],[11,9],[10,8],[11,9],[11,9]],"egraph":[[0,9106,11,0.061923427],[3,2387,11,0.034682545],[2,247,12,0.008124195],[1,39,12,0.001129335],[0,10,12,0.00058667],[0,6,15,8.8279e-5],[0,8701,51,0.084119502],[2,1094,51,0.027037229],[1,143,51,0.004003529],[0,39,51,0.001222421],[0,24,83,0.000246132],[0,8041,172,0.096609925],[8,6812,196,0.023462827],[7,5339,196,0.021560303],[6,4608,196,0.013186651],[5,4256,196,0.009868211],[4,3002,196,0.013161045],[3,1661,196,0.011594244],[2,555,196,0.005953212],[1,224,202,0.001663233],[0,79,202,0.000738489],[0,8024,603,0.092524622],[5,7337,679,0.022243538],[4,5463,679,0.024969582],[3,3975,679,0.018777125],[2,1339,685,0.014592918],[1,551,692,0.00513786],[0,231,698,0.001945414]],"memory":[[3895760,3895760]],"stop":[["fuel",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1]],"time":1408.97802734375,"type":"soundness"},{"compiler":[[62,33],[62,33],[4,4],[4,4],[7,6],[7,6],[4,4],[4,4],[4,4],[4,4]],"memory":[[2292528,26106432]],"remove-preprocessing":[["(negabs x)"],[],["(negabs x)"],[],[]],"time":214.033935546875,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.01611328125,"type":"end"}]