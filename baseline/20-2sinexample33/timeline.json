[{"memory":[[27264,27264]],"time":0.051025390625,"type":"start"},{"compiler":[[27,19]],"memory":[[4565584,12726832]],"method":["search"],"sampling":[[12,{"invalid":0.4790512532736102,"precondition":0.4942799140699208,"unknown":0.02666883265646902,"valid":0.0}],[11,{"invalid":0.47510031510228146,"precondition":0.4942799140699208,"unknown":0.030619770827797765,"valid":0.0}],[10,{"invalid":0.46028429695979867,"precondition":0.4942799140699208,"unknown":0.045435788970280555,"valid":0.0}],[9,{"invalid":0.44645601336014806,"precondition":0.4942799140699208,"unknown":0.05926407256993116,"valid":0.0}],[8,{"invalid":0.41879944616084686,"precondition":0.4942799140699208,"unknown":0.08692063976923237,"valid":0.0}],[7,{"invalid":0.3950938171328744,"precondition":0.4942799140699208,"unknown":0.11062626879720483,"valid":0.0}],[6,{"invalid":0.34768255907692946,"precondition":0.4942799140699208,"unknown":0.15803752685314976,"valid":0.0}],[5,{"invalid":0.3160750537062995,"precondition":0.4942799140699208,"unknown":0.1896450322237797,"valid":0.0}],[4,{"invalid":0.2528600429650396,"precondition":0.4942799140699208,"unknown":0.2528600429650396,"valid":0.0}],[3,{"invalid":0.2528600429650396,"precondition":0.4942799140699208,"unknown":0.2528600429650396,"valid":0.0}],[2,{"invalid":0.0,"precondition":0.4942799140699208,"unknown":0.5057200859300792,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.4942799140699208,"unknown":0.5057200859300792,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.4942799140699208,"unknown":0.5057200859300792,"valid":0.0}]],"time":58.802001953125,"type":"analyze"},{"bogosity":[{"invalid":0.49928213615195616,"precondition":0.4942799140699208,"valid":0.006437949778123048}],"memory":[[-3681080,1644028224]],"mixsample":[[89.823486328125,"adjust",800],[241.995849609375,"ival-add",0],[0.524169921875,"ival-sin",400],[262.7861328125,"ival-mult",0],[376.599609375,"ival-fabs",0],[607.710205078125,"ival-sin",0],[15.899169921875,"ival-assert",0],[198.165283203125,"ival-sub",0],[118.2841796875,"ival-and",0],[0.028076171875,"ival-sub",400],[614.213134765625,"const",0],[51.657958984375,"exact",0],[222.104736328125,"ival-<=",0],[179.216064453125,"ival-<",0]],"outcomes":[[499.335205078125,1,"valid",2702],[2985.470703125,0,"invalid",25944],[591.14404296875,0,"valid",5554]],"time":5502.739990234375,"type":"sample"},{"compiler":[[7,6],[20,8],[20,8]],"confusion":[[221,3,3,29]],"explanations":[["sin.f64","(sin.f64 (+.f64 x eps))","sensitivity",1,0,[],[[1]]],["-.f64","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","cancellation",224,8,[],[[]]]],"fperrors":[["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",224,3,[-2.5164585635807402e-251,2.4127246024979117e-253],3,[-2.825378576556166e-56,3.1259371470460234e-58]],["(sin.f64 (+.f64 x eps))",1,0,false,0,false],["eps",0,0,false,0,false],["(+.f64 x eps)",0,0,false,0,false],["(sin.f64 x)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[2,1],[1,223],[0,32]],"maybe-confusion":[[221,3,0,3,5,24]],"memory":[[-3321008,38818304]],"mixsample":[[3.60546875,"adjust",800],[3.007568359375,"ival-sub",0],[0.387451171875,"ival-true",0],[2.943603515625,"ival-add",0],[0.32275390625,"ival-sin",400],[0.0087890625,"ival-sub",400],[9.682861328125,"ival-sin",0],[0.24658203125,"ival-assert",0]],"outcomes":[[17.44970703125,1,"valid",168],[17.71484375,0,"valid",344]],"time":81.7138671875,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[7,6]],"egraph":[[0,183,7,0.000588397],[10,183,7,0.000751393],[9,175,7,0.000874668],[8,159,7,0.0008351],[7,110,7,0.000729144],[6,80,7,0.000722477],[5,47,7,0.000414019],[4,32,7,0.00021794],[3,24,7,0.000173058],[2,18,7,0.000128551],[1,13,7,0.000121494],[0,10,7,0.000136255],[0,6,7,9.3394e-5],[8,521,35,0.002441117],[7,509,35,0.002619603],[6,469,35,0.002481548],[5,383,35,0.002261545],[4,312,35,0.001806625],[3,169,35,0.001462391],[2,86,35,0.000677062],[1,38,35,0.00030535],[0,18,39,0.000220823]],"inputs":[["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"memory":[[-1747616,6183264]],"method":["egg-herbie"],"outputs":[["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1],["saturated",1]],"symmetry":[[]],"time":38.758056640625,"type":"preprocess"},{"compiler":[[0,2]],"memory":[[45648,45648]],"time":0.068115234375,"type":"eval"},{"alts":[["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","next",23.518393743639827,"binary64"]],"compiler":[[7,6]],"memory":[[314976,314976]],"time":0.430908203125,"type":"prune"},{"egraph":[[0,183,18,0.000667646],[10,183,18,0.000747259],[9,175,18,0.000951394],[8,159,18,0.000997708],[7,110,18,0.000804603],[6,80,18,0.000748692],[5,47,18,0.000425916],[4,32,18,0.000220041],[3,24,18,0.00017477],[2,18,18,0.000128819],[1,13,18,0.000124327],[0,10,18,0.000123015],[0,6,18,0.000100125]],"inputs":[["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(sin.f64 (+.f64 x eps))","(+.f64 x eps)","x","eps","(sin.f64 x)"]],"locations":[["(sin.f64 x)","cost-diff",0],["(+.f64 x eps)","cost-diff",0],["(sin.f64 (+.f64 x eps))","cost-diff",0],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","cost-diff",0]],"memory":[[815120,815120]],"method":["egg-herbie"],"outputs":[["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(sin.f64 (+.f64 x eps))","(sin.f64 (+.f64 eps x))","(+.f64 x eps)","(+.f64 eps x)","x","eps","(sin.f64 x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":12.152099609375,"type":"simplify"},{"compiler":[[20,8]],"locations":[["(+.f64 x eps)","accuracy",0.0],["(sin.f64 x)","accuracy",0.0078125],["(sin.f64 (+.f64 x eps))","accuracy",0.0698481014088871],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","accuracy",23.44485954014972]],"memory":[[382640,8423520]],"mixsample":[[1.701416015625,"adjust",800],[1.50439453125,"ival-sub",0],[0.152587890625,"ival-true",0],[3.76416015625,"ival-add",0],[0.16796875,"ival-sin",400],[0.0048828125,"ival-sub",400],[4.813720703125,"ival-sin",0],[0.093994140625,"ival-assert",0]],"outcomes":[[8.661376953125,1,"valid",84],[11.601318359375,0,"valid",172]],"time":27.512939453125,"type":"localize"},{"count":[[4,31]],"inputs":[["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(sin.f64 (+.f64 x eps))","(+.f64 x eps)","(sin.f64 x)"]],"memory":[[1869088,1869088]],"outputs":[["(sin eps)","(+ (sin eps) (* x (- (cos eps) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* x (+ 1/6 (* -1/6 (cos eps))))))) 1)))","(+ (sin eps) (* x (cos eps)))","(+ (sin eps) (* x (+ (cos eps) (* -1/2 (* x (sin eps))))))","(+ (sin eps) (* x (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* -1/6 (* x (cos eps))))))))","eps","(+ eps x)","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(- (sin (+ eps x)) (sin x))","(sin (+ eps x))","(* x (+ 1 (/ eps x)))","(sin x)","(- (sin (- eps (* -1 x))) (sin x))","(sin (- eps (* -1 x)))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(* eps (cos x))","(* eps (+ (cos x) (* -1/2 (* eps (sin x)))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x)))))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x)))))))))","(+ (sin x) (* eps (cos x)))","(+ (sin x) (* eps (+ (cos x) (* -1/2 (* eps (sin x))))))","(+ (sin x) (* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x))))))))","(* eps (+ 1 (/ x eps)))","(- (sin (- x (* -1 eps))) (sin x))","(sin (- x (* -1 eps)))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))"]],"series":[[0.971923828125,"((- (sin (+ x eps)) (sin x)) (sin (+ x eps)) (+ x eps) (sin x))","eps","-inf"],[1.376953125,"((- (sin (+ x eps)) (sin x)) (sin (+ x eps)) (+ x eps) (sin x))","eps","inf"],[0.987060546875,"((- (sin (+ x eps)) (sin x)) (sin (+ x eps)) (+ x eps) (sin x))","eps","0"],[0.636962890625,"((- (sin (+ x eps)) (sin x)) (sin (+ x eps)) (+ x eps) (sin x))","x","-inf"],[0.697021484375,"((- (sin (+ x eps)) (sin x)) (sin (+ x eps)) (+ x eps) (sin x))","x","inf"],[1.27099609375,"((- (sin (+ x eps)) (sin x)) (sin (+ x eps)) (+ x eps) (sin x))","x","0"]],"time":6.7470703125,"type":"series"},{"count":[[31,29]],"egraph":[[0,8157,253,0.085702859],[4,6191,283,0.029439723],[3,2853,284,0.026618719],[2,781,284,0.012356573],[1,314,291,0.003094505],[0,107,291,0.001377641]],"inputs":[["(sin eps)","(+ (sin eps) (* x (- (cos eps) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* x (+ 1/6 (* -1/6 (cos eps))))))) 1)))","(+ (sin eps) (* x (cos eps)))","(+ (sin eps) (* x (+ (cos eps) (* -1/2 (* x (sin eps))))))","(+ (sin eps) (* x (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* -1/6 (* x (cos eps))))))))","eps","(+ eps x)","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(- (sin (+ eps x)) (sin x))","(sin (+ eps x))","(* x (+ 1 (/ eps x)))","(sin x)","(- (sin (- eps (* -1 x))) (sin x))","(sin (- eps (* -1 x)))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(* eps (cos x))","(* eps (+ (cos x) (* -1/2 (* eps (sin x)))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x)))))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x)))))))))","(+ (sin x) (* eps (cos x)))","(+ (sin x) (* eps (+ (cos x) (* -1/2 (* eps (sin x))))))","(+ (sin x) (* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x))))))))","(* eps (+ 1 (/ x eps)))","(- (sin (- x (* -1 eps))) (sin x))","(sin (- x (* -1 eps)))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))"]],"memory":[[-829824,40388368]],"method":["egg-herbie"],"outputs":[["(sin eps)","(sin.f64 eps)","(+ (sin eps) (* x (- (cos eps) 1)))","(fma.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) x (sin.f64 eps))","(+ (sin eps) (* x (- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)))","(fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* x (+ 1/6 (* -1/6 (cos eps))))))) 1)))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) (cos.f64 eps) #s(literal 1/6 binary64)) x (*.f64 #s(literal -1/2 binary64) (sin.f64 eps))) x (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps))","(+ (sin eps) (* x (cos eps)))","(fma.f64 (cos.f64 eps) x (sin.f64 eps))","(+ (sin eps) (* x (+ (cos eps) (* -1/2 (* x (sin eps))))))","(fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (cos.f64 eps)) x (sin.f64 eps))","(+ (sin eps) (* x (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* -1/6 (* x (cos eps))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 eps) x) #s(literal -1/6 binary64) (*.f64 #s(literal -1/2 binary64) (sin.f64 eps))) x (cos.f64 eps)) x (sin.f64 eps))","eps","(+ eps x)","(+.f64 eps x)","x","(* x (+ 1 (* -1/6 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/6 binary64) x)","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal -1/6 binary64)) x)","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) x)","(- (sin (+ eps x)) (sin x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(sin (+ eps x))","(sin.f64 (+.f64 eps x))","(* x (+ 1 (/ eps x)))","(+.f64 eps x)","(sin x)","(sin.f64 x)","(- (sin (- eps (* -1 x))) (sin x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(sin (- eps (* -1 x)))","(sin.f64 (+.f64 eps x))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(+.f64 eps x)","(* eps (cos x))","(*.f64 (cos.f64 x) eps)","(* eps (+ (cos x) (* -1/2 (* eps (sin x)))))","(*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps)","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps)","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x)))))))))","(*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x)) eps)","(+ (sin x) (* eps (cos x)))","(fma.f64 (cos.f64 x) eps (sin.f64 x))","(+ (sin x) (* eps (+ (cos x) (* -1/2 (* eps (sin x))))))","(fma.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps (sin.f64 x))","(+ (sin x) (* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps (sin.f64 x))","(* eps (+ 1 (/ x eps)))","(+.f64 eps x)","(- (sin (- x (* -1 eps))) (sin x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(sin (- x (* -1 eps)))","(sin.f64 (+.f64 eps x))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))","(+.f64 eps x)"]],"stop":[["iter limit",1],["node limit",1]],"time":303.680908203125,"type":"simplify"},{"count":[[4,214]],"egraph":[[0,8393,16,0.076360168],[3,4851,16,0.042915019],[2,385,16,0.013848443],[1,53,16,0.001399711],[0,10,16,0.000586162],[0,6,16,8.9478e-5]],"inputs":[["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(sin.f64 (+.f64 x eps))","(+.f64 x eps)","(sin.f64 x)"]],"memory":[[-20307072,51407968]],"outputs":[["(*.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (sin.f64 x) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 9 binary64)) (pow.f64 (sin.f64 x) #s(literal 9 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 6 binary64)) (+.f64 (pow.f64 (*.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 6 binary64)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (sin.f64 x) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal 2 binary64) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x)))) #s(literal -1 binary64)) (pow.f64 (/.f64 (*.f64 (cos.f64 (/.f64 (+.f64 #s(literal 0 binary64) eps) #s(literal -2 binary64))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps)))) (-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 4 binary64)) (pow.f64 (*.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (*.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x))))","(*.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 6 binary64)))) (fma.f64 (*.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x)) (-.f64 (*.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x)) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 4 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (fma.f64 (sin.f64 x) (-.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))))","(*.f64 (*.f64 #s(literal 2 binary64) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64)))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))))","(*.f64 (/.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) #s(literal 2 binary64)) (/.f64 (-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x)) (*.f64 (cos.f64 (/.f64 (+.f64 #s(literal 0 binary64) eps) #s(literal -2 binary64))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))))))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(*.f64 (pow.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) #s(literal -1 binary64)) (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(*.f64 (pow.f64 (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (pow.f64 (neg.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x)))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (pow.f64 (neg.f64 (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x)))","(*.f64 #s(literal 1/2 binary64) (pow.f64 (/.f64 (*.f64 (cos.f64 (/.f64 (+.f64 #s(literal 0 binary64) eps) #s(literal -2 binary64))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps)))) (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (/.f64 (-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x)))))","(*.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (*.f64 (-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x)) (pow.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))) (/.f64 (-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(*.f64 (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))) (*.f64 (-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x)) (pow.f64 (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))) #s(literal 2 binary64))","(*.f64 (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))) (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))) #s(literal 2 binary64)))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))) (*.f64 (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))) #s(literal 2 binary64)))","(*.f64 #s(literal 2 binary64) (*.f64 (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))))","(pow.f64 (/.f64 (pow.f64 (-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 (cos.f64 (/.f64 (+.f64 #s(literal 0 binary64) eps) #s(literal -2 binary64))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (pow.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) #s(literal -1 binary64))) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (sin.f64 x) #s(literal 6 binary64))) (pow.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (sin.f64 x) #s(literal 6 binary64))) (pow.f64 (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64))) (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 9 binary64)) (pow.f64 (sin.f64 x) #s(literal 9 binary64))) (pow.f64 (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64))) (+.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 6 binary64)) (+.f64 (pow.f64 (*.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 6 binary64)))))","(/.f64 (*.f64 (+.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 (+.f64 #s(literal 0 binary64) eps) (fma.f64 #s(literal 2 binary64) x eps)))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (+.f64 #s(literal 0 binary64) eps) (fma.f64 #s(literal 2 binary64) x eps))))) #s(literal 2 binary64)) #s(literal 2 binary64))","(/.f64 (*.f64 #s(literal 2 binary64) (+.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 (+.f64 #s(literal 0 binary64) eps) (fma.f64 #s(literal 2 binary64) x eps)))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (+.f64 #s(literal 0 binary64) eps) (fma.f64 #s(literal 2 binary64) x eps)))))) #s(literal 2 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x)))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x)))) #s(literal 2 binary64))) (+.f64 (/.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))) #s(literal 2 binary64))) (+.f64 (/.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 (fma.f64 (sin.f64 eps) (cos.f64 x) (neg.f64 (sin.f64 x))) #s(literal 2 binary64))) (-.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) (fma.f64 (sin.f64 eps) (cos.f64 x) (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (neg.f64 (sin.f64 x)) (sin.f64 (+.f64 eps x))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x)))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (sin.f64 eps) (cos.f64 x) (neg.f64 (sin.f64 x))) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (fma.f64 (sin.f64 eps) (cos.f64 x) (neg.f64 (sin.f64 x))) #s(literal 2 binary64)) (*.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) (fma.f64 (sin.f64 eps) (cos.f64 x) (neg.f64 (sin.f64 x)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (sin.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 4 binary64))) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (sin.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 9 binary64)) (pow.f64 (sin.f64 x) #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 6 binary64)) (+.f64 (pow.f64 (*.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 6 binary64)))) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x)))) (*.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (pow.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (*.f64 (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (*.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (sin.f64 x) #s(literal 6 binary64))) (*.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (+.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (sin.f64 x) #s(literal 6 binary64))) (*.f64 (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 9 binary64)) (pow.f64 (sin.f64 x) #s(literal 9 binary64))) (*.f64 (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 6 binary64)) (+.f64 (pow.f64 (*.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 6 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x)) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))))","(/.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (fma.f64 (sin.f64 x) (sin.f64 x) (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 (+.f64 eps x))))))","(/.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x)))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (neg.f64 (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(fma.f64 (pow.f64 (*.f64 (sin.f64 (+.f64 eps x)) (sin.f64 (-.f64 x eps))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 (-.f64 x eps)) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)))","(fma.f64 (pow.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) (sin.f64 (-.f64 eps x)) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 4 binary64)) (pow.f64 (*.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (*.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x))) (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 6 binary64)))) (fma.f64 (*.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x)) (-.f64 (*.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x)) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 4 binary64))) (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (fma.f64 (sin.f64 x) (-.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))) (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))))))","(fma.f64 (/.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x)) (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))))))","(fma.f64 (/.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (/.f64 (sin.f64 (+.f64 eps x)) (*.f64 (cos.f64 (/.f64 (+.f64 #s(literal 0 binary64) eps) #s(literal -2 binary64))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))))) (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))))))","(fma.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3/2 binary64)) (/.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3/2 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(fma.f64 (*.f64 (sin.f64 (+.f64 eps x)) (sin.f64 (-.f64 x eps))) (pow.f64 (sin.f64 (-.f64 x eps)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))","(fma.f64 #s(literal -1 binary64) (sin.f64 x) (sin.f64 (+.f64 eps x)))","(fma.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) (sin.f64 (-.f64 eps x)) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))","(fma.f64 (+.f64 (sin.f64 (-.f64 x eps)) (sin.f64 (+.f64 eps x))) #s(literal 1/2 binary64) (fma.f64 (sin.f64 eps) (cos.f64 x) (neg.f64 (sin.f64 x))))","(fma.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (/.f64 (sin.f64 (+.f64 eps x)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(fma.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))))))","(fma.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(fma.f64 (sin.f64 eps) (cos.f64 x) (-.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) (sin.f64 x)))","(fma.f64 (sin.f64 eps) (cos.f64 x) (fma.f64 (cos.f64 eps) (sin.f64 x) (neg.f64 (sin.f64 x))))","(fma.f64 (cos.f64 x) (sin.f64 eps) (-.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) (sin.f64 x)))","(fma.f64 (cos.f64 x) (sin.f64 eps) (fma.f64 (cos.f64 eps) (sin.f64 x) (neg.f64 (sin.f64 x))))","(fma.f64 (cos.f64 eps) (sin.f64 x) (fma.f64 (sin.f64 eps) (cos.f64 x) (neg.f64 (sin.f64 x))))","(fma.f64 (sin.f64 x) #s(literal -1 binary64) (sin.f64 (+.f64 eps x)))","(fma.f64 (sin.f64 x) (cos.f64 eps) (fma.f64 (sin.f64 eps) (cos.f64 x) (neg.f64 (sin.f64 x))))","(fma.f64 (sin.f64 (+.f64 eps x)) (/.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(fma.f64 (sin.f64 (+.f64 eps x)) (/.f64 (sin.f64 (+.f64 eps x)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x)))) (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))))))","(-.f64 (+.f64 (sin.f64 (+.f64 eps x)) #s(literal 0 binary64)) (sin.f64 x))","(-.f64 #s(literal 0 binary64) (-.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))))","(-.f64 (/.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x)))))","(-.f64 (/.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (fma.f64 #s(literal -1 binary64) (sin.f64 x) (*.f64 (cos.f64 eps) (sin.f64 x))) (*.f64 (sin.f64 eps) (cos.f64 x)))","(+.f64 (fma.f64 (sin.f64 eps) (cos.f64 x) (neg.f64 (sin.f64 x))) (*.f64 (cos.f64 eps) (sin.f64 x)))","(+.f64 (/.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x)))) (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))))))","(+.f64 (/.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(+.f64 (neg.f64 (sin.f64 x)) (sin.f64 (+.f64 eps x)))","(+.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) (-.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) (sin.f64 x)))","(+.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) (fma.f64 (cos.f64 eps) (sin.f64 x) (neg.f64 (sin.f64 x))))","(+.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) (fma.f64 (sin.f64 eps) (cos.f64 x) (neg.f64 (sin.f64 x))))","(+.f64 (sin.f64 (+.f64 eps x)) (neg.f64 (sin.f64 x)))","(*.f64 (pow.f64 (*.f64 (sin.f64 (+.f64 eps x)) (sin.f64 (-.f64 x eps))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 (-.f64 x eps)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) (sin.f64 (-.f64 eps x)) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 (sin.f64 (+.f64 eps x)) (sin.f64 (-.f64 x eps))) (pow.f64 (sin.f64 (-.f64 x eps)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) (sin.f64 (-.f64 eps x)) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (sin.f64 (-.f64 x eps)) (*.f64 (sin.f64 (+.f64 eps x)) (sin.f64 (-.f64 x eps)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) (sin.f64 (-.f64 eps x)) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 1 binary64))","(/.f64 (-.f64 (pow.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 2 binary64))) (sin.f64 (-.f64 eps x)))","(/.f64 (neg.f64 (*.f64 (sin.f64 (+.f64 eps x)) (sin.f64 (-.f64 x eps)))) (neg.f64 (sin.f64 (-.f64 x eps))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) (sin.f64 (-.f64 eps x)) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (sin.f64 (+.f64 eps x)) (sin.f64 (-.f64 x eps))) (sin.f64 (-.f64 x eps)))","(/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) (sin.f64 eps)) (cos.f64 x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 3 binary64))) (fma.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) (sin.f64 (-.f64 eps x)) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 (-.f64 x eps)) (*.f64 (sin.f64 (+.f64 eps x)) (sin.f64 (-.f64 x eps)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) (sin.f64 (-.f64 eps x)) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 3 binary64)))))","(neg.f64 (sin.f64 (/.f64 (neg.f64 (*.f64 (-.f64 x eps) (+.f64 eps x))) (-.f64 x eps))))","(neg.f64 (sin.f64 (/.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (-.f64 eps x) eps (*.f64 x x)))))","(neg.f64 (sin.f64 (/.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)) (neg.f64 (-.f64 x eps)))))","(neg.f64 (sin.f64 (/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x))))))","(fma.f64 (sin.f64 (*.f64 x (/.f64 x (-.f64 x eps)))) (cos.f64 (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps))))) (*.f64 (cos.f64 (*.f64 x (/.f64 x (-.f64 x eps)))) (sin.f64 (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))))))","(fma.f64 (+.f64 (sin.f64 (-.f64 x eps)) (sin.f64 (+.f64 eps x))) #s(literal 1/2 binary64) (*.f64 (sin.f64 eps) (cos.f64 x)))","(fma.f64 (sin.f64 eps) (cos.f64 x) (*.f64 (cos.f64 eps) (sin.f64 x)))","(fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (cos.f64 eps) (sin.f64 x)))","(fma.f64 (cos.f64 eps) (sin.f64 x) (*.f64 (sin.f64 eps) (cos.f64 x)))","(fma.f64 (sin.f64 x) (cos.f64 eps) (*.f64 (sin.f64 eps) (cos.f64 x)))","(sin.f64 (+.f64 eps x))","(-.f64 (*.f64 (sin.f64 (/.f64 (*.f64 eps eps) (-.f64 eps x))) (cos.f64 (/.f64 (*.f64 x x) (-.f64 eps x)))) (*.f64 (cos.f64 (/.f64 (*.f64 eps eps) (-.f64 eps x))) (sin.f64 (/.f64 (*.f64 x x) (-.f64 eps x)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 2 binary64)) (sin.f64 (-.f64 x eps))) (/.f64 (pow.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) #s(literal 2 binary64)) (sin.f64 (-.f64 x eps))))","(-.f64 (*.f64 (sin.f64 (*.f64 x (/.f64 x (-.f64 x eps)))) (cos.f64 (*.f64 eps (/.f64 eps (-.f64 x eps))))) (*.f64 (cos.f64 (*.f64 x (/.f64 x (-.f64 x eps)))) (sin.f64 (*.f64 eps (/.f64 eps (-.f64 x eps))))))","(exp.f64 (*.f64 (log.f64 (sin.f64 (+.f64 eps x))) #s(literal 1 binary64)))","(+.f64 (*.f64 (sin.f64 (*.f64 x (/.f64 x (-.f64 x eps)))) (cos.f64 (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))))) (*.f64 (cos.f64 (*.f64 x (/.f64 x (-.f64 x eps)))) (sin.f64 (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))))))","(+.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) (*.f64 (cos.f64 eps) (sin.f64 x)))","(+.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) (*.f64 (sin.f64 eps) (cos.f64 x)))","(*.f64 (pow.f64 (/.f64 (-.f64 x eps) (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 eps #s(literal 4 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 eps eps (*.f64 x x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 x eps) (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 eps eps) (fma.f64 eps eps (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) (+.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 x #s(literal 9 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 (*.f64 eps x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps (+.f64 eps x) (*.f64 x x)))","(*.f64 (/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (*.f64 (-.f64 eps x) eps) #s(literal 2 binary64)))) (-.f64 (*.f64 x x) (*.f64 (-.f64 eps x) eps)))","(*.f64 (/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (-.f64 eps x) eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (*.f64 (-.f64 eps x) eps) (-.f64 (*.f64 (-.f64 eps x) eps) (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (/.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)) (*.f64 (-.f64 x eps) (+.f64 eps x))) (+.f64 eps x))","(*.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (pow.f64 (-.f64 eps x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 x eps) #s(literal -1 binary64)) (pow.f64 (pow.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 x eps) #s(literal -1 binary64)) (*.f64 (-.f64 x eps) (+.f64 eps x)))","(*.f64 (pow.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) #s(literal -1 binary64)) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))","(*.f64 (neg.f64 (*.f64 (-.f64 x eps) (+.f64 eps x))) (pow.f64 (neg.f64 (-.f64 x eps)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (neg.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (+.f64 eps x))","(*.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)) (pow.f64 (-.f64 x eps) #s(literal -1 binary64)))","(*.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) (/.f64 (+.f64 eps x) (fma.f64 (-.f64 eps x) eps (*.f64 x x))))","(*.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) (*.f64 (+.f64 eps x) (pow.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) #s(literal -1 binary64))))","(*.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) #s(literal -1 binary64)))","(*.f64 (+.f64 eps x) (/.f64 (-.f64 x eps) (-.f64 x eps)))","(*.f64 (+.f64 eps x) (*.f64 (-.f64 x eps) (pow.f64 (-.f64 x eps) #s(literal -1 binary64))))","(pow.f64 (/.f64 (-.f64 eps x) (*.f64 (+.f64 eps x) (-.f64 eps x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (+.f64 eps x) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (+.f64 eps x) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 eps #s(literal 4 binary64))) (pow.f64 (-.f64 x eps) #s(literal -1 binary64))) (fma.f64 eps eps (*.f64 x x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 (-.f64 x eps) #s(literal -1 binary64))) (fma.f64 (*.f64 eps eps) (fma.f64 eps eps (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 x #s(literal 9 binary64))) (pow.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 (*.f64 eps x) #s(literal 3 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 x eps))) #s(literal 2 binary64)) (pow.f64 (*.f64 eps (/.f64 eps (-.f64 x eps))) #s(literal 2 binary64))) (fma.f64 x (/.f64 x (-.f64 x eps)) (*.f64 eps (/.f64 eps (-.f64 x eps)))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x eps) #s(literal -3 binary64))) (*.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (-.f64 x eps) #s(literal -3 binary64)))) (+.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 x eps))) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 eps (/.f64 eps (-.f64 x eps))) #s(literal 2 binary64)) (*.f64 (*.f64 x (/.f64 x (-.f64 x eps))) (*.f64 eps (/.f64 eps (-.f64 x eps)))))))","(/.f64 (neg.f64 (*.f64 (+.f64 eps x) (-.f64 eps x))) (neg.f64 (-.f64 eps x)))","(/.f64 (neg.f64 (neg.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)))) (neg.f64 (neg.f64 (-.f64 x eps))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 eps #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 eps eps (*.f64 x x)) (-.f64 x eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (*.f64 eps eps) (fma.f64 eps eps (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (-.f64 x eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (-.f64 eps x) eps (*.f64 x x))))","(/.f64 (*.f64 (+.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 x #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 (*.f64 eps x) #s(literal 3 binary64))) (fma.f64 (-.f64 eps x) eps (*.f64 x x))))","(/.f64 (*.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 (-.f64 eps x) eps (*.f64 x x)))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x eps)) (*.f64 (-.f64 x eps) (*.f64 eps eps))) (pow.f64 (-.f64 x eps) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (-.f64 x eps) (fma.f64 eps eps (*.f64 x x))))","(/.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (-.f64 eps x))","(/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (*.f64 (-.f64 x eps) (fma.f64 (*.f64 eps eps) (fma.f64 eps eps (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (*.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (+.f64 eps x) #s(literal -1 binary64))))","(/.f64 (+.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 x #s(literal 9 binary64))) (*.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 (*.f64 eps x) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 x eps) (+.f64 eps x))) (neg.f64 (-.f64 x eps)))","(/.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 eps x) (*.f64 (+.f64 eps x) (-.f64 eps x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (+.f64 eps x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 eps x) #s(literal -1 binary64)))","(/.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)) (-.f64 x eps))","(/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 eps x) eps (*.f64 x x)))","(neg.f64 (/.f64 (neg.f64 (*.f64 (-.f64 x eps) (+.f64 eps x))) (-.f64 x eps)))","(neg.f64 (/.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (-.f64 eps x) eps (*.f64 x x))))","(neg.f64 (/.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)) (neg.f64 (-.f64 x eps))))","(neg.f64 (/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)))))","(fma.f64 (/.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps (+.f64 eps x) (*.f64 x x)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))))","(fma.f64 (/.f64 (*.f64 x x) (*.f64 (-.f64 x eps) (+.f64 eps x))) (+.f64 eps x) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))))","(fma.f64 (*.f64 x x) (pow.f64 (-.f64 x eps) #s(literal -1 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))))","(fma.f64 x (/.f64 x (-.f64 x eps)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))))","(-.f64 (/.f64 (*.f64 eps eps) (-.f64 eps x)) (/.f64 (*.f64 x x) (-.f64 eps x)))","(-.f64 (*.f64 x (/.f64 x (-.f64 x eps))) (*.f64 eps (/.f64 eps (-.f64 x eps))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (+.f64 eps x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (*.f64 x (/.f64 x (-.f64 x eps))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))))","(+.f64 eps x)","(+.f64 x eps)","(pow.f64 (sin.f64 x) #s(literal 1 binary64))","(sin.f64 x)","(exp.f64 (*.f64 (log.f64 (sin.f64 x)) #s(literal 1 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":249.47412109375,"type":"rewrite"},{"compiler":[[6283,852]],"memory":[[-4094912,21727600]],"time":29.544921875,"type":"eval"},{"alts":[["(fma.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (/.f64 (sin.f64 (+.f64 eps x)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","fresh",46.47655982721475,"binary64"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","done",23.518393743639827,"binary64"],["(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","next",0.08707685291289795,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps)))","next",1.1184686810190592,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x)) eps))","fresh",0.20056778350605978,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps))","next",0.42192036332670746,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))","next",0.6962720036039058,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps))","next",1.532837233870873,"binary64"]],"compiler":[[50,15],[7,6],[16,14],[22,15],[29,19],[18,13],[12,9],[10,8],[50,15],[16,14],[22,15],[29,19],[18,13],[12,9],[10,8]],"count":[[236,8]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[235,7],"picked":[1,1]}],"memory":[[3242496,11587824]],"min-error":[[0.037262339105890746,"binary64"]],"time":7.348876953125,"type":"prune"},{"egraph":[[0,8547,188,0.073032063],[13,6541,190,0.03333773],[12,5295,190,0.028186818],[11,3726,190,0.021933806],[10,3384,190,0.017445776],[9,3150,190,0.018106914],[8,2975,193,0.015719824],[7,2350,193,0.01799056],[6,1352,193,0.016292212],[5,957,193,0.00582376],[4,633,193,0.00466282],[3,359,193,0.002245554],[2,182,193,0.002099514],[1,99,193,0.000809523],[0,60,193,0.000843022],[0,36,203,0.000531686]],"inputs":[["(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))) #s(literal 2 binary64))","(sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))","(*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))","#s(literal 1/2 binary64)","(+.f64 #s(literal 0 binary64) eps)","#s(literal 0 binary64)","eps","#s(literal 2 binary64)","(cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64)))","(/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))","(fma.f64 #s(literal 2 binary64) x eps)","x","#s(literal -2 binary64)","#s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps))","(sin.f64 eps)","eps","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))","(*.f64 (cos.f64 x) eps)","(cos.f64 x)","x","eps","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps)","(fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x))","(*.f64 (sin.f64 x) #s(literal -1/2 binary64))","(sin.f64 x)","x","#s(literal -1/2 binary64)","eps","(cos.f64 x)","#s(approx (- (sin (+ x eps)) (sin x)) (fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps)))","(fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps))","(fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(*.f64 (sin.f64 eps) x)","(sin.f64 eps)","eps","x","#s(literal -1/2 binary64)","(-.f64 (cos.f64 eps) #s(literal 1 binary64))","(cos.f64 eps)","#s(literal 1 binary64)"]],"locations":[["(*.f64 (sin.f64 eps) x)","cost-diff",0],["(fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","cost-diff",0],["(fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps))","cost-diff",0],["#s(approx (- (sin (+ x eps)) (sin x)) (fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps)))","cost-diff",0],["(*.f64 (sin.f64 x) #s(literal -1/2 binary64))","cost-diff",0],["(fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x))","cost-diff",0],["(*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps)","cost-diff",0],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps))","cost-diff",0],["(cos.f64 x)","cost-diff",0],["(*.f64 (cos.f64 x) eps)","cost-diff",0],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))","cost-diff",0],["(sin.f64 eps)","cost-diff",0],["#s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps))","cost-diff",0],["(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","cost-diff",0],["(/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))","cost-diff",1],["(cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64)))","cost-diff",1],["(+.f64 #s(literal 0 binary64) eps)","cost-diff",2]],"memory":[[5312016,35505344]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(*.f64 (cos.f64 (fma.f64 eps #s(literal 1/2 binary64) x)) (*.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) eps)) #s(literal -2 binary64)))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))) #s(literal 2 binary64))","(*.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) eps)) #s(literal -2 binary64))","(sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))","(sin.f64 (*.f64 eps #s(literal 1/2 binary64)))","(*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))","(*.f64 eps #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","(+.f64 #s(literal 0 binary64) eps)","eps","#s(literal 0 binary64)","eps","#s(literal 2 binary64)","(cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64)))","(cos.f64 (fma.f64 eps #s(literal 1/2 binary64) x))","(/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))","(neg.f64 (fma.f64 eps #s(literal 1/2 binary64) x))","(fma.f64 #s(literal 2 binary64) x eps)","(fma.f64 x #s(literal 2 binary64) eps)","x","#s(literal -2 binary64)","#s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps))","(sin.f64 eps)","eps","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))","(*.f64 (cos.f64 x) eps)","(cos.f64 x)","x","eps","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps)","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps)","(fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))","(*.f64 (sin.f64 x) #s(literal -1/2 binary64))","(*.f64 #s(literal -1/2 binary64) (sin.f64 x))","(sin.f64 x)","x","#s(literal -1/2 binary64)","eps","(cos.f64 x)","#s(approx (- (sin (+ x eps)) (sin x)) (fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps)))","(fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps))","(fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(*.f64 (sin.f64 eps) x)","(sin.f64 eps)","eps","x","#s(literal -1/2 binary64)","(-.f64 (cos.f64 eps) #s(literal 1 binary64))","(cos.f64 eps)","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":357.744140625,"type":"simplify"},{"compiler":[[180,37]],"locations":[["(fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps))","accuracy",0.006191259768442017],["(fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","accuracy",0.12109375],["#s(approx (- (sin (+ x eps)) (sin x)) (fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps)))","accuracy",1.1184686810191162],["(-.f64 (cos.f64 eps) #s(literal 1 binary64))","accuracy",31.1350372229547],["(fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x))","accuracy",0.01171875],["(*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps)","accuracy",0.01171875],["(cos.f64 x)","accuracy",0.01171875],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps))","accuracy",0.41020161332953264],["(cos.f64 x)","accuracy",0.01171875],["(*.f64 (cos.f64 x) eps)","accuracy",0.015625],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))","accuracy",0.6884607009963482],["(sin.f64 eps)","accuracy",0.0],["#s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps))","accuracy",1.532837233870873],["(*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))","accuracy",0.0],["(sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))","accuracy",0.0],["(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","accuracy",0.014003759768442016],["(cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64)))","accuracy",0.08081859864955285]],"memory":[[-2543520,51096032]],"mixsample":[[0.265625,"ival-sub",1200],[21.392333984375,"adjust",800],[2.06298828125,"ival-div",0],[7.641357421875,"ival-cos",1600],[0.42333984375,"ival-sub",1600],[0.2939453125,"ival-sub",2000],[0.165771484375,"ival-assert",0],[3.977294921875,"ival-sub",0],[7.8818359375,"ival-cos",0],[16.757080078125,"ival-cos",2400],[0.294677734375,"ival-sub",400],[3.84375,"ival-cos",1200],[0.14990234375,"ival-cos",400],[0.034912109375,"ival-sub",2400],[0.091796875,"ival-mult",800],[11.3916015625,"ival-add",0],[0.4111328125,"ival-sub",800],[0.763916015625,"ival-cos",800],[2.49560546875,"ival-sin",400],[1.745849609375,"ival-mult",400],[27.09716796875,"ival-mult",0],[12.554443359375,"ival-sin",0],[7.87451171875,"ival-cos",2000],[0.09033203125,"ival-add",400],[0.297607421875,"ival-true",0],[6.698486328125,"ival-cos",2800],[0.5087890625,"ival-sin",800],[0.795654296875,"exact",0]],"outcomes":[[177.81201171875,1,"valid",253],[1.120849609375,0,"valid",3]],"time":287.781005859375,"type":"localize"},{"count":[[20,100]],"inputs":[["(+.f64 #s(literal 0 binary64) eps)","(cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64)))","(/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","#s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps))","(sin.f64 eps)","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))","(*.f64 (cos.f64 x) eps)","(cos.f64 x)","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps)","(fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x))","(*.f64 (sin.f64 x) #s(literal -1/2 binary64))","#s(approx (- (sin (+ x eps)) (sin x)) (fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps)))","(fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps))","(fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(*.f64 (sin.f64 eps) x)","(sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))","(*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))","(-.f64 (cos.f64 eps) #s(literal 1 binary64))"]],"memory":[[-1682672,13363296]],"outputs":[["(cos (* -1/2 eps))","(+ (cos (* -1/2 eps)) (* x (sin (* -1/2 eps))))","(+ (cos (* -1/2 eps)) (* x (- (* -1/2 (* x (cos (* -1/2 eps)))) (* -1 (sin (* -1/2 eps))))))","(+ (cos (* -1/2 eps)) (* x (- (* x (+ (* -1/2 (cos (* -1/2 eps))) (* -1/6 (* x (sin (* -1/2 eps)))))) (* -1 (sin (* -1/2 eps))))))","(* -1/2 eps)","(+ (* -1 x) (* -1/2 eps))","(* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps))))","(+ (* 2 (* x (* (sin (* -1/2 eps)) (sin (* 1/2 eps))))) (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))))","(+ (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* -1 (* x (* (cos (* -1/2 eps)) (sin (* 1/2 eps))))) (* 2 (* (sin (* -1/2 eps)) (sin (* 1/2 eps)))))))","(+ (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* 2 (* (sin (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* -1 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* -1/3 (* x (* (sin (* -1/2 eps)) (sin (* 1/2 eps))))))))))","(sin eps)","(+ (sin eps) (* x (- (cos eps) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* x (+ 1/6 (* -1/6 (cos eps))))))) 1)))","eps","(+ eps (* -1/2 (* eps (pow x 2))))","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* 1/24 (* eps (pow x 2))))))","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* (pow x 2) (+ (* -1/720 (* eps (pow x 2))) (* 1/24 eps))))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(+ eps (* -1/2 (* (pow eps 2) x)))","(+ eps (* x (+ (* -1/2 (* eps x)) (* -1/2 (pow eps 2)))))","(+ eps (* x (+ (* -1/2 (pow eps 2)) (* x (+ (* -1/2 eps) (* 1/12 (* (pow eps 2) x)))))))","(+ 1 (* -1/2 (* eps x)))","(+ 1 (* x (+ (* -1/2 eps) (* -1/2 x))))","(+ 1 (* x (+ (* -1/2 eps) (* x (- (* 1/12 (* eps x)) 1/2)))))","(* -1/2 x)","(* x (- (* 1/12 (pow x 2)) 1/2))","(* x (- (* (pow x 2) (+ 1/12 (* -1/240 (pow x 2)))) 1/2))","(* x (- (* (pow x 2) (+ 1/12 (* (pow x 2) (- (* 1/10080 (pow x 2)) 1/240)))) 1/2))","(- (cos eps) 1)","(- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)","(* x (sin eps))","(cos (* -1/2 (+ eps (* 2 x))))","(* -1 x)","(* x (- (* -1/2 (/ eps x)) 1))","(* 2 (* (cos (* -1/2 (+ eps (* 2 x)))) (sin (* 1/2 eps))))","(- (sin (+ eps x)) (sin x))","(* eps (cos x))","(cos x)","(* eps (+ (cos x) (* -1/2 (* eps (sin x)))))","(+ (cos x) (* -1/2 (* eps (sin x))))","(* -1/2 (sin x))","(* -1/2 (* (pow x 2) (sin eps)))","(* (pow x 2) (- (+ (* -1/2 (sin eps)) (/ (cos eps) x)) (/ 1 x)))","(* (pow x 2) (- (+ (* -1/2 (sin eps)) (+ (/ (cos eps) x) (/ (sin eps) (pow x 2)))) (/ 1 x)))","(* -1/2 (* x (sin eps)))","(* x (- (+ (* -1/2 (sin eps)) (/ (cos eps) x)) (/ 1 x)))","(cos (* -1/2 (- eps (* -2 x))))","(* -1 (* x (+ 1 (* 1/2 (/ eps x)))))","(* 2 (* (cos (* -1/2 (- eps (* -2 x)))) (sin (* 1/2 eps))))","(- (sin (- eps (* -1 x))) (sin x))","(* (pow x 2) (+ (* -1 (/ (+ (* -1 (- (cos eps) 1)) (* -1 (/ (sin eps) x))) x)) (* -1/2 (sin eps))))","(* -1 (* x (+ (* -1 (/ (- (cos eps) 1) x)) (* 1/2 (sin eps)))))","(cos (* -1 x))","(+ (cos (* -1 x)) (* 1/2 (* eps (sin (* -1 x)))))","(+ (cos (* -1 x)) (* eps (- (* -1/8 (* eps (cos (* -1 x)))) (* -1/2 (sin (* -1 x))))))","(+ (cos (* -1 x)) (* eps (- (* eps (+ (* -1/8 (cos (* -1 x))) (* -1/48 (* eps (sin (* -1 x)))))) (* -1/2 (sin (* -1 x))))))","(* eps (cos (* -1 x)))","(* eps (+ (cos (* -1 x)) (* 1/2 (* eps (sin (* -1 x))))))","(* eps (+ (cos (* -1 x)) (* eps (+ (* 1/2 (sin (* -1 x))) (* 2 (* eps (+ (* -1/16 (cos (* -1 x))) (* -1/48 (cos (* -1 x))))))))))","(* eps (+ (cos (* -1 x)) (* eps (+ (* 1/2 (sin (* -1 x))) (* eps (+ (* -1/24 (* eps (sin (* -1 x)))) (* 2 (+ (* -1/16 (cos (* -1 x))) (* -1/48 (cos (* -1 x)))))))))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x)))))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x)))))))))","(* eps (+ 1 (* -1/6 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(* eps (+ 1 (* -1/2 (pow x 2))))","(* eps (+ 1 (+ (* -1/2 (* eps x)) (* -1/2 (pow x 2)))))","(* eps (+ 1 (+ (* -1/2 (pow x 2)) (* eps (+ (* -1/2 x) (* eps (- (* 1/12 (pow x 2)) 1/6)))))))","(* eps (+ 1 (+ (* -1/2 (pow x 2)) (* eps (+ (* -1/2 x) (* eps (- (+ (* 1/24 (* eps x)) (* 1/12 (pow x 2))) 1/6)))))))","(* -1/2 (* eps x))","(* eps (+ (* -1/2 eps) (* -1/2 x)))","(* eps (+ (* -1/2 x) (* eps (- (* 1/12 (* eps x)) 1/2))))","(* eps (+ (* -1/2 x) (* eps (- (* eps (+ (* 1/24 eps) (* 1/12 x))) 1/2))))","(* eps x)","(* eps (+ x (* -1/6 (* (pow eps 2) x))))","(* eps (+ x (* (pow eps 2) (+ (* -1/6 x) (* 1/120 (* (pow eps 2) x))))))","(* eps (+ x (* (pow eps 2) (+ (* -1/6 x) (* (pow eps 2) (+ (* -1/5040 (* (pow eps 2) x)) (* 1/120 x)))))))","(* 1/2 eps)","(* eps (+ 1/2 (* -1/48 (pow eps 2))))","(* eps (+ 1/2 (* (pow eps 2) (- (* 1/3840 (pow eps 2)) 1/48))))","(* eps (+ 1/2 (* (pow eps 2) (- (* (pow eps 2) (+ 1/3840 (* -1/645120 (pow eps 2)))) 1/48))))","(* -1/2 (pow eps 2))","(* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))","(* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2))","(* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* (pow eps 2) (- (* 1/40320 (pow eps 2)) 1/720)))) 1/2))","(* eps (- (* -1 (/ x eps)) 1/2))","(* -1/2 (* (pow eps 2) (sin x)))","(* (pow eps 2) (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(* -1/2 (* eps (sin x)))","(* eps (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(sin (* 1/2 eps))","(cos (* -1/2 (- (* 2 x) (* -1 eps))))","(* -1 (* eps (+ 1/2 (/ x eps))))","(* 2 (* (cos (* -1/2 (- (* 2 x) (* -1 eps)))) (sin (* 1/2 eps))))","(- (sin (- x (* -1 eps))) (sin x))","(* -1 (* eps (+ (* -1 (/ (cos x) eps)) (* 1/2 (sin x)))))"]],"series":[[4.675048828125,"((+ 0 eps) (cos (/ (+ (* 2 x) eps) -2)) (/ (+ (* 2 x) eps) -2) (* (* (sin (* 1/2 (+ 0 eps))) 2) (cos (/ (+ (* 2 x) eps) -2))) (- (sin (+ x eps)) (sin x)) (sin eps) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (cos x) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (* (sin x) -1/2) (- (sin (+ x eps)) (sin x)) (+ (* (+ (* (* (sin eps) x) -1/2) (- (cos eps) 1)) x) (sin eps)) (+ (* (* (sin eps) x) -1/2) (- (cos eps) 1)) (* (sin eps) x) (sin (* 1/2 (+ 0 eps))) (* 1/2 (+ 0 eps)) (- (cos eps) 1))","eps","-inf"],[5.869873046875,"((+ 0 eps) (cos (/ (+ (* 2 x) eps) -2)) (/ (+ (* 2 x) eps) -2) (* (* (sin (* 1/2 (+ 0 eps))) 2) (cos (/ (+ (* 2 x) eps) -2))) (- (sin (+ x eps)) (sin x)) (sin eps) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (cos x) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (* (sin x) -1/2) (- (sin (+ x eps)) (sin x)) (+ (* (+ (* (* (sin eps) x) -1/2) (- (cos eps) 1)) x) (sin eps)) (+ (* (* (sin eps) x) -1/2) (- (cos eps) 1)) (* (sin eps) x) (sin (* 1/2 (+ 0 eps))) (* 1/2 (+ 0 eps)) (- (cos eps) 1))","eps","inf"],[6.85009765625,"((+ 0 eps) (cos (/ (+ (* 2 x) eps) -2)) (/ (+ (* 2 x) eps) -2) (* (* (sin (* 1/2 (+ 0 eps))) 2) (cos (/ (+ (* 2 x) eps) -2))) (- (sin (+ x eps)) (sin x)) (sin eps) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (cos x) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (* (sin x) -1/2) (- (sin (+ x eps)) (sin x)) (+ (* (+ (* (* (sin eps) x) -1/2) (- (cos eps) 1)) x) (sin eps)) (+ (* (* (sin eps) x) -1/2) (- (cos eps) 1)) (* (sin eps) x) (sin (* 1/2 (+ 0 eps))) (* 1/2 (+ 0 eps)) (- (cos eps) 1))","eps","0"],[4.626953125,"((+ 0 eps) (cos (/ (+ (* 2 x) eps) -2)) (/ (+ (* 2 x) eps) -2) (* (* (sin (* 1/2 (+ 0 eps))) 2) (cos (/ (+ (* 2 x) eps) -2))) (- (sin (+ x eps)) (sin x)) (sin eps) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (cos x) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (* (sin x) -1/2) (- (sin (+ x eps)) (sin x)) (+ (* (+ (* (* (sin eps) x) -1/2) (- (cos eps) 1)) x) (sin eps)) (+ (* (* (sin eps) x) -1/2) (- (cos eps) 1)) (* (sin eps) x) (sin (* 1/2 (+ 0 eps))) (* 1/2 (+ 0 eps)) (- (cos eps) 1))","x","-inf"],[5.2080078125,"((+ 0 eps) (cos (/ (+ (* 2 x) eps) -2)) (/ (+ (* 2 x) eps) -2) (* (* (sin (* 1/2 (+ 0 eps))) 2) (cos (/ (+ (* 2 x) eps) -2))) (- (sin (+ x eps)) (sin x)) (sin eps) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (cos x) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (* (sin x) -1/2) (- (sin (+ x eps)) (sin x)) (+ (* (+ (* (* (sin eps) x) -1/2) (- (cos eps) 1)) x) (sin eps)) (+ (* (* (sin eps) x) -1/2) (- (cos eps) 1)) (* (sin eps) x) (sin (* 1/2 (+ 0 eps))) (* 1/2 (+ 0 eps)) (- (cos eps) 1))","x","inf"],[5.864990234375,"((+ 0 eps) (cos (/ (+ (* 2 x) eps) -2)) (/ (+ (* 2 x) eps) -2) (* (* (sin (* 1/2 (+ 0 eps))) 2) (cos (/ (+ (* 2 x) eps) -2))) (- (sin (+ x eps)) (sin x)) (sin eps) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (cos x) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (* (sin x) -1/2) (- (sin (+ x eps)) (sin x)) (+ (* (+ (* (* (sin eps) x) -1/2) (- (cos eps) 1)) x) (sin eps)) (+ (* (* (sin eps) x) -1/2) (- (cos eps) 1)) (* (sin eps) x) (sin (* 1/2 (+ 0 eps))) (* 1/2 (+ 0 eps)) (- (cos eps) 1))","x","0"]],"time":34.911865234375,"type":"series"},{"count":[[100,99]],"egraph":[[0,8038,1097,0.087973422],[3,7994,1207,0.02396872],[2,3316,1207,0.024064818],[1,1196,1242,0.011736371],[0,390,1307,0.003743574]],"inputs":[["(cos (* -1/2 eps))","(+ (cos (* -1/2 eps)) (* x (sin (* -1/2 eps))))","(+ (cos (* -1/2 eps)) (* x (- (* -1/2 (* x (cos (* -1/2 eps)))) (* -1 (sin (* -1/2 eps))))))","(+ (cos (* -1/2 eps)) (* x (- (* x (+ (* -1/2 (cos (* -1/2 eps))) (* -1/6 (* x (sin (* -1/2 eps)))))) (* -1 (sin (* -1/2 eps))))))","(* -1/2 eps)","(+ (* -1 x) (* -1/2 eps))","(* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps))))","(+ (* 2 (* x (* (sin (* -1/2 eps)) (sin (* 1/2 eps))))) (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))))","(+ (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* -1 (* x (* (cos (* -1/2 eps)) (sin (* 1/2 eps))))) (* 2 (* (sin (* -1/2 eps)) (sin (* 1/2 eps)))))))","(+ (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* 2 (* (sin (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* -1 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* -1/3 (* x (* (sin (* -1/2 eps)) (sin (* 1/2 eps))))))))))","(sin eps)","(+ (sin eps) (* x (- (cos eps) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* x (+ 1/6 (* -1/6 (cos eps))))))) 1)))","eps","(+ eps (* -1/2 (* eps (pow x 2))))","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* 1/24 (* eps (pow x 2))))))","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* (pow x 2) (+ (* -1/720 (* eps (pow x 2))) (* 1/24 eps))))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(+ eps (* -1/2 (* (pow eps 2) x)))","(+ eps (* x (+ (* -1/2 (* eps x)) (* -1/2 (pow eps 2)))))","(+ eps (* x (+ (* -1/2 (pow eps 2)) (* x (+ (* -1/2 eps) (* 1/12 (* (pow eps 2) x)))))))","(+ 1 (* -1/2 (* eps x)))","(+ 1 (* x (+ (* -1/2 eps) (* -1/2 x))))","(+ 1 (* x (+ (* -1/2 eps) (* x (- (* 1/12 (* eps x)) 1/2)))))","(* -1/2 x)","(* x (- (* 1/12 (pow x 2)) 1/2))","(* x (- (* (pow x 2) (+ 1/12 (* -1/240 (pow x 2)))) 1/2))","(* x (- (* (pow x 2) (+ 1/12 (* (pow x 2) (- (* 1/10080 (pow x 2)) 1/240)))) 1/2))","(- (cos eps) 1)","(- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)","(* x (sin eps))","(cos (* -1/2 (+ eps (* 2 x))))","(* -1 x)","(* x (- (* -1/2 (/ eps x)) 1))","(* 2 (* (cos (* -1/2 (+ eps (* 2 x)))) (sin (* 1/2 eps))))","(- (sin (+ eps x)) (sin x))","(* eps (cos x))","(cos x)","(* eps (+ (cos x) (* -1/2 (* eps (sin x)))))","(+ (cos x) (* -1/2 (* eps (sin x))))","(* -1/2 (sin x))","(* -1/2 (* (pow x 2) (sin eps)))","(* (pow x 2) (- (+ (* -1/2 (sin eps)) (/ (cos eps) x)) (/ 1 x)))","(* (pow x 2) (- (+ (* -1/2 (sin eps)) (+ (/ (cos eps) x) (/ (sin eps) (pow x 2)))) (/ 1 x)))","(* -1/2 (* x (sin eps)))","(* x (- (+ (* -1/2 (sin eps)) (/ (cos eps) x)) (/ 1 x)))","(cos (* -1/2 (- eps (* -2 x))))","(* -1 (* x (+ 1 (* 1/2 (/ eps x)))))","(* 2 (* (cos (* -1/2 (- eps (* -2 x)))) (sin (* 1/2 eps))))","(- (sin (- eps (* -1 x))) (sin x))","(* (pow x 2) (+ (* -1 (/ (+ (* -1 (- (cos eps) 1)) (* -1 (/ (sin eps) x))) x)) (* -1/2 (sin eps))))","(* -1 (* x (+ (* -1 (/ (- (cos eps) 1) x)) (* 1/2 (sin eps)))))","(cos (* -1 x))","(+ (cos (* -1 x)) (* 1/2 (* eps (sin (* -1 x)))))","(+ (cos (* -1 x)) (* eps (- (* -1/8 (* eps (cos (* -1 x)))) (* -1/2 (sin (* -1 x))))))","(+ (cos (* -1 x)) (* eps (- (* eps (+ (* -1/8 (cos (* -1 x))) (* -1/48 (* eps (sin (* -1 x)))))) (* -1/2 (sin (* -1 x))))))","(* eps (cos (* -1 x)))","(* eps (+ (cos (* -1 x)) (* 1/2 (* eps (sin (* -1 x))))))","(* eps (+ (cos (* -1 x)) (* eps (+ (* 1/2 (sin (* -1 x))) (* 2 (* eps (+ (* -1/16 (cos (* -1 x))) (* -1/48 (cos (* -1 x))))))))))","(* eps (+ (cos (* -1 x)) (* eps (+ (* 1/2 (sin (* -1 x))) (* eps (+ (* -1/24 (* eps (sin (* -1 x)))) (* 2 (+ (* -1/16 (cos (* -1 x))) (* -1/48 (cos (* -1 x)))))))))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x)))))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x)))))))))","(* eps (+ 1 (* -1/6 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(* eps (+ 1 (* -1/2 (pow x 2))))","(* eps (+ 1 (+ (* -1/2 (* eps x)) (* -1/2 (pow x 2)))))","(* eps (+ 1 (+ (* -1/2 (pow x 2)) (* eps (+ (* -1/2 x) (* eps (- (* 1/12 (pow x 2)) 1/6)))))))","(* eps (+ 1 (+ (* -1/2 (pow x 2)) (* eps (+ (* -1/2 x) (* eps (- (+ (* 1/24 (* eps x)) (* 1/12 (pow x 2))) 1/6)))))))","(* -1/2 (* eps x))","(* eps (+ (* -1/2 eps) (* -1/2 x)))","(* eps (+ (* -1/2 x) (* eps (- (* 1/12 (* eps x)) 1/2))))","(* eps (+ (* -1/2 x) (* eps (- (* eps (+ (* 1/24 eps) (* 1/12 x))) 1/2))))","(* eps x)","(* eps (+ x (* -1/6 (* (pow eps 2) x))))","(* eps (+ x (* (pow eps 2) (+ (* -1/6 x) (* 1/120 (* (pow eps 2) x))))))","(* eps (+ x (* (pow eps 2) (+ (* -1/6 x) (* (pow eps 2) (+ (* -1/5040 (* (pow eps 2) x)) (* 1/120 x)))))))","(* 1/2 eps)","(* eps (+ 1/2 (* -1/48 (pow eps 2))))","(* eps (+ 1/2 (* (pow eps 2) (- (* 1/3840 (pow eps 2)) 1/48))))","(* eps (+ 1/2 (* (pow eps 2) (- (* (pow eps 2) (+ 1/3840 (* -1/645120 (pow eps 2)))) 1/48))))","(* -1/2 (pow eps 2))","(* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))","(* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2))","(* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* (pow eps 2) (- (* 1/40320 (pow eps 2)) 1/720)))) 1/2))","(* eps (- (* -1 (/ x eps)) 1/2))","(* -1/2 (* (pow eps 2) (sin x)))","(* (pow eps 2) (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(* -1/2 (* eps (sin x)))","(* eps (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(sin (* 1/2 eps))","(cos (* -1/2 (- (* 2 x) (* -1 eps))))","(* -1 (* eps (+ 1/2 (/ x eps))))","(* 2 (* (cos (* -1/2 (- (* 2 x) (* -1 eps)))) (sin (* 1/2 eps))))","(- (sin (- x (* -1 eps))) (sin x))","(* -1 (* eps (+ (* -1 (/ (cos x) eps)) (* 1/2 (sin x)))))"]],"memory":[[-1930688,46649296]],"method":["egg-herbie"],"outputs":[["(cos (* -1/2 eps))","(cos.f64 (*.f64 #s(literal -1/2 binary64) eps))","(+ (cos (* -1/2 eps)) (* x (sin (* -1/2 eps))))","(fma.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) eps)) x (cos.f64 (*.f64 #s(literal -1/2 binary64) eps)))","(+ (cos (* -1/2 eps)) (* x (- (* -1/2 (* x (cos (* -1/2 eps)))) (* -1 (sin (* -1/2 eps))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (cos.f64 (*.f64 #s(literal -1/2 binary64) eps)) (sin.f64 (*.f64 #s(literal -1/2 binary64) eps))) x (cos.f64 (*.f64 #s(literal -1/2 binary64) eps)))","(+ (cos (* -1/2 eps)) (* x (- (* x (+ (* -1/2 (cos (* -1/2 eps))) (* -1/6 (* x (sin (* -1/2 eps)))))) (* -1 (sin (* -1/2 eps))))))","(fma.f64 (fma.f64 (fma.f64 x (*.f64 #s(literal -1/6 binary64) x) #s(literal 1 binary64)) (sin.f64 (*.f64 #s(literal -1/2 binary64) eps)) (*.f64 (*.f64 #s(literal -1/2 binary64) x) (cos.f64 (*.f64 #s(literal -1/2 binary64) eps)))) x (cos.f64 (*.f64 #s(literal -1/2 binary64) eps)))","(* -1/2 eps)","(*.f64 #s(literal -1/2 binary64) eps)","(+ (* -1 x) (* -1/2 eps))","(fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x))","(* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps))))","(*.f64 (*.f64 #s(literal 2 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))) (cos.f64 (*.f64 #s(literal -1/2 binary64) eps)))","(+ (* 2 (* x (* (sin (* -1/2 eps)) (sin (* 1/2 eps))))) (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) (fma.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) eps)) x (cos.f64 (*.f64 #s(literal -1/2 binary64) eps))))","(+ (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* -1 (* x (* (cos (* -1/2 eps)) (sin (* 1/2 eps))))) (* 2 (* (sin (* -1/2 eps)) (sin (* 1/2 eps)))))))","(fma.f64 (*.f64 #s(literal 2 binary64) (sin.f64 (*.f64 #s(literal -1/2 binary64) eps))) (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) x) (*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) (cos.f64 (*.f64 #s(literal -1/2 binary64) eps))) (+.f64 #s(literal 2 binary64) (*.f64 x (neg.f64 x)))))","(+ (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* 2 (* (sin (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* -1 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* -1/3 (* x (* (sin (* -1/2 eps)) (sin (* 1/2 eps))))))))))","(fma.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) (fma.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) eps)) x (cos.f64 (*.f64 #s(literal -1/2 binary64) eps))) (*.f64 (*.f64 x x) (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) (-.f64 (*.f64 (*.f64 #s(literal -1/3 binary64) x) (sin.f64 (*.f64 #s(literal -1/2 binary64) eps))) (cos.f64 (*.f64 #s(literal -1/2 binary64) eps))))))","(sin eps)","(sin.f64 eps)","(+ (sin eps) (* x (- (cos eps) 1)))","(fma.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) x (sin.f64 eps))","(+ (sin eps) (* x (- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)))","(fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* x (+ 1/6 (* -1/6 (cos eps))))))) 1)))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 (cos.f64 eps) #s(literal -1/6 binary64) #s(literal 1/6 binary64)) x (*.f64 (sin.f64 eps) #s(literal -1/2 binary64))) x (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps))","eps","(+ eps (* -1/2 (* eps (pow x 2))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64)) eps)","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* 1/24 (* eps (pow x 2))))))","(fma.f64 (*.f64 eps (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) (*.f64 x x) eps)","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* (pow x 2) (+ (* -1/720 (* eps (pow x 2))) (* 1/24 eps))))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 eps (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64))) (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64)) eps))","1","#s(literal 1 binary64)","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ eps (* -1/2 (* (pow eps 2) x)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps eps) eps)","(+ eps (* x (+ (* -1/2 (* eps x)) (* -1/2 (pow eps 2)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 x eps)) eps)","(+ eps (* x (+ (* -1/2 (pow eps 2)) (* x (+ (* -1/2 eps) (* 1/12 (* (pow eps 2) x)))))))","(fma.f64 (fma.f64 (*.f64 x (*.f64 (*.f64 eps eps) x)) #s(literal 1/12 binary64) (*.f64 (*.f64 eps (+.f64 x eps)) #s(literal -1/2 binary64))) x eps)","(+ 1 (* -1/2 (* eps x)))","(fma.f64 (*.f64 x eps) #s(literal -1/2 binary64) #s(literal 1 binary64))","(+ 1 (* x (+ (* -1/2 eps) (* -1/2 x))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64))","(+ 1 (* x (+ (* -1/2 eps) (* x (- (* 1/12 (* eps x)) 1/2)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x #s(literal 1 binary64))","(* -1/2 x)","(*.f64 #s(literal -1/2 binary64) x)","(* x (- (* 1/12 (pow x 2)) 1/2))","(*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)","(* x (- (* (pow x 2) (+ 1/12 (* -1/240 (pow x 2)))) 1/2))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/240 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x)","(* x (- (* (pow x 2) (+ 1/12 (* (pow x 2) (- (* 1/10080 (pow x 2)) 1/240)))) 1/2))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/10080 binary64) (*.f64 x x) #s(literal -1/240 binary64)) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x)","(- (cos eps) 1)","(-.f64 (cos.f64 eps) #s(literal 1 binary64))","(- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)","(fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(* x (sin eps))","(*.f64 (sin.f64 eps) x)","(cos (* -1/2 (+ eps (* 2 x))))","(cos.f64 (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x)))","(* -1 x)","(neg.f64 x)","(* x (- (* -1/2 (/ eps x)) 1))","(*.f64 (fma.f64 (/.f64 eps x) #s(literal -1/2 binary64) #s(literal -1 binary64)) x)","(* 2 (* (cos (* -1/2 (+ eps (* 2 x)))) (sin (* 1/2 eps))))","(*.f64 (*.f64 #s(literal 2 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))) (cos.f64 (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x))))","(- (sin (+ eps x)) (sin x))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(* eps (cos x))","(*.f64 (cos.f64 x) eps)","(cos x)","(cos.f64 x)","(* eps (+ (cos x) (* -1/2 (* eps (sin x)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps)","(+ (cos x) (* -1/2 (* eps (sin x))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))","(* -1/2 (sin x))","(*.f64 #s(literal -1/2 binary64) (sin.f64 x))","(* -1/2 (* (pow x 2) (sin eps)))","(*.f64 (*.f64 (*.f64 (sin.f64 eps) x) x) #s(literal -1/2 binary64))","(* (pow x 2) (- (+ (* -1/2 (sin eps)) (/ (cos eps) x)) (/ 1 x)))","(*.f64 (*.f64 (fma.f64 (sin.f64 eps) #s(literal -1/2 binary64) (/.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) x)) x) x)","(* (pow x 2) (- (+ (* -1/2 (sin eps)) (+ (/ (cos eps) x) (/ (sin eps) (pow x 2)))) (/ 1 x)))","(*.f64 (+.f64 (/.f64 (/.f64 (sin.f64 eps) x) x) (fma.f64 (sin.f64 eps) #s(literal -1/2 binary64) (/.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) x))) (*.f64 x x))","(* -1/2 (* x (sin eps)))","(*.f64 (*.f64 (sin.f64 eps) #s(literal -1/2 binary64)) x)","(* x (- (+ (* -1/2 (sin eps)) (/ (cos eps) x)) (/ 1 x)))","(*.f64 (fma.f64 (sin.f64 eps) #s(literal -1/2 binary64) (/.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) x)) x)","(cos (* -1/2 (- eps (* -2 x))))","(cos.f64 (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x)))","(* -1 (* x (+ 1 (* 1/2 (/ eps x)))))","(*.f64 (fma.f64 (/.f64 eps x) #s(literal 1/2 binary64) #s(literal 1 binary64)) (neg.f64 x))","(* 2 (* (cos (* -1/2 (- eps (* -2 x)))) (sin (* 1/2 eps))))","(*.f64 (*.f64 #s(literal 2 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))) (cos.f64 (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x))))","(- (sin (- eps (* -1 x))) (sin x))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(* (pow x 2) (+ (* -1 (/ (+ (* -1 (- (cos eps) 1)) (* -1 (/ (sin eps) x))) x)) (* -1/2 (sin eps))))","(*.f64 (*.f64 (fma.f64 (sin.f64 eps) #s(literal -1/2 binary64) (/.f64 (-.f64 (cos.f64 eps) (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) x))) x)) x) x)","(* -1 (* x (+ (* -1 (/ (- (cos eps) 1) x)) (* 1/2 (sin eps)))))","(*.f64 (fma.f64 (sin.f64 eps) #s(literal -1/2 binary64) (/.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) x)) x)","(cos (* -1 x))","(cos.f64 x)","(+ (cos (* -1 x)) (* 1/2 (* eps (sin (* -1 x)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))","(+ (cos (* -1 x)) (* eps (- (* -1/8 (* eps (cos (* -1 x)))) (* -1/2 (sin (* -1 x))))))","(fma.f64 (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/8 binary64))) eps (cos.f64 x))","(+ (cos (* -1 x)) (* eps (- (* eps (+ (* -1/8 (cos (* -1 x))) (* -1/48 (* eps (sin (* -1 x)))))) (* -1/2 (sin (* -1 x))))))","(fma.f64 (fma.f64 (neg.f64 (sin.f64 x)) (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/8 binary64))) eps (cos.f64 x))","(* eps (cos (* -1 x)))","(*.f64 (cos.f64 x) eps)","(* eps (+ (cos (* -1 x)) (* 1/2 (* eps (sin (* -1 x))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps)","(* eps (+ (cos (* -1 x)) (* eps (+ (* 1/2 (sin (* -1 x))) (* 2 (* eps (+ (* -1/16 (cos (* -1 x))) (* -1/48 (cos (* -1 x))))))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) eps (cos.f64 x)) eps)","(* eps (+ (cos (* -1 x)) (* eps (+ (* 1/2 (sin (* -1 x))) (* eps (+ (* -1/24 (* eps (sin (* -1 x)))) (* 2 (+ (* -1/16 (cos (* -1 x))) (* -1/48 (cos (* -1 x)))))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/24 binary64) eps) (neg.f64 (sin.f64 x)) (*.f64 (cos.f64 x) #s(literal -1/6 binary64))) eps (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) eps (cos.f64 x)) eps)","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) eps (cos.f64 x)) eps)","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x)))))))))","(*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x)) eps)","(* eps (+ 1 (* -1/6 (pow eps 2))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps)","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 #s(literal 1/120 binary64) (*.f64 eps eps) #s(literal -1/6 binary64)) eps)","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 eps eps) #s(literal 1/120 binary64)) (*.f64 eps eps) #s(literal -1/6 binary64)) eps)","(* eps (+ 1 (* -1/2 (pow x 2))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64)) eps)","(* eps (+ 1 (+ (* -1/2 (* eps x)) (* -1/2 (pow x 2)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps)","(* eps (+ 1 (+ (* -1/2 (pow x 2)) (* eps (+ (* -1/2 x) (* eps (- (* 1/12 (pow x 2)) 1/6)))))))","(*.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/6 binary64)) eps) eps (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64))) eps)","(* eps (+ 1 (+ (* -1/2 (pow x 2)) (* eps (+ (* -1/2 x) (* eps (- (+ (* 1/24 (* eps x)) (* 1/12 (pow x 2))) 1/6)))))))","(*.f64 (fma.f64 (*.f64 (fma.f64 x (fma.f64 #s(literal 1/12 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) #s(literal -1/6 binary64)) eps) eps (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64))) eps)","(* -1/2 (* eps x))","(*.f64 (*.f64 x eps) #s(literal -1/2 binary64))","(* eps (+ (* -1/2 eps) (* -1/2 x)))","(*.f64 (*.f64 eps (+.f64 x eps)) #s(literal -1/2 binary64))","(* eps (+ (* -1/2 x) (* eps (- (* 1/12 (* eps x)) 1/2))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x eps) #s(literal -1/2 binary64)) eps (*.f64 #s(literal -1/2 binary64) x)) eps)","(* eps (+ (* -1/2 x) (* eps (- (* eps (+ (* 1/24 eps) (* 1/12 x))) 1/2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) eps #s(literal -1/2 binary64)) eps (*.f64 #s(literal -1/2 binary64) x)) eps)","(* eps x)","(*.f64 x eps)","(* eps (+ x (* -1/6 (* (pow eps 2) x))))","(*.f64 x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps))","(* eps (+ x (* (pow eps 2) (+ (* -1/6 x) (* 1/120 (* (pow eps 2) x))))))","(*.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 1/120 binary64) (*.f64 eps eps) #s(literal -1/6 binary64))) (*.f64 eps eps) x) eps)","(* eps (+ x (* (pow eps 2) (+ (* -1/6 x) (* (pow eps 2) (+ (* -1/5040 (* (pow eps 2) x)) (* 1/120 x)))))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (*.f64 (*.f64 x (fma.f64 #s(literal -1/5040 binary64) (*.f64 eps eps) #s(literal 1/120 binary64))) eps) eps (*.f64 #s(literal -1/6 binary64) x)) (*.f64 x eps))","(* 1/2 eps)","(*.f64 #s(literal 1/2 binary64) eps)","(* eps (+ 1/2 (* -1/48 (pow eps 2))))","(*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(* eps (+ 1/2 (* (pow eps 2) (- (* 1/3840 (pow eps 2)) 1/48))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3840 binary64) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(* eps (+ 1/2 (* (pow eps 2) (- (* (pow eps 2) (+ 1/3840 (* -1/645120 (pow eps 2)))) 1/48))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(* -1/2 (pow eps 2))","(*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))","(* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))","(*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps)","(* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2))","(*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps)","(* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* (pow eps 2) (- (* 1/40320 (pow eps 2)) 1/720)))) 1/2))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/40320 binary64) (*.f64 eps eps) #s(literal -1/720 binary64)) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps)","(* eps (- (* -1 (/ x eps)) 1/2))","(*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 x eps)) eps)","(* -1/2 (* (pow eps 2) (sin x)))","(*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps)","(* (pow eps 2) (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (/.f64 (cos.f64 x) eps)) (*.f64 eps eps))","(* -1/2 (* eps (sin x)))","(*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)","(* eps (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (/.f64 (cos.f64 x) eps)) eps)","(sin (* 1/2 eps))","(sin.f64 (*.f64 #s(literal 1/2 binary64) eps))","(cos (* -1/2 (- (* 2 x) (* -1 eps))))","(cos.f64 (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x)))","(* -1 (* eps (+ 1/2 (/ x eps))))","(*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 x eps)) eps)","(* 2 (* (cos (* -1/2 (- (* 2 x) (* -1 eps)))) (sin (* 1/2 eps))))","(*.f64 (*.f64 #s(literal 2 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))) (cos.f64 (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x))))","(- (sin (- x (* -1 eps))) (sin x))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(* -1 (* eps (+ (* -1 (/ (cos x) eps)) (* 1/2 (sin x)))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (/.f64 (cos.f64 x) eps)) eps)"]],"stop":[["iter limit",1],["node limit",1]],"time":255.156005859375,"type":"simplify"},{"count":[[20,416]],"egraph":[[0,8606,159,0.085667607],[2,1642,159,0.02923719],[1,210,159,0.005638212],[0,60,159,0.001685641],[0,36,167,0.000374118]],"inputs":[["(+.f64 #s(literal 0 binary64) eps)","(cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64)))","(/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","#s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps))","(sin.f64 eps)","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))","(*.f64 (cos.f64 x) eps)","(cos.f64 x)","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps)","(fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x))","(*.f64 (sin.f64 x) #s(literal -1/2 binary64))","#s(approx (- (sin (+ x eps)) (sin x)) (fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps)))","(fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps))","(fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(*.f64 (sin.f64 eps) x)","(sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))","(*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))","(-.f64 (cos.f64 eps) #s(literal 1 binary64))"]],"memory":[[11989312,58667216]],"outputs":[["(*.f64 (/.f64 (pow.f64 eps #s(literal 3/2 binary64)) eps) (/.f64 (pow.f64 eps #s(literal 3/2 binary64)) (-.f64 eps #s(literal 0 binary64))))","(*.f64 (/.f64 (pow.f64 eps #s(literal 3/2 binary64)) eps) (/.f64 (pow.f64 eps #s(literal 3/2 binary64)) eps))","(*.f64 (/.f64 eps eps) (/.f64 (*.f64 eps eps) eps))","(*.f64 (/.f64 eps eps) eps)","(*.f64 (/.f64 (*.f64 eps eps) eps) (/.f64 eps (-.f64 eps #s(literal 0 binary64))))","(*.f64 (/.f64 (*.f64 eps eps) eps) (/.f64 eps eps))","(*.f64 (neg.f64 (*.f64 eps eps)) (pow.f64 (neg.f64 eps) #s(literal -1 binary64)))","(*.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 eps #s(literal -2 binary64)))","(pow.f64 (pow.f64 eps #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 eps #s(literal 1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal 0 binary64) (neg.f64 eps)) #s(literal 3 binary64)) (pow.f64 (/.f64 (*.f64 eps eps) (neg.f64 eps)) #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal 0 binary64) (neg.f64 eps)) (/.f64 #s(literal 0 binary64) (neg.f64 eps)) (fma.f64 (/.f64 (*.f64 eps eps) (neg.f64 eps)) (/.f64 (*.f64 eps eps) (neg.f64 eps)) (*.f64 (/.f64 #s(literal 0 binary64) (neg.f64 eps)) (/.f64 (*.f64 eps eps) (neg.f64 eps))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (*.f64 eps eps)))) (neg.f64 (neg.f64 (neg.f64 eps))))","(/.f64 (neg.f64 (pow.f64 (neg.f64 eps) #s(literal 3 binary64))) (neg.f64 (neg.f64 (*.f64 eps eps))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 eps)) (pow.f64 (neg.f64 eps) #s(literal 3 binary64))) (*.f64 eps eps))","(/.f64 (neg.f64 (neg.f64 (*.f64 eps eps))) (neg.f64 (neg.f64 eps)))","(/.f64 (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (neg.f64 (*.f64 eps eps)))","(/.f64 (neg.f64 (*.f64 eps eps)) (neg.f64 (-.f64 eps #s(literal 0 binary64))))","(/.f64 (neg.f64 (*.f64 eps eps)) (neg.f64 eps))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 eps #s(literal -1 binary64))))","(/.f64 (*.f64 eps eps) (-.f64 eps #s(literal 0 binary64)))","(/.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 eps eps))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 eps #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 eps #s(literal 0 binary64)) (*.f64 eps eps)))","(/.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal -1 binary64)))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3/2 binary64)) eps) (/.f64 (pow.f64 eps #s(literal 3/2 binary64)) (-.f64 eps #s(literal 0 binary64))) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3/2 binary64)) eps) (/.f64 (pow.f64 eps #s(literal 3/2 binary64)) eps) #s(literal 0 binary64))","(fma.f64 (/.f64 eps eps) (/.f64 (*.f64 eps eps) eps) #s(literal 0 binary64))","(fma.f64 (/.f64 eps eps) eps #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 eps eps) eps) (/.f64 eps (-.f64 eps #s(literal 0 binary64))) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 eps eps) eps) (/.f64 eps eps) #s(literal 0 binary64))","(fma.f64 (neg.f64 (*.f64 eps eps)) (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 eps #s(literal -2 binary64)) #s(literal 0 binary64))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 eps)) (/.f64 (*.f64 eps eps) (neg.f64 eps)))","(-.f64 eps (/.f64 #s(literal 0 binary64) (-.f64 eps #s(literal 0 binary64))))","(+.f64 eps #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) eps)","eps","(cos.f64 (/.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 2 binary64)))","(cos.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 x #s(literal 2 binary64) eps)))","(*.f64 (/.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 x #s(literal 2 binary64))))) #s(literal -2 binary64)) (/.f64 (fma.f64 x #s(literal 2 binary64) eps) (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 x #s(literal 2 binary64)))))))","(*.f64 (pow.f64 (/.f64 #s(literal -2 binary64) (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 (neg.f64 eps) eps))) #s(literal -1 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 2 binary64)) eps) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal -2 binary64) (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 x #s(literal 2 binary64))))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (fma.f64 x #s(literal 2 binary64) eps)) #s(literal 1/2 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 #s(literal -1/2 binary64) (fma.f64 x #s(literal 2 binary64) eps)))","(*.f64 #s(literal -1/2 binary64) (fma.f64 x #s(literal 2 binary64) eps))","(*.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 x #s(literal 2 binary64) eps)) (/.f64 (-.f64 (*.f64 x #s(literal 2 binary64)) eps) (-.f64 (*.f64 x #s(literal 2 binary64)) eps)))","(*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal -1/2 binary64))","(pow.f64 (/.f64 #s(literal -2 binary64) (fma.f64 x #s(literal 2 binary64) eps)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 (neg.f64 eps) eps)) #s(literal -1/2 binary64))) (neg.f64 (-.f64 (*.f64 x #s(literal 2 binary64)) eps)))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1/2 binary64))) (neg.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 x #s(literal 2 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (fma.f64 x #s(literal 2 binary64) eps)))) #s(literal 2 binary64))","(/.f64 (*.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 (neg.f64 eps) eps)) #s(literal -1/2 binary64)) (-.f64 (*.f64 x #s(literal 2 binary64)) eps))","(/.f64 (*.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1/2 binary64)) (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 x #s(literal 2 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 (neg.f64 eps) eps))) (neg.f64 (*.f64 #s(literal -2 binary64) (-.f64 (*.f64 x #s(literal 2 binary64)) eps))))","(/.f64 (neg.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 #s(literal -2 binary64) (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 x #s(literal 2 binary64))))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 x #s(literal 2 binary64) eps))) #s(literal -2 binary64))","(/.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 (neg.f64 eps) eps)) (*.f64 #s(literal -2 binary64) (-.f64 (*.f64 x #s(literal 2 binary64)) eps)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal -2 binary64) (fma.f64 x #s(literal 2 binary64) eps))))","(/.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 #s(literal -2 binary64) (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 x #s(literal 2 binary64)))))))","(/.f64 (neg.f64 (fma.f64 x #s(literal 2 binary64) eps)) #s(literal 2 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 x #s(literal 2 binary64)) eps) (*.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 (neg.f64 eps) eps)) #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 x #s(literal 2 binary64))))) (*.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal -2 binary64) (-.f64 (*.f64 x #s(literal 2 binary64)) eps)) (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 (neg.f64 eps) eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal -2 binary64) (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 x #s(literal 2 binary64)))))) (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 #s(literal -2 binary64) (fma.f64 x #s(literal 2 binary64) eps)))))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal -2 binary64) (fma.f64 x #s(literal 2 binary64) eps)))","(/.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal -2 binary64))","(neg.f64 (/.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 2 binary64)))","(-.f64 (/.f64 (pow.f64 (*.f64 x #s(literal 2 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) (-.f64 (*.f64 x #s(literal 2 binary64)) eps))) (/.f64 (*.f64 eps eps) (*.f64 #s(literal -2 binary64) (-.f64 (*.f64 x #s(literal 2 binary64)) eps))))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 x #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 x #s(literal 2 binary64)) eps)) #s(literal -2 binary64)) (/.f64 (/.f64 (*.f64 eps eps) (-.f64 (*.f64 x #s(literal 2 binary64)) eps)) #s(literal -2 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (/.f64 #s(literal -2 binary64) (fma.f64 x #s(literal 2 binary64) eps))) #s(literal -1 binary64)))","(*.f64 (*.f64 (cos.f64 (/.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 2 binary64))) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))) #s(literal 2 binary64))","(*.f64 (*.f64 (cos.f64 (/.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 2 binary64))) #s(literal 2 binary64)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 2 binary64))))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) (*.f64 (cos.f64 (/.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 2 binary64))) #s(literal 2 binary64)))","(*.f64 (cos.f64 (/.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 2 binary64))) (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)))","(*.f64 #s(literal 2 binary64) (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) (cos.f64 (/.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 2 binary64)))))","#s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps))","(/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 eps) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 eps) #s(literal 0 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 (sin.f64 eps) #s(literal 1 binary64)) (*.f64 (sin.f64 eps) #s(literal 1 binary64)) (-.f64 (*.f64 (*.f64 (cos.f64 eps) #s(literal 0 binary64)) (*.f64 (cos.f64 eps) #s(literal 0 binary64))) (*.f64 (*.f64 (sin.f64 eps) #s(literal 1 binary64)) (*.f64 (cos.f64 eps) #s(literal 0 binary64))))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal 0 binary64) (cos.f64 eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal 1 binary64) (sin.f64 eps)) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal 0 binary64) (cos.f64 eps)) (*.f64 #s(literal 0 binary64) (cos.f64 eps)) (-.f64 (*.f64 (*.f64 #s(literal 1 binary64) (sin.f64 eps)) (*.f64 #s(literal 1 binary64) (sin.f64 eps))) (*.f64 (*.f64 #s(literal 0 binary64) (cos.f64 eps)) (*.f64 #s(literal 1 binary64) (sin.f64 eps))))))","(fma.f64 (sin.f64 eps) #s(literal 1 binary64) (*.f64 (cos.f64 eps) #s(literal 0 binary64)))","(fma.f64 #s(literal 0 binary64) (cos.f64 eps) (*.f64 #s(literal 1 binary64) (sin.f64 eps)))","(sin.f64 eps)","(-.f64 (*.f64 (sin.f64 (/.f64 #s(literal 0 binary64) (neg.f64 eps))) (cos.f64 (/.f64 (*.f64 eps eps) (neg.f64 eps)))) (*.f64 (cos.f64 (/.f64 #s(literal 0 binary64) (neg.f64 eps))) (sin.f64 (/.f64 (*.f64 eps eps) (neg.f64 eps)))))","(+.f64 (*.f64 (sin.f64 eps) #s(literal 1 binary64)) (*.f64 (cos.f64 eps) #s(literal 0 binary64)))","(+.f64 (*.f64 #s(literal 0 binary64) (cos.f64 eps)) (*.f64 #s(literal 1 binary64) (sin.f64 eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))","(*.f64 (/.f64 (cos.f64 x) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 eps #s(literal 0 binary64))))","(*.f64 (/.f64 (cos.f64 x) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps))","(*.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 (cos.f64 x) (-.f64 eps #s(literal 0 binary64))))","(*.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 (cos.f64 x) eps))","(*.f64 (cos.f64 x) eps)","(*.f64 eps (cos.f64 x))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal 0 binary64) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal 0 binary64) (cos.f64 x)) (*.f64 #s(literal 0 binary64) (cos.f64 x)) (-.f64 (*.f64 (*.f64 (cos.f64 x) eps) (*.f64 (cos.f64 x) eps)) (*.f64 (*.f64 #s(literal 0 binary64) (cos.f64 x)) (*.f64 (cos.f64 x) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 x) #s(literal 0 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 (cos.f64 x) #s(literal 0 binary64)) (*.f64 (cos.f64 x) #s(literal 0 binary64)) (-.f64 (*.f64 (*.f64 (cos.f64 x) eps) (*.f64 (cos.f64 x) eps)) (*.f64 (*.f64 (cos.f64 x) #s(literal 0 binary64)) (*.f64 (cos.f64 x) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal 0 binary64) (cos.f64 x)) #s(literal 3 binary64))) (fma.f64 (*.f64 (cos.f64 x) eps) (*.f64 (cos.f64 x) eps) (-.f64 (*.f64 (*.f64 #s(literal 0 binary64) (cos.f64 x)) (*.f64 #s(literal 0 binary64) (cos.f64 x))) (*.f64 (*.f64 (cos.f64 x) eps) (*.f64 #s(literal 0 binary64) (cos.f64 x))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) #s(literal 0 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 (cos.f64 x) eps) (*.f64 (cos.f64 x) eps) (-.f64 (*.f64 (*.f64 (cos.f64 x) #s(literal 0 binary64)) (*.f64 (cos.f64 x) #s(literal 0 binary64))) (*.f64 (*.f64 (cos.f64 x) eps) (*.f64 (cos.f64 x) #s(literal 0 binary64))))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (cos.f64 x))) (neg.f64 (neg.f64 eps)))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (cos.f64 x))) (neg.f64 (*.f64 eps eps)))","(/.f64 (neg.f64 (*.f64 (cos.f64 x) (neg.f64 (*.f64 eps eps)))) (neg.f64 (neg.f64 eps)))","(/.f64 (neg.f64 (*.f64 (cos.f64 x) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 eps eps)))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (cos.f64 x)) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (cos.f64 x)) (*.f64 eps eps))","(/.f64 (*.f64 (cos.f64 x) (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(/.f64 (*.f64 (cos.f64 x) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 eps) (*.f64 (neg.f64 (*.f64 eps eps)) (cos.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 eps eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (cos.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 eps) (*.f64 (cos.f64 x) (neg.f64 (*.f64 eps eps)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 eps eps) (*.f64 (cos.f64 x) (pow.f64 eps #s(literal 3 binary64)))))","(fma.f64 (/.f64 (cos.f64 x) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 eps #s(literal 0 binary64))) (*.f64 #s(literal 0 binary64) (cos.f64 x)))","(fma.f64 (/.f64 (cos.f64 x) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 eps #s(literal 0 binary64))) (*.f64 (cos.f64 x) #s(literal 0 binary64)))","(fma.f64 (/.f64 (cos.f64 x) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (*.f64 #s(literal 0 binary64) (cos.f64 x)))","(fma.f64 (/.f64 (cos.f64 x) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (*.f64 (cos.f64 x) #s(literal 0 binary64)))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 (cos.f64 x) (-.f64 eps #s(literal 0 binary64))) (*.f64 #s(literal 0 binary64) (cos.f64 x)))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 (cos.f64 x) (-.f64 eps #s(literal 0 binary64))) (*.f64 (cos.f64 x) #s(literal 0 binary64)))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 (cos.f64 x) eps) (*.f64 #s(literal 0 binary64) (cos.f64 x)))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 (cos.f64 x) eps) (*.f64 (cos.f64 x) #s(literal 0 binary64)))","(fma.f64 (cos.f64 x) eps (*.f64 #s(literal 0 binary64) (cos.f64 x)))","(fma.f64 (cos.f64 x) eps (*.f64 (cos.f64 x) #s(literal 0 binary64)))","(fma.f64 (cos.f64 x) #s(literal 0 binary64) (*.f64 (cos.f64 x) eps))","(fma.f64 eps (cos.f64 x) (*.f64 #s(literal 0 binary64) (cos.f64 x)))","(fma.f64 eps (cos.f64 x) (*.f64 (cos.f64 x) #s(literal 0 binary64)))","(fma.f64 #s(literal 0 binary64) (cos.f64 x) (*.f64 (cos.f64 x) eps))","(+.f64 (*.f64 #s(literal 0 binary64) (cos.f64 x)) (*.f64 (cos.f64 x) eps))","(+.f64 (*.f64 (cos.f64 x) #s(literal 0 binary64)) (*.f64 (cos.f64 x) eps))","(+.f64 (*.f64 (cos.f64 x) eps) (*.f64 #s(literal 0 binary64) (cos.f64 x)))","(+.f64 (*.f64 (cos.f64 x) eps) (*.f64 (cos.f64 x) #s(literal 0 binary64)))","(cos.f64 x)","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps))","(*.f64 (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 eps #s(literal 0 binary64))))","(*.f64 (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps))","(*.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) (-.f64 eps #s(literal 0 binary64))))","(*.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps)","(*.f64 eps (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal 0 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal 0 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))) (*.f64 #s(literal 0 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))) (-.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps)) (*.f64 (*.f64 #s(literal 0 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps) (-.f64 (*.f64 (*.f64 (cos.f64 x) eps) (*.f64 (cos.f64 x) eps)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps) (*.f64 (cos.f64 x) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) #s(literal 0 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) #s(literal 0 binary64)) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) #s(literal 0 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps)) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) #s(literal 0 binary64)) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)) (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)) (-.f64 (*.f64 (*.f64 (cos.f64 x) eps) (*.f64 (cos.f64 x) eps)) (*.f64 (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)) (*.f64 (cos.f64 x) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal 0 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))) #s(literal 3 binary64))) (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps) (-.f64 (*.f64 (*.f64 #s(literal 0 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))) (*.f64 #s(literal 0 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)))) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps) (*.f64 #s(literal 0 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) #s(literal 0 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps) (-.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) #s(literal 0 binary64)) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) #s(literal 0 binary64))) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) #s(literal 0 binary64))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 (cos.f64 x) eps) (*.f64 (cos.f64 x) eps) (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps)) (*.f64 (*.f64 (cos.f64 x) eps) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)) #s(literal 3 binary64))) (fma.f64 (*.f64 (cos.f64 x) eps) (*.f64 (cos.f64 x) eps) (-.f64 (*.f64 (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)) (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps))) (*.f64 (*.f64 (cos.f64 x) eps) (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps)) (neg.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps)) (neg.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps))))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)))) (neg.f64 (neg.f64 eps)))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)))) (neg.f64 (*.f64 eps eps)))","(/.f64 (neg.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) (neg.f64 (*.f64 eps eps)))) (neg.f64 (neg.f64 eps)))","(/.f64 (neg.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 eps eps)))","(/.f64 (neg.f64 (*.f64 eps (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (neg.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))))","(/.f64 (neg.f64 (*.f64 eps (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 eps eps)))) (neg.f64 (*.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)) (neg.f64 eps))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)) (*.f64 eps eps))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (*.f64 eps eps)))) (neg.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))) (neg.f64 eps))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))) (*.f64 eps eps))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (neg.f64 (*.f64 (neg.f64 eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (*.f64 (neg.f64 eps) (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))))))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (neg.f64 (*.f64 (*.f64 eps eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (*.f64 (*.f64 eps eps) (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))) (*.f64 eps eps))","(/.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(/.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(/.f64 (*.f64 eps (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)))","(/.f64 (*.f64 eps (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 eps eps))) (*.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)) (neg.f64 eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 eps #s(literal 3 binary64))) (*.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)) (*.f64 eps eps)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (*.f64 eps eps))) (*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))) (neg.f64 eps)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 eps #s(literal 3 binary64))) (*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))) (*.f64 eps eps)))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (neg.f64 eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 eps) (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps))))))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (*.f64 eps eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (*.f64 eps eps) (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)) (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))) (*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps)))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 eps) (*.f64 (neg.f64 (*.f64 eps eps)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 eps eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 eps) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) (neg.f64 (*.f64 eps eps)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 eps eps) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)) (*.f64 eps (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))) (*.f64 eps (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)) (neg.f64 eps)) (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 eps eps)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)) (*.f64 eps eps)) (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))) (neg.f64 eps)) (*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (*.f64 eps eps)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))) (*.f64 eps eps)) (*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))) (*.f64 (neg.f64 (*.f64 eps eps)) (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 eps) (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps))))) (*.f64 (neg.f64 (*.f64 eps eps)) (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 eps eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 eps eps) (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps))))) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 eps #s(literal 0 binary64))) (*.f64 #s(literal 0 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))))","(fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 eps #s(literal 0 binary64))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) #s(literal 0 binary64)))","(fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (*.f64 #s(literal 0 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))))","(fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) #s(literal 0 binary64)))","(fma.f64 (/.f64 (cos.f64 x) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 eps #s(literal 0 binary64))) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps))","(fma.f64 (/.f64 (cos.f64 x) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 eps #s(literal 0 binary64))) (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))","(fma.f64 (/.f64 (cos.f64 x) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps))","(fma.f64 (/.f64 (cos.f64 x) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) (-.f64 eps #s(literal 0 binary64))) (*.f64 #s(literal 0 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) (-.f64 eps #s(literal 0 binary64))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) #s(literal 0 binary64)))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps) (*.f64 #s(literal 0 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) #s(literal 0 binary64)))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 (cos.f64 x) (-.f64 eps #s(literal 0 binary64))) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 (cos.f64 x) (-.f64 eps #s(literal 0 binary64))) (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 (cos.f64 x) eps) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 (cos.f64 x) eps) (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))","(fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps (*.f64 (cos.f64 x) eps))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps (*.f64 #s(literal 0 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) #s(literal 0 binary64)))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) #s(literal 0 binary64) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps))","(fma.f64 (cos.f64 x) eps (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps))","(fma.f64 (cos.f64 x) eps (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))","(fma.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (*.f64 (cos.f64 x) eps))","(fma.f64 eps (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) (*.f64 #s(literal 0 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))))","(fma.f64 eps (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) #s(literal 0 binary64)))","(fma.f64 eps (cos.f64 x) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps))","(fma.f64 eps (cos.f64 x) (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))","(fma.f64 #s(literal 0 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps))","(+.f64 (*.f64 #s(literal 0 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps))","(+.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps) (*.f64 (cos.f64 x) eps))","(+.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) #s(literal 0 binary64)) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps))","(+.f64 (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)) (*.f64 (cos.f64 x) eps))","(+.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps) (*.f64 #s(literal 0 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))))","(+.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) #s(literal 0 binary64)))","(+.f64 (*.f64 (cos.f64 x) eps) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps))","(+.f64 (*.f64 (cos.f64 x) eps) (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))","(*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))) (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))) (fma.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)))) (neg.f64 (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))) (*.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))))","(/.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64))) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)))))","(/.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)))))","(/.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)))) (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))))","(fma.f64 (/.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 eps #s(literal 0 binary64))) (cos.f64 x))","(fma.f64 (/.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (cos.f64 x))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) (-.f64 eps #s(literal 0 binary64))) (cos.f64 x))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))","(fma.f64 (*.f64 eps (sin.f64 x)) #s(literal -1/2 binary64) (cos.f64 x))","(fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (sin.f64 x) (cos.f64 x))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))","(fma.f64 #s(literal -1/2 binary64) (*.f64 (sin.f64 x) eps) (cos.f64 x))","(fma.f64 (sin.f64 x) (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x))","(fma.f64 eps (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) (cos.f64 x))","(-.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps))) (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))))","(+.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))","(+.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps))","(*.f64 #s(literal -1/2 binary64) (sin.f64 x))","(*.f64 (sin.f64 x) #s(literal -1/2 binary64))","#s(approx (- (sin (+ x eps)) (sin x)) (fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps)))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) #s(literal 2 binary64)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (-.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) (sin.f64 eps)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (sin.f64 eps) (-.f64 (sin.f64 eps) (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x)) (pow.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) (sin.f64 eps))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) (sin.f64 eps))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) (sin.f64 eps))) (/.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) (sin.f64 eps))) (fma.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) (sin.f64 eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) (sin.f64 eps))) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) (sin.f64 eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) (sin.f64 eps)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (sin.f64 eps) (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) #s(literal 2 binary64)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) (sin.f64 eps)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (sin.f64 eps) (-.f64 (sin.f64 eps) (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x)) (pow.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) (sin.f64 eps))) (*.f64 (-.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (*.f64 (-.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) (sin.f64 eps)) (-.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) (sin.f64 eps))))","(/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) #s(literal 2 binary64))) (-.f64 (sin.f64 eps) (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) #s(literal 2 binary64)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) (sin.f64 eps))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (sin.f64 eps) (sin.f64 eps) (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) (sin.f64 eps))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (sin.f64 eps) (-.f64 (sin.f64 eps) (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x)) (pow.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) #s(literal 2 binary64)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) (sin.f64 eps)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps)))))","(/.f64 (+.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) #s(literal 3 binary64))) (fma.f64 (sin.f64 eps) (sin.f64 eps) (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) (sin.f64 eps)))))","(/.f64 (+.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) #s(literal 3 binary64))) (fma.f64 (sin.f64 eps) (-.f64 (sin.f64 eps) (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x)) (pow.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sin.f64 eps) (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (sin.f64 eps) (sin.f64 eps) (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) (sin.f64 eps)))) (+.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps))))","(fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps))","(fma.f64 x (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) (sin.f64 eps))","(-.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (-.f64 (sin.f64 eps) (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) #s(literal 2 binary64)) (-.f64 (sin.f64 eps) (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) (sin.f64 eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) (sin.f64 eps))))","(+.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x) (sin.f64 eps))","(+.f64 (sin.f64 eps) (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x))","(*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) #s(literal 2 binary64))) (pow.f64 (-.f64 (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (*.f64 (sin.f64 eps) x) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 (*.f64 (sin.f64 eps) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (-.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64))))) #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))) (fma.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))) (/.f64 (pow.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))) (/.f64 (pow.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)) (-.f64 (cos.f64 eps) #s(literal 1 binary64))))))))","(/.f64 (-.f64 (pow.f64 (cos.f64 eps) #s(literal 3 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64))) #s(literal 3 binary64))) (fma.f64 (cos.f64 eps) (cos.f64 eps) (fma.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64))) (*.f64 (cos.f64 eps) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)))))))","(/.f64 (+.f64 (pow.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (cos.f64 eps)) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 (pow.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (cos.f64 eps)) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (cos.f64 eps)) #s(literal -1 binary64)))))","(/.f64 (+.f64 (pow.f64 (cos.f64 eps) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal -1 binary64) (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64))) #s(literal 3 binary64))) (fma.f64 (cos.f64 eps) (cos.f64 eps) (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64))) (+.f64 #s(literal -1 binary64) (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)))) (*.f64 (cos.f64 eps) (+.f64 #s(literal -1 binary64) (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (cos.f64 eps)) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (cos.f64 eps)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (cos.f64 eps)) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (pow.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (cos.f64 eps)) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (cos.f64 eps)) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)) (-.f64 (cos.f64 eps) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (sin.f64 eps) x) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (sin.f64 eps) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (-.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64))))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))) (*.f64 (-.f64 (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) (pow.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) #s(literal 2 binary64)))) (*.f64 (-.f64 (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) (-.f64 (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (cos.f64 eps)) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (cos.f64 eps)) #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)) #s(literal 2 binary64))) (-.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (cos.f64 eps)) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (cos.f64 eps)) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (cos.f64 eps)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (sin.f64 eps) x) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (sin.f64 eps) x) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (*.f64 (sin.f64 eps) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (-.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)) (-.f64 (cos.f64 eps) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (sin.f64 eps) x) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)) (-.f64 (cos.f64 eps) #s(literal 1 binary64))))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (sin.f64 eps) x) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) #s(literal 3 binary64))) (fma.f64 (pow.f64 (*.f64 (sin.f64 eps) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (-.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (cos.f64 eps)) #s(literal 1 binary64)) (-.f64 (pow.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (cos.f64 eps)) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64))) (-.f64 (pow.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (cos.f64 eps)) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (cos.f64 eps)) #s(literal 1 binary64)))) (-.f64 (pow.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (cos.f64 eps)) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)) (-.f64 (cos.f64 eps) #s(literal 1 binary64))))) (fma.f64 (pow.f64 (*.f64 (sin.f64 eps) x) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))))","(fma.f64 (/.f64 (+.f64 #s(literal 1 binary64) (cos.f64 eps)) (+.f64 #s(literal 1 binary64) (cos.f64 eps))) (/.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 eps)) x (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) (sin.f64 eps) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 1 binary64) (cos.f64 eps)) #s(literal -1 binary64)) (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)))","(fma.f64 (-.f64 (pow.f64 (cos.f64 eps) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps))) #s(literal -1 binary64)) (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)))","(fma.f64 #s(literal 1 binary64) (cos.f64 eps) (+.f64 #s(literal -1 binary64) (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64))))","(fma.f64 (cos.f64 eps) #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64))))","(fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(fma.f64 #s(literal -1/2 binary64) (*.f64 (sin.f64 eps) x) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(fma.f64 (sin.f64 eps) (*.f64 #s(literal -1/2 binary64) x) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(fma.f64 x (*.f64 (sin.f64 eps) #s(literal -1/2 binary64)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (cos.f64 eps)) #s(literal 2 binary64)) (+.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (cos.f64 eps)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (cos.f64 eps)) #s(literal 1 binary64))))","(-.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (-.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (cos.f64 eps)) #s(literal 3 binary64)) (+.f64 (pow.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (cos.f64 eps)) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (cos.f64 eps)) #s(literal 1 binary64))))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (cos.f64 eps)) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (cos.f64 eps)) #s(literal 1 binary64))))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))) (/.f64 (pow.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))))","(-.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (cos.f64 eps)) #s(literal 1 binary64))","(-.f64 (cos.f64 eps) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64))))","(+.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (cos.f64 eps)) #s(literal -1 binary64))","(+.f64 (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(+.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)))","(+.f64 (cos.f64 eps) (+.f64 #s(literal -1 binary64) (*.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64))))","(*.f64 (sin.f64 eps) x)","(*.f64 x (sin.f64 eps))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal 0 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) eps))) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal 0 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) eps))) (*.f64 #s(literal 0 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) eps))) (-.f64 (*.f64 (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))) (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))) (*.f64 (*.f64 #s(literal 0 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) eps))) (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))))))","(fma.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 1 binary64) (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 0 binary64)))","(fma.f64 #s(literal 0 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)) (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))))","(sin.f64 (*.f64 #s(literal 1/2 binary64) eps))","(+.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 1 binary64)) (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 0 binary64)))","(+.f64 (*.f64 #s(literal 0 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) eps))) (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))))","(*.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 #s(literal 1/2 binary64) (-.f64 eps #s(literal 0 binary64))))","(*.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 #s(literal 1/2 binary64) eps))","(*.f64 (/.f64 #s(literal 1/2 binary64) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 eps #s(literal 0 binary64))))","(*.f64 (/.f64 #s(literal 1/2 binary64) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps))","(*.f64 #s(literal 1/2 binary64) eps)","(*.f64 eps #s(literal 1/2 binary64))","(/.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 eps #s(literal 3 binary64)) #s(literal 0 binary64)) (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) eps) #s(literal 2 binary64)) (-.f64 #s(literal 0 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) eps) #s(literal 0 binary64)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(literal 1/2 binary64))) (neg.f64 (neg.f64 eps)))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/2 binary64))) (neg.f64 (*.f64 eps eps)))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 (*.f64 eps eps)))) (neg.f64 (neg.f64 eps)))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 eps eps)))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (*.f64 #s(literal 1/2 binary64) eps) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 0 binary64) (*.f64 #s(literal 1/2 binary64) eps))))","(/.f64 (neg.f64 (+.f64 #s(literal 0 binary64) (*.f64 #s(literal 1/8 binary64) (pow.f64 eps #s(literal 3 binary64))))) (neg.f64 (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) eps) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 #s(literal 1/2 binary64) eps))))))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(literal 1/2 binary64)) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/2 binary64)) (*.f64 eps eps))","(/.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(/.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (*.f64 #s(literal 1/2 binary64) eps) #s(literal 2 binary64))) (-.f64 #s(literal 0 binary64) (*.f64 #s(literal 1/2 binary64) eps)))","(/.f64 (+.f64 #s(literal 0 binary64) (*.f64 #s(literal 1/8 binary64) (pow.f64 eps #s(literal 3 binary64)))) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) eps) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 #s(literal 1/2 binary64) eps)))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 eps) (*.f64 (neg.f64 (*.f64 eps eps)) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 eps eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 eps) (*.f64 #s(literal 1/2 binary64) (neg.f64 (*.f64 eps eps)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 eps eps) (*.f64 #s(literal 1/2 binary64) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 0 binary64) (*.f64 #s(literal 1/2 binary64) eps)) (-.f64 #s(literal 0 binary64) (pow.f64 (*.f64 #s(literal 1/2 binary64) eps) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) eps) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 #s(literal 1/2 binary64) eps)))) (+.f64 #s(literal 0 binary64) (*.f64 #s(literal 1/8 binary64) (pow.f64 eps #s(literal 3 binary64))))))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 #s(literal 1/2 binary64) (-.f64 eps #s(literal 0 binary64))) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 #s(literal 1/2 binary64) eps) #s(literal 0 binary64))","(fma.f64 (/.f64 #s(literal 1/2 binary64) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 eps #s(literal 0 binary64))) #s(literal 0 binary64))","(fma.f64 (/.f64 #s(literal 1/2 binary64) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) #s(literal 0 binary64))","(fma.f64 #s(literal 1/2 binary64) eps #s(literal 0 binary64))","(fma.f64 eps #s(literal 1/2 binary64) #s(literal 0 binary64))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 #s(literal 0 binary64) (*.f64 #s(literal 1/2 binary64) eps))) (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) eps) #s(literal 2 binary64)) (-.f64 #s(literal 0 binary64) (*.f64 #s(literal 1/2 binary64) eps))))","(+.f64 (*.f64 #s(literal 1/2 binary64) eps) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (*.f64 #s(literal 1/2 binary64) eps))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) (cos.f64 eps)) (+.f64 #s(literal 1 binary64) (cos.f64 eps))) (/.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 1 binary64) (cos.f64 eps)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (cos.f64 eps) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps))) #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 eps) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) (cos.f64 eps))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (cos.f64 eps)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (cos.f64 eps) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) (cos.f64 eps))) (/.f64 (pow.f64 (cos.f64 eps) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) (cos.f64 eps))) (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (cos.f64 eps)) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (cos.f64 eps)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (cos.f64 eps) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) (cos.f64 eps))) (pow.f64 (+.f64 #s(literal 1 binary64) (cos.f64 eps)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 eps) #s(literal 3 binary64)) (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps)))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps))) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (cos.f64 eps) #s(literal 3 binary64)) (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps)))) (/.f64 (pow.f64 (cos.f64 eps) #s(literal 3 binary64)) (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps)))) (fma.f64 (pow.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps))) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (cos.f64 eps) #s(literal 3 binary64)) (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps)))) (pow.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps))) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 eps) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (cos.f64 eps) #s(literal 2 binary64)) (*.f64 #s(literal -1 binary64) (cos.f64 eps)))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 #s(literal 1 binary64) (cos.f64 eps)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 eps) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (cos.f64 eps) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) (cos.f64 eps))) (+.f64 #s(literal 1 binary64) (cos.f64 eps))) (pow.f64 (+.f64 #s(literal 1 binary64) (cos.f64 eps)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (cos.f64 eps) #s(literal 3 binary64)) (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps)))) (*.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps))) #s(literal 1 binary64))) (pow.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps))) #s(literal 2 binary64)))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (neg.f64 (-.f64 (cos.f64 eps) #s(literal -1 binary64))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (neg.f64 (+.f64 #s(literal 1 binary64) (cos.f64 eps))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 eps) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (-.f64 #s(literal 1 binary64) (*.f64 (cos.f64 eps) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 eps) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps)))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (cos.f64 eps) #s(literal -1 binary64)))","(/.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (+.f64 #s(literal 1 binary64) (cos.f64 eps)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 (cos.f64 eps) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (cos.f64 eps) (cos.f64 eps) (-.f64 #s(literal 1 binary64) (*.f64 (cos.f64 eps) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 (cos.f64 eps) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (cos.f64 eps) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (-.f64 #s(literal 1 binary64) (*.f64 (cos.f64 eps) #s(literal -1 binary64)))) (-.f64 (pow.f64 (cos.f64 eps) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))))","(fma.f64 #s(literal 1 binary64) (cos.f64 eps) #s(literal -1 binary64))","(fma.f64 (cos.f64 eps) #s(literal 1 binary64) #s(literal -1 binary64))","(-.f64 (/.f64 (pow.f64 (cos.f64 eps) #s(literal 2 binary64)) (-.f64 (cos.f64 eps) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (cos.f64 eps) #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 (cos.f64 eps) #s(literal 3 binary64)) (fma.f64 (cos.f64 eps) (cos.f64 eps) (-.f64 #s(literal 1 binary64) (*.f64 (cos.f64 eps) #s(literal -1 binary64))))) (/.f64 #s(literal 1 binary64) (fma.f64 (cos.f64 eps) (cos.f64 eps) (-.f64 #s(literal 1 binary64) (*.f64 (cos.f64 eps) #s(literal -1 binary64))))))","(-.f64 (/.f64 (pow.f64 (cos.f64 eps) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) (cos.f64 eps))) (pow.f64 (+.f64 #s(literal 1 binary64) (cos.f64 eps)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (cos.f64 eps) #s(literal 3 binary64)) (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps)))) (pow.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps))) #s(literal -1 binary64)))","(-.f64 (cos.f64 eps) #s(literal 1 binary64))","(+.f64 #s(literal -1 binary64) (cos.f64 eps))","(+.f64 (cos.f64 eps) #s(literal -1 binary64))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":244.903076171875,"type":"rewrite"},{"compiler":[[17094,2263]],"memory":[[-9037568,52271616]],"time":134.37890625,"type":"eval"},{"alts":[["(fma.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (/.f64 (sin.f64 (+.f64 eps x)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","fresh",46.47655982721475,"binary64"],["(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (fma.f64 (fma.f64 (neg.f64 (sin.f64 x)) (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/8 binary64))) eps (cos.f64 x))))","fresh",0.18109347508443552,"binary64"],["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","next",0.08707685291289795,"binary64"],["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3840 binary64) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","fresh",0.09835624850173226,"binary64"],["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","fresh",0.20171502055213864,"binary64"],["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","fresh",0.41521283987173957,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x)) eps))","next",0.20056778350605978,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps))","done",0.42192036332670746,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","next",0.8830580249709584,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))","done",0.6962720036039058,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x #s(literal 1 binary64))) eps))","fresh",1.1255042749918829,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 x eps) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps))","fresh",1.4957460657583035,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64))) eps))","next",1.1262824794532889,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","fresh",1.1095817058193762,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","fresh",1.1585310579852772,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps))","fresh",1.1265749561628902,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","next",1.5328372345675862,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 x eps)) eps)))","fresh",1.1184699794532889,"binary64"]],"compiler":[[50,15],[38,28],[35,24],[30,22],[25,20],[20,17],[29,19],[18,13],[27,18],[12,9],[34,22],[26,18],[28,19],[29,18],[24,16],[19,14],[14,11],[30,19],[50,15],[38,28],[35,24],[30,22],[25,20],[20,17],[29,19],[27,18],[34,22],[26,18],[28,19],[29,18],[24,16],[19,14],[14,11],[30,19]],"count":[[540,18]],"kept":[{"done":[1,0],"fresh":[2,2],"new":[532,14],"picked":[5,2]}],"memory":[[-568384,27228112]],"min-error":[[0.030791574411569694,"binary64"]],"time":19.571044921875,"type":"prune"},{"egraph":[[0,8043,478,0.05246867],[12,6930,481,0.020246351],[11,5938,481,0.0201504],[10,4214,481,0.023941194],[9,3308,481,0.011832948],[8,3240,481,0.006809972],[7,3211,481,0.00674197],[6,3180,481,0.006607126],[5,3097,481,0.008534144],[4,2159,481,0.010100624],[3,1135,481,0.008412952],[2,457,481,0.005133292],[1,175,481,0.001748291],[0,100,481,0.000948795],[0,61,487,0.000655853]],"inputs":[["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64))","#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))","(fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64))","(fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64))","#s(literal -1/645120 binary64)","(*.f64 eps eps)","eps","#s(literal 1/3840 binary64)","#s(literal -1/48 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","(cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64)))","(/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))","(fma.f64 #s(literal 2 binary64) x eps)","x","#s(literal -2 binary64)","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","(*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps)","#s(approx (cos x) #s(literal 1 binary64))","#s(literal 1 binary64)","eps","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64))) eps))","(*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64))) eps)","#s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64))","(*.f64 #s(literal -1/2 binary64) x)","#s(literal -1/2 binary64)","x","(+.f64 x eps)","eps","#s(literal 1 binary64)","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps)","(fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x))","#s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x))","(*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)","(fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64))","#s(literal 1/12 binary64)","(*.f64 x x)","x","#s(literal -1/2 binary64)","eps","(cos.f64 x)","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x)) eps)","(fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x))","(fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps))","(sin.f64 x)","x","(fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))","(*.f64 eps eps)","eps","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","(*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)","(*.f64 (cos.f64 x) #s(literal -1/6 binary64))","(cos.f64 x)","#s(literal -1/6 binary64)"]],"locations":[["(fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps))","cost-diff",0],["(fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x))","cost-diff",0],["(*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x)) eps)","cost-diff",0],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x)) eps))","cost-diff",0],["#s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x))","cost-diff",0],["(fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x))","cost-diff",0],["(*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps)","cost-diff",0],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","cost-diff",0],["(fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64))","cost-diff",0],["#s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64)))","cost-diff",0],["(*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64))) eps)","cost-diff",0],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64))) eps))","cost-diff",0],["#s(approx (cos x) #s(literal 1 binary64))","cost-diff",0],["(*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps)","cost-diff",0],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","cost-diff",0],["(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","cost-diff",0],["#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","cost-diff",0],["(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64))","cost-diff",0],["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","cost-diff",0]],"memory":[[-3326784,30123344]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(*.f64 (cos.f64 (/.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal -2 binary64))) (*.f64 #s(literal 2 binary64) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))))","(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)))","#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))","(fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))","(fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64))","(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64))","(fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64))","(fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64))","#s(literal -1/645120 binary64)","(*.f64 eps eps)","eps","#s(literal 1/3840 binary64)","#s(literal -1/48 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","(cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64)))","(cos.f64 (/.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal -2 binary64)))","(/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))","(/.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal -2 binary64))","(fma.f64 #s(literal 2 binary64) x eps)","(fma.f64 x #s(literal 2 binary64) eps)","x","#s(literal -2 binary64)","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","(*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps)","#s(approx (cos x) #s(literal 1 binary64))","#s(literal 1 binary64)","eps","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64))) eps))","(*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64))) eps)","(*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64))) eps)","#s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64)))","#s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64))","(fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64))","(*.f64 #s(literal -1/2 binary64) x)","#s(literal -1/2 binary64)","x","(+.f64 x eps)","eps","#s(literal 1 binary64)","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps)","(*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps)","(fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x))","(fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x))","#s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x))","#s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x))","(*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)","(fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64))","(fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64))","#s(literal 1/12 binary64)","(*.f64 x x)","x","#s(literal -1/2 binary64)","eps","(cos.f64 x)","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x)) eps)","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (cos.f64 x)) eps)","(fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (cos.f64 x))","(fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps))","(sin.f64 x)","x","(fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))","(fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64))","(*.f64 eps eps)","eps","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","(*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)","(*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)","(*.f64 (cos.f64 x) #s(literal -1/6 binary64))","(*.f64 #s(literal -1/6 binary64) (cos.f64 x))","(cos.f64 x)","#s(literal -1/6 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":285.072998046875,"type":"simplify"},{"compiler":[[340,59]],"locations":[["(cos.f64 x)","accuracy",0.01171875],["(fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps))","accuracy",0.0234375],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x)) eps))","accuracy",0.1848814309973384],["(*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)","accuracy",0.37109375],["(*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)","accuracy",0.01171875],["(cos.f64 x)","accuracy",0.01171875],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","accuracy",0.41020161332953264],["#s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x))","accuracy",1.1327917390405489],["(fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64))","accuracy",0.00390625],["(*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64))) eps)","accuracy",0.01171875],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64))) eps))","accuracy",0.41020161332953264],["#s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64)))","accuracy",1.1189037512581257],["(*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps)","accuracy",0.015625],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","accuracy",0.6884607009963482],["#s(approx (cos x) #s(literal 1 binary64))","accuracy",1.5459872928692915],["(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","accuracy",0.00390625],["(fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64))","accuracy",0.0078125],["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","accuracy",0.014003759768442016],["(cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64)))","accuracy",0.08081859864955285]],"memory":[[6698016,63643072]],"mixsample":[[1.910400390625,"ival-div",0],[9.479736328125,"adjust",800],[0.120361328125,"ival-assert",0],[0.028076171875,"const",400],[1.562255859375,"ival-sub",0],[4.420654296875,"ival-cos",0],[22.768798828125,"const",0],[0.033447265625,"ival-sub",400],[0.044189453125,"ival-cos",400],[17.361083984375,"ival-add",0],[44.145263671875,"ival-mult",0],[0.27490234375,"ival-sin",400],[0.03369140625,"ival-mult",400],[6.72705078125,"ival-sin",0],[0.018310546875,"ival-add",400],[0.228271484375,"ival-true",0],[0.74853515625,"exact",0]],"outcomes":[[69.087646484375,1,"valid",85],[77.113525390625,0,"valid",171]],"time":187.780029296875,"type":"localize"},{"count":[[24,132]],"inputs":[["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64))","#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","(*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps)","#s(approx (cos x) #s(literal 1 binary64))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64))) eps))","(*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64))) eps)","#s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps)","(fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x))","#s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x)) eps)","(fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x))","(fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps))","(cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64)))","(fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64))","(cos.f64 x)","(*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)","(*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)"]],"memory":[[-4157600,13443648]],"outputs":[["(* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps))))","(+ (* 2 (* x (* (sin (* -1/2 eps)) (sin (* 1/2 eps))))) (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))))","(+ (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* -1 (* x (* (cos (* -1/2 eps)) (sin (* 1/2 eps))))) (* 2 (* (sin (* -1/2 eps)) (sin (* 1/2 eps)))))))","(+ (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* 2 (* (sin (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* -1 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* -1/3 (* x (* (sin (* -1/2 eps)) (sin (* 1/2 eps))))))))))","(sin eps)","(+ (sin eps) (* x (- (cos eps) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* x (+ 1/6 (* -1/6 (cos eps))))))) 1)))","eps","(+ eps (* -1/2 (* eps (pow x 2))))","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* 1/24 (* eps (pow x 2))))))","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* (pow x 2) (+ (* -1/720 (* eps (pow x 2))) (* 1/24 eps))))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(+ eps (* -1/2 (* (pow eps 2) x)))","(+ eps (* x (+ (* -1/2 (* eps x)) (* -1/2 (pow eps 2)))))","(+ eps (* x (+ (* -1/2 (pow eps 2)) (* x (+ (* -1/2 eps) (* 1/12 (* (pow eps 2) x)))))))","(+ 1 (* -1/2 (* eps x)))","(+ 1 (* x (+ (* -1/2 eps) (* -1/2 x))))","(+ 1 (* x (+ (* -1/2 eps) (* x (- (* 1/12 (* eps x)) 1/2)))))","(* -1/2 x)","(* x (- (* 1/12 (pow x 2)) 1/2))","(* x (- (* (pow x 2) (+ 1/12 (* -1/240 (pow x 2)))) 1/2))","(* x (- (* (pow x 2) (+ 1/12 (* (pow x 2) (- (* 1/10080 (pow x 2)) 1/240)))) 1/2))","(* eps (+ 1 (* -1/6 (pow eps 2))))","(+ (* eps (+ 1 (* -1/6 (pow eps 2)))) (* (pow eps 2) (* x (- (* 1/24 (pow eps 2)) 1/2))))","(+ (* eps (+ 1 (* -1/6 (pow eps 2)))) (* x (+ (* eps (* x (- (* 1/12 (pow eps 2)) 1/2))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))))","(+ (* eps (+ 1 (* -1/6 (pow eps 2)))) (* x (+ (* x (+ (* -1/6 (* (pow eps 2) (* x (- (* 1/24 (pow eps 2)) 1/2)))) (* eps (- (* 1/12 (pow eps 2)) 1/2)))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))))","(+ 1 (* -1/6 (pow eps 2)))","(+ 1 (+ (* -1/6 (pow eps 2)) (* eps (* x (- (* 1/24 (pow eps 2)) 1/2)))))","(+ 1 (+ (* -1/6 (pow eps 2)) (* x (+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (* 1/12 (pow eps 2)) 1/2))))))","(+ 1 (+ (* -1/6 (pow eps 2)) (* x (+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (+ (* -1/6 (* eps (* x (- (* 1/24 (pow eps 2)) 1/2)))) (* 1/12 (pow eps 2))) 1/2))))))","(* -1/6 eps)","(+ (* -1/6 eps) (* x (- (* 1/24 (pow eps 2)) 1/2)))","(+ (* -1/6 eps) (* x (- (+ (* 1/24 (pow eps 2)) (* 1/12 (* eps x))) 1/2)))","(+ (* -1/6 eps) (* x (- (+ (* 1/24 (pow eps 2)) (* x (+ (* -1/6 (* x (- (* 1/24 (pow eps 2)) 1/2))) (* 1/12 eps)))) 1/2)))","(cos (* -1/2 eps))","(+ (cos (* -1/2 eps)) (* x (sin (* -1/2 eps))))","(+ (cos (* -1/2 eps)) (* x (- (* -1/2 (* x (cos (* -1/2 eps)))) (* -1 (sin (* -1/2 eps))))))","(+ (cos (* -1/2 eps)) (* x (- (* x (+ (* -1/2 (cos (* -1/2 eps))) (* -1/6 (* x (sin (* -1/2 eps)))))) (* -1 (sin (* -1/2 eps))))))","(+ (* -1/6 eps) (* 1/12 (* eps (pow x 2))))","(+ (* -1/6 eps) (* (pow x 2) (+ (* -1/144 (* eps (pow x 2))) (* 1/12 eps))))","(+ (* -1/6 eps) (* (pow x 2) (+ (* 1/12 eps) (* (pow x 2) (+ (* -1/144 eps) (* 1/4320 (* eps (pow x 2))))))))","(* 2 (* (cos (* -1/2 (+ eps (* 2 x)))) (sin (* 1/2 eps))))","(- (sin (+ eps x)) (sin x))","(* eps (cos x))","(cos x)","(* eps (+ (cos x) (* -1/2 (* eps (sin x)))))","(+ (cos x) (* -1/2 (* eps (sin x))))","(* -1/2 (pow x 2))","(* (pow x 2) (- (* -1/2 (/ eps x)) 1/2))","(* (pow x 2) (- (+ (* -1/2 (/ eps x)) (/ 1 (pow x 2))) 1/2))","(* -1/2 (sin x))","(* eps (+ (cos x) (* eps (+ (* -1/6 (* eps (cos x))) (* (sin x) (- (* 1/24 (pow eps 2)) 1/2))))))","(+ (cos x) (* eps (+ (* -1/6 (* eps (cos x))) (* (sin x) (- (* 1/24 (pow eps 2)) 1/2)))))","(+ (* -1/6 (* eps (cos x))) (* (sin x) (- (* 1/24 (pow eps 2)) 1/2)))","(cos (* -1/2 (+ eps (* 2 x))))","(* 1/12 (pow x 3))","(* (pow x 3) (- 1/12 (* 1/2 (/ 1 (pow x 2)))))","(* -1/6 (* eps (cos x)))","(* 2 (* (cos (* -1/2 (- eps (* -2 x)))) (sin (* 1/2 eps))))","(- (sin (- eps (* -1 x))) (sin x))","(* (pow x 2) (- (* -1 (/ (- (* 1/2 eps) (/ 1 x)) x)) 1/2))","(cos (* -1/2 (- eps (* -2 x))))","(* -1 (* (pow x 3) (- (* 1/2 (/ 1 (pow x 2))) 1/12)))","(* eps (cos (* -1 x)))","(* eps (+ (cos (* -1 x)) (* 1/2 (* eps (sin (* -1 x))))))","(* eps (+ (cos (* -1 x)) (* eps (+ (* 1/2 (sin (* -1 x))) (* 2 (* eps (+ (* -1/16 (cos (* -1 x))) (* -1/48 (cos (* -1 x))))))))))","(* eps (+ (cos (* -1 x)) (* eps (+ (* 1/2 (sin (* -1 x))) (* eps (+ (* -1/24 (* eps (sin (* -1 x)))) (* 2 (+ (* -1/16 (cos (* -1 x))) (* -1/48 (cos (* -1 x)))))))))))","(* eps (+ 1 (* -1/24 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/1920 (pow eps 2)) 1/24))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/1920 (* -1/322560 (pow eps 2)))) 1/24))))","(* 1/2 eps)","(* eps (+ 1/2 (* -1/48 (pow eps 2))))","(* eps (+ 1/2 (* (pow eps 2) (- (* 1/3840 (pow eps 2)) 1/48))))","(* eps (+ 1/2 (* (pow eps 2) (- (* (pow eps 2) (+ 1/3840 (* -1/645120 (pow eps 2)))) 1/48))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x)))))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x)))))))))","(+ 1 (+ (* -1/2 (* eps x)) (* -1/2 (pow x 2))))","(+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x))))))","(+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x))))))))","(+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x))))","(+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x))))))","(cos (* -1 x))","(+ (cos (* -1 x)) (* 1/2 (* eps (sin (* -1 x)))))","(+ (cos (* -1 x)) (* eps (- (* -1/8 (* eps (cos (* -1 x)))) (* -1/2 (sin (* -1 x))))))","(+ (cos (* -1 x)) (* eps (- (* eps (+ (* -1/8 (cos (* -1 x))) (* -1/48 (* eps (sin (* -1 x)))))) (* -1/2 (sin (* -1 x))))))","-1/48","(- (* 1/3840 (pow eps 2)) 1/48)","(- (* (pow eps 2) (+ 1/3840 (* -1/645120 (pow eps 2)))) 1/48)","(* 2 (sin (* 1/2 eps)))","(sin (* 1/2 eps))","(* -1/645120 (pow eps 7))","(* (pow eps 7) (- (* 1/3840 (/ 1 (pow eps 2))) 1/645120))","(* (pow eps 7) (- (* 1/3840 (/ 1 (pow eps 2))) (+ 1/645120 (/ 1/48 (pow eps 4)))))","(* (pow eps 7) (- (+ (* 1/3840 (/ 1 (pow eps 2))) (* 1/2 (/ 1 (pow eps 6)))) (+ 1/645120 (/ 1/48 (pow eps 4)))))","(* -1/2 (* (pow eps 2) (sin x)))","(* (pow eps 2) (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(* -1/2 (* eps (sin x)))","(* eps (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(* -1/2 (* eps x))","(* eps (+ (* -1/2 x) (+ (* -1/2 (/ (pow x 2) eps)) (/ 1 eps))))","(* 1/24 (* (pow eps 4) (sin x)))","(* (pow eps 4) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x))))","(* (pow eps 4) (+ (* -1/2 (/ (sin x) (pow eps 2))) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x)))))","(* (pow eps 4) (+ (* -1/2 (/ (sin x) (pow eps 2))) (+ (* -1/6 (/ (cos x) eps)) (+ (* 1/24 (sin x)) (/ (cos x) (pow eps 3))))))","(* 1/24 (* (pow eps 3) (sin x)))","(* (pow eps 3) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x))))","(* (pow eps 3) (+ (* -1/2 (/ (sin x) (pow eps 2))) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x)))))","(* (pow eps 3) (+ (* -1/2 (/ (sin x) (pow eps 2))) (+ (* -1/6 (/ (cos x) eps)) (+ (* 1/24 (sin x)) (/ (cos x) (pow eps 3))))))","(* 1/24 (* (pow eps 2) (sin x)))","(* (pow eps 2) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x))))","(* (pow eps 2) (+ (* -1/2 (/ (sin x) (pow eps 2))) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x)))))","(* -1/645120 (pow eps 4))","(* (pow eps 4) (- (* 1/3840 (/ 1 (pow eps 2))) 1/645120))","(* (pow eps 4) (- (* 1/3840 (/ 1 (pow eps 2))) (+ 1/645120 (/ 1/48 (pow eps 4)))))","(* 2 (* (cos (* -1/2 (- (* 2 x) (* -1 eps)))) (sin (* 1/2 eps))))","(* -1 (* (pow eps 7) (- 1/645120 (* 1/3840 (/ 1 (pow eps 2))))))","(* -1 (* (pow eps 7) (- (+ 1/645120 (/ 1/48 (pow eps 4))) (* 1/3840 (/ 1 (pow eps 2))))))","(* -1 (* (pow eps 7) (- (+ 1/645120 (/ 1/48 (pow eps 4))) (+ (* 1/3840 (/ 1 (pow eps 2))) (* 1/2 (/ 1 (pow eps 6)))))))","(- (sin (- x (* -1 eps))) (sin x))","(* -1 (* eps (+ (* -1 (/ (cos x) eps)) (* 1/2 (sin x)))))","(* -1 (* eps (+ (* -1 (/ (+ 1 (* -1/2 (pow x 2))) eps)) (* 1/2 x))))","(* (pow eps 4) (+ (* -1 (/ (+ (* 1/6 (cos x)) (* 1/2 (/ (sin x) eps))) eps)) (* 1/24 (sin x))))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (sin x)) (/ (cos x) eps)) eps)) (* 1/6 (cos x))) eps)) (* 1/24 (sin x))))","(* -1 (* (pow eps 3) (+ (* -1/24 (sin x)) (* 1/6 (/ (cos x) eps)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1/2 (/ (sin x) eps)) (* -1/6 (cos x))) eps)) (* -1/24 (sin x)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (cos x) eps)) (* 1/2 (sin x))) eps)) (* -1/6 (cos x))) eps)) (* -1/24 (sin x)))))","(* (pow eps 2) (+ (* -1 (/ (+ (* 1/6 (cos x)) (* 1/2 (/ (sin x) eps))) eps)) (* 1/24 (sin x))))","(cos (* -1/2 (- (* 2 x) (* -1 eps))))"]],"series":[[5.299072265625,"((* (* (sin (* 1/2 (+ 0 eps))) 2) (cos (/ (+ (* 2 x) eps) -2))) (* (sin (* 1/2 (+ 0 eps))) 2) (sin (* 1/2 (+ 0 eps))) (* (+ (* (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) (* eps eps)) 1/2) eps) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (cos x) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (+ (* (* -1/2 x) (+ x eps)) 1) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (* (sin x) -1/2) (- (sin (+ x eps)) (sin x)) (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) (cos (/ (+ (* 2 x) eps) -2)) (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) (cos x) (* (+ (* 1/12 (* x x)) -1/2) x) (* (* (cos x) -1/6) eps))","eps","-inf"],[4.387939453125,"((* (* (sin (* 1/2 (+ 0 eps))) 2) (cos (/ (+ (* 2 x) eps) -2))) (* (sin (* 1/2 (+ 0 eps))) 2) (sin (* 1/2 (+ 0 eps))) (* (+ (* (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) (* eps eps)) 1/2) eps) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (cos x) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (+ (* (* -1/2 x) (+ x eps)) 1) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (* (sin x) -1/2) (- (sin (+ x eps)) (sin x)) (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) (cos (/ (+ (* 2 x) eps) -2)) (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) (cos x) (* (+ (* 1/12 (* x x)) -1/2) x) (* (* (cos x) -1/6) eps))","eps","inf"],[8.3798828125,"((* (* (sin (* 1/2 (+ 0 eps))) 2) (cos (/ (+ (* 2 x) eps) -2))) (* (sin (* 1/2 (+ 0 eps))) 2) (sin (* 1/2 (+ 0 eps))) (* (+ (* (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) (* eps eps)) 1/2) eps) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (cos x) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (+ (* (* -1/2 x) (+ x eps)) 1) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (* (sin x) -1/2) (- (sin (+ x eps)) (sin x)) (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) (cos (/ (+ (* 2 x) eps) -2)) (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) (cos x) (* (+ (* 1/12 (* x x)) -1/2) x) (* (* (cos x) -1/6) eps))","eps","0"],[5.26708984375,"((* (* (sin (* 1/2 (+ 0 eps))) 2) (cos (/ (+ (* 2 x) eps) -2))) (* (sin (* 1/2 (+ 0 eps))) 2) (sin (* 1/2 (+ 0 eps))) (* (+ (* (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) (* eps eps)) 1/2) eps) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (cos x) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (+ (* (* -1/2 x) (+ x eps)) 1) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (* (sin x) -1/2) (- (sin (+ x eps)) (sin x)) (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) (cos (/ (+ (* 2 x) eps) -2)) (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) (cos x) (* (+ (* 1/12 (* x x)) -1/2) x) (* (* (cos x) -1/6) eps))","x","-inf"],[7.197998046875,"((* (* (sin (* 1/2 (+ 0 eps))) 2) (cos (/ (+ (* 2 x) eps) -2))) (* (sin (* 1/2 (+ 0 eps))) 2) (sin (* 1/2 (+ 0 eps))) (* (+ (* (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) (* eps eps)) 1/2) eps) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (cos x) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (+ (* (* -1/2 x) (+ x eps)) 1) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (* (sin x) -1/2) (- (sin (+ x eps)) (sin x)) (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) (cos (/ (+ (* 2 x) eps) -2)) (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) (cos x) (* (+ (* 1/12 (* x x)) -1/2) x) (* (* (cos x) -1/6) eps))","x","inf"],[2.611083984375,"((* (* (sin (* 1/2 (+ 0 eps))) 2) (cos (/ (+ (* 2 x) eps) -2))) (* (sin (* 1/2 (+ 0 eps))) 2) (sin (* 1/2 (+ 0 eps))) (* (+ (* (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) (* eps eps)) 1/2) eps) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (cos x) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (+ (* (* -1/2 x) (+ x eps)) 1) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (* (sin x) -1/2) (- (sin (+ x eps)) (sin x)) (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) (cos (/ (+ (* 2 x) eps) -2)) (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) (cos x) (* (+ (* 1/12 (* x x)) -1/2) x) (* (* (cos x) -1/6) eps))","x","0"]],"time":35.781982421875,"type":"series"},{"count":[[132,131]],"egraph":[[0,8163,1720,0.09453559],[2,4378,1884,0.026261153],[1,1478,1946,0.014867536],[0,486,2015,0.004976579]],"inputs":[["(* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps))))","(+ (* 2 (* x (* (sin (* -1/2 eps)) (sin (* 1/2 eps))))) (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))))","(+ (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* -1 (* x (* (cos (* -1/2 eps)) (sin (* 1/2 eps))))) (* 2 (* (sin (* -1/2 eps)) (sin (* 1/2 eps)))))))","(+ (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* 2 (* (sin (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* -1 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* -1/3 (* x (* (sin (* -1/2 eps)) (sin (* 1/2 eps))))))))))","(sin eps)","(+ (sin eps) (* x (- (cos eps) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* x (+ 1/6 (* -1/6 (cos eps))))))) 1)))","eps","(+ eps (* -1/2 (* eps (pow x 2))))","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* 1/24 (* eps (pow x 2))))))","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* (pow x 2) (+ (* -1/720 (* eps (pow x 2))) (* 1/24 eps))))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(+ eps (* -1/2 (* (pow eps 2) x)))","(+ eps (* x (+ (* -1/2 (* eps x)) (* -1/2 (pow eps 2)))))","(+ eps (* x (+ (* -1/2 (pow eps 2)) (* x (+ (* -1/2 eps) (* 1/12 (* (pow eps 2) x)))))))","(+ 1 (* -1/2 (* eps x)))","(+ 1 (* x (+ (* -1/2 eps) (* -1/2 x))))","(+ 1 (* x (+ (* -1/2 eps) (* x (- (* 1/12 (* eps x)) 1/2)))))","(* -1/2 x)","(* x (- (* 1/12 (pow x 2)) 1/2))","(* x (- (* (pow x 2) (+ 1/12 (* -1/240 (pow x 2)))) 1/2))","(* x (- (* (pow x 2) (+ 1/12 (* (pow x 2) (- (* 1/10080 (pow x 2)) 1/240)))) 1/2))","(* eps (+ 1 (* -1/6 (pow eps 2))))","(+ (* eps (+ 1 (* -1/6 (pow eps 2)))) (* (pow eps 2) (* x (- (* 1/24 (pow eps 2)) 1/2))))","(+ (* eps (+ 1 (* -1/6 (pow eps 2)))) (* x (+ (* eps (* x (- (* 1/12 (pow eps 2)) 1/2))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))))","(+ (* eps (+ 1 (* -1/6 (pow eps 2)))) (* x (+ (* x (+ (* -1/6 (* (pow eps 2) (* x (- (* 1/24 (pow eps 2)) 1/2)))) (* eps (- (* 1/12 (pow eps 2)) 1/2)))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))))","(+ 1 (* -1/6 (pow eps 2)))","(+ 1 (+ (* -1/6 (pow eps 2)) (* eps (* x (- (* 1/24 (pow eps 2)) 1/2)))))","(+ 1 (+ (* -1/6 (pow eps 2)) (* x (+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (* 1/12 (pow eps 2)) 1/2))))))","(+ 1 (+ (* -1/6 (pow eps 2)) (* x (+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (+ (* -1/6 (* eps (* x (- (* 1/24 (pow eps 2)) 1/2)))) (* 1/12 (pow eps 2))) 1/2))))))","(* -1/6 eps)","(+ (* -1/6 eps) (* x (- (* 1/24 (pow eps 2)) 1/2)))","(+ (* -1/6 eps) (* x (- (+ (* 1/24 (pow eps 2)) (* 1/12 (* eps x))) 1/2)))","(+ (* -1/6 eps) (* x (- (+ (* 1/24 (pow eps 2)) (* x (+ (* -1/6 (* x (- (* 1/24 (pow eps 2)) 1/2))) (* 1/12 eps)))) 1/2)))","(cos (* -1/2 eps))","(+ (cos (* -1/2 eps)) (* x (sin (* -1/2 eps))))","(+ (cos (* -1/2 eps)) (* x (- (* -1/2 (* x (cos (* -1/2 eps)))) (* -1 (sin (* -1/2 eps))))))","(+ (cos (* -1/2 eps)) (* x (- (* x (+ (* -1/2 (cos (* -1/2 eps))) (* -1/6 (* x (sin (* -1/2 eps)))))) (* -1 (sin (* -1/2 eps))))))","(+ (* -1/6 eps) (* 1/12 (* eps (pow x 2))))","(+ (* -1/6 eps) (* (pow x 2) (+ (* -1/144 (* eps (pow x 2))) (* 1/12 eps))))","(+ (* -1/6 eps) (* (pow x 2) (+ (* 1/12 eps) (* (pow x 2) (+ (* -1/144 eps) (* 1/4320 (* eps (pow x 2))))))))","(* 2 (* (cos (* -1/2 (+ eps (* 2 x)))) (sin (* 1/2 eps))))","(- (sin (+ eps x)) (sin x))","(* eps (cos x))","(cos x)","(* eps (+ (cos x) (* -1/2 (* eps (sin x)))))","(+ (cos x) (* -1/2 (* eps (sin x))))","(* -1/2 (pow x 2))","(* (pow x 2) (- (* -1/2 (/ eps x)) 1/2))","(* (pow x 2) (- (+ (* -1/2 (/ eps x)) (/ 1 (pow x 2))) 1/2))","(* -1/2 (sin x))","(* eps (+ (cos x) (* eps (+ (* -1/6 (* eps (cos x))) (* (sin x) (- (* 1/24 (pow eps 2)) 1/2))))))","(+ (cos x) (* eps (+ (* -1/6 (* eps (cos x))) (* (sin x) (- (* 1/24 (pow eps 2)) 1/2)))))","(+ (* -1/6 (* eps (cos x))) (* (sin x) (- (* 1/24 (pow eps 2)) 1/2)))","(cos (* -1/2 (+ eps (* 2 x))))","(* 1/12 (pow x 3))","(* (pow x 3) (- 1/12 (* 1/2 (/ 1 (pow x 2)))))","(* -1/6 (* eps (cos x)))","(* 2 (* (cos (* -1/2 (- eps (* -2 x)))) (sin (* 1/2 eps))))","(- (sin (- eps (* -1 x))) (sin x))","(* (pow x 2) (- (* -1 (/ (- (* 1/2 eps) (/ 1 x)) x)) 1/2))","(cos (* -1/2 (- eps (* -2 x))))","(* -1 (* (pow x 3) (- (* 1/2 (/ 1 (pow x 2))) 1/12)))","(* eps (cos (* -1 x)))","(* eps (+ (cos (* -1 x)) (* 1/2 (* eps (sin (* -1 x))))))","(* eps (+ (cos (* -1 x)) (* eps (+ (* 1/2 (sin (* -1 x))) (* 2 (* eps (+ (* -1/16 (cos (* -1 x))) (* -1/48 (cos (* -1 x))))))))))","(* eps (+ (cos (* -1 x)) (* eps (+ (* 1/2 (sin (* -1 x))) (* eps (+ (* -1/24 (* eps (sin (* -1 x)))) (* 2 (+ (* -1/16 (cos (* -1 x))) (* -1/48 (cos (* -1 x)))))))))))","(* eps (+ 1 (* -1/24 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/1920 (pow eps 2)) 1/24))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/1920 (* -1/322560 (pow eps 2)))) 1/24))))","(* 1/2 eps)","(* eps (+ 1/2 (* -1/48 (pow eps 2))))","(* eps (+ 1/2 (* (pow eps 2) (- (* 1/3840 (pow eps 2)) 1/48))))","(* eps (+ 1/2 (* (pow eps 2) (- (* (pow eps 2) (+ 1/3840 (* -1/645120 (pow eps 2)))) 1/48))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x)))))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x)))))))))","(+ 1 (+ (* -1/2 (* eps x)) (* -1/2 (pow x 2))))","(+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x))))))","(+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x))))))))","(+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x))))","(+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x))))))","(cos (* -1 x))","(+ (cos (* -1 x)) (* 1/2 (* eps (sin (* -1 x)))))","(+ (cos (* -1 x)) (* eps (- (* -1/8 (* eps (cos (* -1 x)))) (* -1/2 (sin (* -1 x))))))","(+ (cos (* -1 x)) (* eps (- (* eps (+ (* -1/8 (cos (* -1 x))) (* -1/48 (* eps (sin (* -1 x)))))) (* -1/2 (sin (* -1 x))))))","-1/48","(- (* 1/3840 (pow eps 2)) 1/48)","(- (* (pow eps 2) (+ 1/3840 (* -1/645120 (pow eps 2)))) 1/48)","(* 2 (sin (* 1/2 eps)))","(sin (* 1/2 eps))","(* -1/645120 (pow eps 7))","(* (pow eps 7) (- (* 1/3840 (/ 1 (pow eps 2))) 1/645120))","(* (pow eps 7) (- (* 1/3840 (/ 1 (pow eps 2))) (+ 1/645120 (/ 1/48 (pow eps 4)))))","(* (pow eps 7) (- (+ (* 1/3840 (/ 1 (pow eps 2))) (* 1/2 (/ 1 (pow eps 6)))) (+ 1/645120 (/ 1/48 (pow eps 4)))))","(* -1/2 (* (pow eps 2) (sin x)))","(* (pow eps 2) (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(* -1/2 (* eps (sin x)))","(* eps (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(* -1/2 (* eps x))","(* eps (+ (* -1/2 x) (+ (* -1/2 (/ (pow x 2) eps)) (/ 1 eps))))","(* 1/24 (* (pow eps 4) (sin x)))","(* (pow eps 4) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x))))","(* (pow eps 4) (+ (* -1/2 (/ (sin x) (pow eps 2))) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x)))))","(* (pow eps 4) (+ (* -1/2 (/ (sin x) (pow eps 2))) (+ (* -1/6 (/ (cos x) eps)) (+ (* 1/24 (sin x)) (/ (cos x) (pow eps 3))))))","(* 1/24 (* (pow eps 3) (sin x)))","(* (pow eps 3) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x))))","(* (pow eps 3) (+ (* -1/2 (/ (sin x) (pow eps 2))) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x)))))","(* (pow eps 3) (+ (* -1/2 (/ (sin x) (pow eps 2))) (+ (* -1/6 (/ (cos x) eps)) (+ (* 1/24 (sin x)) (/ (cos x) (pow eps 3))))))","(* 1/24 (* (pow eps 2) (sin x)))","(* (pow eps 2) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x))))","(* (pow eps 2) (+ (* -1/2 (/ (sin x) (pow eps 2))) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x)))))","(* -1/645120 (pow eps 4))","(* (pow eps 4) (- (* 1/3840 (/ 1 (pow eps 2))) 1/645120))","(* (pow eps 4) (- (* 1/3840 (/ 1 (pow eps 2))) (+ 1/645120 (/ 1/48 (pow eps 4)))))","(* 2 (* (cos (* -1/2 (- (* 2 x) (* -1 eps)))) (sin (* 1/2 eps))))","(* -1 (* (pow eps 7) (- 1/645120 (* 1/3840 (/ 1 (pow eps 2))))))","(* -1 (* (pow eps 7) (- (+ 1/645120 (/ 1/48 (pow eps 4))) (* 1/3840 (/ 1 (pow eps 2))))))","(* -1 (* (pow eps 7) (- (+ 1/645120 (/ 1/48 (pow eps 4))) (+ (* 1/3840 (/ 1 (pow eps 2))) (* 1/2 (/ 1 (pow eps 6)))))))","(- (sin (- x (* -1 eps))) (sin x))","(* -1 (* eps (+ (* -1 (/ (cos x) eps)) (* 1/2 (sin x)))))","(* -1 (* eps (+ (* -1 (/ (+ 1 (* -1/2 (pow x 2))) eps)) (* 1/2 x))))","(* (pow eps 4) (+ (* -1 (/ (+ (* 1/6 (cos x)) (* 1/2 (/ (sin x) eps))) eps)) (* 1/24 (sin x))))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (sin x)) (/ (cos x) eps)) eps)) (* 1/6 (cos x))) eps)) (* 1/24 (sin x))))","(* -1 (* (pow eps 3) (+ (* -1/24 (sin x)) (* 1/6 (/ (cos x) eps)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1/2 (/ (sin x) eps)) (* -1/6 (cos x))) eps)) (* -1/24 (sin x)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (cos x) eps)) (* 1/2 (sin x))) eps)) (* -1/6 (cos x))) eps)) (* -1/24 (sin x)))))","(* (pow eps 2) (+ (* -1 (/ (+ (* 1/6 (cos x)) (* 1/2 (/ (sin x) eps))) eps)) (* 1/24 (sin x))))","(cos (* -1/2 (- (* 2 x) (* -1 eps))))"]],"memory":[[6976736,50474528]],"method":["egg-herbie"],"outputs":[["(* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps))))","(*.f64 (*.f64 (cos.f64 (*.f64 #s(literal -1/2 binary64) eps)) #s(literal 2 binary64)) (sin.f64 (*.f64 eps #s(literal 1/2 binary64))))","(+ (* 2 (* x (* (sin (* -1/2 eps)) (sin (* 1/2 eps))))) (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))))","(*.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (fma.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) eps)) x (cos.f64 (*.f64 #s(literal -1/2 binary64) eps)))) #s(literal 2 binary64))","(+ (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* -1 (* x (* (cos (* -1/2 eps)) (sin (* 1/2 eps))))) (* 2 (* (sin (* -1/2 eps)) (sin (* 1/2 eps)))))))","(fma.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (cos.f64 (*.f64 #s(literal -1/2 binary64) eps))) (+.f64 #s(literal 2 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 (*.f64 #s(literal 2 binary64) x) (sin.f64 (*.f64 #s(literal -1/2 binary64) eps))) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))))","(+ (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* 2 (* (sin (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* -1 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* -1/3 (* x (* (sin (* -1/2 eps)) (sin (* 1/2 eps))))))))))","(fma.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (fma.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) eps)) x (cos.f64 (*.f64 #s(literal -1/2 binary64) eps)))) #s(literal 2 binary64) (*.f64 (*.f64 x x) (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (-.f64 (*.f64 (*.f64 #s(literal -1/3 binary64) x) (sin.f64 (*.f64 #s(literal -1/2 binary64) eps))) (cos.f64 (*.f64 #s(literal -1/2 binary64) eps))))))","(sin eps)","(sin.f64 eps)","(+ (sin eps) (* x (- (cos eps) 1)))","(fma.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) x (sin.f64 eps))","(+ (sin eps) (* x (- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)))","(fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* x (+ 1/6 (* -1/6 (cos eps))))))) 1)))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) (cos.f64 eps) #s(literal 1/6 binary64)) x (*.f64 (sin.f64 eps) #s(literal -1/2 binary64))) x (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps))","eps","(+ eps (* -1/2 (* eps (pow x 2))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64)) eps)","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* 1/24 (* eps (pow x 2))))))","(fma.f64 (*.f64 eps (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) (*.f64 x x) eps)","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* (pow x 2) (+ (* -1/720 (* eps (pow x 2))) (* 1/24 eps))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/720 binary64) eps) (pow.f64 x #s(literal 4 binary64)) (*.f64 eps (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)))) (*.f64 x x) eps)","1","#s(literal 1 binary64)","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ eps (* -1/2 (* (pow eps 2) x)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps eps) eps)","(+ eps (* x (+ (* -1/2 (* eps x)) (* -1/2 (pow eps 2)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 x eps)) eps)","(+ eps (* x (+ (* -1/2 (pow eps 2)) (* x (+ (* -1/2 eps) (* 1/12 (* (pow eps 2) x)))))))","(fma.f64 (fma.f64 (*.f64 eps (+.f64 x eps)) #s(literal -1/2 binary64) (*.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 (*.f64 eps eps) x)) x)) x eps)","(+ 1 (* -1/2 (* eps x)))","(fma.f64 (*.f64 x eps) #s(literal -1/2 binary64) #s(literal 1 binary64))","(+ 1 (* x (+ (* -1/2 eps) (* -1/2 x))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64))","(+ 1 (* x (+ (* -1/2 eps) (* x (- (* 1/12 (* eps x)) 1/2)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x #s(literal 1 binary64))","(* -1/2 x)","(*.f64 #s(literal -1/2 binary64) x)","(* x (- (* 1/12 (pow x 2)) 1/2))","(*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)","(* x (- (* (pow x 2) (+ 1/12 (* -1/240 (pow x 2)))) 1/2))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/240 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x)","(* x (- (* (pow x 2) (+ 1/12 (* (pow x 2) (- (* 1/10080 (pow x 2)) 1/240)))) 1/2))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/10080 binary64) (*.f64 x x) #s(literal -1/240 binary64)) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x)","(* eps (+ 1 (* -1/6 (pow eps 2))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps)","(+ (* eps (+ 1 (* -1/6 (pow eps 2)))) (* (pow eps 2) (* x (- (* 1/24 (pow eps 2)) 1/2))))","(*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64)))","(+ (* eps (+ 1 (* -1/6 (pow eps 2)))) (* x (+ (* eps (* x (- (* 1/12 (pow eps 2)) 1/2))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))))","(fma.f64 (*.f64 eps (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps))","(+ (* eps (+ 1 (* -1/6 (pow eps 2)))) (* x (+ (* x (+ (* -1/6 (* (pow eps 2) (* x (- (* 1/24 (pow eps 2)) 1/2)))) (* eps (- (* 1/12 (pow eps 2)) 1/2)))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))))","(fma.f64 (fma.f64 (*.f64 x (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) x) (*.f64 eps (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps)))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps))","(+ 1 (* -1/6 (pow eps 2)))","(fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64))","(+ 1 (+ (* -1/6 (pow eps 2)) (* eps (* x (- (* 1/24 (pow eps 2)) 1/2)))))","(fma.f64 eps (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64))","(+ 1 (+ (* -1/6 (pow eps 2)) (* x (+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (* 1/12 (pow eps 2)) 1/2))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps)) x (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64)))","(+ 1 (+ (* -1/6 (pow eps 2)) (* x (+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (+ (* -1/6 (* eps (* x (- (* 1/24 (pow eps 2)) 1/2)))) (* 1/12 (pow eps 2))) 1/2))))))","(fma.f64 (fma.f64 (fma.f64 eps (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/12 binary64) eps)) #s(literal -1/2 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps)) x (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64)))","(* -1/6 eps)","(*.f64 #s(literal -1/6 binary64) eps)","(+ (* -1/6 eps) (* x (- (* 1/24 (pow eps 2)) 1/2)))","(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps))","(+ (* -1/6 eps) (* x (- (+ (* 1/24 (pow eps 2)) (* 1/12 (* eps x))) 1/2)))","(fma.f64 (fma.f64 eps (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal 1/12 binary64) x)) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps))","(+ (* -1/6 eps) (* x (- (+ (* 1/24 (pow eps 2)) (* x (+ (* -1/6 (* x (- (* 1/24 (pow eps 2)) 1/2))) (* 1/12 eps)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/12 binary64) eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) x (*.f64 #s(literal -1/6 binary64) eps))","(cos (* -1/2 eps))","(cos.f64 (*.f64 #s(literal -1/2 binary64) eps))","(+ (cos (* -1/2 eps)) (* x (sin (* -1/2 eps))))","(fma.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) eps)) x (cos.f64 (*.f64 #s(literal -1/2 binary64) eps)))","(+ (cos (* -1/2 eps)) (* x (- (* -1/2 (* x (cos (* -1/2 eps)))) (* -1 (sin (* -1/2 eps))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (cos.f64 (*.f64 #s(literal -1/2 binary64) eps)) (sin.f64 (*.f64 #s(literal -1/2 binary64) eps))) x (cos.f64 (*.f64 #s(literal -1/2 binary64) eps)))","(+ (cos (* -1/2 eps)) (* x (- (* x (+ (* -1/2 (cos (* -1/2 eps))) (* -1/6 (* x (sin (* -1/2 eps)))))) (* -1 (sin (* -1/2 eps))))))","(fma.f64 (fma.f64 (*.f64 (cos.f64 (*.f64 #s(literal -1/2 binary64) eps)) #s(literal -1/2 binary64)) x (*.f64 (fma.f64 x (*.f64 #s(literal -1/6 binary64) x) #s(literal 1 binary64)) (sin.f64 (*.f64 #s(literal -1/2 binary64) eps)))) x (cos.f64 (*.f64 #s(literal -1/2 binary64) eps)))","(+ (* -1/6 eps) (* 1/12 (* eps (pow x 2))))","(*.f64 eps (fma.f64 (*.f64 #s(literal 1/12 binary64) x) x #s(literal -1/6 binary64)))","(+ (* -1/6 eps) (* (pow x 2) (+ (* -1/144 (* eps (pow x 2))) (* 1/12 eps))))","(fma.f64 (*.f64 eps (fma.f64 (*.f64 x x) #s(literal -1/144 binary64) #s(literal 1/12 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) eps))","(+ (* -1/6 eps) (* (pow x 2) (+ (* 1/12 eps) (* (pow x 2) (+ (* -1/144 eps) (* 1/4320 (* eps (pow x 2))))))))","(fma.f64 eps (fma.f64 (*.f64 #s(literal 1/12 binary64) x) x #s(literal -1/6 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 eps (fma.f64 #s(literal 1/4320 binary64) (*.f64 x x) #s(literal -1/144 binary64)))))","(* 2 (* (cos (* -1/2 (+ eps (* 2 x)))) (sin (* 1/2 eps))))","(*.f64 (*.f64 (cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x)) #s(literal 2 binary64)) (sin.f64 (*.f64 eps #s(literal 1/2 binary64))))","(- (sin (+ eps x)) (sin x))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(* eps (cos x))","(*.f64 (cos.f64 x) eps)","(cos x)","(cos.f64 x)","(* eps (+ (cos x) (* -1/2 (* eps (sin x)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps)","(+ (cos x) (* -1/2 (* eps (sin x))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))","(* -1/2 (pow x 2))","(*.f64 (*.f64 x x) #s(literal -1/2 binary64))","(* (pow x 2) (- (* -1/2 (/ eps x)) 1/2))","(*.f64 (*.f64 (fma.f64 (/.f64 eps x) #s(literal -1/2 binary64) #s(literal -1/2 binary64)) x) x)","(* (pow x 2) (- (+ (* -1/2 (/ eps x)) (/ 1 (pow x 2))) 1/2))","(*.f64 (*.f64 (-.f64 (fma.f64 (/.f64 eps x) #s(literal -1/2 binary64) (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/2 binary64)) x) x)","(* -1/2 (sin x))","(*.f64 #s(literal -1/2 binary64) (sin.f64 x))","(* eps (+ (cos x) (* eps (+ (* -1/6 (* eps (cos x))) (* (sin x) (- (* 1/24 (pow eps 2)) 1/2))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (sin.f64 x))) eps (cos.f64 x)) eps)","(+ (cos x) (* eps (+ (* -1/6 (* eps (cos x))) (* (sin x) (- (* 1/24 (pow eps 2)) 1/2)))))","(fma.f64 (fma.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (sin.f64 x))) eps (cos.f64 x))","(+ (* -1/6 (* eps (cos x))) (* (sin x) (- (* 1/24 (pow eps 2)) 1/2)))","(fma.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (sin.f64 x)))","(cos (* -1/2 (+ eps (* 2 x))))","(cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x))","(* 1/12 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64))","(* (pow x 3) (- 1/12 (* 1/2 (/ 1 (pow x 2)))))","(*.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/2 binary64) (*.f64 x x))) (pow.f64 x #s(literal 3 binary64)))","(* -1/6 (* eps (cos x)))","(*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)","(* 2 (* (cos (* -1/2 (- eps (* -2 x)))) (sin (* 1/2 eps))))","(*.f64 (*.f64 (cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x)) #s(literal 2 binary64)) (sin.f64 (*.f64 eps #s(literal 1/2 binary64))))","(- (sin (- eps (* -1 x))) (sin x))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(* (pow x 2) (- (* -1 (/ (- (* 1/2 eps) (/ 1 x)) x)) 1/2))","(*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (fma.f64 eps #s(literal 1/2 binary64) (/.f64 #s(literal -1 binary64) x)) x)) (*.f64 x x))","(cos (* -1/2 (- eps (* -2 x))))","(cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x))","(* -1 (* (pow x 3) (- (* 1/2 (/ 1 (pow x 2))) 1/12)))","(*.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/2 binary64) (*.f64 x x))) (pow.f64 x #s(literal 3 binary64)))","(* eps (cos (* -1 x)))","(*.f64 (cos.f64 x) eps)","(* eps (+ (cos (* -1 x)) (* 1/2 (* eps (sin (* -1 x))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps)","(* eps (+ (cos (* -1 x)) (* eps (+ (* 1/2 (sin (* -1 x))) (* 2 (* eps (+ (* -1/16 (cos (* -1 x))) (* -1/48 (cos (* -1 x))))))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) eps (cos.f64 x)) eps)","(* eps (+ (cos (* -1 x)) (* eps (+ (* 1/2 (sin (* -1 x))) (* eps (+ (* -1/24 (* eps (sin (* -1 x)))) (* 2 (+ (* -1/16 (cos (* -1 x))) (* -1/48 (cos (* -1 x)))))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/24 binary64) eps) (neg.f64 (sin.f64 x)) (*.f64 (cos.f64 x) #s(literal -1/6 binary64))) eps (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) eps (cos.f64 x)) eps)","(* eps (+ 1 (* -1/24 (pow eps 2))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/24 binary64) eps)","(* eps (+ 1 (* (pow eps 2) (- (* 1/1920 (pow eps 2)) 1/24))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 #s(literal 1/1920 binary64) (*.f64 eps eps) #s(literal -1/24 binary64)) eps)","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/1920 (* -1/322560 (pow eps 2)))) 1/24))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal -1/322560 binary64) (*.f64 eps eps) #s(literal 1/1920 binary64)) (*.f64 eps eps) #s(literal -1/24 binary64)) eps)","(* 1/2 eps)","(*.f64 eps #s(literal 1/2 binary64))","(* eps (+ 1/2 (* -1/48 (pow eps 2))))","(*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(* eps (+ 1/2 (* (pow eps 2) (- (* 1/3840 (pow eps 2)) 1/48))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3840 binary64) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(* eps (+ 1/2 (* (pow eps 2) (- (* (pow eps 2) (+ 1/3840 (* -1/645120 (pow eps 2)))) 1/48))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) eps (cos.f64 x)) eps)","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x)))))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (sin.f64 x))) eps (cos.f64 x)) eps)","(+ 1 (+ (* -1/2 (* eps x)) (* -1/2 (pow x 2))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64))","(+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x))))))","(fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) eps (cos.f64 x))","(+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x))))))))","(fma.f64 (fma.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (sin.f64 x))) eps (cos.f64 x))","(+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x))))","(fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 #s(literal -1/2 binary64) (sin.f64 x)))","(+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x))))))","(fma.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (sin.f64 x)))","(cos (* -1 x))","(cos.f64 x)","(+ (cos (* -1 x)) (* 1/2 (* eps (sin (* -1 x)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))","(+ (cos (* -1 x)) (* eps (- (* -1/8 (* eps (cos (* -1 x)))) (* -1/2 (sin (* -1 x))))))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) (*.f64 (cos.f64 x) eps) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) eps (cos.f64 x))","(+ (cos (* -1 x)) (* eps (- (* eps (+ (* -1/8 (cos (* -1 x))) (* -1/48 (* eps (sin (* -1 x)))))) (* -1/2 (sin (* -1 x))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) eps) (cos.f64 x) (*.f64 (neg.f64 (sin.f64 x)) (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)))) eps (cos.f64 x))","-1/48","#s(literal -1/48 binary64)","(- (* 1/3840 (pow eps 2)) 1/48)","(fma.f64 #s(literal 1/3840 binary64) (*.f64 eps eps) #s(literal -1/48 binary64))","(- (* (pow eps 2) (+ 1/3840 (* -1/645120 (pow eps 2)))) 1/48)","(fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64))","(* 2 (sin (* 1/2 eps)))","(*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) #s(literal 2 binary64))","(sin (* 1/2 eps))","(sin.f64 (*.f64 eps #s(literal 1/2 binary64)))","(* -1/645120 (pow eps 7))","(*.f64 (pow.f64 eps #s(literal 7 binary64)) #s(literal -1/645120 binary64))","(* (pow eps 7) (- (* 1/3840 (/ 1 (pow eps 2))) 1/645120))","(*.f64 (-.f64 (/.f64 #s(literal 1/3840 binary64) (*.f64 eps eps)) #s(literal 1/645120 binary64)) (pow.f64 eps #s(literal 7 binary64)))","(* (pow eps 7) (- (* 1/3840 (/ 1 (pow eps 2))) (+ 1/645120 (/ 1/48 (pow eps 4)))))","(*.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/3840 binary64) (*.f64 eps eps)) #s(literal 1/645120 binary64)) (/.f64 #s(literal 1/48 binary64) (pow.f64 eps #s(literal 4 binary64)))) (pow.f64 eps #s(literal 7 binary64)))","(* (pow eps 7) (- (+ (* 1/3840 (/ 1 (pow eps 2))) (* 1/2 (/ 1 (pow eps 6)))) (+ 1/645120 (/ 1/48 (pow eps 4)))))","(*.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 eps #s(literal 6 binary64))) (/.f64 #s(literal 1/3840 binary64) (*.f64 eps eps))) (+.f64 (/.f64 #s(literal 1/48 binary64) (pow.f64 eps #s(literal 4 binary64))) #s(literal 1/645120 binary64))) (pow.f64 eps #s(literal 7 binary64)))","(* -1/2 (* (pow eps 2) (sin x)))","(*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps)","(* (pow eps 2) (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(*.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (/.f64 (cos.f64 x) eps)) eps) eps)","(* -1/2 (* eps (sin x)))","(*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)","(* eps (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (/.f64 (cos.f64 x) eps)) eps)","(* -1/2 (* eps x))","(*.f64 (*.f64 x eps) #s(literal -1/2 binary64))","(* eps (+ (* -1/2 x) (+ (* -1/2 (/ (pow x 2) eps)) (/ 1 eps))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 x (/.f64 x eps) x)) eps #s(literal 1 binary64))","(* 1/24 (* (pow eps 4) (sin x)))","(*.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/24 binary64)) (sin.f64 x))","(* (pow eps 4) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x))))","(*.f64 (fma.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 #s(literal 1/24 binary64) (sin.f64 x))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1/2 (/ (sin x) (pow eps 2))) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x)))))","(*.f64 (fma.f64 (sin.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/6 binary64))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1/2 (/ (sin x) (pow eps 2))) (+ (* -1/6 (/ (cos x) eps)) (+ (* 1/24 (sin x)) (/ (cos x) (pow eps 3))))))","(*.f64 (+.f64 (fma.f64 (sin.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/6 binary64))) (/.f64 (cos.f64 x) (pow.f64 eps #s(literal 3 binary64)))) (pow.f64 eps #s(literal 4 binary64)))","(* 1/24 (* (pow eps 3) (sin x)))","(*.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/24 binary64)) (sin.f64 x))","(* (pow eps 3) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x))))","(*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 #s(literal 1/24 binary64) (sin.f64 x))))","(* (pow eps 3) (+ (* -1/2 (/ (sin x) (pow eps 2))) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x)))))","(*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/6 binary64))))","(* (pow eps 3) (+ (* -1/2 (/ (sin x) (pow eps 2))) (+ (* -1/6 (/ (cos x) eps)) (+ (* 1/24 (sin x)) (/ (cos x) (pow eps 3))))))","(*.f64 (+.f64 (fma.f64 (sin.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/6 binary64))) (/.f64 (cos.f64 x) (pow.f64 eps #s(literal 3 binary64)))) (pow.f64 eps #s(literal 3 binary64)))","(* 1/24 (* (pow eps 2) (sin x)))","(*.f64 (*.f64 (*.f64 (sin.f64 x) eps) eps) #s(literal 1/24 binary64))","(* (pow eps 2) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x))))","(*.f64 (*.f64 (fma.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 #s(literal 1/24 binary64) (sin.f64 x))) eps) eps)","(* (pow eps 2) (+ (* -1/2 (/ (sin x) (pow eps 2))) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x)))))","(*.f64 (fma.f64 (sin.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/6 binary64))) (*.f64 eps eps))","(* -1/645120 (pow eps 4))","(*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/645120 binary64))","(* (pow eps 4) (- (* 1/3840 (/ 1 (pow eps 2))) 1/645120))","(*.f64 (pow.f64 eps #s(literal 4 binary64)) (-.f64 (/.f64 #s(literal 1/3840 binary64) (*.f64 eps eps)) #s(literal 1/645120 binary64)))","(* (pow eps 4) (- (* 1/3840 (/ 1 (pow eps 2))) (+ 1/645120 (/ 1/48 (pow eps 4)))))","(*.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/3840 binary64) (*.f64 eps eps)) #s(literal 1/645120 binary64)) (/.f64 #s(literal 1/48 binary64) (pow.f64 eps #s(literal 4 binary64)))) (pow.f64 eps #s(literal 4 binary64)))","(* 2 (* (cos (* -1/2 (- (* 2 x) (* -1 eps)))) (sin (* 1/2 eps))))","(*.f64 (*.f64 (cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x)) #s(literal 2 binary64)) (sin.f64 (*.f64 eps #s(literal 1/2 binary64))))","(* -1 (* (pow eps 7) (- 1/645120 (* 1/3840 (/ 1 (pow eps 2))))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/3840 binary64) (*.f64 eps eps)) #s(literal -1 binary64) #s(literal -1/645120 binary64)) (pow.f64 eps #s(literal 7 binary64)))","(* -1 (* (pow eps 7) (- (+ 1/645120 (/ 1/48 (pow eps 4))) (* 1/3840 (/ 1 (pow eps 2))))))","(*.f64 (fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1/3840 binary64) (*.f64 eps eps)) (-.f64 #s(literal -1/645120 binary64) (/.f64 #s(literal 1/48 binary64) (pow.f64 eps #s(literal 4 binary64))))) (pow.f64 eps #s(literal 7 binary64)))","(* -1 (* (pow eps 7) (- (+ 1/645120 (/ 1/48 (pow eps 4))) (+ (* 1/3840 (/ 1 (pow eps 2))) (* 1/2 (/ 1 (pow eps 6)))))))","(*.f64 (neg.f64 (-.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/48 binary64) (pow.f64 eps #s(literal 4 binary64))) #s(literal 1/645120 binary64)) (/.f64 #s(literal 1/3840 binary64) (*.f64 eps eps))) (/.f64 #s(literal 1/2 binary64) (pow.f64 eps #s(literal 6 binary64))))) (pow.f64 eps #s(literal 7 binary64)))","(- (sin (- x (* -1 eps))) (sin x))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(* -1 (* eps (+ (* -1 (/ (cos x) eps)) (* 1/2 (sin x)))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (/.f64 (cos.f64 x) eps)) eps)","(* -1 (* eps (+ (* -1 (/ (+ 1 (* -1/2 (pow x 2))) eps)) (* 1/2 x))))","(fma.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64)) eps) eps (*.f64 (*.f64 x eps) #s(literal -1/2 binary64)))","(* (pow eps 4) (+ (* -1 (/ (+ (* 1/6 (cos x)) (* 1/2 (/ (sin x) eps))) eps)) (* 1/24 (sin x))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) (sin.f64 x) (/.f64 (fma.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/2 binary64) (*.f64 (cos.f64 x) #s(literal 1/6 binary64))) (neg.f64 eps))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (sin x)) (/ (cos x) eps)) eps)) (* 1/6 (cos x))) eps)) (* 1/24 (sin x))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) (sin.f64 x) (/.f64 (fma.f64 (cos.f64 x) #s(literal 1/6 binary64) (/.f64 (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (/.f64 (cos.f64 x) eps)) (neg.f64 eps))) (neg.f64 eps))) (pow.f64 eps #s(literal 4 binary64)))","(* -1 (* (pow eps 3) (+ (* -1/24 (sin x)) (* 1/6 (/ (cos x) eps)))))","(*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 #s(literal 1/24 binary64) (sin.f64 x))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1/2 (/ (sin x) eps)) (* -1/6 (cos x))) eps)) (* -1/24 (sin x)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/24 binary64) (sin.f64 x) (/.f64 (fma.f64 (/.f64 (sin.f64 x) eps) #s(literal -1/2 binary64) (*.f64 (cos.f64 x) #s(literal -1/6 binary64))) (neg.f64 eps)))) (pow.f64 eps #s(literal 3 binary64)))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (cos x) eps)) (* 1/2 (sin x))) eps)) (* -1/6 (cos x))) eps)) (* -1/24 (sin x)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/24 binary64) (sin.f64 x) (/.f64 (fma.f64 (cos.f64 x) #s(literal -1/6 binary64) (/.f64 (fma.f64 (sin.f64 x) #s(literal 1/2 binary64) (/.f64 (cos.f64 x) (neg.f64 eps))) (neg.f64 eps))) (neg.f64 eps)))) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 2) (+ (* -1 (/ (+ (* 1/6 (cos x)) (* 1/2 (/ (sin x) eps))) eps)) (* 1/24 (sin x))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (sin.f64 x) (/.f64 (fma.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/2 binary64) (*.f64 (cos.f64 x) #s(literal 1/6 binary64))) (neg.f64 eps))) eps) eps)","(cos (* -1/2 (- (* 2 x) (* -1 eps))))","(cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x))"]],"stop":[["iter limit",1],["node limit",1]],"time":257.537109375,"type":"simplify"},{"count":[[24,475]],"egraph":[[0,8450,388,0.077870708],[2,3051,391,0.034575377],[1,361,391,0.010573617],[0,100,391,0.002872657],[0,61,397,0.000558395]],"inputs":[["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64))","#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","(*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps)","#s(approx (cos x) #s(literal 1 binary64))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64))) eps))","(*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64))) eps)","#s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps)","(fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x))","#s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x)) eps)","(fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x))","(fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps))","(cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64)))","(fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64))","(cos.f64 x)","(*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)","(*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)"]],"memory":[[-2115072,61717056]],"outputs":[["(*.f64 (*.f64 (cos.f64 (/.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 2 binary64))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(literal 2 binary64))","(*.f64 (*.f64 (cos.f64 (/.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 2 binary64))) #s(literal 2 binary64)) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)))","(*.f64 (cos.f64 (/.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 2 binary64))) (*.f64 #s(literal 2 binary64) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))))","(*.f64 (*.f64 #s(literal 2 binary64) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) (cos.f64 (/.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 2 binary64))))","(*.f64 #s(literal 2 binary64) (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) (cos.f64 (/.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 2 binary64)))))","(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) (*.f64 (cos.f64 (/.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 2 binary64))) #s(literal 2 binary64)))","(*.f64 #s(literal 2 binary64) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)))","(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64))","#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(*.f64 eps (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) eps)) (neg.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/8 binary64)) eps)) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) (*.f64 eps #s(literal 1/2 binary64))))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)))) (neg.f64 (neg.f64 eps)))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)))) (neg.f64 (*.f64 eps eps)))","(/.f64 (neg.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) (neg.f64 (*.f64 eps eps)))) (neg.f64 (neg.f64 eps)))","(/.f64 (neg.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 eps eps)))","(/.f64 (neg.f64 (*.f64 eps (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (*.f64 eps (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) (*.f64 eps #s(literal 1/2 binary64))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) (neg.f64 (*.f64 eps eps)))) (neg.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) (neg.f64 eps))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 eps eps))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/8 binary64)) (neg.f64 (*.f64 eps eps)))) (neg.f64 (*.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) (*.f64 eps #s(literal 1/2 binary64)))) (neg.f64 eps))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/8 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) (*.f64 eps #s(literal 1/2 binary64)))) (*.f64 eps eps))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)))) (neg.f64 (*.f64 (neg.f64 eps) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (*.f64 (neg.f64 eps) (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) (*.f64 eps #s(literal 1/2 binary64)))))))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)))) (neg.f64 (*.f64 (*.f64 eps eps) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (*.f64 (*.f64 eps eps) (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) (*.f64 eps #s(literal 1/2 binary64)))))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) eps) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/8 binary64)) eps) (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) (*.f64 eps #s(literal 1/2 binary64)))))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))) (*.f64 eps eps))","(/.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(/.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(/.f64 (*.f64 eps (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64))) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","(/.f64 (*.f64 eps (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/8 binary64))) (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) (*.f64 eps #s(literal 1/2 binary64)))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) (neg.f64 (*.f64 eps eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) (neg.f64 eps)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 eps eps)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/8 binary64)) (neg.f64 (*.f64 eps eps))) (*.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) (*.f64 eps #s(literal 1/2 binary64)))) (neg.f64 eps)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/8 binary64)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) (*.f64 eps #s(literal 1/2 binary64)))) (*.f64 eps eps)))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64))) (*.f64 (neg.f64 eps) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/8 binary64))) (*.f64 (neg.f64 eps) (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) (*.f64 eps #s(literal 1/2 binary64))))))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64))) (*.f64 (*.f64 eps eps) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/8 binary64))) (*.f64 (*.f64 eps eps) (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) (*.f64 eps #s(literal 1/2 binary64))))))","(fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) eps) eps (*.f64 eps #s(literal 1/2 binary64)))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps (*.f64 #s(literal 0 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) #s(literal 0 binary64)))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) #s(literal 0 binary64) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","(fma.f64 eps (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) eps) (*.f64 eps #s(literal 1/2 binary64)))","(fma.f64 eps (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 #s(literal 0 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))))","(fma.f64 eps (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) #s(literal 0 binary64)))","(fma.f64 eps #s(literal 1/2 binary64) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) eps) eps))","(fma.f64 eps #s(literal 1/2 binary64) (*.f64 eps (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) eps)))","(fma.f64 #s(literal 0 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","(fma.f64 #s(literal 1/2 binary64) eps (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) eps) eps))","(fma.f64 #s(literal 1/2 binary64) eps (*.f64 eps (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) eps)))","(+.f64 (*.f64 #s(literal 0 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","(+.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) eps) eps) (*.f64 eps #s(literal 1/2 binary64)))","(+.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) #s(literal 0 binary64)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","(+.f64 (*.f64 eps (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) eps)) (*.f64 eps #s(literal 1/2 binary64)))","(+.f64 (*.f64 eps #s(literal 1/2 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) eps) eps))","(+.f64 (*.f64 eps #s(literal 1/2 binary64)) (*.f64 eps (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) eps)))","(+.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps) (*.f64 #s(literal 0 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))))","(+.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) #s(literal 0 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","(*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps)","(*.f64 eps #s(approx (cos x) #s(literal 1 binary64)))","(/.f64 (neg.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (cos x) #s(literal 1 binary64)))) (neg.f64 (neg.f64 eps)))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(approx (cos x) #s(literal 1 binary64)))) (neg.f64 (*.f64 eps eps)))","(/.f64 (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (neg.f64 (*.f64 eps eps)))) (neg.f64 (neg.f64 eps)))","(/.f64 (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 eps eps)))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (cos x) #s(literal 1 binary64))) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 eps eps))","(/.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(/.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(fma.f64 #s(approx (cos x) #s(literal 1 binary64)) eps (*.f64 #s(literal 0 binary64) #s(approx (cos x) #s(literal 1 binary64))))","(fma.f64 #s(approx (cos x) #s(literal 1 binary64)) eps (*.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 0 binary64)))","(fma.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 0 binary64) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","(fma.f64 eps #s(approx (cos x) #s(literal 1 binary64)) (*.f64 #s(literal 0 binary64) #s(approx (cos x) #s(literal 1 binary64))))","(fma.f64 eps #s(approx (cos x) #s(literal 1 binary64)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 0 binary64)))","(fma.f64 #s(literal 0 binary64) #s(approx (cos x) #s(literal 1 binary64)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","(+.f64 (*.f64 #s(literal 0 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","(+.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 0 binary64)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","(+.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps) (*.f64 #s(literal 0 binary64) #s(approx (cos x) #s(literal 1 binary64))))","(+.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 0 binary64)))","#s(approx (cos x) #s(literal 1 binary64))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64))) eps))","(*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64))) eps)","(*.f64 eps #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64))))) (neg.f64 (neg.f64 eps)))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64))))) (neg.f64 (*.f64 eps eps)))","(/.f64 (neg.f64 (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64))) (neg.f64 (*.f64 eps eps)))) (neg.f64 (neg.f64 eps)))","(/.f64 (neg.f64 (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64))) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 eps eps)))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)))) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)))) (*.f64 eps eps))","(/.f64 (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64))) (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(/.f64 (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64))) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(fma.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64))) eps (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)))))","(fma.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64))) eps (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64))) #s(literal 0 binary64)))","(fma.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64))) #s(literal 0 binary64) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64))) eps))","(fma.f64 eps #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64))) (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)))))","(fma.f64 eps #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64))) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64))) #s(literal 0 binary64)))","(fma.f64 #s(literal 0 binary64) #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64))) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64))) eps))","(+.f64 (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)))) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64))) eps))","(+.f64 (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64))) #s(literal 0 binary64)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64))) eps))","(+.f64 (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64))) eps) (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)))))","(+.f64 (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64))) eps) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64))) #s(literal 0 binary64)))","#s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)))","(*.f64 (fma.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64)) (pow.f64 (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 3 binary64)) #s(literal -1/8 binary64) #s(literal 1 binary64)) (pow.f64 (-.f64 (fma.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x eps) #s(literal -1/2 binary64)) x)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal -1 binary64)) (fma.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (fma.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x eps) #s(literal -1/2 binary64)) x)) (fma.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 3 binary64)) #s(literal -1/8 binary64) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (+.f64 x eps) #s(literal -1/2 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 3 binary64)) #s(literal -1/8 binary64) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (-.f64 (fma.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x eps) #s(literal -1/2 binary64)) x)))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal -1 binary64))) (*.f64 (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal -1 binary64)) (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (+.f64 x eps) #s(literal -1/2 binary64)) x)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64))) (neg.f64 (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal -1 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 3 binary64)) #s(literal -1/8 binary64) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (+.f64 x eps) #s(literal -1/2 binary64)) x)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 3 binary64)) #s(literal -1/8 binary64) #s(literal 1 binary64))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x eps) #s(literal -1/2 binary64)) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal -1 binary64)) (fma.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (fma.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x eps) #s(literal -1/2 binary64)) x)) (fma.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 3 binary64)) #s(literal -1/8 binary64) #s(literal 1 binary64)))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64)) (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal -1 binary64)))","(/.f64 (fma.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 3 binary64)) #s(literal -1/8 binary64) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (+.f64 x eps) #s(literal -1/2 binary64)) x))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 3 binary64)) #s(literal -1/8 binary64) #s(literal 1 binary64)) (-.f64 (fma.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x eps) #s(literal -1/2 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal -1 binary64)) (fma.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x eps) #s(literal -1/2 binary64)) x)) (fma.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 3 binary64)) #s(literal -1/8 binary64) #s(literal 1 binary64))))","(fma.f64 (*.f64 (+.f64 x eps) #s(literal -1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 (*.f64 (+.f64 x eps) x) #s(literal -1/2 binary64) #s(literal 1 binary64))","(fma.f64 (*.f64 (*.f64 (+.f64 x eps) #s(literal -1/2 binary64)) x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (*.f64 x x) #s(literal -1/2 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) x #s(literal 1 binary64)))","(fma.f64 (+.f64 x eps) (*.f64 (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 (+.f64 x eps) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) x (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) x #s(literal 1 binary64)))","(fma.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (+.f64 x eps) x) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 #s(literal -1/2 binary64) (*.f64 (+.f64 x eps) x) #s(literal 1 binary64))","(fma.f64 #s(literal -1/2 binary64) (*.f64 x x) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) x #s(literal 1 binary64)))","(fma.f64 #s(literal 1 binary64) (*.f64 (*.f64 (+.f64 x eps) #s(literal -1/2 binary64)) x) #s(literal 1 binary64))","(fma.f64 x (*.f64 #s(literal -1/2 binary64) (+.f64 x eps)) #s(literal 1 binary64))","(fma.f64 x (*.f64 #s(literal -1/2 binary64) x) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) x #s(literal 1 binary64)))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (+.f64 x eps) #s(literal -1/2 binary64)) x))) (/.f64 (*.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (+.f64 x eps) #s(literal -1/2 binary64)) x))))","(-.f64 (/.f64 (*.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal -1 binary64))) (pow.f64 (fma.f64 (+.f64 x eps) (*.f64 #s(literal -1/2 binary64) x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (+.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) #s(literal -1/2 binary64))) (*.f64 (*.f64 x eps) #s(literal -1/2 binary64)))","(+.f64 (*.f64 (*.f64 x x) #s(literal -1/2 binary64)) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) x #s(literal 1 binary64)))","(+.f64 (*.f64 (*.f64 (+.f64 x eps) #s(literal -1/2 binary64)) x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (*.f64 (+.f64 x eps) #s(literal -1/2 binary64)) x))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps)","(*.f64 eps (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps)) (neg.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps)) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)))) (neg.f64 (neg.f64 eps)))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)))) (neg.f64 (*.f64 eps eps)))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) (neg.f64 (*.f64 eps eps)))) (neg.f64 (neg.f64 eps)))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 eps eps)))","(/.f64 (neg.f64 (*.f64 eps (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (neg.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 eps (+.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 eps eps)))) (neg.f64 (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x))) (neg.f64 eps))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x))) (*.f64 eps eps))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (*.f64 eps eps)))) (neg.f64 (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64))) (neg.f64 eps))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64))) (*.f64 eps eps))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (neg.f64 (*.f64 (neg.f64 eps) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x))))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (+.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (*.f64 (neg.f64 eps) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (neg.f64 (*.f64 (*.f64 eps eps) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x))))))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (*.f64 (*.f64 eps eps) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x))) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x))) (*.f64 eps eps))","(/.f64 (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(/.f64 (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(/.f64 (*.f64 eps (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x))))","(/.f64 (*.f64 eps (+.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 eps eps))) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x))) (neg.f64 eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 eps #s(literal 3 binary64))) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x))) (*.f64 eps eps)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (*.f64 eps eps))) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64))) (neg.f64 eps)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 eps #s(literal 3 binary64))) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64))) (*.f64 eps eps)))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (neg.f64 eps) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x)))))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (+.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 eps) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)))))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (*.f64 eps eps) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x)))))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (*.f64 eps eps) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)))))","(fma.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) eps (*.f64 (cos.f64 x) eps))","(fma.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps (*.f64 #s(literal 0 binary64) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x))))","(fma.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) #s(literal 0 binary64)))","(fma.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) #s(literal 0 binary64) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","(fma.f64 (cos.f64 x) eps (*.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) eps))","(fma.f64 eps (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) (*.f64 eps (cos.f64 x)))","(fma.f64 eps (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) (*.f64 #s(literal 0 binary64) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x))))","(fma.f64 eps (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) #s(literal 0 binary64)))","(fma.f64 eps (cos.f64 x) (*.f64 eps (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps)))","(fma.f64 #s(literal 0 binary64) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","(+.f64 (*.f64 #s(literal 0 binary64) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x))) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","(+.f64 (*.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) eps) (*.f64 (cos.f64 x) eps))","(+.f64 (*.f64 (cos.f64 x) eps) (*.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) eps))","(+.f64 (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) #s(literal 0 binary64)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","(+.f64 (*.f64 eps (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps)) (*.f64 eps (cos.f64 x)))","(+.f64 (*.f64 eps (cos.f64 x)) (*.f64 eps (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps)))","(+.f64 (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps) (*.f64 #s(literal 0 binary64) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x))))","(+.f64 (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) #s(literal 0 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x))) (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)))) (neg.f64 (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x)))) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x))) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x)))))","(/.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64))) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) (*.f64 eps (cos.f64 x)))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x))) (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) (*.f64 eps (cos.f64 x))))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x))) (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x))","(fma.f64 eps #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) (cos.f64 x))","(-.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps))) (/.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps))))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x)))))","(+.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps) (cos.f64 x))","(+.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps))","#s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (cos.f64 x)) eps)","(*.f64 eps (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (cos.f64 x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps)) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (neg.f64 (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps)) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (cos.f64 x)))) (neg.f64 (neg.f64 eps)))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (cos.f64 x)))) (neg.f64 (*.f64 eps eps)))","(/.f64 (neg.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (cos.f64 x)) (neg.f64 (*.f64 eps eps)))) (neg.f64 (neg.f64 eps)))","(/.f64 (neg.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (cos.f64 x)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 eps eps)))","(/.f64 (neg.f64 (*.f64 eps (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (neg.f64 (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 eps (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 eps eps)))) (neg.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (neg.f64 (cos.f64 x))) (neg.f64 eps))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (neg.f64 (cos.f64 x))) (*.f64 eps eps))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (*.f64 eps eps)))) (neg.f64 (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64))) (neg.f64 eps))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64))) (*.f64 eps eps))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (neg.f64 (*.f64 (neg.f64 eps) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (neg.f64 (cos.f64 x))))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (*.f64 (neg.f64 eps) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (neg.f64 (*.f64 (*.f64 eps eps) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (neg.f64 (cos.f64 x))))))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (*.f64 (*.f64 eps eps) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (neg.f64 (cos.f64 x))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (cos.f64 x))) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (cos.f64 x))) (*.f64 eps eps))","(/.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (cos.f64 x)) (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(/.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (cos.f64 x)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(/.f64 (*.f64 eps (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (neg.f64 (cos.f64 x))))","(/.f64 (*.f64 eps (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 eps eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (neg.f64 (cos.f64 x))) (neg.f64 eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 eps #s(literal 3 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (neg.f64 (cos.f64 x))) (*.f64 eps eps)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (*.f64 eps eps))) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64))) (neg.f64 eps)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 eps #s(literal 3 binary64))) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64))) (*.f64 eps eps)))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (neg.f64 eps) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (neg.f64 (cos.f64 x)))))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 eps) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64)))))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (*.f64 eps eps) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (neg.f64 (cos.f64 x)))))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (*.f64 eps eps) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64)))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) eps (*.f64 (cos.f64 x) eps))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (cos.f64 x)) eps (*.f64 #s(literal 0 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (cos.f64 x))))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (cos.f64 x)) eps (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (cos.f64 x)) #s(literal 0 binary64)))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (cos.f64 x)) #s(literal 0 binary64) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (cos.f64 x)) eps))","(fma.f64 (cos.f64 x) eps (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) eps))","(fma.f64 eps (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) (*.f64 eps (cos.f64 x)))","(fma.f64 eps (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (cos.f64 x)) (*.f64 #s(literal 0 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (cos.f64 x))))","(fma.f64 eps (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (cos.f64 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (cos.f64 x)) #s(literal 0 binary64)))","(fma.f64 eps (cos.f64 x) (*.f64 eps (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps)))","(fma.f64 #s(literal 0 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (cos.f64 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (cos.f64 x)) eps))","(+.f64 (*.f64 #s(literal 0 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (cos.f64 x))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (cos.f64 x)) eps))","(+.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) eps) (*.f64 (cos.f64 x) eps))","(+.f64 (*.f64 (cos.f64 x) eps) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) eps))","(+.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (cos.f64 x)) #s(literal 0 binary64)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (cos.f64 x)) eps))","(+.f64 (*.f64 eps (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps)) (*.f64 eps (cos.f64 x)))","(+.f64 (*.f64 eps (cos.f64 x)) (*.f64 eps (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps)))","(+.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (cos.f64 x)) eps) (*.f64 #s(literal 0 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (cos.f64 x))))","(+.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (cos.f64 x)) eps) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (cos.f64 x)) #s(literal 0 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (neg.f64 (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (neg.f64 (cos.f64 x))) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64)))) (neg.f64 (-.f64 (cos.f64 x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (neg.f64 (cos.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (neg.f64 (cos.f64 x)))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (neg.f64 (cos.f64 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (neg.f64 (cos.f64 x)))))","(/.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64))) (-.f64 (cos.f64 x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (neg.f64 (cos.f64 x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) (*.f64 eps (cos.f64 x)))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (neg.f64 (cos.f64 x))) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (neg.f64 (cos.f64 x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) (*.f64 eps (cos.f64 x))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (neg.f64 (cos.f64 x))) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (cos.f64 x))","(fma.f64 eps (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) (cos.f64 x))","(-.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64)) (-.f64 (cos.f64 x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (neg.f64 (cos.f64 x)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (neg.f64 (cos.f64 x)))))","(+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) (cos.f64 x))","(+.f64 (cos.f64 x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps) #s(literal 2 binary64))) (pow.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -1/216 binary64) (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps) (-.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps) (-.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) #s(literal 2 binary64))) (fma.f64 #s(literal -1/216 binary64) (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -1/216 binary64) (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps) (-.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps))) (*.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) (pow.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps) #s(literal 2 binary64)))) (*.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) (-.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) (sin.f64 x)) (neg.f64 eps) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 #s(literal -1/6 binary64) (cos.f64 x))))) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) (neg.f64 eps)))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) (sin.f64 x)) (*.f64 eps eps) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 #s(literal -1/6 binary64) (cos.f64 x))))) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 eps eps)))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) (sin.f64 x)) (neg.f64 eps) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) (neg.f64 (*.f64 eps eps))))) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) (neg.f64 eps)))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) (sin.f64 x)) (*.f64 eps eps) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) (pow.f64 eps #s(literal 3 binary64))))) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 eps eps)))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64)) (sin.f64 x)) (neg.f64 eps) (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/48 binary64)))) (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 #s(literal -1/6 binary64) (cos.f64 x))))) (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/48 binary64)))) (neg.f64 eps)))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64)) (sin.f64 x)) (*.f64 eps eps) (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/48 binary64)))) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 #s(literal -1/6 binary64) (cos.f64 x))))) (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/48 binary64)))) (*.f64 eps eps)))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64)) (sin.f64 x)) (neg.f64 eps) (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/48 binary64)))) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) (neg.f64 (*.f64 eps eps))))) (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/48 binary64)))) (neg.f64 eps)))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64)) (sin.f64 x)) (*.f64 eps eps) (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/48 binary64)))) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) (pow.f64 eps #s(literal 3 binary64))))) (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/48 binary64)))) (*.f64 eps eps)))","(/.f64 (fma.f64 (*.f64 (sin.f64 x) (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64))) (neg.f64 eps) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 #s(literal -1/6 binary64) (cos.f64 x))))) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) (neg.f64 eps)))","(/.f64 (fma.f64 (*.f64 (sin.f64 x) (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64))) (*.f64 eps eps) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 #s(literal -1/6 binary64) (cos.f64 x))))) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 eps eps)))","(/.f64 (fma.f64 (*.f64 (sin.f64 x) (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64))) (neg.f64 eps) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) (neg.f64 (*.f64 eps eps))))) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) (neg.f64 eps)))","(/.f64 (fma.f64 (*.f64 (sin.f64 x) (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64))) (*.f64 eps eps) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) (pow.f64 eps #s(literal 3 binary64))))) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 eps eps)))","(/.f64 (fma.f64 (*.f64 (sin.f64 x) (fma.f64 #s(literal 1/13824 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64))) (neg.f64 eps) (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/48 binary64)))) (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 #s(literal -1/6 binary64) (cos.f64 x))))) (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/48 binary64)))) (neg.f64 eps)))","(/.f64 (fma.f64 (*.f64 (sin.f64 x) (fma.f64 #s(literal 1/13824 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64))) (*.f64 eps eps) (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/48 binary64)))) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 #s(literal -1/6 binary64) (cos.f64 x))))) (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/48 binary64)))) (*.f64 eps eps)))","(/.f64 (fma.f64 (*.f64 (sin.f64 x) (fma.f64 #s(literal 1/13824 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64))) (neg.f64 eps) (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/48 binary64)))) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) (neg.f64 (*.f64 eps eps))))) (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/48 binary64)))) (neg.f64 eps)))","(/.f64 (fma.f64 (*.f64 (sin.f64 x) (fma.f64 #s(literal 1/13824 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64))) (*.f64 eps eps) (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/48 binary64)))) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) (pow.f64 eps #s(literal 3 binary64))))) (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/48 binary64)))) (*.f64 eps eps)))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) #s(literal 2 binary64))) (neg.f64 eps) (*.f64 (-.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 #s(literal -1/6 binary64) (cos.f64 x))))) (*.f64 (-.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) (neg.f64 eps)))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) #s(literal 2 binary64))) (*.f64 eps eps) (*.f64 (-.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 #s(literal -1/6 binary64) (cos.f64 x))))) (*.f64 (-.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) (*.f64 eps eps)))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) #s(literal 2 binary64))) (neg.f64 eps) (*.f64 (-.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) (neg.f64 (*.f64 eps eps))))) (*.f64 (-.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) (neg.f64 eps)))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) #s(literal 2 binary64))) (*.f64 eps eps) (*.f64 (-.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) (pow.f64 eps #s(literal 3 binary64))))) (*.f64 (-.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) (*.f64 eps eps)))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) #s(literal -1/8 binary64))) (neg.f64 eps) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))))) (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 #s(literal -1/6 binary64) (cos.f64 x))))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))))) (neg.f64 eps)))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) #s(literal -1/8 binary64))) (*.f64 eps eps) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))))) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 #s(literal -1/6 binary64) (cos.f64 x))))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))))) (*.f64 eps eps)))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) #s(literal -1/8 binary64))) (neg.f64 eps) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))))) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) (neg.f64 (*.f64 eps eps))))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))))) (neg.f64 eps)))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) #s(literal -1/8 binary64))) (*.f64 eps eps) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))))) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) (pow.f64 eps #s(literal 3 binary64))))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))))) (*.f64 eps eps)))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 #s(literal -1/6 binary64) (cos.f64 x))) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (neg.f64 eps) (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) (sin.f64 x)))) (*.f64 (neg.f64 eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 #s(literal -1/6 binary64) (cos.f64 x))) (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/48 binary64)))) (*.f64 (neg.f64 eps) (*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64)) (sin.f64 x)))) (*.f64 (neg.f64 eps) (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/48 binary64))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 #s(literal -1/6 binary64) (cos.f64 x))) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (neg.f64 eps) (*.f64 (sin.f64 x) (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64))))) (*.f64 (neg.f64 eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 #s(literal -1/6 binary64) (cos.f64 x))) (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/48 binary64)))) (*.f64 (neg.f64 eps) (*.f64 (sin.f64 x) (fma.f64 #s(literal 1/13824 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64))))) (*.f64 (neg.f64 eps) (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/48 binary64))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 #s(literal -1/6 binary64) (cos.f64 x))) (-.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) (*.f64 (neg.f64 eps) (-.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) #s(literal 2 binary64))))) (*.f64 (neg.f64 eps) (-.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) (*.f64 #s(literal -1/2 binary64) (sin.f64 x)))))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 #s(literal -1/6 binary64) (cos.f64 x))) (+.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))))) (*.f64 (neg.f64 eps) (fma.f64 (pow.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) #s(literal -1/8 binary64))))) (*.f64 (neg.f64 eps) (+.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) (*.f64 #s(literal -1/2 binary64) (sin.f64 x)))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 #s(literal -1/6 binary64) (cos.f64 x))) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (*.f64 eps eps) (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) (sin.f64 x)))) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 #s(literal -1/6 binary64) (cos.f64 x))) (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/48 binary64)))) (*.f64 (*.f64 eps eps) (*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64)) (sin.f64 x)))) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/48 binary64))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 #s(literal -1/6 binary64) (cos.f64 x))) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (*.f64 eps eps) (*.f64 (sin.f64 x) (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64))))) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 #s(literal -1/6 binary64) (cos.f64 x))) (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/48 binary64)))) (*.f64 (*.f64 eps eps) (*.f64 (sin.f64 x) (fma.f64 #s(literal 1/13824 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64))))) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/48 binary64))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 #s(literal -1/6 binary64) (cos.f64 x))) (-.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) (*.f64 (*.f64 eps eps) (-.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) #s(literal 2 binary64))))) (*.f64 (*.f64 eps eps) (-.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) (*.f64 #s(literal -1/2 binary64) (sin.f64 x)))))","(/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 #s(literal -1/6 binary64) (cos.f64 x))) (+.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))))) (*.f64 (*.f64 eps eps) (fma.f64 (pow.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) #s(literal -1/8 binary64))))) (*.f64 (*.f64 eps eps) (+.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) (*.f64 #s(literal -1/2 binary64) (sin.f64 x)))))))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) (neg.f64 (*.f64 eps eps))) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (neg.f64 eps) (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) (sin.f64 x)))) (*.f64 (neg.f64 eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) (neg.f64 (*.f64 eps eps))) (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/48 binary64)))) (*.f64 (neg.f64 eps) (*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64)) (sin.f64 x)))) (*.f64 (neg.f64 eps) (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/48 binary64))))))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) (neg.f64 (*.f64 eps eps))) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (neg.f64 eps) (*.f64 (sin.f64 x) (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64))))) (*.f64 (neg.f64 eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) (neg.f64 (*.f64 eps eps))) (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/48 binary64)))) (*.f64 (neg.f64 eps) (*.f64 (sin.f64 x) (fma.f64 #s(literal 1/13824 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64))))) (*.f64 (neg.f64 eps) (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/48 binary64))))))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) (neg.f64 (*.f64 eps eps))) (-.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) (*.f64 (neg.f64 eps) (-.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) #s(literal 2 binary64))))) (*.f64 (neg.f64 eps) (-.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) (*.f64 #s(literal -1/2 binary64) (sin.f64 x)))))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) (neg.f64 (*.f64 eps eps))) (+.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))))) (*.f64 (neg.f64 eps) (fma.f64 (pow.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) #s(literal -1/8 binary64))))) (*.f64 (neg.f64 eps) (+.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) (*.f64 #s(literal -1/2 binary64) (sin.f64 x)))))))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (*.f64 eps eps) (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) (sin.f64 x)))) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/48 binary64)))) (*.f64 (*.f64 eps eps) (*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64)) (sin.f64 x)))) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/48 binary64))))))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (*.f64 eps eps) (*.f64 (sin.f64 x) (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64))))) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/48 binary64)))) (*.f64 (*.f64 eps eps) (*.f64 (sin.f64 x) (fma.f64 #s(literal 1/13824 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64))))) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/48 binary64))))))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) (pow.f64 eps #s(literal 3 binary64))) (-.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) (*.f64 (*.f64 eps eps) (-.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) #s(literal 2 binary64))))) (*.f64 (*.f64 eps eps) (-.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) (*.f64 #s(literal -1/2 binary64) (sin.f64 x)))))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) (pow.f64 eps #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))))) (*.f64 (*.f64 eps eps) (fma.f64 (pow.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) #s(literal -1/8 binary64))))) (*.f64 (*.f64 eps eps) (+.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) (*.f64 #s(literal -1/2 binary64) (sin.f64 x)))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) #s(literal 2 binary64))) (-.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/216 binary64) (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (*.f64 eps (cos.f64 x)) #s(literal 2 binary64)) #s(literal 1/36 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/216 binary64) (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps) (-.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) #s(literal 2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps) (-.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) #s(literal 2 binary64))) (fma.f64 #s(literal -1/216 binary64) (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) #s(literal 3 binary64))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps) #s(literal 2 binary64))) (-.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)))","(/.f64 (fma.f64 #s(literal -1/216 binary64) (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) #s(literal 3 binary64))) (fma.f64 (pow.f64 (*.f64 eps (cos.f64 x)) #s(literal 2 binary64)) #s(literal 1/36 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)))))","(/.f64 (fma.f64 #s(literal -1/216 binary64) (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps) (-.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps) (-.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) #s(literal 2 binary64))) (fma.f64 #s(literal -1/216 binary64) (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) #s(literal 3 binary64)))))","(fma.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps) (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)))","(fma.f64 (*.f64 (sin.f64 x) (*.f64 eps eps)) #s(literal 1/24 binary64) (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)))","(fma.f64 (*.f64 (sin.f64 x) eps) (*.f64 #s(literal 1/24 binary64) eps) (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)))","(fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/6 binary64) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)))","(fma.f64 (*.f64 #s(literal -1/6 binary64) eps) (cos.f64 x) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)))","(fma.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 eps eps)) (sin.f64 x) (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)))","(fma.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)))","(fma.f64 #s(literal -1/6 binary64) (*.f64 (cos.f64 x) eps) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps))","(fma.f64 #s(literal 1/24 binary64) (*.f64 (*.f64 eps eps) (sin.f64 x)) (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)))","(fma.f64 (cos.f64 x) (*.f64 #s(literal -1/6 binary64) eps) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)))","(fma.f64 (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 eps eps)) (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)))","(fma.f64 (sin.f64 x) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps))","(fma.f64 (*.f64 eps eps) (*.f64 #s(literal 1/24 binary64) (sin.f64 x)) (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)))","(fma.f64 eps (*.f64 (*.f64 #s(literal 1/24 binary64) eps) (sin.f64 x)) (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)))","(fma.f64 eps (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps))) (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps))))","(+.f64 (fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/6 binary64) (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps))) (*.f64 #s(literal -1/2 binary64) (sin.f64 x)))","(+.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/24 binary64)) (*.f64 eps eps)) (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)))","(+.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps))","(+.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)))","(cos.f64 (/.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 2 binary64)))","(cos.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 x #s(literal 2 binary64) eps)))","(*.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/2304 binary64)) (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal 1/48 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/110592 binary64)) (pow.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/2304 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) (*.f64 eps #s(literal -1/48 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal 1/48 binary64)) (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/2304 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/2304 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) (*.f64 eps #s(literal -1/48 binary64)))) (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/110592 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 1/2304 binary64) (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))))) (neg.f64 (-.f64 #s(literal -1/48 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) eps))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/2304 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal 1/48 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/110592 binary64)))) (neg.f64 (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/2304 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) (*.f64 eps #s(literal -1/48 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal 1/48 binary64))) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal 1/48 binary64)) #s(literal 1/2304 binary64))) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal 1/48 binary64)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal 1/48 binary64))))","(/.f64 (-.f64 #s(literal 1/2304 binary64) (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (-.f64 #s(literal -1/48 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) eps)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/2304 binary64))) (neg.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal 1/48 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/110592 binary64))) (neg.f64 (+.f64 #s(literal 1/2304 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) (*.f64 eps #s(literal -1/48 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/110592 binary64))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/2304 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) (*.f64 eps #s(literal -1/48 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal 1/48 binary64)) (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/2304 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/2304 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) (*.f64 eps #s(literal -1/48 binary64)))) (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/110592 binary64)))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/2304 binary64)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal 1/48 binary64)))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/110592 binary64)) (+.f64 #s(literal 1/2304 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) (*.f64 eps #s(literal -1/48 binary64))))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/110592 binary64)) (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/2304 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) (*.f64 eps #s(literal -1/48 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal 1/48 binary64)) (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/2304 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/2304 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) (*.f64 eps #s(literal -1/48 binary64)))) (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/110592 binary64))))","(fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) eps #s(literal -1/48 binary64))","(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64))","(fma.f64 (*.f64 eps eps) (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal -1/48 binary64))","(fma.f64 eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) #s(literal -1/48 binary64))","(-.f64 (/.f64 #s(literal 1/2304 binary64) (-.f64 #s(literal -1/48 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) eps))) (/.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (-.f64 #s(literal -1/48 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) eps))))","(-.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal 1/48 binary64))) (/.f64 #s(literal 1/2304 binary64) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal 1/48 binary64))))","(+.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) eps) #s(literal -1/48 binary64))","(+.f64 #s(literal -1/48 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) eps))","(cos.f64 x)","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)","(*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64)) x)) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal 1/2 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64) #s(literal -1/8 binary64)) x)) (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/24 binary64))))))","(/.f64 (neg.f64 (*.f64 x (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64)))) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal 1/2 binary64))))","(/.f64 (neg.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64) #s(literal -1/8 binary64)))) (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/24 binary64))))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64)) x) (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal 1/2 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64) #s(literal -1/8 binary64)) x) (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/24 binary64)))))","(/.f64 (*.f64 x (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal 1/2 binary64)))","(/.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64) #s(literal -1/8 binary64))) (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/24 binary64)))))","(fma.f64 (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) x (*.f64 #s(literal -1/2 binary64) x))","(fma.f64 #s(literal -1/2 binary64) x (*.f64 (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) x))","(fma.f64 #s(literal -1/2 binary64) x (*.f64 x (*.f64 (*.f64 x x) #s(literal 1/12 binary64))))","(fma.f64 x (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 #s(literal -1/2 binary64) x))","(fma.f64 x #s(literal -1/2 binary64) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) x))","(fma.f64 x #s(literal -1/2 binary64) (*.f64 x (*.f64 (*.f64 x x) #s(literal 1/12 binary64))))","(+.f64 (*.f64 (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) x) (*.f64 #s(literal -1/2 binary64) x))","(+.f64 (*.f64 x (*.f64 (*.f64 x x) #s(literal 1/12 binary64))) (*.f64 #s(literal -1/2 binary64) x))","(+.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) x))","(+.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 x (*.f64 (*.f64 x x) #s(literal 1/12 binary64))))","(*.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/6 binary64))","(*.f64 (*.f64 #s(literal -1/6 binary64) eps) (cos.f64 x))","(*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)","(*.f64 #s(literal -1/6 binary64) (*.f64 (cos.f64 x) eps))","(*.f64 (cos.f64 x) (*.f64 #s(literal -1/6 binary64) eps))","(*.f64 eps (*.f64 #s(literal -1/6 binary64) (cos.f64 x)))","(/.f64 (neg.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 #s(literal -1/6 binary64) (cos.f64 x)))) (neg.f64 (neg.f64 eps)))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 #s(literal -1/6 binary64) (cos.f64 x)))) (neg.f64 (*.f64 eps eps)))","(/.f64 (neg.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) (neg.f64 (*.f64 eps eps)))) (neg.f64 (neg.f64 eps)))","(/.f64 (neg.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 eps eps)))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 #s(literal -1/6 binary64) (cos.f64 x))) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 #s(literal -1/6 binary64) (cos.f64 x))) (*.f64 eps eps))","(/.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(/.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/6 binary64) (*.f64 #s(literal 0 binary64) (*.f64 #s(literal -1/6 binary64) (cos.f64 x))))","(fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/6 binary64) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) #s(literal 0 binary64)))","(fma.f64 (*.f64 #s(literal -1/6 binary64) eps) (cos.f64 x) (*.f64 #s(literal 0 binary64) (*.f64 #s(literal -1/6 binary64) (cos.f64 x))))","(fma.f64 (*.f64 #s(literal -1/6 binary64) eps) (cos.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) #s(literal 0 binary64)))","(fma.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps (*.f64 #s(literal 0 binary64) (*.f64 #s(literal -1/6 binary64) (cos.f64 x))))","(fma.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) #s(literal 0 binary64)))","(fma.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) #s(literal 0 binary64) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps))","(fma.f64 #s(literal -1/6 binary64) (*.f64 (cos.f64 x) eps) (*.f64 #s(literal 0 binary64) (*.f64 #s(literal -1/6 binary64) (cos.f64 x))))","(fma.f64 #s(literal -1/6 binary64) (*.f64 (cos.f64 x) eps) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) #s(literal 0 binary64)))","(fma.f64 (cos.f64 x) (*.f64 #s(literal -1/6 binary64) eps) (*.f64 #s(literal 0 binary64) (*.f64 #s(literal -1/6 binary64) (cos.f64 x))))","(fma.f64 (cos.f64 x) (*.f64 #s(literal -1/6 binary64) eps) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) #s(literal 0 binary64)))","(fma.f64 eps (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) (*.f64 #s(literal 0 binary64) (*.f64 #s(literal -1/6 binary64) (cos.f64 x))))","(fma.f64 eps (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) #s(literal 0 binary64)))","(fma.f64 #s(literal 0 binary64) (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps))","(+.f64 (*.f64 #s(literal 0 binary64) (*.f64 #s(literal -1/6 binary64) (cos.f64 x))) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps))","(+.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) #s(literal 0 binary64)) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps))","(+.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps) (*.f64 #s(literal 0 binary64) (*.f64 #s(literal -1/6 binary64) (cos.f64 x))))","(+.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) #s(literal 0 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":326.196044921875,"type":"rewrite"},{"compiler":[[28191,2883]],"memory":[[806256,62646880]],"time":81.098876953125,"type":"eval"},{"alts":[["(fma.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (/.f64 (sin.f64 (+.f64 eps x)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","fresh",46.47655982721475,"binary64"],["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (fma.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) eps) (cos.f64 x) (*.f64 (neg.f64 (sin.f64 x)) (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)))) eps (cos.f64 x))))","fresh",0.18109210806744797,"binary64"],["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x))))","next",0.08707685291289795,"binary64"],["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3840 binary64) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","fresh",0.09835624850173226,"binary64"],["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","next",0.20171502055213864,"binary64"],["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 eps #s(literal 1/2 binary64))) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","fresh",0.41521283987173957,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) eps (*.f64 (cos.f64 x) eps)))","fresh",0.19663115323031086,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x)) eps))","done",0.20056778350605978,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps))","done",0.42192036332670746,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) (*.f64 #s(literal -1/6 binary64) eps)) eps (cos.f64 x)) eps))","fresh",0.6963585800091323,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","done",0.8830580249709584,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))","done",0.6962720036039058,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 eps (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/12 binary64) eps)) #s(literal -1/2 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps)) x (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64)))) eps))","fresh",1.1255036338998652,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) (fma.f64 eps (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64))) eps))","fresh",1.495746064881908,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x #s(literal 1 binary64))) eps))","fresh",1.1255042749918829,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 x eps) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps))","fresh",1.4957460657583035,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64))) eps))","done",1.1262824794532889,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x x) #s(literal -1/2 binary64)))) eps))","fresh",60.861994783078636,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x eps) #s(literal -1/2 binary64)))) eps))","next",60.50485337185369,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","next",1.1095817058193762,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","fresh",1.1585310579852772,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps))","fresh",1.1265749561628902,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","done",1.5328372345675862,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 x eps)) eps)))","next",1.1184699794532889,"binary64"]],"compiler":[[50,15],[57,36],[43,31],[30,22],[39,29],[20,17],[31,20],[29,19],[18,13],[35,24],[27,18],[12,9],[67,37],[47,31],[34,22],[26,18],[28,19],[35,22],[35,22],[29,18],[24,16],[19,14],[14,11],[30,19],[50,15],[57,36],[43,31],[30,22],[39,29],[20,17],[31,20],[35,24],[67,37],[47,31],[34,22],[26,18],[35,22],[35,22],[29,18],[24,16],[19,14],[30,19]],"count":[[614,24]],"kept":[{"done":[2,2],"fresh":[11,8],"new":[596,10],"picked":[5,4]}],"memory":[[5269936,32791264]],"min-error":[[0.030791574411569694,"binary64"]],"time":28.322021484375,"type":"prune"},{"egraph":[[0,8372,630,0.061136067],[9,7677,642,0.020689847],[8,5013,642,0.026975966],[7,3349,642,0.012921368],[6,2836,642,0.009697612],[5,2728,642,0.006467077],[4,2416,642,0.008233842],[3,1312,642,0.009192161],[2,510,642,0.00586027],[1,200,642,0.001962757],[0,115,642,0.001073048],[0,77,654,0.000673583]],"inputs":[["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x))))","(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64))","#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))","(fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64))","(fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64))","#s(literal -1/645120 binary64)","(*.f64 eps eps)","eps","#s(literal 1/3840 binary64)","#s(literal -1/48 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x)))","(cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x))","(-.f64 (*.f64 #s(literal -1/2 binary64) eps) x)","(*.f64 #s(literal -1/2 binary64) eps)","#s(literal -1/2 binary64)","x","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x eps) #s(literal -1/2 binary64)))) eps))","(*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x eps) #s(literal -1/2 binary64)))) eps)","#s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x eps) #s(literal -1/2 binary64))))","#s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x eps) #s(literal -1/2 binary64)))","(*.f64 (*.f64 x eps) #s(literal -1/2 binary64))","(*.f64 x eps)","x","eps","#s(literal -1/2 binary64)","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 x eps)) eps)))","#s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 x eps)) eps))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 x eps)) eps)","(*.f64 #s(literal -1/2 binary64) x)","#s(literal -1/2 binary64)","x","(*.f64 eps (+.f64 x eps))","eps","(+.f64 x eps)","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","(*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps)","#s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64))","(fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64))","#s(literal -1/720 binary64)","(*.f64 x x)","x","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","eps","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64))","#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","(*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))","#s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64))","#s(literal -1/48 binary64)","(*.f64 eps eps)","eps","#s(literal 1/2 binary64)","#s(literal 2 binary64)","(cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64)))","(/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))","(fma.f64 #s(literal 2 binary64) x eps)","x","#s(literal -2 binary64)"]],"locations":[["(*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","cost-diff",0],["#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","cost-diff",0],["(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64))","cost-diff",0],["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","cost-diff",0],["(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","cost-diff",0],["#s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))","cost-diff",0],["(*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps)","cost-diff",0],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","cost-diff",0],["(*.f64 #s(literal -1/2 binary64) x)","cost-diff",0],["(fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 x eps)) eps)","cost-diff",0],["#s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 x eps)) eps))","cost-diff",0],["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 x eps)) eps)))","cost-diff",0],["#s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x eps) #s(literal -1/2 binary64)))","cost-diff",0],["#s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x eps) #s(literal -1/2 binary64))))","cost-diff",0],["(*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x eps) #s(literal -1/2 binary64)))) eps)","cost-diff",0],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x eps) #s(literal -1/2 binary64)))) eps))","cost-diff",0],["#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","cost-diff",0],["(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64))","cost-diff",0],["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x))))","cost-diff",0],["(cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x))","cost-diff",1]],"memory":[[-2796016,31857504]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x))))","(*.f64 (*.f64 #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 eps #s(literal 1/2 binary64) x))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(literal 2 binary64))","(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)))","#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))","(fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))","(fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64))","(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64))","(fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64))","(fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64))","#s(literal -1/645120 binary64)","(*.f64 eps eps)","eps","#s(literal 1/3840 binary64)","#s(literal -1/48 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x)))","#s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 eps #s(literal 1/2 binary64) x)))","(cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x))","(cos.f64 (fma.f64 eps #s(literal 1/2 binary64) x))","(-.f64 (*.f64 #s(literal -1/2 binary64) eps) x)","(*.f64 #s(literal -1/2 binary64) eps)","#s(literal -1/2 binary64)","x","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x eps) #s(literal -1/2 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 #s(literal -1/2 binary64) x) eps))) eps))","(*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x eps) #s(literal -1/2 binary64)))) eps)","(*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 #s(literal -1/2 binary64) x) eps))) eps)","#s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x eps) #s(literal -1/2 binary64))))","#s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 #s(literal -1/2 binary64) x) eps)))","#s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x eps) #s(literal -1/2 binary64)))","#s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 #s(literal -1/2 binary64) x) eps))","(*.f64 (*.f64 x eps) #s(literal -1/2 binary64))","(*.f64 (*.f64 #s(literal -1/2 binary64) x) eps)","(*.f64 x eps)","x","eps","#s(literal -1/2 binary64)","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 x eps)) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 (+.f64 x eps) eps) (*.f64 #s(literal -1/2 binary64) x) eps)))","#s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 x eps)) eps))","#s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 (+.f64 x eps) eps) (*.f64 #s(literal -1/2 binary64) x) eps))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 x eps)) eps)","(fma.f64 (*.f64 (+.f64 x eps) eps) (*.f64 #s(literal -1/2 binary64) x) eps)","(*.f64 #s(literal -1/2 binary64) x)","#s(literal -1/2 binary64)","x","(*.f64 eps (+.f64 x eps))","(*.f64 (+.f64 x eps) eps)","eps","(+.f64 x eps)","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","(*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps)","(*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps)","#s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))","#s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64))","(fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64))","(fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64))","#s(literal -1/720 binary64)","(*.f64 x x)","x","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","eps","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(*.f64 (cos.f64 (/.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal -2 binary64))) (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)))","(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64))","#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","(*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))","#s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64))","#s(literal -1/48 binary64)","(*.f64 eps eps)","eps","#s(literal 1/2 binary64)","#s(literal 2 binary64)","(cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64)))","(cos.f64 (/.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal -2 binary64)))","(/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))","(/.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal -2 binary64))","(fma.f64 #s(literal 2 binary64) x eps)","(fma.f64 x #s(literal 2 binary64) eps)","x","#s(literal -2 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":243.76904296875,"type":"simplify"},{"compiler":[[390,60]],"locations":[["(*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","accuracy",0.00390625],["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","accuracy",0.014003759768442016],["(cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64)))","accuracy",0.08081859864955285],["#s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64))","accuracy",0.3653095737751684],["(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","accuracy",0.01171875],["(*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps)","accuracy",0.015625],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","accuracy",0.6884607009963482],["#s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))","accuracy",1.0874743994388458],["(*.f64 #s(literal -1/2 binary64) x)","accuracy",0.0],["(*.f64 eps (+.f64 x eps))","accuracy",0.12890625],["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 x eps)) eps)))","accuracy",0.41020161332953264],["#s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 x eps)) eps))","accuracy",1.118469237974143],["(*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x eps) #s(literal -1/2 binary64)))) eps)","accuracy",0.01171875],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x eps) #s(literal -1/2 binary64)))) eps))","accuracy",0.41020161332953264],["#s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x eps) #s(literal -1/2 binary64))))","accuracy",1.1189037512581257],["#s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x eps) #s(literal -1/2 binary64)))","accuracy",61.7811049299236],["(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","accuracy",0.00390625],["(fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64))","accuracy",0.0078125],["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x))))","accuracy",0.014003759768442016],["(cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x))","accuracy",0.08081859864955285]],"memory":[[-1038480,64735856]],"mixsample":[[11.16162109375,"adjust",800],[2.236083984375,"ival-div",0],[18.04443359375,"ival-add",0],[0.158203125,"ival-sin",400],[42.65771484375,"ival-mult",0],[9.34326171875,"ival-sin",0],[0.13916015625,"ival-assert",0],[3.505126953125,"ival-sub",0],[0.26806640625,"ival-true",0],[6.474609375,"ival-cos",0],[0.035888671875,"ival-sub",400],[19.31884765625,"const",0],[0.738525390625,"exact",0]],"outcomes":[[70.548095703125,1,"valid",83],[83.060302734375,0,"valid",173]],"time":201.510986328125,"type":"localize"},{"count":[[25,112]],"inputs":[["(cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x))))","(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64))","#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x eps) #s(literal -1/2 binary64)))) eps))","(*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x eps) #s(literal -1/2 binary64)))) eps)","#s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x eps) #s(literal -1/2 binary64))))","#s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x eps) #s(literal -1/2 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 x eps)) eps)))","#s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 x eps)) eps))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 x eps)) eps)","(*.f64 #s(literal -1/2 binary64) x)","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","(*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps)","#s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64))","#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","(*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(*.f64 eps (+.f64 x eps))","#s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64))","(cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64)))"]],"memory":[[3193680,11035456]],"outputs":[["(cos (* -1/2 eps))","(+ (cos (* -1/2 eps)) (* x (sin (* -1/2 eps))))","(+ (cos (* -1/2 eps)) (* x (- (* -1/2 (* x (cos (* -1/2 eps)))) (* -1 (sin (* -1/2 eps))))))","(+ (cos (* -1/2 eps)) (* x (- (* x (+ (* -1/2 (cos (* -1/2 eps))) (* -1/6 (* x (sin (* -1/2 eps)))))) (* -1 (sin (* -1/2 eps))))))","(* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps))))","(+ (* 2 (* x (* (sin (* -1/2 eps)) (sin (* 1/2 eps))))) (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))))","(+ (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* -1 (* x (* (cos (* -1/2 eps)) (sin (* 1/2 eps))))) (* 2 (* (sin (* -1/2 eps)) (sin (* 1/2 eps)))))))","(+ (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* 2 (* (sin (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* -1 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* -1/3 (* x (* (sin (* -1/2 eps)) (sin (* 1/2 eps))))))))))","(sin eps)","(+ (sin eps) (* x (- (cos eps) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* x (+ 1/6 (* -1/6 (cos eps))))))) 1)))","eps","(+ eps (* -1/2 (* (pow eps 2) x)))","(+ eps (* x (+ (* -1/2 (* eps x)) (* -1/2 (pow eps 2)))))","(+ eps (* x (+ (* -1/2 (pow eps 2)) (* x (+ (* -1/2 eps) (* 1/12 (* (pow eps 2) x)))))))","1","(+ 1 (* -1/2 (* eps x)))","(+ 1 (* x (+ (* -1/2 eps) (* -1/2 x))))","(+ 1 (* x (+ (* -1/2 eps) (* x (- (* 1/12 (* eps x)) 1/2)))))","(* -1/2 x)","(+ eps (* -1/2 (* eps (pow x 2))))","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* 1/24 (* eps (pow x 2))))))","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* (pow x 2) (+ (* -1/720 (* eps (pow x 2))) (* 1/24 eps))))))","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(pow eps 2)","(+ (* eps x) (pow eps 2))","(cos (- (* -1/2 eps) x))","(* 2 (* (cos (* -1/2 (+ eps (* 2 x)))) (sin (* 1/2 eps))))","(- (sin (+ eps x)) (sin x))","(* eps (+ (cos x) (* -1/2 (* eps (sin x)))))","(+ (cos x) (* -1/2 (* eps (sin x))))","(* -1/2 (pow x 2))","(* (pow x 2) (- (* -1/2 (/ eps x)) 1/2))","(* (pow x 2) (- (+ (* -1/2 (/ eps x)) (/ 1 (pow x 2))) 1/2))","(* -1/2 (* eps (pow x 2)))","(* (pow x 2) (+ (* -1/2 eps) (* -1/2 (/ (pow eps 2) x))))","(* (pow x 2) (+ (* -1/2 eps) (+ (* -1/2 (/ (pow eps 2) x)) (/ eps (pow x 2)))))","(* eps (cos x))","(cos x)","(* -1/720 (pow x 6))","(* (pow x 6) (- (* 1/24 (/ 1 (pow x 2))) 1/720))","(* (pow x 6) (- (* 1/24 (/ 1 (pow x 2))) (+ 1/720 (/ 1/2 (pow x 4)))))","(* (pow x 6) (- (+ (* 1/24 (/ 1 (pow x 2))) (/ 1 (pow x 6))) (+ 1/720 (/ 1/2 (pow x 4)))))","(* eps x)","(* x (+ eps (/ (pow eps 2) x)))","(cos (* -1/2 (+ eps (* 2 x))))","(cos (+ (* -1 x) (* -1/2 eps)))","(* 2 (* (cos (* -1/2 (- eps (* -2 x)))) (sin (* 1/2 eps))))","(- (sin (- eps (* -1 x))) (sin x))","(* (pow x 2) (- (* -1 (/ (- (* 1/2 eps) (/ 1 x)) x)) 1/2))","(* (pow x 2) (+ (* -1 (/ (+ (* -1 (/ eps x)) (* 1/2 (pow eps 2))) x)) (* -1/2 eps)))","(* -1 (* x (+ (* -1 eps) (* -1 (/ (pow eps 2) x)))))","(cos (* -1/2 (- eps (* -2 x))))","(cos (neg x))","(+ (cos (neg x)) (* 1/2 (* eps (sin (neg x)))))","(+ (cos (neg x)) (* eps (- (* -1/8 (* eps (cos (neg x)))) (* -1/2 (sin (neg x))))))","(+ (cos (neg x)) (* eps (- (* eps (+ (* -1/8 (cos (neg x))) (* -1/48 (* eps (sin (neg x)))))) (* -1/2 (sin (neg x))))))","(* eps (cos (* -1 x)))","(* eps (+ (cos (* -1 x)) (* 1/2 (* eps (sin (* -1 x))))))","(* eps (+ (cos (* -1 x)) (* eps (+ (* 1/2 (sin (* -1 x))) (* 2 (* eps (+ (* -1/16 (cos (* -1 x))) (* -1/48 (cos (* -1 x))))))))))","(* eps (+ (cos (* -1 x)) (* eps (+ (* 1/2 (sin (* -1 x))) (* eps (+ (* -1/24 (* eps (sin (* -1 x)))) (* 2 (+ (* -1/16 (cos (* -1 x))) (* -1/48 (cos (* -1 x)))))))))))","(* eps (+ 1 (* -1/24 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/1920 (pow eps 2)) 1/24))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/1920 (* -1/322560 (pow eps 2)))) 1/24))))","(* 1/2 eps)","(* eps (+ 1/2 (* -1/48 (pow eps 2))))","(* eps (+ 1/2 (* (pow eps 2) (- (* 1/3840 (pow eps 2)) 1/48))))","(* eps (+ 1/2 (* (pow eps 2) (- (* (pow eps 2) (+ 1/3840 (* -1/645120 (pow eps 2)))) 1/48))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x)))))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x)))))))))","(+ 1 (+ (* -1/2 (* eps x)) (* -1/2 (pow x 2))))","(* eps (+ 1 (* -1/2 (pow x 2))))","(* eps (+ 1 (+ (* -1/2 (* eps x)) (* -1/2 (pow x 2)))))","-1/48","(- (* 1/3840 (pow eps 2)) 1/48)","(- (* (pow eps 2) (+ 1/3840 (* -1/645120 (pow eps 2)))) 1/48)","(* eps (+ eps x))","(cos (* -1 x))","(+ (cos (* -1 x)) (* 1/2 (* eps (sin (* -1 x)))))","(+ (cos (* -1 x)) (* eps (- (* -1/8 (* eps (cos (* -1 x)))) (* -1/2 (sin (* -1 x))))))","(+ (cos (* -1 x)) (* eps (- (* eps (+ (* -1/8 (cos (* -1 x))) (* -1/48 (* eps (sin (* -1 x)))))) (* -1/2 (sin (* -1 x))))))","(cos (neg (+ x (* 1/2 eps))))","(* 2 (sin (* 1/2 eps)))","(sin (* 1/2 eps))","(* -1/2 (* (pow eps 2) (sin x)))","(* (pow eps 2) (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(* -1/2 (* eps (sin x)))","(* eps (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(* -1/2 (* eps x))","(* eps (+ (* -1/2 x) (+ (* -1/2 (/ (pow x 2) eps)) (/ 1 eps))))","(* -1/2 (* (pow eps 2) x))","(* (pow eps 2) (+ (* -1/2 x) (+ (* -1/2 (/ (pow x 2) eps)) (/ 1 eps))))","(* -1/645120 (pow eps 7))","(* (pow eps 7) (- (* 1/3840 (/ 1 (pow eps 2))) 1/645120))","(* (pow eps 7) (- (* 1/3840 (/ 1 (pow eps 2))) (+ 1/645120 (/ 1/48 (pow eps 4)))))","(* (pow eps 7) (- (+ (* 1/3840 (/ 1 (pow eps 2))) (* 1/2 (/ 1 (pow eps 6)))) (+ 1/645120 (/ 1/48 (pow eps 4)))))","(* -1/645120 (pow eps 4))","(* (pow eps 4) (- (* 1/3840 (/ 1 (pow eps 2))) 1/645120))","(* (pow eps 4) (- (* 1/3840 (/ 1 (pow eps 2))) (+ 1/645120 (/ 1/48 (pow eps 4)))))","(* (pow eps 2) (+ 1 (/ x eps)))","(* 2 (* (cos (* -1/2 (- (* 2 x) (* -1 eps)))) (sin (* 1/2 eps))))","(- (sin (- x (* -1 eps))) (sin x))","(* -1 (* eps (+ (* -1 (/ (cos x) eps)) (* 1/2 (sin x)))))","(* -1 (* eps (+ (* -1 (/ (+ 1 (* -1/2 (pow x 2))) eps)) (* 1/2 x))))","(* (pow eps 2) (+ (* -1 (/ (- (* 1/2 (pow x 2)) 1) eps)) (* -1/2 x)))","(* -1 (* (pow eps 7) (- 1/645120 (* 1/3840 (/ 1 (pow eps 2))))))","(* -1 (* (pow eps 7) (- (+ 1/645120 (/ 1/48 (pow eps 4))) (* 1/3840 (/ 1 (pow eps 2))))))","(* -1 (* (pow eps 7) (- (+ 1/645120 (/ 1/48 (pow eps 4))) (+ (* 1/3840 (/ 1 (pow eps 2))) (* 1/2 (/ 1 (pow eps 6)))))))","(cos (* -1/2 (- (* 2 x) (* -1 eps))))"]],"series":[[3.718994140625,"((cos (- (* -1/2 eps) x)) (* (* (sin (* 1/2 (+ 0 eps))) 2) (cos (/ (+ (* 2 x) eps) -2))) (* (sin (* 1/2 (+ 0 eps))) 2) (sin (* 1/2 (+ 0 eps))) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (+ (* (* -1/2 x) (+ x eps)) 1) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* -1/2 x) (* eps (+ x eps))) eps) (* -1/2 x) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (cos x) (+ (* (+ (* (+ (* -1/720 (* x x)) 1/24) (* x x)) -1/2) (* x x)) 1) (* (* (sin (* 1/2 (+ 0 eps))) 2) (cos (/ (+ (* 2 x) eps) -2))) (* (sin (* 1/2 (+ 0 eps))) 2) (sin (* 1/2 (+ 0 eps))) (* (+ (* (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) (* eps eps)) 1/2) eps) (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) (* (+ (* (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) (* eps eps)) 1/2) eps) (* eps (+ x eps)) (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) (cos (/ (+ (* 2 x) eps) -2)))","eps","-inf"],[3.50390625,"((cos (- (* -1/2 eps) x)) (* (* (sin (* 1/2 (+ 0 eps))) 2) (cos (/ (+ (* 2 x) eps) -2))) (* (sin (* 1/2 (+ 0 eps))) 2) (sin (* 1/2 (+ 0 eps))) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (+ (* (* -1/2 x) (+ x eps)) 1) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* -1/2 x) (* eps (+ x eps))) eps) (* -1/2 x) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (cos x) (+ (* (+ (* (+ (* -1/720 (* x x)) 1/24) (* x x)) -1/2) (* x x)) 1) (* (* (sin (* 1/2 (+ 0 eps))) 2) (cos (/ (+ (* 2 x) eps) -2))) (* (sin (* 1/2 (+ 0 eps))) 2) (sin (* 1/2 (+ 0 eps))) (* (+ (* (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) (* eps eps)) 1/2) eps) (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) (* (+ (* (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) (* eps eps)) 1/2) eps) (* eps (+ x eps)) (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) (cos (/ (+ (* 2 x) eps) -2)))","eps","inf"],[4.205078125,"((cos (- (* -1/2 eps) x)) (* (* (sin (* 1/2 (+ 0 eps))) 2) (cos (/ (+ (* 2 x) eps) -2))) (* (sin (* 1/2 (+ 0 eps))) 2) (sin (* 1/2 (+ 0 eps))) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (+ (* (* -1/2 x) (+ x eps)) 1) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* -1/2 x) (* eps (+ x eps))) eps) (* -1/2 x) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (cos x) (+ (* (+ (* (+ (* -1/720 (* x x)) 1/24) (* x x)) -1/2) (* x x)) 1) (* (* (sin (* 1/2 (+ 0 eps))) 2) (cos (/ (+ (* 2 x) eps) -2))) (* (sin (* 1/2 (+ 0 eps))) 2) (sin (* 1/2 (+ 0 eps))) (* (+ (* (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) (* eps eps)) 1/2) eps) (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) (* (+ (* (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) (* eps eps)) 1/2) eps) (* eps (+ x eps)) (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) (cos (/ (+ (* 2 x) eps) -2)))","eps","0"],[3.0078125,"((cos (- (* -1/2 eps) x)) (* (* (sin (* 1/2 (+ 0 eps))) 2) (cos (/ (+ (* 2 x) eps) -2))) (* (sin (* 1/2 (+ 0 eps))) 2) (sin (* 1/2 (+ 0 eps))) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (+ (* (* -1/2 x) (+ x eps)) 1) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* -1/2 x) (* eps (+ x eps))) eps) (* -1/2 x) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (cos x) (+ (* (+ (* (+ (* -1/720 (* x x)) 1/24) (* x x)) -1/2) (* x x)) 1) (* (* (sin (* 1/2 (+ 0 eps))) 2) (cos (/ (+ (* 2 x) eps) -2))) (* (sin (* 1/2 (+ 0 eps))) 2) (sin (* 1/2 (+ 0 eps))) (* (+ (* (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) (* eps eps)) 1/2) eps) (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) (* (+ (* (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) (* eps eps)) 1/2) eps) (* eps (+ x eps)) (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) (cos (/ (+ (* 2 x) eps) -2)))","x","-inf"],[3.819091796875,"((cos (- (* -1/2 eps) x)) (* (* (sin (* 1/2 (+ 0 eps))) 2) (cos (/ (+ (* 2 x) eps) -2))) (* (sin (* 1/2 (+ 0 eps))) 2) (sin (* 1/2 (+ 0 eps))) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (+ (* (* -1/2 x) (+ x eps)) 1) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* -1/2 x) (* eps (+ x eps))) eps) (* -1/2 x) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (cos x) (+ (* (+ (* (+ (* -1/720 (* x x)) 1/24) (* x x)) -1/2) (* x x)) 1) (* (* (sin (* 1/2 (+ 0 eps))) 2) (cos (/ (+ (* 2 x) eps) -2))) (* (sin (* 1/2 (+ 0 eps))) 2) (sin (* 1/2 (+ 0 eps))) (* (+ (* (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) (* eps eps)) 1/2) eps) (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) (* (+ (* (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) (* eps eps)) 1/2) eps) (* eps (+ x eps)) (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) (cos (/ (+ (* 2 x) eps) -2)))","x","inf"],[1.64013671875,"((cos (- (* -1/2 eps) x)) (* (* (sin (* 1/2 (+ 0 eps))) 2) (cos (/ (+ (* 2 x) eps) -2))) (* (sin (* 1/2 (+ 0 eps))) 2) (sin (* 1/2 (+ 0 eps))) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (+ (* (* -1/2 x) (+ x eps)) 1) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* -1/2 x) (* eps (+ x eps))) eps) (* -1/2 x) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (cos x) (+ (* (+ (* (+ (* -1/720 (* x x)) 1/24) (* x x)) -1/2) (* x x)) 1) (* (* (sin (* 1/2 (+ 0 eps))) 2) (cos (/ (+ (* 2 x) eps) -2))) (* (sin (* 1/2 (+ 0 eps))) 2) (sin (* 1/2 (+ 0 eps))) (* (+ (* (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) (* eps eps)) 1/2) eps) (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) (* (+ (* (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) (* eps eps)) 1/2) eps) (* eps (+ x eps)) (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) (cos (/ (+ (* 2 x) eps) -2)))","x","0"]],"time":22.2109375,"type":"series"},{"count":[[112,111]],"egraph":[[0,8077,1202,0.092141272],[2,3206,1310,0.024687377],[1,1237,1344,0.011588365],[0,402,1388,0.004229932]],"inputs":[["(cos (* -1/2 eps))","(+ (cos (* -1/2 eps)) (* x (sin (* -1/2 eps))))","(+ (cos (* -1/2 eps)) (* x (- (* -1/2 (* x (cos (* -1/2 eps)))) (* -1 (sin (* -1/2 eps))))))","(+ (cos (* -1/2 eps)) (* x (- (* x (+ (* -1/2 (cos (* -1/2 eps))) (* -1/6 (* x (sin (* -1/2 eps)))))) (* -1 (sin (* -1/2 eps))))))","(* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps))))","(+ (* 2 (* x (* (sin (* -1/2 eps)) (sin (* 1/2 eps))))) (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))))","(+ (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* -1 (* x (* (cos (* -1/2 eps)) (sin (* 1/2 eps))))) (* 2 (* (sin (* -1/2 eps)) (sin (* 1/2 eps)))))))","(+ (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* 2 (* (sin (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* -1 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* -1/3 (* x (* (sin (* -1/2 eps)) (sin (* 1/2 eps))))))))))","(sin eps)","(+ (sin eps) (* x (- (cos eps) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* x (+ 1/6 (* -1/6 (cos eps))))))) 1)))","eps","(+ eps (* -1/2 (* (pow eps 2) x)))","(+ eps (* x (+ (* -1/2 (* eps x)) (* -1/2 (pow eps 2)))))","(+ eps (* x (+ (* -1/2 (pow eps 2)) (* x (+ (* -1/2 eps) (* 1/12 (* (pow eps 2) x)))))))","1","(+ 1 (* -1/2 (* eps x)))","(+ 1 (* x (+ (* -1/2 eps) (* -1/2 x))))","(+ 1 (* x (+ (* -1/2 eps) (* x (- (* 1/12 (* eps x)) 1/2)))))","(* -1/2 x)","(+ eps (* -1/2 (* eps (pow x 2))))","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* 1/24 (* eps (pow x 2))))))","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* (pow x 2) (+ (* -1/720 (* eps (pow x 2))) (* 1/24 eps))))))","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(pow eps 2)","(+ (* eps x) (pow eps 2))","(cos (- (* -1/2 eps) x))","(* 2 (* (cos (* -1/2 (+ eps (* 2 x)))) (sin (* 1/2 eps))))","(- (sin (+ eps x)) (sin x))","(* eps (+ (cos x) (* -1/2 (* eps (sin x)))))","(+ (cos x) (* -1/2 (* eps (sin x))))","(* -1/2 (pow x 2))","(* (pow x 2) (- (* -1/2 (/ eps x)) 1/2))","(* (pow x 2) (- (+ (* -1/2 (/ eps x)) (/ 1 (pow x 2))) 1/2))","(* -1/2 (* eps (pow x 2)))","(* (pow x 2) (+ (* -1/2 eps) (* -1/2 (/ (pow eps 2) x))))","(* (pow x 2) (+ (* -1/2 eps) (+ (* -1/2 (/ (pow eps 2) x)) (/ eps (pow x 2)))))","(* eps (cos x))","(cos x)","(* -1/720 (pow x 6))","(* (pow x 6) (- (* 1/24 (/ 1 (pow x 2))) 1/720))","(* (pow x 6) (- (* 1/24 (/ 1 (pow x 2))) (+ 1/720 (/ 1/2 (pow x 4)))))","(* (pow x 6) (- (+ (* 1/24 (/ 1 (pow x 2))) (/ 1 (pow x 6))) (+ 1/720 (/ 1/2 (pow x 4)))))","(* eps x)","(* x (+ eps (/ (pow eps 2) x)))","(cos (* -1/2 (+ eps (* 2 x))))","(cos (+ (* -1 x) (* -1/2 eps)))","(* 2 (* (cos (* -1/2 (- eps (* -2 x)))) (sin (* 1/2 eps))))","(- (sin (- eps (* -1 x))) (sin x))","(* (pow x 2) (- (* -1 (/ (- (* 1/2 eps) (/ 1 x)) x)) 1/2))","(* (pow x 2) (+ (* -1 (/ (+ (* -1 (/ eps x)) (* 1/2 (pow eps 2))) x)) (* -1/2 eps)))","(* -1 (* x (+ (* -1 eps) (* -1 (/ (pow eps 2) x)))))","(cos (* -1/2 (- eps (* -2 x))))","(cos (neg x))","(+ (cos (neg x)) (* 1/2 (* eps (sin (neg x)))))","(+ (cos (neg x)) (* eps (- (* -1/8 (* eps (cos (neg x)))) (* -1/2 (sin (neg x))))))","(+ (cos (neg x)) (* eps (- (* eps (+ (* -1/8 (cos (neg x))) (* -1/48 (* eps (sin (neg x)))))) (* -1/2 (sin (neg x))))))","(* eps (cos (* -1 x)))","(* eps (+ (cos (* -1 x)) (* 1/2 (* eps (sin (* -1 x))))))","(* eps (+ (cos (* -1 x)) (* eps (+ (* 1/2 (sin (* -1 x))) (* 2 (* eps (+ (* -1/16 (cos (* -1 x))) (* -1/48 (cos (* -1 x))))))))))","(* eps (+ (cos (* -1 x)) (* eps (+ (* 1/2 (sin (* -1 x))) (* eps (+ (* -1/24 (* eps (sin (* -1 x)))) (* 2 (+ (* -1/16 (cos (* -1 x))) (* -1/48 (cos (* -1 x)))))))))))","(* eps (+ 1 (* -1/24 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/1920 (pow eps 2)) 1/24))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/1920 (* -1/322560 (pow eps 2)))) 1/24))))","(* 1/2 eps)","(* eps (+ 1/2 (* -1/48 (pow eps 2))))","(* eps (+ 1/2 (* (pow eps 2) (- (* 1/3840 (pow eps 2)) 1/48))))","(* eps (+ 1/2 (* (pow eps 2) (- (* (pow eps 2) (+ 1/3840 (* -1/645120 (pow eps 2)))) 1/48))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x)))))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x)))))))))","(+ 1 (+ (* -1/2 (* eps x)) (* -1/2 (pow x 2))))","(* eps (+ 1 (* -1/2 (pow x 2))))","(* eps (+ 1 (+ (* -1/2 (* eps x)) (* -1/2 (pow x 2)))))","-1/48","(- (* 1/3840 (pow eps 2)) 1/48)","(- (* (pow eps 2) (+ 1/3840 (* -1/645120 (pow eps 2)))) 1/48)","(* eps (+ eps x))","(cos (* -1 x))","(+ (cos (* -1 x)) (* 1/2 (* eps (sin (* -1 x)))))","(+ (cos (* -1 x)) (* eps (- (* -1/8 (* eps (cos (* -1 x)))) (* -1/2 (sin (* -1 x))))))","(+ (cos (* -1 x)) (* eps (- (* eps (+ (* -1/8 (cos (* -1 x))) (* -1/48 (* eps (sin (* -1 x)))))) (* -1/2 (sin (* -1 x))))))","(cos (neg (+ x (* 1/2 eps))))","(* 2 (sin (* 1/2 eps)))","(sin (* 1/2 eps))","(* -1/2 (* (pow eps 2) (sin x)))","(* (pow eps 2) (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(* -1/2 (* eps (sin x)))","(* eps (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(* -1/2 (* eps x))","(* eps (+ (* -1/2 x) (+ (* -1/2 (/ (pow x 2) eps)) (/ 1 eps))))","(* -1/2 (* (pow eps 2) x))","(* (pow eps 2) (+ (* -1/2 x) (+ (* -1/2 (/ (pow x 2) eps)) (/ 1 eps))))","(* -1/645120 (pow eps 7))","(* (pow eps 7) (- (* 1/3840 (/ 1 (pow eps 2))) 1/645120))","(* (pow eps 7) (- (* 1/3840 (/ 1 (pow eps 2))) (+ 1/645120 (/ 1/48 (pow eps 4)))))","(* (pow eps 7) (- (+ (* 1/3840 (/ 1 (pow eps 2))) (* 1/2 (/ 1 (pow eps 6)))) (+ 1/645120 (/ 1/48 (pow eps 4)))))","(* -1/645120 (pow eps 4))","(* (pow eps 4) (- (* 1/3840 (/ 1 (pow eps 2))) 1/645120))","(* (pow eps 4) (- (* 1/3840 (/ 1 (pow eps 2))) (+ 1/645120 (/ 1/48 (pow eps 4)))))","(* (pow eps 2) (+ 1 (/ x eps)))","(* 2 (* (cos (* -1/2 (- (* 2 x) (* -1 eps)))) (sin (* 1/2 eps))))","(- (sin (- x (* -1 eps))) (sin x))","(* -1 (* eps (+ (* -1 (/ (cos x) eps)) (* 1/2 (sin x)))))","(* -1 (* eps (+ (* -1 (/ (+ 1 (* -1/2 (pow x 2))) eps)) (* 1/2 x))))","(* (pow eps 2) (+ (* -1 (/ (- (* 1/2 (pow x 2)) 1) eps)) (* -1/2 x)))","(* -1 (* (pow eps 7) (- 1/645120 (* 1/3840 (/ 1 (pow eps 2))))))","(* -1 (* (pow eps 7) (- (+ 1/645120 (/ 1/48 (pow eps 4))) (* 1/3840 (/ 1 (pow eps 2))))))","(* -1 (* (pow eps 7) (- (+ 1/645120 (/ 1/48 (pow eps 4))) (+ (* 1/3840 (/ 1 (pow eps 2))) (* 1/2 (/ 1 (pow eps 6)))))))","(cos (* -1/2 (- (* 2 x) (* -1 eps))))"]],"memory":[[-11071008,44946032]],"method":["egg-herbie"],"outputs":[["(cos (* -1/2 eps))","(cos.f64 (*.f64 #s(literal 1/2 binary64) eps))","(+ (cos (* -1/2 eps)) (* x (sin (* -1/2 eps))))","(fma.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) eps)) x (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(+ (cos (* -1/2 eps)) (* x (- (* -1/2 (* x (cos (* -1/2 eps)))) (* -1 (sin (* -1/2 eps))))))","(fma.f64 (fma.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)) (*.f64 #s(literal -1/2 binary64) x) (sin.f64 (*.f64 #s(literal -1/2 binary64) eps))) x (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(+ (cos (* -1/2 eps)) (* x (- (* x (+ (* -1/2 (cos (* -1/2 eps))) (* -1/6 (* x (sin (* -1/2 eps)))))) (* -1 (sin (* -1/2 eps))))))","(fma.f64 (fma.f64 (fma.f64 x (*.f64 #s(literal -1/6 binary64) x) #s(literal 1 binary64)) (sin.f64 (*.f64 #s(literal -1/2 binary64) eps)) (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)) (*.f64 #s(literal -1/2 binary64) x))) x (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps))))","(*.f64 (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(+ (* 2 (* x (* (sin (* -1/2 eps)) (sin (* 1/2 eps))))) (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) (fma.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) eps)) x (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)))) #s(literal 2 binary64))","(+ (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* -1 (* x (* (cos (* -1/2 eps)) (sin (* 1/2 eps))))) (* 2 (* (sin (* -1/2 eps)) (sin (* 1/2 eps)))))))","(fma.f64 (*.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) eps)) #s(literal 2 binary64)) (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) x) (*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) (cos.f64 (*.f64 #s(literal 1/2 binary64) eps))) (+.f64 #s(literal 2 binary64) (*.f64 x (neg.f64 x)))))","(+ (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* 2 (* (sin (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* -1 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* -1/3 (* x (* (sin (* -1/2 eps)) (sin (* 1/2 eps))))))))))","(fma.f64 (*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) (-.f64 (*.f64 (*.f64 #s(literal -1/3 binary64) x) (sin.f64 (*.f64 #s(literal -1/2 binary64) eps))) (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)))) x) x (*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) (fma.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) eps)) x (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)))) #s(literal 2 binary64)))","(sin eps)","(sin.f64 eps)","(+ (sin eps) (* x (- (cos eps) 1)))","(fma.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) x (sin.f64 eps))","(+ (sin eps) (* x (- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)))","(fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* x (+ 1/6 (* -1/6 (cos eps))))))) 1)))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 (cos.f64 eps) #s(literal -1/6 binary64) #s(literal 1/6 binary64)) x (*.f64 (sin.f64 eps) #s(literal -1/2 binary64))) x (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps))","eps","(+ eps (* -1/2 (* (pow eps 2) x)))","(*.f64 (fma.f64 (*.f64 x eps) #s(literal -1/2 binary64) #s(literal 1 binary64)) eps)","(+ eps (* x (+ (* -1/2 (* eps x)) (* -1/2 (pow eps 2)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps)","(+ eps (* x (+ (* -1/2 (pow eps 2)) (* x (+ (* -1/2 eps) (* 1/12 (* (pow eps 2) x)))))))","(fma.f64 (fma.f64 (*.f64 x #s(literal 1/12 binary64)) (*.f64 (*.f64 eps eps) x) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (+.f64 x eps))) x eps)","1","#s(literal 1 binary64)","(+ 1 (* -1/2 (* eps x)))","(fma.f64 (*.f64 x eps) #s(literal -1/2 binary64) #s(literal 1 binary64))","(+ 1 (* x (+ (* -1/2 eps) (* -1/2 x))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64))","(+ 1 (* x (+ (* -1/2 eps) (* x (- (* 1/12 (* eps x)) 1/2)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x #s(literal 1 binary64))","(* -1/2 x)","(*.f64 #s(literal -1/2 binary64) x)","(+ eps (* -1/2 (* eps (pow x 2))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64)) eps)","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* 1/24 (* eps (pow x 2))))))","(fma.f64 (*.f64 eps (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) (*.f64 x x) eps)","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* (pow x 2) (+ (* -1/720 (* eps (pow x 2))) (* 1/24 eps))))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 eps (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64))) (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64)) eps))","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(pow eps 2)","(*.f64 eps eps)","(+ (* eps x) (pow eps 2))","(*.f64 (+.f64 x eps) eps)","(cos (- (* -1/2 eps) x))","(cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))","(* 2 (* (cos (* -1/2 (+ eps (* 2 x)))) (sin (* 1/2 eps))))","(*.f64 (*.f64 (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) #s(literal 2 binary64)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(- (sin (+ eps x)) (sin x))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(* eps (+ (cos x) (* -1/2 (* eps (sin x)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps)","(+ (cos x) (* -1/2 (* eps (sin x))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))","(* -1/2 (pow x 2))","(*.f64 (*.f64 x x) #s(literal -1/2 binary64))","(* (pow x 2) (- (* -1/2 (/ eps x)) 1/2))","(*.f64 (*.f64 (fma.f64 (/.f64 eps x) #s(literal -1/2 binary64) #s(literal -1/2 binary64)) x) x)","(* (pow x 2) (- (+ (* -1/2 (/ eps x)) (/ 1 (pow x 2))) 1/2))","(*.f64 (-.f64 (/.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 #s(literal 1 binary64) x)) x) #s(literal 1/2 binary64)) (*.f64 x x))","(* -1/2 (* eps (pow x 2)))","(*.f64 (*.f64 (*.f64 x x) #s(literal -1/2 binary64)) eps)","(* (pow x 2) (+ (* -1/2 eps) (* -1/2 (/ (pow eps 2) x))))","(*.f64 (*.f64 (fma.f64 eps (/.f64 eps x) eps) #s(literal -1/2 binary64)) (*.f64 x x))","(* (pow x 2) (+ (* -1/2 eps) (+ (* -1/2 (/ (pow eps 2) x)) (/ eps (pow x 2)))))","(*.f64 (*.f64 (fma.f64 (fma.f64 eps (/.f64 eps x) eps) #s(literal -1/2 binary64) (/.f64 (/.f64 eps x) x)) x) x)","(* eps (cos x))","(*.f64 (cos.f64 x) eps)","(cos x)","(cos.f64 x)","(* -1/720 (pow x 6))","(*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1/720 binary64))","(* (pow x 6) (- (* 1/24 (/ 1 (pow x 2))) 1/720))","(*.f64 (-.f64 (/.f64 #s(literal 1/24 binary64) (*.f64 x x)) #s(literal 1/720 binary64)) (pow.f64 x #s(literal 6 binary64)))","(* (pow x 6) (- (* 1/24 (/ 1 (pow x 2))) (+ 1/720 (/ 1/2 (pow x 4)))))","(*.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/24 binary64) (*.f64 x x)) #s(literal 1/720 binary64)) (/.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 x #s(literal 6 binary64)))","(* (pow x 6) (- (+ (* 1/24 (/ 1 (pow x 2))) (/ 1 (pow x 6))) (+ 1/720 (/ 1/2 (pow x 4)))))","(*.f64 (+.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (-.f64 (-.f64 (/.f64 #s(literal 1/24 binary64) (*.f64 x x)) #s(literal 1/720 binary64)) (/.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal 4 binary64))))) (pow.f64 x #s(literal 6 binary64)))","(* eps x)","(*.f64 x eps)","(* x (+ eps (/ (pow eps 2) x)))","(*.f64 (fma.f64 eps (/.f64 eps x) eps) x)","(cos (* -1/2 (+ eps (* 2 x))))","(cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))","(cos (+ (* -1 x) (* -1/2 eps)))","(cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))","(* 2 (* (cos (* -1/2 (- eps (* -2 x)))) (sin (* 1/2 eps))))","(*.f64 (*.f64 (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) #s(literal 2 binary64)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(- (sin (- eps (* -1 x))) (sin x))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(* (pow x 2) (- (* -1 (/ (- (* 1/2 eps) (/ 1 x)) x)) 1/2))","(*.f64 (-.f64 (/.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 #s(literal 1 binary64) x)) x) #s(literal 1/2 binary64)) (*.f64 x x))","(* (pow x 2) (+ (* -1 (/ (+ (* -1 (/ eps x)) (* 1/2 (pow eps 2))) x)) (* -1/2 eps)))","(*.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/2 binary64) (/.f64 eps x)) x)) x) x)","(* -1 (* x (+ (* -1 eps) (* -1 (/ (pow eps 2) x)))))","(*.f64 (fma.f64 eps (/.f64 eps x) eps) x)","(cos (* -1/2 (- eps (* -2 x))))","(cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))","(cos (neg x))","(cos.f64 x)","(+ (cos (neg x)) (* 1/2 (* eps (sin (neg x)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))","(+ (cos (neg x)) (* eps (- (* -1/8 (* eps (cos (neg x)))) (* -1/2 (sin (neg x))))))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) (*.f64 (cos.f64 x) eps) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) eps (cos.f64 x))","(+ (cos (neg x)) (* eps (- (* eps (+ (* -1/8 (cos (neg x))) (* -1/48 (* eps (sin (neg x)))))) (* -1/2 (sin (neg x))))))","(fma.f64 (fma.f64 (neg.f64 (sin.f64 x)) (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) (*.f64 #s(literal -1/8 binary64) (*.f64 (cos.f64 x) eps))) eps (cos.f64 x))","(* eps (cos (* -1 x)))","(*.f64 (cos.f64 x) eps)","(* eps (+ (cos (* -1 x)) (* 1/2 (* eps (sin (* -1 x))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps)","(* eps (+ (cos (* -1 x)) (* eps (+ (* 1/2 (sin (* -1 x))) (* 2 (* eps (+ (* -1/16 (cos (* -1 x))) (* -1/48 (cos (* -1 x))))))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) eps (cos.f64 x)) eps)","(* eps (+ (cos (* -1 x)) (* eps (+ (* 1/2 (sin (* -1 x))) (* eps (+ (* -1/24 (* eps (sin (* -1 x)))) (* 2 (+ (* -1/16 (cos (* -1 x))) (* -1/48 (cos (* -1 x)))))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/24 binary64) eps) (neg.f64 (sin.f64 x)) (*.f64 #s(literal -1/6 binary64) (cos.f64 x))) eps (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) eps (cos.f64 x)) eps)","(* eps (+ 1 (* -1/24 (pow eps 2))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/24 binary64) eps)","(* eps (+ 1 (* (pow eps 2) (- (* 1/1920 (pow eps 2)) 1/24))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 #s(literal 1/1920 binary64) (*.f64 eps eps) #s(literal -1/24 binary64)) eps)","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/1920 (* -1/322560 (pow eps 2)))) 1/24))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal -1/322560 binary64) (*.f64 eps eps) #s(literal 1/1920 binary64)) (*.f64 eps eps) #s(literal -1/24 binary64)) eps)","(* 1/2 eps)","(*.f64 #s(literal 1/2 binary64) eps)","(* eps (+ 1/2 (* -1/48 (pow eps 2))))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) eps)","(* eps (+ 1/2 (* (pow eps 2) (- (* 1/3840 (pow eps 2)) 1/48))))","(*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/3840 binary64) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(* eps (+ 1/2 (* (pow eps 2) (- (* (pow eps 2) (+ 1/3840 (* -1/645120 (pow eps 2)))) 1/48))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) eps (cos.f64 x)) eps)","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x)))))))))","(*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 eps (*.f64 #s(literal 1/24 binary64) eps) #s(literal -1/2 binary64)) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (cos.f64 x)) eps)","(+ 1 (+ (* -1/2 (* eps x)) (* -1/2 (pow x 2))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64))","(* eps (+ 1 (* -1/2 (pow x 2))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64)) eps)","(* eps (+ 1 (+ (* -1/2 (* eps x)) (* -1/2 (pow x 2)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps)","-1/48","#s(literal -1/48 binary64)","(- (* 1/3840 (pow eps 2)) 1/48)","(fma.f64 (*.f64 eps eps) #s(literal 1/3840 binary64) #s(literal -1/48 binary64))","(- (* (pow eps 2) (+ 1/3840 (* -1/645120 (pow eps 2)))) 1/48)","(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64))","(* eps (+ eps x))","(*.f64 (+.f64 x eps) eps)","(cos (* -1 x))","(cos.f64 x)","(+ (cos (* -1 x)) (* 1/2 (* eps (sin (* -1 x)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))","(+ (cos (* -1 x)) (* eps (- (* -1/8 (* eps (cos (* -1 x)))) (* -1/2 (sin (* -1 x))))))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) (*.f64 (cos.f64 x) eps) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) eps (cos.f64 x))","(+ (cos (* -1 x)) (* eps (- (* eps (+ (* -1/8 (cos (* -1 x))) (* -1/48 (* eps (sin (* -1 x)))))) (* -1/2 (sin (* -1 x))))))","(fma.f64 (fma.f64 (neg.f64 (sin.f64 x)) (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) (*.f64 #s(literal -1/8 binary64) (*.f64 (cos.f64 x) eps))) eps (cos.f64 x))","(cos (neg (+ x (* 1/2 eps))))","(cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))","(* 2 (sin (* 1/2 eps)))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64))","(sin (* 1/2 eps))","(sin.f64 (*.f64 #s(literal 1/2 binary64) eps))","(* -1/2 (* (pow eps 2) (sin x)))","(*.f64 (*.f64 (*.f64 (sin.f64 x) eps) eps) #s(literal -1/2 binary64))","(* (pow eps 2) (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (/.f64 (cos.f64 x) eps)) (*.f64 eps eps))","(* -1/2 (* eps (sin x)))","(*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)","(* eps (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (/.f64 (cos.f64 x) eps)) eps)","(* -1/2 (* eps x))","(*.f64 (*.f64 x eps) #s(literal -1/2 binary64))","(* eps (+ (* -1/2 x) (+ (* -1/2 (/ (pow x 2) eps)) (/ 1 eps))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 x (/.f64 x eps) x)) eps #s(literal 1 binary64))","(* -1/2 (* (pow eps 2) x))","(*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) x)","(* (pow eps 2) (+ (* -1/2 x) (+ (* -1/2 (/ (pow x 2) eps)) (/ 1 eps))))","(fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 x (/.f64 x eps) x)) eps) eps eps)","(* -1/645120 (pow eps 7))","(*.f64 (pow.f64 eps #s(literal 7 binary64)) #s(literal -1/645120 binary64))","(* (pow eps 7) (- (* 1/3840 (/ 1 (pow eps 2))) 1/645120))","(*.f64 (-.f64 (/.f64 #s(literal 1/3840 binary64) (*.f64 eps eps)) #s(literal 1/645120 binary64)) (pow.f64 eps #s(literal 7 binary64)))","(* (pow eps 7) (- (* 1/3840 (/ 1 (pow eps 2))) (+ 1/645120 (/ 1/48 (pow eps 4)))))","(*.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/3840 binary64) (*.f64 eps eps)) #s(literal 1/645120 binary64)) (/.f64 #s(literal 1/48 binary64) (pow.f64 eps #s(literal 4 binary64)))) (pow.f64 eps #s(literal 7 binary64)))","(* (pow eps 7) (- (+ (* 1/3840 (/ 1 (pow eps 2))) (* 1/2 (/ 1 (pow eps 6)))) (+ 1/645120 (/ 1/48 (pow eps 4)))))","(*.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 eps #s(literal 6 binary64))) (/.f64 #s(literal 1/3840 binary64) (*.f64 eps eps))) (-.f64 #s(literal 1/645120 binary64) (/.f64 #s(literal -1/48 binary64) (pow.f64 eps #s(literal 4 binary64))))) (pow.f64 eps #s(literal 7 binary64)))","(* -1/645120 (pow eps 4))","(*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/645120 binary64))","(* (pow eps 4) (- (* 1/3840 (/ 1 (pow eps 2))) 1/645120))","(*.f64 (pow.f64 eps #s(literal 4 binary64)) (-.f64 (/.f64 #s(literal 1/3840 binary64) (*.f64 eps eps)) #s(literal 1/645120 binary64)))","(* (pow eps 4) (- (* 1/3840 (/ 1 (pow eps 2))) (+ 1/645120 (/ 1/48 (pow eps 4)))))","(*.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/3840 binary64) (*.f64 eps eps)) #s(literal 1/645120 binary64)) (/.f64 #s(literal 1/48 binary64) (pow.f64 eps #s(literal 4 binary64)))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 2) (+ 1 (/ x eps)))","(*.f64 (+.f64 x eps) eps)","(* 2 (* (cos (* -1/2 (- (* 2 x) (* -1 eps)))) (sin (* 1/2 eps))))","(*.f64 (*.f64 (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) #s(literal 2 binary64)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(- (sin (- x (* -1 eps))) (sin x))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(* -1 (* eps (+ (* -1 (/ (cos x) eps)) (* 1/2 (sin x)))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (/.f64 (cos.f64 x) eps)) eps)","(* -1 (* eps (+ (* -1 (/ (+ 1 (* -1/2 (pow x 2))) eps)) (* 1/2 x))))","(fma.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64)) eps) eps (*.f64 (*.f64 x eps) #s(literal -1/2 binary64)))","(* (pow eps 2) (+ (* -1 (/ (- (* 1/2 (pow x 2)) 1) eps)) (* -1/2 x)))","(*.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x #s(literal -1 binary64)) (neg.f64 eps))) eps) eps)","(* -1 (* (pow eps 7) (- 1/645120 (* 1/3840 (/ 1 (pow eps 2))))))","(*.f64 (-.f64 (/.f64 #s(literal 1/3840 binary64) (*.f64 eps eps)) #s(literal 1/645120 binary64)) (pow.f64 eps #s(literal 7 binary64)))","(* -1 (* (pow eps 7) (- (+ 1/645120 (/ 1/48 (pow eps 4))) (* 1/3840 (/ 1 (pow eps 2))))))","(*.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/3840 binary64) (*.f64 eps eps)) #s(literal 1/645120 binary64)) (/.f64 #s(literal 1/48 binary64) (pow.f64 eps #s(literal 4 binary64)))) (pow.f64 eps #s(literal 7 binary64)))","(* -1 (* (pow eps 7) (- (+ 1/645120 (/ 1/48 (pow eps 4))) (+ (* 1/3840 (/ 1 (pow eps 2))) (* 1/2 (/ 1 (pow eps 6)))))))","(*.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 eps #s(literal 6 binary64))) (/.f64 #s(literal 1/3840 binary64) (*.f64 eps eps))) (-.f64 #s(literal 1/645120 binary64) (/.f64 #s(literal -1/48 binary64) (pow.f64 eps #s(literal 4 binary64))))) (pow.f64 eps #s(literal 7 binary64)))","(cos (* -1/2 (- (* 2 x) (* -1 eps))))","(cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))"]],"stop":[["iter limit",1],["node limit",1]],"time":298.919921875,"type":"simplify"},{"count":[[25,474]],"egraph":[[0,8841,498,0.079643749],[2,3230,507,0.037393808],[1,402,507,0.010434635],[0,115,507,0.003134396],[0,77,519,0.000631965]],"inputs":[["(cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x))))","(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64))","#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x eps) #s(literal -1/2 binary64)))) eps))","(*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x eps) #s(literal -1/2 binary64)))) eps)","#s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x eps) #s(literal -1/2 binary64))))","#s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x eps) #s(literal -1/2 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 x eps)) eps)))","#s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 x eps)) eps))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 x eps)) eps)","(*.f64 #s(literal -1/2 binary64) x)","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","(*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps)","#s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64))","#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","(*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(*.f64 eps (+.f64 x eps))","#s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64))","(cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64)))"]],"memory":[[7414736,61997760]],"outputs":[["(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal -1/2 binary64))) (cos.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal -1/2 binary64))) (sin.f64 x)) #s(literal 2 binary64)))) (neg.f64 (cos.f64 (fma.f64 eps #s(literal -1/2 binary64) x))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal -1/2 binary64))) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal -1/2 binary64))) (sin.f64 x)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal -1/2 binary64))) (cos.f64 x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal -1/2 binary64))) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal -1/2 binary64))) (cos.f64 x)) (*.f64 (sin.f64 (*.f64 eps #s(literal -1/2 binary64))) (sin.f64 x)))))))","(/.f64 (fma.f64 (-.f64 (cos.f64 (-.f64 (*.f64 eps #s(literal -1/2 binary64)) x)) (cos.f64 (fma.f64 eps #s(literal -1/2 binary64) x))) #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) (+.f64 (cos.f64 (fma.f64 eps #s(literal -1/2 binary64) x)) (cos.f64 (-.f64 (*.f64 eps #s(literal -1/2 binary64)) x))))) #s(literal 4 binary64))","(/.f64 (fma.f64 (+.f64 (cos.f64 (fma.f64 eps #s(literal -1/2 binary64) x)) (cos.f64 (-.f64 (*.f64 eps #s(literal -1/2 binary64)) x))) #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) (-.f64 (cos.f64 (-.f64 (*.f64 eps #s(literal -1/2 binary64)) x)) (cos.f64 (fma.f64 eps #s(literal -1/2 binary64) x))))) #s(literal 4 binary64))","(/.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal -1/2 binary64))) (cos.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal -1/2 binary64))) (sin.f64 x)) #s(literal 2 binary64))) (cos.f64 (fma.f64 eps #s(literal -1/2 binary64) x)))","(/.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal -1/2 binary64))) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal -1/2 binary64))) (sin.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal -1/2 binary64))) (cos.f64 x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal -1/2 binary64))) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal -1/2 binary64))) (cos.f64 x)) (*.f64 (sin.f64 (*.f64 eps #s(literal -1/2 binary64))) (sin.f64 x))))))","(fma.f64 (cos.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 eps eps)) (fma.f64 eps #s(literal -1/2 binary64) x))) (cos.f64 (/.f64 (*.f64 x x) (fma.f64 eps #s(literal -1/2 binary64) x))) (*.f64 (sin.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 eps eps)) (fma.f64 eps #s(literal -1/2 binary64) x))) (sin.f64 (/.f64 (*.f64 x x) (fma.f64 eps #s(literal -1/2 binary64) x)))))","(fma.f64 (cos.f64 (/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/8 binary64)) (fma.f64 #s(literal 1/4 binary64) (*.f64 eps eps) (*.f64 x (fma.f64 eps #s(literal -1/2 binary64) x))))) (cos.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/4 binary64) (*.f64 eps eps) (*.f64 x (fma.f64 eps #s(literal -1/2 binary64) x))))) (*.f64 (sin.f64 (/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/8 binary64)) (fma.f64 #s(literal 1/4 binary64) (*.f64 eps eps) (*.f64 x (fma.f64 eps #s(literal -1/2 binary64) x))))) (sin.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/4 binary64) (*.f64 eps eps) (*.f64 x (fma.f64 eps #s(literal -1/2 binary64) x)))))))","(fma.f64 (sin.f64 (*.f64 eps #s(literal -1/2 binary64))) (sin.f64 x) (*.f64 (cos.f64 (*.f64 eps #s(literal -1/2 binary64))) (cos.f64 x)))","(fma.f64 (cos.f64 (*.f64 eps #s(literal -1/2 binary64))) (cos.f64 x) (*.f64 (sin.f64 (*.f64 eps #s(literal -1/2 binary64))) (sin.f64 x)))","(fma.f64 (cos.f64 x) (cos.f64 (*.f64 eps #s(literal -1/2 binary64))) (*.f64 (sin.f64 (*.f64 eps #s(literal -1/2 binary64))) (sin.f64 x)))","(fma.f64 (sin.f64 x) (sin.f64 (*.f64 eps #s(literal -1/2 binary64))) (*.f64 (cos.f64 (*.f64 eps #s(literal -1/2 binary64))) (cos.f64 x)))","(-.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal -1/2 binary64))) (cos.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 (*.f64 eps #s(literal -1/2 binary64)))))","(-.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal -1/2 binary64))) (cos.f64 x)) (*.f64 (sin.f64 (*.f64 eps #s(literal -1/2 binary64))) (neg.f64 (sin.f64 x))))","(cos.f64 (-.f64 (*.f64 eps #s(literal -1/2 binary64)) x))","(+.f64 (*.f64 (cos.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 eps eps)) (fma.f64 eps #s(literal -1/2 binary64) x))) (cos.f64 (/.f64 (*.f64 x x) (fma.f64 eps #s(literal -1/2 binary64) x)))) (*.f64 (sin.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 eps eps)) (fma.f64 eps #s(literal -1/2 binary64) x))) (sin.f64 (/.f64 (*.f64 x x) (fma.f64 eps #s(literal -1/2 binary64) x)))))","(+.f64 (*.f64 (cos.f64 (/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/8 binary64)) (fma.f64 #s(literal 1/4 binary64) (*.f64 eps eps) (*.f64 x (fma.f64 eps #s(literal -1/2 binary64) x))))) (cos.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/4 binary64) (*.f64 eps eps) (*.f64 x (fma.f64 eps #s(literal -1/2 binary64) x)))))) (*.f64 (sin.f64 (/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/8 binary64)) (fma.f64 #s(literal 1/4 binary64) (*.f64 eps eps) (*.f64 x (fma.f64 eps #s(literal -1/2 binary64) x))))) (sin.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/4 binary64) (*.f64 eps eps) (*.f64 x (fma.f64 eps #s(literal -1/2 binary64) x)))))))","(+.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal -1/2 binary64))) (sin.f64 x)) (*.f64 (cos.f64 (*.f64 eps #s(literal -1/2 binary64))) (cos.f64 x)))","(+.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal -1/2 binary64))) (cos.f64 x)) (*.f64 (sin.f64 (*.f64 eps #s(literal -1/2 binary64))) (sin.f64 x)))","(*.f64 (*.f64 #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (-.f64 (*.f64 eps #s(literal -1/2 binary64)) x))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(literal 2 binary64))","(*.f64 (*.f64 #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (-.f64 (*.f64 eps #s(literal -1/2 binary64)) x))) #s(literal 2 binary64)) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)))","(*.f64 #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (-.f64 (*.f64 eps #s(literal -1/2 binary64)) x))) (*.f64 #s(literal 2 binary64) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))))","(*.f64 (*.f64 #s(literal 2 binary64) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (-.f64 (*.f64 eps #s(literal -1/2 binary64)) x))))","(*.f64 #s(literal 2 binary64) (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (-.f64 (*.f64 eps #s(literal -1/2 binary64)) x)))))","(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) (*.f64 #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (-.f64 (*.f64 eps #s(literal -1/2 binary64)) x))) #s(literal 2 binary64)))","(*.f64 #s(literal 2 binary64) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)))","(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64))","#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps))) eps))","(*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps))) eps)","(*.f64 eps #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps))))) (neg.f64 (neg.f64 eps)))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps))))) (neg.f64 (*.f64 eps eps)))","(/.f64 (neg.f64 (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps))) (neg.f64 (*.f64 eps eps)))) (neg.f64 (neg.f64 eps)))","(/.f64 (neg.f64 (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps))) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 eps eps)))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps)))) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps)))) (*.f64 eps eps))","(/.f64 (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps))) (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(/.f64 (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps))) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(fma.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps))) #s(literal 0 binary64) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps))) eps))","(fma.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps))) eps (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps)))))","(fma.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps))) eps (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps))) #s(literal 0 binary64)))","(fma.f64 #s(literal 0 binary64) #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps))) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps))) eps))","(fma.f64 eps #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps))) (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps)))))","(fma.f64 eps #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps))) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps))) #s(literal 0 binary64)))","(+.f64 (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps)))) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps))) eps))","(+.f64 (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps))) #s(literal 0 binary64)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps))) eps))","(+.f64 (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps))) eps) (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps)))))","(+.f64 (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps))) eps) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps))) #s(literal 0 binary64)))","#s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps)))","#s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 (+.f64 x eps) eps) (*.f64 x #s(literal -1/2 binary64)) eps)))","#s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 (+.f64 x eps) eps) (*.f64 x #s(literal -1/2 binary64)) eps))","(*.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (+.f64 x eps) x) eps) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 eps) eps)) (pow.f64 (fma.f64 (*.f64 (*.f64 (+.f64 x eps) eps) #s(literal -1/2 binary64)) x (neg.f64 eps)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (+.f64 x eps) x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 (*.f64 (*.f64 (+.f64 x eps) eps) #s(literal -1/2 binary64)) x)) (*.f64 (pow.f64 (*.f64 (*.f64 (+.f64 x eps) x) eps) #s(literal 2 binary64)) #s(literal 1/4 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (+.f64 x eps) eps) #s(literal -1/2 binary64)) x (neg.f64 eps)) (fma.f64 (pow.f64 (*.f64 (*.f64 (+.f64 x eps) x) eps) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 eps) eps))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 eps (-.f64 eps (*.f64 (*.f64 (*.f64 (+.f64 x eps) eps) #s(literal -1/2 binary64)) x)) (*.f64 (pow.f64 (*.f64 (*.f64 (+.f64 x eps) x) eps) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (fma.f64 (pow.f64 (*.f64 (*.f64 (+.f64 x eps) x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 eps #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (*.f64 eps eps) (*.f64 (pow.f64 (*.f64 (*.f64 (+.f64 x eps) x) eps) #s(literal 2 binary64)) #s(literal 1/4 binary64)))) (neg.f64 (-.f64 eps (*.f64 (*.f64 (*.f64 (+.f64 x eps) eps) #s(literal -1/2 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (+.f64 x eps) x) eps) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 eps) eps)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 (+.f64 x eps) eps) #s(literal -1/2 binary64)) x (neg.f64 eps)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (+.f64 x eps) x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 eps #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 eps (-.f64 eps (*.f64 (*.f64 (*.f64 (+.f64 x eps) eps) #s(literal -1/2 binary64)) x)) (*.f64 (pow.f64 (*.f64 (*.f64 (+.f64 x eps) x) eps) #s(literal 2 binary64)) #s(literal 1/4 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (+.f64 x eps) x) eps) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (fma.f64 (*.f64 (*.f64 (+.f64 x eps) eps) #s(literal -1/2 binary64)) x (neg.f64 eps))) (*.f64 (fma.f64 (*.f64 (*.f64 (+.f64 x eps) eps) #s(literal -1/2 binary64)) x (neg.f64 eps)) (*.f64 eps eps))) (*.f64 (fma.f64 (*.f64 (*.f64 (+.f64 x eps) eps) #s(literal -1/2 binary64)) x (neg.f64 eps)) (fma.f64 (*.f64 (*.f64 (+.f64 x eps) eps) #s(literal -1/2 binary64)) x (neg.f64 eps))))","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps) (*.f64 (+.f64 x eps) (-.f64 x eps))) (neg.f64 (neg.f64 eps)) (*.f64 (-.f64 x eps) (neg.f64 (neg.f64 (*.f64 eps eps))))) (*.f64 (-.f64 x eps) (neg.f64 (neg.f64 eps))))","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps) (*.f64 (+.f64 x eps) (-.f64 x eps))) (neg.f64 (*.f64 eps eps)) (*.f64 (-.f64 x eps) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))) (*.f64 (-.f64 x eps) (neg.f64 (*.f64 eps eps))))","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps) (*.f64 (+.f64 x eps) (-.f64 x eps))) (neg.f64 eps) (*.f64 (-.f64 x eps) (neg.f64 (*.f64 eps eps)))) (*.f64 (-.f64 x eps) (neg.f64 eps)))","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps) (*.f64 (+.f64 x eps) (-.f64 x eps))) (*.f64 eps eps) (*.f64 (-.f64 x eps) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (-.f64 x eps) (*.f64 eps eps)))","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps) (*.f64 (+.f64 x eps) (-.f64 x eps))) (/.f64 (neg.f64 eps) (neg.f64 (*.f64 eps eps))) (*.f64 (-.f64 x eps) #s(literal 1 binary64))) (*.f64 (-.f64 x eps) (/.f64 (neg.f64 eps) (neg.f64 (*.f64 eps eps)))))","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps) (*.f64 (+.f64 x eps) (-.f64 x eps))) (pow.f64 eps #s(literal -1 binary64)) (*.f64 (-.f64 x eps) #s(literal 1 binary64))) (*.f64 (-.f64 x eps) (pow.f64 eps #s(literal -1 binary64))))","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps) (*.f64 (+.f64 x eps) (-.f64 x eps))) (-.f64 eps #s(literal 0 binary64)) (*.f64 (-.f64 x eps) (*.f64 eps eps))) (*.f64 (-.f64 x eps) (-.f64 eps #s(literal 0 binary64))))","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (neg.f64 eps)) (*.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)) (neg.f64 (neg.f64 (*.f64 eps eps))))) (*.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)) (neg.f64 (neg.f64 eps))))","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (*.f64 eps eps)) (*.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))) (*.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)) (neg.f64 (*.f64 eps eps))))","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 eps) (*.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)) (neg.f64 (*.f64 eps eps)))) (*.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)) (neg.f64 eps)))","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 eps eps) (*.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)) (*.f64 eps eps)))","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (neg.f64 eps) (neg.f64 (*.f64 eps eps))) (*.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)) #s(literal 1 binary64))) (*.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)) (/.f64 (neg.f64 eps) (neg.f64 (*.f64 eps eps)))))","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 eps #s(literal -1 binary64)) (*.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)) #s(literal 1 binary64))) (*.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)) (pow.f64 eps #s(literal -1 binary64))))","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (-.f64 eps #s(literal 0 binary64)) (*.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)) (*.f64 eps eps))) (*.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)) (-.f64 eps #s(literal 0 binary64))))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (*.f64 eps eps))) (-.f64 x eps) (*.f64 (neg.f64 (neg.f64 eps)) (*.f64 (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps) (*.f64 (+.f64 x eps) (-.f64 x eps))))) (*.f64 (neg.f64 (neg.f64 eps)) (-.f64 x eps)))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (*.f64 eps eps))) (fma.f64 eps (-.f64 eps x) (*.f64 x x)) (*.f64 (neg.f64 (neg.f64 eps)) (*.f64 (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (neg.f64 (neg.f64 eps)) (fma.f64 eps (-.f64 eps x) (*.f64 x x))))","(/.f64 (fma.f64 (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (-.f64 x eps) (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps) (*.f64 (+.f64 x eps) (-.f64 x eps))))) (*.f64 (neg.f64 (*.f64 eps eps)) (-.f64 x eps)))","(/.f64 (fma.f64 (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (fma.f64 eps (-.f64 eps x) (*.f64 x x)) (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (neg.f64 (*.f64 eps eps)) (fma.f64 eps (-.f64 eps x) (*.f64 x x))))","(/.f64 (fma.f64 (neg.f64 (*.f64 eps eps)) (-.f64 x eps) (*.f64 (neg.f64 eps) (*.f64 (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps) (*.f64 (+.f64 x eps) (-.f64 x eps))))) (*.f64 (neg.f64 eps) (-.f64 x eps)))","(/.f64 (fma.f64 (neg.f64 (*.f64 eps eps)) (fma.f64 eps (-.f64 eps x) (*.f64 x x)) (*.f64 (neg.f64 eps) (*.f64 (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (neg.f64 eps) (fma.f64 eps (-.f64 eps x) (*.f64 x x))))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 x eps) (*.f64 (*.f64 eps eps) (*.f64 (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps) (*.f64 (+.f64 x eps) (-.f64 x eps))))) (*.f64 (*.f64 eps eps) (-.f64 x eps)))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 eps (-.f64 eps x) (*.f64 x x)) (*.f64 (*.f64 eps eps) (*.f64 (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (*.f64 eps eps) (fma.f64 eps (-.f64 eps x) (*.f64 x x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (-.f64 x eps) (*.f64 (/.f64 (neg.f64 eps) (neg.f64 (*.f64 eps eps))) (*.f64 (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps) (*.f64 (+.f64 x eps) (-.f64 x eps))))) (*.f64 (/.f64 (neg.f64 eps) (neg.f64 (*.f64 eps eps))) (-.f64 x eps)))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 eps (-.f64 eps x) (*.f64 x x)) (*.f64 (/.f64 (neg.f64 eps) (neg.f64 (*.f64 eps eps))) (*.f64 (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (/.f64 (neg.f64 eps) (neg.f64 (*.f64 eps eps))) (fma.f64 eps (-.f64 eps x) (*.f64 x x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (-.f64 x eps) (*.f64 (pow.f64 eps #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps) (*.f64 (+.f64 x eps) (-.f64 x eps))))) (*.f64 (pow.f64 eps #s(literal -1 binary64)) (-.f64 x eps)))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 eps (-.f64 eps x) (*.f64 x x)) (*.f64 (pow.f64 eps #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (pow.f64 eps #s(literal -1 binary64)) (fma.f64 eps (-.f64 eps x) (*.f64 x x))))","(/.f64 (fma.f64 (*.f64 eps eps) (-.f64 x eps) (*.f64 (-.f64 eps #s(literal 0 binary64)) (*.f64 (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps) (*.f64 (+.f64 x eps) (-.f64 x eps))))) (*.f64 (-.f64 eps #s(literal 0 binary64)) (-.f64 x eps)))","(/.f64 (fma.f64 (*.f64 eps eps) (fma.f64 eps (-.f64 eps x) (*.f64 x x)) (*.f64 (-.f64 eps #s(literal 0 binary64)) (*.f64 (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (-.f64 eps #s(literal 0 binary64)) (fma.f64 eps (-.f64 eps x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 eps eps) (*.f64 (pow.f64 (*.f64 (*.f64 (+.f64 x eps) x) eps) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (-.f64 eps (*.f64 (*.f64 (*.f64 (+.f64 x eps) eps) #s(literal -1/2 binary64)) x)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (+.f64 x eps) x) eps) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 eps) eps))) (neg.f64 (fma.f64 (*.f64 (*.f64 (+.f64 x eps) eps) #s(literal -1/2 binary64)) x (neg.f64 eps))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (+.f64 x eps) x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 eps eps (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (+.f64 x eps) x) eps) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps) (*.f64 (+.f64 x eps) eps))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (+.f64 x eps) x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 eps (-.f64 eps (*.f64 (*.f64 (*.f64 (+.f64 x eps) eps) #s(literal -1/2 binary64)) x)) (*.f64 (pow.f64 (*.f64 (*.f64 (+.f64 x eps) x) eps) #s(literal 2 binary64)) #s(literal 1/4 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (+.f64 x eps) eps) #s(literal -1/2 binary64)) x (neg.f64 eps)) (fma.f64 (pow.f64 (*.f64 (*.f64 (+.f64 x eps) x) eps) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 eps) eps)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 eps (-.f64 eps (*.f64 (*.f64 (*.f64 (+.f64 x eps) eps) #s(literal -1/2 binary64)) x)) (*.f64 (pow.f64 (*.f64 (*.f64 (+.f64 x eps) x) eps) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (fma.f64 (pow.f64 (*.f64 (*.f64 (+.f64 x eps) x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 eps #s(literal 3 binary64))))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (+.f64 x eps) x) eps) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 eps) eps)) (fma.f64 (*.f64 (*.f64 (+.f64 x eps) eps) #s(literal -1/2 binary64)) x (neg.f64 eps)))","(/.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (+.f64 x eps) x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 eps eps (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (+.f64 x eps) x) eps) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps) (*.f64 (+.f64 x eps) eps)))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (+.f64 x eps) x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 eps (-.f64 eps (*.f64 (*.f64 (*.f64 (+.f64 x eps) eps) #s(literal -1/2 binary64)) x)) (*.f64 (pow.f64 (*.f64 (*.f64 (+.f64 x eps) x) eps) #s(literal 2 binary64)) #s(literal 1/4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (*.f64 (+.f64 x eps) eps) #s(literal -1/2 binary64)) x (neg.f64 eps)) (fma.f64 (pow.f64 (*.f64 (*.f64 (+.f64 x eps) x) eps) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 eps) eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 eps (-.f64 eps (*.f64 (*.f64 (*.f64 (+.f64 x eps) eps) #s(literal -1/2 binary64)) x)) (*.f64 (pow.f64 (*.f64 (*.f64 (+.f64 x eps) x) eps) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (fma.f64 (pow.f64 (*.f64 (*.f64 (+.f64 x eps) x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 eps #s(literal 3 binary64)))))","(fma.f64 (pow.f64 (neg.f64 (*.f64 eps eps)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 (*.f64 (+.f64 x eps) eps) #s(literal -1/2 binary64)) x)))","(fma.f64 (pow.f64 (neg.f64 (*.f64 eps eps)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (*.f64 (+.f64 x eps) eps) #s(literal -1/2 binary64)) x))","(fma.f64 (pow.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 (*.f64 (+.f64 x eps) eps) #s(literal -1/2 binary64)) x)))","(fma.f64 (pow.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (*.f64 (+.f64 x eps) eps) #s(literal -1/2 binary64)) x))","(fma.f64 (*.f64 (*.f64 (+.f64 x eps) eps) #s(literal -1/2 binary64)) x eps)","(fma.f64 (*.f64 (*.f64 (+.f64 x eps) x) eps) #s(literal -1/2 binary64) eps)","(fma.f64 (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps) (+.f64 x eps) eps)","(fma.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (+.f64 x eps) x) eps) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 eps) eps)) (pow.f64 (fma.f64 (*.f64 (*.f64 (+.f64 x eps) eps) #s(literal -1/2 binary64)) x (neg.f64 eps)) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (neg.f64 (*.f64 eps eps)) (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 (*.f64 (+.f64 x eps) eps) #s(literal -1/2 binary64)) x)))","(fma.f64 (neg.f64 (*.f64 eps eps)) (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 (+.f64 x eps) eps) #s(literal -1/2 binary64)) x))","(fma.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (+.f64 x eps) x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 (*.f64 (*.f64 (+.f64 x eps) eps) #s(literal -1/2 binary64)) x)) (*.f64 (pow.f64 (*.f64 (*.f64 (+.f64 x eps) x) eps) #s(literal 2 binary64)) #s(literal 1/4 binary64))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 eps #s(literal -2 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 (*.f64 (+.f64 x eps) eps) #s(literal -1/2 binary64)) x)))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 eps #s(literal -2 binary64)) (*.f64 (*.f64 (*.f64 (+.f64 x eps) eps) #s(literal -1/2 binary64)) x))","(fma.f64 (*.f64 (+.f64 x eps) eps) (*.f64 x #s(literal -1/2 binary64)) eps)","(fma.f64 (*.f64 x #s(literal -1/2 binary64)) (*.f64 (+.f64 x eps) eps) eps)","(fma.f64 (*.f64 (*.f64 (+.f64 x eps) #s(literal -1/2 binary64)) x) eps eps)","(fma.f64 (+.f64 x eps) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps) eps)","(fma.f64 x (*.f64 #s(literal -1/2 binary64) (*.f64 (+.f64 x eps) eps)) eps)","(fma.f64 eps (*.f64 (*.f64 (+.f64 x eps) #s(literal -1/2 binary64)) x) eps)","(fma.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (+.f64 x eps) x) eps) eps)","(-.f64 (/.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (+.f64 x eps) x) eps) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (fma.f64 (*.f64 (*.f64 (+.f64 x eps) eps) #s(literal -1/2 binary64)) x (neg.f64 eps))) (/.f64 (*.f64 eps eps) (fma.f64 (*.f64 (*.f64 (+.f64 x eps) eps) #s(literal -1/2 binary64)) x (neg.f64 eps))))","(+.f64 (fma.f64 (*.f64 (*.f64 (+.f64 x eps) x) eps) #s(literal -1/2 binary64) #s(literal 0 binary64)) eps)","(+.f64 (*.f64 (*.f64 (*.f64 (+.f64 x eps) eps) #s(literal -1/2 binary64)) x) eps)","(+.f64 (fma.f64 (*.f64 (+.f64 x eps) eps) (*.f64 x #s(literal -1/2 binary64)) eps) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (fma.f64 (*.f64 (+.f64 x eps) eps) (*.f64 x #s(literal -1/2 binary64)) eps))","(+.f64 eps (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 (*.f64 (+.f64 x eps) eps) #s(literal -1/2 binary64)) x)))","(+.f64 eps (*.f64 (*.f64 (*.f64 (+.f64 x eps) eps) #s(literal -1/2 binary64)) x))","(*.f64 x #s(literal -1/2 binary64))","(*.f64 #s(literal -1/2 binary64) x)","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","(*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps)","(*.f64 eps #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))))) (neg.f64 (neg.f64 eps)))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))))) (neg.f64 (*.f64 eps eps)))","(/.f64 (neg.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (neg.f64 (*.f64 eps eps)))) (neg.f64 (neg.f64 eps)))","(/.f64 (neg.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 eps eps)))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) (*.f64 eps eps))","(/.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(/.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(fma.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 0 binary64) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","(fma.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps (*.f64 #s(literal 0 binary64) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))))","(fma.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 0 binary64)))","(fma.f64 #s(literal 0 binary64) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","(fma.f64 eps #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (*.f64 #s(literal 0 binary64) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))))","(fma.f64 eps #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 0 binary64)))","(+.f64 (*.f64 #s(literal 0 binary64) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","(+.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 0 binary64)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","(+.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps) (*.f64 #s(literal 0 binary64) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))))","(+.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 0 binary64)))","#s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal -1 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x)))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal -1 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal -1 binary64)) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1 binary64))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal -1 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal -1 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1 binary64)) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal -1 binary64)))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal -1 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x #s(literal 1 binary64))","(fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 (*.f64 x x) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(fma.f64 (*.f64 x x) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 x x) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x) #s(literal 1 binary64))","(fma.f64 x (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) #s(literal 1 binary64))","(-.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x))","(*.f64 (*.f64 (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal 2 binary64))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(literal 2 binary64))","(*.f64 (*.f64 (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal 2 binary64))) #s(literal 2 binary64)) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)))","(*.f64 (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal 2 binary64))) (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal 2 binary64))))","(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) (*.f64 (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal 2 binary64))) #s(literal 2 binary64)))","(*.f64 #s(literal 2 binary64) (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal 2 binary64)))))","(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)))","#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","(*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(*.f64 eps (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) eps)) (neg.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/8 binary64)) eps)) (neg.f64 (-.f64 (fma.f64 (pow.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) eps) (*.f64 #s(literal 1/2 binary64) eps)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)))) (neg.f64 (neg.f64 eps)))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)))) (neg.f64 (*.f64 eps eps)))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) (neg.f64 (*.f64 eps eps)))) (neg.f64 (neg.f64 eps)))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 eps eps)))","(/.f64 (neg.f64 (*.f64 eps (fma.f64 (pow.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)))) (neg.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (*.f64 eps (fma.f64 (pow.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (-.f64 (fma.f64 (pow.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) eps) (*.f64 #s(literal 1/2 binary64) eps)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) (neg.f64 (*.f64 eps eps)))) (neg.f64 (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) (neg.f64 eps))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 eps eps))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/8 binary64)) (neg.f64 (*.f64 eps eps)))) (neg.f64 (*.f64 (-.f64 (fma.f64 (pow.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) eps) (*.f64 #s(literal 1/2 binary64) eps))) (neg.f64 eps))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/8 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 (-.f64 (fma.f64 (pow.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) eps) (*.f64 #s(literal 1/2 binary64) eps))) (*.f64 eps eps))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (fma.f64 (pow.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)))) (neg.f64 (*.f64 (neg.f64 eps) (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (fma.f64 (pow.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (*.f64 (neg.f64 eps) (-.f64 (fma.f64 (pow.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) eps) (*.f64 #s(literal 1/2 binary64) eps))))))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (pow.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)))) (neg.f64 (*.f64 (*.f64 eps eps) (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (pow.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (*.f64 (*.f64 eps eps) (-.f64 (fma.f64 (pow.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) eps) (*.f64 #s(literal 1/2 binary64) eps))))))","(/.f64 (*.f64 (fma.f64 (pow.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) eps) (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/8 binary64)) eps) (-.f64 (fma.f64 (pow.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) eps) (*.f64 #s(literal 1/2 binary64) eps))))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))) (*.f64 eps eps))","(/.f64 (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(/.f64 (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(/.f64 (*.f64 eps (fma.f64 (pow.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64))) (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","(/.f64 (*.f64 eps (fma.f64 (pow.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/8 binary64))) (-.f64 (fma.f64 (pow.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) eps) (*.f64 #s(literal 1/2 binary64) eps))))","(/.f64 (*.f64 (fma.f64 (pow.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) (neg.f64 (*.f64 eps eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) (neg.f64 eps)))","(/.f64 (*.f64 (fma.f64 (pow.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 eps eps)))","(/.f64 (*.f64 (fma.f64 (pow.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/8 binary64)) (neg.f64 (*.f64 eps eps))) (*.f64 (-.f64 (fma.f64 (pow.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) eps) (*.f64 #s(literal 1/2 binary64) eps))) (neg.f64 eps)))","(/.f64 (*.f64 (fma.f64 (pow.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/8 binary64)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 (-.f64 (fma.f64 (pow.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) eps) (*.f64 #s(literal 1/2 binary64) eps))) (*.f64 eps eps)))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (fma.f64 (pow.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64))) (*.f64 (neg.f64 eps) (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (fma.f64 (pow.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/8 binary64))) (*.f64 (neg.f64 eps) (-.f64 (fma.f64 (pow.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) eps) (*.f64 #s(literal 1/2 binary64) eps)))))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (pow.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64))) (*.f64 (*.f64 eps eps) (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (pow.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/8 binary64))) (*.f64 (*.f64 eps eps) (-.f64 (fma.f64 (pow.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) eps) (*.f64 #s(literal 1/2 binary64) eps)))))","(fma.f64 (*.f64 (*.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) eps) eps) eps (*.f64 #s(literal 1/2 binary64) eps))","(fma.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) #s(literal 0 binary64) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","(fma.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps (*.f64 #s(literal 0 binary64) (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))))","(fma.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) #s(literal 0 binary64)))","(fma.f64 #s(literal 0 binary64) (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","(fma.f64 #s(literal 1/2 binary64) eps (*.f64 (*.f64 (*.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) eps) eps) eps))","(fma.f64 #s(literal 1/2 binary64) eps (*.f64 eps (*.f64 (*.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) eps) eps)))","(fma.f64 eps (*.f64 (*.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) eps) eps) (*.f64 #s(literal 1/2 binary64) eps))","(fma.f64 eps (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 #s(literal 0 binary64) (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))))","(fma.f64 eps (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) #s(literal 0 binary64)))","(fma.f64 eps #s(literal 1/2 binary64) (*.f64 (*.f64 (*.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) eps) eps) eps))","(fma.f64 eps #s(literal 1/2 binary64) (*.f64 eps (*.f64 (*.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) eps) eps)))","(+.f64 (*.f64 #s(literal 0 binary64) (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","(+.f64 (*.f64 (*.f64 (*.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) eps) eps) eps) (*.f64 #s(literal 1/2 binary64) eps))","(+.f64 (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) #s(literal 0 binary64)) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","(+.f64 (*.f64 eps (*.f64 (*.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) eps) eps)) (*.f64 #s(literal 1/2 binary64) eps))","(+.f64 (*.f64 #s(literal 1/2 binary64) eps) (*.f64 (*.f64 (*.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) eps) eps) eps))","(+.f64 (*.f64 #s(literal 1/2 binary64) eps) (*.f64 eps (*.f64 (*.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) eps) eps)))","(+.f64 (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps) (*.f64 #s(literal 0 binary64) (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))))","(+.f64 (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) #s(literal 0 binary64)))","(*.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/2304 binary64)) (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal 1/48 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/110592 binary64)) (pow.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/2304 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) (*.f64 eps #s(literal -1/48 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal 1/48 binary64)) (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/2304 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/2304 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) (*.f64 eps #s(literal -1/48 binary64)))) (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/110592 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 1/2304 binary64) (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))))) (neg.f64 (-.f64 #s(literal -1/48 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) eps))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/2304 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal 1/48 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/110592 binary64)))) (neg.f64 (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/2304 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) (*.f64 eps #s(literal -1/48 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal 1/48 binary64))) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal 1/48 binary64)) #s(literal 1/2304 binary64))) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal 1/48 binary64)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal 1/48 binary64))))","(/.f64 (-.f64 #s(literal 1/2304 binary64) (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (-.f64 #s(literal -1/48 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) eps)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/2304 binary64))) (neg.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal 1/48 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/110592 binary64))) (neg.f64 (+.f64 #s(literal 1/2304 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) (*.f64 eps #s(literal -1/48 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/110592 binary64))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/2304 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) (*.f64 eps #s(literal -1/48 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal 1/48 binary64)) (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/2304 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/2304 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) (*.f64 eps #s(literal -1/48 binary64)))) (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/110592 binary64)))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/2304 binary64)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal 1/48 binary64)))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/110592 binary64)) (+.f64 #s(literal 1/2304 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) (*.f64 eps #s(literal -1/48 binary64))))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/110592 binary64)) (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/2304 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) (*.f64 eps #s(literal -1/48 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal 1/48 binary64)) (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/2304 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/2304 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) (*.f64 eps #s(literal -1/48 binary64)))) (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/110592 binary64))))","(fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) eps #s(literal -1/48 binary64))","(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64))","(fma.f64 (*.f64 eps eps) (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal -1/48 binary64))","(fma.f64 eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) #s(literal -1/48 binary64))","(-.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal 1/48 binary64))) (/.f64 #s(literal 1/2304 binary64) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal 1/48 binary64))))","(+.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) eps) #s(literal -1/48 binary64))","(+.f64 #s(literal -1/48 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) eps))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(*.f64 eps (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) eps)) (neg.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/8 binary64)) eps)) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) (*.f64 #s(literal 1/2 binary64) eps)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)))) (neg.f64 (neg.f64 eps)))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)))) (neg.f64 (*.f64 eps eps)))","(/.f64 (neg.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) (neg.f64 (*.f64 eps eps)))) (neg.f64 (neg.f64 eps)))","(/.f64 (neg.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 eps eps)))","(/.f64 (neg.f64 (*.f64 eps (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (*.f64 eps (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) (*.f64 #s(literal 1/2 binary64) eps)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) (neg.f64 (*.f64 eps eps)))) (neg.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) (neg.f64 eps))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 eps eps))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/8 binary64)) (neg.f64 (*.f64 eps eps)))) (neg.f64 (*.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) (*.f64 #s(literal 1/2 binary64) eps))) (neg.f64 eps))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/8 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) (*.f64 #s(literal 1/2 binary64) eps))) (*.f64 eps eps))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)))) (neg.f64 (*.f64 (neg.f64 eps) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (*.f64 (neg.f64 eps) (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) (*.f64 #s(literal 1/2 binary64) eps))))))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)))) (neg.f64 (*.f64 (*.f64 eps eps) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (*.f64 (*.f64 eps eps) (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) (*.f64 #s(literal 1/2 binary64) eps))))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) eps) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/8 binary64)) eps) (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) (*.f64 #s(literal 1/2 binary64) eps))))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))) (*.f64 eps eps))","(/.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(/.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(/.f64 (*.f64 eps (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64))) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","(/.f64 (*.f64 eps (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/8 binary64))) (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) (*.f64 #s(literal 1/2 binary64) eps))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) (neg.f64 (*.f64 eps eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) (neg.f64 eps)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 eps eps)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/8 binary64)) (neg.f64 (*.f64 eps eps))) (*.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) (*.f64 #s(literal 1/2 binary64) eps))) (neg.f64 eps)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/8 binary64)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) (*.f64 #s(literal 1/2 binary64) eps))) (*.f64 eps eps)))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64))) (*.f64 (neg.f64 eps) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/8 binary64))) (*.f64 (neg.f64 eps) (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) (*.f64 #s(literal 1/2 binary64) eps)))))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64))) (*.f64 (*.f64 eps eps) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/8 binary64))) (*.f64 (*.f64 eps eps) (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) (*.f64 #s(literal 1/2 binary64) eps)))))","(fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) eps) eps (*.f64 #s(literal 1/2 binary64) eps))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) #s(literal 0 binary64) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps (*.f64 #s(literal 0 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) #s(literal 0 binary64)))","(fma.f64 #s(literal 0 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","(fma.f64 #s(literal 1/2 binary64) eps (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) eps) eps))","(fma.f64 #s(literal 1/2 binary64) eps (*.f64 eps (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) eps)))","(fma.f64 eps (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) eps) (*.f64 #s(literal 1/2 binary64) eps))","(fma.f64 eps (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 #s(literal 0 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))))","(fma.f64 eps (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) #s(literal 0 binary64)))","(fma.f64 eps #s(literal 1/2 binary64) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) eps) eps))","(fma.f64 eps #s(literal 1/2 binary64) (*.f64 eps (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) eps)))","(+.f64 (*.f64 #s(literal 0 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","(+.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) eps) eps) (*.f64 #s(literal 1/2 binary64) eps))","(+.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) #s(literal 0 binary64)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","(+.f64 (*.f64 eps (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) eps)) (*.f64 #s(literal 1/2 binary64) eps))","(+.f64 (*.f64 #s(literal 1/2 binary64) eps) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) eps) eps))","(+.f64 (*.f64 #s(literal 1/2 binary64) eps) (*.f64 eps (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) eps) eps)))","(+.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps) (*.f64 #s(literal 0 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))))","(+.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) #s(literal 0 binary64)))","(*.f64 (+.f64 x eps) eps)","(*.f64 eps (+.f64 x eps))","(/.f64 (neg.f64 (*.f64 (*.f64 (+.f64 x eps) (-.f64 x eps)) eps)) (neg.f64 (-.f64 x eps)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) eps)) (neg.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (+.f64 x eps))) (neg.f64 (neg.f64 eps)))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (+.f64 x eps))) (neg.f64 (*.f64 eps eps)))","(/.f64 (neg.f64 (*.f64 (+.f64 x eps) (neg.f64 (*.f64 eps eps)))) (neg.f64 (neg.f64 eps)))","(/.f64 (neg.f64 (*.f64 (+.f64 x eps) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 eps eps)))","(/.f64 (neg.f64 (*.f64 eps (*.f64 (+.f64 x eps) (-.f64 x eps)))) (neg.f64 (-.f64 x eps)))","(/.f64 (neg.f64 (*.f64 eps (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 x eps) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (neg.f64 (-.f64 (*.f64 x eps) (*.f64 eps eps))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 x eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)))) (neg.f64 (+.f64 (pow.f64 (*.f64 x eps) #s(literal 2 binary64)) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 (*.f64 x eps) (*.f64 eps eps))))))","(/.f64 (neg.f64 (*.f64 (*.f64 (+.f64 x eps) (-.f64 x eps)) (neg.f64 (*.f64 eps eps)))) (neg.f64 (*.f64 (-.f64 x eps) (neg.f64 eps))))","(/.f64 (neg.f64 (*.f64 (*.f64 (+.f64 x eps) (-.f64 x eps)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 (-.f64 x eps) (*.f64 eps eps))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (*.f64 eps eps)))) (neg.f64 (*.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)) (neg.f64 eps))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)) (*.f64 eps eps))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 (+.f64 x eps) (-.f64 x eps)))) (neg.f64 (*.f64 (neg.f64 eps) (-.f64 x eps))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (*.f64 (neg.f64 eps) (fma.f64 eps (-.f64 eps x) (*.f64 x x)))))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 (+.f64 x eps) (-.f64 x eps)))) (neg.f64 (*.f64 (*.f64 eps eps) (-.f64 x eps))))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (*.f64 (*.f64 eps eps) (fma.f64 eps (-.f64 eps x) (*.f64 x x)))))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) x) (neg.f64 eps) (*.f64 (neg.f64 eps) (*.f64 (neg.f64 (*.f64 eps eps)) eps))) (*.f64 eps eps))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) x) (neg.f64 eps) (*.f64 (neg.f64 eps) (*.f64 eps (neg.f64 (*.f64 eps eps))))) (*.f64 eps eps))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) x) (*.f64 eps eps) (*.f64 (neg.f64 eps) (*.f64 eps (pow.f64 eps #s(literal 3 binary64))))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) x) (neg.f64 (*.f64 eps eps)) (*.f64 (neg.f64 eps) (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 4 binary64))))) (*.f64 (neg.f64 eps) (neg.f64 (*.f64 eps eps))))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) x) (*.f64 eps eps) (*.f64 (neg.f64 eps) (-.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 0 binary64)))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) x) (+.f64 (pow.f64 eps #s(literal 4 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 eps eps) #s(literal 0 binary64)))) (*.f64 (neg.f64 eps) (-.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 0 binary64)))) (*.f64 (neg.f64 eps) (+.f64 (pow.f64 eps #s(literal 4 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 eps eps) #s(literal 0 binary64))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) x) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 eps eps)))) (*.f64 (neg.f64 eps) (+.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 6 binary64))))) (*.f64 (neg.f64 eps) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 eps eps))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) x) (*.f64 eps eps) (*.f64 (neg.f64 eps) (pow.f64 eps #s(literal 4 binary64)))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) x) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (*.f64 (neg.f64 eps) (*.f64 (neg.f64 (*.f64 eps eps)) (pow.f64 eps #s(literal 3 binary64))))) (*.f64 (neg.f64 eps) (pow.f64 (neg.f64 eps) #s(literal 3 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) x) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (*.f64 (neg.f64 eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (neg.f64 (*.f64 eps eps))))) (*.f64 (neg.f64 eps) (pow.f64 (neg.f64 eps) #s(literal 3 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) x) (pow.f64 eps #s(literal 4 binary64)) (*.f64 (neg.f64 eps) (pow.f64 eps #s(literal 6 binary64)))) (*.f64 (neg.f64 eps) (pow.f64 eps #s(literal 4 binary64))))","(/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) x) (neg.f64 eps) (*.f64 (*.f64 eps eps) (*.f64 (neg.f64 (*.f64 eps eps)) eps))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) x) (neg.f64 eps) (*.f64 (*.f64 eps eps) (*.f64 eps (neg.f64 (*.f64 eps eps))))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) x) (*.f64 eps eps) (*.f64 (*.f64 eps eps) (*.f64 eps (pow.f64 eps #s(literal 3 binary64))))) (pow.f64 eps #s(literal 4 binary64)))","(/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) x) (neg.f64 (*.f64 eps eps)) (*.f64 (*.f64 eps eps) (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 4 binary64))))) (*.f64 (*.f64 eps eps) (neg.f64 (*.f64 eps eps))))","(/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) x) (*.f64 eps eps) (*.f64 (*.f64 eps eps) (-.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 0 binary64)))) (pow.f64 eps #s(literal 4 binary64)))","(/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) x) (+.f64 (pow.f64 eps #s(literal 4 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 eps eps) #s(literal 0 binary64)))) (*.f64 (*.f64 eps eps) (-.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 0 binary64)))) (*.f64 (*.f64 eps eps) (+.f64 (pow.f64 eps #s(literal 4 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 eps eps) #s(literal 0 binary64))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) x) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 eps eps)))) (*.f64 (*.f64 eps eps) (+.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 6 binary64))))) (*.f64 (*.f64 eps eps) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 eps eps))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) x) (*.f64 eps eps) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 eps #s(literal 4 binary64)))","(/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) x) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (*.f64 (*.f64 eps eps) (*.f64 (neg.f64 (*.f64 eps eps)) (pow.f64 eps #s(literal 3 binary64))))) (*.f64 (*.f64 eps eps) (pow.f64 (neg.f64 eps) #s(literal 3 binary64))))","(/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) x) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (*.f64 (*.f64 eps eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (neg.f64 (*.f64 eps eps))))) (*.f64 (*.f64 eps eps) (pow.f64 (neg.f64 eps) #s(literal 3 binary64))))","(/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) x) (pow.f64 eps #s(literal 4 binary64)) (*.f64 (*.f64 eps eps) (pow.f64 eps #s(literal 6 binary64)))) (pow.f64 eps #s(literal 6 binary64)))","(/.f64 (fma.f64 (*.f64 x (neg.f64 (*.f64 eps eps))) (neg.f64 eps) (*.f64 (neg.f64 eps) (*.f64 (neg.f64 (*.f64 eps eps)) eps))) (*.f64 eps eps))","(/.f64 (fma.f64 (*.f64 x (neg.f64 (*.f64 eps eps))) (neg.f64 eps) (*.f64 (neg.f64 eps) (*.f64 eps (neg.f64 (*.f64 eps eps))))) (*.f64 eps eps))","(/.f64 (fma.f64 (*.f64 x (neg.f64 (*.f64 eps eps))) (*.f64 eps eps) (*.f64 (neg.f64 eps) (*.f64 eps (pow.f64 eps #s(literal 3 binary64))))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (fma.f64 (*.f64 x (neg.f64 (*.f64 eps eps))) (neg.f64 (*.f64 eps eps)) (*.f64 (neg.f64 eps) (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 4 binary64))))) (*.f64 (neg.f64 eps) (neg.f64 (*.f64 eps eps))))","(/.f64 (fma.f64 (*.f64 x (neg.f64 (*.f64 eps eps))) (*.f64 eps eps) (*.f64 (neg.f64 eps) (-.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 0 binary64)))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (fma.f64 (*.f64 x (neg.f64 (*.f64 eps eps))) (+.f64 (pow.f64 eps #s(literal 4 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 eps eps) #s(literal 0 binary64)))) (*.f64 (neg.f64 eps) (-.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 0 binary64)))) (*.f64 (neg.f64 eps) (+.f64 (pow.f64 eps #s(literal 4 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 eps eps) #s(literal 0 binary64))))))","(/.f64 (fma.f64 (*.f64 x (neg.f64 (*.f64 eps eps))) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 eps eps)))) (*.f64 (neg.f64 eps) (+.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 6 binary64))))) (*.f64 (neg.f64 eps) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 eps eps))))))","(/.f64 (fma.f64 (*.f64 x (neg.f64 (*.f64 eps eps))) (*.f64 eps eps) (*.f64 (neg.f64 eps) (pow.f64 eps #s(literal 4 binary64)))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (fma.f64 (*.f64 x (neg.f64 (*.f64 eps eps))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (*.f64 (neg.f64 eps) (*.f64 (neg.f64 (*.f64 eps eps)) (pow.f64 eps #s(literal 3 binary64))))) (*.f64 (neg.f64 eps) (pow.f64 (neg.f64 eps) #s(literal 3 binary64))))","(/.f64 (fma.f64 (*.f64 x (neg.f64 (*.f64 eps eps))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (*.f64 (neg.f64 eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (neg.f64 (*.f64 eps eps))))) (*.f64 (neg.f64 eps) (pow.f64 (neg.f64 eps) #s(literal 3 binary64))))","(/.f64 (fma.f64 (*.f64 x (neg.f64 (*.f64 eps eps))) (pow.f64 eps #s(literal 4 binary64)) (*.f64 (neg.f64 eps) (pow.f64 eps #s(literal 6 binary64)))) (*.f64 (neg.f64 eps) (pow.f64 eps #s(literal 4 binary64))))","(/.f64 (fma.f64 (*.f64 x (pow.f64 eps #s(literal 3 binary64))) (neg.f64 eps) (*.f64 (*.f64 eps eps) (*.f64 (neg.f64 (*.f64 eps eps)) eps))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (fma.f64 (*.f64 x (pow.f64 eps #s(literal 3 binary64))) (neg.f64 eps) (*.f64 (*.f64 eps eps) (*.f64 eps (neg.f64 (*.f64 eps eps))))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (fma.f64 (*.f64 x (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps) (*.f64 (*.f64 eps eps) (*.f64 eps (pow.f64 eps #s(literal 3 binary64))))) (pow.f64 eps #s(literal 4 binary64)))","(/.f64 (fma.f64 (*.f64 x (pow.f64 eps #s(literal 3 binary64))) (neg.f64 (*.f64 eps eps)) (*.f64 (*.f64 eps eps) (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 4 binary64))))) (*.f64 (*.f64 eps eps) (neg.f64 (*.f64 eps eps))))","(/.f64 (fma.f64 (*.f64 x (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps) (*.f64 (*.f64 eps eps) (-.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 0 binary64)))) (pow.f64 eps #s(literal 4 binary64)))","(/.f64 (fma.f64 (*.f64 x (pow.f64 eps #s(literal 3 binary64))) (+.f64 (pow.f64 eps #s(literal 4 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 eps eps) #s(literal 0 binary64)))) (*.f64 (*.f64 eps eps) (-.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 0 binary64)))) (*.f64 (*.f64 eps eps) (+.f64 (pow.f64 eps #s(literal 4 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 eps eps) #s(literal 0 binary64))))))","(/.f64 (fma.f64 (*.f64 x (pow.f64 eps #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 eps eps)))) (*.f64 (*.f64 eps eps) (+.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 6 binary64))))) (*.f64 (*.f64 eps eps) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 eps eps))))))","(/.f64 (fma.f64 (*.f64 x (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 eps #s(literal 4 binary64)))","(/.f64 (fma.f64 (*.f64 x (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (*.f64 (*.f64 eps eps) (*.f64 (neg.f64 (*.f64 eps eps)) (pow.f64 eps #s(literal 3 binary64))))) (*.f64 (*.f64 eps eps) (pow.f64 (neg.f64 eps) #s(literal 3 binary64))))","(/.f64 (fma.f64 (*.f64 x (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (*.f64 (*.f64 eps eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (neg.f64 (*.f64 eps eps))))) (*.f64 (*.f64 eps eps) (pow.f64 (neg.f64 eps) #s(literal 3 binary64))))","(/.f64 (fma.f64 (*.f64 x (pow.f64 eps #s(literal 3 binary64))) (pow.f64 eps #s(literal 4 binary64)) (*.f64 (*.f64 eps eps) (pow.f64 eps #s(literal 6 binary64)))) (pow.f64 eps #s(literal 6 binary64)))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) eps) (neg.f64 eps) (*.f64 (neg.f64 eps) (*.f64 (neg.f64 (*.f64 eps eps)) x))) (*.f64 eps eps))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) eps) (*.f64 eps eps) (*.f64 (neg.f64 eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) x))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) eps) (neg.f64 eps) (*.f64 (neg.f64 eps) (*.f64 x (neg.f64 (*.f64 eps eps))))) (*.f64 eps eps))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) eps) (*.f64 eps eps) (*.f64 (neg.f64 eps) (*.f64 x (pow.f64 eps #s(literal 3 binary64))))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (fma.f64 (*.f64 eps (neg.f64 (*.f64 eps eps))) (neg.f64 eps) (*.f64 (neg.f64 eps) (*.f64 (neg.f64 (*.f64 eps eps)) x))) (*.f64 eps eps))","(/.f64 (fma.f64 (*.f64 eps (neg.f64 (*.f64 eps eps))) (*.f64 eps eps) (*.f64 (neg.f64 eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) x))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (fma.f64 (*.f64 eps (neg.f64 (*.f64 eps eps))) (neg.f64 eps) (*.f64 (neg.f64 eps) (*.f64 x (neg.f64 (*.f64 eps eps))))) (*.f64 eps eps))","(/.f64 (fma.f64 (*.f64 eps (neg.f64 (*.f64 eps eps))) (*.f64 eps eps) (*.f64 (neg.f64 eps) (*.f64 x (pow.f64 eps #s(literal 3 binary64))))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (fma.f64 (*.f64 eps (pow.f64 eps #s(literal 3 binary64))) (neg.f64 eps) (*.f64 (*.f64 eps eps) (*.f64 (neg.f64 (*.f64 eps eps)) x))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (fma.f64 (*.f64 eps (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps) (*.f64 (*.f64 eps eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) x))) (pow.f64 eps #s(literal 4 binary64)))","(/.f64 (fma.f64 (*.f64 eps (pow.f64 eps #s(literal 3 binary64))) (neg.f64 eps) (*.f64 (*.f64 eps eps) (*.f64 x (neg.f64 (*.f64 eps eps))))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (fma.f64 (*.f64 eps (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps) (*.f64 (*.f64 eps eps) (*.f64 x (pow.f64 eps #s(literal 3 binary64))))) (pow.f64 eps #s(literal 4 binary64)))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 4 binary64))) (neg.f64 eps) (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 (neg.f64 (*.f64 eps eps)) x))) (*.f64 (neg.f64 (*.f64 eps eps)) (neg.f64 eps)))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 4 binary64))) (*.f64 eps eps) (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 (pow.f64 eps #s(literal 3 binary64)) x))) (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 eps eps)))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 4 binary64))) (neg.f64 eps) (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 x (neg.f64 (*.f64 eps eps))))) (*.f64 (neg.f64 (*.f64 eps eps)) (neg.f64 eps)))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 4 binary64))) (*.f64 eps eps) (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 x (pow.f64 eps #s(literal 3 binary64))))) (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 eps eps)))","(/.f64 (fma.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 0 binary64)) (neg.f64 eps) (*.f64 (*.f64 eps eps) (*.f64 (neg.f64 (*.f64 eps eps)) x))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (fma.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 0 binary64)) (*.f64 eps eps) (*.f64 (*.f64 eps eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) x))) (pow.f64 eps #s(literal 4 binary64)))","(/.f64 (fma.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 0 binary64)) (neg.f64 eps) (*.f64 (*.f64 eps eps) (*.f64 x (neg.f64 (*.f64 eps eps))))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (fma.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 0 binary64)) (*.f64 eps eps) (*.f64 (*.f64 eps eps) (*.f64 x (pow.f64 eps #s(literal 3 binary64))))) (pow.f64 eps #s(literal 4 binary64)))","(/.f64 (fma.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 0 binary64)) (neg.f64 eps) (*.f64 (+.f64 (pow.f64 eps #s(literal 4 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 eps eps) #s(literal 0 binary64)))) (*.f64 (neg.f64 (*.f64 eps eps)) x))) (*.f64 (+.f64 (pow.f64 eps #s(literal 4 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 eps eps) #s(literal 0 binary64)))) (neg.f64 eps)))","(/.f64 (fma.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 0 binary64)) (*.f64 eps eps) (*.f64 (+.f64 (pow.f64 eps #s(literal 4 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 eps eps) #s(literal 0 binary64)))) (*.f64 (pow.f64 eps #s(literal 3 binary64)) x))) (*.f64 (+.f64 (pow.f64 eps #s(literal 4 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 eps eps) #s(literal 0 binary64)))) (*.f64 eps eps)))","(/.f64 (fma.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 0 binary64)) (neg.f64 eps) (*.f64 (+.f64 (pow.f64 eps #s(literal 4 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 eps eps) #s(literal 0 binary64)))) (*.f64 x (neg.f64 (*.f64 eps eps))))) (*.f64 (+.f64 (pow.f64 eps #s(literal 4 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 eps eps) #s(literal 0 binary64)))) (neg.f64 eps)))","(/.f64 (fma.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 0 binary64)) (*.f64 eps eps) (*.f64 (+.f64 (pow.f64 eps #s(literal 4 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 eps eps) #s(literal 0 binary64)))) (*.f64 x (pow.f64 eps #s(literal 3 binary64))))) (*.f64 (+.f64 (pow.f64 eps #s(literal 4 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 eps eps) #s(literal 0 binary64)))) (*.f64 eps eps)))","(/.f64 (fma.f64 (+.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 6 binary64))) (neg.f64 eps) (*.f64 (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 eps eps)))) (*.f64 (neg.f64 (*.f64 eps eps)) x))) (*.f64 (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 eps eps)))) (neg.f64 eps)))","(/.f64 (fma.f64 (+.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 6 binary64))) (*.f64 eps eps) (*.f64 (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 eps eps)))) (*.f64 (pow.f64 eps #s(literal 3 binary64)) x))) (*.f64 (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 eps eps)))) (*.f64 eps eps)))","(/.f64 (fma.f64 (+.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 6 binary64))) (neg.f64 eps) (*.f64 (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 eps eps)))) (*.f64 x (neg.f64 (*.f64 eps eps))))) (*.f64 (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 eps eps)))) (neg.f64 eps)))","(/.f64 (fma.f64 (+.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 6 binary64))) (*.f64 eps eps) (*.f64 (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 eps eps)))) (*.f64 x (pow.f64 eps #s(literal 3 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 eps eps)))) (*.f64 eps eps)))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) (neg.f64 eps) (*.f64 (*.f64 eps eps) (*.f64 (neg.f64 (*.f64 eps eps)) x))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (+.f64 (pow.f64 eps #s(literal 6 binary64)) (*.f64 (*.f64 eps eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) x))) (pow.f64 eps #s(literal 4 binary64)))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) (neg.f64 eps) (*.f64 (*.f64 eps eps) (*.f64 x (neg.f64 (*.f64 eps eps))))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (+.f64 (pow.f64 eps #s(literal 6 binary64)) (*.f64 (*.f64 eps eps) (*.f64 x (pow.f64 eps #s(literal 3 binary64))))) (pow.f64 eps #s(literal 4 binary64)))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (pow.f64 eps #s(literal 3 binary64))) (neg.f64 eps) (*.f64 (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (*.f64 (neg.f64 (*.f64 eps eps)) x))) (*.f64 (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (neg.f64 eps)))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps) (*.f64 (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (*.f64 (pow.f64 eps #s(literal 3 binary64)) x))) (*.f64 (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (*.f64 eps eps)))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (pow.f64 eps #s(literal 3 binary64))) (neg.f64 eps) (*.f64 (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (*.f64 x (neg.f64 (*.f64 eps eps))))) (*.f64 (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (neg.f64 eps)))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps) (*.f64 (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (*.f64 x (pow.f64 eps #s(literal 3 binary64))))) (*.f64 (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (*.f64 eps eps)))","(/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (neg.f64 (*.f64 eps eps))) (neg.f64 eps) (*.f64 (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (*.f64 (neg.f64 (*.f64 eps eps)) x))) (*.f64 (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (neg.f64 eps)))","(/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (neg.f64 (*.f64 eps eps))) (*.f64 eps eps) (*.f64 (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (*.f64 (pow.f64 eps #s(literal 3 binary64)) x))) (*.f64 (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (*.f64 eps eps)))","(/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (neg.f64 (*.f64 eps eps))) (neg.f64 eps) (*.f64 (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (*.f64 x (neg.f64 (*.f64 eps eps))))) (*.f64 (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (neg.f64 eps)))","(/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (neg.f64 (*.f64 eps eps))) (*.f64 eps eps) (*.f64 (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (*.f64 x (pow.f64 eps #s(literal 3 binary64))))) (*.f64 (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (*.f64 eps eps)))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) (neg.f64 eps) (*.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 (neg.f64 (*.f64 eps eps)) x))) (*.f64 (pow.f64 eps #s(literal 4 binary64)) (neg.f64 eps)))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) (*.f64 eps eps) (*.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 (pow.f64 eps #s(literal 3 binary64)) x))) (pow.f64 eps #s(literal 6 binary64)))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) (neg.f64 eps) (*.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 x (neg.f64 (*.f64 eps eps))))) (*.f64 (pow.f64 eps #s(literal 4 binary64)) (neg.f64 eps)))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) (*.f64 eps eps) (*.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 x (pow.f64 eps #s(literal 3 binary64))))) (pow.f64 eps #s(literal 6 binary64)))","(/.f64 (*.f64 (*.f64 (+.f64 x eps) (-.f64 x eps)) eps) (-.f64 x eps))","(/.f64 (*.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) eps) (fma.f64 eps (-.f64 eps x) (*.f64 x x)))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (+.f64 x eps)) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (+.f64 x eps)) (*.f64 eps eps))","(/.f64 (*.f64 (+.f64 x eps) (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(/.f64 (*.f64 (+.f64 x eps) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(/.f64 (*.f64 eps (*.f64 (+.f64 x eps) (-.f64 x eps))) (-.f64 x eps))","(/.f64 (*.f64 eps (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 eps (-.f64 eps x) (*.f64 x x)))","(/.f64 (-.f64 (pow.f64 (*.f64 x eps) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (-.f64 (*.f64 x eps) (*.f64 eps eps)))","(/.f64 (+.f64 (pow.f64 (*.f64 x eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64))) (+.f64 (pow.f64 (*.f64 x eps) #s(literal 2 binary64)) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 (*.f64 x eps) (*.f64 eps eps)))))","(/.f64 (*.f64 (*.f64 (+.f64 x eps) (-.f64 x eps)) (neg.f64 (*.f64 eps eps))) (*.f64 (-.f64 x eps) (neg.f64 eps)))","(/.f64 (*.f64 (*.f64 (+.f64 x eps) (-.f64 x eps)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 (-.f64 x eps) (*.f64 eps eps)))","(/.f64 (*.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (*.f64 eps eps))) (*.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)) (neg.f64 eps)))","(/.f64 (*.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 eps #s(literal 3 binary64))) (*.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)) (*.f64 eps eps)))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 (+.f64 x eps) (-.f64 x eps))) (*.f64 (neg.f64 eps) (-.f64 x eps)))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (neg.f64 eps) (fma.f64 eps (-.f64 eps x) (*.f64 x x))))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 (+.f64 x eps) (-.f64 x eps))) (*.f64 (*.f64 eps eps) (-.f64 x eps)))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (*.f64 eps eps) (fma.f64 eps (-.f64 eps x) (*.f64 x x))))","(fma.f64 (exp.f64 (log.f64 eps)) (exp.f64 (log.f64 eps)) (*.f64 x eps))","(fma.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) #s(literal 2 binary64)) (*.f64 x eps))","(fma.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x eps))","(fma.f64 (neg.f64 eps) (neg.f64 eps) (*.f64 x eps))","(fma.f64 (+.f64 x eps) #s(literal 0 binary64) (*.f64 (+.f64 x eps) eps))","(fma.f64 (+.f64 x eps) eps (*.f64 #s(literal 0 binary64) (+.f64 x eps)))","(fma.f64 (+.f64 x eps) eps (*.f64 (+.f64 x eps) #s(literal 0 binary64)))","(fma.f64 #s(literal 0 binary64) (+.f64 x eps) (*.f64 (+.f64 x eps) eps))","(fma.f64 x eps (*.f64 eps eps))","(fma.f64 eps (-.f64 eps #s(literal 0 binary64)) (*.f64 x eps))","(fma.f64 eps (+.f64 x eps) (*.f64 #s(literal 0 binary64) (+.f64 x eps)))","(fma.f64 eps (+.f64 x eps) (*.f64 (+.f64 x eps) #s(literal 0 binary64)))","(fma.f64 eps x (*.f64 eps eps))","(fma.f64 eps eps (*.f64 x eps))","(+.f64 (*.f64 #s(literal 0 binary64) (+.f64 x eps)) (*.f64 (+.f64 x eps) eps))","(+.f64 (*.f64 (+.f64 x eps) #s(literal 0 binary64)) (*.f64 (+.f64 x eps) eps))","(+.f64 (*.f64 (+.f64 x eps) eps) (*.f64 #s(literal 0 binary64) (+.f64 x eps)))","(+.f64 (*.f64 (+.f64 x eps) eps) (*.f64 (+.f64 x eps) #s(literal 0 binary64)))","(+.f64 (*.f64 x eps) (*.f64 eps eps))","(+.f64 (*.f64 eps eps) (*.f64 x eps))","#s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64))","(cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal 2 binary64)))","(cos.f64 (*.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -1/2 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":253.30419921875,"type":"rewrite"},{"compiler":[[28474,2903]],"memory":[[-1289984,55486496]],"time":72.643798828125,"type":"eval"},{"alts":[["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (fma.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) eps) (cos.f64 x) (*.f64 (neg.f64 (sin.f64 x)) (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)))) eps (cos.f64 x))))","fresh",0.18109210806744797,"binary64"],["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (fma.f64 (sin.f64 (*.f64 eps #s(literal -1/2 binary64))) (sin.f64 x) (*.f64 (cos.f64 (*.f64 eps #s(literal -1/2 binary64))) (cos.f64 x)))))","fresh",0.025722509768442016,"binary64"],["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (/.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal -1/2 binary64))) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal -1/2 binary64))) (sin.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal -1/2 binary64))) (cos.f64 x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal -1/2 binary64))) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal -1/2 binary64))) (cos.f64 x)) (*.f64 (sin.f64 (*.f64 eps #s(literal -1/2 binary64))) (sin.f64 x))))))))","fresh",0.01953125,"binary64"],["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) #s(approx (cos (- (* -1/2 eps) x)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x)))))","fresh",0.08707685291289795,"binary64"],["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/3840 binary64) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x))))","fresh",0.09835624850173226,"binary64"],["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (fma.f64 (fma.f64 (neg.f64 (sin.f64 x)) (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) (*.f64 #s(literal -1/8 binary64) (*.f64 (cos.f64 x) eps))) eps (cos.f64 x))))","fresh",0.18408611952181794,"binary64"],["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))))","fresh",0.20171502055213864,"binary64"],["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x))))","fresh",0.41521283987173957,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) eps (*.f64 (cos.f64 x) eps)))","fresh",0.19663115323031086,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x)) eps))","done",0.20056778350605978,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps))","done",0.42192036332670746,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) (*.f64 #s(literal -1/6 binary64) eps)) eps (cos.f64 x)) eps))","fresh",0.6963585800091323,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))","done",0.6962720036039058,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 eps (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/12 binary64) eps)) #s(literal -1/2 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps)) x (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64)))) eps))","fresh",1.1255036338998652,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) (fma.f64 eps (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64))) eps))","fresh",1.495746064881908,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x #s(literal 1 binary64))) eps))","fresh",1.1255042749918829,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 x eps) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps))","fresh",1.4957460657583035,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x x) #s(literal -1/2 binary64)))) eps))","fresh",60.861994783078636,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x eps) #s(literal -1/2 binary64)))) eps))","done",60.50485337185369,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","fresh",1.1585310579852772,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x #s(literal 1 binary64))) eps))","fresh",1.1095817058193762,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","done",1.5328372345675862,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (+.f64 x eps) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps) eps)))","fresh",1.1184699794532889,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) #s(approx (* eps (+ x eps)) (*.f64 x eps)) eps)))","fresh",1.1187624561628902,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) #s(approx (+ (* (* -1/2 x) (* eps (+ x eps))) eps) (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) x))))","fresh",60.50485337185369,"binary64"]],"compiler":[[1449,303],[57,36],[51,35],[92,45],[49,34],[38,29],[61,41],[46,34],[28,24],[31,20],[29,19],[18,13],[35,24],[12,9],[67,37],[47,31],[34,22],[26,18],[35,22],[35,22],[24,16],[29,19],[14,11],[30,19],[34,20],[39,23]],"count":[[591,25]],"kept":[{"done":[6,4],"fresh":[13,9],"new":[567,11],"picked":[5,1]}],"memory":[[-2907904,34866304]],"min-error":[[0.0,"binary64"]],"time":59.59619140625,"type":"prune"},{"accuracy":[0.01953125],"baseline":[0.01953125],"branch":[["x",0.01953125,1,"binary64"],["eps",0.01953125,1,"binary64"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",0.01953125,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[43,1]],"inputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) #s(approx (+ (* (* -1/2 x) (* eps (+ x eps))) eps) (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) x))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x eps) #s(literal -1/2 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x x) #s(literal -1/2 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) #s(approx (* eps (+ x eps)) (*.f64 x eps)) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 x eps) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 x eps)) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (+.f64 x eps) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) (fma.f64 eps (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 eps (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/12 binary64) eps)) #s(literal -1/2 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps)) x (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) (*.f64 #s(literal -1/6 binary64) eps)) eps (cos.f64 x)) eps))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 eps #s(literal 1/2 binary64))) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/3840 binary64) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3840 binary64) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) #s(approx (cos (- (* -1/2 eps) x)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x)))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","#s(approx (- (sin (+ x eps)) (sin x)) (fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) eps (*.f64 (cos.f64 x) eps)))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (fma.f64 (fma.f64 (neg.f64 (sin.f64 x)) (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) (*.f64 #s(literal -1/8 binary64) (*.f64 (cos.f64 x) eps))) eps (cos.f64 x))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (fma.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) eps) (cos.f64 x) (*.f64 (neg.f64 (sin.f64 x)) (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)))) eps (cos.f64 x))))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (fma.f64 (fma.f64 (neg.f64 (sin.f64 x)) (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/8 binary64))) eps (cos.f64 x))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (fma.f64 (sin.f64 (*.f64 eps #s(literal -1/2 binary64))) (sin.f64 x) (*.f64 (cos.f64 (*.f64 eps #s(literal -1/2 binary64))) (cos.f64 x)))))","(fma.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (/.f64 (sin.f64 (+.f64 eps x)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (/.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal -1/2 binary64))) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal -1/2 binary64))) (sin.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal -1/2 binary64))) (cos.f64 x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal -1/2 binary64))) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal -1/2 binary64))) (cos.f64 x)) (*.f64 (sin.f64 (*.f64 eps #s(literal -1/2 binary64))) (sin.f64 x))))))))"]],"memory":[[398784,16747296]],"oracle":[62.869460177561166],"outputs":[["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (/.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal -1/2 binary64))) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal -1/2 binary64))) (sin.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal -1/2 binary64))) (cos.f64 x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal -1/2 binary64))) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal -1/2 binary64))) (cos.f64 x)) (*.f64 (sin.f64 (*.f64 eps #s(literal -1/2 binary64))) (sin.f64 x))))))))"]],"repr":["binary64"],"time":29.762939453125,"times":[[9.43212890625,"x"],[9.296875,"eps"],[8.596923828125,"(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[0.025722509768442016],"baseline":[0.025722509768442016],"branch":[["x",0.025722509768442016,1,"binary64"],["eps",0.025722509768442016,1,"binary64"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",0.025722509768442016,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[42,1]],"inputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) #s(approx (+ (* (* -1/2 x) (* eps (+ x eps))) eps) (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) x))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x eps) #s(literal -1/2 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x x) #s(literal -1/2 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) #s(approx (* eps (+ x eps)) (*.f64 x eps)) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 x eps) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 x eps)) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (+.f64 x eps) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) (fma.f64 eps (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 eps (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/12 binary64) eps)) #s(literal -1/2 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps)) x (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) (*.f64 #s(literal -1/6 binary64) eps)) eps (cos.f64 x)) eps))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 eps #s(literal 1/2 binary64))) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/3840 binary64) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3840 binary64) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) #s(approx (cos (- (* -1/2 eps) x)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x)))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","#s(approx (- (sin (+ x eps)) (sin x)) (fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) eps (*.f64 (cos.f64 x) eps)))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (fma.f64 (fma.f64 (neg.f64 (sin.f64 x)) (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) (*.f64 #s(literal -1/8 binary64) (*.f64 (cos.f64 x) eps))) eps (cos.f64 x))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (fma.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) eps) (cos.f64 x) (*.f64 (neg.f64 (sin.f64 x)) (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)))) eps (cos.f64 x))))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (fma.f64 (fma.f64 (neg.f64 (sin.f64 x)) (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/8 binary64))) eps (cos.f64 x))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (fma.f64 (sin.f64 (*.f64 eps #s(literal -1/2 binary64))) (sin.f64 x) (*.f64 (cos.f64 (*.f64 eps #s(literal -1/2 binary64))) (cos.f64 x)))))","(fma.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (/.f64 (sin.f64 (+.f64 eps x)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))))))"]],"memory":[[151856,16407952]],"oracle":[62.869460177561166],"outputs":[["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (fma.f64 (sin.f64 (*.f64 eps #s(literal -1/2 binary64))) (sin.f64 x) (*.f64 (cos.f64 (*.f64 eps #s(literal -1/2 binary64))) (cos.f64 x)))))"]],"repr":["binary64"],"time":27.9560546875,"times":[[8.318115234375,"x"],[8.529052734375,"eps"],[8.73291015625,"(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[0.08707685291289793],"baseline":[0.08707685291289795],"branch":[["x",0.08707685291289793,1,"binary64"],["eps",0.08707685291289793,1,"binary64"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",0.08707685291289793,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[40,1]],"inputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) #s(approx (+ (* (* -1/2 x) (* eps (+ x eps))) eps) (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) x))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x eps) #s(literal -1/2 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x x) #s(literal -1/2 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) #s(approx (* eps (+ x eps)) (*.f64 x eps)) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 x eps) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 x eps)) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (+.f64 x eps) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) (fma.f64 eps (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 eps (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/12 binary64) eps)) #s(literal -1/2 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps)) x (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) (*.f64 #s(literal -1/6 binary64) eps)) eps (cos.f64 x)) eps))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 eps #s(literal 1/2 binary64))) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/3840 binary64) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3840 binary64) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) #s(approx (cos (- (* -1/2 eps) x)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x)))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","#s(approx (- (sin (+ x eps)) (sin x)) (fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps) eps (*.f64 (cos.f64 x) eps)))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (fma.f64 (fma.f64 (neg.f64 (sin.f64 x)) (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) (*.f64 #s(literal -1/8 binary64) (*.f64 (cos.f64 x) eps))) eps (cos.f64 x))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (fma.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) eps) (cos.f64 x) (*.f64 (neg.f64 (sin.f64 x)) (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)))) eps (cos.f64 x))))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (fma.f64 (fma.f64 (neg.f64 (sin.f64 x)) (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/8 binary64))) eps (cos.f64 x))))"]],"memory":[[-1436096,15786896]],"oracle":[60.985599983696744],"outputs":[["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) #s(approx (cos (- (* -1/2 eps) x)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x)))))"]],"repr":["binary64"],"time":26.994873046875,"times":[[8.072998046875,"x"],[8.404052734375,"eps"],[8.108154296875,"(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[0.09835624850173227],"baseline":[0.09835624850173226],"branch":[["x",0.09835624850173227,1,"binary64"],["eps",0.09835624850173226,1,"binary64"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",0.09835624850173227,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[28,1]],"inputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) #s(approx (+ (* (* -1/2 x) (* eps (+ x eps))) eps) (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) x))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x eps) #s(literal -1/2 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x x) #s(literal -1/2 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) #s(approx (* eps (+ x eps)) (*.f64 x eps)) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 x eps) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 x eps)) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (+.f64 x eps) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) (fma.f64 eps (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 eps (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/12 binary64) eps)) #s(literal -1/2 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps)) x (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) (*.f64 #s(literal -1/6 binary64) eps)) eps (cos.f64 x)) eps))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 eps #s(literal 1/2 binary64))) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/3840 binary64) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3840 binary64) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))"]],"memory":[[4151776,12341808]],"oracle":[60.985599983696744],"outputs":[["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/3840 binary64) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x))))"]],"repr":["binary64"],"time":19.6611328125,"times":[[6.093017578125,"x"],[5.748046875,"eps"],[6.1669921875,"(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[0.20171502055213864],"baseline":[0.20171502055213864],"branch":[["x",0.20171502055213866,1,"binary64"],["eps",0.20171502055213864,1,"binary64"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",0.20171502055213864,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[26,1]],"inputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) #s(approx (+ (* (* -1/2 x) (* eps (+ x eps))) eps) (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) x))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x eps) #s(literal -1/2 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x x) #s(literal -1/2 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) #s(approx (* eps (+ x eps)) (*.f64 x eps)) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 x eps) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 x eps)) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (+.f64 x eps) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) (fma.f64 eps (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 eps (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/12 binary64) eps)) #s(literal -1/2 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps)) x (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) (*.f64 #s(literal -1/6 binary64) eps)) eps (cos.f64 x)) eps))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 eps #s(literal 1/2 binary64))) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))"]],"memory":[[3656448,11848032]],"oracle":[60.985599983696744],"outputs":[["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))))"]],"repr":["binary64"],"time":18.163818359375,"times":[[5.531005859375,"x"],[5.4111328125,"eps"],[5.720947265625,"(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[0.4152128398717396],"baseline":[0.41521283987173957],"branch":[["x",0.4152128398717397,1,"binary64"],["eps",0.4152128398717396,1,"binary64"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",0.4152128398717396,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[23,1]],"inputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) #s(approx (+ (* (* -1/2 x) (* eps (+ x eps))) eps) (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) x))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x eps) #s(literal -1/2 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x x) #s(literal -1/2 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) #s(approx (* eps (+ x eps)) (*.f64 x eps)) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 x eps) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 x eps)) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (+.f64 x eps) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) (fma.f64 eps (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 eps (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/12 binary64) eps)) #s(literal -1/2 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps)) x (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) (*.f64 #s(literal -1/6 binary64) eps)) eps (cos.f64 x)) eps))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 eps #s(literal 1/2 binary64))) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))"]],"memory":[[-5834400,11002000]],"oracle":[60.985599983696744],"outputs":[["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x))))"]],"repr":["binary64"],"time":16.79296875,"times":[[5.26611328125,"x"],[4.948974609375,"eps"],[5.176025390625,"(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[0.6962720036039058],"baseline":[0.6962720036039058],"branch":[["x",0.6962720036039058,1,"binary64"],["eps",0.6962720036039058,1,"binary64"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",0.6962720036039058,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[19,1]],"inputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) #s(approx (+ (* (* -1/2 x) (* eps (+ x eps))) eps) (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) x))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x eps) #s(literal -1/2 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x x) #s(literal -1/2 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) #s(approx (* eps (+ x eps)) (*.f64 x eps)) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 x eps) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 x eps)) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (+.f64 x eps) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) (fma.f64 eps (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 eps (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/12 binary64) eps)) #s(literal -1/2 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps)) x (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) (*.f64 #s(literal -1/6 binary64) eps)) eps (cos.f64 x)) eps))"]],"memory":[[1590016,9844864]],"oracle":[60.985599983696744],"outputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))"]],"repr":["binary64"],"time":14.47021484375,"times":[[4.4150390625,"x"],[4.238037109375,"eps"],[4.510009765625,"(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[1.1095817058193762],"baseline":[1.1095817058193762],"branch":[["x",1.1095817058193762,1,"binary64"],["eps",1.1095817058193762,1,"binary64"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",1.1095817058193762,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[17,1]],"inputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) #s(approx (+ (* (* -1/2 x) (* eps (+ x eps))) eps) (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) x))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x eps) #s(literal -1/2 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x x) #s(literal -1/2 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) #s(approx (* eps (+ x eps)) (*.f64 x eps)) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 x eps) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 x eps)) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (+.f64 x eps) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) (fma.f64 eps (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 eps (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/12 binary64) eps)) #s(literal -1/2 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps)) x (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps))"]],"memory":[[1257536,9358912]],"oracle":[60.985599983696744],"outputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x #s(literal 1 binary64))) eps))"]],"repr":["binary64"],"time":13.2119140625,"times":[[3.867919921875,"x"],[4.23193359375,"eps"],[3.914794921875,"(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[1.1184699794532886],"baseline":[1.1184699794532889],"branch":[["x",1.1184699794532886,1,"binary64"],["eps",1.1184699794532886,1,"binary64"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",1.1184699794532886,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[13,1]],"inputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) #s(approx (+ (* (* -1/2 x) (* eps (+ x eps))) eps) (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) x))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x eps) #s(literal -1/2 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x x) #s(literal -1/2 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) #s(approx (* eps (+ x eps)) (*.f64 x eps)) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 x eps) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 x eps)) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (+.f64 x eps) (*.f64 (*.f64 x #s(literal -1/2 binary64)) eps) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 x eps) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) (fma.f64 eps (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64))) eps))"]],"memory":[[-15248,8191296]],"oracle":[60.98557063966614],"outputs":[["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 x eps)) eps)))"]],"repr":["binary64"],"time":10.73291015625,"times":[[3.163818359375,"x"],[3.35693359375,"eps"],[3.22900390625,"(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[1.1187624561628902],"baseline":[1.1187624561628902],"branch":[["x",1.1187624561628902,1,"binary64"],["eps",1.1187624561628902,1,"binary64"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",1.1187624561628902,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[7,1]],"inputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) #s(approx (+ (* (* -1/2 x) (* eps (+ x eps))) eps) (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) x))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x eps) #s(literal -1/2 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x x) #s(literal -1/2 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) #s(approx (* eps (+ x eps)) (*.f64 x eps)) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 x eps) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps))"]],"memory":[[-3721440,6613200]],"oracle":[60.98539133956558],"outputs":[["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) #s(approx (* eps (+ x eps)) (*.f64 x eps)) eps)))"]],"repr":["binary64"],"time":11.7841796875,"times":[[2.3740234375,"x"],[2.077880859375,"eps"],[2.265869140625,"(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[1.532837234567586],"baseline":[1.5328372345675862],"branch":[["x",1.532837234567586,1,"binary64"],["eps",1.5328372345675862,1,"binary64"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",1.5328372345675865,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[4,1]],"inputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) #s(approx (+ (* (* -1/2 x) (* eps (+ x eps))) eps) (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) x))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x eps) #s(literal -1/2 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(approx (+ (* (* -1/2 x) (+ x eps)) 1) (*.f64 (*.f64 x x) #s(literal -1/2 binary64)))) eps))"]],"link":["."],"memory":[[5707664,5707664]],"name":["2sin (example 3.3)"],"oracle":[60.98539124223432],"outputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))"]],"repr":["binary64"],"time":5.427001953125,"times":[[1.5869140625,"x"],[1.568115234375,"eps"],[1.696044921875,"(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"type":"regimes"},{"egraph":[[23,7882,411,0.026781062],[22,7471,411,0.039244999],[21,7374,411,0.039227328],[20,7312,411,0.040799001],[19,7215,411,0.032058397],[18,7052,411,0.034103995],[17,7052,411,0.021689875],[16,7022,411,0.023474318],[15,6698,411,0.033058664],[14,5869,411,0.026570906],[13,5147,411,0.017821137],[12,4772,411,0.016869486],[11,4511,411,0.015009407],[10,4225,411,0.014162795],[9,2992,411,0.018995747],[8,1807,411,0.013813499],[7,1040,411,0.009033439],[6,878,411,0.005040807],[5,805,411,0.005041529],[4,741,411,0.004580969],[3,542,411,0.004401762],[2,297,411,0.003850822],[1,160,411,0.002473631],[0,117,411,0.00203988]],"inputs":[["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (/.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal -1/2 binary64))) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal -1/2 binary64))) (sin.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal -1/2 binary64))) (cos.f64 x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal -1/2 binary64))) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal -1/2 binary64))) (cos.f64 x)) (*.f64 (sin.f64 (*.f64 eps #s(literal -1/2 binary64))) (sin.f64 x))))))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (fma.f64 (sin.f64 (*.f64 eps #s(literal -1/2 binary64))) (sin.f64 x) (*.f64 (cos.f64 (*.f64 eps #s(literal -1/2 binary64))) (cos.f64 x)))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) #s(approx (cos (- (* -1/2 eps) x)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x)))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/3840 binary64) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 x eps)) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) #s(approx (* eps (+ x eps)) (*.f64 x eps)) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))"]],"memory":[[-5803712,10318432]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (/.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal -1/2 binary64))) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal -1/2 binary64))) (sin.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal -1/2 binary64))) (cos.f64 x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal -1/2 binary64))) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal -1/2 binary64))) (cos.f64 x)) (*.f64 (sin.f64 (*.f64 eps #s(literal -1/2 binary64))) (sin.f64 x))))))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (fma.f64 (sin.f64 (*.f64 eps #s(literal -1/2 binary64))) (sin.f64 x) (*.f64 (cos.f64 (*.f64 eps #s(literal -1/2 binary64))) (cos.f64 x)))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) #s(approx (cos (- (* -1/2 eps) x)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x)))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/3840 binary64) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 x eps)) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) #s(approx (* eps (+ x eps)) (*.f64 x eps)) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))"]],"stop":[["node limit",1]],"time":469.412841796875,"type":"simplify"},{"compiler":[[423,123],[11,9],[4,4],[0,2],[0,2],[10,8],[0,2],[10,8],[29,18],[0,2],[4,4],[4,4],[21,18],[34,24],[28,18],[7,6],[37,27],[25,20],[28,18],[7,6],[31,23],[34,24],[28,18],[7,6],[0,2],[34,24],[28,18],[7,6],[43,31],[34,24],[28,18],[7,6],[43,31],[34,24],[28,18],[7,6]],"egraph":[[0,8163,1720,0.094426222],[2,4378,1884,0.023938502],[1,1478,1946,0.013123468],[0,486,2015,0.004649856],[0,8038,1097,0.089847326],[3,7994,1207,0.023143704],[2,3316,1207,0.021559818],[1,1196,1242,0.010136774],[0,390,1307,0.003586067],[0,8077,1202,0.085948978],[2,3206,1310,0.024865007],[1,1237,1344,0.011162447],[0,402,1388,0.004038959],[0,8157,253,0.086556064],[4,6191,283,0.02513941],[3,2853,284,0.024175489],[2,781,284,0.009907117],[1,314,291,0.002690472],[0,107,291,0.001101899],[0,8393,16,0.075661722],[3,4851,16,0.042938775],[2,385,16,0.014306794],[1,53,16,0.00153845],[0,10,16,0.00057173],[0,6,16,9.4479e-5],[0,8841,498,0.082498433],[2,3230,507,0.036655441],[1,402,507,0.01029364],[0,115,507,0.003072097],[0,77,519,0.000633527]],"memory":[[-1553584,15647680]],"stop":[["fuel",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1]],"time":2342.545166015625,"type":"soundness"},{"compiler":[[423,123],[423,123],[15,13],[15,13],[7,6],[7,6]],"memory":[[5941264,45709968]],"remove-preprocessing":[[],[],[],[],[],[],[],[],[],[],[],[]],"time":67.7958984375,"type":"preprocess"},{"memory":[[2256,2256]],"time":0.009033203125,"type":"end"}]