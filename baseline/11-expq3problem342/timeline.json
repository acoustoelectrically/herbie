[{"memory":[[52608,52608]],"time":0.06494140625,"type":"start"},{"compiler":[[52,27]],"memory":[[-1843776,49581232]],"method":["search"],"sampling":[[12,{"invalid":0.209961568909735,"precondition":0.7460122308758788,"unknown":0.04402620021438625,"valid":0.0}],[11,{"invalid":0.20363667817471048,"precondition":0.7460122308758788,"unknown":0.05035109094941075,"valid":0.0}],[10,{"invalid":0.19693973504350806,"precondition":0.7460122308758788,"unknown":0.05704803408061317,"valid":0.0}],[9,{"invalid":0.17164017210341007,"precondition":0.7460122308758788,"unknown":0.08234759702071119,"valid":0.0}],[8,{"invalid":0.160726635148858,"precondition":0.7460122308758788,"unknown":0.09326113397526327,"valid":0.0}],[7,{"invalid":0.1468366790248826,"precondition":0.7460122308758788,"unknown":0.10715109009923865,"valid":0.0}],[6,{"invalid":0.0714340600661591,"precondition":0.7460122308758788,"unknown":0.18255370905796214,"valid":0.0}],[5,{"invalid":0.04762270671077273,"precondition":0.7460122308758788,"unknown":0.2063650624133485,"valid":0.0}],[4,{"invalid":0.031748471140515155,"precondition":0.7460122308758788,"unknown":0.2222392979836061,"valid":0.0}],[3,{"invalid":0.0,"precondition":0.7460122308758788,"unknown":0.25398776912412124,"valid":0.0}],[2,{"invalid":0.0,"precondition":0.7460122308758788,"unknown":0.25398776912412124,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.7460122308758788,"unknown":0.25398776912412124,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.7460122308758788,"unknown":0.25398776912412124,"valid":0.0}]],"time":280.23095703125,"type":"analyze"},{"bogosity":[{"invalid":0.24884747739188381,"precondition":0.7460122308758788,"valid":0.005140291732237427}],"memory":[[199434672,4790270000]],"mixsample":[[520.314697265625,"ival-div",0],[688.515869140625,"ival-add",0],[857.762451171875,"ival-fabs",0],[3060.45703125,"ival-mult",0],[1249.578857421875,"ival-expm1",0],[31.747802734375,"ival-assert",0],[426.52197265625,"ival-fmin",0],[238.46337890625,"ival-and",0],[1295.03515625,"const",0],[54.4091796875,"exact",0],[781.450439453125,"ival-<=",0]],"outcomes":[[10462.267333984375,0,"invalid",62456],[1305.180908203125,0,"valid",8256]],"time":15485.8798828125,"type":"sample"},{"compiler":[[24,17],[101,19],[101,19]],"confusion":[[256,0,0,0]],"explanations":[["/.f64","(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))","n/u",17,0,[["(*.f64 b eps)","underflow",152],["(-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64))","underflow",157],["(-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))","underflow",152],["(*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64)))","underflow",231],["(*.f64 a eps)","underflow",157]],[[]]],["-.f64","(-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64))","cancellation",99,0,[],[[2,1]]],["-.f64","(-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))","cancellation",104,0,[],[[2,2]]],["-.f64","(-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))","cancellation",136,0,[],[[1,2]]],["/.f64","(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))","u/u",214,0,[["(*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64)))","underflow",214],["(*.f64 (+.f64 a b) eps)","underflow",120],["(-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))","underflow",120],["(*.f64 b eps)","underflow",152],["(-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64))","underflow",157],["(-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))","underflow",152],["(*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64)))","underflow",231],["(*.f64 a eps)","underflow",157]],[[]]]],"fperrors":[["(-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))",134,2,[1.4539447824850563e-264,-1.0680598734332441e-35,4.613556338345152e-289],0,false],["(-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))",102,2,[1.4539447824850563e-264,-1.0680598734332441e-35,4.613556338345152e-289],0,false],["(-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64))",98,1,[1.7820952078642436e-149,-1.3895426393366579e-92,4.0229323430032973e-175],0,false],["(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))",232,0,false,1,[5.111820958730445e-83,-4.603595160330475e-51,2.5887044857914525e-92]],["(+.f64 a b)",0,0,false,0,false],["(*.f64 b eps)",0,0,false,0,false],["(exp.f64 (*.f64 a eps))",0,0,false,0,false],["a",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(*.f64 a eps)",0,0,false,0,false],["(exp.f64 (*.f64 (+.f64 a b) eps))",0,0,false,0,false],["eps",0,0,false,0,false],["(*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64)))",0,0,false,0,false],["(*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64)))",0,0,false,0,false],["(*.f64 (+.f64 a b) eps)",0,0,false,0,false],["(exp.f64 (*.f64 b eps))",0,0,false,0,false],["b",0,0,false,0,false]],"freqs":[[4,42],[3,94],[1,120]],"maybe-confusion":[[256,0,0,0,0,0]],"memory":[[3666128,115135328]],"mixsample":[[3.375732421875,"ival-div",0],[0.488525390625,"ival-true",0],[2.921142578125,"ival-add",0],[13.30615234375,"ival-exp",0],[16.011474609375,"ival-mult",0],[7.64892578125,"ival-expm1",0],[0.322021484375,"exact",0],[0.229736328125,"ival-assert",0]],"outcomes":[[66.72216796875,0,"valid",512]],"time":199.384033203125,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[24,17]],"egraph":[[0,8094,18,0.008509134],[12,7965,24,0.025508053],[11,7935,24,0.024220123],[10,7852,24,0.022518297],[9,7551,24,0.025236964],[8,6201,24,0.026792624],[7,3499,24,0.030583977],[6,1292,24,0.01416802],[5,656,24,0.004533951],[4,327,24,0.002131602],[3,176,24,0.001116318],[2,109,24,0.000678723],[1,56,24,0.000411914],[0,30,24,0.000327199],[0,17,24,0.000187736],[4,7220,224,0.019695939],[3,2169,224,0.02761931],[2,708,227,0.007807111],[1,250,229,0.001993257],[0,82,233,0.000832333]],"inputs":[["(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))"]],"memory":[[-2836032,12815088]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))","(/.f64 (/.f64 (*.f64 eps (expm1.f64 (*.f64 (+.f64 b a) eps))) (expm1.f64 (*.f64 b eps))) (expm1.f64 (*.f64 a eps)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1],["node limit",1]],"symmetry":[["(sort a b)"]],"time":302.424072265625,"type":"preprocess"},{"compiler":[[0,3]],"memory":[[50624,50624]],"time":0.070068359375,"type":"eval"},{"alts":[["(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))","next",64.0,"binary64"]],"compiler":[[24,17]],"memory":[[329344,329344]],"time":0.452880859375,"type":"prune"},{"egraph":[[0,8094,81,0.031756085],[12,7965,99,0.025309329],[11,7935,99,0.024262714],[10,7852,99,0.022483399],[9,7551,99,0.025117883],[8,6201,99,0.02725622],[7,3499,99,0.029698533],[6,1292,99,0.014381408],[5,656,99,0.005326316],[4,327,99,0.002569656],[3,176,99,0.001161677],[2,109,99,0.000692866],[1,56,99,0.000417249],[0,30,99,0.000337833],[0,17,99,0.000207637]],"inputs":[["(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))","(*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64)))","eps","(-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))","(exp.f64 (*.f64 (+.f64 a b) eps))","(*.f64 (+.f64 a b) eps)","(+.f64 a b)","a","b","#s(literal 1 binary64)","(*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64)))","(-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64))","(exp.f64 (*.f64 a eps))","(*.f64 a eps)","(-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))","(exp.f64 (*.f64 b eps))","(*.f64 b eps)"]],"locations":[["(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))","cost-diff",0],["(-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))","cost-diff",2],["(-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64))","cost-diff",2],["(-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))","cost-diff",2]],"memory":[[548640,17819392]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))","(*.f64 (/.f64 (/.f64 eps (expm1.f64 (*.f64 b eps))) (expm1.f64 (*.f64 a eps))) (expm1.f64 (*.f64 (+.f64 b a) eps)))","(*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64)))","(*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps)","eps","(-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))","(expm1.f64 (*.f64 (+.f64 b a) eps))","(exp.f64 (*.f64 (+.f64 a b) eps))","(pow.f64 (exp.f64 eps) (+.f64 b a))","(*.f64 (+.f64 a b) eps)","(*.f64 (+.f64 b a) eps)","(+.f64 a b)","(+.f64 b a)","a","b","#s(literal 1 binary64)","(*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64)))","(*.f64 (expm1.f64 (*.f64 b eps)) (expm1.f64 (*.f64 a eps)))","(-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64))","(expm1.f64 (*.f64 a eps))","(exp.f64 (*.f64 a eps))","(pow.f64 (exp.f64 eps) a)","(*.f64 a eps)","(-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))","(expm1.f64 (*.f64 b eps))","(exp.f64 (*.f64 b eps))","(pow.f64 (exp.f64 eps) b)","(*.f64 b eps)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":297.177978515625,"type":"simplify"},{"compiler":[[101,19]],"locations":[["(-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))","accuracy",20.723789765495493],["(-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64))","accuracy",23.68121305479481],["(-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))","accuracy",29.622004314587173],["(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))","accuracy",55.69758544352145]],"memory":[[2438336,18435952]],"mixsample":[[1.602294921875,"ival-div",0],[0.20361328125,"ival-true",0],[2.034423828125,"ival-add",0],[5.86474609375,"ival-exp",0],[7.4580078125,"ival-mult",0],[3.9296875,"ival-expm1",0],[0.14453125,"exact",0],[0.098388671875,"ival-assert",0]],"outcomes":[[32.04931640625,0,"valid",256]],"time":43.9140625,"type":"localize"},{"count":[[4,44]],"inputs":[["(-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))","(-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64))","(-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))","(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))"]],"memory":[[-714848,7004704]],"outputs":[["(- (exp (* b eps)) 1)","(- (+ (exp (* b eps)) (* a (* eps (exp (* b eps))))) 1)","(- (+ (exp (* b eps)) (* a (+ (* 1/2 (* a (* (pow eps 2) (exp (* b eps))))) (* eps (exp (* b eps)))))) 1)","(- (+ (exp (* b eps)) (* a (+ (* a (+ (* 1/6 (* a (* (pow eps 3) (exp (* b eps))))) (* 1/2 (* (pow eps 2) (exp (* b eps)))))) (* eps (exp (* b eps)))))) 1)","(* a eps)","(* a (+ eps (* 1/2 (* a (pow eps 2)))))","(* a (+ eps (* a (+ (* 1/6 (* a (pow eps 3))) (* 1/2 (pow eps 2))))))","(* a (+ eps (* a (+ (* 1/2 (pow eps 2)) (* a (+ (* 1/24 (* a (pow eps 4))) (* 1/6 (pow eps 3))))))))","(/ 1 a)","(/ (+ 1 (* a (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (* a (- (* 1/6 (/ (* (pow eps 3) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(- (exp (* eps (+ a b))) 1)","(- (exp (* a eps)) 1)","(/ (* eps (- (exp (* eps (+ a b))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(- (exp (* eps (- b (* -1 a)))) 1)","(/ (* eps (- (exp (* eps (- b (* -1 a)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(- (+ (exp (* a eps)) (* b (* eps (exp (* a eps))))) 1)","(- (+ (exp (* a eps)) (* b (+ (* 1/2 (* b (* (pow eps 2) (exp (* a eps))))) (* eps (exp (* a eps)))))) 1)","(- (+ (exp (* a eps)) (* b (+ (* b (+ (* 1/6 (* b (* (pow eps 3) (exp (* a eps))))) (* 1/2 (* (pow eps 2) (exp (* a eps)))))) (* eps (exp (* a eps)))))) 1)","(* b eps)","(* b (+ eps (* 1/2 (* b (pow eps 2)))))","(* b (+ eps (* b (+ (* 1/6 (* b (pow eps 3))) (* 1/2 (pow eps 2))))))","(* b (+ eps (* b (+ (* 1/2 (pow eps 2)) (* b (+ (* 1/24 (* b (pow eps 4))) (* 1/6 (pow eps 3))))))))","(/ 1 b)","(/ (+ 1 (* b (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (* b (- (* 1/6 (/ (* (pow eps 3) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(- (exp (* eps (- a (* -1 b)))) 1)","(/ (* eps (- (exp (* eps (- a (* -1 b)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(* eps (+ a b))","(* eps (+ a (+ b (* 1/2 (* eps (pow (+ a b) 2))))))","(* eps (+ a (+ b (* eps (+ (* 1/6 (* eps (pow (+ a b) 3))) (* 1/2 (pow (+ a b) 2)))))))","(* eps (+ a (+ b (* eps (+ (* 1/2 (pow (+ a b) 2)) (* eps (+ (* 1/24 (* eps (pow (+ a b) 4))) (* 1/6 (pow (+ a b) 3)))))))))","(* eps (+ a (* 1/2 (* (pow a 2) eps))))","(* eps (+ a (* eps (+ (* 1/6 (* (pow a 3) eps)) (* 1/2 (pow a 2))))))","(* eps (+ a (* eps (+ (* 1/2 (pow a 2)) (* eps (+ (* 1/24 (* (pow a 4) eps)) (* 1/6 (pow a 3))))))))","(* eps (+ b (* 1/2 (* (pow b 2) eps))))","(* eps (+ b (* eps (+ (* 1/6 (* (pow b 3) eps)) (* 1/2 (pow b 2))))))","(* eps (+ b (* eps (+ (* 1/2 (pow b 2)) (* eps (+ (* 1/24 (* (pow b 4) eps)) (* 1/6 (pow b 3))))))))","(/ (+ a b) (* a b))","(+ (* eps (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (+ (* 1/6 (/ (pow (+ a b) 3) (* a b))) (* eps (- (* 1/24 (/ (pow (+ a b) 4) (* a b))) (+ (/ (* (+ a b) (+ (* 1/24 (* a (pow b 4))) (+ (* 1/24 (* (pow a 4) b)) (+ (* 1/12 (* (pow a 2) (pow b 3))) (* 1/12 (* (pow a 3) (pow b 2))))))) (* (pow a 2) (pow b 2))) (+ (/ (* (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2))))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b))))) (* a b))))))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))"]],"series":[[1.923828125,"((- (exp (* (+ a b) eps)) 1) (- (exp (* a eps)) 1) (- (exp (* b eps)) 1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))))","eps","-inf"],[1.697998046875,"((- (exp (* (+ a b) eps)) 1) (- (exp (* a eps)) 1) (- (exp (* b eps)) 1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))))","eps","inf"],[3.621826171875,"((- (exp (* (+ a b) eps)) 1) (- (exp (* a eps)) 1) (- (exp (* b eps)) 1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))))","eps","0"],[3.217041015625,"((- (exp (* (+ a b) eps)) 1) (- (exp (* a eps)) 1) (- (exp (* b eps)) 1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))))","b","-inf"],[2.9951171875,"((- (exp (* (+ a b) eps)) 1) (- (exp (* a eps)) 1) (- (exp (* b eps)) 1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))))","b","inf"],[1.903076171875,"((- (exp (* (+ a b) eps)) 1) (- (exp (* a eps)) 1) (- (exp (* b eps)) 1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))))","b","0"],[2.470947265625,"((- (exp (* (+ a b) eps)) 1) (- (exp (* a eps)) 1) (- (exp (* b eps)) 1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))))","a","-inf"],[1.882080078125,"((- (exp (* (+ a b) eps)) 1) (- (exp (* a eps)) 1) (- (exp (* b eps)) 1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))))","a","inf"],[2.12890625,"((- (exp (* (+ a b) eps)) 1) (- (exp (* a eps)) 1) (- (exp (* b eps)) 1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))))","a","0"]],"time":23.283935546875,"type":"series"},{"count":[[44,44]],"egraph":[[0,8118,1416,0.089306126],[2,3456,1586,0.022988557],[1,1079,1694,0.010872321],[0,336,1742,0.003509569]],"inputs":[["(- (exp (* b eps)) 1)","(- (+ (exp (* b eps)) (* a (* eps (exp (* b eps))))) 1)","(- (+ (exp (* b eps)) (* a (+ (* 1/2 (* a (* (pow eps 2) (exp (* b eps))))) (* eps (exp (* b eps)))))) 1)","(- (+ (exp (* b eps)) (* a (+ (* a (+ (* 1/6 (* a (* (pow eps 3) (exp (* b eps))))) (* 1/2 (* (pow eps 2) (exp (* b eps)))))) (* eps (exp (* b eps)))))) 1)","(* a eps)","(* a (+ eps (* 1/2 (* a (pow eps 2)))))","(* a (+ eps (* a (+ (* 1/6 (* a (pow eps 3))) (* 1/2 (pow eps 2))))))","(* a (+ eps (* a (+ (* 1/2 (pow eps 2)) (* a (+ (* 1/24 (* a (pow eps 4))) (* 1/6 (pow eps 3))))))))","(/ 1 a)","(/ (+ 1 (* a (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (* a (- (* 1/6 (/ (* (pow eps 3) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(- (exp (* eps (+ a b))) 1)","(- (exp (* a eps)) 1)","(/ (* eps (- (exp (* eps (+ a b))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(- (exp (* eps (- b (* -1 a)))) 1)","(/ (* eps (- (exp (* eps (- b (* -1 a)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(- (+ (exp (* a eps)) (* b (* eps (exp (* a eps))))) 1)","(- (+ (exp (* a eps)) (* b (+ (* 1/2 (* b (* (pow eps 2) (exp (* a eps))))) (* eps (exp (* a eps)))))) 1)","(- (+ (exp (* a eps)) (* b (+ (* b (+ (* 1/6 (* b (* (pow eps 3) (exp (* a eps))))) (* 1/2 (* (pow eps 2) (exp (* a eps)))))) (* eps (exp (* a eps)))))) 1)","(* b eps)","(* b (+ eps (* 1/2 (* b (pow eps 2)))))","(* b (+ eps (* b (+ (* 1/6 (* b (pow eps 3))) (* 1/2 (pow eps 2))))))","(* b (+ eps (* b (+ (* 1/2 (pow eps 2)) (* b (+ (* 1/24 (* b (pow eps 4))) (* 1/6 (pow eps 3))))))))","(/ 1 b)","(/ (+ 1 (* b (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (* b (- (* 1/6 (/ (* (pow eps 3) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(- (exp (* eps (- a (* -1 b)))) 1)","(/ (* eps (- (exp (* eps (- a (* -1 b)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(* eps (+ a b))","(* eps (+ a (+ b (* 1/2 (* eps (pow (+ a b) 2))))))","(* eps (+ a (+ b (* eps (+ (* 1/6 (* eps (pow (+ a b) 3))) (* 1/2 (pow (+ a b) 2)))))))","(* eps (+ a (+ b (* eps (+ (* 1/2 (pow (+ a b) 2)) (* eps (+ (* 1/24 (* eps (pow (+ a b) 4))) (* 1/6 (pow (+ a b) 3)))))))))","(* eps (+ a (* 1/2 (* (pow a 2) eps))))","(* eps (+ a (* eps (+ (* 1/6 (* (pow a 3) eps)) (* 1/2 (pow a 2))))))","(* eps (+ a (* eps (+ (* 1/2 (pow a 2)) (* eps (+ (* 1/24 (* (pow a 4) eps)) (* 1/6 (pow a 3))))))))","(* eps (+ b (* 1/2 (* (pow b 2) eps))))","(* eps (+ b (* eps (+ (* 1/6 (* (pow b 3) eps)) (* 1/2 (pow b 2))))))","(* eps (+ b (* eps (+ (* 1/2 (pow b 2)) (* eps (+ (* 1/24 (* (pow b 4) eps)) (* 1/6 (pow b 3))))))))","(/ (+ a b) (* a b))","(+ (* eps (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (+ (* 1/6 (/ (pow (+ a b) 3) (* a b))) (* eps (- (* 1/24 (/ (pow (+ a b) 4) (* a b))) (+ (/ (* (+ a b) (+ (* 1/24 (* a (pow b 4))) (+ (* 1/24 (* (pow a 4) b)) (+ (* 1/12 (* (pow a 2) (pow b 3))) (* 1/12 (* (pow a 3) (pow b 2))))))) (* (pow a 2) (pow b 2))) (+ (/ (* (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2))))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b))))) (* a b))))))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))"]],"memory":[[4081360,45889456]],"method":["egg-herbie"],"outputs":[["(- (exp (* b eps)) 1)","(expm1.f64 (*.f64 eps b))","(- (+ (exp (* b eps)) (* a (* eps (exp (* b eps))))) 1)","(fma.f64 (fma.f64 eps a #s(literal 1 binary64)) (pow.f64 (exp.f64 b) eps) #s(literal -1 binary64))","(- (+ (exp (* b eps)) (* a (+ (* 1/2 (* a (* (pow eps 2) (exp (* b eps))))) (* eps (exp (* b eps)))))) 1)","(fma.f64 (*.f64 (pow.f64 (exp.f64 b) eps) (fma.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 eps eps) eps)) a (expm1.f64 (*.f64 eps b)))","(- (+ (exp (* b eps)) (* a (+ (* a (+ (* 1/6 (* a (* (pow eps 3) (exp (* b eps))))) (* 1/2 (* (pow eps 2) (exp (* b eps)))))) (* eps (exp (* b eps)))))) 1)","(fma.f64 (fma.f64 (*.f64 (pow.f64 (exp.f64 b) eps) (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal 1/6 binary64) a) eps #s(literal 1/2 binary64)))) a (*.f64 (pow.f64 (exp.f64 b) eps) eps)) a (expm1.f64 (*.f64 eps b)))","(* a eps)","(*.f64 eps a)","(* a (+ eps (* 1/2 (* a (pow eps 2)))))","(*.f64 (fma.f64 (*.f64 (*.f64 a a) eps) #s(literal 1/2 binary64) a) eps)","(* a (+ eps (* a (+ (* 1/6 (* a (pow eps 3))) (* 1/2 (pow eps 2))))))","(*.f64 (fma.f64 (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal 1/6 binary64) a) eps #s(literal 1/2 binary64))) a eps) a)","(* a (+ eps (* a (+ (* 1/2 (pow eps 2)) (* a (+ (* 1/24 (* a (pow eps 4))) (* 1/6 (pow eps 3))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) a) #s(literal 1/24 binary64) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64))) a (*.f64 (*.f64 eps eps) #s(literal 1/2 binary64))) a eps) a)","(/ 1 a)","(/.f64 #s(literal 1 binary64) a)","(/ (+ 1 (* a (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) a)","(/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b))))) a #s(literal 1 binary64)) a)","(/ (+ 1 (* a (- (+ (* a (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b))))))) a (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b)))))) a #s(literal 1 binary64)) a)","(/ (+ 1 (* a (- (+ (* a (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (* a (- (* 1/6 (/ (* (pow eps 3) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b))) #s(literal 1/6 binary64)) #s(literal 1/24 binary64)) (neg.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b)))))) (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b))))))) eps) #s(literal 1/2 binary64))))) a (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b)))))))) a (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b)))))) a #s(literal 1 binary64)) a)","(- (exp (* eps (+ a b))) 1)","(expm1.f64 (*.f64 (+.f64 b a) eps))","(- (exp (* a eps)) 1)","(expm1.f64 (*.f64 eps a))","(/ (* eps (- (exp (* eps (+ a b))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps) (*.f64 (expm1.f64 (*.f64 eps a)) (expm1.f64 (*.f64 eps b))))","(- (exp (* eps (- b (* -1 a)))) 1)","(expm1.f64 (*.f64 (+.f64 b a) eps))","(/ (* eps (- (exp (* eps (- b (* -1 a)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps) (*.f64 (expm1.f64 (*.f64 eps a)) (expm1.f64 (*.f64 eps b))))","(- (+ (exp (* a eps)) (* b (* eps (exp (* a eps))))) 1)","(fma.f64 (fma.f64 eps b #s(literal 1 binary64)) (pow.f64 (exp.f64 a) eps) #s(literal -1 binary64))","(- (+ (exp (* a eps)) (* b (+ (* 1/2 (* b (* (pow eps 2) (exp (* a eps))))) (* eps (exp (* a eps)))))) 1)","(fma.f64 (*.f64 (pow.f64 (exp.f64 a) eps) (fma.f64 (*.f64 #s(literal 1/2 binary64) b) (*.f64 eps eps) eps)) b (expm1.f64 (*.f64 eps a)))","(- (+ (exp (* a eps)) (* b (+ (* b (+ (* 1/6 (* b (* (pow eps 3) (exp (* a eps))))) (* 1/2 (* (pow eps 2) (exp (* a eps)))))) (* eps (exp (* a eps)))))) 1)","(fma.f64 (fma.f64 (*.f64 (pow.f64 (exp.f64 a) eps) (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal 1/6 binary64) b) eps #s(literal 1/2 binary64)))) b (*.f64 (pow.f64 (exp.f64 a) eps) eps)) b (expm1.f64 (*.f64 eps a)))","(* b eps)","(*.f64 eps b)","(* b (+ eps (* 1/2 (* b (pow eps 2)))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) b) (*.f64 eps eps) eps) b)","(* b (+ eps (* b (+ (* 1/6 (* b (pow eps 3))) (* 1/2 (pow eps 2))))))","(*.f64 (fma.f64 (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal 1/6 binary64) b) eps #s(literal 1/2 binary64))) b eps) b)","(* b (+ eps (* b (+ (* 1/2 (pow eps 2)) (* b (+ (* 1/24 (* b (pow eps 4))) (* 1/6 (pow eps 3))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) b) #s(literal 1/24 binary64) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64))) b (*.f64 (*.f64 eps eps) #s(literal 1/2 binary64))) b eps) b)","(/ 1 b)","(/.f64 #s(literal 1 binary64) b)","(/ (+ 1 (* b (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) b)","(/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))) b #s(literal 1 binary64)) b)","(/ (+ 1 (* b (- (+ (* b (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))))) b (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a)))))) b #s(literal 1 binary64)) b)","(/ (+ 1 (* b (- (+ (* b (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (* b (- (* 1/6 (/ (* (pow eps 3) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))) #s(literal 1/6 binary64)) #s(literal 1/24 binary64)) (neg.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a)))))) (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))))) eps) #s(literal 1/2 binary64))))) b (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a)))))))) b (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a)))))) b #s(literal 1 binary64)) b)","(- (exp (* eps (- a (* -1 b)))) 1)","(expm1.f64 (*.f64 (+.f64 b a) eps))","(/ (* eps (- (exp (* eps (- a (* -1 b)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps) (*.f64 (expm1.f64 (*.f64 eps a)) (expm1.f64 (*.f64 eps b))))","(* eps (+ a b))","(*.f64 (+.f64 b a) eps)","(* eps (+ a (+ b (* 1/2 (* eps (pow (+ a b) 2))))))","(*.f64 (fma.f64 (*.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) #s(literal 1/2 binary64)) eps (+.f64 b a)) eps)","(* eps (+ a (+ b (* eps (+ (* 1/6 (* eps (pow (+ a b) 3))) (* 1/2 (pow (+ a b) 2)))))))","(*.f64 (fma.f64 (*.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) (+.f64 b a) #s(literal 1/2 binary64))) eps (+.f64 b a)) eps)","(* eps (+ a (+ b (* eps (+ (* 1/2 (pow (+ a b) 2)) (* eps (+ (* 1/24 (* eps (pow (+ a b) 4))) (* 1/6 (pow (+ a b) 3)))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 (+.f64 b a) #s(literal 4 binary64)) eps) #s(literal 1/24 binary64) (*.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) #s(literal 1/6 binary64))) eps (*.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) #s(literal 1/2 binary64))) eps (+.f64 b a)) eps)","(* eps (+ a (* 1/2 (* (pow a 2) eps))))","(*.f64 (fma.f64 (*.f64 (*.f64 a a) eps) #s(literal 1/2 binary64) a) eps)","(* eps (+ a (* eps (+ (* 1/6 (* (pow a 3) eps)) (* 1/2 (pow a 2))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) eps) #s(literal 1/6 binary64) (*.f64 (*.f64 a a) #s(literal 1/2 binary64))) eps a) eps)","(* eps (+ a (* eps (+ (* 1/2 (pow a 2)) (* eps (+ (* 1/24 (* (pow a 4) eps)) (* 1/6 (pow a 3))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) eps) #s(literal 1/24 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))) eps (*.f64 (*.f64 a a) #s(literal 1/2 binary64))) eps a) eps)","(* eps (+ b (* 1/2 (* (pow b 2) eps))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) b) (*.f64 eps eps) eps) b)","(* eps (+ b (* eps (+ (* 1/6 (* (pow b 3) eps)) (* 1/2 (pow b 2))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 b #s(literal 3 binary64)) eps) #s(literal 1/6 binary64) (*.f64 (*.f64 b b) #s(literal 1/2 binary64))) eps b) eps)","(* eps (+ b (* eps (+ (* 1/2 (pow b 2)) (* eps (+ (* 1/24 (* (pow b 4) eps)) (* 1/6 (pow b 3))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) eps) #s(literal 1/24 binary64) (*.f64 (pow.f64 b #s(literal 3 binary64)) #s(literal 1/6 binary64))) eps (*.f64 (*.f64 b b) #s(literal 1/2 binary64))) eps b) eps)","(/ (+ a b) (* a b))","(/.f64 (/.f64 (+.f64 b a) b) a)","(+ (* eps (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (fma.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/6 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) a)) (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) a) (pow.f64 b #s(literal 3 binary64)) (*.f64 b (fma.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) b (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))))) (*.f64 (*.f64 b a) a)) (/.f64 (+.f64 b a) b) (*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) b))))) eps (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a)))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (+ (* 1/6 (/ (pow (+ a b) 3) (* a b))) (* eps (- (* 1/24 (/ (pow (+ a b) 4) (* a b))) (+ (/ (* (+ a b) (+ (* 1/24 (* a (pow b 4))) (+ (* 1/24 (* (pow a 4) b)) (+ (* 1/12 (* (pow a 2) (pow b 3))) (* 1/12 (* (pow a 3) (pow b 2))))))) (* (pow a 2) (pow b 2))) (+ (/ (* (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2))))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b))))) (* a b))))))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/24 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 4 binary64)) a)) (fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 (*.f64 b a) a) b) (+.f64 b a)) #s(literal 1/12 binary64) (*.f64 #s(literal 1/24 binary64) (fma.f64 (pow.f64 a #s(literal 4 binary64)) b (*.f64 (pow.f64 b #s(literal 4 binary64)) a)))) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (fma.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/6 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) a)) (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) a) (pow.f64 b #s(literal 3 binary64)) (*.f64 b (fma.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) b (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))))) (*.f64 (*.f64 b a) a)) (/.f64 (+.f64 b a) b) (*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) b))))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) b)) (*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) a) (pow.f64 b #s(literal 3 binary64)) (*.f64 b (fma.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) b (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))))) (*.f64 b a)))))) eps (-.f64 (*.f64 (/.f64 #s(literal 1/6 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) a)) (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) a) (pow.f64 b #s(literal 3 binary64)) (*.f64 b (fma.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) b (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))))) (*.f64 (*.f64 b a) a)) (/.f64 (+.f64 b a) b) (*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) b)))))) eps (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a)))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))"]],"stop":[["iter limit",1],["node limit",1]],"time":256.274169921875,"type":"simplify"},{"count":[[4,364]],"egraph":[[0,8509,32,0.064538951],[2,766,44,0.026231634],[1,108,44,0.002538713],[0,30,44,0.001032253],[0,17,44,0.000191895]],"inputs":[["(-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))","(-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64))","(-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))","(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))"]],"memory":[[2217568,54481264]],"outputs":[["(*.f64 (+.f64 (pow.f64 (exp.f64 (+.f64 b a)) (*.f64 eps #s(literal 1/2 binary64))) #s(literal 1 binary64)) (expm1.f64 (*.f64 (+.f64 b a) (*.f64 eps #s(literal 1/2 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))) (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) #s(literal 1 binary64)))","(*.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)))))","(*.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)))))","(*.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) #s(literal 1 binary64)) (*.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)))))","(*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 eps (+.f64 b a))))","(pow.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 eps (+.f64 b a)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)))) (*.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 (+.f64 b a) #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))) (/.f64 (pow.f64 (exp.f64 eps) (*.f64 (+.f64 b a) #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)))) (*.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 (+.f64 b a) #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))) (fma.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 (+.f64 b a) #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 (+.f64 b a) #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))) (/.f64 (pow.f64 (exp.f64 eps) (*.f64 (+.f64 b a) #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))) (fma.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 (+.f64 b a) #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 eps) (*.f64 (+.f64 b a) #s(literal 3 binary64)))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (*.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 eps) (+.f64 b a))))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) #s(literal 1 binary64)) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 eps (+.f64 b a))) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 eps (+.f64 b a))) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 (+.f64 b a) #s(literal 3 binary64))) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (*.f64 (+.f64 b a) #s(literal 3 binary64))))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 eps) (*.f64 (+.f64 b a) #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a)))) (-.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 eps) (+.f64 b a))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) #s(literal 1 binary64)) (*.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))))","(/.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 eps (+.f64 b a))))))","(/.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))) (-.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) #s(literal 1 binary64)) (*.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))))","(/.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) #s(literal 1 binary64)) (*.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))) (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 eps (+.f64 b a)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 eps (+.f64 b a)))))","(neg.f64 (neg.f64 (expm1.f64 (*.f64 eps (+.f64 b a)))))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 (+.f64 b a)) (*.f64 eps #s(literal 1/2 binary64)))) (pow.f64 (exp.f64 (+.f64 b a)) (*.f64 eps #s(literal 1/2 binary64))) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 eps) (/.f64 (+.f64 b a) #s(literal 2 binary64))) (pow.f64 (exp.f64 eps) (/.f64 (+.f64 b a) #s(literal 2 binary64))) #s(literal -1 binary64))","(fma.f64 (/.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 (+.f64 b a)) (*.f64 eps #s(literal 1/2 binary64))) (*.f64 (pow.f64 (exp.f64 (+.f64 b a)) (*.f64 eps #s(literal 1/2 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 (+.f64 b a)) (*.f64 eps #s(literal 1/2 binary64))) (pow.f64 (exp.f64 (+.f64 b a)) (*.f64 eps #s(literal 1/2 binary64))) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 eps) (*.f64 (+.f64 b a) #s(literal 3 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 eps) b) (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 eps) a) (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal 1 binary64) #s(literal -1 binary64))","(expm1.f64 (*.f64 (log.f64 (exp.f64 eps)) (+.f64 b a)))","(expm1.f64 (*.f64 eps (+.f64 b a)))","(-.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 (+.f64 b a) #s(literal 3 binary64))) (-.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) #s(literal 1 binary64)) (*.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)))) (/.f64 #s(literal 1 binary64) (-.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) #s(literal 1 binary64)) (*.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)))))","(-.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 (+.f64 b a) #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal 1 binary64))","(+.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 (+.f64 b a) #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 eps) (+.f64 b a)))","(+.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))","(*.f64 (+.f64 (pow.f64 (exp.f64 a) (*.f64 eps #s(literal 1/2 binary64))) #s(literal 1 binary64)) (expm1.f64 (*.f64 a (*.f64 eps #s(literal 1/2 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64))) (/.f64 (expm1.f64 (*.f64 eps a)) #s(literal 1 binary64)))","(*.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)))))","(*.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)))))","(*.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 eps a)) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 2 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) #s(literal 1 binary64)) (*.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)))))","(*.f64 (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 3 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 eps a)))","(pow.f64 (pow.f64 (expm1.f64 (*.f64 eps a)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)))) (*.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64))) (/.f64 (pow.f64 (exp.f64 eps) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)))) (*.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64))) (fma.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64))) (/.f64 (pow.f64 (exp.f64 eps) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64))) (fma.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 eps) (*.f64 a #s(literal 3 binary64)))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 eps) a)))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (*.f64 eps a) #s(literal 3 binary64)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 eps) a) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (*.f64 a #s(literal 3 binary64))))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (pow.f64 (exp.f64 eps) a) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) #s(literal 1 binary64)) (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 eps a)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 eps) a) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)))) (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 eps a)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 a #s(literal 3 binary64))) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64))) (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 eps) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a))) (-.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 eps) a)))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 2 binary64)))) (neg.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 3 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) #s(literal 1 binary64)) (*.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 3 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64))))","(/.f64 (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 2 binary64))) (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (expm1.f64 (*.f64 eps a)) #s(literal -1 binary64))))","(/.f64 (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 3 binary64))) (-.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) #s(literal 1 binary64)) (*.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64))))","(/.f64 (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) #s(literal 1 binary64)) (*.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64))) (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (expm1.f64 (*.f64 eps a)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (expm1.f64 (*.f64 eps a)) #s(literal -1 binary64)))","(neg.f64 (neg.f64 (expm1.f64 (*.f64 eps a))))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 a) (*.f64 eps #s(literal 1/2 binary64)))) (pow.f64 (exp.f64 a) (*.f64 eps #s(literal 1/2 binary64))) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 eps) (/.f64 a #s(literal 2 binary64))) (pow.f64 (exp.f64 eps) (/.f64 a #s(literal 2 binary64))) #s(literal -1 binary64))","(fma.f64 (/.f64 (pow.f64 (exp.f64 eps) a) (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 a) (*.f64 eps #s(literal 1/2 binary64))) (*.f64 (pow.f64 (exp.f64 a) (*.f64 eps #s(literal 1/2 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 a) (*.f64 eps #s(literal 1/2 binary64))) (pow.f64 (exp.f64 a) (*.f64 eps #s(literal 1/2 binary64))) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 eps) (*.f64 a #s(literal 3 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64))","(expm1.f64 (*.f64 (log.f64 (exp.f64 eps)) a))","(expm1.f64 (*.f64 eps a))","(-.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 a #s(literal 3 binary64))) (-.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) #s(literal 1 binary64)) (*.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)))) (/.f64 #s(literal 1 binary64) (-.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) #s(literal 1 binary64)) (*.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)))))","(-.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64))","(+.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64))) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 eps) a))","(+.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64))","(*.f64 (+.f64 (pow.f64 (exp.f64 b) (*.f64 eps #s(literal 1/2 binary64))) #s(literal 1 binary64)) (expm1.f64 (*.f64 b (*.f64 eps #s(literal 1/2 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))) (/.f64 (expm1.f64 (*.f64 eps b)) #s(literal 1 binary64)))","(*.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)))))","(*.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)))))","(*.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 eps b)) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) #s(literal 1 binary64)) (*.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)))))","(*.f64 (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 eps b)))","(pow.f64 (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)))) (*.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 b #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64))) (/.f64 (pow.f64 (exp.f64 eps) (*.f64 b #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)))) (*.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 b #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))) (fma.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 b #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 b #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64))) (/.f64 (pow.f64 (exp.f64 eps) (*.f64 b #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64))) (fma.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 b #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 eps) (*.f64 b #s(literal 3 binary64)))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (*.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 eps) b)))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 eps) b) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (*.f64 b #s(literal 3 binary64))))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (pow.f64 (exp.f64 eps) b) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) #s(literal 1 binary64)) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 eps b)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 eps) b) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)))) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 eps b)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 eps) (*.f64 b #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b))) (-.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 eps) b)))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64)))) (neg.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) #s(literal 1 binary64)) (*.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64))))","(/.f64 (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64))) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64))))","(/.f64 (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64))) (-.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) #s(literal 1 binary64)) (*.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))))","(/.f64 (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) #s(literal 1 binary64)) (*.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64)))","(neg.f64 (neg.f64 (expm1.f64 (*.f64 eps b))))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 b) (*.f64 eps #s(literal 1/2 binary64)))) (pow.f64 (exp.f64 b) (*.f64 eps #s(literal 1/2 binary64))) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 eps) (/.f64 b #s(literal 2 binary64))) (pow.f64 (exp.f64 eps) (/.f64 b #s(literal 2 binary64))) #s(literal -1 binary64))","(fma.f64 (/.f64 (pow.f64 (exp.f64 eps) b) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 b) (*.f64 eps #s(literal 1/2 binary64))) (*.f64 (pow.f64 (exp.f64 b) (*.f64 eps #s(literal 1/2 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 b) (*.f64 eps #s(literal 1/2 binary64))) (pow.f64 (exp.f64 b) (*.f64 eps #s(literal 1/2 binary64))) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 eps) (*.f64 b #s(literal 3 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))","(expm1.f64 (*.f64 (log.f64 (exp.f64 eps)) b))","(expm1.f64 (*.f64 eps b))","(-.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 b #s(literal 3 binary64))) (-.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) #s(literal 1 binary64)) (*.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)))) (/.f64 #s(literal 1 binary64) (-.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) #s(literal 1 binary64)) (*.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)))))","(-.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 b #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64))","(+.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 b #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64))) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 eps) b))","(+.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))","(*.f64 (*.f64 (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64)) (expm1.f64 (*.f64 eps (+.f64 b a)))) eps)","(*.f64 (*.f64 (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64)) eps) (expm1.f64 (*.f64 eps (+.f64 b a))))","(*.f64 (*.f64 (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps b))) (/.f64 eps (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 2 binary64))))) (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps b))) (/.f64 eps (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 3 binary64))))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)))","(*.f64 (*.f64 (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps b))) eps) (pow.f64 (expm1.f64 (*.f64 eps a)) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 eps (expm1.f64 (*.f64 eps a))) (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64))))) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 eps (expm1.f64 (*.f64 eps a))) (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64))))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64))))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps a)))) (/.f64 eps (expm1.f64 (*.f64 eps b))))","(*.f64 (*.f64 #s(literal 1 binary64) (/.f64 eps (expm1.f64 (*.f64 eps b)))) (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps a))))","(*.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 eps) (expm1.f64 (*.f64 eps (+.f64 b a))))) (/.f64 #s(literal -1 binary64) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a)))))","(*.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64))))) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps)) #s(literal -1/2 binary64)) (pow.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps)) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (/.f64 eps (expm1.f64 (*.f64 eps a))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64)))) (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 eps (expm1.f64 (*.f64 eps a))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps) (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 2 binary64)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64)))) (/.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps) (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 2 binary64)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (/.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps) (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 3 binary64)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64)))) (/.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps) (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 3 binary64)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (/.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64)))) (/.f64 (pow.f64 (expm1.f64 (*.f64 eps a)) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (/.f64 (pow.f64 (expm1.f64 (*.f64 eps a)) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 eps (+.f64 b a)))) #s(literal -1 binary64)) (/.f64 eps (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a)))))","(*.f64 (/.f64 (neg.f64 eps) #s(literal -1 binary64)) (/.f64 (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps b))) (expm1.f64 (*.f64 eps a))))","(*.f64 (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (neg.f64 (expm1.f64 (*.f64 eps a)))) (/.f64 (neg.f64 eps) (expm1.f64 (*.f64 eps b))))","(*.f64 (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (neg.f64 (expm1.f64 (*.f64 eps b)))) (/.f64 (neg.f64 eps) (expm1.f64 (*.f64 eps a))))","(*.f64 (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) #s(literal -1 binary64)) (/.f64 (neg.f64 eps) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a)))))","(*.f64 (/.f64 eps (neg.f64 (expm1.f64 (*.f64 eps a)))) (/.f64 (neg.f64 (expm1.f64 (*.f64 eps (+.f64 b a)))) (expm1.f64 (*.f64 eps b))))","(*.f64 (/.f64 eps (neg.f64 (expm1.f64 (*.f64 eps b)))) (/.f64 (neg.f64 (expm1.f64 (*.f64 eps (+.f64 b a)))) (expm1.f64 (*.f64 eps a))))","(*.f64 (/.f64 eps #s(literal -1 binary64)) (/.f64 (neg.f64 (expm1.f64 (*.f64 eps (+.f64 b a)))) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a)))))","(*.f64 (/.f64 eps (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64)))) (/.f64 (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps a))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 eps (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (/.f64 (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps a))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 eps b))) (/.f64 (*.f64 (neg.f64 eps) (expm1.f64 (*.f64 eps (+.f64 b a)))) (expm1.f64 (*.f64 eps a))))","(*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 eps a))) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps) (neg.f64 (expm1.f64 (*.f64 eps b)))))","(*.f64 (/.f64 (neg.f64 eps) (expm1.f64 (*.f64 eps a))) (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (neg.f64 (expm1.f64 (*.f64 eps b)))))","(*.f64 (/.f64 (neg.f64 eps) (expm1.f64 (*.f64 eps b))) (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (neg.f64 (expm1.f64 (*.f64 eps a)))))","(*.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 eps (+.f64 b a)))) (expm1.f64 (*.f64 eps a))) (/.f64 eps (neg.f64 (expm1.f64 (*.f64 eps b)))))","(*.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 eps (+.f64 b a)))) (expm1.f64 (*.f64 eps b))) (/.f64 eps (neg.f64 (expm1.f64 (*.f64 eps a)))))","(*.f64 (*.f64 #s(literal 1 binary64) eps) (/.f64 (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps b))) (expm1.f64 (*.f64 eps a))))","(*.f64 (pow.f64 (/.f64 (expm1.f64 (*.f64 eps b)) eps) #s(literal -1 binary64)) (pow.f64 (/.f64 (expm1.f64 (*.f64 eps a)) (expm1.f64 (*.f64 eps (+.f64 b a)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (expm1.f64 (*.f64 eps a)) (expm1.f64 (*.f64 eps (+.f64 b a)))) #s(literal -1 binary64)) (pow.f64 (/.f64 (expm1.f64 (*.f64 eps b)) eps) #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps) (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 2 binary64)))) (*.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64))))","(*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps) (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 3 binary64)))) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)) (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64)))) (*.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) (/.f64 eps (expm1.f64 (*.f64 eps a)))))","(*.f64 (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64)))) (/.f64 (/.f64 eps (expm1.f64 (*.f64 eps a))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)) (/.f64 eps (expm1.f64 (*.f64 eps a)))))","(*.f64 (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (/.f64 (/.f64 eps (expm1.f64 (*.f64 eps a))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 eps (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 2 binary64)))) (*.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps b)))))","(*.f64 (/.f64 eps (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 2 binary64)))) (/.f64 (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps b))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 eps (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 3 binary64)))) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)) (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps b)))))","(*.f64 (/.f64 eps (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 3 binary64)))) (/.f64 (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps b))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64)))) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)))","(*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps) (expm1.f64 (*.f64 eps b))) (pow.f64 (expm1.f64 (*.f64 eps a)) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 eps (expm1.f64 (*.f64 eps a))) (expm1.f64 (*.f64 eps (+.f64 b a)))) (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (expm1.f64 (*.f64 eps (+.f64 b a)))) (*.f64 eps (/.f64 #s(literal -1 binary64) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))))))","(*.f64 (pow.f64 (expm1.f64 (*.f64 eps a)) #s(literal -1 binary64)) (pow.f64 (/.f64 (expm1.f64 (*.f64 eps b)) (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (expm1.f64 (*.f64 eps a)) #s(literal -1 binary64)) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps) (expm1.f64 (*.f64 eps b))))","(*.f64 (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))))","(*.f64 (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps a))) (/.f64 eps (expm1.f64 (*.f64 eps b))))","(*.f64 (/.f64 eps (expm1.f64 (*.f64 eps b))) (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps a))))","(*.f64 (neg.f64 eps) (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 #s(literal -1 binary64) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))))))","(*.f64 (/.f64 (*.f64 (neg.f64 eps) (expm1.f64 (*.f64 eps (+.f64 b a)))) (expm1.f64 (*.f64 eps a))) (/.f64 #s(literal 1 binary64) (neg.f64 (expm1.f64 (*.f64 eps b)))))","(*.f64 (/.f64 (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps b))) (expm1.f64 (*.f64 eps a))) eps)","(*.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) (*.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 eps (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))))))","(*.f64 #s(literal -1 binary64) (*.f64 (/.f64 (neg.f64 eps) (expm1.f64 (*.f64 eps a))) (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps b)))))","(*.f64 (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps))","(*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))) (*.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 eps (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))))))","(*.f64 (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps b))) (/.f64 eps (expm1.f64 (*.f64 eps a))))","(*.f64 (/.f64 eps (expm1.f64 (*.f64 eps a))) (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps b))))","(*.f64 (*.f64 (neg.f64 eps) (expm1.f64 (*.f64 eps (+.f64 b a)))) (/.f64 #s(literal -1 binary64) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a)))))","(*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a)))) #s(literal 1 binary64))","(*.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps) (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (*.f64 (/.f64 eps (expm1.f64 (*.f64 eps a))) (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64))))","(*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (*.f64 (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64)) (/.f64 eps (expm1.f64 (*.f64 eps a)))))","(*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (*.f64 (neg.f64 eps) (/.f64 #s(literal -1 binary64) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))))))","(*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (*.f64 (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64)) eps))","(*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a)))))","(*.f64 #s(literal 1 binary64) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a)))))","(*.f64 eps (*.f64 (pow.f64 (expm1.f64 (*.f64 eps a)) #s(literal -1 binary64)) (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps b)))))","(*.f64 eps (/.f64 (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps b))) (expm1.f64 (*.f64 eps a))))","(pow.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps)) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps) (expm1.f64 (*.f64 eps b)))) (neg.f64 (expm1.f64 (*.f64 eps a))))","(/.f64 (neg.f64 (*.f64 (/.f64 eps (expm1.f64 (*.f64 eps a))) (expm1.f64 (*.f64 eps (+.f64 b a))))) (neg.f64 (expm1.f64 (*.f64 eps b))))","(/.f64 (*.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)))) (*.f64 (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64))) (neg.f64 (expm1.f64 (*.f64 eps b)))))","(/.f64 (*.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (+.f64 (pow.f64 (exp.f64 eps) (*.f64 b #s(literal 3 binary64))) #s(literal 1 binary64))) (*.f64 (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64))) (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (neg.f64 (expm1.f64 (*.f64 eps b))))))","(/.f64 (*.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (*.f64 b #s(literal 3 binary64))))) (*.f64 (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64))) (+.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (exp.f64 eps) b) (expm1.f64 (*.f64 eps b))))))","(/.f64 (*.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64)))) (*.f64 (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64))) (expm1.f64 (*.f64 eps b))))","(/.f64 (*.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (-.f64 (pow.f64 (pow.f64 (exp.f64 eps) b) #s(literal 4 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal 2 binary64)))) (*.f64 (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64))) (-.f64 (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64))) (pow.f64 (exp.f64 eps) b))))","(/.f64 (*.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (+.f64 (pow.f64 (pow.f64 (exp.f64 eps) b) #s(literal 6 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal 3 binary64)))) (*.f64 (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64))) (+.f64 (pow.f64 (pow.f64 (exp.f64 eps) b) #s(literal 4 binary64)) (*.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) (-.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)))))))","(/.f64 (*.f64 (*.f64 (neg.f64 eps) (expm1.f64 (*.f64 eps (+.f64 b a)))) #s(literal 1 binary64)) (*.f64 (neg.f64 (expm1.f64 (*.f64 eps a))) (expm1.f64 (*.f64 eps b))))","(/.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 eps a)) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) eps)) (*.f64 (expm1.f64 (*.f64 eps b)) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))))","(/.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 eps a)) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))) eps)) (*.f64 (expm1.f64 (*.f64 eps b)) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 eps a)) #s(literal -1 binary64)) (*.f64 eps (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))))) (*.f64 (expm1.f64 (*.f64 eps b)) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))))","(/.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 eps a)) #s(literal -1 binary64)) (*.f64 eps (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))))) (*.f64 (expm1.f64 (*.f64 eps b)) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) eps)) (*.f64 (expm1.f64 (*.f64 eps a)) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))))","(/.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))) eps)) (*.f64 (expm1.f64 (*.f64 eps a)) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64)) (*.f64 eps (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))))) (*.f64 (expm1.f64 (*.f64 eps a)) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))))","(/.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64)) (*.f64 eps (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))))) (*.f64 (expm1.f64 (*.f64 eps a)) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal -1 binary64) (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) eps)) (*.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 eps a))) (expm1.f64 (*.f64 eps b))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))))","(/.f64 (*.f64 #s(literal -1 binary64) (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))) eps)) (*.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 eps a))) (expm1.f64 (*.f64 eps b))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal -1 binary64) (*.f64 eps (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))))) (*.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 eps a))) (expm1.f64 (*.f64 eps b))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))))","(/.f64 (*.f64 #s(literal -1 binary64) (*.f64 eps (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))))) (*.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 eps a))) (expm1.f64 (*.f64 eps b))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) eps)) (*.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))) eps)) (*.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 eps (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))))) (*.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 eps (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))))) (*.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 eps (+.f64 b a)))) #s(literal 1 binary64)) (*.f64 (neg.f64 (expm1.f64 (*.f64 eps b))) (/.f64 (expm1.f64 (*.f64 eps a)) eps)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) (neg.f64 eps)) (*.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))) (neg.f64 (expm1.f64 (*.f64 eps a)))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))) (/.f64 (expm1.f64 (*.f64 eps a)) eps)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))) (neg.f64 eps)) (*.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))) (neg.f64 (expm1.f64 (*.f64 eps a)))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))) (/.f64 (expm1.f64 (*.f64 eps a)) eps)))","(/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) #s(literal 1 binary64)) (*.f64 (expm1.f64 (*.f64 eps b)) (/.f64 (expm1.f64 (*.f64 eps a)) eps)))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 eps)) (*.f64 (/.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps (+.f64 b a)))) (neg.f64 (expm1.f64 (*.f64 eps a)))))","(/.f64 (*.f64 (neg.f64 eps) (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64)))) (*.f64 (neg.f64 (expm1.f64 (*.f64 eps a))) (*.f64 (expm1.f64 (*.f64 eps b)) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)))))","(/.f64 (*.f64 (neg.f64 eps) (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64)))) (*.f64 (neg.f64 (expm1.f64 (*.f64 eps a))) (*.f64 (expm1.f64 (*.f64 eps b)) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)))))","(/.f64 (*.f64 (neg.f64 eps) #s(literal 1 binary64)) (*.f64 (neg.f64 (expm1.f64 (*.f64 eps a))) (/.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps (+.f64 b a))))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (expm1.f64 (*.f64 eps (+.f64 b a))))) (*.f64 (/.f64 (expm1.f64 (*.f64 eps a)) eps) (neg.f64 (expm1.f64 (*.f64 eps b)))))","(/.f64 (*.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64)))) (*.f64 (/.f64 (expm1.f64 (*.f64 eps a)) eps) (*.f64 (expm1.f64 (*.f64 eps b)) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64)))) (*.f64 (/.f64 (expm1.f64 (*.f64 eps a)) eps) (*.f64 (expm1.f64 (*.f64 eps b)) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)))))","(/.f64 (*.f64 eps #s(literal 1 binary64)) (*.f64 (expm1.f64 (*.f64 eps a)) (/.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps (+.f64 b a))))))","(/.f64 (*.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) eps) (pow.f64 (expm1.f64 (*.f64 eps a)) #s(literal -1 binary64))) (*.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) (expm1.f64 (*.f64 eps b))))","(/.f64 (*.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) eps) (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64))) (*.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) (expm1.f64 (*.f64 eps a))))","(/.f64 (*.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) eps) #s(literal -1 binary64)) (*.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) (*.f64 (neg.f64 (expm1.f64 (*.f64 eps a))) (expm1.f64 (*.f64 eps b)))))","(/.f64 (*.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) eps) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a)))))","(/.f64 (*.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))) eps) (pow.f64 (expm1.f64 (*.f64 eps a)) #s(literal -1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) (expm1.f64 (*.f64 eps b))))","(/.f64 (*.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))) eps) (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) (expm1.f64 (*.f64 eps a))))","(/.f64 (*.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))) eps) #s(literal -1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) (*.f64 (neg.f64 (expm1.f64 (*.f64 eps a))) (expm1.f64 (*.f64 eps b)))))","(/.f64 (*.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))) eps) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a)))))","(/.f64 (*.f64 (*.f64 eps (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64)))) (pow.f64 (expm1.f64 (*.f64 eps a)) #s(literal -1 binary64))) (*.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) (expm1.f64 (*.f64 eps b))))","(/.f64 (*.f64 (*.f64 eps (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64)))) (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64))) (*.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) (expm1.f64 (*.f64 eps a))))","(/.f64 (*.f64 (*.f64 eps (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64)))) #s(literal -1 binary64)) (*.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) (*.f64 (neg.f64 (expm1.f64 (*.f64 eps a))) (expm1.f64 (*.f64 eps b)))))","(/.f64 (*.f64 (*.f64 eps (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64)))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a)))))","(/.f64 (*.f64 (*.f64 eps (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64)))) (pow.f64 (expm1.f64 (*.f64 eps a)) #s(literal -1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) (expm1.f64 (*.f64 eps b))))","(/.f64 (*.f64 (*.f64 eps (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64)))) (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) (expm1.f64 (*.f64 eps a))))","(/.f64 (*.f64 (*.f64 eps (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64)))) #s(literal -1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) (*.f64 (neg.f64 (expm1.f64 (*.f64 eps a))) (expm1.f64 (*.f64 eps b)))))","(/.f64 (*.f64 (*.f64 eps (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a)))))","(/.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64)))) eps) (*.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a)))))","(/.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64)))) eps) (*.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a)))))","(/.f64 (*.f64 #s(literal 1 binary64) eps) (*.f64 (/.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps (+.f64 b a)))) (expm1.f64 (*.f64 eps a))))","(/.f64 (*.f64 #s(literal 1 binary64) eps) (*.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 eps (+.f64 b a)))) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a)))))","(/.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps) (expm1.f64 (*.f64 eps b))) (expm1.f64 (*.f64 eps a)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) eps) (*.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))) (expm1.f64 (*.f64 eps a))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) eps) (*.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a)))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))) eps) (*.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))) (expm1.f64 (*.f64 eps a))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))) eps) (*.f64 (-.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) #s(literal 1 binary64)) (*.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a)))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))) eps) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a)))))","(/.f64 (*.f64 (/.f64 eps (expm1.f64 (*.f64 eps a))) (expm1.f64 (*.f64 eps (+.f64 b a)))) (expm1.f64 (*.f64 eps b)))","(/.f64 (*.f64 eps (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64)))) (*.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))))","(/.f64 (*.f64 eps (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64)))) (*.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))))","(/.f64 (/.f64 (*.f64 (neg.f64 eps) (expm1.f64 (*.f64 eps (+.f64 b a)))) (expm1.f64 (*.f64 eps a))) (neg.f64 (expm1.f64 (*.f64 eps b))))","(/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 eps b)))","(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) (*.f64 (neg.f64 eps) (expm1.f64 (*.f64 eps (+.f64 b a))))))","(/.f64 (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps b))) (/.f64 (expm1.f64 (*.f64 eps a)) eps))","(/.f64 (/.f64 eps (expm1.f64 (*.f64 eps a))) (/.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps (+.f64 b a)))))","(/.f64 (*.f64 (neg.f64 eps) (expm1.f64 (*.f64 eps (+.f64 b a)))) (*.f64 (neg.f64 (expm1.f64 (*.f64 eps a))) (expm1.f64 (*.f64 eps b))))","(/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))))","(/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (*.f64 (/.f64 (expm1.f64 (*.f64 eps a)) eps) (expm1.f64 (*.f64 eps b))))","(/.f64 #s(literal 1 binary64) (/.f64 (expm1.f64 (*.f64 eps a)) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps) (expm1.f64 (*.f64 eps b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (expm1.f64 (*.f64 eps b)) (*.f64 (/.f64 eps (expm1.f64 (*.f64 eps a))) (expm1.f64 (*.f64 eps (+.f64 b a))))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 (expm1.f64 (*.f64 eps a)) (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps)) (expm1.f64 (*.f64 eps b))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps)))","(/.f64 eps (/.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) (expm1.f64 (*.f64 eps (+.f64 b a)))))","(neg.f64 (/.f64 (/.f64 (*.f64 (neg.f64 eps) (expm1.f64 (*.f64 eps (+.f64 b a)))) (expm1.f64 (*.f64 eps a))) (expm1.f64 (*.f64 eps b))))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps))))","(neg.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (neg.f64 (expm1.f64 (*.f64 eps b)))))","(neg.f64 (*.f64 #s(literal 1 binary64) (*.f64 (/.f64 (neg.f64 eps) (expm1.f64 (*.f64 eps a))) (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps b))))))","(neg.f64 (*.f64 (/.f64 (neg.f64 eps) (expm1.f64 (*.f64 eps a))) (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps b)))))","(fma.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64)))) (pow.f64 (exp.f64 eps) b) (*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64)))) #s(literal 1 binary64)))","(fma.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64)))) #s(literal 1 binary64) (*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64)))) (pow.f64 (exp.f64 eps) b)))","(fma.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) #s(literal 1 binary64)) (*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (pow.f64 (exp.f64 eps) b)))","(fma.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) (*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b))))","(fma.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))))","(fma.f64 (*.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) eps) (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64)) (*.f64 (neg.f64 eps) (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64))))","(fma.f64 (*.f64 eps (pow.f64 (exp.f64 eps) (+.f64 b a))) (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64)) (*.f64 (*.f64 eps #s(literal -1 binary64)) (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64))))","(fma.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) #s(literal 1 binary64)) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (*.f64 (pow.f64 (exp.f64 eps) b) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64))))))","(fma.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (*.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64))))))","(fma.f64 (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64)) (*.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) eps) (*.f64 (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64)) (neg.f64 eps)))","(fma.f64 (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64)) (*.f64 eps (pow.f64 (exp.f64 eps) (+.f64 b a))) (*.f64 (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64)) (*.f64 eps #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (*.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64))))))","(fma.f64 (pow.f64 (exp.f64 eps) b) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64)))) (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64))))))","(fma.f64 #s(literal 1 binary64) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64)))) (*.f64 (pow.f64 (exp.f64 eps) b) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64))))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (neg.f64 (expm1.f64 (*.f64 eps a))) (expm1.f64 (*.f64 eps b)))) (*.f64 (/.f64 (neg.f64 eps) (expm1.f64 (*.f64 eps a))) (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps b)))))","(-.f64 #s(literal 0 binary64) (*.f64 (/.f64 (neg.f64 eps) (expm1.f64 (*.f64 eps a))) (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps b)))))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps))) #s(literal -1 binary64)))","(+.f64 (*.f64 (pow.f64 (exp.f64 eps) b) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64))))) (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64))))))","(+.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64))))) (*.f64 (pow.f64 (exp.f64 eps) b) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64))))))","(+.f64 (*.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) #s(literal 1 binary64)) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64))))) (*.f64 (pow.f64 (exp.f64 eps) b) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64))))))","(+.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64))))) (*.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64))))))","(+.f64 (*.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64))))) (*.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64))))))","(+.f64 (*.f64 (*.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) eps) (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64))) (*.f64 (neg.f64 eps) (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64))))","(+.f64 (*.f64 (*.f64 eps (pow.f64 (exp.f64 eps) (+.f64 b a))) (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64))) (*.f64 (*.f64 eps #s(literal -1 binary64)) (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64))))","(+.f64 (*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64)))) (pow.f64 (exp.f64 eps) b)) (*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64)))) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64)))) #s(literal 1 binary64)) (*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64)))) (pow.f64 (exp.f64 eps) b)))","(+.f64 (*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (pow.f64 (exp.f64 eps) b)))","(+.f64 (*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))) (*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b))))","(+.f64 (*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b))) (*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))))","(+.f64 (*.f64 (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64)) (*.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) eps)) (*.f64 (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64)) (neg.f64 eps)))","(+.f64 (*.f64 (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64)) (*.f64 eps (pow.f64 (exp.f64 eps) (+.f64 b a)))) (*.f64 (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64)) (*.f64 eps #s(literal -1 binary64))))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":210.286865234375,"type":"rewrite"},{"compiler":[[15909,1605]],"memory":[[3924640,29644016]],"time":36.213134765625,"type":"eval"},{"alts":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a))))","next",53.968816979197776,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))) b #s(literal 1 binary64)) b))","next",37.668939814046226,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) b) a))","next",0.14453125,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b))","next",31.209498624117707,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","next",32.860526662783684,"binary64"]],"compiler":[[66,38],[43,29],[32,21],[28,20],[28,20],[66,38],[43,29],[32,21],[28,20],[28,20]],"count":[[403,5]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[402,5],"picked":[1,0]}],"memory":[[-1544112,17020064]],"min-error":[[0.0078125,"binary64"]],"time":10.080810546875,"type":"prune"},{"egraph":[[0,8464,350,0.083793039],[5,7659,370,0.015635363],[4,5764,400,0.01634082],[3,1480,430,0.015716346],[2,377,460,0.004336292],[1,164,463,0.001319571],[0,83,463,0.000806106],[0,52,473,0.000850311]],"inputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) b) a))","(/.f64 (/.f64 (+.f64 b a) b) a)","(/.f64 (+.f64 b a) b)","(+.f64 b a)","b","a","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","(/.f64 #s(literal 1 binary64) a)","#s(literal 1 binary64)","a","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b))","(/.f64 #s(literal 1 binary64) b)","#s(literal 1 binary64)","b","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a))))","(fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))","(fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a)))","(*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64))","(*.f64 (*.f64 b a) (+.f64 b a))","(*.f64 b a)","b","a","(+.f64 b a)","#s(literal -1/2 binary64)","(/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b))","(*.f64 (*.f64 (*.f64 b a) a) b)","(*.f64 (*.f64 b a) a)","(*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))","(/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)","(pow.f64 (+.f64 b a) #s(literal 2 binary64))","#s(literal 2 binary64)","(/.f64 #s(literal 1/2 binary64) a)","#s(literal 1/2 binary64)","eps","(+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a))","(/.f64 #s(literal 1 binary64) b)","#s(literal 1 binary64)","(/.f64 #s(literal 1 binary64) a)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))) b #s(literal 1 binary64)) b))","(/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))) b #s(literal 1 binary64)) b)","(fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))) b #s(literal 1 binary64))","(*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a)))))","eps","(+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))","#s(literal -1/2 binary64)","(/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a)))","(pow.f64 (exp.f64 a) eps)","(exp.f64 a)","a","(expm1.f64 (*.f64 eps a))","(*.f64 eps a)","b","#s(literal 1 binary64)"]],"locations":[["(*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a)))))","cost-diff",0],["(fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))) b #s(literal 1 binary64))","cost-diff",0],["(/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))) b #s(literal 1 binary64)) b)","cost-diff",0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))) b #s(literal 1 binary64)) b))","cost-diff",0],["(*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64))","cost-diff",0],["(fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))","cost-diff",0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a))))","cost-diff",0],["(fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a)))","cost-diff",31],["(/.f64 #s(literal 1 binary64) b)","cost-diff",0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b))","cost-diff",0],["(/.f64 #s(literal 1 binary64) a)","cost-diff",0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","cost-diff",0],["(+.f64 b a)","cost-diff",0],["(/.f64 (+.f64 b a) b)","cost-diff",0],["(/.f64 (/.f64 (+.f64 b a) b) a)","cost-diff",0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) b) a))","cost-diff",0]],"memory":[[-6634528,43519488]],"method":["egg-herbie"],"outputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) b) a))","(/.f64 (/.f64 (+.f64 b a) b) a)","(/.f64 (+.f64 b a) b)","(+.f64 b a)","b","a","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","(/.f64 #s(literal 1 binary64) a)","#s(literal 1 binary64)","a","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b))","(/.f64 #s(literal 1 binary64) b)","#s(literal 1 binary64)","b","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a))))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 (fma.f64 #s(literal 0 binary64) eps (/.f64 #s(literal 1 binary64) a)) (/.f64 #s(literal 1 binary64) b)))","(fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))","(+.f64 (fma.f64 #s(literal 0 binary64) eps (/.f64 #s(literal 1 binary64) a)) (/.f64 #s(literal 1 binary64) b))","(fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a)))","#s(literal 0 binary64)","(*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64))","(*.f64 (*.f64 #s(literal -1/2 binary64) a) (*.f64 (+.f64 b a) b))","(*.f64 (*.f64 b a) (+.f64 b a))","(*.f64 (*.f64 (+.f64 b a) b) a)","(*.f64 b a)","b","a","(+.f64 b a)","#s(literal -1/2 binary64)","(/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b))","(/.f64 (/.f64 (/.f64 (/.f64 (+.f64 b a) b) b) a) a)","(*.f64 (*.f64 (*.f64 b a) a) b)","(*.f64 (*.f64 b a) a)","(*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) a) b) (pow.f64 (+.f64 b a) #s(literal 2 binary64)))","(/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)","(pow.f64 (+.f64 b a) #s(literal 2 binary64))","#s(literal 2 binary64)","(/.f64 #s(literal 1/2 binary64) a)","#s(literal 1/2 binary64)","eps","(+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a))","(/.f64 #s(literal 1 binary64) b)","#s(literal 1 binary64)","(/.f64 #s(literal 1 binary64) a)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))) b #s(literal 1 binary64)) b))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (fma.f64 (+.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal -1/2 binary64)) (*.f64 b eps) #s(literal 1 binary64)) b))","(/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))) b #s(literal 1 binary64)) b)","(/.f64 (fma.f64 (+.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal -1/2 binary64)) (*.f64 b eps) #s(literal 1 binary64)) b)","(fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))) b #s(literal 1 binary64))","(fma.f64 (+.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal -1/2 binary64)) (*.f64 b eps) #s(literal 1 binary64))","(*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a)))))","(*.f64 (+.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal -1/2 binary64)) eps)","eps","(+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))","(+.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal -1/2 binary64))","#s(literal -1/2 binary64)","(/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a)))","(/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps)))","(pow.f64 (exp.f64 a) eps)","(exp.f64 a)","a","(expm1.f64 (*.f64 eps a))","(expm1.f64 (*.f64 a eps))","(*.f64 eps a)","(*.f64 a eps)","b","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":257.375,"type":"simplify"},{"compiler":[[415,49]],"locations":[["(/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a)))","accuracy",0.0859375],["(fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))) b #s(literal 1 binary64))","accuracy",0.1171875],["(/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))) b #s(literal 1 binary64)) b)","accuracy",0.15234375],["(*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a)))))","accuracy",37.49886543120911],["(*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))","accuracy",0.31640625],["(/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b))","accuracy",2.438322522086803],["(/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)","accuracy",14.24178150676741],["(fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a)))","accuracy",62.840616509131166],["(/.f64 #s(literal 1 binary64) b)","accuracy",0.0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b))","accuracy",31.209498624117707],["(/.f64 #s(literal 1 binary64) a)","accuracy",0.0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","accuracy",32.860526662783684],["(+.f64 b a)","accuracy",0.0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) b) a))","accuracy",0.0],["(/.f64 (+.f64 b a) b)","accuracy",0.01953125],["(/.f64 (/.f64 (+.f64 b a) b) a)","accuracy",0.15234375]],"memory":[[7728256,90001472]],"mixsample":[[0.21142578125,"ival-add",1200],[24.464111328125,"ival-div",0],[20.35400390625,"adjust",800],[1.723876953125,"ival-mult",1200],[3.2216796875,"ival-exp",0],[0.884033203125,"ival-pow2",400],[2.057373046875,"ival-div",400],[1.2001953125,"ival-pow2",800],[0.34326171875,"ival-pow2",2000],[1.72216796875,"ival-mult",2000],[2.985107421875,"ival-div",1600],[0.1416015625,"ival-assert",0],[0.4970703125,"ival-pow2",1200],[0.310791015625,"ival-pow2",2400],[15.33447265625,"ival-pow",0],[19.5107421875,"adjust",2000],[3.768310546875,"ival-mult",800],[17.3564453125,"ival-add",0],[0.9677734375,"ival-div",1200],[3.6240234375,"ival-mult",400],[38.577880859375,"ival-mult",0],[1.716796875,"ival-mult",1600],[10.815185546875,"ival-expm1",0],[2.584228515625,"ival-div",800],[0.239013671875,"ival-add",400],[0.242919921875,"ival-true",0],[2.843505859375,"ival-div",2000],[0.43896484375,"ival-mult",2400],[0.49072265625,"ival-add",800],[0.505615234375,"exact",0],[0.7548828125,"ival-div",2400],[2.636962890625,"ival-pow2",0]],"outcomes":[[244.828857421875,2,"valid",256]],"time":293.203125,"type":"localize"},{"count":[[20,120]],"inputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) b) a))","(/.f64 (/.f64 (+.f64 b a) b) a)","(/.f64 (+.f64 b a) b)","(+.f64 b a)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","(/.f64 #s(literal 1 binary64) a)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b))","(/.f64 #s(literal 1 binary64) b)","(fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a))))","(fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))","(*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))) b #s(literal 1 binary64)) b))","(/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))) b #s(literal 1 binary64)) b)","(fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))) b #s(literal 1 binary64))","(*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a)))))","(/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)","(/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b))","(*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))","(/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a)))"]],"memory":[[-6529792,45578048]],"outputs":[["(/ 1 a)","(/ (+ 1 (* a (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (* a (- (* 1/6 (/ (* (pow eps 3) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/ (+ 1 (/ a b)) a)","1","(+ 1 (/ a b))","b","(+ a b)","(/ (+ (* -1/2 b) (* 1/2 b)) a)","(/ (+ 1 (* eps (+ (* -1/2 b) (* 1/2 b)))) a)","(/ (+ 1 (+ (* eps (+ (* -1/2 b) (* 1/2 b))) (/ a b))) a)","(* -1/2 (* a (pow b 2)))","(* a (+ (* -1/2 (* a b)) (* -1/2 (pow b 2))))","(/ (+ 1 (* a (+ (* a (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))) (/ 1 b)))) a)","(/ (+ 1 (* a (+ (* a (+ (* a (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))) (/ 1 b)))) a)","(/ b a)","(/ (+ a b) a)","(/ (+ b (* a (+ 1 (* a (* b (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))))) a)","(/ (+ b (* a (+ 1 (* a (+ (* a (* b (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))))))) (* b (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) a)","(/ (+ 1 (* (pow a 2) (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))) a)","(/ (+ 1 (* (pow a 2) (+ (* a (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))) a)","(/ (+ 1 (* (pow a 2) (+ (* a (+ (* a (* eps (- (* 1/24 (pow eps 3)) (+ (* 1/120 (pow eps 3)) (+ (* 1/48 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))) (* 1/2 (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))))))))) (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))))))) (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))) a)","(+ b (* 2 a))","(+ b (* a (+ 2 (/ a b))))","(/ 1 (* (pow a 2) b))","(/ (+ (/ 1 b) (/ a (pow b 2))) (pow a 2))","(* 1/2 (/ b a))","(/ (+ a (* 1/2 b)) a)","(/ (+ (* 1/2 b) (* a (+ 1 (* 1/2 (/ a b))))) a)","(/ 1 (* a eps))","(/ (+ (* 1/2 a) (/ 1 eps)) a)","(/ (+ (* a (+ 1/2 (* a (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))) (/ 1 eps)) a)","(/ (+ (* a (+ 1/2 (* a (- (+ (* 1/2 eps) (* a (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) (+ (* 1/6 eps) (* 1/4 eps)))))) (/ 1 eps)) a)","(/ (* eps (- (exp (* eps (+ a b))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/ 1 b)","(+ (/ 1 a) (/ 1 b))","(/ a b)","(* a (+ (/ 1 a) (/ 1 b)))","a","(* a (+ 1 (/ b a)))","(+ (/ 1 a) (+ (/ 1 b) (/ (* eps (+ (* -1/2 b) (* 1/2 b))) a)))","(* -1/2 (* (pow a 2) b))","(* (pow a 2) (+ (* -1/2 b) (* -1/2 (/ (pow b 2) a))))","(/ (+ 1 (* b (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)))) b)","(+ 1 (* b (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))))","(* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))","(/ (pow a 2) b)","(* (pow a 2) (+ (* 2 (/ 1 a)) (/ 1 b)))","(* (pow a 2) (+ (* 2 (/ 1 a)) (+ (/ 1 b) (/ b (pow a 2)))))","(/ 1 (* a (pow b 2)))","(/ (+ (/ 1 (* a b)) (/ 1 (pow b 2))) a)","(* 1/2 (/ a b))","(* a (+ (/ 1 a) (* 1/2 (/ 1 b))))","(* a (+ (* 1/2 (/ b (pow a 2))) (+ (/ 1 a) (* 1/2 (/ 1 b)))))","(/ (exp (* a eps)) (- (exp (* a eps)) 1))","(/ (* eps (- (exp (* eps (- b (* -1 a)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(* -1 (* a (- (* -1 (/ b a)) 1)))","(* -1 (/ (+ (* -1/2 b) (* 1/2 b)) a))","(+ (* -1 (/ (- (* eps (+ (* -1/2 b) (* 1/2 b))) 1) a)) (/ 1 b))","(* (pow a 2) (+ (* -1 (/ (- (* -1 (/ b a)) 2) a)) (/ 1 b)))","(* -1 (* a (- (* -1 (/ (+ 1 (* 1/2 (/ b a))) a)) (* 1/2 (/ 1 b)))))","(/ (+ 1 (* b (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (* b (- (* 1/6 (/ (* (pow eps 3) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/ (+ 1 (/ b a)) b)","(/ (+ a b) b)","(/ (+ (* -1/2 a) (* 1/2 a)) b)","(/ (+ 1 (* eps (+ (* -1/2 a) (* 1/2 a)))) b)","(/ (+ 1 (+ (* eps (+ (* -1/2 a) (* 1/2 a))) (/ b a))) b)","(* b (+ (* -1/2 (* a b)) (* -1/2 (pow a 2))))","(/ (+ (* 2 (* a b)) (pow a 2)) b)","(/ (+ (* b (+ b (* 2 a))) (pow a 2)) b)","(/ (+ (/ 1 a) (/ b (pow a 2))) (pow b 2))","(/ (+ b (* 1/2 a)) b)","(/ (+ (* 1/2 a) (* b (+ 1 (* 1/2 (/ b a))))) b)","(* b (+ 1 (/ a b)))","(+ (/ 1 a) (+ (/ 1 b) (/ (* eps (+ (* -1/2 a) (* 1/2 a))) b)))","(* (pow b 2) (+ (* -1/2 a) (* -1/2 (/ (pow a 2) b))))","(+ (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 b))","(* b (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)))","(* b (+ (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 b)))","(* b (+ 1 (* 2 (/ a b))))","(* b (+ 1 (+ (* 2 (/ a b)) (/ (pow a 2) (pow b 2)))))","(/ (+ (/ 1 (* a b)) (/ 1 (pow a 2))) b)","(* b (+ (* 1/2 (/ 1 a)) (/ 1 b)))","(* b (+ (* 1/2 (/ a (pow b 2))) (+ (* 1/2 (/ 1 a)) (/ 1 b))))","(/ (* eps (- (exp (* eps (- a (* -1 b)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(* -1 (* b (- (* -1 (/ a b)) 1)))","(* -1 (/ (+ (* -1/2 a) (* 1/2 a)) b))","(+ (* -1 (/ (- (* eps (+ (* -1/2 a) (* 1/2 a))) 1) b)) (/ 1 a))","(* -1 (* b (- (* -1 (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))) (/ 1 b))))","(* -1 (* b (- (* -2 (/ a b)) 1)))","(* -1 (* b (- (* -1 (/ (+ (* 2 a) (/ (pow a 2) b)) b)) 1)))","(* -1 (* b (- (* -1 (/ (+ 1 (* 1/2 (/ a b))) b)) (* 1/2 (/ 1 a)))))","(/ (+ a b) (* a b))","(+ (* eps (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (+ (* 1/6 (/ (pow (+ a b) 3) (* a b))) (* eps (- (* 1/24 (/ (pow (+ a b) 4) (* a b))) (+ (/ (* (+ a b) (+ (* 1/24 (* a (pow b 4))) (+ (* 1/24 (* (pow a 4) b)) (+ (* 1/12 (* (pow a 2) (pow b 3))) (* 1/12 (* (pow a 3) (pow b 2))))))) (* (pow a 2) (pow b 2))) (+ (/ (* (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2))))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b))))) (* a b))))))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b))))) (+ (/ 1 a) (/ 1 b)))","(+ (* (pow eps 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))) (+ (/ 1 a) (/ 1 b)))","(+ (* (pow eps 2) (- (+ (* 1/2 a) (* eps (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (+ (* 1/6 a) (* 1/4 a)))) (+ (/ 1 a) (/ 1 b)))","(+ (* (pow eps 2) (- (+ (* 1/2 a) (* eps (- (+ (* 1/6 (pow a 2)) (* eps (- (* 1/24 (pow a 3)) (+ (* 1/120 (pow a 3)) (+ (* 1/48 (pow a 3)) (+ (* 1/6 (* (pow a 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))) (* 1/2 (* a (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))))))))) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (+ (* 1/6 a) (* 1/4 a)))) (+ (/ 1 a) (/ 1 b)))","(+ 1 (/ b a))","(+ 1 (+ (* b (* (pow eps 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))) (/ b a)))","(+ 1 (+ (* (pow eps 2) (+ (* b (* eps (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (* b (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))) (/ b a)))","(+ 1 (+ (* (pow eps 2) (+ (* b (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))) (* eps (+ (* b (* eps (- (* 1/24 (pow a 3)) (+ (* 1/120 (pow a 3)) (+ (* 1/48 (pow a 3)) (+ (* 1/6 (* (pow a 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))) (* 1/2 (* a (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))))))))) (* b (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))))))))))) (/ b a)))","(+ (* (pow eps 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))) (/ 1 a))","(+ (* (pow eps 2) (- (+ (* 1/2 a) (* eps (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (+ (* 1/6 a) (* 1/4 a)))) (/ 1 a))","(+ (* (pow eps 2) (- (+ (* 1/2 a) (* eps (- (+ (* 1/6 (pow a 2)) (* eps (- (* 1/24 (pow a 3)) (+ (* 1/120 (pow a 3)) (+ (* 1/48 (pow a 3)) (+ (* 1/6 (* (pow a 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))) (* 1/2 (* a (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))))))))) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (+ (* 1/6 a) (* 1/4 a)))) (/ 1 a))","(/ (+ (* 1/2 eps) (/ 1 a)) eps)","(/ (+ (* eps (+ 1/2 (* eps (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))) (/ 1 a)) eps)","(/ (+ (* eps (+ 1/2 (* eps (- (+ (* 1/2 a) (* eps (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (+ (* 1/6 a) (* 1/4 a)))))) (/ 1 a)) eps)","(* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b)))))","(* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (+ (/ 1 (* a eps)) (/ 1 (* b eps))))))","(* eps (- (+ (/ 1 (* b eps)) (/ (exp (* a eps)) (- (exp (* a eps)) 1))) 1/2))","(* eps (+ (* b (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 eps)))","(* -1 (* eps (+ (* -1 (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b))))) (* -1 (/ (+ (/ 1 a) (/ 1 b)) eps)))))","(* -1 (* eps (- (* -1 (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 (* b eps)))))","(* -1 (* eps (- (* -1 (* b (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))) (/ 1 eps))))"]],"series":[[5.736083984375,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (+ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 b) (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (* (* (* b a) (+ b a)) -1/2) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) (/ (pow (+ b a) 2) b) (/ (+ b a) (* (* (* b a) a) b)) (* (/ (pow (+ b a) 2) b) (/ 1/2 a)) (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))","eps","-inf"],[3.662841796875,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (+ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 b) (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (* (* (* b a) (+ b a)) -1/2) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) (/ (pow (+ b a) 2) b) (/ (+ b a) (* (* (* b a) a) b)) (* (/ (pow (+ b a) 2) b) (/ 1/2 a)) (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))","eps","inf"],[27.77099609375,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (+ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 b) (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (* (* (* b a) (+ b a)) -1/2) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) (/ (pow (+ b a) 2) b) (/ (+ b a) (* (* (* b a) a) b)) (* (/ (pow (+ b a) 2) b) (/ 1/2 a)) (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))","eps","0"],[10.56005859375,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (+ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 b) (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (* (* (* b a) (+ b a)) -1/2) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) (/ (pow (+ b a) 2) b) (/ (+ b a) (* (* (* b a) a) b)) (* (/ (pow (+ b a) 2) b) (/ 1/2 a)) (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))","b","-inf"],[8.721923828125,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (+ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 b) (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (* (* (* b a) (+ b a)) -1/2) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) (/ (pow (+ b a) 2) b) (/ (+ b a) (* (* (* b a) a) b)) (* (/ (pow (+ b a) 2) b) (/ 1/2 a)) (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))","b","inf"],[57.759033203125,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (+ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 b) (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (* (* (* b a) (+ b a)) -1/2) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) (/ (pow (+ b a) 2) b) (/ (+ b a) (* (* (* b a) a) b)) (* (/ (pow (+ b a) 2) b) (/ 1/2 a)) (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))","b","0"],[23.531005859375,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (+ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 b) (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (* (* (* b a) (+ b a)) -1/2) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) (/ (pow (+ b a) 2) b) (/ (+ b a) (* (* (* b a) a) b)) (* (/ (pow (+ b a) 2) b) (/ 1/2 a)) (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))","a","-inf"],[45.827880859375,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (+ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 b) (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (* (* (* b a) (+ b a)) -1/2) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) (/ (pow (+ b a) 2) b) (/ (+ b a) (* (* (* b a) a) b)) (* (/ (pow (+ b a) 2) b) (/ 1/2 a)) (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))","a","inf"],[11.55615234375,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (+ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 b) (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (* (* (* b a) (+ b a)) -1/2) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) (/ (pow (+ b a) 2) b) (/ (+ b a) (* (* (* b a) a) b)) (* (/ (pow (+ b a) 2) b) (/ 1/2 a)) (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))","a","0"]],"time":199.1240234375,"type":"series"},{"count":[[120,118]],"egraph":[[0,8577,2291,0.089173182],[2,5402,2523,0.030887254],[1,1644,2767,0.018549084],[0,553,3135,0.00518799]],"inputs":[["(/ 1 a)","(/ (+ 1 (* a (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (* a (- (* 1/6 (/ (* (pow eps 3) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/ (+ 1 (/ a b)) a)","1","(+ 1 (/ a b))","b","(+ a b)","(/ (+ (* -1/2 b) (* 1/2 b)) a)","(/ (+ 1 (* eps (+ (* -1/2 b) (* 1/2 b)))) a)","(/ (+ 1 (+ (* eps (+ (* -1/2 b) (* 1/2 b))) (/ a b))) a)","(* -1/2 (* a (pow b 2)))","(* a (+ (* -1/2 (* a b)) (* -1/2 (pow b 2))))","(/ (+ 1 (* a (+ (* a (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))) (/ 1 b)))) a)","(/ (+ 1 (* a (+ (* a (+ (* a (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))) (/ 1 b)))) a)","(/ b a)","(/ (+ a b) a)","(/ (+ b (* a (+ 1 (* a (* b (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))))) a)","(/ (+ b (* a (+ 1 (* a (+ (* a (* b (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))))))) (* b (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) a)","(/ (+ 1 (* (pow a 2) (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))) a)","(/ (+ 1 (* (pow a 2) (+ (* a (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))) a)","(/ (+ 1 (* (pow a 2) (+ (* a (+ (* a (* eps (- (* 1/24 (pow eps 3)) (+ (* 1/120 (pow eps 3)) (+ (* 1/48 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))) (* 1/2 (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))))))))) (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))))))) (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))) a)","(+ b (* 2 a))","(+ b (* a (+ 2 (/ a b))))","(/ 1 (* (pow a 2) b))","(/ (+ (/ 1 b) (/ a (pow b 2))) (pow a 2))","(* 1/2 (/ b a))","(/ (+ a (* 1/2 b)) a)","(/ (+ (* 1/2 b) (* a (+ 1 (* 1/2 (/ a b))))) a)","(/ 1 (* a eps))","(/ (+ (* 1/2 a) (/ 1 eps)) a)","(/ (+ (* a (+ 1/2 (* a (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))) (/ 1 eps)) a)","(/ (+ (* a (+ 1/2 (* a (- (+ (* 1/2 eps) (* a (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) (+ (* 1/6 eps) (* 1/4 eps)))))) (/ 1 eps)) a)","(/ (* eps (- (exp (* eps (+ a b))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/ 1 b)","(+ (/ 1 a) (/ 1 b))","(/ a b)","(* a (+ (/ 1 a) (/ 1 b)))","a","(* a (+ 1 (/ b a)))","(+ (/ 1 a) (+ (/ 1 b) (/ (* eps (+ (* -1/2 b) (* 1/2 b))) a)))","(* -1/2 (* (pow a 2) b))","(* (pow a 2) (+ (* -1/2 b) (* -1/2 (/ (pow b 2) a))))","(/ (+ 1 (* b (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)))) b)","(+ 1 (* b (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))))","(* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))","(/ (pow a 2) b)","(* (pow a 2) (+ (* 2 (/ 1 a)) (/ 1 b)))","(* (pow a 2) (+ (* 2 (/ 1 a)) (+ (/ 1 b) (/ b (pow a 2)))))","(/ 1 (* a (pow b 2)))","(/ (+ (/ 1 (* a b)) (/ 1 (pow b 2))) a)","(* 1/2 (/ a b))","(* a (+ (/ 1 a) (* 1/2 (/ 1 b))))","(* a (+ (* 1/2 (/ b (pow a 2))) (+ (/ 1 a) (* 1/2 (/ 1 b)))))","(/ (exp (* a eps)) (- (exp (* a eps)) 1))","(/ (* eps (- (exp (* eps (- b (* -1 a)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(* -1 (* a (- (* -1 (/ b a)) 1)))","(* -1 (/ (+ (* -1/2 b) (* 1/2 b)) a))","(+ (* -1 (/ (- (* eps (+ (* -1/2 b) (* 1/2 b))) 1) a)) (/ 1 b))","(* (pow a 2) (+ (* -1 (/ (- (* -1 (/ b a)) 2) a)) (/ 1 b)))","(* -1 (* a (- (* -1 (/ (+ 1 (* 1/2 (/ b a))) a)) (* 1/2 (/ 1 b)))))","(/ (+ 1 (* b (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (* b (- (* 1/6 (/ (* (pow eps 3) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/ (+ 1 (/ b a)) b)","(/ (+ a b) b)","(/ (+ (* -1/2 a) (* 1/2 a)) b)","(/ (+ 1 (* eps (+ (* -1/2 a) (* 1/2 a)))) b)","(/ (+ 1 (+ (* eps (+ (* -1/2 a) (* 1/2 a))) (/ b a))) b)","(* b (+ (* -1/2 (* a b)) (* -1/2 (pow a 2))))","(/ (+ (* 2 (* a b)) (pow a 2)) b)","(/ (+ (* b (+ b (* 2 a))) (pow a 2)) b)","(/ (+ (/ 1 a) (/ b (pow a 2))) (pow b 2))","(/ (+ b (* 1/2 a)) b)","(/ (+ (* 1/2 a) (* b (+ 1 (* 1/2 (/ b a))))) b)","(* b (+ 1 (/ a b)))","(+ (/ 1 a) (+ (/ 1 b) (/ (* eps (+ (* -1/2 a) (* 1/2 a))) b)))","(* (pow b 2) (+ (* -1/2 a) (* -1/2 (/ (pow a 2) b))))","(+ (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 b))","(* b (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)))","(* b (+ (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 b)))","(* b (+ 1 (* 2 (/ a b))))","(* b (+ 1 (+ (* 2 (/ a b)) (/ (pow a 2) (pow b 2)))))","(/ (+ (/ 1 (* a b)) (/ 1 (pow a 2))) b)","(* b (+ (* 1/2 (/ 1 a)) (/ 1 b)))","(* b (+ (* 1/2 (/ a (pow b 2))) (+ (* 1/2 (/ 1 a)) (/ 1 b))))","(/ (* eps (- (exp (* eps (- a (* -1 b)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(* -1 (* b (- (* -1 (/ a b)) 1)))","(* -1 (/ (+ (* -1/2 a) (* 1/2 a)) b))","(+ (* -1 (/ (- (* eps (+ (* -1/2 a) (* 1/2 a))) 1) b)) (/ 1 a))","(* -1 (* b (- (* -1 (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))) (/ 1 b))))","(* -1 (* b (- (* -2 (/ a b)) 1)))","(* -1 (* b (- (* -1 (/ (+ (* 2 a) (/ (pow a 2) b)) b)) 1)))","(* -1 (* b (- (* -1 (/ (+ 1 (* 1/2 (/ a b))) b)) (* 1/2 (/ 1 a)))))","(/ (+ a b) (* a b))","(+ (* eps (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (+ (* 1/6 (/ (pow (+ a b) 3) (* a b))) (* eps (- (* 1/24 (/ (pow (+ a b) 4) (* a b))) (+ (/ (* (+ a b) (+ (* 1/24 (* a (pow b 4))) (+ (* 1/24 (* (pow a 4) b)) (+ (* 1/12 (* (pow a 2) (pow b 3))) (* 1/12 (* (pow a 3) (pow b 2))))))) (* (pow a 2) (pow b 2))) (+ (/ (* (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2))))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b))))) (* a b))))))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b))))) (+ (/ 1 a) (/ 1 b)))","(+ (* (pow eps 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))) (+ (/ 1 a) (/ 1 b)))","(+ (* (pow eps 2) (- (+ (* 1/2 a) (* eps (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (+ (* 1/6 a) (* 1/4 a)))) (+ (/ 1 a) (/ 1 b)))","(+ (* (pow eps 2) (- (+ (* 1/2 a) (* eps (- (+ (* 1/6 (pow a 2)) (* eps (- (* 1/24 (pow a 3)) (+ (* 1/120 (pow a 3)) (+ (* 1/48 (pow a 3)) (+ (* 1/6 (* (pow a 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))) (* 1/2 (* a (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))))))))) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (+ (* 1/6 a) (* 1/4 a)))) (+ (/ 1 a) (/ 1 b)))","(+ 1 (/ b a))","(+ 1 (+ (* b (* (pow eps 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))) (/ b a)))","(+ 1 (+ (* (pow eps 2) (+ (* b (* eps (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (* b (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))) (/ b a)))","(+ 1 (+ (* (pow eps 2) (+ (* b (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))) (* eps (+ (* b (* eps (- (* 1/24 (pow a 3)) (+ (* 1/120 (pow a 3)) (+ (* 1/48 (pow a 3)) (+ (* 1/6 (* (pow a 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))) (* 1/2 (* a (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))))))))) (* b (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))))))))))) (/ b a)))","(+ (* (pow eps 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))) (/ 1 a))","(+ (* (pow eps 2) (- (+ (* 1/2 a) (* eps (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (+ (* 1/6 a) (* 1/4 a)))) (/ 1 a))","(+ (* (pow eps 2) (- (+ (* 1/2 a) (* eps (- (+ (* 1/6 (pow a 2)) (* eps (- (* 1/24 (pow a 3)) (+ (* 1/120 (pow a 3)) (+ (* 1/48 (pow a 3)) (+ (* 1/6 (* (pow a 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))) (* 1/2 (* a (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))))))))) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (+ (* 1/6 a) (* 1/4 a)))) (/ 1 a))","(/ (+ (* 1/2 eps) (/ 1 a)) eps)","(/ (+ (* eps (+ 1/2 (* eps (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))) (/ 1 a)) eps)","(/ (+ (* eps (+ 1/2 (* eps (- (+ (* 1/2 a) (* eps (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (+ (* 1/6 a) (* 1/4 a)))))) (/ 1 a)) eps)","(* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b)))))","(* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (+ (/ 1 (* a eps)) (/ 1 (* b eps))))))","(* eps (- (+ (/ 1 (* b eps)) (/ (exp (* a eps)) (- (exp (* a eps)) 1))) 1/2))","(* eps (+ (* b (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 eps)))","(* -1 (* eps (+ (* -1 (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b))))) (* -1 (/ (+ (/ 1 a) (/ 1 b)) eps)))))","(* -1 (* eps (- (* -1 (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 (* b eps)))))","(* -1 (* eps (- (* -1 (* b (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))) (/ 1 eps))))"]],"memory":[[12347584,47938320]],"method":["egg-herbie"],"outputs":[["(/ 1 a)","(/.f64 #s(literal 1 binary64) a)","(/ (+ 1 (* a (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) a)","(/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))))) a #s(literal 1 binary64)) a)","(/ (+ 1 (* a (- (+ (* a (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))))))) a (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps)))))) a #s(literal 1 binary64)) a)","(/ (+ 1 (* a (- (+ (* a (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (* a (- (* 1/6 (/ (* (pow eps 3) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/6 binary64)) #s(literal 1/24 binary64)) (neg.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps)))))) (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))))))) eps) #s(literal 1/2 binary64))))) a (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps)))))))) a (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps)))))) a #s(literal 1 binary64)) a)","(/ (+ 1 (/ a b)) a)","(/.f64 (-.f64 (/.f64 a b) #s(literal -1 binary64)) a)","1","#s(literal 1 binary64)","(+ 1 (/ a b))","(-.f64 (/.f64 a b) #s(literal -1 binary64))","b","(+ a b)","(+.f64 b a)","(/ (+ (* -1/2 b) (* 1/2 b)) a)","#s(literal 0 binary64)","(/ (+ 1 (* eps (+ (* -1/2 b) (* 1/2 b)))) a)","(/.f64 #s(literal 1 binary64) a)","(/ (+ 1 (+ (* eps (+ (* -1/2 b) (* 1/2 b))) (/ a b))) a)","(/.f64 (-.f64 (/.f64 a b) #s(literal -1 binary64)) a)","(* -1/2 (* a (pow b 2)))","(*.f64 (*.f64 (*.f64 b b) #s(literal -1/2 binary64)) a)","(* a (+ (* -1/2 (* a b)) (* -1/2 (pow b 2))))","(*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64))","(/ (+ 1 (* a (+ (* a (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))) (/ 1 b)))) a)","(/.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 eps eps)) a (/.f64 #s(literal 1 binary64) b)) a #s(literal 1 binary64)) a)","(/ (+ 1 (* a (+ (* a (+ (* a (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))) (/ 1 b)))) a)","(/.f64 (fma.f64 (fma.f64 (*.f64 eps (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps (*.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 eps eps)) #s(literal -1/2 binary64))) a (*.f64 #s(literal 1/12 binary64) eps))) a (/.f64 #s(literal 1 binary64) b)) a #s(literal 1 binary64)) a)","(/ b a)","(/.f64 b a)","(/ (+ a b) a)","(/.f64 (+.f64 b a) a)","(/ (+ b (* a (+ 1 (* a (* b (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))))) a)","(/.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 eps eps)) b) a #s(literal 1 binary64)) a b) a)","(/ (+ b (* a (+ 1 (* a (+ (* a (* b (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))))))) (* b (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) a)","(/.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 b eps) (fma.f64 eps #s(literal 1/12 binary64) (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps (*.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 eps eps)) #s(literal -1/2 binary64))) a))) a #s(literal 1 binary64)) a b) a)","(/ (+ 1 (* (pow a 2) (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))) a)","(/.f64 (fma.f64 (*.f64 a a) (*.f64 #s(literal 1/12 binary64) (*.f64 eps eps)) #s(literal 1 binary64)) a)","(/ (+ 1 (* (pow a 2) (+ (* a (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))) a)","(/.f64 (fma.f64 (*.f64 a a) (*.f64 eps (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps (*.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 eps eps)) #s(literal -1/2 binary64))) a (*.f64 #s(literal 1/12 binary64) eps))) #s(literal 1 binary64)) a)","(/ (+ 1 (* (pow a 2) (+ (* a (+ (* a (* eps (- (* 1/24 (pow eps 3)) (+ (* 1/120 (pow eps 3)) (+ (* 1/48 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))) (* 1/2 (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))))))))) (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))))))) (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))) a)","(/.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/12 binary64) eps) eps (*.f64 (*.f64 eps (fma.f64 (-.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/80 binary64)) (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 eps #s(literal 1/12 binary64))) (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps (*.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 eps eps)) #s(literal -1/2 binary64))) eps) #s(literal 1/2 binary64)))) a (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps (*.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 eps eps)) #s(literal -1/2 binary64))))) a)) (*.f64 a a) #s(literal 1 binary64)) a)","(+ b (* 2 a))","(fma.f64 #s(literal 2 binary64) a b)","(+ b (* a (+ 2 (/ a b))))","(fma.f64 (+.f64 (/.f64 a b) #s(literal 2 binary64)) a b)","(/ 1 (* (pow a 2) b))","(/.f64 #s(literal 1 binary64) (*.f64 (*.f64 a a) b))","(/ (+ (/ 1 b) (/ a (pow b 2))) (pow a 2))","(/.f64 (+.f64 (/.f64 (/.f64 a b) b) (/.f64 #s(literal 1 binary64) b)) (*.f64 a a))","(* 1/2 (/ b a))","(*.f64 (/.f64 b a) #s(literal 1/2 binary64))","(/ (+ a (* 1/2 b)) a)","(/.f64 (fma.f64 #s(literal 1/2 binary64) b a) a)","(/ (+ (* 1/2 b) (* a (+ 1 (* 1/2 (/ a b))))) a)","(/.f64 (+.f64 a (*.f64 #s(literal 1/2 binary64) (fma.f64 (/.f64 a b) a b))) a)","(/ 1 (* a eps))","(/.f64 (/.f64 #s(literal 1 binary64) a) eps)","(/ (+ (* 1/2 a) (/ 1 eps)) a)","(/.f64 (fma.f64 #s(literal 1/2 binary64) a (/.f64 #s(literal 1 binary64) eps)) a)","(/ (+ (* a (+ 1/2 (* a (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))) (/ 1 eps)) a)","(/.f64 (fma.f64 (fma.f64 (*.f64 eps #s(literal 1/12 binary64)) a #s(literal 1/2 binary64)) a (/.f64 #s(literal 1 binary64) eps)) a)","(/ (+ (* a (+ 1/2 (* a (- (+ (* 1/2 eps) (* a (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) (+ (* 1/6 eps) (* 1/4 eps)))))) (/ 1 eps)) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps (*.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 eps eps)) #s(literal -1/2 binary64))) a (*.f64 eps #s(literal 1/12 binary64))) a #s(literal 1/2 binary64)) a (/.f64 #s(literal 1 binary64) eps)) a)","(/ (* eps (- (exp (* eps (+ a b))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps) (*.f64 (expm1.f64 (*.f64 b eps)) (expm1.f64 (*.f64 a eps))))","(/ 1 b)","(/.f64 #s(literal 1 binary64) b)","(+ (/ 1 a) (/ 1 b))","(-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a))","(/ a b)","(/.f64 a b)","(* a (+ (/ 1 a) (/ 1 b)))","(-.f64 (/.f64 a b) #s(literal -1 binary64))","a","(* a (+ 1 (/ b a)))","(fma.f64 (/.f64 b a) a a)","(+ (/ 1 a) (+ (/ 1 b) (/ (* eps (+ (* -1/2 b) (* 1/2 b))) a)))","(-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a))","(* -1/2 (* (pow a 2) b))","(*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) a) a) b)","(* (pow a 2) (+ (* -1/2 b) (* -1/2 (/ (pow b 2) a))))","(*.f64 (*.f64 (*.f64 (fma.f64 b (/.f64 b a) b) #s(literal -1/2 binary64)) a) a)","(/ (+ 1 (* b (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)))) b)","(/.f64 (fma.f64 (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps) b #s(literal 1 binary64)) b)","(+ 1 (* b (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))))","(fma.f64 (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps) b #s(literal 1 binary64))","(* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))","(*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps)","(/ (pow a 2) b)","(*.f64 (/.f64 a b) a)","(* (pow a 2) (+ (* 2 (/ 1 a)) (/ 1 b)))","(*.f64 a (fma.f64 (/.f64 #s(literal 2 binary64) a) a (/.f64 a b)))","(* (pow a 2) (+ (* 2 (/ 1 a)) (+ (/ 1 b) (/ b (pow a 2)))))","(*.f64 (+.f64 (+.f64 (/.f64 (/.f64 b a) a) (/.f64 #s(literal 1 binary64) b)) (/.f64 #s(literal 2 binary64) a)) (*.f64 a a))","(/ 1 (* a (pow b 2)))","(/.f64 #s(literal 1 binary64) (*.f64 (*.f64 b b) a))","(/ (+ (/ 1 (* a b)) (/ 1 (pow b 2))) a)","(/.f64 (+.f64 (/.f64 (/.f64 #s(literal 1 binary64) b) b) (/.f64 (/.f64 #s(literal 1 binary64) b) a)) a)","(* 1/2 (/ a b))","(*.f64 (/.f64 #s(literal 1/2 binary64) b) a)","(* a (+ (/ 1 a) (* 1/2 (/ 1 b))))","(fma.f64 (/.f64 a b) #s(literal 1/2 binary64) #s(literal 1 binary64))","(* a (+ (* 1/2 (/ b (pow a 2))) (+ (/ 1 a) (* 1/2 (/ 1 b)))))","(fma.f64 (*.f64 (/.f64 (/.f64 b a) a) #s(literal 1/2 binary64)) a (fma.f64 (/.f64 a b) #s(literal 1/2 binary64) #s(literal 1 binary64)))","(/ (exp (* a eps)) (- (exp (* a eps)) 1))","(/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps)))","(/ (* eps (- (exp (* eps (- b (* -1 a)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps) (*.f64 (expm1.f64 (*.f64 b eps)) (expm1.f64 (*.f64 a eps))))","(* -1 (* a (- (* -1 (/ b a)) 1)))","(fma.f64 (/.f64 b (neg.f64 a)) (neg.f64 a) a)","(* -1 (/ (+ (* -1/2 b) (* 1/2 b)) a))","#s(literal 0 binary64)","(+ (* -1 (/ (- (* eps (+ (* -1/2 b) (* 1/2 b))) 1) a)) (/ 1 b))","(-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a))","(* (pow a 2) (+ (* -1 (/ (- (* -1 (/ b a)) 2) a)) (/ 1 b)))","(*.f64 (-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 (-.f64 #s(literal -2 binary64) (/.f64 b a)) a)) (*.f64 a a))","(* -1 (* a (- (* -1 (/ (+ 1 (* 1/2 (/ b a))) a)) (* 1/2 (/ 1 b)))))","(*.f64 (+.f64 (/.f64 (fma.f64 (/.f64 b a) #s(literal 1/2 binary64) #s(literal 1 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)) a)","(/ (+ 1 (* b (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) b)","(/.f64 (fma.f64 (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps) b #s(literal 1 binary64)) b)","(/ (+ 1 (* b (- (+ (* b (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps))) b (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps)) b #s(literal 1 binary64)) b)","(/ (+ 1 (* b (- (+ (* b (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (* b (- (* 1/6 (/ (* (pow eps 3) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/6 binary64)) #s(literal 1/24 binary64)) (neg.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps)) (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps))) eps) #s(literal 1/2 binary64))))) b (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps)))) b (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps)) b #s(literal 1 binary64)) b)","(/ (+ 1 (/ b a)) b)","(/.f64 (-.f64 (/.f64 b a) #s(literal -1 binary64)) b)","(/ (+ a b) b)","(/.f64 (+.f64 b a) b)","(/ (+ (* -1/2 a) (* 1/2 a)) b)","#s(literal 0 binary64)","(/ (+ 1 (* eps (+ (* -1/2 a) (* 1/2 a)))) b)","(/.f64 #s(literal 1 binary64) b)","(/ (+ 1 (+ (* eps (+ (* -1/2 a) (* 1/2 a))) (/ b a))) b)","(/.f64 (-.f64 (/.f64 b a) #s(literal -1 binary64)) b)","(* b (+ (* -1/2 (* a b)) (* -1/2 (pow a 2))))","(*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64))","(/ (+ (* 2 (* a b)) (pow a 2)) b)","(/.f64 (*.f64 a (fma.f64 #s(literal 2 binary64) b a)) b)","(/ (+ (* b (+ b (* 2 a))) (pow a 2)) b)","(/.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) a b) b (*.f64 a a)) b)","(/ (+ (/ 1 a) (/ b (pow a 2))) (pow b 2))","(/.f64 (+.f64 (/.f64 (/.f64 b a) a) (/.f64 #s(literal 1 binary64) a)) (*.f64 b b))","(/ (+ b (* 1/2 a)) b)","(/.f64 (fma.f64 #s(literal 1/2 binary64) a b) b)","(/ (+ (* 1/2 a) (* b (+ 1 (* 1/2 (/ b a))))) b)","(/.f64 (+.f64 b (*.f64 #s(literal 1/2 binary64) (fma.f64 b (/.f64 b a) a))) b)","(* b (+ 1 (/ a b)))","(fma.f64 (/.f64 a b) b b)","(+ (/ 1 a) (+ (/ 1 b) (/ (* eps (+ (* -1/2 a) (* 1/2 a))) b)))","(-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a))","(* (pow b 2) (+ (* -1/2 a) (* -1/2 (/ (pow a 2) b))))","(*.f64 (*.f64 (*.f64 (fma.f64 (/.f64 a b) a a) #s(literal -1/2 binary64)) b) b)","(+ (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 b))","(fma.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps (/.f64 #s(literal 1 binary64) b))","(* b (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)))","(*.f64 (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps) b)","(* b (+ (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 b)))","(fma.f64 (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps) b #s(literal 1 binary64))","(* b (+ 1 (* 2 (/ a b))))","(*.f64 (fma.f64 (/.f64 a b) #s(literal 2 binary64) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* 2 (/ a b)) (/ (pow a 2) (pow b 2)))))","(*.f64 (fma.f64 (/.f64 a b) (+.f64 (/.f64 a b) #s(literal 2 binary64)) #s(literal 1 binary64)) b)","(/ (+ (/ 1 (* a b)) (/ 1 (pow a 2))) b)","(/.f64 (+.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) a) (/.f64 (/.f64 #s(literal 1 binary64) b) a)) b)","(* b (+ (* 1/2 (/ 1 a)) (/ 1 b)))","(fma.f64 (/.f64 b a) #s(literal 1/2 binary64) #s(literal 1 binary64))","(* b (+ (* 1/2 (/ a (pow b 2))) (+ (* 1/2 (/ 1 a)) (/ 1 b))))","(fma.f64 (fma.f64 (/.f64 (/.f64 a b) b) #s(literal 1/2 binary64) (/.f64 #s(literal 1/2 binary64) a)) b #s(literal 1 binary64))","(/ (* eps (- (exp (* eps (- a (* -1 b)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps) (*.f64 (expm1.f64 (*.f64 b eps)) (expm1.f64 (*.f64 a eps))))","(* -1 (* b (- (* -1 (/ a b)) 1)))","(fma.f64 (/.f64 (neg.f64 a) b) (neg.f64 b) b)","(* -1 (/ (+ (* -1/2 a) (* 1/2 a)) b))","#s(literal 0 binary64)","(+ (* -1 (/ (- (* eps (+ (* -1/2 a) (* 1/2 a))) 1) b)) (/ 1 a))","(-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a))","(* -1 (* b (- (* -1 (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))) (/ 1 b))))","(fma.f64 (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps) b #s(literal 1 binary64))","(* -1 (* b (- (* -2 (/ a b)) 1)))","(fma.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (neg.f64 b) b)","(* -1 (* b (- (* -1 (/ (+ (* 2 a) (/ (pow a 2) b)) b)) 1)))","(*.f64 (-.f64 #s(literal -1 binary64) (/.f64 (*.f64 (+.f64 (/.f64 a b) #s(literal 2 binary64)) a) b)) (neg.f64 b))","(* -1 (* b (- (* -1 (/ (+ 1 (* 1/2 (/ a b))) b)) (* 1/2 (/ 1 a)))))","(*.f64 (+.f64 (/.f64 (fma.f64 (/.f64 a b) #s(literal 1/2 binary64) #s(literal 1 binary64)) b) (/.f64 #s(literal 1/2 binary64) a)) b)","(/ (+ a b) (* a b))","(/.f64 (/.f64 (+.f64 b a) b) a)","(+ (* eps (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) b) (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) b)) (/.f64 (/.f64 (+.f64 b a) a) a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b))) eps (-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) b) (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) b)) (/.f64 (/.f64 (+.f64 b a) a) a) (fma.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/6 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) a)) (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 b #s(literal 3 binary64))) a (*.f64 b (fma.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) a) a) b (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))))) (*.f64 a a)) (/.f64 (+.f64 b a) (*.f64 b b)) (*.f64 (fma.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) b) (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) b)) (/.f64 (/.f64 (+.f64 b a) a) a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b))) (/.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal 1/2 binary64)) (*.f64 b a))))) eps (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)))) eps (-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (+ (* 1/6 (/ (pow (+ a b) 3) (* a b))) (* eps (- (* 1/24 (/ (pow (+ a b) 4) (* a b))) (+ (/ (* (+ a b) (+ (* 1/24 (* a (pow b 4))) (+ (* 1/24 (* (pow a 4) b)) (+ (* 1/12 (* (pow a 2) (pow b 3))) (* 1/12 (* (pow a 3) (pow b 2))))))) (* (pow a 2) (pow b 2))) (+ (/ (* (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2))))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b))))) (* a b))))))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/24 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 4 binary64)) a)) (fma.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 (*.f64 a a) b) b) (+.f64 b a)) #s(literal 1/12 binary64) (*.f64 #s(literal 1/24 binary64) (fma.f64 (pow.f64 a #s(literal 4 binary64)) b (*.f64 (pow.f64 b #s(literal 4 binary64)) a)))) (*.f64 a a)) (/.f64 (+.f64 b a) (*.f64 b b)) (fma.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/6 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) a)) (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 b #s(literal 3 binary64))) a (*.f64 b (fma.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) a) a) b (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))))) (*.f64 a a)) (/.f64 (+.f64 b a) (*.f64 b b)) (*.f64 (fma.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) b) (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) b)) (/.f64 (/.f64 (+.f64 b a) a) a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b))) (/.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal 1/2 binary64)) (*.f64 b a))))) (/.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal 1/2 binary64)) (*.f64 b a)) (*.f64 (fma.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) b) (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) b)) (/.f64 (/.f64 (+.f64 b a) a) a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b))) (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 b #s(literal 3 binary64))) a (*.f64 b (fma.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) a) a) b (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))))) (*.f64 b a)))))) eps (-.f64 (*.f64 (/.f64 #s(literal 1/6 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) a)) (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 b #s(literal 3 binary64))) a (*.f64 b (fma.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) a) a) b (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))))) (*.f64 a a)) (/.f64 (+.f64 b a) (*.f64 b b)) (*.f64 (fma.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) b) (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) b)) (/.f64 (/.f64 (+.f64 b a) a) a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b))) (/.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal 1/2 binary64)) (*.f64 b a)))))) eps (fma.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) b) (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) b)) (/.f64 (/.f64 (+.f64 b a) a) a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)))) eps (-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a)))","(+ (* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b))))) (+ (/ 1 a) (/ 1 b)))","(-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a))","(+ (* (pow eps 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) eps) eps (-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a)))","(+ (* (pow eps 2) (- (+ (* 1/2 a) (* eps (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (+ (* 1/6 a) (* 1/4 a)))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) a) a (*.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) a) #s(literal -1/2 binary64))) eps (*.f64 a #s(literal 1/12 binary64))) (*.f64 eps eps) (-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a)))","(+ (* (pow eps 2) (- (+ (* 1/2 a) (* eps (- (+ (* 1/6 (pow a 2)) (* eps (- (* 1/24 (pow a 3)) (+ (* 1/120 (pow a 3)) (+ (* 1/48 (pow a 3)) (+ (* 1/6 (* (pow a 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))) (* 1/2 (* a (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))))))))) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (+ (* 1/6 a) (* 1/4 a)))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/80 binary64)) (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/12 binary64)) #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) a) a (*.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) a) #s(literal -1/2 binary64))) a) #s(literal 1/2 binary64)))) eps (fma.f64 (*.f64 #s(literal 1/24 binary64) a) a (*.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) a) #s(literal -1/2 binary64)))) eps (*.f64 a #s(literal 1/12 binary64))) (*.f64 eps eps) (-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a)))","(+ 1 (/ b a))","(-.f64 (/.f64 b a) #s(literal -1 binary64))","(+ 1 (+ (* b (* (pow eps 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))) (/ b a)))","(fma.f64 (*.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) b) eps) eps (-.f64 (/.f64 b a) #s(literal -1 binary64)))","(+ 1 (+ (* (pow eps 2) (+ (* b (* eps (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (* b (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))) (/ b a)))","(fma.f64 (*.f64 (*.f64 eps eps) b) (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) a) a (*.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) a) #s(literal -1/2 binary64))) eps (*.f64 a #s(literal 1/12 binary64))) (-.f64 (/.f64 b a) #s(literal -1 binary64)))","(+ 1 (+ (* (pow eps 2) (+ (* b (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))) (* eps (+ (* b (* eps (- (* 1/24 (pow a 3)) (+ (* 1/120 (pow a 3)) (+ (* 1/48 (pow a 3)) (+ (* 1/6 (* (pow a 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))) (* 1/2 (* a (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))))))))) (* b (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))))))))))) (/ b a)))","(fma.f64 (*.f64 b (fma.f64 (fma.f64 (-.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/80 binary64)) (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/12 binary64)) #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) a) a (*.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) a) #s(literal -1/2 binary64))) a) #s(literal 1/2 binary64)))) eps (fma.f64 (*.f64 #s(literal 1/24 binary64) a) a (*.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) a) #s(literal -1/2 binary64)))) eps (*.f64 a #s(literal 1/12 binary64)))) (*.f64 eps eps) (-.f64 (/.f64 b a) #s(literal -1 binary64)))","(+ (* (pow eps 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))) (/ 1 a))","(fma.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) eps) eps (/.f64 #s(literal 1 binary64) a))","(+ (* (pow eps 2) (- (+ (* 1/2 a) (* eps (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (+ (* 1/6 a) (* 1/4 a)))) (/ 1 a))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) a) a (*.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) a) #s(literal -1/2 binary64))) eps (*.f64 a #s(literal 1/12 binary64))) (*.f64 eps eps) (/.f64 #s(literal 1 binary64) a))","(+ (* (pow eps 2) (- (+ (* 1/2 a) (* eps (- (+ (* 1/6 (pow a 2)) (* eps (- (* 1/24 (pow a 3)) (+ (* 1/120 (pow a 3)) (+ (* 1/48 (pow a 3)) (+ (* 1/6 (* (pow a 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))) (* 1/2 (* a (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))))))))) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (+ (* 1/6 a) (* 1/4 a)))) (/ 1 a))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/80 binary64)) (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/12 binary64)) #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) a) a (*.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) a) #s(literal -1/2 binary64))) a) #s(literal 1/2 binary64)))) eps (fma.f64 (*.f64 #s(literal 1/24 binary64) a) a (*.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) a) #s(literal -1/2 binary64)))) eps (*.f64 a #s(literal 1/12 binary64))) (*.f64 eps eps) (/.f64 #s(literal 1 binary64) a))","(/ (+ (* 1/2 eps) (/ 1 a)) eps)","(/.f64 (fma.f64 #s(literal 1/2 binary64) eps (/.f64 #s(literal 1 binary64) a)) eps)","(/ (+ (* eps (+ 1/2 (* eps (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))) (/ 1 a)) eps)","(/.f64 (fma.f64 (fma.f64 (*.f64 a #s(literal 1/12 binary64)) eps #s(literal 1/2 binary64)) eps (/.f64 #s(literal 1 binary64) a)) eps)","(/ (+ (* eps (+ 1/2 (* eps (- (+ (* 1/2 a) (* eps (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (+ (* 1/6 a) (* 1/4 a)))))) (/ 1 a)) eps)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) a) a (*.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) a) #s(literal -1/2 binary64))) eps (*.f64 a #s(literal 1/12 binary64))) eps #s(literal 1/2 binary64)) eps (/.f64 #s(literal 1 binary64) a)) eps)","(* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b)))))","#s(literal 0 binary64)","(* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (+ (/ 1 (* a eps)) (/ 1 (* b eps))))))","(*.f64 (+.f64 (/.f64 (/.f64 #s(literal 1 binary64) eps) b) (/.f64 (/.f64 #s(literal 1 binary64) a) eps)) eps)","(* eps (- (+ (/ 1 (* b eps)) (/ (exp (* a eps)) (- (exp (* a eps)) 1))) 1/2))","(*.f64 (+.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) (-.f64 (/.f64 (/.f64 #s(literal 1 binary64) eps) b) #s(literal 1/2 binary64))) eps)","(* eps (+ (* b (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 eps)))","(fma.f64 (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps) b #s(literal 1 binary64))","(* -1 (* eps (+ (* -1 (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b))))) (* -1 (/ (+ (/ 1 a) (/ 1 b)) eps)))))","(*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a)) eps) eps)","(* -1 (* eps (- (* -1 (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 (* b eps)))))","(*.f64 (+.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) (-.f64 (/.f64 (/.f64 #s(literal 1 binary64) eps) b) #s(literal 1/2 binary64))) eps)","(* -1 (* eps (- (* -1 (* b (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))) (/ 1 eps))))","(fma.f64 (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps) b #s(literal 1 binary64))"]],"stop":[["iter limit",1],["node limit",1]],"time":247.48388671875,"type":"simplify"},{"count":[[20,656]],"egraph":[[0,8352,343,0.067158927],[2,3204,367,0.034908956],[1,365,367,0.00931999],[0,83,375,0.002424932],[0,52,385,0.000484595]],"inputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) b) a))","(/.f64 (/.f64 (+.f64 b a) b) a)","(/.f64 (+.f64 b a) b)","(+.f64 b a)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","(/.f64 #s(literal 1 binary64) a)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b))","(/.f64 #s(literal 1 binary64) b)","(fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a))))","(fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))","(*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))) b #s(literal 1 binary64)) b))","(/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))) b #s(literal 1 binary64)) b)","(fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))) b #s(literal 1 binary64))","(*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a)))))","(/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)","(/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b))","(*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))","(/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a)))"]],"memory":[[-6349504,60113552]],"outputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) b) a))","(*.f64 (pow.f64 (/.f64 a (neg.f64 (+.f64 b a))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) b))","(*.f64 (pow.f64 (/.f64 a (+.f64 b a)) #s(literal -1 binary64)) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 (+.f64 b a) b) #s(literal 1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -2 binary64))) (pow.f64 (/.f64 (-.f64 a b) (*.f64 b a)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64))) (pow.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (pow.f64 b #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 (+.f64 b a)) b) (/.f64 #s(literal -1 binary64) a))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 (+.f64 b a) b))","(*.f64 (/.f64 (+.f64 b a) b) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (+.f64 b a) (pow.f64 (*.f64 b a) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 (+.f64 b a) b) a))","(pow.f64 (/.f64 (/.f64 (-.f64 a b) (*.f64 b a)) (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (pow.f64 b #s(literal -2 binary64))) (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 a (/.f64 b (+.f64 b a))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 b (+.f64 b a)) a) #s(literal -1 binary64))","(pow.f64 (*.f64 a (/.f64 b (+.f64 b a))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (+.f64 b a) a)) (neg.f64 b))","(/.f64 (neg.f64 (*.f64 (neg.f64 (+.f64 b a)) (pow.f64 a #s(literal -1 binary64)))) (neg.f64 (neg.f64 b)))","(/.f64 (neg.f64 (*.f64 (+.f64 b a) (pow.f64 a #s(literal -1 binary64)))) (neg.f64 b))","(/.f64 (neg.f64 (*.f64 (/.f64 (+.f64 b a) b) #s(literal -1 binary64))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (/.f64 (+.f64 b a) b) #s(literal 1 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 b #s(literal -2 binary64)))) (neg.f64 (-.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 b #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -2 binary64))))) (neg.f64 (neg.f64 (/.f64 (-.f64 a b) (*.f64 b a)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64))))) (neg.f64 (neg.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (pow.f64 b #s(literal -2 binary64))))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (+.f64 b a)) #s(literal -1 binary64))) (neg.f64 (*.f64 (neg.f64 b) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (+.f64 b a)) #s(literal 1 binary64))) (neg.f64 (*.f64 (neg.f64 b) a)))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 a) (*.f64 (neg.f64 b) #s(literal -1 binary64)))) (neg.f64 (*.f64 (neg.f64 b) (neg.f64 a))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) a (*.f64 (neg.f64 b) #s(literal 1 binary64)))) (neg.f64 (*.f64 (neg.f64 b) a)))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 b #s(literal -1 binary64)))) (neg.f64 (*.f64 b (neg.f64 a))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 b) (*.f64 (neg.f64 a) #s(literal -1 binary64)))) (neg.f64 (*.f64 (neg.f64 a) (neg.f64 b))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) b (*.f64 (neg.f64 a) #s(literal 1 binary64)))) (neg.f64 (*.f64 (neg.f64 a) b)))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 b) (*.f64 a #s(literal -1 binary64)))) (neg.f64 (*.f64 a (neg.f64 b))))","(/.f64 (neg.f64 (*.f64 (+.f64 b a) #s(literal -1 binary64))) (neg.f64 (*.f64 b (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (+.f64 b a) #s(literal 1 binary64))) (neg.f64 (*.f64 b a)))","(/.f64 (/.f64 (+.f64 b a) a) b)","(/.f64 (*.f64 (neg.f64 (+.f64 b a)) (pow.f64 a #s(literal -1 binary64))) (neg.f64 b))","(/.f64 (*.f64 (+.f64 b a) (pow.f64 a #s(literal -1 binary64))) b)","(/.f64 (*.f64 (/.f64 (+.f64 b a) b) #s(literal -1 binary64)) (neg.f64 a))","(/.f64 (*.f64 (/.f64 (+.f64 b a) b) #s(literal 1 binary64)) a)","(/.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 b #s(literal -2 binary64))) (-.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 b #s(literal -1 binary64))))","(/.f64 (neg.f64 (pow.f64 a #s(literal -1 binary64))) (neg.f64 (/.f64 b (+.f64 b a))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -2 binary64)))) (neg.f64 (/.f64 (-.f64 a b) (*.f64 b a))))","(/.f64 (neg.f64 (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 a #s(literal -2 binary64)) (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64)))) (neg.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (pow.f64 b #s(literal -2 binary64)))))","(/.f64 (neg.f64 (*.f64 (+.f64 b a) (-.f64 a b))) (neg.f64 (*.f64 (*.f64 b a) (-.f64 a b))))","(/.f64 (neg.f64 (*.f64 (+.f64 b a) (-.f64 b a))) (neg.f64 (*.f64 (*.f64 b a) (-.f64 b a))))","(/.f64 (neg.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 b a) (fma.f64 b (-.f64 b a) (*.f64 a a)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 b a) (fma.f64 a (-.f64 a b) (*.f64 b b)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 b a))) (neg.f64 (neg.f64 (*.f64 b a))))","(/.f64 (neg.f64 (neg.f64 (+.f64 b a))) (neg.f64 (*.f64 a (neg.f64 b))))","(/.f64 (*.f64 (neg.f64 (+.f64 b a)) #s(literal -1 binary64)) (*.f64 (neg.f64 b) (neg.f64 a)))","(/.f64 (*.f64 (neg.f64 (+.f64 b a)) #s(literal 1 binary64)) (*.f64 (neg.f64 b) a))","(/.f64 (*.f64 (+.f64 b a) #s(literal -1 binary64)) (*.f64 b (neg.f64 a)))","(/.f64 (*.f64 (+.f64 b a) #s(literal 1 binary64)) (*.f64 b a))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 a) (*.f64 (neg.f64 b) #s(literal -1 binary64))) (*.f64 (neg.f64 b) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal -1 binary64) a (*.f64 (neg.f64 b) #s(literal 1 binary64))) (*.f64 (neg.f64 b) a))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 b #s(literal -1 binary64))) (*.f64 b (neg.f64 a)))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 b) (*.f64 (neg.f64 a) #s(literal -1 binary64))) (*.f64 (neg.f64 a) (neg.f64 b)))","(/.f64 (fma.f64 #s(literal -1 binary64) b (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) b))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 b) (*.f64 a #s(literal -1 binary64))) (*.f64 a (neg.f64 b)))","(/.f64 (*.f64 (+.f64 b a) (-.f64 a b)) (*.f64 (*.f64 b a) (-.f64 a b)))","(/.f64 (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -2 binary64))) (/.f64 (-.f64 a b) (*.f64 b a)))","(/.f64 (*.f64 (+.f64 b a) (-.f64 b a)) (*.f64 (*.f64 b a) (-.f64 b a)))","(/.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 b a) (fma.f64 b (-.f64 b a) (*.f64 a a))))","(/.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 b a) (fma.f64 a (-.f64 a b) (*.f64 b b))))","(/.f64 (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64))) (+.f64 (pow.f64 a #s(literal -2 binary64)) (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64)))))","(/.f64 (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64))) (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (pow.f64 b #s(literal -2 binary64))))","(/.f64 (/.f64 (neg.f64 (+.f64 b a)) b) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 (/.f64 (neg.f64 (+.f64 b a)) b) (neg.f64 a))","(/.f64 (neg.f64 (+.f64 b a)) (neg.f64 (*.f64 b a)))","(/.f64 (neg.f64 (+.f64 b a)) (*.f64 a (neg.f64 b)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (-.f64 a b) (*.f64 b a)) (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (pow.f64 b #s(literal -2 binary64))) (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 b a) (+.f64 b a))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 a (/.f64 b (+.f64 b a))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 b (+.f64 b a)) a)))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 a (/.f64 b (+.f64 b a)))))","(/.f64 #s(literal -1 binary64) (*.f64 (/.f64 b (+.f64 b a)) (neg.f64 a)))","(/.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 b (+.f64 b a)))","(/.f64 (/.f64 (+.f64 b a) b) (neg.f64 (neg.f64 a)))","(/.f64 (/.f64 (+.f64 b a) b) a)","(/.f64 (+.f64 b a) (*.f64 b a))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 a (/.f64 b (+.f64 b a))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (/.f64 b (+.f64 b a)) (neg.f64 a))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 a b) (*.f64 b a)) (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (pow.f64 b #s(literal -2 binary64))) (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 b a) (+.f64 b a)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 a (/.f64 b (+.f64 b a))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 b (+.f64 b a)) a))","(/.f64 #s(literal 1 binary64) (*.f64 a (/.f64 b (+.f64 b a))))","(neg.f64 (/.f64 (/.f64 (neg.f64 (+.f64 b a)) b) a))","(fma.f64 (pow.f64 a #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1/2 binary64)) (pow.f64 b #s(literal -1 binary64)))","(fma.f64 (pow.f64 b #s(literal -1/2 binary64)) (pow.f64 b #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) a) (pow.f64 b #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) b) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal 1 binary64) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal 1 binary64) (pow.f64 b #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 b #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 a #s(literal -1 binary64)) (pow.f64 b #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 b #s(literal -2 binary64)) (/.f64 (-.f64 a b) (*.f64 b a))) (/.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (-.f64 a b) (*.f64 b a))))","(exp.f64 (*.f64 (log.f64 (*.f64 a (/.f64 b (+.f64 b a)))) #s(literal -1 binary64)))","(+.f64 (pow.f64 b #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(+.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 b (*.f64 (+.f64 b a) (-.f64 a b))) #s(literal -1 binary64)) (pow.f64 (-.f64 a b) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 b (*.f64 (+.f64 b a) (-.f64 b a))) #s(literal -1 binary64)) (pow.f64 (-.f64 b a) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 b (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 b (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 a (-.f64 a b) (*.f64 b b)) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 b a) #s(literal 1 binary64)) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (neg.f64 (+.f64 b a)) (/.f64 #s(literal -1 binary64) b))","(*.f64 (pow.f64 b #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 b a) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 b #s(literal -1 binary64)) (+.f64 b a))","(*.f64 (+.f64 b a) (pow.f64 b #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (+.f64 b a) b))","(pow.f64 (/.f64 (/.f64 b (+.f64 b a)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 b (+.f64 b a)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 a b)) (pow.f64 b #s(literal -1 binary64)))) (neg.f64 (-.f64 a b)))","(/.f64 (neg.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) (pow.f64 b #s(literal -1 binary64)))) (neg.f64 (-.f64 b a)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 b #s(literal -1 binary64)))) (neg.f64 (fma.f64 b (-.f64 b a) (*.f64 a a))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 b #s(literal -1 binary64)))) (neg.f64 (fma.f64 a (-.f64 a b) (*.f64 b b))))","(/.f64 (neg.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 a b)) #s(literal -1 binary64))) (neg.f64 (*.f64 (-.f64 a b) (neg.f64 b))))","(/.f64 (neg.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) #s(literal -1 binary64))) (neg.f64 (*.f64 (-.f64 b a) (neg.f64 b))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) (neg.f64 b))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 a (-.f64 a b) (*.f64 b b)) (neg.f64 b))))","(/.f64 (neg.f64 (*.f64 (+.f64 b a) #s(literal -1 binary64))) (neg.f64 (neg.f64 b)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (+.f64 b a)))) (neg.f64 (neg.f64 (neg.f64 b))))","(/.f64 (neg.f64 (*.f64 (+.f64 b a) #s(literal 1 binary64))) (neg.f64 b))","(/.f64 (neg.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 a b)) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 a b) b)))","(/.f64 (neg.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 b a) b)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) b)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 a (-.f64 a b) (*.f64 b b)) b)))","(/.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 a b)) (pow.f64 b #s(literal -1 binary64))) (-.f64 a b))","(/.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) (pow.f64 b #s(literal -1 binary64))) (-.f64 b a))","(/.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 b #s(literal -1 binary64))) (fma.f64 b (-.f64 b a) (*.f64 a a)))","(/.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 b #s(literal -1 binary64))) (fma.f64 a (-.f64 a b) (*.f64 b b)))","(/.f64 (neg.f64 (*.f64 (+.f64 b a) (-.f64 a b))) (neg.f64 (*.f64 b (-.f64 a b))))","(/.f64 (neg.f64 (*.f64 (+.f64 b a) (-.f64 b a))) (neg.f64 (*.f64 b (-.f64 b a))))","(/.f64 (neg.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (*.f64 b (fma.f64 b (-.f64 b a) (*.f64 a a)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (*.f64 b (fma.f64 a (-.f64 a b) (*.f64 b b)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 b a))) (neg.f64 (neg.f64 b)))","(/.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 a b)) #s(literal -1 binary64)) (*.f64 (-.f64 a b) (neg.f64 b)))","(/.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) #s(literal -1 binary64)) (*.f64 (-.f64 b a) (neg.f64 b)))","(/.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) (neg.f64 b)))","(/.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 a (-.f64 a b) (*.f64 b b)) (neg.f64 b)))","(/.f64 (*.f64 (+.f64 b a) #s(literal -1 binary64)) (neg.f64 b))","(/.f64 (*.f64 (+.f64 b a) #s(literal 1 binary64)) b)","(/.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 a b)) #s(literal 1 binary64)) (*.f64 (-.f64 a b) b))","(/.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) #s(literal 1 binary64)) (*.f64 (-.f64 b a) b))","(/.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) b))","(/.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 a (-.f64 a b) (*.f64 b b)) b))","(/.f64 (*.f64 (+.f64 b a) (-.f64 a b)) (*.f64 b (-.f64 a b)))","(/.f64 (*.f64 (+.f64 b a) (-.f64 b a)) (*.f64 b (-.f64 b a)))","(/.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 b (fma.f64 b (-.f64 b a) (*.f64 a a))))","(/.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 b (fma.f64 a (-.f64 a b) (*.f64 b b))))","(/.f64 (neg.f64 (+.f64 b a)) (neg.f64 b))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 b (+.f64 b a)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 b (+.f64 b a))))","(/.f64 (+.f64 b a) b)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 b (+.f64 b a)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b (+.f64 b a)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 b (+.f64 b a)))","(neg.f64 (/.f64 (neg.f64 (+.f64 b a)) b))","(exp.f64 (fma.f64 (log.f64 b) #s(literal -1 binary64) (log.f64 (+.f64 b a))))","(exp.f64 (+.f64 (log.f64 (+.f64 b a)) (neg.f64 (log.f64 b))))","(exp.f64 (*.f64 (log.f64 (/.f64 b (+.f64 b a))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sqrt.f64 (+.f64 b a)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (+.f64 b a)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (*.f64 (+.f64 b a) (-.f64 a b)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 a b) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (*.f64 (+.f64 b a) (-.f64 b a)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 b a) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 a (-.f64 a b) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (sqrt.f64 (+.f64 b a)) (sqrt.f64 (+.f64 b a)))","(*.f64 (*.f64 (+.f64 b a) (-.f64 a b)) (pow.f64 (-.f64 a b) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) (pow.f64 (-.f64 b a) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (fma.f64 a (-.f64 a b) (*.f64 b b)) #s(literal -1 binary64)))","(pow.f64 (sqrt.f64 (+.f64 b a)) #s(literal 2 binary64))","(pow.f64 (/.f64 (-.f64 a b) (*.f64 (+.f64 b a) (-.f64 a b))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 b a) (*.f64 (+.f64 b a) (-.f64 b a))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 a (-.f64 a b) (*.f64 b b)) (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (+.f64 b a) #s(literal 1 binary64))","(/.f64 (neg.f64 (neg.f64 (*.f64 (+.f64 b a) (-.f64 a b)))) (neg.f64 (neg.f64 (-.f64 a b))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (+.f64 b a) (-.f64 b a)))) (neg.f64 (neg.f64 (-.f64 b a))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 a (-.f64 a b) (*.f64 b b)))))","(/.f64 (exp.f64 (log.f64 (*.f64 (+.f64 b a) (-.f64 a b)))) (exp.f64 (log.f64 (-.f64 a b))))","(/.f64 (exp.f64 (log.f64 (*.f64 (+.f64 b a) (-.f64 b a)))) (exp.f64 (log.f64 (-.f64 b a))))","(/.f64 (exp.f64 (log.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))))) (exp.f64 (log.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)))))","(/.f64 (exp.f64 (log.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))))) (exp.f64 (log.f64 (fma.f64 a (-.f64 a b) (*.f64 b b)))))","(/.f64 (neg.f64 (*.f64 (+.f64 b a) (-.f64 a b))) (neg.f64 (-.f64 a b)))","(/.f64 (neg.f64 (*.f64 (+.f64 b a) (-.f64 b a))) (neg.f64 (-.f64 b a)))","(/.f64 (neg.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (fma.f64 b (-.f64 b a) (*.f64 a a))))","(/.f64 (neg.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (fma.f64 a (-.f64 a b) (*.f64 b b))))","(/.f64 (*.f64 (+.f64 b a) (-.f64 a b)) (-.f64 a b))","(/.f64 (*.f64 (+.f64 b a) (-.f64 b a)) (-.f64 b a))","(/.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (fma.f64 b (-.f64 b a) (*.f64 a a)))","(/.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (fma.f64 a (-.f64 a b) (*.f64 b b)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 a b) (*.f64 (+.f64 b a) (-.f64 a b)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 b a) (*.f64 (+.f64 b a) (-.f64 b a)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 a (-.f64 a b) (*.f64 b b)) (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 a b) (*.f64 (+.f64 b a) (-.f64 a b))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 b a) (*.f64 (+.f64 b a) (-.f64 b a))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 a (-.f64 a b) (*.f64 b b)) (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(fma.f64 #s(literal 1 binary64) b a)","(fma.f64 #s(literal 1 binary64) a b)","(fma.f64 b #s(literal 1 binary64) a)","(fma.f64 a #s(literal 1 binary64) b)","(-.f64 (/.f64 (*.f64 a a) (-.f64 a b)) (/.f64 (*.f64 b b) (-.f64 a b)))","(-.f64 (/.f64 (*.f64 b b) (-.f64 b a)) (/.f64 (*.f64 a a) (-.f64 b a)))","(exp.f64 (log.f64 (+.f64 b a)))","(+.f64 b a)","(+.f64 a b)","(log.f64 (exp.f64 (+.f64 b a)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1/2 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) a))","(*.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 a #s(literal -1 binary64)))","(pow.f64 (pow.f64 a #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (neg.f64 a)) #s(literal -1 binary64))","(pow.f64 (*.f64 a a) #s(literal -1/2 binary64))","(pow.f64 a #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 #s(literal -1 binary64) (neg.f64 a))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 a)))","(/.f64 #s(literal 1 binary64) a)","(neg.f64 (/.f64 #s(literal -1 binary64) a))","(exp.f64 (neg.f64 (log.f64 a)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (pow.f64 b #s(literal -1/2 binary64)) (pow.f64 b #s(literal -1/2 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) b))","(*.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 b #s(literal -1 binary64)))","(pow.f64 (pow.f64 b #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (neg.f64 b)) #s(literal -1 binary64))","(pow.f64 (*.f64 b b) #s(literal -1/2 binary64))","(pow.f64 b #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (neg.f64 b))))","(/.f64 #s(literal -1 binary64) (neg.f64 b))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 b)))","(/.f64 #s(literal 1 binary64) b)","(neg.f64 (/.f64 #s(literal -1 binary64) b))","(exp.f64 (neg.f64 (log.f64 b)))","(*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)) #s(literal 2 binary64))) (pow.f64 (/.f64 (-.f64 (/.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) (*.f64 b a)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 (*.f64 (+.f64 b a) b) a)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (/.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 a (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)) (/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)) (*.f64 b a))) (*.f64 b a)) (pow.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 (-.f64 (/.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) (*.f64 b a)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)) (/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)) (*.f64 b a))) (*.f64 b a)) (pow.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))) #s(literal 2 binary64))) (fma.f64 (pow.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 (*.f64 (+.f64 b a) b) a)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (/.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 a (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) #s(literal 3 binary64))))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))) #s(literal 2 binary64)))) (neg.f64 (/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)) (*.f64 b a))) (*.f64 b a))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (/.f64 (-.f64 (/.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) (*.f64 b a)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 (*.f64 (+.f64 b a) b) a)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (/.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 a (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) #s(literal 3 binary64)))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)) (/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)) (*.f64 b a))) (*.f64 b a)) (pow.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)) b (*.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (/.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) a)))) (neg.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) b)))","(/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)) a (*.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b))))) (neg.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) a)))","(/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)) (*.f64 b a) (*.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64)))))) (neg.f64 (pow.f64 (*.f64 b a) #s(literal 3 binary64))))","(/.f64 (neg.f64 (fma.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) a) (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (*.f64 b (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a))))) (neg.f64 (*.f64 b (pow.f64 (*.f64 b a) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)) (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (*.f64 a (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a))))) (neg.f64 (*.f64 a (pow.f64 (*.f64 b a) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (*.f64 (*.f64 b a) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a))))) (neg.f64 (pow.f64 (*.f64 b a) #s(literal 3 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))) #s(literal 2 binary64))) (/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)) (*.f64 b a))) (*.f64 b a)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)) #s(literal 2 binary64)))) (neg.f64 (/.f64 (-.f64 (/.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) (*.f64 b a))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 (*.f64 (+.f64 b a) b) a)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (/.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 a (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) #s(literal 3 binary64))))) (neg.f64 (+.f64 (pow.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))) #s(literal 2 binary64)) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)) (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) (pow.f64 (*.f64 b a) #s(literal 3 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 (*.f64 (+.f64 b a) b) a)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (/.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 a (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)) (/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)) (*.f64 b a))) (*.f64 b a)) (pow.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)) b (*.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (/.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) a))) (*.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) b))","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)) a (*.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)))) (*.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) a))","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)) (*.f64 b a) (*.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))))) (pow.f64 (*.f64 b a) #s(literal 3 binary64)))","(/.f64 (fma.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) a) (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (*.f64 b (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)))) (*.f64 b (pow.f64 (*.f64 b a) #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)) (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (*.f64 a (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)))) (*.f64 a (pow.f64 (*.f64 b a) #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (*.f64 (*.f64 b a) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)))) (pow.f64 (*.f64 b a) #s(literal 3 binary64)))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)) #s(literal 2 binary64))) (/.f64 (-.f64 (/.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) (*.f64 b a)))","(/.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 (*.f64 (+.f64 b a) b) a)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (/.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 a (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) #s(literal 3 binary64)))) (+.f64 (pow.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))) #s(literal 2 binary64)) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)) (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) (pow.f64 (*.f64 b a) #s(literal 3 binary64))))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 (*.f64 (+.f64 b a) b) a)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (/.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 a (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) #s(literal 3 binary64)))) (fma.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)) (/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)) (*.f64 b a))) (*.f64 b a)) (pow.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (-.f64 (/.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) (*.f64 b a)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)) (/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)) (*.f64 b a))) (*.f64 b a)) (pow.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))) #s(literal 2 binary64))) (fma.f64 (pow.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 (*.f64 (+.f64 b a) b) a)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (/.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 a (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) #s(literal 3 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 (/.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) (*.f64 b a)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)) (/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)) (*.f64 b a))) (*.f64 b a)) (pow.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))) #s(literal 2 binary64))) (fma.f64 (pow.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 (*.f64 (+.f64 b a) b) a)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (/.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 a (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) #s(literal 3 binary64))))))","(fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 (*.f64 (+.f64 b a) b) a)) #s(literal -1/2 binary64) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)))","(fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (*.f64 (*.f64 b a) a)) (/.f64 (+.f64 b a) b) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (*.f64 b a)) (/.f64 (/.f64 (+.f64 b a) b) a) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) b) (/.f64 (/.f64 (/.f64 (+.f64 b a) b) a) a) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)))","(fma.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b) (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) a) (pow.f64 b #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)) (pow.f64 a #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))))","(fma.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)) (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)))","(fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (pow.f64 (*.f64 b a) #s(literal -2 binary64))) (*.f64 (*.f64 (+.f64 b a) b) a) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) (pow.f64 (*.f64 b a) #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))))","(fma.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))))","(fma.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a) (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))))","(fma.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) (/.f64 (/.f64 #s(literal 1/2 binary64) a) b) (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))))","(fma.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) (/.f64 #s(literal 1/2 binary64) (*.f64 b a)) (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))))","(fma.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) (pow.f64 (*.f64 b (*.f64 a #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))))","(fma.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)))","(fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)))","(fma.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (*.f64 (+.f64 b a) b) a) (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a))) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)))","(fma.f64 (*.f64 (*.f64 (+.f64 b a) b) a) (*.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (pow.f64 (*.f64 b a) #s(literal -2 binary64))) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)))","(fma.f64 (*.f64 b a) (*.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a))) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)))","(fma.f64 (*.f64 b a) (*.f64 (+.f64 b a) (*.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (pow.f64 (*.f64 b a) #s(literal -2 binary64)))) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)))","(fma.f64 (+.f64 b a) (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a))) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)))","(fma.f64 (+.f64 b a) (*.f64 (*.f64 b a) (*.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (pow.f64 (*.f64 b a) #s(literal -2 binary64)))) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)))","(fma.f64 b (*.f64 (*.f64 (+.f64 b a) a) (*.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (pow.f64 (*.f64 b a) #s(literal -2 binary64)))) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))) #s(literal 2 binary64)) (/.f64 (-.f64 (/.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) (*.f64 b a))) (/.f64 (pow.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)) #s(literal 2 binary64)) (/.f64 (-.f64 (/.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) (*.f64 b a))))","(+.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)))","(+.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)) (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (/.f64 (/.f64 (+.f64 b a) b) a)))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 2 binary64)) (pow.f64 (/.f64 (/.f64 (+.f64 b a) b) a) #s(literal 2 binary64))) (pow.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (neg.f64 (/.f64 (/.f64 (+.f64 b a) b) a))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (/.f64 (/.f64 (+.f64 b a) b) a) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 3 binary64))) (pow.f64 (fma.f64 (/.f64 (/.f64 (+.f64 b a) b) a) (-.f64 (/.f64 (/.f64 (+.f64 b a) b) a) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps)) (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (neg.f64 (/.f64 (/.f64 (+.f64 b a) b) a))) (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 2 binary64)) (pow.f64 (/.f64 (/.f64 (+.f64 b a) b) a) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (/.f64 (/.f64 (+.f64 b a) b) a) (-.f64 (/.f64 (/.f64 (+.f64 b a) b) a) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps)) (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 2 binary64))) (+.f64 (pow.f64 (/.f64 (/.f64 (+.f64 b a) b) a) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (pow.f64 b #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 a #s(literal -2 binary64)))) (neg.f64 (-.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (pow.f64 b #s(literal -1 binary64))) (pow.f64 a #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (+.f64 b a) b) a) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 2 binary64)))) (neg.f64 (-.f64 (/.f64 (/.f64 (+.f64 b a) b) a) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (pow.f64 b #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (pow.f64 b #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (pow.f64 a #s(literal -2 binary64)) (*.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (pow.f64 b #s(literal -1 binary64))) (pow.f64 a #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 2 binary64)) (pow.f64 (/.f64 (/.f64 (+.f64 b a) b) a) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (neg.f64 (/.f64 (/.f64 (+.f64 b a) b) a))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (/.f64 (/.f64 (+.f64 b a) b) a) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (/.f64 (/.f64 (+.f64 b a) b) a) (-.f64 (/.f64 (/.f64 (+.f64 b a) b) a) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps)) (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (pow.f64 b #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 a #s(literal -2 binary64))) (-.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (pow.f64 b #s(literal -1 binary64))) (pow.f64 a #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (+.f64 b a) b) a) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 2 binary64))) (-.f64 (/.f64 (/.f64 (+.f64 b a) b) a) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps)))","(/.f64 (+.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (pow.f64 b #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64))) (+.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (pow.f64 b #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (pow.f64 a #s(literal -2 binary64)) (*.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (pow.f64 b #s(literal -1 binary64))) (pow.f64 a #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 2 binary64)) (pow.f64 (/.f64 (/.f64 (+.f64 b a) b) a) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (neg.f64 (/.f64 (/.f64 (+.f64 b a) b) a)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (/.f64 (/.f64 (+.f64 b a) b) a) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (/.f64 (/.f64 (+.f64 b a) b) a) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 2 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) (*.f64 eps (/.f64 (/.f64 (+.f64 b a) b) a)))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (/.f64 (/.f64 (+.f64 b a) b) a) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (/.f64 (/.f64 (+.f64 b a) b) a) (-.f64 (/.f64 (/.f64 (+.f64 b a) b) a) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps)) (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 2 binary64)) (pow.f64 (/.f64 (/.f64 (+.f64 b a) b) a) #s(literal 2 binary64))) (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (neg.f64 (/.f64 (/.f64 (+.f64 b a) b) a))))","(/.f64 (+.f64 (pow.f64 (/.f64 (/.f64 (+.f64 b a) b) a) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (/.f64 (+.f64 b a) b) a) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 2 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) (*.f64 eps (/.f64 (/.f64 (+.f64 b a) b) a))))))","(/.f64 (+.f64 (pow.f64 (/.f64 (/.f64 (+.f64 b a) b) a) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 3 binary64))) (fma.f64 (/.f64 (/.f64 (+.f64 b a) b) a) (-.f64 (/.f64 (/.f64 (+.f64 b a) b) a) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps)) (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (neg.f64 (/.f64 (/.f64 (+.f64 b a) b) a))) (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 2 binary64)) (pow.f64 (/.f64 (/.f64 (+.f64 b a) b) a) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (/.f64 (/.f64 (+.f64 b a) b) a) (-.f64 (/.f64 (/.f64 (+.f64 b a) b) a) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps)) (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 2 binary64))) (+.f64 (pow.f64 (/.f64 (/.f64 (+.f64 b a) b) a) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (neg.f64 (/.f64 (/.f64 (+.f64 b a) b) a))) (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 2 binary64)) (pow.f64 (/.f64 (/.f64 (+.f64 b a) b) a) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (/.f64 (+.f64 b a) b) a) (-.f64 (/.f64 (/.f64 (+.f64 b a) b) a) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps)) (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 2 binary64))) (+.f64 (pow.f64 (/.f64 (/.f64 (+.f64 b a) b) a) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 3 binary64)))))","(fma.f64 (pow.f64 (/.f64 a (neg.f64 (+.f64 b a))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) b) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps))","(fma.f64 (pow.f64 (/.f64 a (+.f64 b a)) #s(literal -1 binary64)) (pow.f64 b #s(literal -1 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps))","(fma.f64 (*.f64 (/.f64 (+.f64 b a) b) #s(literal 1 binary64)) (pow.f64 a #s(literal -1 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps))","(fma.f64 (pow.f64 a #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1/2 binary64)) (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (pow.f64 b #s(literal -1 binary64))))","(fma.f64 (pow.f64 b #s(literal -1/2 binary64)) (pow.f64 b #s(literal -1/2 binary64)) (+.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps)))","(fma.f64 (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -2 binary64))) (pow.f64 (/.f64 (-.f64 a b) (*.f64 b a)) #s(literal -1 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps))","(fma.f64 (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64))) (pow.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (pow.f64 b #s(literal -2 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps))","(fma.f64 (/.f64 (neg.f64 (+.f64 b a)) b) (/.f64 #s(literal -1 binary64) a) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) a) (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (pow.f64 b #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) b) (+.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps)))","(fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (/.f64 (/.f64 (+.f64 b a) b) a))","(fma.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal 1 binary64) (+.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps)))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 (+.f64 b a) b) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal 1 binary64) (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (pow.f64 b #s(literal -1 binary64))))","(fma.f64 (/.f64 (+.f64 b a) b) (pow.f64 a #s(literal -1 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps))","(fma.f64 (+.f64 b a) (pow.f64 (*.f64 b a) #s(literal -1 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps))","(fma.f64 #s(literal 1 binary64) (/.f64 (/.f64 (+.f64 b a) b) a) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps))","(fma.f64 #s(literal 1 binary64) (pow.f64 b #s(literal -1 binary64)) (+.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps)))","(fma.f64 #s(literal 1 binary64) (pow.f64 a #s(literal -1 binary64)) (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (pow.f64 b #s(literal -1 binary64))))","(fma.f64 eps (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) (/.f64 (/.f64 (+.f64 b a) b) a))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 2 binary64)) (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (neg.f64 (/.f64 (/.f64 (+.f64 b a) b) a)))) (/.f64 (pow.f64 (/.f64 (/.f64 (+.f64 b a) b) a) #s(literal 2 binary64)) (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (neg.f64 (/.f64 (/.f64 (+.f64 b a) b) a)))))","(+.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (pow.f64 a #s(literal -1 binary64))) (pow.f64 b #s(literal -1 binary64)))","(+.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (pow.f64 b #s(literal -1 binary64))) (pow.f64 a #s(literal -1 binary64)))","(+.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) (/.f64 (/.f64 (+.f64 b a) b) a))","(+.f64 (/.f64 (/.f64 (+.f64 b a) b) a) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps))","(+.f64 (pow.f64 b #s(literal -1 binary64)) (+.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps)))","(+.f64 (pow.f64 a #s(literal -1 binary64)) (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (pow.f64 b #s(literal -1 binary64))))","(*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a))","(*.f64 (*.f64 #s(literal -1/2 binary64) b) (*.f64 (+.f64 b a) a))","(*.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 b a))","(*.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (+.f64 b a) b) a))","(*.f64 (*.f64 (*.f64 (+.f64 b a) b) a) #s(literal -1/2 binary64))","(*.f64 (*.f64 b a) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)))","(*.f64 (+.f64 b a) (*.f64 (*.f64 b a) #s(literal -1/2 binary64)))","(*.f64 b (*.f64 (*.f64 (+.f64 b a) a) #s(literal -1/2 binary64)))","(*.f64 b (*.f64 a (*.f64 #s(literal -1/2 binary64) (+.f64 b a))))","(*.f64 a (*.f64 b (*.f64 #s(literal -1/2 binary64) (+.f64 b a))))","(fma.f64 (*.f64 (*.f64 b b) a) #s(literal -1/2 binary64) (*.f64 (*.f64 (*.f64 b a) a) #s(literal -1/2 binary64)))","(fma.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 b b) a) (*.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 b a) a)))","(+.f64 (*.f64 (*.f64 (*.f64 b b) a) #s(literal -1/2 binary64)) (*.f64 (*.f64 (*.f64 b a) a) #s(literal -1/2 binary64)))","(+.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 b b) a)) (*.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 b a) a)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64)) b))","(*.f64 (pow.f64 (/.f64 b (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 b (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64))) (/.f64 #s(literal -1 binary64) b))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64)) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (pow.f64 b #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 b #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64)) b))","(pow.f64 (/.f64 (/.f64 b (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 b (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 b #s(literal -1 binary64)))) (neg.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 b #s(literal -1 binary64)))) (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (neg.f64 b)))","(/.f64 (neg.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 b))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64))))) (neg.f64 (neg.f64 (neg.f64 b))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal -1 binary64)) (neg.f64 b))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal -1 binary64)) b)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (*.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64))) (neg.f64 b))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64))) b)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 b #s(literal -1 binary64))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal -1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 b #s(literal -1 binary64))) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64))))","(/.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 b))","(/.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64)) #s(literal 1 binary64)) b)","(/.f64 (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64)))) (neg.f64 (neg.f64 b)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 b (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal -1 binary64)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 b (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal -1 binary64)) (neg.f64 b)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal -1 binary64)) b))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64))) (neg.f64 b)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64))) b))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 b (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal -1 binary64))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 b (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64))) (neg.f64 b))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 b (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 b (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64)))))","(/.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64)) b)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 b (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 b (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64))) b))","(neg.f64 (/.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64)) (neg.f64 b)))","(exp.f64 (*.f64 (log.f64 (/.f64 b (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64))))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal -1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal -1 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 3 binary64)) #s(literal 1 binary64))))","(fma.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal -1/2 binary64)) b) eps #s(literal 1 binary64))","(fma.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64))","(fma.f64 (+.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal -1/2 binary64)) (*.f64 b eps) #s(literal 1 binary64))","(fma.f64 (*.f64 b eps) (+.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal -1/2 binary64)) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 1 binary64))","(fma.f64 b (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 b (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) #s(literal 1 binary64))","(fma.f64 eps (*.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal -1/2 binary64)) b) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 eps (*.f64 (+.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal -1/2 binary64)) b) #s(literal 1 binary64))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b))","(*.f64 (+.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal -1/2 binary64)) eps)","(*.f64 eps (+.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal -1/2 binary64)))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))) #s(literal -2 binary64))) eps)) (neg.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))) #s(literal -3 binary64)) #s(literal -1/8 binary64)) eps)) (neg.f64 (+.f64 (/.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal -1/2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a)))) #s(literal 1/4 binary64))))","(/.f64 (neg.f64 (*.f64 eps (-.f64 #s(literal 1/4 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))) #s(literal -2 binary64))))) (neg.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))))))","(/.f64 (neg.f64 (*.f64 eps (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))) #s(literal -3 binary64)) #s(literal -1/8 binary64)))) (neg.f64 (+.f64 (/.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal -1/2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a)))) #s(literal 1/4 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) eps) #s(literal 2 binary64)) (pow.f64 (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a)))) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a)))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) eps) #s(literal 2 binary64)) (-.f64 (pow.f64 (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a)))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a)))))))))","(/.f64 (*.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))) #s(literal -2 binary64))) eps) (-.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))) #s(literal -3 binary64)) #s(literal -1/8 binary64)) eps) (+.f64 (/.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal -1/2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a)))) #s(literal 1/4 binary64)))","(/.f64 (*.f64 eps (-.f64 #s(literal 1/4 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))) #s(literal -2 binary64)))) (-.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps)))))","(/.f64 (*.f64 eps (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))) #s(literal -3 binary64)) #s(literal -1/8 binary64))) (+.f64 (/.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal -1/2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a)))) #s(literal 1/4 binary64)))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) eps) #s(literal 2 binary64)) (pow.f64 (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a)))) #s(literal 2 binary64))) (-.f64 (*.f64 #s(literal -1/2 binary64) eps) (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) eps) #s(literal 2 binary64)) (-.f64 (pow.f64 (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a)))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))))))","(fma.f64 (*.f64 eps (pow.f64 (exp.f64 a) eps)) (pow.f64 (expm1.f64 (*.f64 a eps)) #s(literal -1 binary64)) (*.f64 #s(literal -1/2 binary64) eps))","(fma.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) eps (*.f64 #s(literal -1/2 binary64) eps))","(fma.f64 (pow.f64 (exp.f64 a) eps) (*.f64 (pow.f64 (expm1.f64 (*.f64 a eps)) #s(literal -1 binary64)) eps) (*.f64 #s(literal -1/2 binary64) eps))","(fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a)))))","(fma.f64 eps (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) (*.f64 #s(literal -1/2 binary64) eps))","(fma.f64 eps #s(literal -1/2 binary64) (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a)))))","(+.f64 (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a)))) (*.f64 #s(literal -1/2 binary64) eps))","(+.f64 (*.f64 #s(literal -1/2 binary64) eps) (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a)))))","(*.f64 (*.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (neg.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) b))","(*.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (pow.f64 b #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 b a) #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 b #s(literal -1 binary64)) (pow.f64 (+.f64 b a) #s(literal 2 binary64)))","(*.f64 (+.f64 b a) (/.f64 (+.f64 b a) b))","(*.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b))","(pow.f64 (/.f64 (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) #s(literal -1 binary64))) (neg.f64 (neg.f64 b)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (neg.f64 b))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 b))","(/.f64 (*.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) #s(literal -1 binary64)) (neg.f64 b))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) (neg.f64 (neg.f64 b)))","(/.f64 (*.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) #s(literal 1 binary64)) b)","(/.f64 (neg.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64))) (neg.f64 b))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64)))))","(/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64))))","(neg.f64 (/.f64 (neg.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64))) b))","(neg.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) (neg.f64 b)))","(exp.f64 (fma.f64 (log.f64 (+.f64 b a)) #s(literal 2 binary64) (neg.f64 (log.f64 b))))","(exp.f64 (+.f64 (neg.f64 (log.f64 b)) (*.f64 (log.f64 (+.f64 b a)) #s(literal 2 binary64))))","(exp.f64 (*.f64 (log.f64 (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (*.f64 (+.f64 b a) (-.f64 a b))) #s(literal -1 binary64)) (pow.f64 (-.f64 a b) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (*.f64 (+.f64 b a) (-.f64 b a))) #s(literal -1 binary64)) (pow.f64 (-.f64 b a) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 a (-.f64 a b) (*.f64 b b)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 (*.f64 b a) a) #s(literal -1 binary64)) (/.f64 (+.f64 b a) b))","(*.f64 (/.f64 (/.f64 (/.f64 (+.f64 b a) b) a) a) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (pow.f64 (pow.f64 (+.f64 b a) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a))","(*.f64 (pow.f64 (*.f64 b a) #s(literal -1 binary64)) (/.f64 (/.f64 (+.f64 b a) b) a))","(*.f64 (neg.f64 (+.f64 b a)) (pow.f64 (neg.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 b #s(literal -1 binary64)) (/.f64 (/.f64 (/.f64 (+.f64 b a) b) a) a))","(*.f64 (+.f64 b a) (pow.f64 (*.f64 b a) #s(literal -2 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)))","(pow.f64 (/.f64 b (/.f64 (/.f64 (/.f64 (+.f64 b a) b) a) a)) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (+.f64 b a)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (+.f64 b a)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 a b)) (pow.f64 (*.f64 b a) #s(literal -2 binary64)))) (neg.f64 (-.f64 a b)))","(/.f64 (neg.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) (pow.f64 (*.f64 b a) #s(literal -2 binary64)))) (neg.f64 (-.f64 b a)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (*.f64 b a) #s(literal -2 binary64)))) (neg.f64 (fma.f64 b (-.f64 b a) (*.f64 a a))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (*.f64 b a) #s(literal -2 binary64)))) (neg.f64 (fma.f64 a (-.f64 a b) (*.f64 b b))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (/.f64 (/.f64 (+.f64 b a) b) a) a))) (neg.f64 (neg.f64 b)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (+.f64 b a)))) (neg.f64 (neg.f64 (neg.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 (+.f64 b a) #s(literal 1 binary64))) (neg.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 a b)) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 a b) (pow.f64 (*.f64 b a) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 b a) (pow.f64 (*.f64 b a) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) (pow.f64 (*.f64 b a) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 a (-.f64 a b) (*.f64 b b)) (pow.f64 (*.f64 b a) #s(literal 2 binary64)))))","(/.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 a b)) (pow.f64 (*.f64 b a) #s(literal -2 binary64))) (-.f64 a b))","(/.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) (pow.f64 (*.f64 b a) #s(literal -2 binary64))) (-.f64 b a))","(/.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (*.f64 b a) #s(literal -2 binary64))) (fma.f64 b (-.f64 b a) (*.f64 a a)))","(/.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (*.f64 b a) #s(literal -2 binary64))) (fma.f64 a (-.f64 a b) (*.f64 b b)))","(/.f64 (neg.f64 (/.f64 (/.f64 (+.f64 b a) b) a)) (neg.f64 (*.f64 b a)))","(/.f64 (neg.f64 (*.f64 (+.f64 b a) (-.f64 a b))) (neg.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (-.f64 a b))))","(/.f64 (neg.f64 (*.f64 (+.f64 b a) (-.f64 b a))) (neg.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (-.f64 b a))))","(/.f64 (neg.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (fma.f64 b (-.f64 b a) (*.f64 a a)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (fma.f64 a (-.f64 a b) (*.f64 b b)))))","(/.f64 (neg.f64 (/.f64 (/.f64 (/.f64 (+.f64 b a) b) a) a)) (neg.f64 b))","(/.f64 (neg.f64 (neg.f64 (+.f64 b a))) (neg.f64 (neg.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)))))","(/.f64 (*.f64 (+.f64 b a) #s(literal 1 binary64)) (pow.f64 (*.f64 b a) #s(literal 2 binary64)))","(/.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 a b)) #s(literal 1 binary64)) (*.f64 (-.f64 a b) (pow.f64 (*.f64 b a) #s(literal 2 binary64))))","(/.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) #s(literal 1 binary64)) (*.f64 (-.f64 b a) (pow.f64 (*.f64 b a) #s(literal 2 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) (pow.f64 (*.f64 b a) #s(literal 2 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 a (-.f64 a b) (*.f64 b b)) (pow.f64 (*.f64 b a) #s(literal 2 binary64))))","(/.f64 (/.f64 (/.f64 (/.f64 (+.f64 b a) b) a) a) b)","(/.f64 (*.f64 (+.f64 b a) (-.f64 a b)) (*.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (-.f64 a b)))","(/.f64 (*.f64 (+.f64 b a) (-.f64 b a)) (*.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (-.f64 b a)))","(/.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (fma.f64 b (-.f64 b a) (*.f64 a a))))","(/.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (fma.f64 a (-.f64 a b) (*.f64 b b))))","(/.f64 (/.f64 (neg.f64 (+.f64 b a)) b) (neg.f64 (*.f64 (*.f64 b a) a)))","(/.f64 (neg.f64 (+.f64 b a)) (neg.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 b (/.f64 (/.f64 (/.f64 (+.f64 b a) b) a) a))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (+.f64 b a)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (+.f64 b a))))","(/.f64 (/.f64 (/.f64 (+.f64 b a) b) a) (*.f64 b a))","(/.f64 (/.f64 (+.f64 b a) b) (*.f64 (*.f64 b a) a))","(/.f64 (+.f64 b a) (pow.f64 (*.f64 b a) #s(literal 2 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (+.f64 b a)))))","(/.f64 #s(literal 1 binary64) (/.f64 b (/.f64 (/.f64 (/.f64 (+.f64 b a) b) a) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (+.f64 b a)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (+.f64 b a)))","(neg.f64 (/.f64 (neg.f64 (+.f64 b a)) (pow.f64 (*.f64 b a) #s(literal 2 binary64))))","(neg.f64 (/.f64 (+.f64 b a) (neg.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)))))","(exp.f64 (*.f64 (log.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (+.f64 b a))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))","(*.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) a) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) (pow.f64 (*.f64 b a) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b))","(*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) (/.f64 (/.f64 #s(literal 1/2 binary64) a) b))","(*.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) (/.f64 #s(literal 1/2 binary64) (*.f64 b a)))","(*.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) (pow.f64 (*.f64 b (*.f64 a #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 b (/.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) a)) #s(literal -1 binary64))","(pow.f64 (/.f64 a (*.f64 #s(literal 1/2 binary64) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b))) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 b a) (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (*.f64 (*.f64 a #s(literal 2 binary64)) (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64))) (*.f64 a #s(literal 2 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (neg.f64 b)))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64))))) (neg.f64 (neg.f64 b)))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(literal 1 binary64))) (neg.f64 (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) #s(literal -1/2 binary64))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) #s(literal 1 binary64))) (neg.f64 (*.f64 a #s(literal 2 binary64))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) a))) (neg.f64 (neg.f64 b)))","(/.f64 (neg.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (*.f64 b a))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64))))) (neg.f64 (*.f64 a (neg.f64 b))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64))))) (neg.f64 (*.f64 (neg.f64 a) (neg.f64 b))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) (neg.f64 (*.f64 (neg.f64 a) b)))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64))))) (neg.f64 (*.f64 (*.f64 a #s(literal 2 binary64)) (neg.f64 b))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) (neg.f64 (*.f64 (*.f64 a #s(literal 2 binary64)) b)))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64))) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (neg.f64 b) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (neg.f64 b) (*.f64 a #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64))) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (neg.f64 b) a)))","(/.f64 (neg.f64 (*.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (neg.f64 (*.f64 b (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 b (*.f64 a #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)) (neg.f64 a))","(/.f64 (*.f64 (neg.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (neg.f64 b))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) (neg.f64 b))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(literal 1 binary64)) (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64))))","(/.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) #s(literal -1/2 binary64)) (neg.f64 a))","(/.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) #s(literal 1 binary64)) (*.f64 a #s(literal 2 binary64)))","(/.f64 (neg.f64 (/.f64 #s(literal 1/2 binary64) a)) (neg.f64 (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)) (neg.f64 (*.f64 a #s(literal 2 binary64))))","(/.f64 (neg.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) a)) (neg.f64 b))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b))) (neg.f64 a))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) (neg.f64 (*.f64 b a)))","(/.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) (*.f64 a (neg.f64 b)))","(/.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) (*.f64 (neg.f64 a) (neg.f64 b)))","(/.f64 (*.f64 #s(literal -1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) (*.f64 (neg.f64 a) b))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) (*.f64 (*.f64 a #s(literal 2 binary64)) (neg.f64 b)))","(/.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) (*.f64 (*.f64 a #s(literal 2 binary64)) b))","(/.f64 (*.f64 (neg.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64))) #s(literal 1/2 binary64)) (*.f64 (neg.f64 b) a))","(/.f64 (*.f64 (neg.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (*.f64 (neg.f64 b) (neg.f64 a)))","(/.f64 (*.f64 (neg.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (neg.f64 b) (*.f64 a #s(literal 2 binary64))))","(/.f64 (*.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) #s(literal -1/2 binary64)) (*.f64 b (neg.f64 a)))","(/.f64 (*.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 b (*.f64 a #s(literal 2 binary64))))","(/.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) a) b)","(/.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)) a)","(/.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) (*.f64 b a))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 b (/.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) a))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (*.f64 #s(literal 1/2 binary64) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 b a) (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (*.f64 a #s(literal 2 binary64)) (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64))) (*.f64 a #s(literal 2 binary64)))))","(/.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64))))","(/.f64 #s(literal 1/2 binary64) (neg.f64 (*.f64 (neg.f64 a) (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64))))))","(/.f64 #s(literal 1/2 binary64) (neg.f64 (*.f64 (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64))) (neg.f64 a))))","(/.f64 #s(literal 1/2 binary64) (*.f64 a (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64)))))","(/.f64 #s(literal 1/2 binary64) (*.f64 (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64))) a))","(/.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (*.f64 a #s(literal 2 binary64)))","(/.f64 #s(literal -1/2 binary64) (neg.f64 (*.f64 a (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64))))))","(/.f64 #s(literal -1/2 binary64) (neg.f64 (*.f64 (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64))) a)))","(/.f64 #s(literal -1/2 binary64) (*.f64 (neg.f64 a) (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64)))))","(/.f64 #s(literal -1/2 binary64) (*.f64 (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64))) (neg.f64 a)))","(/.f64 #s(literal 1 binary64) (/.f64 b (/.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) a)))","(/.f64 #s(literal 1 binary64) (/.f64 a (*.f64 #s(literal 1/2 binary64) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 b a) (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (*.f64 (*.f64 a #s(literal 2 binary64)) (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64))) (*.f64 a #s(literal 2 binary64))))","(*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps (*.f64 #s(literal 2 binary64) a)))) (+.f64 (pow.f64 (exp.f64 a) eps) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps (*.f64 a #s(literal 3 binary64))))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 a) eps) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 a) eps)))","(*.f64 (pow.f64 (pow.f64 (exp.f64 a) eps) #s(literal 1/2 binary64)) (/.f64 (pow.f64 (pow.f64 (exp.f64 a) eps) #s(literal 1/2 binary64)) (expm1.f64 (*.f64 a eps))))","(*.f64 (pow.f64 (pow.f64 (exp.f64 a) eps) #s(literal 1/2 binary64)) (*.f64 (pow.f64 (pow.f64 (exp.f64 a) eps) #s(literal 1/2 binary64)) (pow.f64 (expm1.f64 (*.f64 a eps)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (expm1.f64 (*.f64 a eps)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (exp.f64 eps) (neg.f64 a)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (expm1.f64 (*.f64 a eps)) #s(literal -1 binary64)) (pow.f64 (exp.f64 a) eps))","(*.f64 (neg.f64 (pow.f64 (exp.f64 a) eps)) (pow.f64 (neg.f64 (expm1.f64 (*.f64 a eps))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (exp.f64 a) eps) (pow.f64 (expm1.f64 (*.f64 a eps)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))))","(pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (pow.f64 (exp.f64 a) eps)))) (neg.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 a eps))))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (exp.f64 a) eps))) (neg.f64 (neg.f64 (expm1.f64 (*.f64 a eps)))))","(/.f64 (neg.f64 (pow.f64 (exp.f64 a) eps)) (neg.f64 (expm1.f64 (*.f64 a eps))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a)))))","(/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))","(neg.f64 (/.f64 (neg.f64 (pow.f64 (exp.f64 a) eps)) (expm1.f64 (*.f64 a eps))))","(neg.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (neg.f64 (expm1.f64 (*.f64 a eps)))))","(exp.f64 (*.f64 (log.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a)))) #s(literal -1 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":260.81005859375,"type":"rewrite"},{"compiler":[[60536,4387]],"memory":[[7474112,90150320]],"time":161.402099609375,"type":"eval"},{"alts":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) b) a))","done",0.14453125,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) a) b))","next",0.15234375,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (+.f64 b a) (*.f64 b a)))","next",26.664237184388202,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) a))","next",31.33108272912622,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) b))","next",32.98162591503478,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b))","done",31.209498624117707,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","done",32.860526662783684,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(literal 0 binary64)))","next",62.70537463670366,"binary64"]],"compiler":[[32,21],[32,21],[32,21],[36,23],[50,32],[28,20],[28,20],[70,41],[32,21],[32,21],[36,23],[50,32],[70,41]],"count":[[958,8]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[953,5],"picked":[5,3]}],"memory":[[-2716576,40792976]],"min-error":[[0.0,"binary64"]],"time":24.199951171875,"type":"prune"},{"egraph":[[0,8424,271,0.085302331],[5,7619,312,0.01570366],[4,5719,332,0.016505911],[3,1450,352,0.016273939],[2,364,372,0.004879487],[1,153,376,0.001185563],[0,76,376,0.000673816],[0,67,376,0.00031594]],"inputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) a) b))","(/.f64 (/.f64 (+.f64 b a) a) b)","(/.f64 (+.f64 b a) a)","(+.f64 b a)","b","a","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(literal 0 binary64)))","#s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(literal 0 binary64))","#s(literal 0 binary64)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (+.f64 b a) (*.f64 b a)))","(/.f64 (+.f64 b a) (*.f64 b a))","(+.f64 b a)","b","a","(*.f64 b a)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) b))","(/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) b)","#s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a))","(/.f64 b a)","b","a","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) a))","(/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) a)","#s(approx (/ (+ b a) b) (/.f64 a b))","(/.f64 a b)","a","b"]],"locations":[["(/.f64 a b)","cost-diff",0],["#s(approx (/ (+ b a) b) (/.f64 a b))","cost-diff",0],["(/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) a)","cost-diff",0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) a))","cost-diff",0],["(/.f64 b a)","cost-diff",0],["#s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a))","cost-diff",0],["(/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) b)","cost-diff",0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) b))","cost-diff",0],["(*.f64 b a)","cost-diff",0],["(+.f64 b a)","cost-diff",0],["(/.f64 (+.f64 b a) (*.f64 b a))","cost-diff",0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (+.f64 b a) (*.f64 b a)))","cost-diff",0],["#s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(literal 0 binary64))","cost-diff",0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(literal 0 binary64)))","cost-diff",0],["(+.f64 b a)","cost-diff",0],["(/.f64 (+.f64 b a) a)","cost-diff",0],["(/.f64 (/.f64 (+.f64 b a) a) b)","cost-diff",0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) a) b))","cost-diff",0]],"memory":[[1614128,43034896]],"method":["egg-herbie"],"outputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) a) b))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) b) a))","(/.f64 (/.f64 (+.f64 b a) a) b)","(/.f64 (/.f64 (+.f64 b a) b) a)","(/.f64 (+.f64 b a) a)","(+.f64 b a)","b","a","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(literal 0 binary64)))","#s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(literal 0 binary64))","#s(literal 0 binary64)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (+.f64 b a) (*.f64 b a)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) b) a))","(/.f64 (+.f64 b a) (*.f64 b a))","(/.f64 (/.f64 (+.f64 b a) b) a)","(+.f64 b a)","b","a","(*.f64 b a)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) b))","(/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) b)","#s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a))","(/.f64 b a)","b","a","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) a))","(/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) a)","#s(approx (/ (+ b a) b) (/.f64 a b))","(/.f64 a b)","a","b"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":234.093017578125,"type":"simplify"},{"compiler":[[260,54]],"locations":[["(/.f64 a b)","accuracy",0.0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) a))","accuracy",0.0],["(/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) a)","accuracy",0.15234375],["#s(approx (/ (+ b a) b) (/.f64 a b))","accuracy",31.035574783912853],["(/.f64 b a)","accuracy",0.0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) b))","accuracy",0.0],["(/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) b)","accuracy",0.15234375],["#s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a))","accuracy",32.61351660533653],["(+.f64 b a)","accuracy",0.0],["(*.f64 b a)","accuracy",0.0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (+.f64 b a) (*.f64 b a)))","accuracy",0.0],["(/.f64 (+.f64 b a) (*.f64 b a))","accuracy",26.664237184388202],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(literal 0 binary64)))","accuracy",0.0],["#s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(literal 0 binary64))","accuracy",62.70537463670366],["(+.f64 b a)","accuracy",0.0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) a) b))","accuracy",0.0],["(/.f64 (+.f64 b a) a)","accuracy",0.0234375],["(/.f64 (/.f64 (+.f64 b a) a) b)","accuracy",0.15234375]],"memory":[[-3065248,40844912]],"mixsample":[[23.740966796875,"ival-div",0],[7.971923828125,"ival-add",0],[2.92822265625,"ival-exp",0],[24.41259765625,"ival-mult",0],[5.44189453125,"ival-expm1",0],[0.112548828125,"ival-assert",0],[0.203369140625,"ival-true",0],[0.520263671875,"exact",0],[7.476318359375,"ival-pow",0],[2.55224609375,"ival-pow2",0]],"outcomes":[[94.80029296875,0,"valid",256]],"time":117.383056640625,"type":"localize"},{"count":[[17,68]],"inputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) a) b))","(/.f64 (/.f64 (+.f64 b a) a) b)","(/.f64 (+.f64 b a) a)","(+.f64 b a)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(literal 0 binary64)))","#s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(literal 0 binary64))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (+.f64 b a) (*.f64 b a)))","(/.f64 (+.f64 b a) (*.f64 b a))","(*.f64 b a)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) b))","(/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) b)","#s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a))","(/.f64 b a)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) a))","(/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) a)","#s(approx (/ (+ b a) b) (/.f64 a b))","(/.f64 a b)"]],"memory":[[-80464,33578704]],"outputs":[["(/ 1 a)","(/ (+ 1 (* a (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (* a (- (* 1/6 (/ (* (pow eps 3) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/ (+ 1 (/ a b)) a)","(/ b a)","(/ (+ a b) a)","b","(+ a b)","(/ (+ 1 (* eps (+ (* -1/2 b) (* 1/2 b)))) a)","(/ (+ 1 (+ (* eps (+ (* -1/2 b) (* 1/2 b))) (/ a b))) a)","(* a b)","(/ (+ 1 (* a (+ (* a (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))) (/ 1 b)))) a)","(/ (+ 1 (* a (+ (* a (+ (* a (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))) (/ 1 b)))) a)","(/ (+ b (* a (+ 1 (* a (* b (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))))) a)","(/ (+ b (* a (+ 1 (* a (+ (* a (* b (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))))))) (* b (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) a)","1","(+ 1 (/ a b))","(/ a b)","(/ (* eps (- (exp (* eps (+ a b))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/ 1 b)","(+ (/ 1 a) (/ 1 b))","(+ 1 (/ b a))","a","(* a (+ 1 (/ b a)))","(+ (/ 1 a) (+ (/ 1 b) (/ (* eps (+ (* -1/2 b) (* 1/2 b))) a)))","(/ (+ 1 (* b (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)))) b)","(+ 1 (* b (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))))","(* a (+ (/ 1 a) (/ 1 b)))","(/ (* eps (- (exp (* eps (- b (* -1 a)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(* -1 (* a (- (* -1 (/ b a)) 1)))","(+ (* -1 (/ (- (* eps (+ (* -1/2 b) (* 1/2 b))) 1) a)) (/ 1 b))","(/ (+ 1 (* b (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (* b (- (* 1/6 (/ (* (pow eps 3) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/ (+ 1 (/ b a)) b)","(/ (+ 1 (* eps (+ (* -1/2 a) (* 1/2 a)))) b)","(/ (+ 1 (+ (* eps (+ (* -1/2 a) (* 1/2 a))) (/ b a))) b)","(/ (+ a b) b)","(* b (+ (/ 1 a) (/ 1 b)))","(* b (+ 1 (/ a b)))","(+ (/ 1 a) (+ (/ 1 b) (/ (* eps (+ (* -1/2 a) (* 1/2 a))) b)))","(* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))","(+ (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 b))","(* b (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)))","(* b (+ (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 b)))","(/ (* eps (- (exp (* eps (- a (* -1 b)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(* -1 (* b (- (* -1 (/ a b)) 1)))","(+ (* -1 (/ (- (* eps (+ (* -1/2 a) (* 1/2 a))) 1) b)) (/ 1 a))","(* -1 (* b (- (* -1 (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))) (/ 1 b))))","(/ (+ a b) (* a b))","(+ (* eps (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (+ (* 1/6 (/ (pow (+ a b) 3) (* a b))) (* eps (- (* 1/24 (/ (pow (+ a b) 4) (* a b))) (+ (/ (* (+ a b) (+ (* 1/24 (* a (pow b 4))) (+ (* 1/24 (* (pow a 4) b)) (+ (* 1/12 (* (pow a 2) (pow b 3))) (* 1/12 (* (pow a 3) (pow b 2))))))) (* (pow a 2) (pow b 2))) (+ (/ (* (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2))))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b))))) (* a b))))))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b))))) (+ (/ 1 a) (/ 1 b)))","(+ (* (pow eps 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))) (+ (/ 1 a) (/ 1 b)))","(+ (* (pow eps 2) (- (+ (* 1/2 a) (* eps (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (+ (* 1/6 a) (* 1/4 a)))) (+ (/ 1 a) (/ 1 b)))","(+ (* (pow eps 2) (- (+ (* 1/2 a) (* eps (- (+ (* 1/6 (pow a 2)) (* eps (- (* 1/24 (pow a 3)) (+ (* 1/120 (pow a 3)) (+ (* 1/48 (pow a 3)) (+ (* 1/6 (* (pow a 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))) (* 1/2 (* a (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))))))))) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (+ (* 1/6 a) (* 1/4 a)))) (+ (/ 1 a) (/ 1 b)))","(+ 1 (+ (* b (* (pow eps 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))) (/ b a)))","(+ 1 (+ (* (pow eps 2) (+ (* b (* eps (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (* b (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))) (/ b a)))","(+ 1 (+ (* (pow eps 2) (+ (* b (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))) (* eps (+ (* b (* eps (- (* 1/24 (pow a 3)) (+ (* 1/120 (pow a 3)) (+ (* 1/48 (pow a 3)) (+ (* 1/6 (* (pow a 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))) (* 1/2 (* a (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))))))))) (* b (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))))))))))) (/ b a)))","(* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b)))))","(* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (+ (/ 1 (* a eps)) (/ 1 (* b eps))))))","(* eps (- (+ (/ 1 (* b eps)) (/ (exp (* a eps)) (- (exp (* a eps)) 1))) 1/2))","(* eps (+ (* b (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 eps)))","(* -1 (* eps (+ (* -1 (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b))))) (* -1 (/ (+ (/ 1 a) (/ 1 b)) eps)))))","(* -1 (* eps (- (* -1 (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 (* b eps)))))","(* -1 (* eps (- (* -1 (* b (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))) (/ 1 eps))))"]],"series":[[2.537109375,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) a) b) (/ (+ b a) a) (+ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ b a) (* b a)) (* b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (/ a b))","eps","-inf"],[2.2041015625,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) a) b) (/ (+ b a) a) (+ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ b a) (* b a)) (* b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (/ a b))","eps","inf"],[2.44189453125,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) a) b) (/ (+ b a) a) (+ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ b a) (* b a)) (* b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (/ a b))","eps","0"],[7.5380859375,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) a) b) (/ (+ b a) a) (+ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ b a) (* b a)) (* b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (/ a b))","b","-inf"],[5.636962890625,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) a) b) (/ (+ b a) a) (+ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ b a) (* b a)) (* b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (/ a b))","b","inf"],[5.12890625,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) a) b) (/ (+ b a) a) (+ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ b a) (* b a)) (* b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (/ a b))","b","0"],[11.60498046875,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) a) b) (/ (+ b a) a) (+ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ b a) (* b a)) (* b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (/ a b))","a","-inf"],[12.43310546875,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) a) b) (/ (+ b a) a) (+ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ b a) (* b a)) (* b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (/ a b))","a","inf"],[2.80712890625,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) a) b) (/ (+ b a) a) (+ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ b a) (* b a)) (* b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (/ a b))","a","0"]],"time":55.2568359375,"type":"series"},{"count":[[68,66]],"egraph":[[0,8312,1634,0.080961005],[2,4047,1811,0.026915241],[1,1160,1965,0.013543647],[0,389,2178,0.004185156]],"inputs":[["(/ 1 a)","(/ (+ 1 (* a (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (* a (- (* 1/6 (/ (* (pow eps 3) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/ (+ 1 (/ a b)) a)","(/ b a)","(/ (+ a b) a)","b","(+ a b)","(/ (+ 1 (* eps (+ (* -1/2 b) (* 1/2 b)))) a)","(/ (+ 1 (+ (* eps (+ (* -1/2 b) (* 1/2 b))) (/ a b))) a)","(* a b)","(/ (+ 1 (* a (+ (* a (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))) (/ 1 b)))) a)","(/ (+ 1 (* a (+ (* a (+ (* a (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))) (/ 1 b)))) a)","(/ (+ b (* a (+ 1 (* a (* b (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))))) a)","(/ (+ b (* a (+ 1 (* a (+ (* a (* b (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))))))) (* b (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) a)","1","(+ 1 (/ a b))","(/ a b)","(/ (* eps (- (exp (* eps (+ a b))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/ 1 b)","(+ (/ 1 a) (/ 1 b))","(+ 1 (/ b a))","a","(* a (+ 1 (/ b a)))","(+ (/ 1 a) (+ (/ 1 b) (/ (* eps (+ (* -1/2 b) (* 1/2 b))) a)))","(/ (+ 1 (* b (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)))) b)","(+ 1 (* b (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))))","(* a (+ (/ 1 a) (/ 1 b)))","(/ (* eps (- (exp (* eps (- b (* -1 a)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(* -1 (* a (- (* -1 (/ b a)) 1)))","(+ (* -1 (/ (- (* eps (+ (* -1/2 b) (* 1/2 b))) 1) a)) (/ 1 b))","(/ (+ 1 (* b (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (* b (- (* 1/6 (/ (* (pow eps 3) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/ (+ 1 (/ b a)) b)","(/ (+ 1 (* eps (+ (* -1/2 a) (* 1/2 a)))) b)","(/ (+ 1 (+ (* eps (+ (* -1/2 a) (* 1/2 a))) (/ b a))) b)","(/ (+ a b) b)","(* b (+ (/ 1 a) (/ 1 b)))","(* b (+ 1 (/ a b)))","(+ (/ 1 a) (+ (/ 1 b) (/ (* eps (+ (* -1/2 a) (* 1/2 a))) b)))","(* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))","(+ (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 b))","(* b (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)))","(* b (+ (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 b)))","(/ (* eps (- (exp (* eps (- a (* -1 b)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(* -1 (* b (- (* -1 (/ a b)) 1)))","(+ (* -1 (/ (- (* eps (+ (* -1/2 a) (* 1/2 a))) 1) b)) (/ 1 a))","(* -1 (* b (- (* -1 (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))) (/ 1 b))))","(/ (+ a b) (* a b))","(+ (* eps (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (+ (* 1/6 (/ (pow (+ a b) 3) (* a b))) (* eps (- (* 1/24 (/ (pow (+ a b) 4) (* a b))) (+ (/ (* (+ a b) (+ (* 1/24 (* a (pow b 4))) (+ (* 1/24 (* (pow a 4) b)) (+ (* 1/12 (* (pow a 2) (pow b 3))) (* 1/12 (* (pow a 3) (pow b 2))))))) (* (pow a 2) (pow b 2))) (+ (/ (* (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2))))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b))))) (* a b))))))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b))))) (+ (/ 1 a) (/ 1 b)))","(+ (* (pow eps 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))) (+ (/ 1 a) (/ 1 b)))","(+ (* (pow eps 2) (- (+ (* 1/2 a) (* eps (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (+ (* 1/6 a) (* 1/4 a)))) (+ (/ 1 a) (/ 1 b)))","(+ (* (pow eps 2) (- (+ (* 1/2 a) (* eps (- (+ (* 1/6 (pow a 2)) (* eps (- (* 1/24 (pow a 3)) (+ (* 1/120 (pow a 3)) (+ (* 1/48 (pow a 3)) (+ (* 1/6 (* (pow a 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))) (* 1/2 (* a (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))))))))) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (+ (* 1/6 a) (* 1/4 a)))) (+ (/ 1 a) (/ 1 b)))","(+ 1 (+ (* b (* (pow eps 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))) (/ b a)))","(+ 1 (+ (* (pow eps 2) (+ (* b (* eps (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (* b (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))) (/ b a)))","(+ 1 (+ (* (pow eps 2) (+ (* b (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))) (* eps (+ (* b (* eps (- (* 1/24 (pow a 3)) (+ (* 1/120 (pow a 3)) (+ (* 1/48 (pow a 3)) (+ (* 1/6 (* (pow a 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))) (* 1/2 (* a (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))))))))) (* b (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))))))))))) (/ b a)))","(* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b)))))","(* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (+ (/ 1 (* a eps)) (/ 1 (* b eps))))))","(* eps (- (+ (/ 1 (* b eps)) (/ (exp (* a eps)) (- (exp (* a eps)) 1))) 1/2))","(* eps (+ (* b (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 eps)))","(* -1 (* eps (+ (* -1 (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b))))) (* -1 (/ (+ (/ 1 a) (/ 1 b)) eps)))))","(* -1 (* eps (- (* -1 (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 (* b eps)))))","(* -1 (* eps (- (* -1 (* b (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))) (/ 1 eps))))"]],"memory":[[783504,44072160]],"method":["egg-herbie"],"outputs":[["(/ 1 a)","(/.f64 #s(literal 1 binary64) a)","(/ (+ 1 (* a (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) a)","(/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))))) a #s(literal 1 binary64)) a)","(/ (+ 1 (* a (- (+ (* a (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))))))) a (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps)))))) a #s(literal 1 binary64)) a)","(/ (+ 1 (* a (- (+ (* a (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (* a (- (* 1/6 (/ (* (pow eps 3) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/6 binary64)) #s(literal 1/24 binary64)) (neg.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps)))))) (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))))))) eps) #s(literal 1/2 binary64))))) a (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps)))))))) a (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps)))))) a #s(literal 1 binary64)) a)","(/ (+ 1 (/ a b)) a)","(/.f64 (-.f64 (/.f64 a b) #s(literal -1 binary64)) a)","(/ b a)","(/.f64 b a)","(/ (+ a b) a)","(/.f64 (+.f64 b a) a)","b","(+ a b)","(+.f64 b a)","(/ (+ 1 (* eps (+ (* -1/2 b) (* 1/2 b)))) a)","(/.f64 #s(literal 1 binary64) a)","(/ (+ 1 (+ (* eps (+ (* -1/2 b) (* 1/2 b))) (/ a b))) a)","(/.f64 (-.f64 (/.f64 a b) #s(literal -1 binary64)) a)","(* a b)","(*.f64 b a)","(/ (+ 1 (* a (+ (* a (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))) (/ 1 b)))) a)","(/.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 eps eps)) a (/.f64 #s(literal 1 binary64) b)) a #s(literal 1 binary64)) a)","(/ (+ 1 (* a (+ (* a (+ (* a (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))) (/ 1 b)))) a)","(/.f64 (fma.f64 (fma.f64 (*.f64 eps (fma.f64 a (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps (*.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 eps eps)) #s(literal -1/2 binary64))) (*.f64 #s(literal 1/12 binary64) eps))) a (/.f64 #s(literal 1 binary64) b)) a #s(literal 1 binary64)) a)","(/ (+ b (* a (+ 1 (* a (* b (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))))) a)","(/.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 eps eps)) b) a #s(literal 1 binary64)) a b) a)","(/ (+ b (* a (+ 1 (* a (+ (* a (* b (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))))))) (* b (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) a)","(/.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 b eps) (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps (*.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 eps eps)) #s(literal -1/2 binary64))) a (*.f64 eps #s(literal 1/12 binary64)))) a #s(literal 1 binary64)) a b) a)","1","#s(literal 1 binary64)","(+ 1 (/ a b))","(-.f64 (/.f64 a b) #s(literal -1 binary64))","(/ a b)","(/.f64 a b)","(/ (* eps (- (exp (* eps (+ a b))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps) (*.f64 (expm1.f64 (*.f64 b eps)) (expm1.f64 (*.f64 a eps))))","(/ 1 b)","(/.f64 #s(literal 1 binary64) b)","(+ (/ 1 a) (/ 1 b))","(-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal -1 binary64) b))","(+ 1 (/ b a))","(-.f64 (/.f64 b a) #s(literal -1 binary64))","a","(* a (+ 1 (/ b a)))","(fma.f64 (/.f64 b a) a a)","(+ (/ 1 a) (+ (/ 1 b) (/ (* eps (+ (* -1/2 b) (* 1/2 b))) a)))","(-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal -1 binary64) b))","(/ (+ 1 (* b (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)))) b)","(/.f64 (fma.f64 (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps) b #s(literal 1 binary64)) b)","(+ 1 (* b (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))))","(fma.f64 (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps) b #s(literal 1 binary64))","(* a (+ (/ 1 a) (/ 1 b)))","(-.f64 (/.f64 a b) #s(literal -1 binary64))","(/ (* eps (- (exp (* eps (- b (* -1 a)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps) (*.f64 (expm1.f64 (*.f64 b eps)) (expm1.f64 (*.f64 a eps))))","(* -1 (* a (- (* -1 (/ b a)) 1)))","(fma.f64 (/.f64 b a) a a)","(+ (* -1 (/ (- (* eps (+ (* -1/2 b) (* 1/2 b))) 1) a)) (/ 1 b))","(-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal -1 binary64) b))","(/ (+ 1 (* b (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) b)","(/.f64 (fma.f64 (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps) b #s(literal 1 binary64)) b)","(/ (+ 1 (* b (- (+ (* b (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps))) b (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps)) b #s(literal 1 binary64)) b)","(/ (+ 1 (* b (- (+ (* b (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (* b (- (* 1/6 (/ (* (pow eps 3) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/6 binary64)) #s(literal 1/24 binary64)) (neg.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps)) (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps))) eps) #s(literal 1/2 binary64))))) b (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps)))) b (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps)) b #s(literal 1 binary64)) b)","(/ (+ 1 (/ b a)) b)","(/.f64 (-.f64 (/.f64 a b) #s(literal -1 binary64)) a)","(/ (+ 1 (* eps (+ (* -1/2 a) (* 1/2 a)))) b)","(/.f64 #s(literal 1 binary64) b)","(/ (+ 1 (+ (* eps (+ (* -1/2 a) (* 1/2 a))) (/ b a))) b)","(/.f64 (-.f64 (/.f64 a b) #s(literal -1 binary64)) a)","(/ (+ a b) b)","(/.f64 (+.f64 b a) b)","(* b (+ (/ 1 a) (/ 1 b)))","(-.f64 (/.f64 b a) #s(literal -1 binary64))","(* b (+ 1 (/ a b)))","(fma.f64 (/.f64 a b) b b)","(+ (/ 1 a) (+ (/ 1 b) (/ (* eps (+ (* -1/2 a) (* 1/2 a))) b)))","(-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal -1 binary64) b))","(* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))","(*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps)","(+ (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 b))","(fma.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps (/.f64 #s(literal 1 binary64) b))","(* b (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)))","(*.f64 (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps) b)","(* b (+ (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 b)))","(fma.f64 (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps) b #s(literal 1 binary64))","(/ (* eps (- (exp (* eps (- a (* -1 b)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps) (*.f64 (expm1.f64 (*.f64 b eps)) (expm1.f64 (*.f64 a eps))))","(* -1 (* b (- (* -1 (/ a b)) 1)))","(fma.f64 (/.f64 a b) b b)","(+ (* -1 (/ (- (* eps (+ (* -1/2 a) (* 1/2 a))) 1) b)) (/ 1 a))","(-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal -1 binary64) b))","(* -1 (* b (- (* -1 (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))) (/ 1 b))))","(fma.f64 (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps) b #s(literal 1 binary64))","(/ (+ a b) (* a b))","(/.f64 (/.f64 (+.f64 b a) b) a)","(+ (* eps (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 a a) b) b)) (*.f64 (/.f64 #s(literal 1/2 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a))) eps (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal -1 binary64) b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 a a) b) b)) (fma.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/6 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) a)) (fma.f64 (/.f64 (+.f64 b a) (*.f64 (*.f64 a a) b)) (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 b #s(literal 3 binary64))) a (*.f64 b (fma.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) a) a) b (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))))) b) (*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 a a) b) b)) (*.f64 (/.f64 #s(literal 1/2 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a))) (*.f64 (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) a) (/.f64 #s(literal 1/2 binary64) b))))) eps (*.f64 (/.f64 #s(literal 1/2 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a)))) eps (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal -1 binary64) b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (+ (* 1/6 (/ (pow (+ a b) 3) (* a b))) (* eps (- (* 1/24 (/ (pow (+ a b) 4) (* a b))) (+ (/ (* (+ a b) (+ (* 1/24 (* a (pow b 4))) (+ (* 1/24 (* (pow a 4) b)) (+ (* 1/12 (* (pow a 2) (pow b 3))) (* 1/12 (* (pow a 3) (pow b 2))))))) (* (pow a 2) (pow b 2))) (+ (/ (* (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2))))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b))))) (* a b))))))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/24 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 4 binary64)) a)) (fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 (*.f64 a a) b) b) (+.f64 b a)) #s(literal 1/12 binary64) (*.f64 #s(literal 1/24 binary64) (fma.f64 (pow.f64 a #s(literal 4 binary64)) b (*.f64 (pow.f64 b #s(literal 4 binary64)) a)))) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 a a) b) b)) (fma.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/6 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) a)) (fma.f64 (/.f64 (+.f64 b a) (*.f64 (*.f64 a a) b)) (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 b #s(literal 3 binary64))) a (*.f64 b (fma.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) a) a) b (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))))) b) (*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 a a) b) b)) (*.f64 (/.f64 #s(literal 1/2 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a))) (*.f64 (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) a) (/.f64 #s(literal 1/2 binary64) b))))) (*.f64 (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) a) (/.f64 #s(literal 1/2 binary64) b)) (*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 a a) b) b)) (*.f64 (/.f64 #s(literal 1/2 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a))) (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 b #s(literal 3 binary64))) a (*.f64 b (fma.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) a) a) b (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))))) (*.f64 b a)))))) eps (-.f64 (*.f64 (/.f64 #s(literal 1/6 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) a)) (fma.f64 (/.f64 (+.f64 b a) (*.f64 (*.f64 a a) b)) (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 b #s(literal 3 binary64))) a (*.f64 b (fma.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) a) a) b (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))))) b) (*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 a a) b) b)) (*.f64 (/.f64 #s(literal 1/2 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a))) (*.f64 (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) a) (/.f64 #s(literal 1/2 binary64) b)))))) eps (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 a a) b) b)) (*.f64 (/.f64 #s(literal 1/2 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a)))) eps (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal -1 binary64) b)))","(+ (* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b))))) (+ (/ 1 a) (/ 1 b)))","(-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal -1 binary64) b))","(+ (* (pow eps 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) eps) eps (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal -1 binary64) b)))","(+ (* (pow eps 2) (- (+ (* 1/2 a) (* eps (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (+ (* 1/6 a) (* 1/4 a)))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) a) a (*.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) a) #s(literal -1/2 binary64))) eps (*.f64 a #s(literal 1/12 binary64))) (*.f64 eps eps) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal -1 binary64) b)))","(+ (* (pow eps 2) (- (+ (* 1/2 a) (* eps (- (+ (* 1/6 (pow a 2)) (* eps (- (* 1/24 (pow a 3)) (+ (* 1/120 (pow a 3)) (+ (* 1/48 (pow a 3)) (+ (* 1/6 (* (pow a 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))) (* 1/2 (* a (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))))))))) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (+ (* 1/6 a) (* 1/4 a)))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/80 binary64)) (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/12 binary64)) #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) a) a (*.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) a) #s(literal -1/2 binary64))) a) #s(literal 1/2 binary64)))) eps (fma.f64 (*.f64 #s(literal 1/24 binary64) a) a (*.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) a) #s(literal -1/2 binary64)))) eps (*.f64 a #s(literal 1/12 binary64))) (*.f64 eps eps) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal -1 binary64) b)))","(+ 1 (+ (* b (* (pow eps 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))) (/ b a)))","(fma.f64 b (fma.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) eps) eps (/.f64 #s(literal 1 binary64) a)) #s(literal 1 binary64))","(+ 1 (+ (* (pow eps 2) (+ (* b (* eps (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (* b (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))) (/ b a)))","(fma.f64 b (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) a) a (*.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) a) #s(literal -1/2 binary64))) eps (*.f64 a #s(literal 1/12 binary64))) (*.f64 eps eps) (/.f64 #s(literal 1 binary64) a)) #s(literal 1 binary64))","(+ 1 (+ (* (pow eps 2) (+ (* b (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))) (* eps (+ (* b (* eps (- (* 1/24 (pow a 3)) (+ (* 1/120 (pow a 3)) (+ (* 1/48 (pow a 3)) (+ (* 1/6 (* (pow a 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))) (* 1/2 (* a (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))))))))) (* b (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))))))))))) (/ b a)))","(fma.f64 (*.f64 b (fma.f64 (fma.f64 (-.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/80 binary64)) (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/12 binary64)) #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) a) a (*.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) a) #s(literal -1/2 binary64))) a) #s(literal 1/2 binary64)))) eps (fma.f64 (*.f64 #s(literal 1/24 binary64) a) a (*.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) a) #s(literal -1/2 binary64)))) eps (*.f64 a #s(literal 1/12 binary64)))) (*.f64 eps eps) (-.f64 (/.f64 b a) #s(literal -1 binary64)))","(* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b)))))","#s(literal 0 binary64)","(* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (+ (/ 1 (* a eps)) (/ 1 (* b eps))))))","(*.f64 (+.f64 (/.f64 (/.f64 #s(literal 1 binary64) b) eps) (/.f64 (/.f64 #s(literal 1 binary64) a) eps)) eps)","(* eps (- (+ (/ 1 (* b eps)) (/ (exp (* a eps)) (- (exp (* a eps)) 1))) 1/2))","(*.f64 (+.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) (-.f64 (/.f64 (/.f64 #s(literal 1 binary64) b) eps) #s(literal 1/2 binary64))) eps)","(* eps (+ (* b (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 eps)))","(fma.f64 (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps) b #s(literal 1 binary64))","(* -1 (* eps (+ (* -1 (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b))))) (* -1 (/ (+ (/ 1 a) (/ 1 b)) eps)))))","(*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal -1 binary64) b)) eps) eps)","(* -1 (* eps (- (* -1 (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 (* b eps)))))","(*.f64 (+.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) (-.f64 (/.f64 (/.f64 #s(literal 1 binary64) b) eps) #s(literal 1/2 binary64))) eps)","(* -1 (* eps (- (* -1 (* b (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))) (/ 1 eps))))","(fma.f64 (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps) b #s(literal 1 binary64))"]],"stop":[["iter limit",1],["node limit",1]],"time":254.844970703125,"type":"simplify"},{"count":[[17,478]],"egraph":[[0,8720,314,0.066841762],[2,3373,354,0.038498554],[1,377,360,0.01084629],[0,76,364,0.002108697],[0,67,364,0.000321454]],"inputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) a) b))","(/.f64 (/.f64 (+.f64 b a) a) b)","(/.f64 (+.f64 b a) a)","(+.f64 b a)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(literal 0 binary64)))","#s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(literal 0 binary64))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (+.f64 b a) (*.f64 b a)))","(/.f64 (+.f64 b a) (*.f64 b a))","(*.f64 b a)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) b))","(/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) b)","#s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a))","(/.f64 b a)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) a))","(/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) a)","#s(approx (/ (+ b a) b) (/.f64 a b))","(/.f64 a b)"]],"memory":[[3130560,49111728]],"outputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) b) a))","(*.f64 (pow.f64 (/.f64 (*.f64 b a) (*.f64 (+.f64 b a) (-.f64 a b))) #s(literal -1 binary64)) (pow.f64 (-.f64 a b) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 b a) (*.f64 (+.f64 b a) (-.f64 b a))) #s(literal -1 binary64)) (pow.f64 (-.f64 b a) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 b a) (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 b a) (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b b (*.f64 a (-.f64 a b))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 b (neg.f64 (+.f64 b a))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) a))","(*.f64 (*.f64 (/.f64 (+.f64 b a) a) #s(literal 1 binary64)) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -2 binary64))) (pow.f64 (/.f64 (-.f64 a b) (*.f64 b a)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 b a) #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 b a) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 b a) #s(literal -1 binary64)) (+.f64 b a))","(*.f64 (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64))) (pow.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (pow.f64 b #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 (+.f64 b a)) a) (/.f64 #s(literal -1 binary64) b))","(*.f64 (neg.f64 (+.f64 b a)) (pow.f64 (*.f64 (neg.f64 a) b) #s(literal -1 binary64)))","(*.f64 (/.f64 (+.f64 b a) b) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 (+.f64 b a) b))","(*.f64 (pow.f64 b #s(literal -1 binary64)) (/.f64 (+.f64 b a) a))","(*.f64 (+.f64 b a) (pow.f64 (*.f64 b a) #s(literal -1 binary64)))","(*.f64 (/.f64 (+.f64 b a) a) (pow.f64 b #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 (+.f64 b a) b) a))","(pow.f64 (/.f64 a (/.f64 (+.f64 b a) b)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (/.f64 b (+.f64 b a)) a) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 (-.f64 a b) (*.f64 b a)) (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (pow.f64 b #s(literal -2 binary64))) (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64)))) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 a (+.f64 b a)) b) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 b (+.f64 b a)) a) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 a b)) (pow.f64 (*.f64 b a) #s(literal -1 binary64)))) (neg.f64 (-.f64 a b)))","(/.f64 (neg.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) (pow.f64 (*.f64 b a) #s(literal -1 binary64)))) (neg.f64 (-.f64 b a)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (*.f64 b a) #s(literal -1 binary64)))) (neg.f64 (fma.f64 b (-.f64 b a) (*.f64 a a))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (*.f64 b a) #s(literal -1 binary64)))) (neg.f64 (fma.f64 b b (*.f64 a (-.f64 a b)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (+.f64 b a)) (pow.f64 b #s(literal -1 binary64)))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (/.f64 (+.f64 b a) a) #s(literal -1 binary64))) (neg.f64 (neg.f64 b)))","(/.f64 (neg.f64 (*.f64 (/.f64 (+.f64 b a) a) #s(literal 1 binary64))) (neg.f64 b))","(/.f64 (neg.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 b #s(literal -2 binary64)))) (neg.f64 (-.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 b #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (+.f64 b a) b))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -2 binary64))))) (neg.f64 (neg.f64 (/.f64 (-.f64 a b) (*.f64 b a)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64))))) (neg.f64 (neg.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (pow.f64 b #s(literal -2 binary64))))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (+.f64 b a)) #s(literal -1 binary64))) (neg.f64 (*.f64 (neg.f64 a) (neg.f64 b))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (+.f64 b a)) #s(literal 1 binary64))) (neg.f64 (*.f64 (neg.f64 a) b)))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 b) (*.f64 (neg.f64 a) #s(literal -1 binary64)))) (neg.f64 (*.f64 (neg.f64 a) (neg.f64 b))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) b (*.f64 (neg.f64 a) #s(literal 1 binary64)))) (neg.f64 (*.f64 (neg.f64 a) b)))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 b) (*.f64 a #s(literal -1 binary64)))) (neg.f64 (*.f64 (neg.f64 a) b)))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 a) (*.f64 (neg.f64 b) #s(literal -1 binary64)))) (neg.f64 (*.f64 (neg.f64 b) (neg.f64 a))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) a (*.f64 (neg.f64 b) #s(literal 1 binary64)))) (neg.f64 (*.f64 (neg.f64 a) b)))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 b #s(literal -1 binary64)))) (neg.f64 (*.f64 (neg.f64 a) b)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (+.f64 b a)))) (neg.f64 (neg.f64 (*.f64 (neg.f64 a) b))))","(/.f64 (neg.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 a b)) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 a b) (*.f64 b a))))","(/.f64 (neg.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 b a) (*.f64 b a))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) (*.f64 b a))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b b (*.f64 a (-.f64 a b))) (*.f64 b a))))","(/.f64 (neg.f64 (*.f64 (+.f64 b a) #s(literal -1 binary64))) (neg.f64 (*.f64 (neg.f64 a) b)))","(/.f64 (neg.f64 (*.f64 (+.f64 b a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) b))","(/.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 a b)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (-.f64 a b))","(/.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (-.f64 b a))","(/.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (fma.f64 b (-.f64 b a) (*.f64 a a)))","(/.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (fma.f64 b b (*.f64 a (-.f64 a b))))","(/.f64 (*.f64 (neg.f64 (+.f64 b a)) (pow.f64 b #s(literal -1 binary64))) (neg.f64 a))","(/.f64 (*.f64 (/.f64 (+.f64 b a) a) #s(literal -1 binary64)) (neg.f64 b))","(/.f64 (*.f64 (/.f64 (+.f64 b a) a) #s(literal 1 binary64)) b)","(/.f64 (neg.f64 (pow.f64 b #s(literal -1 binary64))) (neg.f64 (/.f64 a (+.f64 b a))))","(/.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 b #s(literal -2 binary64))) (-.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 b #s(literal -1 binary64))))","(/.f64 (neg.f64 (/.f64 (+.f64 b a) b)) (neg.f64 a))","(/.f64 (neg.f64 (*.f64 (+.f64 b a) (-.f64 a b))) (neg.f64 (*.f64 (*.f64 b a) (-.f64 a b))))","(/.f64 (neg.f64 (*.f64 (+.f64 b a) (-.f64 b a))) (neg.f64 (*.f64 (*.f64 b a) (-.f64 b a))))","(/.f64 (neg.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 b a) (fma.f64 b (-.f64 b a) (*.f64 a a)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 b a) (fma.f64 b b (*.f64 a (-.f64 a b))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 b a))) (neg.f64 (*.f64 (neg.f64 a) b)))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -2 binary64)))) (neg.f64 (/.f64 (-.f64 a b) (*.f64 b a))))","(/.f64 (neg.f64 (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 a #s(literal -2 binary64)) (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64)))) (neg.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (pow.f64 b #s(literal -2 binary64)))))","(/.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 a b)) #s(literal 1 binary64)) (*.f64 (-.f64 a b) (*.f64 b a)))","(/.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) #s(literal 1 binary64)) (*.f64 (-.f64 b a) (*.f64 b a)))","(/.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) (*.f64 b a)))","(/.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b b (*.f64 a (-.f64 a b))) (*.f64 b a)))","(/.f64 (*.f64 (neg.f64 (+.f64 b a)) #s(literal -1 binary64)) (*.f64 (neg.f64 a) (neg.f64 b)))","(/.f64 (*.f64 (neg.f64 (+.f64 b a)) #s(literal 1 binary64)) (*.f64 (neg.f64 a) b))","(/.f64 (*.f64 (+.f64 b a) #s(literal -1 binary64)) (*.f64 (neg.f64 a) b))","(/.f64 (*.f64 (+.f64 b a) #s(literal 1 binary64)) (*.f64 b a))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 b) (*.f64 (neg.f64 a) #s(literal -1 binary64))) (*.f64 (neg.f64 a) (neg.f64 b)))","(/.f64 (fma.f64 #s(literal -1 binary64) b (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) b))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 b) (*.f64 a #s(literal -1 binary64))) (*.f64 (neg.f64 a) b))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 a) (*.f64 (neg.f64 b) #s(literal -1 binary64))) (*.f64 (neg.f64 b) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal -1 binary64) a (*.f64 (neg.f64 b) #s(literal 1 binary64))) (*.f64 (neg.f64 a) b))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 b #s(literal -1 binary64))) (*.f64 (neg.f64 a) b))","(/.f64 (*.f64 (+.f64 b a) (-.f64 a b)) (*.f64 (*.f64 b a) (-.f64 a b)))","(/.f64 (*.f64 (+.f64 b a) (-.f64 b a)) (*.f64 (*.f64 b a) (-.f64 b a)))","(/.f64 (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -2 binary64))) (/.f64 (-.f64 a b) (*.f64 b a)))","(/.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 b a) (fma.f64 b (-.f64 b a) (*.f64 a a))))","(/.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 b a) (fma.f64 b b (*.f64 a (-.f64 a b)))))","(/.f64 (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64))) (+.f64 (pow.f64 a #s(literal -2 binary64)) (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64)))))","(/.f64 (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64))) (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (pow.f64 b #s(literal -2 binary64))))","(/.f64 (/.f64 (neg.f64 (+.f64 b a)) a) (neg.f64 (neg.f64 (neg.f64 b))))","(/.f64 (/.f64 (neg.f64 (+.f64 b a)) a) (neg.f64 b))","(/.f64 (neg.f64 (+.f64 b a)) (*.f64 (neg.f64 a) b))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (/.f64 (+.f64 b a) b))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (/.f64 b (+.f64 b a)) a) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (-.f64 a b) (*.f64 b a)) (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (pow.f64 b #s(literal -2 binary64))) (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 a (+.f64 b a)) b)))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 b (+.f64 b a)) a)))","(/.f64 #s(literal -1 binary64) (*.f64 (/.f64 a (+.f64 b a)) (neg.f64 b)))","(/.f64 (/.f64 (+.f64 b a) b) a)","(/.f64 (pow.f64 b #s(literal -1 binary64)) (/.f64 a (+.f64 b a)))","(/.f64 (+.f64 b a) (*.f64 b a))","(/.f64 (/.f64 (+.f64 b a) a) (neg.f64 (neg.f64 b)))","(/.f64 (/.f64 (+.f64 b a) a) b)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (/.f64 b (+.f64 b a)) a))))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (/.f64 a (+.f64 b a)) (neg.f64 b))))","(/.f64 #s(literal 1 binary64) (/.f64 a (/.f64 (+.f64 b a) b)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (/.f64 b (+.f64 b a)) a) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 a b) (*.f64 b a)) (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (pow.f64 b #s(literal -2 binary64))) (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 a (+.f64 b a)) b))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 b (+.f64 b a)) a))","(neg.f64 (/.f64 (/.f64 (neg.f64 (+.f64 b a)) a) b))","(neg.f64 (/.f64 (neg.f64 (+.f64 b a)) (*.f64 b a)))","(neg.f64 (/.f64 (+.f64 b a) (*.f64 (neg.f64 a) b)))","(fma.f64 (pow.f64 b #s(literal -1/2 binary64)) (pow.f64 b #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 (pow.f64 a #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1/2 binary64)) (pow.f64 b #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) b) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) a) (pow.f64 b #s(literal -1 binary64)))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal 1 binary64) (pow.f64 b #s(literal -1 binary64)))","(fma.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal 1 binary64) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 a #s(literal -1 binary64)) (pow.f64 b #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 b #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 b #s(literal -2 binary64)) (/.f64 (-.f64 a b) (*.f64 b a))) (/.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (-.f64 a b) (*.f64 b a))))","(exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 b (+.f64 b a)) a)) #s(literal -1 binary64)))","(+.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 b #s(literal -1 binary64)))","(+.f64 (pow.f64 b #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 a (*.f64 (+.f64 b a) (-.f64 a b))) #s(literal -1 binary64)) (pow.f64 (-.f64 a b) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 a (*.f64 (+.f64 b a) (-.f64 b a))) #s(literal -1 binary64)) (pow.f64 (-.f64 b a) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 a (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 a (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b b (*.f64 a (-.f64 a b))) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 b a) #s(literal 1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (neg.f64 (+.f64 b a)) (/.f64 #s(literal -1 binary64) a))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 b a) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 b a))","(*.f64 (+.f64 b a) (pow.f64 a #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (+.f64 b a) a))","(pow.f64 (/.f64 (/.f64 a (+.f64 b a)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 a (+.f64 b a)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 a b)) (pow.f64 a #s(literal -1 binary64)))) (neg.f64 (-.f64 a b)))","(/.f64 (neg.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) (pow.f64 a #s(literal -1 binary64)))) (neg.f64 (-.f64 b a)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 a #s(literal -1 binary64)))) (neg.f64 (fma.f64 b (-.f64 b a) (*.f64 a a))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 a #s(literal -1 binary64)))) (neg.f64 (fma.f64 b b (*.f64 a (-.f64 a b)))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (+.f64 b a)))) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 a b)) #s(literal -1 binary64))) (neg.f64 (*.f64 (-.f64 a b) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) #s(literal -1 binary64))) (neg.f64 (*.f64 (-.f64 b a) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 b b (*.f64 a (-.f64 a b))) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 a b)) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 a b) a)))","(/.f64 (neg.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 b a) a)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) a)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b b (*.f64 a (-.f64 a b))) a)))","(/.f64 (neg.f64 (*.f64 (+.f64 b a) #s(literal -1 binary64))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (+.f64 b a) #s(literal 1 binary64))) (neg.f64 a))","(/.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 a b)) (pow.f64 a #s(literal -1 binary64))) (-.f64 a b))","(/.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) (pow.f64 a #s(literal -1 binary64))) (-.f64 b a))","(/.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 a #s(literal -1 binary64))) (fma.f64 b (-.f64 b a) (*.f64 a a)))","(/.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 a #s(literal -1 binary64))) (fma.f64 b b (*.f64 a (-.f64 a b))))","(/.f64 (neg.f64 (*.f64 (+.f64 b a) (-.f64 a b))) (neg.f64 (*.f64 a (-.f64 a b))))","(/.f64 (neg.f64 (*.f64 (+.f64 b a) (-.f64 b a))) (neg.f64 (*.f64 a (-.f64 b a))))","(/.f64 (neg.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (*.f64 a (fma.f64 b (-.f64 b a) (*.f64 a a)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (*.f64 a (fma.f64 b b (*.f64 a (-.f64 a b))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 b a))) (neg.f64 (neg.f64 a)))","(/.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 a b)) #s(literal -1 binary64)) (*.f64 (-.f64 a b) (neg.f64 a)))","(/.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) #s(literal -1 binary64)) (*.f64 (-.f64 b a) (neg.f64 a)))","(/.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) (neg.f64 a)))","(/.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 b b (*.f64 a (-.f64 a b))) (neg.f64 a)))","(/.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 a b)) #s(literal 1 binary64)) (*.f64 (-.f64 a b) a))","(/.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) #s(literal 1 binary64)) (*.f64 (-.f64 b a) a))","(/.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) a))","(/.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b b (*.f64 a (-.f64 a b))) a))","(/.f64 (*.f64 (+.f64 b a) #s(literal -1 binary64)) (neg.f64 a))","(/.f64 (*.f64 (+.f64 b a) #s(literal 1 binary64)) a)","(/.f64 (*.f64 (+.f64 b a) (-.f64 a b)) (*.f64 a (-.f64 a b)))","(/.f64 (*.f64 (+.f64 b a) (-.f64 b a)) (*.f64 a (-.f64 b a)))","(/.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 a (fma.f64 b (-.f64 b a) (*.f64 a a))))","(/.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 a (fma.f64 b b (*.f64 a (-.f64 a b)))))","(/.f64 (neg.f64 (+.f64 b a)) (neg.f64 a))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 a (+.f64 b a)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (+.f64 b a))))","(/.f64 (+.f64 b a) a)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 a (+.f64 b a)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a (+.f64 b a)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 a (+.f64 b a)))","(neg.f64 (/.f64 (neg.f64 (+.f64 b a)) a))","(exp.f64 (fma.f64 (log.f64 a) #s(literal -1 binary64) (log.f64 (+.f64 b a))))","(exp.f64 (+.f64 (log.f64 (+.f64 b a)) (neg.f64 (log.f64 a))))","(exp.f64 (*.f64 (log.f64 (/.f64 a (+.f64 b a))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sqrt.f64 (+.f64 b a)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (+.f64 b a)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (*.f64 (+.f64 b a) (-.f64 a b)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 a b) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (*.f64 (+.f64 b a) (-.f64 b a)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 b a) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 b b (*.f64 a (-.f64 a b))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (sqrt.f64 (+.f64 b a)) (sqrt.f64 (+.f64 b a)))","(*.f64 (*.f64 (+.f64 b a) (-.f64 a b)) (pow.f64 (-.f64 a b) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) (pow.f64 (-.f64 b a) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (fma.f64 b b (*.f64 a (-.f64 a b))) #s(literal -1 binary64)))","(pow.f64 (sqrt.f64 (+.f64 b a)) #s(literal 2 binary64))","(pow.f64 (/.f64 (-.f64 a b) (*.f64 (+.f64 b a) (-.f64 a b))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 b a) (*.f64 (+.f64 b a) (-.f64 b a))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b b (*.f64 a (-.f64 a b))) (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (+.f64 b a) #s(literal 1 binary64))","(/.f64 (neg.f64 (neg.f64 (*.f64 (+.f64 b a) (-.f64 a b)))) (neg.f64 (neg.f64 (-.f64 a b))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (+.f64 b a) (-.f64 b a)))) (neg.f64 (neg.f64 (-.f64 b a))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 b b (*.f64 a (-.f64 a b))))))","(/.f64 (exp.f64 (log.f64 (*.f64 (+.f64 b a) (-.f64 a b)))) (exp.f64 (log.f64 (-.f64 a b))))","(/.f64 (exp.f64 (log.f64 (*.f64 (+.f64 b a) (-.f64 b a)))) (exp.f64 (log.f64 (-.f64 b a))))","(/.f64 (exp.f64 (log.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))))) (exp.f64 (log.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)))))","(/.f64 (exp.f64 (log.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))))) (exp.f64 (log.f64 (fma.f64 b b (*.f64 a (-.f64 a b))))))","(/.f64 (neg.f64 (*.f64 (+.f64 b a) (-.f64 a b))) (neg.f64 (-.f64 a b)))","(/.f64 (neg.f64 (*.f64 (+.f64 b a) (-.f64 b a))) (neg.f64 (-.f64 b a)))","(/.f64 (neg.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (fma.f64 b (-.f64 b a) (*.f64 a a))))","(/.f64 (neg.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (fma.f64 b b (*.f64 a (-.f64 a b)))))","(/.f64 (*.f64 (+.f64 b a) (-.f64 a b)) (-.f64 a b))","(/.f64 (*.f64 (+.f64 b a) (-.f64 b a)) (-.f64 b a))","(/.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (fma.f64 b (-.f64 b a) (*.f64 a a)))","(/.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (fma.f64 b b (*.f64 a (-.f64 a b))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 a b) (*.f64 (+.f64 b a) (-.f64 a b)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 b a) (*.f64 (+.f64 b a) (-.f64 b a)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 b b (*.f64 a (-.f64 a b))) (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 a b) (*.f64 (+.f64 b a) (-.f64 a b))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 b a) (*.f64 (+.f64 b a) (-.f64 b a))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b b (*.f64 a (-.f64 a b))) (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(fma.f64 #s(literal 1 binary64) b a)","(fma.f64 #s(literal 1 binary64) a b)","(fma.f64 b #s(literal 1 binary64) a)","(fma.f64 a #s(literal 1 binary64) b)","(-.f64 (/.f64 (*.f64 a a) (-.f64 a b)) (/.f64 (*.f64 b b) (-.f64 a b)))","(-.f64 (/.f64 (*.f64 b b) (-.f64 b a)) (/.f64 (*.f64 a a) (-.f64 b a)))","(exp.f64 (log.f64 (+.f64 b a)))","(+.f64 b a)","(+.f64 a b)","(log.f64 (exp.f64 (+.f64 b a)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(literal 0 binary64)))","#s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(literal 0 binary64))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) b) a))","(*.f64 (pow.f64 (/.f64 (*.f64 b a) (*.f64 (+.f64 b a) (-.f64 a b))) #s(literal -1 binary64)) (pow.f64 (-.f64 a b) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 b a) (*.f64 (+.f64 b a) (-.f64 b a))) #s(literal -1 binary64)) (pow.f64 (-.f64 b a) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 b a) (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 b a) (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b b (*.f64 a (-.f64 a b))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 b (neg.f64 (+.f64 b a))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) a))","(*.f64 (*.f64 (/.f64 (+.f64 b a) a) #s(literal 1 binary64)) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -2 binary64))) (pow.f64 (/.f64 (-.f64 a b) (*.f64 b a)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 b a) #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 b a) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 b a) #s(literal -1 binary64)) (+.f64 b a))","(*.f64 (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64))) (pow.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (pow.f64 b #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 (+.f64 b a)) a) (/.f64 #s(literal -1 binary64) b))","(*.f64 (neg.f64 (+.f64 b a)) (pow.f64 (*.f64 (neg.f64 a) b) #s(literal -1 binary64)))","(*.f64 (/.f64 (+.f64 b a) b) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 (+.f64 b a) b))","(*.f64 (pow.f64 b #s(literal -1 binary64)) (/.f64 (+.f64 b a) a))","(*.f64 (+.f64 b a) (pow.f64 (*.f64 b a) #s(literal -1 binary64)))","(*.f64 (/.f64 (+.f64 b a) a) (pow.f64 b #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 (+.f64 b a) b) a))","(pow.f64 (/.f64 a (/.f64 (+.f64 b a) b)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (/.f64 b (+.f64 b a)) a) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 (-.f64 a b) (*.f64 b a)) (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (pow.f64 b #s(literal -2 binary64))) (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64)))) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 a (+.f64 b a)) b) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 b (+.f64 b a)) a) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 a b)) (pow.f64 (*.f64 b a) #s(literal -1 binary64)))) (neg.f64 (-.f64 a b)))","(/.f64 (neg.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) (pow.f64 (*.f64 b a) #s(literal -1 binary64)))) (neg.f64 (-.f64 b a)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (*.f64 b a) #s(literal -1 binary64)))) (neg.f64 (fma.f64 b (-.f64 b a) (*.f64 a a))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (*.f64 b a) #s(literal -1 binary64)))) (neg.f64 (fma.f64 b b (*.f64 a (-.f64 a b)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (+.f64 b a)) (pow.f64 b #s(literal -1 binary64)))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (/.f64 (+.f64 b a) a) #s(literal -1 binary64))) (neg.f64 (neg.f64 b)))","(/.f64 (neg.f64 (*.f64 (/.f64 (+.f64 b a) a) #s(literal 1 binary64))) (neg.f64 b))","(/.f64 (neg.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 b #s(literal -2 binary64)))) (neg.f64 (-.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 b #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (+.f64 b a) b))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -2 binary64))))) (neg.f64 (neg.f64 (/.f64 (-.f64 a b) (*.f64 b a)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64))))) (neg.f64 (neg.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (pow.f64 b #s(literal -2 binary64))))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (+.f64 b a)) #s(literal -1 binary64))) (neg.f64 (*.f64 (neg.f64 a) (neg.f64 b))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (+.f64 b a)) #s(literal 1 binary64))) (neg.f64 (*.f64 (neg.f64 a) b)))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 b) (*.f64 (neg.f64 a) #s(literal -1 binary64)))) (neg.f64 (*.f64 (neg.f64 a) (neg.f64 b))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) b (*.f64 (neg.f64 a) #s(literal 1 binary64)))) (neg.f64 (*.f64 (neg.f64 a) b)))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 b) (*.f64 a #s(literal -1 binary64)))) (neg.f64 (*.f64 (neg.f64 a) b)))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 a) (*.f64 (neg.f64 b) #s(literal -1 binary64)))) (neg.f64 (*.f64 (neg.f64 b) (neg.f64 a))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) a (*.f64 (neg.f64 b) #s(literal 1 binary64)))) (neg.f64 (*.f64 (neg.f64 a) b)))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 b #s(literal -1 binary64)))) (neg.f64 (*.f64 (neg.f64 a) b)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (+.f64 b a)))) (neg.f64 (neg.f64 (*.f64 (neg.f64 a) b))))","(/.f64 (neg.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 a b)) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 a b) (*.f64 b a))))","(/.f64 (neg.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 b a) (*.f64 b a))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) (*.f64 b a))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b b (*.f64 a (-.f64 a b))) (*.f64 b a))))","(/.f64 (neg.f64 (*.f64 (+.f64 b a) #s(literal -1 binary64))) (neg.f64 (*.f64 (neg.f64 a) b)))","(/.f64 (neg.f64 (*.f64 (+.f64 b a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) b))","(/.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 a b)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (-.f64 a b))","(/.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (-.f64 b a))","(/.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (fma.f64 b (-.f64 b a) (*.f64 a a)))","(/.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (fma.f64 b b (*.f64 a (-.f64 a b))))","(/.f64 (*.f64 (neg.f64 (+.f64 b a)) (pow.f64 b #s(literal -1 binary64))) (neg.f64 a))","(/.f64 (*.f64 (/.f64 (+.f64 b a) a) #s(literal -1 binary64)) (neg.f64 b))","(/.f64 (*.f64 (/.f64 (+.f64 b a) a) #s(literal 1 binary64)) b)","(/.f64 (neg.f64 (pow.f64 b #s(literal -1 binary64))) (neg.f64 (/.f64 a (+.f64 b a))))","(/.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 b #s(literal -2 binary64))) (-.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 b #s(literal -1 binary64))))","(/.f64 (neg.f64 (/.f64 (+.f64 b a) b)) (neg.f64 a))","(/.f64 (neg.f64 (*.f64 (+.f64 b a) (-.f64 a b))) (neg.f64 (*.f64 (*.f64 b a) (-.f64 a b))))","(/.f64 (neg.f64 (*.f64 (+.f64 b a) (-.f64 b a))) (neg.f64 (*.f64 (*.f64 b a) (-.f64 b a))))","(/.f64 (neg.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 b a) (fma.f64 b (-.f64 b a) (*.f64 a a)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 b a) (fma.f64 b b (*.f64 a (-.f64 a b))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 b a))) (neg.f64 (*.f64 (neg.f64 a) b)))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -2 binary64)))) (neg.f64 (/.f64 (-.f64 a b) (*.f64 b a))))","(/.f64 (neg.f64 (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 a #s(literal -2 binary64)) (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64)))) (neg.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (pow.f64 b #s(literal -2 binary64)))))","(/.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 a b)) #s(literal 1 binary64)) (*.f64 (-.f64 a b) (*.f64 b a)))","(/.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) #s(literal 1 binary64)) (*.f64 (-.f64 b a) (*.f64 b a)))","(/.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) (*.f64 b a)))","(/.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b b (*.f64 a (-.f64 a b))) (*.f64 b a)))","(/.f64 (*.f64 (neg.f64 (+.f64 b a)) #s(literal -1 binary64)) (*.f64 (neg.f64 a) (neg.f64 b)))","(/.f64 (*.f64 (neg.f64 (+.f64 b a)) #s(literal 1 binary64)) (*.f64 (neg.f64 a) b))","(/.f64 (*.f64 (+.f64 b a) #s(literal -1 binary64)) (*.f64 (neg.f64 a) b))","(/.f64 (*.f64 (+.f64 b a) #s(literal 1 binary64)) (*.f64 b a))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 b) (*.f64 (neg.f64 a) #s(literal -1 binary64))) (*.f64 (neg.f64 a) (neg.f64 b)))","(/.f64 (fma.f64 #s(literal -1 binary64) b (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) b))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 b) (*.f64 a #s(literal -1 binary64))) (*.f64 (neg.f64 a) b))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 a) (*.f64 (neg.f64 b) #s(literal -1 binary64))) (*.f64 (neg.f64 b) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal -1 binary64) a (*.f64 (neg.f64 b) #s(literal 1 binary64))) (*.f64 (neg.f64 a) b))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 b #s(literal -1 binary64))) (*.f64 (neg.f64 a) b))","(/.f64 (*.f64 (+.f64 b a) (-.f64 a b)) (*.f64 (*.f64 b a) (-.f64 a b)))","(/.f64 (*.f64 (+.f64 b a) (-.f64 b a)) (*.f64 (*.f64 b a) (-.f64 b a)))","(/.f64 (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -2 binary64))) (/.f64 (-.f64 a b) (*.f64 b a)))","(/.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 b a) (fma.f64 b (-.f64 b a) (*.f64 a a))))","(/.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 b a) (fma.f64 b b (*.f64 a (-.f64 a b)))))","(/.f64 (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64))) (+.f64 (pow.f64 a #s(literal -2 binary64)) (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64)))))","(/.f64 (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64))) (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (pow.f64 b #s(literal -2 binary64))))","(/.f64 (/.f64 (neg.f64 (+.f64 b a)) a) (neg.f64 (neg.f64 (neg.f64 b))))","(/.f64 (/.f64 (neg.f64 (+.f64 b a)) a) (neg.f64 b))","(/.f64 (neg.f64 (+.f64 b a)) (*.f64 (neg.f64 a) b))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (/.f64 (+.f64 b a) b))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (/.f64 b (+.f64 b a)) a) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (-.f64 a b) (*.f64 b a)) (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (pow.f64 b #s(literal -2 binary64))) (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 a (+.f64 b a)) b)))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 b (+.f64 b a)) a)))","(/.f64 #s(literal -1 binary64) (*.f64 (/.f64 a (+.f64 b a)) (neg.f64 b)))","(/.f64 (/.f64 (+.f64 b a) b) a)","(/.f64 (pow.f64 b #s(literal -1 binary64)) (/.f64 a (+.f64 b a)))","(/.f64 (+.f64 b a) (*.f64 b a))","(/.f64 (/.f64 (+.f64 b a) a) (neg.f64 (neg.f64 b)))","(/.f64 (/.f64 (+.f64 b a) a) b)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (/.f64 b (+.f64 b a)) a))))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (/.f64 a (+.f64 b a)) (neg.f64 b))))","(/.f64 #s(literal 1 binary64) (/.f64 a (/.f64 (+.f64 b a) b)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (/.f64 b (+.f64 b a)) a) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 a b) (*.f64 b a)) (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (pow.f64 b #s(literal -2 binary64))) (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 a (+.f64 b a)) b))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 b (+.f64 b a)) a))","(neg.f64 (/.f64 (/.f64 (neg.f64 (+.f64 b a)) a) b))","(neg.f64 (/.f64 (neg.f64 (+.f64 b a)) (*.f64 b a)))","(neg.f64 (/.f64 (+.f64 b a) (*.f64 (neg.f64 a) b)))","(fma.f64 (pow.f64 b #s(literal -1/2 binary64)) (pow.f64 b #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 (pow.f64 a #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1/2 binary64)) (pow.f64 b #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) b) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) a) (pow.f64 b #s(literal -1 binary64)))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal 1 binary64) (pow.f64 b #s(literal -1 binary64)))","(fma.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal 1 binary64) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 a #s(literal -1 binary64)) (pow.f64 b #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 b #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 b #s(literal -2 binary64)) (/.f64 (-.f64 a b) (*.f64 b a))) (/.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (-.f64 a b) (*.f64 b a))))","(exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 b (+.f64 b a)) a)) #s(literal -1 binary64)))","(+.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 b #s(literal -1 binary64)))","(+.f64 (pow.f64 b #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 b a)","(*.f64 a b)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) b))","(*.f64 (*.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) #s(literal 1 binary64)) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (neg.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a))) (/.f64 #s(literal -1 binary64) b))","(*.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (pow.f64 b #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 b #s(literal -1 binary64)) #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) b))","(pow.f64 (/.f64 (/.f64 b #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 b #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) #s(literal -1 binary64))) (neg.f64 (neg.f64 b)))","(/.f64 (neg.f64 (*.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) #s(literal 1 binary64))) (neg.f64 b))","(/.f64 (neg.f64 (neg.f64 (neg.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a))))) (neg.f64 (neg.f64 (neg.f64 b))))","(/.f64 (*.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) #s(literal -1 binary64)) (neg.f64 b))","(/.f64 (*.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) #s(literal 1 binary64)) b)","(/.f64 (neg.f64 (neg.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)))) (neg.f64 (neg.f64 b)))","(/.f64 (neg.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a))) (neg.f64 b))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 b #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 b #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)))))","(/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) b)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 b #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 b #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a))))","(neg.f64 (/.f64 (neg.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a))) b))","(neg.f64 (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) (neg.f64 b)))","(exp.f64 (*.f64 (log.f64 (/.f64 b #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)))) #s(literal -1 binary64)))","#s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) b) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) a))","(*.f64 (/.f64 #s(literal -1 binary64) a) (pow.f64 (/.f64 #s(literal -1 binary64) b) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) a) (neg.f64 b))","(*.f64 (neg.f64 b) (/.f64 #s(literal -1 binary64) a))","(*.f64 (pow.f64 a #s(literal -1 binary64)) b)","(*.f64 #s(literal 1 binary64) (/.f64 b a))","(*.f64 b (pow.f64 a #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 a b) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 a b) #s(literal -1 binary64))","(pow.f64 (/.f64 b a) #s(literal 1 binary64))","(/.f64 (neg.f64 (*.f64 b #s(literal -1 binary64))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 b))) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 (neg.f64 (pow.f64 a #s(literal -1 binary64))) (neg.f64 (pow.f64 b #s(literal -1 binary64))))","(/.f64 (neg.f64 (neg.f64 b)) (neg.f64 (neg.f64 a)))","(/.f64 (*.f64 b #s(literal -1 binary64)) (neg.f64 a))","(/.f64 (neg.f64 b) (neg.f64 a))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 a b) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a b)))","(/.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 b #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 a b))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a b) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 a b))","(/.f64 b a)","(neg.f64 (/.f64 (neg.f64 b) a))","(neg.f64 (/.f64 b (neg.f64 a)))","(exp.f64 (-.f64 (neg.f64 (log.f64 a)) (neg.f64 (log.f64 b))))","(exp.f64 (*.f64 (log.f64 (/.f64 a b)) #s(literal -1 binary64)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) a))","(*.f64 (*.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) #s(literal 1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (neg.f64 #s(approx (/ (+ b a) b) (/.f64 a b))) (/.f64 #s(literal -1 binary64) a))","(*.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) #s(approx (/ (+ b a) b) (/.f64 a b)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) a))","(pow.f64 (/.f64 (/.f64 a #s(approx (/ (+ b a) b) (/.f64 a b))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 a #s(approx (/ (+ b a) b) (/.f64 a b))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) #s(literal -1 binary64))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) #s(literal 1 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (neg.f64 (neg.f64 #s(approx (/ (+ b a) b) (/.f64 a b))))) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 (*.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) #s(literal -1 binary64)) (neg.f64 a))","(/.f64 (*.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) #s(literal 1 binary64)) a)","(/.f64 (neg.f64 (neg.f64 #s(approx (/ (+ b a) b) (/.f64 a b)))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 #s(approx (/ (+ b a) b) (/.f64 a b))) (neg.f64 a))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 a #s(approx (/ (+ b a) b) (/.f64 a b))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a #s(approx (/ (+ b a) b) (/.f64 a b)))))","(/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) a)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 a #s(approx (/ (+ b a) b) (/.f64 a b))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a #s(approx (/ (+ b a) b) (/.f64 a b))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 a #s(approx (/ (+ b a) b) (/.f64 a b))))","(neg.f64 (/.f64 (neg.f64 #s(approx (/ (+ b a) b) (/.f64 a b))) a))","(neg.f64 (/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) (neg.f64 a)))","(exp.f64 (*.f64 (log.f64 (/.f64 a #s(approx (/ (+ b a) b) (/.f64 a b)))) #s(literal -1 binary64)))","#s(approx (/ (+ b a) b) (/.f64 a b))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) a) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) b))","(*.f64 (/.f64 #s(literal -1 binary64) b) (pow.f64 (/.f64 #s(literal -1 binary64) a) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) b) (neg.f64 a))","(*.f64 (neg.f64 a) (/.f64 #s(literal -1 binary64) b))","(*.f64 (pow.f64 b #s(literal -1 binary64)) a)","(*.f64 #s(literal 1 binary64) (/.f64 a b))","(*.f64 a (pow.f64 b #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 b a) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 a b) #s(literal 1 binary64))","(pow.f64 (/.f64 b a) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 a #s(literal -1 binary64))) (neg.f64 (neg.f64 b)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 a))) (neg.f64 (neg.f64 (neg.f64 b))))","(/.f64 (neg.f64 (pow.f64 b #s(literal -1 binary64))) (neg.f64 (pow.f64 a #s(literal -1 binary64))))","(/.f64 (neg.f64 (neg.f64 a)) (neg.f64 (neg.f64 b)))","(/.f64 (*.f64 a #s(literal -1 binary64)) (neg.f64 b))","(/.f64 (neg.f64 a) (neg.f64 b))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 b a) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 b a)))","(/.f64 (pow.f64 b #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 b a))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b a) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 b a))","(/.f64 a b)","(neg.f64 (/.f64 (neg.f64 a) b))","(neg.f64 (/.f64 a (neg.f64 b)))","(exp.f64 (-.f64 (neg.f64 (log.f64 b)) (neg.f64 (log.f64 a))))","(exp.f64 (*.f64 (log.f64 (/.f64 b a)) #s(literal -1 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":221.53515625,"type":"rewrite"},{"compiler":[[20400,1738]],"memory":[[-423808,42529520]],"time":50.803955078125,"type":"eval"},{"alts":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) b) a))","done",0.14453125,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) a) b))","done",0.15234375,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (+.f64 b a) (*.f64 b a)))","done",26.664237184388202,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) a))","done",31.33108272912622,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) b))","done",32.98162591503478,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b))","done",31.209498624117707,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","done",32.860526662783684,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(literal 0 binary64)))","done",62.70537463670366,"binary64"]],"compiler":[[441,114],[32,21],[32,21],[32,21],[36,23],[50,32],[28,20],[28,20],[70,41]],"count":[[459,8]],"kept":[{"done":[3,3],"fresh":[0,0],"new":[451,0],"picked":[5,5]}],"memory":[[-548400,22805232]],"min-error":[[0.0,"binary64"]],"time":14.0439453125,"type":"prune"},{"accuracy":[0.14453125],"baseline":[0.14453125],"branch":[["a",0.14453125,1,"binary64"],["b",0.14453125,1,"binary64"],["eps",0.14453125,1,"binary64"],["(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))",0.14453125,1,"binary64"]],"compiler":[[1,3],[1,3],[1,3],[24,17]],"count":[[11,1]],"inputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(literal 0 binary64)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (+.f64 b a) (*.f64 b a)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) b))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) a) b))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) b) a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a))))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))) b #s(literal 1 binary64)) b))","(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))"]],"memory":[[-5334064,9758080]],"oracle":[64.0],"outputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) b) a))"]],"repr":["binary64"],"time":83.713134765625,"times":[[3.03515625,"a"],[3.505859375,"b"],[73.43603515625,"eps"],[2.5439453125,"(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))"]],"type":"regimes"},{"accuracy":[0.15234375],"baseline":[0.15234375],"branch":[["a",0.15234375,1,"binary64"],["b",0.15234375,1,"binary64"],["eps",0.15234375,1,"binary64"],["(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))",0.15234375,1,"binary64"]],"compiler":[[1,3],[1,3],[1,3],[24,17]],"count":[[7,1]],"inputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(literal 0 binary64)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (+.f64 b a) (*.f64 b a)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) b))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) a) b))"]],"memory":[[74032,8314448]],"oracle":[63.12051241565497],"outputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) a) b))"]],"repr":["binary64"],"time":10.11181640625,"times":[[2.318115234375,"a"],[2.34912109375,"b"],[2.656005859375,"eps"],[1.949951171875,"(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))"]],"type":"regimes"},{"accuracy":[8.09519817611047],"baseline":[26.664237184388202],"branch":[["a",8.09519817611047,2,"binary64"],["b",11.623475074960142,3,"binary64"],["eps",14.673574796953265,5,"binary64"],["(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))",26.664237184388202,1,"binary64"]],"compiler":[[1,3],[1,3],[1,3],[24,17]],"count":[[6,2]],"inputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(literal 0 binary64)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (+.f64 b a) (*.f64 b a)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) b))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) a))"]],"memory":[[-303808,7950160]],"oracle":[63.12051241565497],"outputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))"]],"repr":["binary64"],"time":9.157958984375,"times":[[2.055908203125,"a"],[2.095947265625,"b"],[2.283935546875,"eps"],[1.842041015625,"(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))"]],"type":"regimes"},{"accuracy":[32.860526662783684],"baseline":[32.860526662783684],"branch":[["(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))",32.860526662783684,1,"binary64"],["eps",32.8605266627837,1,"binary64"],["b",32.860526662783705,1,"binary64"],["a",32.860526662783684,1,"binary64"]],"compiler":[[24,17],[1,3],[1,3],[1,3]],"count":[[2,1]],"inputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(literal 0 binary64)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))"]],"memory":[[-2052128,6282032]],"oracle":[62.947265501665015],"outputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))"]],"repr":["binary64"],"time":5.82421875,"times":[[1.088134765625,"(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))"],[1.2587890625,"eps"],[1.39404296875,"b"],[1.299072265625,"a"]],"type":"regimes"},{"accuracy":[62.70537463670363],"baseline":[62.70537463670366],"branch":[["b",62.705374636703645,1,"binary64"],["eps",62.70537463670363,1,"binary64"],["a",62.70537463670367,1,"binary64"],["(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))",62.70537463670366,1,"binary64"]],"compiler":[[1,3],[1,3],[1,3],[24,17]],"count":[[1,1]],"inputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(literal 0 binary64)))"]],"link":["."],"memory":[[-2931168,5925264]],"name":["expq3 (problem 3.4.2)"],"oracle":[62.70537463670366],"outputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(literal 0 binary64)))"]],"repr":["binary64"],"time":5.162841796875,"times":[[1.380126953125,"b"],[1.028076171875,"eps"],[1.04296875,"a"],[0.950927734375,"(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))"]],"type":"regimes"},{"bstep":[[12.908935546875,-1.5709641920375495e-210,-4.690793295931996e-212]],"compiler":[[28,21],[28,21],[28,21],[28,21],[28,21],[28,21],[28,21],[28,21],[28,21],[28,21],[28,21],[28,21],[28,21],[28,21],[26,16],[1,3]],"memory":[[5225008,5225008]],"method":["binary-search"],"mixsample":[[0.677490234375,"ival-div",0],[0.060791015625,"ival-true",0],[0.607421875,"ival-add",0],[3.18115234375,"ival-mult",0],[1.662353515625,"ival-expm1",0],[0.036376953125,"ival-assert",0]],"outcomes":[[8.961669921875,0,"valid",112]],"stop":[["narrow-enough",1]],"time":15.203125,"type":"bsearch"},{"egraph":[[4,5619,206,0.019254912],[3,1408,212,0.016671305],[2,313,220,0.005268377],[1,120,222,0.001285068],[0,55,222,0.000796524]],"inputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) b) a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) a) b))","(if (<=.f64 a #s(literal -962387809749089/740298315191606967520227188330889966610377319868419938630605715764070011466206019559325413145373572325939050053182159998975553533608824916574615132828322000124194610605645134711392062011527273571616649243219599128195212771328 binary64)) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b)) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(literal 0 binary64)))"]],"memory":[[-3498720,12467728]],"method":["egg-herbie"],"outputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) b) a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) a) b))","(if (<=.f64 a #s(literal -962387809749089/740298315191606967520227188330889966610377319868419938630605715764070011466206019559325413145373572325939050053182159998975553533608824916574615132828322000124194610605645134711392062011527273571616649243219599128195212771328 binary64)) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b)) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a)))","(if (<=.f64 a #s(literal -962387809749089/740298315191606967520227188330889966610377319868419938630605715764070011466206019559325413145373572325939050053182159998975553533608824916574615132828322000124194610605645134711392062011527273571616649243219599128195212771328 binary64)) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (pow.f64 b #s(literal -1 binary64))) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (pow.f64 a #s(literal -1 binary64))))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (pow.f64 a #s(literal -1 binary64)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(literal 0 binary64)))"]],"stop":[["node limit",1]],"time":66.8359375,"type":"simplify"},{"compiler":[[222,56],[0,3],[3,5],[3,5],[3,5],[32,21],[7,6],[7,6]],"egraph":[[0,8118,1416,0.091275393],[2,3456,1586,0.023425178],[1,1079,1694,0.010966568],[0,336,1742,0.003391462],[0,8352,343,0.067269596],[2,3204,367,0.035218927],[1,365,367,0.009979453],[0,83,375,0.002498653],[0,52,385,0.000455943],[0,8577,2291,0.089207034],[2,5402,2523,0.029089789],[1,1644,2767,0.016582412],[0,553,3135,0.004828968]],"memory":[[3592016,3592016]],"stop":[["done",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1]],"time":741.467041015625,"type":"soundness"},{"compiler":[[222,56],[222,56],[7,7],[7,7],[24,17],[24,17],[32,21],[32,21],[32,21],[32,21]],"memory":[[1124144,25882976]],"remove-preprocessing":[["(sort a b)"],[],[],["(sort a b)"],[],[]],"time":138.679931640625,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.010009765625,"type":"end"}]