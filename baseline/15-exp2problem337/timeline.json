[{"memory":[[13424,13424]],"time":0.032958984375,"type":"start"},{"compiler":[[13,11]],"memory":[[79024,79024]],"method":["search"],"sampling":[[1,{"invalid":0.0,"precondition":0.49590492248535156,"unknown":0.0,"valid":0.5040950775146484}],[0,{"invalid":0.0,"precondition":0.49590492248535156,"unknown":0.5040950775146484,"valid":0.0}]],"time":0.327880859375,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.49590492248535156,"valid":0.5040950775146484}],"memory":[[24172528,472528800]],"mixsample":[[208.27978515625,"adjust",800],[133.05029296875,"ival-add",0],[191.9892578125,"ival-exp",0],[68.02978515625,"ival-fabs",0],[42.302490234375,"ival-sub",1600],[5.063232421875,"ival-assert",0],[0.02392578125,"ival-add",400],[56.226318359375,"ival-sub",0],[1428.188232421875,"ival-exp",1600],[590.70361328125,"ival-exp",400],[52.487060546875,"ival-sub",400],[0.033935546875,"ival-add",800],[32.13818359375,"ival-<=",0],[12.32568359375,"exact",0],[124.69921875,"adjust",2000],[41.0693359375,"ival-neg",0]],"outcomes":[[456.750732421875,1,"valid",2370],[2871.174072265625,2,"valid",5684],[17.93310546875,0,"valid",202]],"time":3762.26513671875,"type":"sample"},{"compiler":[[8,7],[23,9],[23,9]],"confusion":[[136,0,1,119]],"explanations":[["+.f64","(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","cancellation",137,1,[],[[]]]],"fperrors":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))",137,1,[-3.9532976951322647e-162],1,[0.15903475488783672]],["(-.f64 (exp.f64 x) #s(literal 2 binary64))",0,0,false,0,false],["#s(literal 2 binary64)",0,0,false,0,false],["(exp.f64 x)",0,0,false,0,false],["(exp.f64 (neg.f64 x))",0,0,false,0,false],["(neg.f64 x)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,137],[0,119]],"maybe-confusion":[[136,0,0,1,2,117]],"memory":[[2683312,57616128]],"mixsample":[[10.97412109375,"adjust",800],[7.06005859375,"ival-add",0],[10.587646484375,"ival-exp",0],[2.15625,"ival-sub",1600],[0.255126953125,"ival-assert",0],[3.232177734375,"ival-sub",0],[0.501220703125,"ival-true",0],[80.51220703125,"ival-exp",1600],[35.961181640625,"ival-exp",400],[2.93505859375,"ival-sub",400],[0.395751953125,"exact",0],[6.597900390625,"adjust",2000],[2.752685546875,"ival-neg",0]],"outcomes":[[23.895263671875,1,"valid",134],[170.439453125,2,"valid",366],[0.868896484375,0,"valid",12]],"time":256.179931640625,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[8,7]],"egraph":[[0,402,8,0.001832577],[9,402,8,0.002113741],[8,400,8,0.002304431],[7,342,8,0.002448867],[6,274,8,0.004044911],[5,168,8,0.002522269],[4,102,8,0.001151522],[3,63,8,0.000522397],[2,40,8,0.000314051],[1,24,8,0.000193486],[0,12,8,0.000202578],[0,7,8,0.000149803],[6,435,16,0.002851963],[5,405,16,0.003014433],[4,319,16,0.00260674],[3,187,16,0.001650242],[2,81,16,0.000983222],[1,31,17,0.000383957],[0,9,17,0.000200862]],"inputs":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))"]],"memory":[[-1330656,6418576]],"method":["egg-herbie"],"outputs":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1],["saturated",1]],"symmetry":[["(abs x)"]],"time":50.498046875,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[41072,41072]],"time":0.06884765625,"type":"eval"},{"alts":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","next",30.67130390982156,"binary64"]],"compiler":[[8,7]],"memory":[[305744,305744]],"time":0.494140625,"type":"prune"},{"egraph":[[0,402,21,0.00177149],[9,402,21,0.002107462],[8,400,21,0.002370834],[7,342,21,0.002315122],[6,274,21,0.00299109],[5,168,21,0.00143735],[4,102,21,0.00095068],[3,63,21,0.0005346],[2,40,21,0.000341001],[1,24,21,0.000189633],[0,12,21,0.000194572],[0,7,21,0.00010769]],"inputs":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 x)","x","#s(literal 2 binary64)","(exp.f64 (neg.f64 x))","(neg.f64 x)"]],"locations":[["(exp.f64 (neg.f64 x))","cost-diff",0],["(exp.f64 x)","cost-diff",0],["(-.f64 (exp.f64 x) #s(literal 2 binary64))","cost-diff",0],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","cost-diff",0]],"memory":[[1539216,1539216]],"method":["egg-herbie"],"outputs":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 x)","x","#s(literal 2 binary64)","(exp.f64 (neg.f64 x))","(neg.f64 x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":23.5048828125,"type":"simplify"},{"compiler":[[23,9]],"locations":[["(exp.f64 (neg.f64 x))","accuracy",0.0],["(exp.f64 x)","accuracy",0.0],["(-.f64 (exp.f64 x) #s(literal 2 binary64))","accuracy",0.03125],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","accuracy",30.650833218033828]],"memory":[[-13248,16096960]],"mixsample":[[11.630615234375,"adjust",800],[4.16162109375,"ival-add",0],[5.440673828125,"ival-exp",0],[1.00732421875,"ival-sub",1600],[0.128662109375,"ival-assert",0],[1.527587890625,"ival-sub",0],[0.1962890625,"ival-true",0],[41.240966796875,"ival-exp",1600],[17.96435546875,"ival-exp",400],[1.44287109375,"ival-sub",400],[0.18798828125,"exact",0],[3.632568359375,"adjust",2000],[1.091796875,"ival-neg",0]],"outcomes":[[12.47900390625,1,"valid",67],[91.804443359375,2,"valid",183],[0.47802734375,0,"valid",6]],"time":116.719970703125,"type":"localize"},{"count":[[4,21]],"inputs":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 x)","(exp.f64 (neg.f64 x))"]],"memory":[[676016,676016]],"outputs":[["(pow x 2)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","-1","(- x 1)","(- (* x (+ 1 (* 1/2 x))) 1)","(- (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))) 1)","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(+ 1 (* -1 x))","(+ 1 (* x (- (* 1/2 x) 1)))","(+ 1 (* x (- (* x (+ 1/2 (* -1/6 x))) 1)))","(- (+ (exp x) (exp (neg x))) 2)","(- (exp x) 2)","(exp x)","(exp (neg x))","(- (+ (exp x) (exp (* -1 x))) 2)","(exp (* -1 x))"]],"series":[[0.298095703125,"((+ (- (exp x) 2) (exp (neg x))) (- (exp x) 2) (exp x) (exp (neg x)))","x","-inf"],[0.27392578125,"((+ (- (exp x) 2) (exp (neg x))) (- (exp x) 2) (exp x) (exp (neg x)))","x","inf"],[0.809814453125,"((+ (- (exp x) 2) (exp (neg x))) (- (exp x) 2) (exp x) (exp (neg x)))","x","0"]],"time":1.677001953125,"type":"series"},{"count":[[21,21]],"egraph":[[0,8428,132,0.108075549],[8,6661,153,0.020608508],[7,5255,153,0.022759731],[6,3863,153,0.020642699],[5,3034,153,0.01466617],[4,1762,153,0.01123645],[3,1060,153,0.006393245],[2,397,153,0.005132992],[1,168,159,0.001188226],[0,60,160,0.000564081]],"inputs":[["(pow x 2)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","-1","(- x 1)","(- (* x (+ 1 (* 1/2 x))) 1)","(- (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))) 1)","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(+ 1 (* -1 x))","(+ 1 (* x (- (* 1/2 x) 1)))","(+ 1 (* x (- (* x (+ 1/2 (* -1/6 x))) 1)))","(- (+ (exp x) (exp (neg x))) 2)","(- (exp x) 2)","(exp x)","(exp (neg x))","(- (+ (exp x) (exp (* -1 x))) 2)","(exp (* -1 x))"]],"memory":[[-6934112,43031216]],"method":["egg-herbie"],"outputs":[["(pow x 2)","(*.f64 x x)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","-1","#s(literal -1 binary64)","(- x 1)","(-.f64 x #s(literal 1 binary64))","(- (* x (+ 1 (* 1/2 x))) 1)","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64))","(- (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64))","1","#s(literal 1 binary64)","(+ 1 x)","(-.f64 x #s(literal -1 binary64))","(+ 1 (* x (+ 1 (* 1/2 x))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* -1 x))","(-.f64 #s(literal 1 binary64) x)","(+ 1 (* x (- (* 1/2 x) 1)))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (- (* x (+ 1/2 (* -1/6 x))) 1)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64))","(- (+ (exp x) (exp (neg x))) 2)","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))","(- (exp x) 2)","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp x)","(exp.f64 x)","(exp (neg x))","(exp.f64 (neg.f64 x))","(- (+ (exp x) (exp (* -1 x))) 2)","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))","(exp (* -1 x))","(exp.f64 (neg.f64 x))"]],"stop":[["iter limit",1],["node limit",1]],"time":372.989990234375,"type":"simplify"},{"count":[[4,237]],"egraph":[[0,8346,14,0.064685683],[3,6874,15,0.047770449],[2,394,17,0.019735246],[1,51,17,0.001427566],[0,12,17,0.000726303],[0,7,17,0.000115629]],"inputs":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 x)","(exp.f64 (neg.f64 x))"]],"memory":[[5189056,44822976]],"outputs":[["(*.f64 (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64)))) (fma.f64 (exp.f64 (neg.f64 x)) (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -2 binary64)))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (-.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) (exp.f64 x)))","(*.f64 (/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (/.f64 (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x))))","(*.f64 (/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x)) #s(literal 3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64)))) (fma.f64 (/.f64 (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x)) (-.f64 (/.f64 (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))) (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)))","(*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x)))))","(*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(*.f64 (pow.f64 (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) #s(literal -1 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))))","(*.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))))","(*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) (-.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))))))","(*.f64 (neg.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64))))))","(*.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x))))","(*.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) (exp.f64 x))))","(*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (pow.f64 (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (/.f64 (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))))","(*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (*.f64 (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64))))","(*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)))","(*.f64 (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))))","(*.f64 (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)) (*.f64 (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) #s(literal -1 binary64))))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64))","(/.f64 (/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -2 binary64))) (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal -2 binary64)))","(/.f64 (/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (exp.f64 x)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))","(/.f64 (/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -2 binary64))) (-.f64 (exp.f64 x) #s(literal -2 binary64))) (exp.f64 x))","(/.f64 (/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (exp.f64 x))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 (neg.f64 x)) #s(literal 4 binary64))) (pow.f64 (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) #s(literal -1 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (exp.f64 (neg.f64 x)) #s(literal 6 binary64))) (pow.f64 (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) #s(literal -1 binary64))) (fma.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (exp.f64 (neg.f64 x)) #s(literal 6 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 (exp.f64 (neg.f64 x)) #s(literal 9 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 9 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64))) (fma.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) #s(literal 1 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))))","(/.f64 (*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))) (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))))) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))))) (+.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 2 binary64) (cosh.f64 x)) (*.f64 #s(literal 2 binary64) (cosh.f64 x))) #s(literal 4 binary64)) (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 2 binary64) (cosh.f64 x)) (*.f64 #s(literal 2 binary64) (cosh.f64 x))) #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 2 binary64) (cosh.f64 x)) #s(literal -2 binary64)))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 #s(literal -2 binary64) (exp.f64 (neg.f64 x))) (+.f64 #s(literal -2 binary64) (exp.f64 (neg.f64 x))))) (-.f64 (exp.f64 x) (+.f64 #s(literal -2 binary64) (exp.f64 (neg.f64 x)))))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 2 binary64) (cosh.f64 x)) #s(literal 3 binary64)) #s(literal 8 binary64)) (fma.f64 (*.f64 #s(literal 2 binary64) (cosh.f64 x)) (*.f64 #s(literal 2 binary64) (cosh.f64 x)) (+.f64 #s(literal 4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) (cosh.f64 x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))) (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))) (fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))) (*.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))))))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal 2 binary64) (cosh.f64 x)) #s(literal 3 binary64)) #s(literal -8 binary64)) (fma.f64 (*.f64 #s(literal 2 binary64) (cosh.f64 x)) (*.f64 #s(literal 2 binary64) (cosh.f64 x)) (-.f64 #s(literal 4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) (cosh.f64 x)) #s(literal -2 binary64)))))","(/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal -2 binary64) (exp.f64 (neg.f64 x))) #s(literal 3 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (*.f64 (+.f64 #s(literal -2 binary64) (exp.f64 (neg.f64 x))) (+.f64 #s(literal -2 binary64) (exp.f64 (neg.f64 x)))) (*.f64 (exp.f64 x) (+.f64 #s(literal -2 binary64) (exp.f64 (neg.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)))) (neg.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) (-.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))))) (neg.f64 (neg.f64 (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -2 binary64)))) (neg.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))) (neg.f64 (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) (exp.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 (neg.f64 x)) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (exp.f64 (neg.f64 x)) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64))) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (exp.f64 (neg.f64 x)) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64))) (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (exp.f64 (neg.f64 x)) #s(literal 9 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64))) (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))) (*.f64 (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))) (*.f64 (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -2 binary64)) (*.f64 (neg.f64 (exp.f64 x)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))))) (*.f64 (neg.f64 (exp.f64 x)) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -2 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (*.f64 (neg.f64 (exp.f64 x)) (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))))) (*.f64 (neg.f64 (exp.f64 x)) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64)) (*.f64 (neg.f64 (exp.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (neg.f64 (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal -2 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 #s(literal -2 binary64) (exp.f64 x)))) (*.f64 (neg.f64 (exp.f64 x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (neg.f64 (exp.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 #s(literal -2 binary64) (exp.f64 x))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) (*.f64 (neg.f64 (exp.f64 x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (neg.f64 (exp.f64 x)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (exp.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (exp.f64 x)) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -2 binary64)) (*.f64 (exp.f64 x) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))))) (*.f64 (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (*.f64 (exp.f64 x) (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))))) (*.f64 (exp.f64 x) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 #s(literal -2 binary64) (exp.f64 x)))) (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x))) (*.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 #s(literal -2 binary64) (exp.f64 x))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x)) (*.f64 (exp.f64 x) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (exp.f64 x)) (*.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -2 binary64)) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (exp.f64 x) (*.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x)))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (exp.f64 x)) (*.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (exp.f64 x) (*.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (exp.f64 x)))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (neg.f64 (exp.f64 x)) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (neg.f64 (exp.f64 x)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 #s(literal -2 binary64) (exp.f64 x)))) #s(literal -1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 #s(literal -2 binary64) (exp.f64 x)))) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 #s(literal -2 binary64) (exp.f64 x)))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 #s(literal -2 binary64) (exp.f64 x)))) (exp.f64 x)))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (neg.f64 (exp.f64 x)) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) #s(literal -1 binary64))) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)) (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (exp.f64 x) (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x)))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64))) (-.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))))","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 (neg.f64 x)) #s(literal 4 binary64))) (*.f64 (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (exp.f64 (neg.f64 x)) #s(literal 6 binary64))) (*.f64 (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (fma.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (exp.f64 (neg.f64 x)) #s(literal 6 binary64))) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) (-.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (+.f64 (pow.f64 (exp.f64 (neg.f64 x)) #s(literal 9 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 9 binary64))) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (fma.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))) (neg.f64 (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -2 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x)))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) (exp.f64 x)))","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)))))","(/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))) (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) (-.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x)) (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) (exp.f64 x)) (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))))","(neg.f64 (/.f64 (neg.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)))) (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (neg.f64 (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))))))","(neg.f64 (/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64))))))","(fma.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (+.f64 #s(literal 8 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64)))) (fma.f64 #s(literal -2 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 (neg.f64 x)))","(fma.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) (exp.f64 x) #s(literal 4 binary64)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (exp.f64 x) #s(literal 4 binary64))) (exp.f64 (neg.f64 x)))","(fma.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (+.f64 (pow.f64 (fma.f64 #s(literal 2 binary64) (exp.f64 x) #s(literal 4 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64)))) (fma.f64 (fma.f64 #s(literal 2 binary64) (exp.f64 x) #s(literal 4 binary64)) (-.f64 (fma.f64 #s(literal 2 binary64) (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) #s(literal 4 binary64))) (exp.f64 (neg.f64 x)))","(fma.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64)))) (fma.f64 (exp.f64 (neg.f64 x)) (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (neg.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))))))","(fma.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -2 binary64)))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x)) (neg.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))))))","(fma.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) (exp.f64 x)) (neg.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))))))","(fma.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))) (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)) (neg.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))))))","(fma.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(fma.f64 (pow.f64 (exp.f64 #s(literal -1 binary64)) (/.f64 x #s(literal 2 binary64))) (pow.f64 (exp.f64 #s(literal -1 binary64)) (/.f64 x #s(literal 2 binary64))) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal -1/2 binary64)) (pow.f64 (exp.f64 x) #s(literal -1/2 binary64)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(fma.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (exp.f64 (neg.f64 x)))","(fma.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) #s(literal -1 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 (neg.f64 x)))","(fma.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -2 binary64))) (exp.f64 (neg.f64 x)))","(fma.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))) (exp.f64 (neg.f64 x)))","(fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x)))","(fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 x)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(fma.f64 #s(literal -1 binary64) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) (exp.f64 x))","(fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (*.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x)))","(fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 #s(literal -2 binary64) (exp.f64 x))))) (exp.f64 (neg.f64 x)))","(fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 x)))","(fma.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))))))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(fma.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(fma.f64 (exp.f64 (neg.f64 x)) #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))) (neg.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))))))","(fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64) (exp.f64 (neg.f64 x)))","(fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64))","(fma.f64 (exp.f64 x) #s(literal 1 binary64) (+.f64 #s(literal -2 binary64) (exp.f64 (neg.f64 x))))","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64)))) (/.f64 #s(literal 4 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64))))","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))) (/.f64 #s(literal 8 binary64) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x)))) (/.f64 (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x)))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) (-.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) (-.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))))","(-.f64 (*.f64 #s(literal 2 binary64) (cosh.f64 x)) #s(literal 2 binary64))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64))) (-.f64 (/.f64 #s(literal 4 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64))) (exp.f64 (neg.f64 x))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (-.f64 (/.f64 #s(literal 8 binary64) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (exp.f64 (neg.f64 x))))","(-.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))))","(-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (exp.f64 x)))","(-.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))","(exp.f64 (*.f64 (log.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)))) #s(literal -1 binary64)))","(+.f64 (+.f64 #s(literal -2 binary64) (exp.f64 (neg.f64 x))) (exp.f64 x))","(+.f64 (*.f64 #s(literal 2 binary64) (cosh.f64 x)) #s(literal -2 binary64))","(+.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))) (neg.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))))))","(+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (cosh.f64 x)))","(+.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(+.f64 (exp.f64 x) (+.f64 #s(literal -2 binary64) (exp.f64 (neg.f64 x))))","(*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (+.f64 #s(literal 8 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64)))) (fma.f64 #s(literal -2 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) (exp.f64 x) #s(literal 4 binary64)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (exp.f64 x) #s(literal 4 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (+.f64 (pow.f64 (fma.f64 #s(literal 2 binary64) (exp.f64 x) #s(literal 4 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64)))) (fma.f64 (fma.f64 #s(literal 2 binary64) (exp.f64 x) #s(literal 4 binary64)) (-.f64 (fma.f64 #s(literal 2 binary64) (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) #s(literal 4 binary64))))","(*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))","(*.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) #s(literal -1 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))","(*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -2 binary64))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))))","(*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (*.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 #s(literal -2 binary64) (exp.f64 x))))))","(*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 16 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 4 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 64 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64))) (+.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 16 binary64)) (pow.f64 (exp.f64 x) #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 64 binary64)) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) #s(literal -1 binary64))) (+.f64 #s(literal 8 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 9 binary64)) #s(literal 512 binary64)) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) #s(literal -1 binary64))) (+.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 64 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64)))) (*.f64 (/.f64 #s(literal 4 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal 4 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64))))) (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal 4 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64)))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))) (*.f64 (/.f64 #s(literal 8 binary64) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 8 binary64) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))))) (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 8 binary64) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))))","(/.f64 (-.f64 #s(literal 4 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal -2 binary64) (exp.f64 x)))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 4 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 4 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal 4 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64))) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal 4 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 8 binary64) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal 8 binary64) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 8 binary64) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 8 binary64) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (neg.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -2 binary64))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (neg.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 9 binary64)) #s(literal 512 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 64 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64))) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 16 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 4 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 64 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 #s(literal 8 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64))) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 64 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 16 binary64)) (pow.f64 (exp.f64 x) #s(literal 4 binary64))) (-.f64 (exp.f64 x) #s(literal -2 binary64))))","(/.f64 (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -2 binary64)))","(/.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 4 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) #s(literal 8 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 16 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 4 binary64))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 9 binary64)) #s(literal 512 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 #s(literal -2 binary64) (exp.f64 x)))) (+.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 64 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 9 binary64)) #s(literal 512 binary64)) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) (+.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 64 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 64 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (+.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 16 binary64)) (pow.f64 (exp.f64 x) #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 64 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 #s(literal -2 binary64) (exp.f64 x)))) (+.f64 #s(literal 8 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 64 binary64)) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) (+.f64 #s(literal 8 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -2 binary64)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 #s(literal -2 binary64) (exp.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))))","(/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (+.f64 #s(literal 4 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) (exp.f64 x)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 #s(literal -2 binary64) (exp.f64 x)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 #s(literal -2 binary64) (exp.f64 x)))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))))","(neg.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal 2 binary64)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) (exp.f64 x) #s(literal 4 binary64)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (exp.f64 x) #s(literal 4 binary64))) (neg.f64 (/.f64 #s(literal 8 binary64) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (+.f64 (pow.f64 (fma.f64 #s(literal 2 binary64) (exp.f64 x) #s(literal 4 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64)))) (fma.f64 (fma.f64 #s(literal 2 binary64) (exp.f64 x) #s(literal 4 binary64)) (-.f64 (fma.f64 #s(literal 2 binary64) (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) #s(literal 4 binary64))) (neg.f64 (/.f64 #s(literal 8 binary64) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal 8 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64)))) (fma.f64 #s(literal -2 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (neg.f64 (/.f64 #s(literal 4 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64)))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (-.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (/.f64 #s(literal 4 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64)))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 3/2 binary64)) (/.f64 (pow.f64 (exp.f64 x) #s(literal 3/2 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (neg.f64 (/.f64 #s(literal 8 binary64) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (exp.f64 x) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (neg.f64 (/.f64 #s(literal 8 binary64) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 4 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64)))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 8 binary64) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))))","(fma.f64 (exp.f64 x) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (neg.f64 (/.f64 #s(literal 8 binary64) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))))","(fma.f64 (exp.f64 x) (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -2 binary64))) (neg.f64 (/.f64 #s(literal 4 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64)))))","(fma.f64 (exp.f64 x) #s(literal 1 binary64) #s(literal -2 binary64))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 #s(literal -2 binary64) (exp.f64 x))))) (/.f64 #s(literal 8 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 #s(literal -2 binary64) (exp.f64 x))))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal 4 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 8 binary64) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 (*.f64 (neg.f64 (log.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64))) (neg.f64 (/.f64 #s(literal 4 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64)))))","(+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (neg.f64 (/.f64 #s(literal 8 binary64) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))))","(+.f64 #s(literal -2 binary64) (exp.f64 x))","(+.f64 (exp.f64 x) #s(literal -2 binary64))","(*.f64 (exp.f64 x) #s(literal 1 binary64))","(/.f64 (neg.f64 (exp.f64 x)) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))","(/.f64 (exp.f64 x) #s(literal 1 binary64))","(exp.f64 x)","(*.f64 (pow.f64 (exp.f64 #s(literal -1 binary64)) (/.f64 x #s(literal 2 binary64))) (pow.f64 (exp.f64 #s(literal -1 binary64)) (/.f64 x #s(literal 2 binary64))))","(*.f64 (pow.f64 (exp.f64 x) #s(literal -1/2 binary64)) (pow.f64 (exp.f64 x) #s(literal -1/2 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (exp.f64 x)))","(*.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))","(*.f64 (exp.f64 (neg.f64 x)) #s(literal 1 binary64))","(pow.f64 (exp.f64 #s(literal -1 binary64)) x)","(pow.f64 (exp.f64 x) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (exp.f64 x)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (exp.f64 x))))","(/.f64 #s(literal 1 binary64) (exp.f64 x))","(neg.f64 (/.f64 #s(literal -1 binary64) (exp.f64 x)))","(exp.f64 (*.f64 (log.f64 (exp.f64 #s(literal -1 binary64))) x))","(exp.f64 (neg.f64 x))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":248.174072265625,"type":"rewrite"},{"compiler":[[6353,791]],"memory":[[-22024992,23617024]],"time":60.2451171875,"type":"eval"},{"alts":[["(fma.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -2 binary64))) (exp.f64 (neg.f64 x)))","fresh",60.18836660233727,"binary64"],["(fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64))","fresh",30.74148891950237,"binary64"],["(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x)) (*.f64 (exp.f64 x) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","next",30.68406575315987,"binary64"],["(/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))) (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64))))","fresh",30.61638944434054,"binary64"],["(-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (exp.f64 x)))","fresh",30.638055086290297,"binary64"],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","done",30.67130390982156,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","next",0.27397736393323374,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","next",0.32589984849379083,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","next",0.45588128993420624,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","next",0.831676380773911,"binary64"]],"compiler":[[18,13],[5,5],[20,9],[27,16],[9,7],[8,7],[27,19],[22,17],[17,13],[12,9],[18,13],[5,5],[20,9],[27,16],[9,7],[27,19],[22,17],[17,13],[12,9]],"count":[[257,10]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[256,9],"picked":[1,1]}],"memory":[[4635120,12970816]],"min-error":[[0.0078125,"binary64"]],"time":10.296875,"type":"prune"},{"egraph":[[0,8099,220,0.042295112],[8,6870,220,0.021016755],[7,4028,220,0.027307009],[6,1565,220,0.01808105],[5,599,220,0.007494776],[4,374,229,0.003243852],[3,246,229,0.001720236],[2,154,229,0.001062032],[1,88,229,0.00067792],[0,48,233,0.0005493],[0,30,235,0.000298949]],"inputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(pow.f64 x #s(literal 6 binary64))","x","#s(literal 6 binary64)","(fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64))","#s(literal 1/20160 binary64)","(*.f64 x x)","#s(literal 1/360 binary64)","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","(pow.f64 x #s(literal 4 binary64))","#s(literal 4 binary64)","#s(literal 1/12 binary64)","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","(*.f64 x x)","x","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","(pow.f64 x #s(literal 4 binary64))","x","#s(literal 4 binary64)","#s(literal 1/12 binary64)","(*.f64 x x)","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(pow.f64 x #s(literal 6 binary64))","x","#s(literal 6 binary64)","#s(literal 1/360 binary64)","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","(pow.f64 x #s(literal 4 binary64))","#s(literal 4 binary64)","#s(literal 1/12 binary64)","(*.f64 x x)","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x)) (*.f64 (exp.f64 x) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x))","#s(literal 1 binary64)","(/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 x)","x","#s(literal 2 binary64)","(*.f64 (exp.f64 x) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))))"]],"locations":[["(/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","cost-diff",0],["(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x))","cost-diff",1],["(*.f64 (exp.f64 x) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))))","cost-diff",2],["(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x)) (*.f64 (exp.f64 x) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","cost-diff",9],["(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","cost-diff",0],["(pow.f64 x #s(literal 6 binary64))","cost-diff",0],["(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","cost-diff",0],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","cost-diff",0],["(*.f64 x x)","cost-diff",0],["(pow.f64 x #s(literal 4 binary64))","cost-diff",0],["(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","cost-diff",0],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","cost-diff",0],["(*.f64 x x)","cost-diff",0],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","cost-diff",0],["(fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64))","cost-diff",0],["(pow.f64 x #s(literal 6 binary64))","cost-diff",0],["(fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","cost-diff",0],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","cost-diff",0]],"memory":[[-569280,23568880]],"method":["egg-herbie"],"outputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (fma.f64 (pow.f64 x #s(literal 7 binary64)) #s(literal 1/20160 binary64) x) x (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(fma.f64 (fma.f64 (pow.f64 x #s(literal 7 binary64)) #s(literal 1/20160 binary64) x) x (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))","(pow.f64 x #s(literal 6 binary64))","x","#s(literal 6 binary64)","(fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64))","(fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64))","#s(literal 1/20160 binary64)","(*.f64 x x)","#s(literal 1/360 binary64)","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","(fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))","(pow.f64 x #s(literal 4 binary64))","#s(literal 4 binary64)","#s(literal 1/12 binary64)","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","(*.f64 x x)","x","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","(fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))","(pow.f64 x #s(literal 4 binary64))","x","#s(literal 4 binary64)","#s(literal 1/12 binary64)","(*.f64 x x)","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(pow.f64 x #s(literal 6 binary64))","x","#s(literal 6 binary64)","#s(literal 1/360 binary64)","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","(fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))","(pow.f64 x #s(literal 4 binary64))","#s(literal 4 binary64)","#s(literal 1/12 binary64)","(*.f64 x x)","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x)) (*.f64 (exp.f64 x) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(-.f64 (exp.f64 (neg.f64 x)) (-.f64 #s(literal 2 binary64) (exp.f64 x)))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x))","(-.f64 (exp.f64 x) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))))","#s(literal 1 binary64)","(/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 x)","x","#s(literal 2 binary64)","(*.f64 (exp.f64 x) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 2 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":185.552978515625,"type":"simplify"},{"compiler":[[202,31]],"locations":[["(/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","accuracy",0.01171875],["(*.f64 (exp.f64 x) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))))","accuracy",0.0234375],["(-.f64 (exp.f64 x) #s(literal 2 binary64))","accuracy",0.03125],["(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x))","accuracy",30.687536933835897],["(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","accuracy",0.00390625],["(pow.f64 x #s(literal 6 binary64))","accuracy",0.00390625],["(pow.f64 x #s(literal 4 binary64))","accuracy",0.00390625],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","accuracy",0.32199359849379083],["(*.f64 x x)","accuracy",0.0],["(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","accuracy",0.00390625],["(pow.f64 x #s(literal 4 binary64))","accuracy",0.00390625],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","accuracy",0.45197503993420624],["(*.f64 x x)","accuracy",0.0],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","accuracy",0.831676380773911],["(fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64))","accuracy",0.00390625],["(pow.f64 x #s(literal 6 binary64))","accuracy",0.00390625],["(pow.f64 x #s(literal 4 binary64))","accuracy",0.00390625],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","accuracy",0.26616486393323374]],"memory":[[-1805248,56013072]],"mixsample":[[18.081298828125,"adjust",800],[7.35546875,"ival-div",0],[6.4560546875,"ival-exp",0],[1.1845703125,"ival-sub",1600],[2.3603515625,"ival-div",400],[2.055908203125,"ival-div",1600],[0.166748046875,"ival-assert",0],[1.583740234375,"ival-sub",0],[19.802001953125,"ival-exp",400],[1.5595703125,"ival-sub",400],[14.19287109375,"const",0],[11.92578125,"adjust",2000],[7.246337890625,"ival-pow",0],[0.02783203125,"ival-mult",800],[16.14990234375,"ival-add",0],[0.02294921875,"ival-sub",800],[1.70751953125,"ival-mult",400],[18.710693359375,"ival-mult",0],[0.27734375,"ival-exp",800],[1.297119140625,"ival-mult",1600],[0.033203125,"ival-div",800],[0.268310546875,"ival-true",0],[41.079345703125,"ival-exp",1600],[0.642822265625,"exact",0],[1.133056640625,"ival-neg",0]],"outcomes":[[42.525390625,1,"valid",70],[180.75390625,2,"valid",180],[1.74609375,0,"valid",6]],"time":259.634033203125,"type":"localize"},{"count":[[16,40]],"inputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(pow.f64 x #s(literal 6 binary64))","(fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","(*.f64 x x)","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","(pow.f64 x #s(literal 4 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x)) (*.f64 (exp.f64 x) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(*.f64 (exp.f64 x) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x))","(/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(-.f64 (exp.f64 x) #s(literal 2 binary64))"]],"memory":[[5872272,5872272]],"outputs":[["(pow x 2)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","(pow x 6)","1/360","(+ 1/360 (* 1/20160 (pow x 2)))","(pow x 4)","-1","(- (* -2 x) 1)","(- (* x (- (* -3 x) 2)) 1)","(- (* x (- (* x (- (* -13/3 x) 3)) 2)) 1)","(* -1 (pow x 2))","(* (pow x 2) (- (* -2 x) 1))","(* (pow x 2) (- (* x (- (* -37/12 x) 2)) 1))","(* (pow x 2) (- (* x (- (* x (- (* -9/2 x) 37/12)) 2)) 1))","(- (* -1 x) 1)","(- (* x (- (* -3/2 x) 1)) 1)","(- (* x (- (* x (- (* -13/6 x) 3/2)) 1)) 1)","(- x 1)","(- (* x (+ 1 (* 1/2 x))) 1)","(- (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))) 1)","(- (+ (exp x) (exp (neg x))) 2)","(* 1/20160 (pow x 8))","(* (pow x 8) (+ 1/20160 (* 1/360 (/ 1 (pow x 2)))))","(* (pow x 8) (+ 1/20160 (+ (/ 1/12 (pow x 4)) (* 1/360 (/ 1 (pow x 2))))))","(* (pow x 8) (+ 1/20160 (+ (/ 1/12 (pow x 4)) (+ (* 1/360 (/ 1 (pow x 2))) (/ 1 (pow x 6))))))","(* 1/20160 (pow x 2))","(* (pow x 2) (+ 1/20160 (* 1/360 (/ 1 (pow x 2)))))","(* 1/12 (pow x 4))","(* (pow x 4) (+ 1/12 (/ 1 (pow x 2))))","(* 1/360 (pow x 6))","(* (pow x 6) (+ 1/360 (* 1/12 (/ 1 (pow x 2)))))","(* (pow x 6) (+ 1/360 (+ (* 1/12 (/ 1 (pow x 2))) (/ 1 (pow x 4)))))","(/ (* (+ (exp x) (/ 1 (- (exp x) 2))) (- (exp x) 2)) (exp x))","(/ (exp x) (- (exp x) 2))","(+ (exp x) (/ 1 (- (exp x) 2)))","(/ 1 (- (exp x) 2))","(- (exp x) 2)","(- (+ (exp x) (exp (* -1 x))) 2)"]],"series":[[4.91015625,"((+ (- (exp x) 2) (exp (neg x))) (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (pow x 6) (+ (* 1/20160 (* x x)) 1/360) (+ (- (exp x) 2) (exp (neg x))) (* x x) (+ (- (exp x) 2) (exp (neg x))) (+ (* (pow x 4) 1/12) (* x x)) (pow x 4) (+ (- (exp x) 2) (exp (neg x))) (+ (* (pow x 6) 1/360) (+ (* (pow x 4) 1/12) (* x x))) (/ (+ (* 1 (/ 1 (- (exp x) 2))) (exp x)) (* (exp x) (/ 1 (- (exp x) 2)))) (* (exp x) (/ 1 (- (exp x) 2))) (+ (* 1 (/ 1 (- (exp x) 2))) (exp x)) (/ 1 (- (exp x) 2)) (- (exp x) 2))","x","-inf"],[3.942138671875,"((+ (- (exp x) 2) (exp (neg x))) (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (pow x 6) (+ (* 1/20160 (* x x)) 1/360) (+ (- (exp x) 2) (exp (neg x))) (* x x) (+ (- (exp x) 2) (exp (neg x))) (+ (* (pow x 4) 1/12) (* x x)) (pow x 4) (+ (- (exp x) 2) (exp (neg x))) (+ (* (pow x 6) 1/360) (+ (* (pow x 4) 1/12) (* x x))) (/ (+ (* 1 (/ 1 (- (exp x) 2))) (exp x)) (* (exp x) (/ 1 (- (exp x) 2)))) (* (exp x) (/ 1 (- (exp x) 2))) (+ (* 1 (/ 1 (- (exp x) 2))) (exp x)) (/ 1 (- (exp x) 2)) (- (exp x) 2))","x","inf"],[2.4609375,"((+ (- (exp x) 2) (exp (neg x))) (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (pow x 6) (+ (* 1/20160 (* x x)) 1/360) (+ (- (exp x) 2) (exp (neg x))) (* x x) (+ (- (exp x) 2) (exp (neg x))) (+ (* (pow x 4) 1/12) (* x x)) (pow x 4) (+ (- (exp x) 2) (exp (neg x))) (+ (* (pow x 6) 1/360) (+ (* (pow x 4) 1/12) (* x x))) (/ (+ (* 1 (/ 1 (- (exp x) 2))) (exp x)) (* (exp x) (/ 1 (- (exp x) 2)))) (* (exp x) (/ 1 (- (exp x) 2))) (+ (* 1 (/ 1 (- (exp x) 2))) (exp x)) (/ 1 (- (exp x) 2)) (- (exp x) 2))","x","0"]],"time":12.280029296875,"type":"series"},{"count":[[40,40]],"egraph":[[0,8381,304,0.091867375],[5,6523,344,0.022442803],[4,3611,346,0.020858995],[3,2145,346,0.013404651],[2,754,346,0.008270801],[1,330,357,0.002272629],[0,130,357,0.001160714]],"inputs":[["(pow x 2)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","(pow x 6)","1/360","(+ 1/360 (* 1/20160 (pow x 2)))","(pow x 4)","-1","(- (* -2 x) 1)","(- (* x (- (* -3 x) 2)) 1)","(- (* x (- (* x (- (* -13/3 x) 3)) 2)) 1)","(* -1 (pow x 2))","(* (pow x 2) (- (* -2 x) 1))","(* (pow x 2) (- (* x (- (* -37/12 x) 2)) 1))","(* (pow x 2) (- (* x (- (* x (- (* -9/2 x) 37/12)) 2)) 1))","(- (* -1 x) 1)","(- (* x (- (* -3/2 x) 1)) 1)","(- (* x (- (* x (- (* -13/6 x) 3/2)) 1)) 1)","(- x 1)","(- (* x (+ 1 (* 1/2 x))) 1)","(- (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))) 1)","(- (+ (exp x) (exp (neg x))) 2)","(* 1/20160 (pow x 8))","(* (pow x 8) (+ 1/20160 (* 1/360 (/ 1 (pow x 2)))))","(* (pow x 8) (+ 1/20160 (+ (/ 1/12 (pow x 4)) (* 1/360 (/ 1 (pow x 2))))))","(* (pow x 8) (+ 1/20160 (+ (/ 1/12 (pow x 4)) (+ (* 1/360 (/ 1 (pow x 2))) (/ 1 (pow x 6))))))","(* 1/20160 (pow x 2))","(* (pow x 2) (+ 1/20160 (* 1/360 (/ 1 (pow x 2)))))","(* 1/12 (pow x 4))","(* (pow x 4) (+ 1/12 (/ 1 (pow x 2))))","(* 1/360 (pow x 6))","(* (pow x 6) (+ 1/360 (* 1/12 (/ 1 (pow x 2)))))","(* (pow x 6) (+ 1/360 (+ (* 1/12 (/ 1 (pow x 2))) (/ 1 (pow x 4)))))","(/ (* (+ (exp x) (/ 1 (- (exp x) 2))) (- (exp x) 2)) (exp x))","(/ (exp x) (- (exp x) 2))","(+ (exp x) (/ 1 (- (exp x) 2)))","(/ 1 (- (exp x) 2))","(- (exp x) 2)","(- (+ (exp x) (exp (* -1 x))) 2)"]],"memory":[[-2379552,40432624]],"method":["egg-herbie"],"outputs":[["(pow x 2)","(*.f64 x x)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","(fma.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)))","(pow x 6)","(pow.f64 x #s(literal 6 binary64))","1/360","#s(literal 1/360 binary64)","(+ 1/360 (* 1/20160 (pow x 2)))","(fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64))","(pow x 4)","(pow.f64 x #s(literal 4 binary64))","-1","#s(literal -1 binary64)","(- (* -2 x) 1)","(fma.f64 #s(literal -2 binary64) x #s(literal -1 binary64))","(- (* x (- (* -3 x) 2)) 1)","(fma.f64 (fma.f64 #s(literal -3 binary64) x #s(literal -2 binary64)) x #s(literal -1 binary64))","(- (* x (- (* x (- (* -13/3 x) 3)) 2)) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal -13/3 binary64) x #s(literal -3 binary64)) x #s(literal -2 binary64)) x #s(literal -1 binary64))","(* -1 (pow x 2))","(*.f64 (neg.f64 x) x)","(* (pow x 2) (- (* -2 x) 1))","(*.f64 (*.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -1 binary64)) x) x)","(* (pow x 2) (- (* x (- (* -37/12 x) 2)) 1))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -37/12 binary64) x #s(literal -2 binary64)) x #s(literal -1 binary64)) x) x)","(* (pow x 2) (- (* x (- (* x (- (* -9/2 x) 37/12)) 2)) 1))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -9/2 binary64) x #s(literal -37/12 binary64)) x #s(literal -2 binary64)) x #s(literal -1 binary64)) x) x)","(- (* -1 x) 1)","(-.f64 #s(literal -1 binary64) x)","(- (* x (- (* -3/2 x) 1)) 1)","(fma.f64 (fma.f64 #s(literal -3/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(- (* x (- (* x (- (* -13/6 x) 3/2)) 1)) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal -13/6 binary64) x #s(literal -3/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(- x 1)","(-.f64 x #s(literal 1 binary64))","(- (* x (+ 1 (* 1/2 x))) 1)","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64))","(- (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64))","(- (+ (exp x) (exp (neg x))) 2)","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))","(* 1/20160 (pow x 8))","(*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))","(* (pow x 8) (+ 1/20160 (* 1/360 (/ 1 (pow x 2)))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)))","(* (pow x 8) (+ 1/20160 (+ (/ 1/12 (pow x 4)) (* 1/360 (/ 1 (pow x 2))))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))))","(* (pow x 8) (+ 1/20160 (+ (/ 1/12 (pow x 4)) (+ (* 1/360 (/ 1 (pow x 2))) (/ 1 (pow x 6))))))","(fma.f64 x x (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)))))","(* 1/20160 (pow x 2))","(*.f64 #s(literal 1/20160 binary64) (*.f64 x x))","(* (pow x 2) (+ 1/20160 (* 1/360 (/ 1 (pow x 2)))))","(fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64))","(* 1/12 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64))","(* (pow x 4) (+ 1/12 (/ 1 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","(* 1/360 (pow x 6))","(*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64))","(* (pow x 6) (+ 1/360 (* 1/12 (/ 1 (pow x 2)))))","(*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)))","(* (pow x 6) (+ 1/360 (+ (* 1/12 (/ 1 (pow x 2))) (/ 1 (pow x 4)))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x))","(/ (* (+ (exp x) (/ 1 (- (exp x) 2))) (- (exp x) 2)) (exp x))","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))","(/ (exp x) (- (exp x) 2))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(+ (exp x) (/ 1 (- (exp x) 2)))","(+.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x))","(/ 1 (- (exp x) 2))","(/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(- (exp x) 2)","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(- (+ (exp x) (exp (* -1 x))) 2)","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))"]],"stop":[["iter limit",1],["node limit",1]],"time":277.01708984375,"type":"simplify"},{"count":[[16,623]],"egraph":[[0,8094,166,0.084464213],[2,1531,166,0.034996799],[1,203,175,0.005279169],[0,48,175,0.001591846],[0,30,181,0.000296946]],"inputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(pow.f64 x #s(literal 6 binary64))","(fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","(*.f64 x x)","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","(pow.f64 x #s(literal 4 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x)) (*.f64 (exp.f64 x) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(*.f64 (exp.f64 x) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x))","(/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(-.f64 (exp.f64 x) #s(literal 2 binary64))"]],"memory":[[632304,69843040]],"outputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))))","(*.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 12 binary64))) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 2 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (-.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 18 binary64)) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 12 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64)))))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (-.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))) (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 12 binary64))) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 12 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64)))))) (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 18 binary64)) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64))) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))))","(/.f64 (+.f64 (pow.f64 (+.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64))) (fma.f64 (+.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))) (+.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (+.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))))","(/.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 3 binary64)) #s(literal 1/8193540096000 binary64) (pow.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 (fma.f64 x x (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64)))) #s(literal 3 binary64))) (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (*.f64 (fma.f64 x x (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 x x (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 x x (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64))))))))","(/.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))) #s(literal 2 binary64)) (*.f64 (*.f64 x x) (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 (-.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 x x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 12 binary64))))) (neg.f64 (-.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (+.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 x x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 12 binary64))) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (-.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 18 binary64)) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 12 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64)))))))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 12 binary64))) (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (-.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (-.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 2 binary64)))) (*.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (-.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))) (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (-.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (pow.f64 x #s(literal 6 binary64))) (-.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (-.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (pow.f64 x #s(literal 6 binary64))) (neg.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (neg.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (neg.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (pow.f64 x #s(literal 6 binary64))) (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (pow.f64 x #s(literal 6 binary64))) (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64)))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64)))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (pow.f64 x #s(literal 6 binary64))) (/.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (/.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (pow.f64 x #s(literal 6 binary64))) (/.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (/.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (pow.f64 x #s(literal 6 binary64))) (-.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (-.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (pow.f64 x #s(literal 6 binary64))) (neg.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (neg.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (neg.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (pow.f64 x #s(literal 6 binary64))) (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (pow.f64 x #s(literal 6 binary64))) (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64)))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64)))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (pow.f64 x #s(literal 6 binary64))) (/.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (/.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (pow.f64 x #s(literal 6 binary64))) (/.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (/.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))) (-.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (-.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))) (neg.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (neg.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (neg.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))) (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))) (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64)))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))) (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64)))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))) (/.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (/.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))) (/.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (/.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))) (-.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (-.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))) (neg.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (neg.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (neg.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))) (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))) (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64)))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))) (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64)))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))) (/.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (/.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))) (/.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (/.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))) (-.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)))))) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (-.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))) (neg.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))))) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))) (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))) (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64)))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))) (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64)))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))) (/.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal 1 binary64))) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (/.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))) (/.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal 1 binary64))) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (/.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 3 binary64)) #s(literal 1/8193540096000 binary64) (*.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64))) (-.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)))))) (*.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (-.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 3 binary64)) #s(literal 1/8193540096000 binary64) (*.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64))) (neg.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (neg.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))))) (*.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (neg.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 3 binary64)) #s(literal 1/8193540096000 binary64) (*.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64))) (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 3 binary64)) #s(literal 1/8193540096000 binary64) (*.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 3 binary64)) #s(literal 1/8193540096000 binary64) (*.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64))) (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64)))))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 3 binary64)) #s(literal 1/8193540096000 binary64) (*.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64))) (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64)))))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 3 binary64)) #s(literal 1/8193540096000 binary64) (*.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64))) (/.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) #s(literal 1 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (/.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 3 binary64)) #s(literal 1/8193540096000 binary64) (*.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64))) (/.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) #s(literal 1 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (/.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (*.f64 (-.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (-.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (*.f64 (-.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (-.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (*.f64 (-.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))))) (*.f64 (-.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (*.f64 (-.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))))) (*.f64 (-.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)))) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (-.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))))) (*.f64 (-.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)))) (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (-.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 (pow.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 3 binary64)) #s(literal 1/8193540096000 binary64) (*.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64))))) (*.f64 (-.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (*.f64 (neg.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (neg.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (*.f64 (neg.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (neg.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (*.f64 (neg.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))))) (*.f64 (neg.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (*.f64 (neg.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))))) (*.f64 (neg.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (neg.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))) (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))))) (*.f64 (neg.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))) (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (neg.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))) (fma.f64 (pow.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 3 binary64)) #s(literal 1/8193540096000 binary64) (*.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64))))) (*.f64 (neg.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))) (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (*.f64 (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64)))))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (*.f64 (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64)))))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (*.f64 (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))))) (*.f64 (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64)))))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (*.f64 (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))))) (*.f64 (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64)))))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64)))))) (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))))) (*.f64 (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64)))))) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64)))))) (fma.f64 (pow.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 3 binary64)) #s(literal 1/8193540096000 binary64) (*.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64))))) (*.f64 (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64)))))) (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))))","(/.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (*.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))))) (*.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (*.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))))) (*.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))))) (*.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))) (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (fma.f64 (pow.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 3 binary64)) #s(literal 1/8193540096000 binary64) (*.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64))))) (*.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))))) (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))))) (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))))) (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 (pow.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 3 binary64)) #s(literal 1/8193540096000 binary64) (*.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64))))) (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (*.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (*.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (*.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))))) (*.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (*.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))))) (*.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))))) (*.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 (pow.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 3 binary64)) #s(literal 1/8193540096000 binary64) (*.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64))))) (*.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (*.f64 (/.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (/.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (*.f64 (/.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (/.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (*.f64 (/.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))))) (*.f64 (/.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (*.f64 (/.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))))) (*.f64 (/.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (/.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))))) (*.f64 (/.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (/.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 (pow.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 3 binary64)) #s(literal 1/8193540096000 binary64) (*.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64))))) (*.f64 (/.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))) (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (*.f64 (/.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (/.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (*.f64 (/.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (/.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (*.f64 (/.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))))) (*.f64 (/.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (*.f64 (/.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))))) (*.f64 (/.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (/.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))))) (*.f64 (/.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (/.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (pow.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 3 binary64)) #s(literal 1/8193540096000 binary64) (*.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64))))) (*.f64 (/.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 x x)))","(/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 12 binary64)))) (-.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64)))))","(/.f64 (+.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) (+.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 x x)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 12 binary64))) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (-.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 18 binary64)) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 12 binary64))) (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 18 binary64)) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 12 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64))))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 12 binary64))) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (-.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 18 binary64)) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 12 binary64))) (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 18 binary64)) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 3 binary64))) (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 12 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (-.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))) (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 12 binary64))) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 12 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64)))))) (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 18 binary64)) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (-.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))) (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 12 binary64))) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 12 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64)))))) (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 18 binary64)) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 3 binary64)))))","(fma.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 x x)) (*.f64 x x) (fma.f64 x x (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64)))))","(fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (*.f64 #s(literal 1/20160 binary64) x)) x (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))","(fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/20160 binary64)) (*.f64 x x) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))","(fma.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(fma.f64 (*.f64 (*.f64 (*.f64 x x) #s(literal 1/20160 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))","(fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))","(fma.f64 (*.f64 #s(literal 1/20160 binary64) x) (*.f64 x (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (*.f64 x x) #s(literal 1/20160 binary64))) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(fma.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) #s(literal -1 binary64)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64))))","(fma.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) #s(literal -1 binary64)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64))))","(fma.f64 (*.f64 (*.f64 x x) #s(literal 1/20160 binary64)) (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))","(fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64)))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (fma.f64 x x (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64)))))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(fma.f64 (*.f64 x x) (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (fma.f64 x x (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64)))))","(fma.f64 (*.f64 x x) (*.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))","(fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 8 binary64)) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) (*.f64 (*.f64 x x) #s(literal 1/20160 binary64)) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(fma.f64 x x (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))) #s(literal 2 binary64)) (-.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 x x))) (/.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 x x))))","(-.f64 (/.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64))))) (/.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 12 binary64))) (-.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64))))))","(-.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 12 binary64))) (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (-.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))) (/.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (-.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))))","(+.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))))","(+.f64 (+.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))","(+.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 x x))","(+.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))","(+.f64 (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 x x (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64)))))","(+.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(+.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64))))","(+.f64 (*.f64 x x) (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))","(*.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))","(*.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))","(*.f64 (*.f64 x x) (pow.f64 x #s(literal 4 binary64)))","(pow.f64 (exp.f64 #s(literal 6 binary64)) (log.f64 x))","(pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 3/2 binary64))","(pow.f64 (*.f64 x x) #s(literal 3 binary64))","(pow.f64 x #s(literal 6 binary64))","(exp.f64 (fma.f64 (log.f64 x) #s(literal 3 binary64) (*.f64 (log.f64 x) #s(literal 3 binary64))))","(exp.f64 (fma.f64 (log.f64 x) #s(literal 4 binary64) (*.f64 (log.f64 x) #s(literal 2 binary64))))","(exp.f64 (fma.f64 (log.f64 x) #s(literal 2 binary64) (*.f64 (log.f64 x) #s(literal 4 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 3 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal 6 binary64)))","(*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (pow.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 1/129600 binary64) (*.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (-.f64 #s(literal 1/360 binary64) (*.f64 (*.f64 x x) #s(literal 1/20160 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) #s(literal 1/129600 binary64))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (-.f64 #s(literal 1/129600 binary64) (*.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 #s(literal 1/360 binary64) (*.f64 (*.f64 x x) #s(literal 1/20160 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))) (neg.f64 (+.f64 #s(literal 1/129600 binary64) (-.f64 (*.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))) (neg.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)))","(/.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (+.f64 #s(literal 1/129600 binary64) (-.f64 (*.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))))","(/.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))))","(fma.f64 (*.f64 #s(literal 1/20160 binary64) x) x #s(literal 1/360 binary64))","(fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64))","(fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64))","(fma.f64 x (*.f64 #s(literal 1/20160 binary64) x) #s(literal 1/360 binary64))","(-.f64 (/.f64 #s(literal 1/129600 binary64) (-.f64 #s(literal 1/360 binary64) (*.f64 (*.f64 x x) #s(literal 1/20160 binary64)))) (/.f64 (*.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal 1/360 binary64) (*.f64 (*.f64 x x) #s(literal 1/20160 binary64)))))","(-.f64 (/.f64 (*.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))) (/.f64 #s(literal 1/129600 binary64) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(+.f64 (*.f64 (*.f64 x x) #s(literal 1/20160 binary64)) #s(literal 1/360 binary64))","(+.f64 #s(literal 1/360 binary64) (*.f64 (*.f64 x x) #s(literal 1/20160 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","(*.f64 x x)","(pow.f64 (*.f64 x x) #s(literal 1 binary64))","(pow.f64 x #s(literal 2 binary64))","(exp.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(*.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))))) (neg.f64 (-.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)))) (-.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64)))))))","(/.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))))","(fma.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 x x)) (*.f64 x x) (*.f64 x x))","(fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","(fma.f64 (*.f64 x x) (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x))","(fma.f64 x x (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))))","(-.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) (/.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (-.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))))))","(-.f64 (/.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))) (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))))","(+.f64 (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 x x))","(+.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (pow.f64 x #s(literal 3 binary64)) x)","(*.f64 (*.f64 x x) (*.f64 x x))","(*.f64 x (pow.f64 x #s(literal 3 binary64)))","(pow.f64 (exp.f64 #s(literal 4 binary64)) (log.f64 x))","(pow.f64 (*.f64 x x) #s(literal 2 binary64))","(pow.f64 x #s(literal 4 binary64))","(exp.f64 (fma.f64 (log.f64 x) #s(literal 2 binary64) (*.f64 (log.f64 x) #s(literal 2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal 4 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))","(*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 2 binary64))) (pow.f64 (-.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (*.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (*.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64))) (fma.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 (fma.f64 x x (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal 3 binary64))) (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (*.f64 (fma.f64 x x (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 x x (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 x x (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))))","(/.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal 2 binary64)) (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 (-.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 x x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)))) (neg.f64 (-.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 x x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (*.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (-.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))) (*.f64 (-.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 2 binary64)))) (*.f64 (-.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (-.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 x x)))","(/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))) (-.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))","(/.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) (+.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 x x)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (*.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 2 binary64))) (-.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 3 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (*.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (*.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (*.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 3 binary64)))))","(fma.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 x x)) (*.f64 x x) (fma.f64 x x (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))","(fma.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/360 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(fma.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) #s(literal -1 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))","(fma.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) #s(literal -1 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))","(fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (fma.f64 x x (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))","(fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(fma.f64 (*.f64 x x) (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (fma.f64 x x (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(fma.f64 x x (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))","(-.f64 (/.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal 2 binary64)) (-.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 x x))) (/.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 x x))))","(-.f64 (/.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))) (/.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (-.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))","(-.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (-.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))) (/.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))))","(+.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))))","(+.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 x x))","(+.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(+.f64 (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 x x (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))","(+.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))","(+.f64 (*.f64 x x) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))","(*.f64 (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (/.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (pow.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (/.f64 (exp.f64 x) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) #s(literal -1 binary64))) (/.f64 (exp.f64 (neg.f64 x)) (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) #s(literal -1 binary64))) (/.f64 (exp.f64 (neg.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(*.f64 (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (/.f64 (exp.f64 (neg.f64 x)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) #s(literal -1 binary64)) (/.f64 (exp.f64 (neg.f64 x)) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (fma.f64 (exp.f64 x) (-.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64))) (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 2 binary64)))) (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (fma.f64 (exp.f64 x) (-.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (/.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (/.f64 (pow.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) #s(literal -1 binary64)) (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (/.f64 (exp.f64 x) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (/.f64 (pow.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64))) (/.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (-.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64))) #s(literal -1 binary64)) (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64))) (/.f64 (exp.f64 x) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (-.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64))) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(*.f64 (/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64))) (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (-.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (neg.f64 (exp.f64 x))))","(*.f64 (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) #s(literal 1 binary64)) (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)))","(*.f64 (/.f64 #s(literal -1 binary64) (exp.f64 x)) (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x)) (/.f64 (pow.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) #s(literal -1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64))) (exp.f64 x)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (-.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (/.f64 (pow.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) #s(literal -1 binary64)) (exp.f64 x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (-.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64))) #s(literal -1 binary64)) (exp.f64 x)))","(*.f64 (/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (-.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64))) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(*.f64 (pow.f64 (/.f64 (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (-.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x)) #s(literal -1 binary64)) (neg.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(*.f64 (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (/.f64 (exp.f64 (neg.f64 x)) #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (exp.f64 (neg.f64 x)))","(*.f64 (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (pow.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) (pow.f64 (pow.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)))","(*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))) (pow.f64 (/.f64 (neg.f64 (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)))","(*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x)))","(*.f64 #s(literal 1 binary64) (+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))","(*.f64 (+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))))","(*.f64 (+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) #s(literal 1 binary64))","(*.f64 (exp.f64 (neg.f64 x)) (pow.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))) #s(literal -1 binary64)))","(*.f64 (exp.f64 (neg.f64 x)) (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))))","(pow.f64 (/.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 3 binary64)) #s(literal -8 binary64)) (fma.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (-.f64 #s(literal 4 binary64) (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal -2 binary64)))))","(/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal -2 binary64) (exp.f64 (neg.f64 x))) #s(literal 3 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (*.f64 (+.f64 #s(literal -2 binary64) (exp.f64 (neg.f64 x))) (+.f64 #s(literal -2 binary64) (exp.f64 (neg.f64 x)))) (*.f64 (exp.f64 x) (+.f64 #s(literal -2 binary64) (exp.f64 (neg.f64 x)))))))","(/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (neg.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x)))) #s(literal 3 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (*.f64 (neg.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x)))) (neg.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))) (*.f64 (exp.f64 x) (neg.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))))))","(/.f64 (neg.f64 (/.f64 (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x)) #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))))","(/.f64 (neg.f64 (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)))) (neg.f64 (exp.f64 x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)))) (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64))) (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)))) (neg.f64 (fma.f64 (exp.f64 x) (-.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) #s(literal 1 binary64))) (/.f64 (neg.f64 (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x)))) (neg.f64 (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))))) (neg.f64 (neg.f64 (/.f64 (neg.f64 (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (exp.f64 x) (-.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64))) (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)))) (neg.f64 (+.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)) (*.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))))) (neg.f64 (neg.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (exp.f64 x) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 1 binary64)))) (neg.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (exp.f64 x))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))))) (neg.f64 (*.f64 (exp.f64 x) (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (*.f64 (exp.f64 x) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))))) (neg.f64 (*.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))))","(/.f64 (neg.f64 (+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) (*.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))) (*.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (exp.f64 x)) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (exp.f64 x) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x)))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (exp.f64 x)) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) #s(literal -1 binary64))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (exp.f64 x) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (exp.f64 x)))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (neg.f64 (exp.f64 x)) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (exp.f64 x) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x)))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (neg.f64 (exp.f64 x)) (*.f64 (*.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (exp.f64 x) (*.f64 (*.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x)))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (neg.f64 (exp.f64 x)) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (neg.f64 (exp.f64 x)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) #s(literal -1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (exp.f64 x)))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (neg.f64 (exp.f64 x)) (*.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x) (*.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (exp.f64 x)))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (neg.f64 (exp.f64 x)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal -1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))) (neg.f64 (exp.f64 x)) #s(literal 1 binary64)) (*.f64 #s(literal -1 binary64) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))) (/.f64 (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1 binary64) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal -1 binary64) (exp.f64 x)))","(/.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (exp.f64 x)) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (exp.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64)) (exp.f64 x))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (+.f64 (exp.f64 x) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (exp.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (+.f64 (exp.f64 x) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (exp.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)) (*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))) (/.f64 (neg.f64 (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (exp.f64 x)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))))) (*.f64 (neg.f64 (exp.f64 x)) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (*.f64 (neg.f64 (exp.f64 x)) (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))))) (*.f64 (neg.f64 (exp.f64 x)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64)) (*.f64 (neg.f64 (exp.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (neg.f64 (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal -2 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (exp.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (neg.f64 (exp.f64 x)) (*.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (exp.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (neg.f64 (exp.f64 x)) (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (*.f64 (neg.f64 (exp.f64 x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (neg.f64 (exp.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (*.f64 (neg.f64 (exp.f64 x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (neg.f64 (exp.f64 x)) (*.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (*.f64 (neg.f64 (exp.f64 x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (neg.f64 (exp.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(/.f64 (+.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (exp.f64 x)) (neg.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))))) (*.f64 (neg.f64 (exp.f64 x)) #s(literal -1 binary64)))","(/.f64 (+.f64 #s(literal -1 binary64) (*.f64 (neg.f64 (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))) (*.f64 (neg.f64 (exp.f64 x)) #s(literal 1 binary64)))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (*.f64 (neg.f64 (exp.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (exp.f64 x)) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (*.f64 (neg.f64 (exp.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (exp.f64 x)) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 (exp.f64 x)) #s(literal 1 binary64))) (/.f64 (neg.f64 (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(/.f64 (+.f64 #s(literal -1 binary64) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (neg.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (+.f64 #s(literal 1 binary64) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))))","(/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (exp.f64 x) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))))) (*.f64 (exp.f64 x) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (*.f64 (exp.f64 x) (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))))) (*.f64 (exp.f64 x) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64)) (*.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (exp.f64 x) (*.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (*.f64 (exp.f64 x) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (*.f64 (exp.f64 x) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (exp.f64 x) (*.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (*.f64 (exp.f64 x) (neg.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))))) (*.f64 (exp.f64 x) #s(literal -1 binary64)))","(/.f64 (+.f64 #s(literal 1 binary64) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 2 binary64)))) (exp.f64 x))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (exp.f64 x)) (*.f64 (exp.f64 x) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (exp.f64 x)) (*.f64 (exp.f64 x) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))))","(/.f64 (/.f64 (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x)) #s(literal 1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)))","(/.f64 (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (exp.f64 x))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)))","(/.f64 (*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64))) (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x))) (fma.f64 (exp.f64 x) (-.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) #s(literal 1 binary64)) (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64))) (+.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 3 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)) (*.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))) (neg.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (neg.f64 (*.f64 (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64)))) (neg.f64 (*.f64 (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (fma.f64 (exp.f64 x) (-.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)))) (neg.f64 (/.f64 (neg.f64 (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (-.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64))) (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (exp.f64 x) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (exp.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (exp.f64 x) (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (*.f64 (exp.f64 x) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(/.f64 (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))))","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))","(/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64))) (*.f64 (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (fma.f64 (exp.f64 x) (-.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)))))","(/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)))))","(/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))) (fma.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))) (/.f64 (neg.f64 (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64))))","(/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64)))","(/.f64 (+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) #s(literal 1 binary64))","(neg.f64 (*.f64 #s(literal -1 binary64) (+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))","(neg.f64 (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (/.f64 (neg.f64 (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (pow.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 x)))","(fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 x)))","(fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64) (exp.f64 (neg.f64 x)))","(fma.f64 (exp.f64 x) #s(literal 1 binary64) (+.f64 #s(literal -2 binary64) (exp.f64 (neg.f64 x))))","(fma.f64 (exp.f64 x) #s(literal 1 binary64) (neg.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x)))))","(fma.f64 #s(literal 1 binary64) (exp.f64 x) (+.f64 #s(literal -2 binary64) (exp.f64 (neg.f64 x))))","(fma.f64 #s(literal 1 binary64) (exp.f64 x) (neg.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x)))))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(fma.f64 (exp.f64 (neg.f64 x)) #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(-.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (*.f64 (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)))))","(-.f64 (/.f64 #s(literal 0 binary64) (/.f64 (neg.f64 (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))) (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (/.f64 (neg.f64 (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(-.f64 (/.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))) (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 2 binary64)))) (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))) (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))) (/.f64 (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)) (+.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)) (*.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))))) (/.f64 (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)) (*.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))))))","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))","(-.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))","(-.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal -2 binary64))","(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(+.f64 (exp.f64 x) (+.f64 #s(literal -2 binary64) (exp.f64 (neg.f64 x))))","(+.f64 (exp.f64 x) (neg.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x)))))","(+.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(*.f64 (/.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))))","(*.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (pow.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (+.f64 (exp.f64 x) #s(literal 2 binary64)))","(*.f64 (/.f64 (exp.f64 x) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (exp.f64 x) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))","(*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (/.f64 (exp.f64 x) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))","(*.f64 (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))","(*.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 2 binary64))))","(pow.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal -1 binary64))","(pow.f64 (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (exp.f64 x))) (neg.f64 (neg.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (neg.f64 (neg.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (exp.f64 x))) (neg.f64 (neg.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal -1 binary64) (exp.f64 x)) (neg.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) (neg.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (exp.f64 x)) (neg.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x))))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)))","(exp.f64 (fma.f64 (log.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64) x))","(exp.f64 (+.f64 x (neg.f64 (log.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))))))","(*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64))) (pow.f64 (fma.f64 (exp.f64 x) (-.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (exp.f64 x) (-.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)))) (neg.f64 (-.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (exp.f64 x) (-.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))) (*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64))) (-.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64)))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64)))) (neg.f64 (fma.f64 (exp.f64 x) (-.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)))))","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)))","(/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64))) (fma.f64 (exp.f64 x) (-.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (exp.f64 x) (-.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (-.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64)))))","(fma.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (exp.f64 x))","(fma.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) #s(literal -1 binary64)) (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x))","(fma.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (exp.f64 x))","(fma.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (exp.f64 x))","(fma.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1/2 binary64)) (exp.f64 x))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x))","(fma.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64) (exp.f64 x))","(fma.f64 (exp.f64 x) #s(literal 1 binary64) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))","(fma.f64 #s(literal 1 binary64) (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)))) (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (-.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)))))","(-.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))))","(+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))","(+.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) #s(literal -1 binary64)) (+.f64 (exp.f64 x) #s(literal 2 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))","(*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1/2 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))))","(*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)))","(pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (neg.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (neg.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(neg.f64 (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))))","(exp.f64 (neg.f64 (log.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (pow.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))","(pow.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))","(/.f64 (+.f64 #s(literal -8 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 4 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) (exp.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (neg.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (neg.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64))) (pow.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 8 binary64))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 2 binary64)))","(/.f64 (neg.f64 (neg.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)))) #s(literal 1 binary64))","(/.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64))))","(/.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (*.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64)))","(/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (*.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (+.f64 (exp.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))","(/.f64 (neg.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)))","(fma.f64 (exp.f64 x) #s(literal 1 binary64) #s(literal -2 binary64))","(fma.f64 #s(literal 1 binary64) (exp.f64 x) #s(literal -2 binary64))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal 4 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64)))) (/.f64 #s(literal 4 binary64) (*.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64))))) (/.f64 #s(literal 8 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64))))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))) (/.f64 #s(literal 8 binary64) (*.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (/.f64 #s(literal 4 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) #s(literal 1 binary64)) (/.f64 (/.f64 #s(literal 8 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal 4 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (/.f64 #s(literal 8 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(-.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64))","(-.f64 #s(literal 0 binary64) (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 (log.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))))","(+.f64 #s(literal -2 binary64) (exp.f64 x))","(+.f64 (exp.f64 x) #s(literal -2 binary64))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":277.119873046875,"type":"rewrite"},{"compiler":[[31729,2743]],"memory":[[7489264,74458480]],"time":176.489990234375,"type":"eval"},{"alts":[["(fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64))","fresh",30.74148891950237,"binary64"],["(/.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64)) (exp.f64 x))","fresh",30.11400129474676,"binary64"],["(/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))) (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64))))","fresh",30.61638944434054,"binary64"],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","done",30.67130390982156,"binary64"],["(*.f64 (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","next",30.68281045218611,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x))))","next",0.27007111393323374,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x))))","next",0.27397736393323374,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x)))","fresh",0.32589984849379083,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)))","next",0.45588128993420624,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))","next",0.45197503993420624,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","done",0.831676380773911,"binary64"]],"compiler":[[5,5],[11,7],[27,16],[8,7],[17,9],[27,19],[31,18],[22,15],[21,12],[17,13],[12,9],[5,5],[11,7],[27,16],[17,9],[27,19],[31,18],[22,15],[21,12],[17,13]],"count":[[858,11]],"kept":[{"done":[1,1],"fresh":[4,2],"new":[848,7],"picked":[5,1]}],"memory":[[-8495008,35148304]],"min-error":[[0.0,"binary64"]],"time":20.656005859375,"type":"prune"},{"egraph":[[0,8221,258,0.062369777],[7,5321,258,0.025410419],[6,1866,259,0.02052345],[5,999,260,0.007332489],[4,664,264,0.004154578],[3,391,264,0.002462081],[2,202,269,0.001439419],[1,106,279,0.000846091],[0,59,289,0.00066805],[0,35,297,0.000364469]],"inputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x))))","(fma.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))","(pow.f64 x #s(literal 4 binary64))","x","#s(literal 4 binary64)","#s(literal 1/20160 binary64)","#s(literal 1/12 binary64)","(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x))","(pow.f64 x #s(literal 6 binary64))","#s(literal 6 binary64)","#s(literal 1/360 binary64)","(*.f64 x x)","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)))","(fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x))","(*.f64 (*.f64 x x) (*.f64 x x))","(*.f64 x x)","x","#s(literal 1/12 binary64)","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))","(fma.f64 x x (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))))","x","(*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))","#s(literal 1/12 binary64)","(pow.f64 x #s(literal 4 binary64))","#s(literal 4 binary64)","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)))","(pow.f64 x #s(literal 6 binary64))","x","#s(literal 6 binary64)","(fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64))","#s(literal 1/20160 binary64)","(*.f64 x x)","#s(literal 1/360 binary64)","(fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x))","(*.f64 (*.f64 x x) (*.f64 x x))","#s(literal 1/12 binary64)","(*.f64 (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x))","(+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))","(pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 x)","x","#s(literal 2 binary64)","#s(literal -1 binary64)"]],"locations":[["(pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))","cost-diff",0],["(+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))","cost-diff",0],["(/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x))","cost-diff",2],["(*.f64 (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","cost-diff",7],["(pow.f64 x #s(literal 6 binary64))","cost-diff",0],["(fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)))","cost-diff",0],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x))))","cost-diff",0],["(*.f64 (*.f64 x x) (*.f64 x x))","cost-diff",4],["(pow.f64 x #s(literal 4 binary64))","cost-diff",0],["(*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))","cost-diff",0],["(fma.f64 x x (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))))","cost-diff",0],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))","cost-diff",0],["(*.f64 x x)","cost-diff",0],["(fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x))","cost-diff",0],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)))","cost-diff",0],["(*.f64 (*.f64 x x) (*.f64 x x))","cost-diff",4],["(pow.f64 x #s(literal 4 binary64))","cost-diff",0],["(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))","cost-diff",0],["(fma.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)))","cost-diff",0],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x))))","cost-diff",0]],"memory":[[10778544,31641776]],"method":["egg-herbie"],"outputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x (fma.f64 (pow.f64 x #s(literal 7 binary64)) #s(literal 1/20160 binary64) (fma.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64) x)))))","(fma.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)))","(*.f64 x (fma.f64 (pow.f64 x #s(literal 7 binary64)) #s(literal 1/20160 binary64) (fma.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64) x))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))","(fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64))","(pow.f64 x #s(literal 4 binary64))","x","#s(literal 4 binary64)","#s(literal 1/20160 binary64)","#s(literal 1/12 binary64)","(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x))","(fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x))","(pow.f64 x #s(literal 6 binary64))","#s(literal 6 binary64)","#s(literal 1/360 binary64)","(*.f64 x x)","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x))","(fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))","(*.f64 (*.f64 x x) (*.f64 x x))","(pow.f64 x #s(literal 4 binary64))","(*.f64 x x)","x","#s(literal 1/12 binary64)","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(fma.f64 x x (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))))","(fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))","x","(*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))","#s(literal 1/12 binary64)","(pow.f64 x #s(literal 4 binary64))","#s(literal 4 binary64)","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x (fma.f64 (pow.f64 x #s(literal 7 binary64)) #s(literal 1/20160 binary64) (fma.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64) x)))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)))","(*.f64 x (fma.f64 (pow.f64 x #s(literal 7 binary64)) #s(literal 1/20160 binary64) (fma.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64) x))))","(pow.f64 x #s(literal 6 binary64))","x","#s(literal 6 binary64)","(fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64))","(fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64))","#s(literal 1/20160 binary64)","(*.f64 x x)","#s(literal 1/360 binary64)","(fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x))","(fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))","(*.f64 (*.f64 x x) (*.f64 x x))","(pow.f64 x #s(literal 4 binary64))","#s(literal 1/12 binary64)","(*.f64 (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(-.f64 (exp.f64 (neg.f64 x)) (-.f64 #s(literal 2 binary64) (exp.f64 x)))","(/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x))","(-.f64 (/.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))","(+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))","(-.f64 (exp.f64 x) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))))","(pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 x)","x","#s(literal 2 binary64)","#s(literal -1 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":205.31201171875,"type":"simplify"},{"compiler":[[247,37]],"locations":[["(*.f64 (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","accuracy",0.015625],["(/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x))","accuracy",0.01953125],["(-.f64 (exp.f64 x) #s(literal 2 binary64))","accuracy",0.03125],["(+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))","accuracy",30.687536933835897],["(fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64))","accuracy",0.00390625],["(pow.f64 x #s(literal 6 binary64))","accuracy",0.00390625],["(*.f64 (*.f64 x x) (*.f64 x x))","accuracy",0.10546875],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x))))","accuracy",0.26616486393323374],["(fma.f64 x x (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))))","accuracy",0.0],["(pow.f64 x #s(literal 4 binary64))","accuracy",0.00390625],["(*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))","accuracy",0.11328125],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))","accuracy",0.45197503993420624],["(*.f64 x x)","accuracy",0.0],["(fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x))","accuracy",0.00390625],["(*.f64 (*.f64 x x) (*.f64 x x))","accuracy",0.10546875],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)))","accuracy",0.45197503993420624],["(pow.f64 x #s(literal 4 binary64))","accuracy",0.00390625],["(fma.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)))","accuracy",0.0078125],["(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))","accuracy",0.0078125],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x))))","accuracy",0.26616486393323374]],"memory":[[-6569008,67766128]],"mixsample":[[22.91015625,"adjust",800],[4.7978515625,"ival-div",0],[5.640869140625,"ival-exp",0],[0.007080078125,"ival-div",400],[1.038818359375,"ival-sub",1600],[26.61962890625,"ival-pow",1600],[0.15087890625,"ival-assert",0],[1.523681640625,"ival-sub",0],[19.414794921875,"ival-exp",400],[1.592529296875,"ival-sub",400],[16.695556640625,"const",0],[0.449951171875,"ival-pow",800],[15.383056640625,"adjust",2000],[18.381591796875,"ival-pow",0],[51.18603515625,"ival-add",0],[0.005859375,"ival-mult",400],[0.02587890625,"ival-sub",800],[28.0908203125,"ival-mult",0],[0.326171875,"ival-exp",800],[0.00390625,"ival-add",400],[0.25390625,"ival-true",0],[40.0751953125,"ival-exp",1600],[25.435791015625,"ival-pow",400],[0.608154296875,"exact",0],[1.109619140625,"ival-neg",0]],"outcomes":[[55.531005859375,1,"valid",70],[276.5390625,2,"valid",180],[2.0185546875,0,"valid",6]],"time":369.7451171875,"type":"localize"},{"count":[[20,41]],"inputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x))))","(fma.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))","(pow.f64 x #s(literal 4 binary64))","(*.f64 (*.f64 x x) (*.f64 x x))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)))","(fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x))","(*.f64 x x)","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))","(fma.f64 x x (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))))","(*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)))","(pow.f64 x #s(literal 6 binary64))","(*.f64 (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x))","(+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))","(pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))","(fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64))","(-.f64 (exp.f64 x) #s(literal 2 binary64))"]],"memory":[[-1294320,6070896]],"outputs":[["(pow x 2)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","1/12","(+ 1/12 (* 1/20160 (pow x 4)))","(pow x 4)","(* 1/12 (pow x 4))","(pow x 6)","(* -1 (pow x 2))","(* (pow x 2) (- (* -1 x) 1))","(* (pow x 2) (- (* x (- (* -19/12 x) 1)) 1))","(* (pow x 2) (- (* x (- (* x (- (* -9/4 x) 19/12)) 1)) 1))","(* (pow x 2) (- (* -2 x) 1))","(* (pow x 2) (- (* x (- (* -37/12 x) 2)) 1))","(* (pow x 2) (- (* x (- (* x (- (* -9/2 x) 37/12)) 2)) 1))","-1","(- (* -1 x) 1)","(- (* x (- (* -3/2 x) 1)) 1)","(- (* x (- (* x (- (* -13/6 x) 3/2)) 1)) 1)","1/360","(+ 1/360 (* 1/20160 (pow x 2)))","(- x 1)","(- (* x (+ 1 (* 1/2 x))) 1)","(- (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))) 1)","(- (+ (exp x) (exp (neg x))) 2)","(* 1/20160 (pow x 8))","(* (pow x 8) (+ 1/20160 (* 1/360 (/ 1 (pow x 2)))))","(* (pow x 8) (+ 1/20160 (+ (/ 1/12 (pow x 4)) (* 1/360 (/ 1 (pow x 2))))))","(* (pow x 8) (+ 1/20160 (+ (/ 1/12 (pow x 4)) (+ (* 1/360 (/ 1 (pow x 2))) (/ 1 (pow x 6))))))","(* 1/20160 (pow x 4))","(* (pow x 4) (+ 1/20160 (* 1/12 (/ 1 (pow x 4)))))","(* (pow x 4) (+ 1/12 (/ 1 (pow x 2))))","(/ (* (+ (exp x) (/ 1 (- (exp x) 2))) (- (exp x) 2)) (exp x))","(/ (+ (exp x) (/ 1 (- (exp x) 2))) (exp x))","(+ (exp x) (/ 1 (- (exp x) 2)))","(/ 1 (- (exp x) 2))","(* 1/20160 (pow x 2))","(* (pow x 2) (+ 1/20160 (* 1/360 (/ 1 (pow x 2)))))","(- (exp x) 2)","(- (+ (exp x) (exp (* -1 x))) 2)"]],"series":[[3.222900390625,"((+ (- (exp x) 2) (exp (neg x))) (+ (* (+ (* (pow x 4) 1/20160) 1/12) (pow x 4)) (+ (* (pow x 6) 1/360) (* x x))) (+ (* (pow x 4) 1/20160) 1/12) (pow x 4) (* (* x x) (* x x)) (+ (- (exp x) 2) (exp (neg x))) (+ (* (* (* x x) (* x x)) 1/12) (* x x)) (* x x) (+ (- (exp x) 2) (exp (neg x))) (+ (* x x) (* 1/12 (pow x 4))) (* 1/12 (pow x 4)) (+ (- (exp x) 2) (exp (neg x))) (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (* (* x x) (* x x)) 1/12) (* x x))) (pow x 6) (* (/ (+ (pow (- (exp x) 2) -1) (exp x)) (exp x)) (- (exp x) 2)) (/ (+ (pow (- (exp x) 2) -1) (exp x)) (exp x)) (+ (pow (- (exp x) 2) -1) (exp x)) (pow (- (exp x) 2) -1) (+ (* 1/20160 (* x x)) 1/360) (- (exp x) 2))","x","-inf"],[3.435791015625,"((+ (- (exp x) 2) (exp (neg x))) (+ (* (+ (* (pow x 4) 1/20160) 1/12) (pow x 4)) (+ (* (pow x 6) 1/360) (* x x))) (+ (* (pow x 4) 1/20160) 1/12) (pow x 4) (* (* x x) (* x x)) (+ (- (exp x) 2) (exp (neg x))) (+ (* (* (* x x) (* x x)) 1/12) (* x x)) (* x x) (+ (- (exp x) 2) (exp (neg x))) (+ (* x x) (* 1/12 (pow x 4))) (* 1/12 (pow x 4)) (+ (- (exp x) 2) (exp (neg x))) (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (* (* x x) (* x x)) 1/12) (* x x))) (pow x 6) (* (/ (+ (pow (- (exp x) 2) -1) (exp x)) (exp x)) (- (exp x) 2)) (/ (+ (pow (- (exp x) 2) -1) (exp x)) (exp x)) (+ (pow (- (exp x) 2) -1) (exp x)) (pow (- (exp x) 2) -1) (+ (* 1/20160 (* x x)) 1/360) (- (exp x) 2))","x","inf"],[3.94482421875,"((+ (- (exp x) 2) (exp (neg x))) (+ (* (+ (* (pow x 4) 1/20160) 1/12) (pow x 4)) (+ (* (pow x 6) 1/360) (* x x))) (+ (* (pow x 4) 1/20160) 1/12) (pow x 4) (* (* x x) (* x x)) (+ (- (exp x) 2) (exp (neg x))) (+ (* (* (* x x) (* x x)) 1/12) (* x x)) (* x x) (+ (- (exp x) 2) (exp (neg x))) (+ (* x x) (* 1/12 (pow x 4))) (* 1/12 (pow x 4)) (+ (- (exp x) 2) (exp (neg x))) (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (* (* x x) (* x x)) 1/12) (* x x))) (pow x 6) (* (/ (+ (pow (- (exp x) 2) -1) (exp x)) (exp x)) (- (exp x) 2)) (/ (+ (pow (- (exp x) 2) -1) (exp x)) (exp x)) (+ (pow (- (exp x) 2) -1) (exp x)) (pow (- (exp x) 2) -1) (+ (* 1/20160 (* x x)) 1/360) (- (exp x) 2))","x","0"]],"time":11.79296875,"type":"series"},{"count":[[41,41]],"egraph":[[0,8358,318,0.107705799],[5,7401,350,0.020543335],[4,3983,350,0.026887013],[3,2235,350,0.017953976],[2,751,350,0.008396568],[1,329,360,0.002237417],[0,131,360,0.001156461]],"inputs":[["(pow x 2)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","1/12","(+ 1/12 (* 1/20160 (pow x 4)))","(pow x 4)","(* 1/12 (pow x 4))","(pow x 6)","(* -1 (pow x 2))","(* (pow x 2) (- (* -1 x) 1))","(* (pow x 2) (- (* x (- (* -19/12 x) 1)) 1))","(* (pow x 2) (- (* x (- (* x (- (* -9/4 x) 19/12)) 1)) 1))","(* (pow x 2) (- (* -2 x) 1))","(* (pow x 2) (- (* x (- (* -37/12 x) 2)) 1))","(* (pow x 2) (- (* x (- (* x (- (* -9/2 x) 37/12)) 2)) 1))","-1","(- (* -1 x) 1)","(- (* x (- (* -3/2 x) 1)) 1)","(- (* x (- (* x (- (* -13/6 x) 3/2)) 1)) 1)","1/360","(+ 1/360 (* 1/20160 (pow x 2)))","(- x 1)","(- (* x (+ 1 (* 1/2 x))) 1)","(- (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))) 1)","(- (+ (exp x) (exp (neg x))) 2)","(* 1/20160 (pow x 8))","(* (pow x 8) (+ 1/20160 (* 1/360 (/ 1 (pow x 2)))))","(* (pow x 8) (+ 1/20160 (+ (/ 1/12 (pow x 4)) (* 1/360 (/ 1 (pow x 2))))))","(* (pow x 8) (+ 1/20160 (+ (/ 1/12 (pow x 4)) (+ (* 1/360 (/ 1 (pow x 2))) (/ 1 (pow x 6))))))","(* 1/20160 (pow x 4))","(* (pow x 4) (+ 1/20160 (* 1/12 (/ 1 (pow x 4)))))","(* (pow x 4) (+ 1/12 (/ 1 (pow x 2))))","(/ (* (+ (exp x) (/ 1 (- (exp x) 2))) (- (exp x) 2)) (exp x))","(/ (+ (exp x) (/ 1 (- (exp x) 2))) (exp x))","(+ (exp x) (/ 1 (- (exp x) 2)))","(/ 1 (- (exp x) 2))","(* 1/20160 (pow x 2))","(* (pow x 2) (+ 1/20160 (* 1/360 (/ 1 (pow x 2)))))","(- (exp x) 2)","(- (+ (exp x) (exp (* -1 x))) 2)"]],"memory":[[-2148736,48271216]],"method":["egg-herbie"],"outputs":[["(pow x 2)","(*.f64 x x)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","1/12","#s(literal 1/12 binary64)","(+ 1/12 (* 1/20160 (pow x 4)))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))","(pow x 4)","(pow.f64 x #s(literal 4 binary64))","(* 1/12 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64))","(pow x 6)","(pow.f64 x #s(literal 6 binary64))","(* -1 (pow x 2))","(*.f64 (neg.f64 x) x)","(* (pow x 2) (- (* -1 x) 1))","(*.f64 (fma.f64 x x x) (neg.f64 x))","(* (pow x 2) (- (* x (- (* -19/12 x) 1)) 1))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -19/12 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)) x) x)","(* (pow x 2) (- (* x (- (* x (- (* -9/4 x) 19/12)) 1)) 1))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -9/4 binary64) x #s(literal -19/12 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)) x) x)","(* (pow x 2) (- (* -2 x) 1))","(*.f64 (*.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -1 binary64)) x) x)","(* (pow x 2) (- (* x (- (* -37/12 x) 2)) 1))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -37/12 binary64) x #s(literal -2 binary64)) x #s(literal -1 binary64)) x) x)","(* (pow x 2) (- (* x (- (* x (- (* -9/2 x) 37/12)) 2)) 1))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -9/2 binary64) x #s(literal -37/12 binary64)) x #s(literal -2 binary64)) x #s(literal -1 binary64)) x) x)","-1","#s(literal -1 binary64)","(- (* -1 x) 1)","(-.f64 #s(literal -1 binary64) x)","(- (* x (- (* -3/2 x) 1)) 1)","(fma.f64 (fma.f64 #s(literal -3/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(- (* x (- (* x (- (* -13/6 x) 3/2)) 1)) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal -13/6 binary64) x #s(literal -3/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))","1/360","#s(literal 1/360 binary64)","(+ 1/360 (* 1/20160 (pow x 2)))","(fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64))","(- x 1)","(-.f64 x #s(literal 1 binary64))","(- (* x (+ 1 (* 1/2 x))) 1)","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64))","(- (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64))","(- (+ (exp x) (exp (neg x))) 2)","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))","(* 1/20160 (pow x 8))","(*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))","(* (pow x 8) (+ 1/20160 (* 1/360 (/ 1 (pow x 2)))))","(*.f64 (+.f64 (/.f64 #s(literal 1/360 binary64) (*.f64 x x)) #s(literal 1/20160 binary64)) (pow.f64 x #s(literal 8 binary64)))","(* (pow x 8) (+ 1/20160 (+ (/ 1/12 (pow x 4)) (* 1/360 (/ 1 (pow x 2))))))","(*.f64 (+.f64 (+.f64 (/.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1/20160 binary64)) (/.f64 #s(literal 1/360 binary64) (*.f64 x x))) (pow.f64 x #s(literal 8 binary64)))","(* (pow x 8) (+ 1/20160 (+ (/ 1/12 (pow x 4)) (+ (* 1/360 (/ 1 (pow x 2))) (/ 1 (pow x 6))))))","(*.f64 (+.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (+.f64 (+.f64 (/.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1/20160 binary64)) (/.f64 #s(literal 1/360 binary64) (*.f64 x x)))) (pow.f64 x #s(literal 8 binary64)))","(* 1/20160 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64))","(* (pow x 4) (+ 1/20160 (* 1/12 (/ 1 (pow x 4)))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))","(* (pow x 4) (+ 1/12 (/ 1 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","(/ (* (+ (exp x) (/ 1 (- (exp x) 2))) (- (exp x) 2)) (exp x))","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))","(/ (+ (exp x) (/ 1 (- (exp x) 2))) (exp x))","(/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x)) (exp.f64 x))","(+ (exp x) (/ 1 (- (exp x) 2)))","(+.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x))","(/ 1 (- (exp x) 2))","(/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(* 1/20160 (pow x 2))","(*.f64 #s(literal 1/20160 binary64) (*.f64 x x))","(* (pow x 2) (+ 1/20160 (* 1/360 (/ 1 (pow x 2)))))","(fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64))","(- (exp x) 2)","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(- (+ (exp x) (exp (* -1 x))) 2)","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))"]],"stop":[["iter limit",1],["node limit",1]],"time":353.875,"type":"simplify"},{"count":[[20,680]],"egraph":[[0,8210,217,0.075700548],[2,2091,217,0.036520943],[1,259,217,0.00728071],[0,59,217,0.00189153],[0,35,237,0.000353311]],"inputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x))))","(fma.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))","(pow.f64 x #s(literal 4 binary64))","(*.f64 (*.f64 x x) (*.f64 x x))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)))","(fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x))","(*.f64 x x)","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))","(fma.f64 x x (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))))","(*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)))","(pow.f64 x #s(literal 6 binary64))","(*.f64 (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x))","(+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))","(pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))","(fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64))","(-.f64 (exp.f64 x) #s(literal 2 binary64))"]],"memory":[[-2745856,74703472]],"outputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x))))","(*.f64 (fma.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64)) (neg.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) #s(literal 2 binary64)))) (pow.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 12 binary64)) (pow.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)))) (pow.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x))) (fma.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64)) (neg.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) #s(literal 2 binary64))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)))) (pow.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))) #s(literal 2 binary64))) (fma.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 12 binary64)) (pow.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 (-.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 x x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))) #s(literal 2 binary64)))) (neg.f64 (-.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (+.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 x x))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64)) (neg.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) #s(literal 2 binary64)))))) (neg.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 12 binary64)) (pow.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)))) (pow.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)))) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x))) (pow.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) #s(literal 2 binary64)))) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x))) (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 (*.f64 x x) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (-.f64 (*.f64 x x) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64)) (pow.f64 x #s(literal 4 binary64))) (neg.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (pow.f64 x #s(literal 4 binary64)))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (neg.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64)) (pow.f64 x #s(literal 4 binary64))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64)))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (neg.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64)) (pow.f64 x #s(literal 4 binary64))) (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64)))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64)))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64)) (pow.f64 x #s(literal 4 binary64))) (/.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (/.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64)) (pow.f64 x #s(literal 4 binary64))) (/.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (/.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/8193540096000 binary64) #s(literal 1/1728 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 (*.f64 x x) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (-.f64 (*.f64 x x) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/8193540096000 binary64) #s(literal 1/1728 binary64)) (pow.f64 x #s(literal 4 binary64))) (neg.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (pow.f64 x #s(literal 4 binary64)))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (neg.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/8193540096000 binary64) #s(literal 1/1728 binary64)) (pow.f64 x #s(literal 4 binary64))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64)))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/8193540096000 binary64) #s(literal 1/1728 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/8193540096000 binary64) #s(literal 1/1728 binary64)) (pow.f64 x #s(literal 4 binary64))) (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64)))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/8193540096000 binary64) #s(literal 1/1728 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64)))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/8193540096000 binary64) #s(literal 1/1728 binary64)) (pow.f64 x #s(literal 4 binary64))) (/.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (/.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/8193540096000 binary64) #s(literal 1/1728 binary64)) (pow.f64 x #s(literal 4 binary64))) (/.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (/.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64))) (-.f64 (*.f64 x x) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (-.f64 (*.f64 x x) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64))) (neg.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (pow.f64 x #s(literal 4 binary64)))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (neg.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x)))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64)))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (neg.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64))) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64))) (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64)))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64)))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64))) (/.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (/.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64))) (/.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (/.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/8193540096000 binary64) #s(literal 1/1728 binary64))) (-.f64 (*.f64 x x) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (-.f64 (*.f64 x x) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/8193540096000 binary64) #s(literal 1/1728 binary64))) (neg.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (pow.f64 x #s(literal 4 binary64)))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (neg.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x)))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/8193540096000 binary64) #s(literal 1/1728 binary64))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64)))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/8193540096000 binary64) #s(literal 1/1728 binary64))) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/8193540096000 binary64) #s(literal 1/1728 binary64))) (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64)))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/8193540096000 binary64) #s(literal 1/1728 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64)))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/8193540096000 binary64) #s(literal 1/1728 binary64))) (/.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (/.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/8193540096000 binary64) #s(literal 1/1728 binary64))) (/.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (/.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (*.f64 (-.f64 (*.f64 x x) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (-.f64 (*.f64 x x) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (*.f64 (-.f64 (*.f64 x x) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/8193540096000 binary64) #s(literal 1/1728 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (-.f64 (*.f64 x x) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (*.f64 (-.f64 (*.f64 x x) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64))))) (*.f64 (-.f64 (*.f64 x x) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (*.f64 (-.f64 (*.f64 x x) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/8193540096000 binary64) #s(literal 1/1728 binary64))))) (*.f64 (-.f64 (*.f64 x x) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64))))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (*.f64 (neg.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (neg.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (*.f64 (neg.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/8193540096000 binary64) #s(literal 1/1728 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (neg.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64))))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (*.f64 (neg.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64))))) (*.f64 (neg.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (*.f64 (neg.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/8193540096000 binary64) #s(literal 1/1728 binary64))))) (*.f64 (neg.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64))))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64)))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64)))))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64)))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/8193540096000 binary64) #s(literal 1/1728 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64)))))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64))))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64)))))) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64))))) (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64)))))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64)))))) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/8193540096000 binary64) #s(literal 1/1728 binary64))))) (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64)))))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64))))))","(/.f64 (fma.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (*.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (*.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/8193540096000 binary64) #s(literal 1/1728 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64))))))","(/.f64 (fma.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (*.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64))))) (*.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (*.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/8193540096000 binary64) #s(literal 1/1728 binary64))))) (*.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64))))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/8193540096000 binary64) #s(literal 1/1728 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64))))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64))))) (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/8193540096000 binary64) #s(literal 1/1728 binary64))))) (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64))))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (*.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/8193540096000 binary64) #s(literal 1/1728 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64))))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (*.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/8193540096000 binary64) #s(literal 1/1728 binary64))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (*.f64 (/.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (/.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (*.f64 (/.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/8193540096000 binary64) #s(literal 1/1728 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (/.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (*.f64 (/.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64))))) (*.f64 (/.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (*.f64 (/.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/8193540096000 binary64) #s(literal 1/1728 binary64))))) (*.f64 (/.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/8193540096000 binary64) #s(literal 1/1728 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64))))) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/8193540096000 binary64) #s(literal 1/1728 binary64))))) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 x x)))","(/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))) #s(literal 2 binary64))) (-.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)))))","(/.f64 (+.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) (+.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 x x)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64)) (neg.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) #s(literal 2 binary64))))) (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 12 binary64)) (pow.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 12 binary64)) (pow.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)))) (pow.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64)) (neg.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) #s(literal 2 binary64)))) (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 12 binary64)) (pow.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x))))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 12 binary64)) (pow.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) #s(literal 3 binary64))) (fma.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)))) (pow.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x))) (fma.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64)) (neg.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)))) (pow.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))) #s(literal 2 binary64))) (fma.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 12 binary64)) (pow.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x))) (fma.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64)) (neg.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) #s(literal 2 binary64)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)))) (pow.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))) #s(literal 2 binary64))) (fma.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 12 binary64)) (pow.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) #s(literal 3 binary64))))))","(fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 3 binary64))) x (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)))","(fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (*.f64 x x)) (*.f64 x x) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)))","(fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) x) (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)))","(fma.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 x (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/360 binary64)) (fma.f64 x x (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)))))","(fma.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 x) x)) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))))","(fma.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)))","(fma.f64 (*.f64 x x) (*.f64 (*.f64 x x) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)))","(fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (fma.f64 x x (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 x x (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)))))","(fma.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)))","(fma.f64 x (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)))","(fma.f64 x x (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)))) (/.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)))))","(+.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (*.f64 x x)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))","(+.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 x x))","(+.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 x x (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)))))","(+.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)))","(+.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))))","(+.f64 (*.f64 x x) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))","(*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/8193540096000 binary64) #s(literal 1/1728 binary64)) (pow.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/8193540096000 binary64) #s(literal 1/1728 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 1/144 binary64) (*.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64))))) (neg.f64 (-.f64 #s(literal 1/12 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64)))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/8193540096000 binary64) #s(literal 1/1728 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) #s(literal 1/144 binary64))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64))))","(/.f64 (-.f64 #s(literal 1/144 binary64) (*.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)))) (-.f64 #s(literal 1/12 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/8193540096000 binary64) #s(literal 1/1728 binary64))) (neg.f64 (+.f64 #s(literal 1/144 binary64) (-.f64 (*.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/8193540096000 binary64) #s(literal 1/1728 binary64))) (neg.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64))))))","(/.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)))","(/.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/8193540096000 binary64) #s(literal 1/1728 binary64)) (+.f64 #s(literal 1/144 binary64) (-.f64 (*.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/8193540096000 binary64) #s(literal 1/1728 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/8193540096000 binary64) #s(literal 1/1728 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/8193540096000 binary64) #s(literal 1/1728 binary64)))))","(fma.f64 (*.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 3 binary64))) x #s(literal 1/12 binary64))","(fma.f64 (*.f64 #s(literal 1/20160 binary64) x) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1/20160 binary64) x) #s(literal 1/12 binary64))","(fma.f64 (*.f64 (*.f64 x x) #s(literal 1/20160 binary64)) (*.f64 x x) #s(literal 1/12 binary64))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))","(fma.f64 (*.f64 x x) (*.f64 (*.f64 x x) #s(literal 1/20160 binary64)) #s(literal 1/12 binary64))","(fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64))","(fma.f64 x (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/20160 binary64)) #s(literal 1/12 binary64))","(-.f64 (/.f64 (*.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64))) (/.f64 #s(literal 1/144 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal -1/12 binary64))))","(+.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64)) #s(literal 1/12 binary64))","(+.f64 #s(literal 1/12 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64)))","(*.f64 (pow.f64 x #s(literal 3 binary64)) x)","(*.f64 (*.f64 x x) (*.f64 x x))","(*.f64 x (pow.f64 x #s(literal 3 binary64)))","(pow.f64 (exp.f64 #s(literal 4 binary64)) (log.f64 x))","(pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))","(pow.f64 (*.f64 x x) #s(literal 2 binary64))","(pow.f64 x #s(literal 4 binary64))","(exp.f64 (fma.f64 (log.f64 x) #s(literal 2 binary64) (*.f64 (log.f64 x) #s(literal 2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal 4 binary64)))","(*.f64 (pow.f64 x #s(literal 3 binary64)) x)","(*.f64 (*.f64 x x) (*.f64 x x))","(*.f64 x (pow.f64 x #s(literal 3 binary64)))","(pow.f64 (exp.f64 #s(literal 4 binary64)) (log.f64 x))","(pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))","(pow.f64 (*.f64 x x) #s(literal 2 binary64))","(pow.f64 x #s(literal 4 binary64))","(exp.f64 (fma.f64 (log.f64 x) #s(literal 2 binary64) (*.f64 (log.f64 x) #s(literal 2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal 4 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (pow.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))))) (neg.f64 (neg.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)))) (pow.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) #s(literal 2 binary64)))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)))) (neg.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))))","(fma.f64 (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 3 binary64))) x (*.f64 x x))","(fma.f64 (*.f64 #s(literal 1/12 binary64) x) (pow.f64 x #s(literal 3 binary64)) (*.f64 x x))","(fma.f64 (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x) (*.f64 x x))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 x #s(literal 1/12 binary64)) (*.f64 x x))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","(fma.f64 (*.f64 x x) (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x))","(fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))","(fma.f64 x (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64)) (*.f64 x x))","(fma.f64 x (*.f64 x (*.f64 (*.f64 x x) #s(literal 1/12 binary64))) (*.f64 x x))","(fma.f64 x x (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)))","(-.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))) (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))))","(-.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) (/.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))))","(+.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (*.f64 x x))","(+.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)))","(*.f64 x x)","(pow.f64 (*.f64 x x) #s(literal 1 binary64))","(pow.f64 x #s(literal 2 binary64))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (pow.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))))) (neg.f64 (neg.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)))) (pow.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) #s(literal 2 binary64)))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)))) (neg.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))))","(fma.f64 (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 3 binary64))) x (*.f64 x x))","(fma.f64 (*.f64 #s(literal 1/12 binary64) x) (pow.f64 x #s(literal 3 binary64)) (*.f64 x x))","(fma.f64 (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x) (*.f64 x x))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 x #s(literal 1/12 binary64)) (*.f64 x x))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","(fma.f64 (*.f64 x x) (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x))","(fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))","(fma.f64 x (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64)) (*.f64 x x))","(fma.f64 x (*.f64 x (*.f64 (*.f64 x x) #s(literal 1/12 binary64))) (*.f64 x x))","(fma.f64 x x (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)))","(-.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))) (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))))","(-.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) (/.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))))","(+.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (*.f64 x x))","(+.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)))","(*.f64 (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 3 binary64))) x)","(*.f64 (*.f64 #s(literal 1/12 binary64) x) (pow.f64 x #s(literal 3 binary64)))","(*.f64 (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x))","(*.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 x #s(literal 1/12 binary64)))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64))","(*.f64 (*.f64 x x) (*.f64 (*.f64 x x) #s(literal 1/12 binary64)))","(*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))","(*.f64 x (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64)))","(*.f64 x (*.f64 x (*.f64 (*.f64 x x) #s(literal 1/12 binary64))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))))","(*.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 12 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)) #s(literal 2 binary64))) (pow.f64 (-.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 18 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 12 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)) (-.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64)))))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))) (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 12 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 12 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)) (-.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64)))))) (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 18 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)))) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 (-.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)))) (*.f64 x x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 12 binary64))))) (neg.f64 (-.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)))) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (+.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)))) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)))) (*.f64 x x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 12 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 18 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 12 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)) (-.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64)))))))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 12 binary64))) (-.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))) (*.f64 (-.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)) #s(literal 2 binary64)))) (*.f64 (-.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))) (-.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (pow.f64 x #s(literal 6 binary64))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64)))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (pow.f64 x #s(literal 6 binary64))) (neg.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (neg.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (pow.f64 x #s(literal 6 binary64))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (neg.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (pow.f64 x #s(literal 6 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (pow.f64 x #s(literal 6 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (pow.f64 x #s(literal 6 binary64))) (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (pow.f64 x #s(literal 6 binary64))) (/.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (/.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (pow.f64 x #s(literal 6 binary64))) (/.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (/.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (pow.f64 x #s(literal 6 binary64))) (/.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (/.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (pow.f64 x #s(literal 6 binary64))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64)))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (pow.f64 x #s(literal 6 binary64))) (neg.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (neg.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (pow.f64 x #s(literal 6 binary64))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (pow.f64 x #s(literal 6 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (pow.f64 x #s(literal 6 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (pow.f64 x #s(literal 6 binary64))) (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (pow.f64 x #s(literal 6 binary64))) (/.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (/.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (pow.f64 x #s(literal 6 binary64))) (/.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (/.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (pow.f64 x #s(literal 6 binary64))) (/.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (/.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64)))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))) (neg.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (neg.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (neg.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))) (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))) (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))) (/.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (/.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))) (/.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (/.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))) (/.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (/.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64)))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))) (neg.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (neg.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))) (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))) (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))) (/.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (/.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))) (/.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (/.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))) (/.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (/.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64)))))) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))) (neg.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)))))) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))))) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))))) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))) (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))) (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal 1 binary64))) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))) (/.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)))) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal 1 binary64))) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (/.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))) (/.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal 1 binary64))) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (/.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))) (/.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal 1 binary64))) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (/.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 3 binary64)) #s(literal 1/8193540096000 binary64) (*.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))) (*.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64)))))) (*.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 3 binary64)) #s(literal 1/8193540096000 binary64) (*.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64))) (neg.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)))))) (*.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (neg.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 3 binary64)) #s(literal 1/8193540096000 binary64) (*.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))))) (*.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 3 binary64)) #s(literal 1/8193540096000 binary64) (*.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (*.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 3 binary64)) #s(literal 1/8193540096000 binary64) (*.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 3 binary64)) #s(literal 1/8193540096000 binary64) (*.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64))) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))))) (*.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 3 binary64)) #s(literal 1/8193540096000 binary64) (*.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64))) (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (*.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 3 binary64)) #s(literal 1/8193540096000 binary64) (*.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 3 binary64)) #s(literal 1/8193540096000 binary64) (*.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64))) (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) #s(literal 1 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 3 binary64)) #s(literal 1/8193540096000 binary64) (*.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64))) (/.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)))) (*.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) #s(literal 1 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (/.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 3 binary64)) #s(literal 1/8193540096000 binary64) (*.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64))) (/.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) #s(literal 1 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (/.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 3 binary64)) #s(literal 1/8193540096000 binary64) (*.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64))) (/.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) #s(literal 1 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (/.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))) (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))) (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))))) (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))) (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))))) (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))) (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))))) (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64)))) (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))) (fma.f64 (pow.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 3 binary64)) #s(literal 1/8193540096000 binary64) (*.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64))))) (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))) (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (*.f64 (neg.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (neg.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (*.f64 (neg.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (neg.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (*.f64 (neg.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))))) (*.f64 (neg.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (*.f64 (neg.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))))) (*.f64 (neg.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)))) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (neg.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))))) (*.f64 (neg.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)))) (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (neg.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) (fma.f64 (pow.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 3 binary64)) #s(literal 1/8193540096000 binary64) (*.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64))))) (*.f64 (neg.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))))) (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))))) (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))))) (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))))) (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))))) (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))))) (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))))) (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))))) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))))) (fma.f64 (pow.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 3 binary64)) #s(literal 1/8193540096000 binary64) (*.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64))))) (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))))) (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (*.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (*.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (*.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))))) (*.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (*.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))))) (*.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))))) (*.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 3 binary64)) #s(literal 1/8193540096000 binary64) (*.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64))))) (*.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))))","(/.f64 (fma.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (fma.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (fma.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (fma.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (fma.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64))) (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (fma.f64 (pow.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 3 binary64)) #s(literal 1/8193540096000 binary64) (*.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (*.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (*.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (*.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))))) (*.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (*.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))))) (*.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))))) (*.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 (pow.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 3 binary64)) #s(literal 1/8193540096000 binary64) (*.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64))))) (*.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (*.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (*.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 3 binary64)) #s(literal 1/8193540096000 binary64) (*.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (*.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (*.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (*.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))))) (*.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (*.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))))) (*.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))))) (*.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (fma.f64 (pow.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 3 binary64)) #s(literal 1/8193540096000 binary64) (*.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64))))) (*.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))))) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))))) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))))) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 (pow.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 3 binary64)) #s(literal 1/8193540096000 binary64) (*.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64))))) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64)))) (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (*.f64 (/.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (/.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (*.f64 (/.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)))) (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (/.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (*.f64 (/.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)))) (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))))) (*.f64 (/.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (*.f64 (/.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)))) (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))))) (*.f64 (/.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (/.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)))) (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))))) (*.f64 (/.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)))) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (/.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)))) (fma.f64 (pow.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 3 binary64)) #s(literal 1/8193540096000 binary64) (*.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64))))) (*.f64 (/.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)))) (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))))) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))))) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))))) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (pow.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 3 binary64)) #s(literal 1/8193540096000 binary64) (*.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64))))) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (*.f64 (/.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (/.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (*.f64 (/.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (/.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (*.f64 (/.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))))) (*.f64 (/.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (*.f64 (/.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))))) (*.f64 (/.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (/.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64))))) (*.f64 (/.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (/.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (pow.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 3 binary64)) #s(literal 1/8193540096000 binary64) (*.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64))))) (*.f64 (/.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)))) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)))) (*.f64 x x)))","(/.f64 (-.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 12 binary64)))) (-.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64)))))","(/.f64 (+.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)))) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) (+.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)))) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)))) (*.f64 x x)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 12 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 18 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 12 binary64))) (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 18 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 12 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)) (-.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64))))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 12 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)) #s(literal 2 binary64))) (-.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 18 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 12 binary64))) (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 18 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)) #s(literal 3 binary64))) (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 12 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)) (-.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))) (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 12 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 12 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)) (-.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64)))))) (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 18 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)) #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))) (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 12 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 12 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)) (-.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64)))))) (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 18 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)) #s(literal 3 binary64))))))","(fma.f64 (*.f64 (*.f64 (*.f64 x x) #s(literal 1/20160 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","(fma.f64 (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 3 binary64))) x (fma.f64 x x (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64)))))","(fma.f64 (*.f64 #s(literal 1/12 binary64) x) (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64)))))","(fma.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (*.f64 #s(literal 1/20160 binary64) x)) x (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","(fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/20160 binary64)) (*.f64 x x) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","(fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","(fma.f64 (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x) (fma.f64 x x (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64)))))","(fma.f64 (*.f64 #s(literal 1/20160 binary64) x) (*.f64 x (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (*.f64 x x) #s(literal 1/20160 binary64))) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 x #s(literal 1/12 binary64)) (fma.f64 x x (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64)))))","(fma.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) #s(literal -1 binary64)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64))))","(fma.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (pow.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64))))","(fma.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) #s(literal -1 binary64)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64))))","(fma.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64))))","(fma.f64 (*.f64 (*.f64 x x) #s(literal 1/20160 binary64)) (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (fma.f64 x x (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64)))))","(fma.f64 (*.f64 x x) (*.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","(fma.f64 (*.f64 x x) (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (fma.f64 x x (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64)))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) (*.f64 (*.f64 x x) #s(literal 1/20160 binary64)) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64)))))","(fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 8 binary64)) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","(fma.f64 x (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64)) (fma.f64 x x (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64)))))","(fma.f64 x (*.f64 x (*.f64 (*.f64 x x) #s(literal 1/12 binary64))) (fma.f64 x x (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64)))))","(fma.f64 x x (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)))))","(-.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 12 binary64))) (-.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))) (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))))","(+.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)))","(+.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))","(+.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)))) (*.f64 x x))","(+.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","(+.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (fma.f64 x x (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64)))))","(+.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(+.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (pow.f64 x #s(literal 6 binary64))))","(+.f64 (*.f64 x x) (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)))))","(*.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))","(*.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))","(*.f64 (*.f64 x x) (pow.f64 x #s(literal 4 binary64)))","(pow.f64 (exp.f64 #s(literal 6 binary64)) (log.f64 x))","(pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 3/2 binary64))","(pow.f64 (*.f64 x x) #s(literal 3 binary64))","(pow.f64 x #s(literal 6 binary64))","(exp.f64 (fma.f64 (log.f64 x) #s(literal 3 binary64) (*.f64 (log.f64 x) #s(literal 3 binary64))))","(exp.f64 (fma.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64) (*.f64 (log.f64 x) #s(literal 2 binary64))))","(exp.f64 (fma.f64 (log.f64 x) #s(literal 4 binary64) (*.f64 (log.f64 x) #s(literal 2 binary64))))","(exp.f64 (fma.f64 (log.f64 x) #s(literal 2 binary64) (*.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))))","(exp.f64 (fma.f64 (log.f64 x) #s(literal 2 binary64) (*.f64 (log.f64 x) #s(literal 4 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 3 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal 6 binary64)))","(*.f64 (*.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 (neg.f64 x)))","(*.f64 (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(*.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)))","(*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x)))","(pow.f64 (/.f64 (exp.f64 x) (*.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))) (-.f64 (exp.f64 x) #s(literal 2 binary64)))) (neg.f64 (neg.f64 (exp.f64 x))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64)))) (neg.f64 (/.f64 (exp.f64 x) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x)))) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x)))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(/.f64 (neg.f64 (*.f64 (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))))) (neg.f64 (neg.f64 (exp.f64 x))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (exp.f64 x))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (neg.f64 (*.f64 (neg.f64 (exp.f64 x)) (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (neg.f64 (*.f64 (neg.f64 (exp.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (neg.f64 (*.f64 (/.f64 (exp.f64 x) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))) (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (neg.f64 (*.f64 (/.f64 (exp.f64 x) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (neg.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))))) (neg.f64 (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (exp.f64 x)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)))) (neg.f64 (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (neg.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))))) (neg.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (neg.f64 (exp.f64 x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)))) (neg.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (exp.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (/.f64 (exp.f64 x) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (exp.f64 x) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (/.f64 (exp.f64 x) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (neg.f64 (*.f64 (exp.f64 x) (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (neg.f64 (*.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))))","(/.f64 (*.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (neg.f64 (exp.f64 x)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (/.f64 (exp.f64 x) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))))","(/.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x))) (+.f64 (exp.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x))) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))","(/.f64 (*.f64 (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (+.f64 (exp.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)))) (neg.f64 (exp.f64 x)))","(/.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (exp.f64 x) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))))","(/.f64 (neg.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))) (neg.f64 (/.f64 (exp.f64 x) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))) (neg.f64 (exp.f64 x)))","(/.f64 (*.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (*.f64 (neg.f64 (exp.f64 x)) (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (*.f64 (neg.f64 (exp.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (*.f64 (/.f64 (exp.f64 x) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))) (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (*.f64 (/.f64 (exp.f64 x) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (*.f64 (exp.f64 x) (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (*.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(/.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (neg.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (exp.f64 x))))","(/.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (exp.f64 x) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)))))","(/.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (neg.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (neg.f64 (exp.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (/.f64 (exp.f64 x) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (exp.f64 x)))","(/.f64 (*.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x))","(/.f64 #s(literal 1 binary64) (/.f64 (exp.f64 x) (*.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (exp.f64 x) (*.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))))))","(/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (exp.f64 x) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))))","(fma.f64 (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x)) (exp.f64 x) (*.f64 (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x)) #s(literal -2 binary64)))","(fma.f64 (exp.f64 x) (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x)) (*.f64 #s(literal -2 binary64) (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x))))","(+.f64 (*.f64 (exp.f64 x) (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x))) (*.f64 #s(literal -2 binary64) (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x))))","(+.f64 (*.f64 (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x)) (exp.f64 x)) (*.f64 (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x)) #s(literal -2 binary64)))","(*.f64 (pow.f64 (/.f64 (exp.f64 x) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (-.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))) (pow.f64 (neg.f64 (exp.f64 x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x)))","(*.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 (neg.f64 x)))","(*.f64 (exp.f64 (neg.f64 x)) (pow.f64 (pow.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (exp.f64 (neg.f64 x)) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)))","(pow.f64 (/.f64 (/.f64 (exp.f64 x) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (exp.f64 x) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 (neg.f64 x)))) (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64))) (exp.f64 (neg.f64 x)))) (neg.f64 (fma.f64 (exp.f64 x) (-.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) #s(literal 1 binary64))) (neg.f64 (exp.f64 x)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))))) (neg.f64 (neg.f64 (neg.f64 (exp.f64 x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (exp.f64 x) (-.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64))) (exp.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 (neg.f64 x))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)))","(/.f64 (*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64))) (exp.f64 (neg.f64 x))) (fma.f64 (exp.f64 x) (-.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) #s(literal 1 binary64)) (exp.f64 x))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)))) (neg.f64 (neg.f64 (exp.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (neg.f64 (*.f64 (exp.f64 x) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64)))) (neg.f64 (*.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (-.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x)))","(/.f64 (*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (-.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64))) (exp.f64 x)))","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (exp.f64 x) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))))","(/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64))) (*.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (-.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))) (neg.f64 (exp.f64 x)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (exp.f64 x) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (exp.f64 x) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (exp.f64 x) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))))","(/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (exp.f64 x) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (exp.f64 x) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)))))","(neg.f64 (/.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))) (exp.f64 x)))","(neg.f64 (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (neg.f64 (exp.f64 x))))","(exp.f64 (*.f64 (log.f64 (/.f64 (exp.f64 x) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64))) (pow.f64 (fma.f64 (exp.f64 x) (-.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (exp.f64 x) (-.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)))) (neg.f64 (-.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (exp.f64 x) (-.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))) (*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64))) (-.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64)))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64)))) (neg.f64 (fma.f64 (exp.f64 x) (-.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)))))","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)))","(/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)))))","(/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64))) (fma.f64 (exp.f64 x) (-.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (-.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (exp.f64 x) (-.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64))))))","(fma.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (exp.f64 x))","(fma.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) #s(literal -1 binary64)) (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x))","(fma.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (exp.f64 x))","(fma.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (exp.f64 x))","(fma.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1/2 binary64)) (exp.f64 x))","(fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))","(-.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))))","(+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x))","(+.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) #s(literal -1 binary64)) (+.f64 (exp.f64 x) #s(literal 2 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))","(*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1/2 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))))","(pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))))","(exp.f64 (fma.f64 (log.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64) (*.f64 (log.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1/2 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) #s(literal -1/2 binary64)))","(exp.f64 (neg.f64 (log.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (pow.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 1/129600 binary64) (*.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (-.f64 #s(literal 1/360 binary64) (*.f64 (*.f64 x x) #s(literal 1/20160 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) #s(literal 1/129600 binary64))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (-.f64 #s(literal 1/129600 binary64) (*.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 #s(literal 1/360 binary64) (*.f64 (*.f64 x x) #s(literal 1/20160 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))) (neg.f64 (+.f64 #s(literal 1/129600 binary64) (-.f64 (*.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))) (neg.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64))))))","(/.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)))","(/.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (+.f64 #s(literal 1/129600 binary64) (-.f64 (*.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))))","(/.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/129600 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/129600 binary64) (*.f64 (*.f64 x x) #s(literal 1/7257600 binary64)))) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656000 binary64)))))","(fma.f64 (*.f64 #s(literal 1/20160 binary64) x) x #s(literal 1/360 binary64))","(fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64))","(fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64))","(fma.f64 x (*.f64 #s(literal 1/20160 binary64) x) #s(literal 1/360 binary64))","(-.f64 (/.f64 (*.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))) (/.f64 #s(literal 1/129600 binary64) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal -1/360 binary64))))","(+.f64 (*.f64 (*.f64 x x) #s(literal 1/20160 binary64)) #s(literal 1/360 binary64))","(+.f64 #s(literal 1/360 binary64) (*.f64 (*.f64 x x) #s(literal 1/20160 binary64)))","(*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (pow.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (neg.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (neg.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64))) (pow.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 8 binary64))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 2 binary64)))","(/.f64 (exp.f64 (log.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (exp.f64 (log.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (exp.f64 (log.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (exp.f64 (log.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))))","(/.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64))))","(/.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64)))","(/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (+.f64 (exp.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal 4 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (/.f64 #s(literal 8 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 (log.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))))","(+.f64 #s(literal -2 binary64) (exp.f64 x))","(+.f64 (exp.f64 x) #s(literal -2 binary64))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":312.27392578125,"type":"rewrite"},{"compiler":[[37060,2966]],"memory":[[11284368,71143472]],"time":105.674072265625,"type":"eval"},{"alts":[["(fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64))","next",30.74148891950237,"binary64"],["(/.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64)) (exp.f64 x))","next",30.11400129474676,"binary64"],["(/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))) (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64))))","fresh",30.61638944434054,"binary64"],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","done",30.67130390982156,"binary64"],["(*.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x)) (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","fresh",30.68281045218611,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (*.f64 (*.f64 x x) (*.f64 x x)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x))))","next",0.27007111393323374,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x))))","done",0.27397736393323374,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x)))","next",0.32589984849379083,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 #s(literal 1/12 binary64) (*.f64 (*.f64 x x) (*.f64 x x)))))","next",0.45197503993420624,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","done",0.831676380773911,"binary64"]],"compiler":[[5,5],[11,7],[27,16],[8,7],[17,9],[31,20],[31,18],[22,15],[21,13],[12,9],[5,5],[11,7],[27,16],[17,9],[31,20],[22,15],[21,13]],"count":[[825,10]],"kept":[{"done":[2,2],"fresh":[4,4],"new":[814,3],"picked":[5,1]}],"memory":[[-1875968,33468096]],"min-error":[[0.0,"binary64"]],"time":19.95703125,"type":"prune"},{"egraph":[[0,8128,195,0.069235745],[8,6082,195,0.022729912],[7,3284,195,0.02660372],[6,1814,195,0.017676981],[5,1071,195,0.007876906],[4,757,195,0.004768244],[3,427,195,0.002697774],[2,209,204,0.00160379],[1,105,214,0.000794195],[0,58,224,0.000580312],[0,34,232,0.000360828]],"inputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (*.f64 (*.f64 x x) (*.f64 x x)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x))))","(fma.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (*.f64 (*.f64 x x) (*.f64 x x)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))","(pow.f64 x #s(literal 4 binary64))","x","#s(literal 4 binary64)","#s(literal 1/20160 binary64)","#s(literal 1/12 binary64)","(*.f64 (*.f64 x x) (*.f64 x x))","(*.f64 x x)","(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x))","(pow.f64 x #s(literal 6 binary64))","#s(literal 6 binary64)","#s(literal 1/360 binary64)","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 #s(literal 1/12 binary64) (*.f64 (*.f64 x x) (*.f64 x x)))))","(fma.f64 x x (*.f64 #s(literal 1/12 binary64) (*.f64 (*.f64 x x) (*.f64 x x))))","x","(*.f64 #s(literal 1/12 binary64) (*.f64 (*.f64 x x) (*.f64 x x)))","#s(literal 1/12 binary64)","(*.f64 (*.f64 x x) (*.f64 x x))","(*.f64 x x)","(fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64))","#s(literal 2 binary64)","(cosh.f64 x)","x","#s(literal -2 binary64)","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x)))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x))","(pow.f64 x #s(literal 4 binary64))","x","#s(literal 4 binary64)","(fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64))","#s(literal 1/360 binary64)","(*.f64 x x)","#s(literal 1/12 binary64)","(/.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64)) (exp.f64 x))","(fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 x)","x","#s(literal 2 binary64)","#s(literal 1 binary64)"]],"locations":[["(exp.f64 x)","cost-diff",0],["(-.f64 (exp.f64 x) #s(literal 2 binary64))","cost-diff",0],["(fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64))","cost-diff",0],["(/.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64)) (exp.f64 x))","cost-diff",0],["(fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64))","cost-diff",0],["(pow.f64 x #s(literal 4 binary64))","cost-diff",0],["(fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x))","cost-diff",0],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x)))","cost-diff",0],["(cosh.f64 x)","cost-diff",0],["(fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64))","cost-diff",0],["(*.f64 #s(literal 1/12 binary64) (*.f64 (*.f64 x x) (*.f64 x x)))","cost-diff",0],["(fma.f64 x x (*.f64 #s(literal 1/12 binary64) (*.f64 (*.f64 x x) (*.f64 x x))))","cost-diff",0],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 #s(literal 1/12 binary64) (*.f64 (*.f64 x x) (*.f64 x x)))))","cost-diff",0],["(*.f64 (*.f64 x x) (*.f64 x x))","cost-diff",4],["(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))","cost-diff",0],["(fma.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (*.f64 (*.f64 x x) (*.f64 x x)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)))","cost-diff",0],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (*.f64 (*.f64 x x) (*.f64 x x)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x))))","cost-diff",0],["(*.f64 (*.f64 x x) (*.f64 x x))","cost-diff",4]],"memory":[[-2042256,32604160]],"method":["egg-herbie"],"outputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (*.f64 (*.f64 x x) (*.f64 x x)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 (fma.f64 (pow.f64 x #s(literal 7 binary64)) #s(literal 1/20160 binary64) (fma.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64) x))) x))","(fma.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (*.f64 (*.f64 x x) (*.f64 x x)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 7 binary64)) #s(literal 1/20160 binary64) (fma.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64) x))) x)","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))","(fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64))","(pow.f64 x #s(literal 4 binary64))","x","#s(literal 4 binary64)","#s(literal 1/20160 binary64)","#s(literal 1/12 binary64)","(*.f64 (*.f64 x x) (*.f64 x x))","(pow.f64 x #s(literal 4 binary64))","(*.f64 x x)","(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x))","(*.f64 (fma.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal 1/360 binary64) x) x)","(pow.f64 x #s(literal 6 binary64))","#s(literal 6 binary64)","#s(literal 1/360 binary64)","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 #s(literal 1/12 binary64) (*.f64 (*.f64 x x) (*.f64 x x)))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(fma.f64 x x (*.f64 #s(literal 1/12 binary64) (*.f64 (*.f64 x x) (*.f64 x x))))","(fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))","x","(*.f64 #s(literal 1/12 binary64) (*.f64 (*.f64 x x) (*.f64 x x)))","(*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))","#s(literal 1/12 binary64)","(*.f64 (*.f64 x x) (*.f64 x x))","(pow.f64 x #s(literal 4 binary64))","(*.f64 x x)","(fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64))","(fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal -2 binary64))","#s(literal 2 binary64)","(cosh.f64 x)","x","#s(literal -2 binary64)","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (fma.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal 1/360 binary64) x) x (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x))","(fma.f64 (fma.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal 1/360 binary64) x) x (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))))","(pow.f64 x #s(literal 4 binary64))","x","#s(literal 4 binary64)","(fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64))","#s(literal 1/360 binary64)","(*.f64 x x)","#s(literal 1/12 binary64)","(/.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64)) (exp.f64 x))","(fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 x)","x","#s(literal 2 binary64)","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":242.092041015625,"type":"simplify"},{"compiler":[[196,38]],"locations":[["(exp.f64 x)","accuracy",0.0],["(/.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64)) (exp.f64 x))","accuracy",0.025722509768442016],["(-.f64 (exp.f64 x) #s(literal 2 binary64))","accuracy",0.03125],["(fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64))","accuracy",30.443987653211867],["(fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x))","accuracy",0.00390625],["(pow.f64 x #s(literal 4 binary64))","accuracy",0.00390625],["(fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64))","accuracy",0.01953125],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x)))","accuracy",0.32199359849379083],["(cosh.f64 x)","accuracy",0.0],["(fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64))","accuracy",30.74148891950237],["(*.f64 x x)","accuracy",0.0],["(*.f64 (*.f64 x x) (*.f64 x x))","accuracy",0.10546875],["(*.f64 #s(literal 1/12 binary64) (*.f64 (*.f64 x x) (*.f64 x x)))","accuracy",0.11328125],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 #s(literal 1/12 binary64) (*.f64 (*.f64 x x) (*.f64 x x)))))","accuracy",0.45197503993420624],["(fma.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (*.f64 (*.f64 x x) (*.f64 x x)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)))","accuracy",0.0078125],["(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))","accuracy",0.0078125],["(*.f64 (*.f64 x x) (*.f64 x x))","accuracy",0.10546875],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (*.f64 (*.f64 x x) (*.f64 x x)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x))))","accuracy",0.26616486393323374]],"memory":[[-2049744,64289312]],"mixsample":[[27.774658203125,"adjust",800],[6.338623046875,"ival-div",0],[7.105224609375,"ival-exp",0],[1.3974609375,"ival-sub",1600],[3.73388671875,"ival-cosh",0],[0.223388671875,"ival-assert",0],[1.97216796875,"ival-sub",0],[24.35107421875,"ival-exp",400],[1.880126953125,"ival-sub",400],[19.77685546875,"const",0],[34.605224609375,"ival-cosh",1600],[19.97509765625,"adjust",2000],[9.973388671875,"ival-pow",0],[29.503662109375,"ival-add",0],[27.605224609375,"ival-mult",0],[4.054931640625,"ival-mult",400],[6.21826171875,"ival-cosh",400],[3.980712890625,"ival-mult",1600],[0.3515625,"ival-true",0],[48.804931640625,"ival-exp",1600],[1.011962890625,"exact",0],[1.529541015625,"ival-neg",0]],"outcomes":[[58.2275390625,1,"valid",67],[284.867431640625,2,"valid",183],[2.47412109375,0,"valid",6]],"time":402.85693359375,"type":"localize"},{"count":[[18,43]],"inputs":[["(*.f64 (*.f64 x x) (*.f64 x x))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (*.f64 (*.f64 x x) (*.f64 x x)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x))))","(fma.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (*.f64 (*.f64 x x) (*.f64 x x)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 #s(literal 1/12 binary64) (*.f64 (*.f64 x x) (*.f64 x x)))))","(fma.f64 x x (*.f64 #s(literal 1/12 binary64) (*.f64 (*.f64 x x) (*.f64 x x))))","(*.f64 #s(literal 1/12 binary64) (*.f64 (*.f64 x x) (*.f64 x x)))","(fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64))","(cosh.f64 x)","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x)))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x))","(pow.f64 x #s(literal 4 binary64))","(fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64))","(/.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64)) (exp.f64 x))","(fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 x)","(*.f64 x x)"]],"memory":[[5425824,5425824]],"outputs":[["(pow x 4)","(pow x 2)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","1/12","(+ 1/12 (* 1/20160 (pow x 4)))","(* 1/12 (pow x 4))","1","(+ 1 (* 1/2 (pow x 2)))","(+ 1 (* (pow x 2) (+ 1/2 (* 1/24 (pow x 2)))))","(+ 1 (* (pow x 2) (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/720 (pow x 2)))))))","(+ 1/12 (* 1/360 (pow x 2)))","(* (pow x 2) (+ 1 x))","(* (pow x 2) (+ 1 (* x (+ 1 (* 7/12 x)))))","(* (pow x 2) (+ 1 (* x (+ 1 (* x (+ 7/12 (* 1/4 x)))))))","-1","(- x 1)","(- (* x (+ 1 (* 1/2 x))) 1)","(- (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))) 1)","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(- (+ (exp x) (exp (neg x))) 2)","(* 1/20160 (pow x 8))","(* (pow x 8) (+ 1/20160 (* 1/360 (/ 1 (pow x 2)))))","(* (pow x 8) (+ 1/20160 (+ (/ 1/12 (pow x 4)) (* 1/360 (/ 1 (pow x 2))))))","(* (pow x 8) (+ 1/20160 (+ (/ 1/12 (pow x 4)) (+ (* 1/360 (/ 1 (pow x 2))) (/ 1 (pow x 6))))))","(* 1/20160 (pow x 4))","(* (pow x 4) (+ 1/20160 (* 1/12 (/ 1 (pow x 4)))))","(* (pow x 4) (+ 1/12 (/ 1 (pow x 2))))","(- (+ (exp x) (/ 1 (exp x))) 2)","(* 1/2 (+ (exp x) (/ 1 (exp x))))","(* 1/360 (pow x 6))","(* (pow x 6) (+ 1/360 (* 1/12 (/ 1 (pow x 2)))))","(* (pow x 6) (+ 1/360 (+ (* 1/12 (/ 1 (pow x 2))) (/ 1 (pow x 4)))))","(* 1/360 (pow x 2))","(* (pow x 2) (+ 1/360 (* 1/12 (/ 1 (pow x 2)))))","(/ (+ 1 (* (exp x) (- (exp x) 2))) (exp x))","(+ 1 (* (exp x) (- (exp x) 2)))","(- (exp x) 2)","(exp x)","(- (+ (exp x) (exp (* -1 x))) 2)"]],"series":[[8.304931640625,"((* (* x x) (* x x)) (+ (- (exp x) 2) (exp (neg x))) (+ (* (+ (* (pow x 4) 1/20160) 1/12) (* (* x x) (* x x))) (+ (* (pow x 6) 1/360) (* x x))) (+ (* (pow x 4) 1/20160) 1/12) (+ (- (exp x) 2) (exp (neg x))) (+ (* x x) (* 1/12 (* (* x x) (* x x)))) (* 1/12 (* (* x x) (* x x))) (+ (* 2 (cosh x)) -2) (cosh x) (+ (- (exp x) 2) (exp (neg x))) (+ (* (pow x 4) (+ (* 1/360 (* x x)) 1/12)) (* x x)) (pow x 4) (+ (* 1/360 (* x x)) 1/12) (/ (+ (* (- (exp x) 2) (exp x)) 1) (exp x)) (+ (* (- (exp x) 2) (exp x)) 1) (- (exp x) 2) (exp x) (* x x))","x","-inf"],[10.35498046875,"((* (* x x) (* x x)) (+ (- (exp x) 2) (exp (neg x))) (+ (* (+ (* (pow x 4) 1/20160) 1/12) (* (* x x) (* x x))) (+ (* (pow x 6) 1/360) (* x x))) (+ (* (pow x 4) 1/20160) 1/12) (+ (- (exp x) 2) (exp (neg x))) (+ (* x x) (* 1/12 (* (* x x) (* x x)))) (* 1/12 (* (* x x) (* x x))) (+ (* 2 (cosh x)) -2) (cosh x) (+ (- (exp x) 2) (exp (neg x))) (+ (* (pow x 4) (+ (* 1/360 (* x x)) 1/12)) (* x x)) (pow x 4) (+ (* 1/360 (* x x)) 1/12) (/ (+ (* (- (exp x) 2) (exp x)) 1) (exp x)) (+ (* (- (exp x) 2) (exp x)) 1) (- (exp x) 2) (exp x) (* x x))","x","inf"],[3.5849609375,"((* (* x x) (* x x)) (+ (- (exp x) 2) (exp (neg x))) (+ (* (+ (* (pow x 4) 1/20160) 1/12) (* (* x x) (* x x))) (+ (* (pow x 6) 1/360) (* x x))) (+ (* (pow x 4) 1/20160) 1/12) (+ (- (exp x) 2) (exp (neg x))) (+ (* x x) (* 1/12 (* (* x x) (* x x)))) (* 1/12 (* (* x x) (* x x))) (+ (* 2 (cosh x)) -2) (cosh x) (+ (- (exp x) 2) (exp (neg x))) (+ (* (pow x 4) (+ (* 1/360 (* x x)) 1/12)) (* x x)) (pow x 4) (+ (* 1/360 (* x x)) 1/12) (/ (+ (* (- (exp x) 2) (exp x)) 1) (exp x)) (+ (* (- (exp x) 2) (exp x)) 1) (- (exp x) 2) (exp x) (* x x))","x","0"]],"time":23.889892578125,"type":"series"},{"count":[[43,43]],"egraph":[[0,8002,332,0.154367424],[6,7983,376,0.021909927],[5,6450,376,0.032625901],[4,3802,378,0.026537718],[3,2406,378,0.027647374],[2,912,378,0.011019571],[1,369,388,0.003392832],[0,122,388,0.001466557]],"inputs":[["(pow x 4)","(pow x 2)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","1/12","(+ 1/12 (* 1/20160 (pow x 4)))","(* 1/12 (pow x 4))","1","(+ 1 (* 1/2 (pow x 2)))","(+ 1 (* (pow x 2) (+ 1/2 (* 1/24 (pow x 2)))))","(+ 1 (* (pow x 2) (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/720 (pow x 2)))))))","(+ 1/12 (* 1/360 (pow x 2)))","(* (pow x 2) (+ 1 x))","(* (pow x 2) (+ 1 (* x (+ 1 (* 7/12 x)))))","(* (pow x 2) (+ 1 (* x (+ 1 (* x (+ 7/12 (* 1/4 x)))))))","-1","(- x 1)","(- (* x (+ 1 (* 1/2 x))) 1)","(- (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))) 1)","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(- (+ (exp x) (exp (neg x))) 2)","(* 1/20160 (pow x 8))","(* (pow x 8) (+ 1/20160 (* 1/360 (/ 1 (pow x 2)))))","(* (pow x 8) (+ 1/20160 (+ (/ 1/12 (pow x 4)) (* 1/360 (/ 1 (pow x 2))))))","(* (pow x 8) (+ 1/20160 (+ (/ 1/12 (pow x 4)) (+ (* 1/360 (/ 1 (pow x 2))) (/ 1 (pow x 6))))))","(* 1/20160 (pow x 4))","(* (pow x 4) (+ 1/20160 (* 1/12 (/ 1 (pow x 4)))))","(* (pow x 4) (+ 1/12 (/ 1 (pow x 2))))","(- (+ (exp x) (/ 1 (exp x))) 2)","(* 1/2 (+ (exp x) (/ 1 (exp x))))","(* 1/360 (pow x 6))","(* (pow x 6) (+ 1/360 (* 1/12 (/ 1 (pow x 2)))))","(* (pow x 6) (+ 1/360 (+ (* 1/12 (/ 1 (pow x 2))) (/ 1 (pow x 4)))))","(* 1/360 (pow x 2))","(* (pow x 2) (+ 1/360 (* 1/12 (/ 1 (pow x 2)))))","(/ (+ 1 (* (exp x) (- (exp x) 2))) (exp x))","(+ 1 (* (exp x) (- (exp x) 2)))","(- (exp x) 2)","(exp x)","(- (+ (exp x) (exp (* -1 x))) 2)"]],"memory":[[-7827344,45674624]],"method":["egg-herbie"],"outputs":[["(pow x 4)","(pow.f64 x #s(literal 4 binary64))","(pow x 2)","(*.f64 x x)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) x)","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (*.f64 x x) #s(literal 1/12 binary64)) x) x)","1/12","#s(literal 1/12 binary64)","(+ 1/12 (* 1/20160 (pow x 4)))","(fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64))","(* 1/12 (pow x 4))","(*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))","1","#s(literal 1 binary64)","(+ 1 (* 1/2 (pow x 2)))","(fma.f64 #s(literal 1/2 binary64) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (+ 1/2 (* 1/24 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/720 (pow x 2)))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1/12 (* 1/360 (pow x 2)))","(fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64))","(* (pow x 2) (+ 1 x))","(*.f64 (fma.f64 x x x) x)","(* (pow x 2) (+ 1 (* x (+ 1 (* 7/12 x)))))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/12 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64)) x) x)","(* (pow x 2) (+ 1 (* x (+ 1 (* x (+ 7/12 (* 1/4 x)))))))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 7/12 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64)) x) x)","-1","#s(literal -1 binary64)","(- x 1)","(-.f64 x #s(literal 1 binary64))","(- (* x (+ 1 (* 1/2 x))) 1)","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64))","(- (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64))","(+ 1 x)","(-.f64 x #s(literal -1 binary64))","(+ 1 (* x (+ 1 (* 1/2 x))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(- (+ (exp x) (exp (neg x))) 2)","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))","(* 1/20160 (pow x 8))","(*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))","(* (pow x 8) (+ 1/20160 (* 1/360 (/ 1 (pow x 2)))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)))","(* (pow x 8) (+ 1/20160 (+ (/ 1/12 (pow x 4)) (* 1/360 (/ 1 (pow x 2))))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))","(* (pow x 8) (+ 1/20160 (+ (/ 1/12 (pow x 4)) (+ (* 1/360 (/ 1 (pow x 2))) (/ 1 (pow x 6))))))","(fma.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64) x) x (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))))","(* 1/20160 (pow x 4))","(*.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ 1/20160 (* 1/12 (/ 1 (pow x 4)))))","(fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64))","(* (pow x 4) (+ 1/12 (/ 1 (pow x 2))))","(fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))","(- (+ (exp x) (/ 1 (exp x))) 2)","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))","(* 1/2 (+ (exp x) (/ 1 (exp x))))","(fma.f64 #s(literal 1/2 binary64) (exp.f64 x) (/.f64 #s(literal 1/2 binary64) (exp.f64 x)))","(* 1/360 (pow x 6))","(*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64))","(* (pow x 6) (+ 1/360 (* 1/12 (/ 1 (pow x 2)))))","(*.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 6) (+ 1/360 (+ (* 1/12 (/ 1 (pow x 2))) (/ 1 (pow x 4)))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) x)","(* 1/360 (pow x 2))","(*.f64 #s(literal 1/360 binary64) (*.f64 x x))","(* (pow x 2) (+ 1/360 (* 1/12 (/ 1 (pow x 2)))))","(fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64))","(/ (+ 1 (* (exp x) (- (exp x) 2))) (exp x))","(/.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64)) (exp.f64 x))","(+ 1 (* (exp x) (- (exp x) 2)))","(fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64))","(- (exp x) 2)","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp x)","(exp.f64 x)","(- (+ (exp x) (exp (* -1 x))) 2)","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))"]],"stop":[["iter limit",1],["node limit",1]],"time":505.129150390625,"type":"simplify"},{"count":[[18,530]],"egraph":[[0,8316,154,0.088256598],[2,1911,154,0.038048521],[1,243,154,0.006776603],[0,58,163,0.001948229],[0,34,187,0.000341528]],"inputs":[["(*.f64 (*.f64 x x) (*.f64 x x))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (*.f64 (*.f64 x x) (*.f64 x x)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x))))","(fma.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (*.f64 (*.f64 x x) (*.f64 x x)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 #s(literal 1/12 binary64) (*.f64 (*.f64 x x) (*.f64 x x)))))","(fma.f64 x x (*.f64 #s(literal 1/12 binary64) (*.f64 (*.f64 x x) (*.f64 x x))))","(*.f64 #s(literal 1/12 binary64) (*.f64 (*.f64 x x) (*.f64 x x)))","(fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64))","(cosh.f64 x)","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x)))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x))","(pow.f64 x #s(literal 4 binary64))","(fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64))","(/.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64)) (exp.f64 x))","(fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 x)","(*.f64 x x)"]],"memory":[[1071056,67095264]],"outputs":[["(*.f64 (pow.f64 x #s(literal 3 binary64)) x)","(*.f64 (*.f64 x x) (*.f64 x x))","(*.f64 x (pow.f64 x #s(literal 3 binary64)))","(pow.f64 (exp.f64 #s(literal 4 binary64)) (log.f64 x))","(pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))","(pow.f64 (*.f64 x x) #s(literal 2 binary64))","(pow.f64 x #s(literal 4 binary64))","(exp.f64 (fma.f64 (log.f64 x) #s(literal 2 binary64) (*.f64 (log.f64 x) #s(literal 2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal 4 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x))))","(*.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) #s(literal 2 binary64))) (pow.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 12 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) (-.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (pow.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x))) (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) (-.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (pow.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64)))) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 12 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64))) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (fma.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 (fma.f64 x x (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))) #s(literal 3 binary64))) (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (*.f64 (fma.f64 x x (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 x x (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64)) (fma.f64 x x (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64))))))))","(/.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))) #s(literal 2 binary64)) (*.f64 (*.f64 x x) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 (-.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 x x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64))))) (neg.f64 (-.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (+.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 x x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 12 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) (-.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (pow.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64))) (-.f64 (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)))) (*.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) #s(literal 2 binary64)))) (*.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x))) (-.f64 (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64))) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)))))) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (-.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64)) (pow.f64 x #s(literal 4 binary64))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x))) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (neg.f64 (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (pow.f64 x #s(literal 4 binary64)))))) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64)) (pow.f64 x #s(literal 4 binary64))) (neg.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64)))))) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (neg.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (neg.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64)) (pow.f64 x #s(literal 4 binary64))) (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64)))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64)))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64)) (pow.f64 x #s(literal 4 binary64))) (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64)) (pow.f64 x #s(literal 4 binary64))) (/.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (/.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (-.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64)) (pow.f64 x #s(literal 4 binary64))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (neg.f64 (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (pow.f64 x #s(literal 4 binary64)))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64)) (pow.f64 x #s(literal 4 binary64))) (neg.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64)))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (neg.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64)) (pow.f64 x #s(literal 4 binary64))) (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64)))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64)))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64)) (pow.f64 x #s(literal 4 binary64))) (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64)) (pow.f64 x #s(literal 4 binary64))) (/.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (/.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64))) (-.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64))) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)))))) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (-.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64)))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x))) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (neg.f64 (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (pow.f64 x #s(literal 4 binary64)))))) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x)))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64))) (neg.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64)))))) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (neg.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (neg.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64))) (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64)))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64))) (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64)))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64))) (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64))) (/.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (/.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64))) (-.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (-.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64)))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (neg.f64 (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (pow.f64 x #s(literal 4 binary64)))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x)))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64))) (neg.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64)))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (neg.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64))) (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64)))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64))) (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64)))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64))) (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64))) (/.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (/.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)))) (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (*.f64 (-.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (-.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64))) (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (*.f64 (-.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64))) (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (-.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)))) (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (*.f64 (-.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64))) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64))))) (*.f64 (-.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64))) (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (*.f64 (-.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64))) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64))))) (*.f64 (-.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64))))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x))) (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x))) (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64))))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x))) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64))))) (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x))) (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x))) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64))))) (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64))))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (*.f64 (neg.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64)))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (neg.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64)))))) (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (*.f64 (neg.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64)))))) (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (neg.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64)))))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64))))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (*.f64 (neg.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64)))))) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64))))) (*.f64 (neg.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64)))))) (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (*.f64 (neg.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64)))))) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64))))) (*.f64 (neg.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64)))))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64))))))","(/.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x)) (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64))))))","(/.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x)) (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64))))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64))))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64))))) (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64))))) (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64))))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (*.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (*.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64))))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (*.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64))))) (*.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (*.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64))))) (*.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64))))) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64))))) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (*.f64 (/.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (/.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (*.f64 (/.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (/.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (*.f64 (/.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64))))) (*.f64 (/.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (*.f64 (/.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64))))) (*.f64 (/.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 x x)))","(/.f64 (-.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64)))) (-.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (+.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) (+.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 x x)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 12 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 12 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) (-.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (pow.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) #s(literal 2 binary64))) (-.f64 (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x))) (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) (-.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (pow.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64)))) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 12 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) #s(literal 3 binary64))))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 12 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x))))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 12 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) #s(literal 3 binary64))) (fma.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) (-.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (pow.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x))) (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) (-.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (pow.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64)))) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 12 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) #s(literal 3 binary64)))))","(fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) x)) x (fma.f64 x x (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/360 binary64)) (*.f64 x x) (fma.f64 x x (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(fma.f64 (*.f64 (*.f64 #s(literal 1/360 binary64) (*.f64 x x)) (pow.f64 x #s(literal 3 binary64))) x (fma.f64 x x (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(fma.f64 (*.f64 (*.f64 #s(literal 1/360 binary64) (*.f64 x x)) x) (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(fma.f64 (*.f64 (*.f64 #s(literal 1/360 binary64) (*.f64 x x)) (*.f64 x x)) (*.f64 x x) (fma.f64 x x (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(fma.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(fma.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) x) x) x) x (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 3 binary64))) x (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) x) (pow.f64 x #s(literal 3 binary64)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)))","(fma.f64 (*.f64 #s(literal 1/360 binary64) x) (*.f64 x (pow.f64 x #s(literal 4 binary64))) (fma.f64 x x (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) x) x) (*.f64 x x) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 x (*.f64 #s(literal 1/360 binary64) (*.f64 x x))) (fma.f64 x x (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/360 binary64)) (fma.f64 x x (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 x (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)))","(fma.f64 (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x)) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64))))","(fma.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 x x (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(fma.f64 (*.f64 #s(literal 1/360 binary64) (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (fma.f64 x x (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(fma.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (*.f64 x x)) (fma.f64 x x (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)))","(fma.f64 (*.f64 x x) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 x x (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(fma.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 #s(literal 1/360 binary64) (*.f64 x x))) (fma.f64 x x (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(fma.f64 (*.f64 x x) (*.f64 (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) x) x) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)))","(fma.f64 x (*.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1/360 binary64) (*.f64 x x))) (fma.f64 x x (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(fma.f64 x (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)))","(fma.f64 x x (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))) #s(literal 2 binary64)) (-.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 x x))) (/.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 x x))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64))))) (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64))) (-.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64))))))","(-.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64))) (-.f64 (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)))) (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)))))","(+.f64 (fma.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64)))","(+.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 x x))","(+.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64)) (fma.f64 x x (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(+.f64 (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)))","(+.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64))))","(+.f64 (*.f64 x x) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(*.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64)) (pow.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64)) (pow.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 1/144 binary64) (*.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64))))) (neg.f64 (-.f64 #s(literal 1/12 binary64) (*.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64))) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) #s(literal 1/144 binary64))) (*.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64))))","(/.f64 (-.f64 #s(literal 1/144 binary64) (*.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)))) (-.f64 #s(literal 1/12 binary64) (*.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64))) (neg.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64))) (neg.f64 (+.f64 #s(literal 1/144 binary64) (-.f64 (*.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64))) (neg.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64))))))","(/.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64)) (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64)))))","(/.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64)) (+.f64 #s(literal 1/144 binary64) (-.f64 (*.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))))","(/.f64 (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64)) (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/144 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/241920 binary64)))) (fma.f64 #s(literal 1/8193540096000 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64))))","(fma.f64 (*.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 3 binary64))) x #s(literal 1/12 binary64))","(fma.f64 (*.f64 #s(literal 1/20160 binary64) (*.f64 x x)) (*.f64 x x) #s(literal 1/12 binary64))","(fma.f64 (*.f64 #s(literal 1/20160 binary64) x) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 x #s(literal 1/20160 binary64)) #s(literal 1/12 binary64))","(fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64))","(fma.f64 (*.f64 x x) (*.f64 (*.f64 x x) #s(literal 1/20160 binary64)) #s(literal 1/12 binary64))","(fma.f64 x (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/20160 binary64)) #s(literal 1/12 binary64))","(-.f64 (/.f64 #s(literal 1/144 binary64) (-.f64 #s(literal 1/12 binary64) (*.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64))))) (/.f64 (*.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64))) (-.f64 #s(literal 1/12 binary64) (*.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64))))))","(-.f64 (/.f64 (*.f64 #s(literal 1/406425600 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64))) (/.f64 #s(literal 1/144 binary64) (fma.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/12 binary64))))","(+.f64 (*.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1/12 binary64))","(+.f64 #s(literal 1/12 binary64) (*.f64 #s(literal 1/20160 binary64) (pow.f64 x #s(literal 4 binary64))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal 1 binary64)) (*.f64 x x))","(*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (pow.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 (+.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 (-.f64 (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 x x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))))) (neg.f64 (neg.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (neg.f64 (+.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)))) (*.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 x x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)))) (neg.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (+.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (+.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (pow.f64 x #s(literal 4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))))","(fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 x x)) x) x (*.f64 x x))","(fma.f64 (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 3 binary64))) x (*.f64 x x))","(fma.f64 (*.f64 #s(literal 1/12 binary64) x) (pow.f64 x #s(literal 3 binary64)) (*.f64 x x))","(fma.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 x x)) (*.f64 x x) (*.f64 x x))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 x #s(literal 1/12 binary64)) (*.f64 x x))","(fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","(fma.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) (*.f64 x x)) (*.f64 x x))","(fma.f64 x (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64)) (*.f64 x x))","(fma.f64 x x (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))))","(-.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 x x))) (/.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 x x))))","(-.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) (/.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))))","(+.f64 (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 x x))","(+.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 x x)) x) x)","(*.f64 (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 3 binary64))) x)","(*.f64 (*.f64 #s(literal 1/12 binary64) x) (pow.f64 x #s(literal 3 binary64)))","(*.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 x x)) (*.f64 x x))","(*.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 x #s(literal 1/12 binary64)))","(*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64))","(*.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) (*.f64 x x)))","(*.f64 x (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64)))","(*.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)) (pow.f64 (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (pow.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64)) (pow.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64) (-.f64 #s(literal 4 binary64) (*.f64 (cosh.f64 x) #s(literal -4 binary64)))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64) #s(literal -4 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64) (-.f64 #s(literal 4 binary64) (*.f64 (cosh.f64 x) #s(literal -4 binary64)))) (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal -2 binary64) (exp.f64 (neg.f64 x))) #s(literal 3 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (*.f64 (+.f64 #s(literal -2 binary64) (exp.f64 (neg.f64 x))) (+.f64 #s(literal -2 binary64) (exp.f64 (neg.f64 x)))) (*.f64 (exp.f64 x) (+.f64 #s(literal -2 binary64) (exp.f64 (neg.f64 x)))))))","(/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (neg.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x)))) #s(literal 3 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (*.f64 (neg.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x)))) (neg.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))) (*.f64 (exp.f64 x) (neg.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)))) (neg.f64 (+.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 4 binary64) (pow.f64 (*.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal -2 binary64) (*.f64 (cosh.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)) (*.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)))) (neg.f64 (neg.f64 (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64)))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64) (-.f64 #s(literal 4 binary64) (*.f64 (cosh.f64 x) #s(literal -4 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))))) (neg.f64 (neg.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (exp.f64 x) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 1 binary64)))) (neg.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (exp.f64 x))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))))) (neg.f64 (*.f64 (exp.f64 x) (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (*.f64 (exp.f64 x) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))))) (neg.f64 (*.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 4 binary64))) (*.f64 (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) (*.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))) (*.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (exp.f64 x)) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (exp.f64 x) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x)))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (exp.f64 x)) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) #s(literal -1 binary64))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (exp.f64 x) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (exp.f64 x)))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (neg.f64 (exp.f64 x)) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (exp.f64 x) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x)))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (neg.f64 (exp.f64 x)) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (neg.f64 (exp.f64 x)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) #s(literal -1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (exp.f64 x)))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (neg.f64 (exp.f64 x)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal -1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (exp.f64 x) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (exp.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (exp.f64 x) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (exp.f64 x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (exp.f64 x)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))))) (*.f64 (neg.f64 (exp.f64 x)) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (*.f64 (neg.f64 (exp.f64 x)) (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))))) (*.f64 (neg.f64 (exp.f64 x)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64)) (*.f64 (neg.f64 (exp.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (neg.f64 (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal -2 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (exp.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (neg.f64 (exp.f64 x)) (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (*.f64 (neg.f64 (exp.f64 x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (neg.f64 (exp.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (*.f64 (neg.f64 (exp.f64 x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (neg.f64 (exp.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (*.f64 (neg.f64 (exp.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (exp.f64 x)) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (*.f64 (neg.f64 (exp.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (exp.f64 x)) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (exp.f64 x) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))))) (*.f64 (exp.f64 x) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (*.f64 (exp.f64 x) (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))))) (*.f64 (exp.f64 x) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64)) (*.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (*.f64 (exp.f64 x) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (*.f64 (exp.f64 x) #s(literal 1 binary64))) (*.f64 (exp.f64 x) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (*.f64 (exp.f64 x) #s(literal 1 binary64))) (*.f64 (exp.f64 x) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64))) (+.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 #s(literal 4 binary64) (pow.f64 (*.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 #s(literal -2 binary64) (*.f64 (cosh.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 3 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)) (*.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64) #s(literal -4 binary64))) (neg.f64 (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64))) (neg.f64 (+.f64 #s(literal 4 binary64) (-.f64 (pow.f64 (*.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (*.f64 (cosh.f64 x) #s(literal -4 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64))) (neg.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64) (-.f64 #s(literal 4 binary64) (*.f64 (cosh.f64 x) #s(literal -4 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))) (neg.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (exp.f64 x) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (exp.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (exp.f64 x) (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (*.f64 (exp.f64 x) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(/.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)) (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64) (-.f64 #s(literal 4 binary64) (*.f64 (cosh.f64 x) #s(literal -4 binary64)))) (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))))))","(/.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64)) (+.f64 #s(literal 4 binary64) (-.f64 (pow.f64 (*.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (*.f64 (cosh.f64 x) #s(literal -4 binary64)))))","(/.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64)) (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64) (-.f64 #s(literal 4 binary64) (*.f64 (cosh.f64 x) #s(literal -4 binary64)))))","(/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)))))","(/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))) (fma.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64) #s(literal -4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64) (-.f64 #s(literal 4 binary64) (*.f64 (cosh.f64 x) #s(literal -4 binary64)))) (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)))))","(fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (pow.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 x)))","(fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 x)))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal -2 binary64))","(fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))) (/.f64 (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)) (+.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(-.f64 (/.f64 #s(literal 4 binary64) (-.f64 #s(literal -2 binary64) (*.f64 (cosh.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 #s(literal -2 binary64) (*.f64 (cosh.f64 x) #s(literal 2 binary64)))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)) (*.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))))) (/.f64 (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)) (*.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))))))","(-.f64 (/.f64 (pow.f64 (*.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64))) (/.f64 #s(literal 4 binary64) (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))","(-.f64 (*.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))","(-.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))","(+.f64 (*.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64))","(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(+.f64 (exp.f64 x) (+.f64 #s(literal -2 binary64) (exp.f64 (neg.f64 x))))","(+.f64 (exp.f64 x) (neg.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x)))))","(+.f64 #s(literal -2 binary64) (*.f64 (cosh.f64 x) #s(literal 2 binary64)))","(+.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(*.f64 (*.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (/.f64 #s(literal 2 binary64) (*.f64 (cosh.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (*.f64 (cosh.f64 x) #s(literal 2 binary64)))) #s(literal 2 binary64))","(/.f64 (neg.f64 (*.f64 (cosh.f64 x) #s(literal 2 binary64))) #s(literal -2 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 2 binary64) (*.f64 (cosh.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (*.f64 (cosh.f64 x) #s(literal 2 binary64))))","(cosh.f64 x)","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))","(*.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 12 binary64)) (pow.f64 x #s(literal 6 binary64))) (pow.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 6 binary64))))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 12 binary64)) (pow.f64 x #s(literal 6 binary64)))) #s(literal -1 binary64))","(/.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 3 binary64))) (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (*.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))))","(/.f64 (+.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64))) (+.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/144 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64))))) (neg.f64 (-.f64 (*.f64 x x) (*.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 12 binary64)) (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 6 binary64))))))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64))) (fma.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (fma.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64)))) (-.f64 (*.f64 x x) (*.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 12 binary64)) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64))) (*.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 6 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 12 binary64)) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 6 binary64)))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 12 binary64)) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 12 binary64)) (pow.f64 x #s(literal 6 binary64))) (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64))) (*.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 12 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 12 binary64)) (pow.f64 x #s(literal 6 binary64)))))","(fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) x)) x (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/360 binary64)) (*.f64 x x) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(fma.f64 (*.f64 (*.f64 #s(literal 1/360 binary64) (*.f64 x x)) (pow.f64 x #s(literal 3 binary64))) x (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(fma.f64 (*.f64 (*.f64 #s(literal 1/360 binary64) (*.f64 x x)) x) (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(fma.f64 (*.f64 (*.f64 #s(literal 1/360 binary64) (*.f64 x x)) (*.f64 x x)) (*.f64 x x) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(fma.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 3 binary64))) x (*.f64 x x))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x)) (*.f64 x x) (*.f64 x x))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) (pow.f64 x #s(literal 3 binary64)) (*.f64 x x))","(fma.f64 (*.f64 #s(literal 1/360 binary64) x) (*.f64 x (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 x (*.f64 #s(literal 1/360 binary64) (*.f64 x x))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/360 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 x (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64))) (*.f64 x x))","(fma.f64 (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (neg.f64 x) x)) #s(literal -1 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))))","(fma.f64 (fma.f64 (pow.f64 x #s(literal 18 binary64)) #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 8 binary64))))) #s(literal -1 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(fma.f64 (*.f64 #s(literal 1/360 binary64) (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(fma.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))","(fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x))","(fma.f64 (*.f64 x x) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(fma.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 #s(literal 1/360 binary64) (*.f64 x x))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(fma.f64 (*.f64 x x) (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64))) (*.f64 x x))","(fma.f64 x (*.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1/360 binary64) (*.f64 x x))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(fma.f64 x (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64))) (*.f64 x x))","(fma.f64 x x (*.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64))))","(-.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 x x) (*.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64))))) (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64))) (-.f64 (*.f64 x x) (*.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64))))))","(-.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 8 binary64))) (fma.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))) (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))))","(+.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(+.f64 (*.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64))) (*.f64 x x))","(+.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))))","(+.f64 (*.f64 x x) (*.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (pow.f64 x #s(literal 3 binary64)) x)","(*.f64 (*.f64 x x) (*.f64 x x))","(*.f64 x (pow.f64 x #s(literal 3 binary64)))","(pow.f64 (exp.f64 #s(literal 4 binary64)) (log.f64 x))","(pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))","(pow.f64 (*.f64 x x) #s(literal 2 binary64))","(pow.f64 x #s(literal 4 binary64))","(exp.f64 (fma.f64 (log.f64 x) #s(literal 2 binary64) (*.f64 (log.f64 x) #s(literal 2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal 4 binary64)))","(*.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64)) (pow.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal -1/12 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)) (pow.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal 1/4320 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal 1/4320 binary64)))) (fma.f64 #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 1/144 binary64) (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (-.f64 #s(literal 1/12 binary64) (*.f64 #s(literal 1/360 binary64) (*.f64 x x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal -1/12 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal 1/4320 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal -1/12 binary64))) (*.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal -1/12 binary64)) #s(literal 1/144 binary64))) (*.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal -1/12 binary64))))","(/.f64 (-.f64 #s(literal 1/144 binary64) (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 #s(literal 1/12 binary64) (*.f64 #s(literal 1/360 binary64) (*.f64 x x))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64))) (neg.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal -1/12 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64))) (neg.f64 (+.f64 #s(literal 1/144 binary64) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal 1/4320 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64))) (neg.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal 1/4320 binary64))))))","(/.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64)) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal -1/12 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal 1/4320 binary64)))) (fma.f64 #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)))))","(/.f64 (fma.f64 #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)) (+.f64 #s(literal 1/144 binary64) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal 1/4320 binary64)))))","(/.f64 (fma.f64 #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)) (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal 1/4320 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal 1/4320 binary64)))) (fma.f64 #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64))))","(fma.f64 (*.f64 #s(literal 1/360 binary64) x) x #s(literal 1/12 binary64))","(fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64))","(fma.f64 (*.f64 x x) #s(literal 1/360 binary64) #s(literal 1/12 binary64))","(fma.f64 x (*.f64 #s(literal 1/360 binary64) x) #s(literal 1/12 binary64))","(-.f64 (/.f64 #s(literal 1/144 binary64) (-.f64 #s(literal 1/12 binary64) (*.f64 #s(literal 1/360 binary64) (*.f64 x x)))) (/.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal 1/12 binary64) (*.f64 #s(literal 1/360 binary64) (*.f64 x x)))))","(-.f64 (/.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal -1/12 binary64))) (/.f64 #s(literal 1/144 binary64) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal -1/12 binary64))))","(+.f64 (*.f64 #s(literal 1/360 binary64) (*.f64 x x)) #s(literal 1/12 binary64))","(+.f64 #s(literal 1/12 binary64) (*.f64 #s(literal 1/360 binary64) (*.f64 x x)))","(*.f64 (pow.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 (+.f64 (log.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))) x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (exp.f64 x) (+.f64 (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x))) (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64))) (pow.f64 (neg.f64 (exp.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64)) (exp.f64 x)) (/.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal -1 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (neg.f64 x)))","(*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64)) (exp.f64 x)))","(*.f64 (exp.f64 (neg.f64 x)) (pow.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (exp.f64 (neg.f64 x)) (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64)))","(pow.f64 (/.f64 (/.f64 (exp.f64 x) (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (exp.f64 x) (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 (log.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))) x) #s(literal 2 binary64))) (exp.f64 (neg.f64 x)))) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x)))) (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x))) (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (exp.f64 x)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64))))) (neg.f64 (neg.f64 (neg.f64 (exp.f64 x)))))","(/.f64 (neg.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 (log.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))) x) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x))) (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64))) (exp.f64 x))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 (log.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))) x) #s(literal 2 binary64))) (exp.f64 (neg.f64 x))) (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal -1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x))) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x))) (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64))))","(/.f64 (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (exp.f64 x))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (exp.f64 x))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (+.f64 (log.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))) x) #s(literal 2 binary64)))) (neg.f64 (*.f64 (exp.f64 x) (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (exp.f64 x) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x))) (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64))))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 (log.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))) x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x))) (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64))) (exp.f64 x)))","(/.f64 (expm1.f64 (*.f64 (+.f64 (log.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))) x) #s(literal 2 binary64))) (*.f64 (exp.f64 x) (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (exp.f64 x) (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (exp.f64 x) (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 (exp.f64 x) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x))) (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64))) (neg.f64 (exp.f64 x)))","(/.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64)) (exp.f64 x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (exp.f64 x) (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (exp.f64 x) (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (exp.f64 x) (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64))) (exp.f64 x)))","(neg.f64 (/.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64)) (neg.f64 (exp.f64 x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64)) (*.f64 (exp.f64 x) (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal -1 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (exp.f64 x) (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal -1 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (exp.f64 x))) (/.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64)) (neg.f64 (exp.f64 x))))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal -1 binary64))) (exp.f64 x)) (/.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (exp.f64 x)))","(exp.f64 (*.f64 (log.f64 (/.f64 (exp.f64 x) (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64)))) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 (+.f64 (log.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))) x) #s(literal 2 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x))) (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 (+.f64 (log.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))) x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x))) (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 (+.f64 (log.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))) x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x))) (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal -1 binary64))) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal -1 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (+.f64 (log.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))) x) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x))) (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64)))))","(/.f64 (expm1.f64 (*.f64 (+.f64 (log.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))) x) #s(literal 2 binary64))) (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 (+.f64 (log.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))) x) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x))) (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x))) (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 (+.f64 (log.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x))) (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))))","(fma.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 1 binary64))","(fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (exp.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64))","(fma.f64 (exp.f64 x) (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)))) (/.f64 (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)))","(*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (pow.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) #s(literal -1 binary64))","(/.f64 (+.f64 #s(literal -8 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 4 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) (exp.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (neg.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (neg.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64))) (pow.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 8 binary64))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 2 binary64)))","(/.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64))))","(/.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64)))","(/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (+.f64 (exp.f64 x) #s(literal 2 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal 4 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64))))) (/.f64 #s(literal 8 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64))))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal 4 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (/.f64 #s(literal 8 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(+.f64 (exp.f64 x) #s(literal -2 binary64))","(+.f64 #s(literal -2 binary64) (exp.f64 x))","(exp.f64 x)","(*.f64 x x)","(pow.f64 (*.f64 x x) #s(literal 1 binary64))","(pow.f64 x #s(literal 2 binary64))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":306.930908203125,"type":"rewrite"},{"compiler":[[21330,2126]],"memory":[[8894528,53387424]],"time":84.97998046875,"type":"eval"},{"alts":[["(fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64))","done",30.74148891950237,"binary64"],["(fma.f64 #s(literal 2 binary64) #s(approx (cosh x) (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal -2 binary64))","fresh",31.107238651093933,"binary64"],["(fma.f64 #s(literal 2 binary64) #s(approx (cosh x) (fma.f64 #s(literal 1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) #s(literal -2 binary64))","fresh",31.253983986234214,"binary64"],["(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 4 binary64))) (*.f64 (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64))))","fresh",30.720360200584697,"binary64"],["(/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))) (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64))))","fresh",30.61638944434054,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 (exp.f64 x) (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64))))","fresh",30.1127354189292,"binary64"],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","done",30.67130390982156,"binary64"],["(*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (neg.f64 x)))","fresh",30.114049383561007,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (*.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x)) (*.f64 x x) (*.f64 x x)))","fresh",0.32589984849379083,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 #s(literal 1/12 binary64) (*.f64 (*.f64 x x) (*.f64 x x)))))","done",0.45197503993420624,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (*.f64 x x) #s(literal 1/12 binary64)) x) x))","fresh",0.27788361393323374,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal 1 binary64)) (*.f64 x x)))","fresh",0.45197503993420624,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","done",0.831676380773911,"binary64"]],"compiler":[[538,118],[5,5],[17,12],[12,10],[32,12],[27,16],[13,8],[8,7],[12,9],[26,14],[21,13],[27,18],[19,13],[12,9]],"count":[[620,13]],"kept":[{"done":[3,2],"fresh":[2,1],"new":[610,8],"picked":[5,2]}],"memory":[[-10319728,28886064]],"min-error":[[0.0,"binary64"]],"time":68.388916015625,"type":"prune"},{"accuracy":[0.27007111393323374],"baseline":[0.27007111393323374],"branch":[["x",0.27007111393323374,1,"binary64"],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))",0.27007111393323374,1,"binary64"]],"compiler":[[1,1],[8,7]],"count":[[28,1]],"inputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","(fma.f64 #s(literal 2 binary64) #s(approx (cosh x) (fma.f64 #s(literal 1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) #s(literal -2 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal 1 binary64)) (*.f64 x x)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 #s(literal 1/12 binary64) (*.f64 (*.f64 x x) (*.f64 x x)))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)))","(fma.f64 #s(literal 2 binary64) #s(approx (cosh x) (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal -2 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (*.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x)) (*.f64 x x) (*.f64 x x)))","(fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (*.f64 x x) #s(literal 1/12 binary64)) x) x))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x))))","(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (exp.f64 x)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (*.f64 (*.f64 x x) (*.f64 x x)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x))))","(*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (neg.f64 x)))","(/.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64)) (exp.f64 x))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (exp.f64 x) (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 1 binary64))))","(fma.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -2 binary64))) (exp.f64 (neg.f64 x)))","(*.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x)) (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x)) (*.f64 (exp.f64 x) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 x)) (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 4 binary64))) (*.f64 (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64))))","(/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))) (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64))))"]],"memory":[[226464,8292192]],"oracle":[61.08390057482422],"outputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (*.f64 (*.f64 x x) (*.f64 x x)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x))))"]],"repr":["binary64"],"time":16.1640625,"times":[[6.424072265625,"x"],[6.681884765625,"(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))"]],"type":"regimes"},{"accuracy":[0.27397736393323374],"baseline":[0.27397736393323374],"branch":[["x",0.27397736393323374,1,"binary64"],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))",0.27397736393323374,1,"binary64"]],"compiler":[[1,1],[8,7]],"count":[[17,1]],"inputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","(fma.f64 #s(literal 2 binary64) #s(approx (cosh x) (fma.f64 #s(literal 1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) #s(literal -2 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal 1 binary64)) (*.f64 x x)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 #s(literal 1/12 binary64) (*.f64 (*.f64 x x) (*.f64 x x)))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)))","(fma.f64 #s(literal 2 binary64) #s(approx (cosh x) (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal -2 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (*.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x)) (*.f64 x x) (*.f64 x x)))","(fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (*.f64 x x) #s(literal 1/12 binary64)) x) x))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x))))","(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (exp.f64 x)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))"]],"memory":[[5769024,5769024]],"oracle":[31.258704078484932],"outputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x))))"]],"repr":["binary64"],"time":11.632080078125,"times":[[5.527099609375,"x"],[4.875,"(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))"]],"type":"regimes"},{"accuracy":[0.27788361393323374],"baseline":[0.27788361393323374],"branch":[["x",0.27788361393323374,1,"binary64"],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))",0.27788361393323374,1,"binary64"]],"compiler":[[1,1],[8,7]],"count":[[12,1]],"inputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","(fma.f64 #s(literal 2 binary64) #s(approx (cosh x) (fma.f64 #s(literal 1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) #s(literal -2 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal 1 binary64)) (*.f64 x x)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 #s(literal 1/12 binary64) (*.f64 (*.f64 x x) (*.f64 x x)))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)))","(fma.f64 #s(literal 2 binary64) #s(approx (cosh x) (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal -2 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (*.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x)) (*.f64 x x) (*.f64 x x)))","(fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (*.f64 x x) #s(literal 1/12 binary64)) x) x))"]],"memory":[[-3937552,4784816]],"oracle":[31.253983986234232],"outputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (*.f64 x x) #s(literal 1/12 binary64)) x) x))"]],"repr":["binary64"],"time":8.0859375,"times":[[3.109130859375,"x"],[4.076171875,"(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))"]],"type":"regimes"},{"accuracy":[0.32589984849379083],"baseline":[0.32589984849379083],"branch":[["x",0.32589984849379083,1,"binary64"],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))",0.32589984849379083,1,"binary64"]],"compiler":[[1,1],[8,7]],"count":[[11,1]],"inputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","(fma.f64 #s(literal 2 binary64) #s(approx (cosh x) (fma.f64 #s(literal 1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) #s(literal -2 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal 1 binary64)) (*.f64 x x)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 #s(literal 1/12 binary64) (*.f64 (*.f64 x x) (*.f64 x x)))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)))","(fma.f64 #s(literal 2 binary64) #s(approx (cosh x) (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal -2 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (*.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x)) (*.f64 x x) (*.f64 x x)))","(fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x)))"]],"memory":[[4591536,4591536]],"oracle":[31.253983986234232],"outputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (*.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x)) (*.f64 x x) (*.f64 x x)))"]],"repr":["binary64"],"time":6.428955078125,"times":[[2.946044921875,"x"],[2.674072265625,"(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))"]],"type":"regimes"},{"accuracy":[0.4519750399342062],"baseline":[0.45197503993420624],"branch":[["x",0.4519750399342062,1,"binary64"],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))",0.4519750399342062,1,"binary64"]],"compiler":[[1,1],[8,7]],"count":[[6,1]],"inputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","(fma.f64 #s(literal 2 binary64) #s(approx (cosh x) (fma.f64 #s(literal 1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) #s(literal -2 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal 1 binary64)) (*.f64 x x)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 #s(literal 1/12 binary64) (*.f64 (*.f64 x x) (*.f64 x x)))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)))","(fma.f64 #s(literal 2 binary64) #s(approx (cosh x) (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal -2 binary64))"]],"memory":[[-4570832,3701296]],"oracle":[31.253983986234232],"outputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal 1 binary64)) (*.f64 x x)))"]],"repr":["binary64"],"time":5.12109375,"times":[[2.373046875,"x"],[2.142822265625,"(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))"]],"type":"regimes"},{"accuracy":[0.831676380773911],"baseline":[0.831676380773911],"branch":[["x",0.831676380773911,1,"binary64"],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))",0.831676380773911,1,"binary64"]],"compiler":[[1,1],[8,7]],"count":[[2,1]],"inputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","(fma.f64 #s(literal 2 binary64) #s(approx (cosh x) (fma.f64 #s(literal 1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) #s(literal -2 binary64))"]],"link":["."],"memory":[[2805120,2805120]],"name":["exp2 (problem 3.3.7)"],"oracle":[31.253983986234232],"outputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))"]],"repr":["binary64"],"time":2.656982421875,"times":[[1.171875,"x"],[1.0849609375,"(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))"]],"type":"regimes"},{"egraph":[[9,7309,146,0.025339428],[8,4182,146,0.032680387],[7,1954,146,0.016096123],[6,763,146,0.011222645],[5,338,146,0.005209448],[4,167,146,0.002499626],[3,98,146,0.001221585],[2,66,146,0.00083976],[1,50,146,0.000771833],[0,39,146,0.000683869]],"inputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (*.f64 (*.f64 x x) (*.f64 x x)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (*.f64 x x) #s(literal 1/12 binary64)) x) x))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (*.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x)) (*.f64 x x) (*.f64 x x)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal 1 binary64)) (*.f64 x x)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))"]],"memory":[[-4516560,11536176]],"method":["egg-herbie"],"outputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (*.f64 (*.f64 x x) (*.f64 x x)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (*.f64 x x) #s(literal 1/12 binary64)) x) x))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (*.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x)) (*.f64 x x) (*.f64 x x)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal 1 binary64)) (*.f64 x x)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))"]],"stop":[["node limit",1]],"time":119.373046875,"type":"simplify"},{"compiler":[[146,39],[3,2],[21,13],[17,13],[17,13],[8,6],[22,15],[13,8],[0,1],[0,1],[27,19],[0,1],[0,1],[27,19],[0,1],[27,19],[0,1],[0,1]],"egraph":[[0,8094,166,0.072723604],[2,1531,166,0.028205917],[1,203,175,0.005681999],[0,48,175,0.001650172],[0,30,181,0.000302003],[0,8316,154,0.08775239],[2,1911,154,0.032090839],[1,243,154,0.006701196],[0,58,163,0.001838728],[0,34,187,0.000333656],[0,8002,332,0.103075401],[6,7983,376,0.014551517],[5,6450,376,0.020500578],[4,3802,378,0.02073509],[3,2406,378,0.013771731],[2,912,378,0.010294743],[1,369,388,0.003737739],[0,122,388,0.001447602],[0,8428,132,0.140728197],[8,6661,153,0.020301328],[7,5255,153,0.022388069],[6,3863,153,0.020918544],[5,3034,153,0.012237451],[4,1762,153,0.013838269],[3,1060,153,0.006702729],[2,397,153,0.003859802],[1,168,159,0.001228528],[0,60,160,0.000556976],[0,8381,304,0.086333717],[5,6523,344,0.022887025],[4,3611,346,0.019933477],[3,2145,346,0.011789087],[2,754,346,0.007866654],[1,330,357,0.002157761],[0,130,357,0.001148666],[0,8210,217,0.082962599],[2,2091,217,0.033011741],[1,259,217,0.00686631],[0,59,217,0.001839708],[0,35,237,0.000354924]],"memory":[[-1034752,8093872]],"stop":[["fuel",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1],["iter limit",1]],"time":2569.553955078125,"type":"soundness"},{"compiler":[[146,39],[146,39],[11,7],[11,7],[8,7],[8,7],[31,20],[31,20]],"memory":[[3162384,26354736]],"remove-preprocessing":[["(abs x)"],[],[],[],[],[],[]],"time":300.166015625,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.010009765625,"type":"end"}]