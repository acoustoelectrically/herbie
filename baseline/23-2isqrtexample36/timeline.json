[{"memory":[[18576,18576]],"time":0.036865234375,"type":"start"},{"compiler":[[19,13]],"memory":[[645168,645168]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.00012196451865783376,"valid":0.24966136969258573}],[11,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.00024392903731566753,"valid":0.2495394051739279}],[10,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.00048785807463133505,"valid":0.2492954761366122}],[9,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.0009757161492626701,"valid":0.24880761806198087}],[8,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.0019514322985253402,"valid":0.24783190191271823}],[7,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.0039028645970506804,"valid":0.24588046961419288}],[6,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.007805729194101361,"valid":0.2419776050171422}],[5,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.015611458388202722,"valid":0.23417187582304083}],[4,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.031222916776405443,"valid":0.21856041743483812}],[3,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.06244583355281089,"valid":0.18733750065843266}],[2,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.12489166710562177,"valid":0.12489166710562177}],[1,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.24978333421124355,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.24978333421124355,"valid":0.0}]],"time":2.2939453125,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.7502166657887565,"valid":0.24978333421124357}],"memory":[[22347872,472110416]],"mixsample":[[143.032470703125,"ival-div",0],[191.690673828125,"adjust",800],[131.54150390625,"ival-div",400],[4.384521484375,"ival-assert",0],[13.332763671875,"ival-div",1600],[94.037109375,"ival-sub",0],[15.401123046875,"ival-and",0],[0.062255859375,"ival-sub",400],[158.21240234375,"ival-sqrt",0],[158.52294921875,"const",0],[21.552978515625,"adjust",2000],[51.4912109375,"ival-add",0],[0.042236328125,"ival-sub",800],[3.370849609375,"ival-add",1600],[14.158447265625,"ival-sqrt",1600],[41.94873046875,"ival-add",400],[28.741455078125,"ival->",0],[9.030029296875,"exact",0],[152.087890625,"ival-sqrt",400],[26.55078125,"ival-<",0]],"outcomes":[[1245.952880859375,1,"valid",6919],[273.40576171875,2,"valid",1073],[26.041015625,0,"valid",264]],"time":1950.585205078125,"type":"sample"},{"compiler":[[11,8],[34,10],[34,10]],"confusion":[[170,1,0,85]],"explanations":[["-.f64","(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","cancellation",170,0,[],[[]]]],"fperrors":[["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))",171,0,false,1,[11.852905655920653]],["(+.f64 x #s(literal 1 binary64))",0,0,false,0,false],["(sqrt.f64 x)",0,0,false,0,false],["(/.f64 #s(literal 1 binary64) (sqrt.f64 x))",0,0,false,0,false],["(/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(sqrt.f64 (+.f64 x #s(literal 1 binary64)))",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,170],[0,86]],"maybe-confusion":[[170,0,1,0,0,85]],"memory":[[-2993776,65196528]],"mixsample":[[9.366455078125,"adjust",800],[7.6201171875,"ival-div",0],[2.930908203125,"ival-add",0],[0.119384765625,"ival-add",1600],[0.59521484375,"ival-sqrt",1600],[6.779296875,"ival-div",400],[0.585205078125,"ival-div",1600],[0.2451171875,"ival-assert",0],[4.899169921875,"ival-sub",0],[2.54833984375,"ival-add",400],[0.460205078125,"ival-true",0],[7.589111328125,"ival-sqrt",0],[0.3232421875,"exact",0],[0.8046875,"adjust",2000],[7.75244140625,"ival-sqrt",400]],"outcomes":[[65.046142578125,1,"valid",456],[9.797119140625,2,"valid",48],[0.478759765625,0,"valid",8]],"time":141.048828125,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[11,8]],"egraph":[[0,258,11,0.000963403],[11,258,11,0.001269141],[10,255,11,0.001549849],[9,234,11,0.001618551],[8,203,11,0.0013974],[7,142,11,0.001106533],[6,107,11,0.001016248],[5,68,11,0.000511896],[4,48,11,0.000303659],[3,36,11,0.000266024],[2,27,11,0.00020087],[1,19,11,0.000175178],[0,14,11,0.000171094],[0,8,11,0.000114054],[8,284,24,0.00152211],[7,275,24,0.001496881],[6,248,24,0.001662775],[5,210,24,0.001449658],[4,144,24,0.001336854],[3,89,24,0.000653786],[2,47,24,0.000394],[1,20,25,0.000188522],[0,10,27,0.000150292]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))"]],"memory":[[5823616,5823616]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1],["saturated",1]],"symmetry":[[]],"time":36.7041015625,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[41072,41072]],"time":0.06884765625,"type":"eval"},{"alts":[["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","next",38.9638767072099,"binary64"]],"compiler":[[11,8]],"memory":[[316016,316016]],"time":0.461181640625,"type":"prune"},{"egraph":[[0,258,32,0.000961484],[11,258,32,0.001562308],[10,255,32,0.001751677],[9,234,32,0.001450251],[8,203,32,0.001265315],[7,142,32,0.001033271],[6,107,32,0.000969736],[5,68,32,0.000555737],[4,48,32,0.000309903],[3,36,32,0.000265927],[2,27,32,0.000202504],[1,19,32,0.000170564],[0,14,32,0.000175242],[0,8,32,0.000133388]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","#s(literal 1 binary64)","(sqrt.f64 x)","x","(/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))"]],"locations":[["(/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","cost-diff",0],["(sqrt.f64 x)","cost-diff",0],["(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","cost-diff",0],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","cost-diff",0]],"memory":[[-6793696,1083648]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","#s(literal 1 binary64)","(sqrt.f64 x)","x","(/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":21.6708984375,"type":"simplify"},{"compiler":[[34,10]],"locations":[["(sqrt.f64 x)","accuracy",0.0],["(/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","accuracy",0.28125],["(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","accuracy",0.28515625],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","accuracy",38.953762976987015]],"memory":[[5750624,15086480]],"mixsample":[[5.19091796875,"adjust",800],[3.83056640625,"ival-div",0],[1.3779296875,"ival-add",0],[0.06591796875,"ival-add",1600],[0.333251953125,"ival-sqrt",1600],[3.64453125,"ival-div",400],[0.322509765625,"ival-div",1600],[0.13916015625,"ival-assert",0],[4.4111328125,"ival-sub",0],[1.194580078125,"ival-add",400],[0.202880859375,"ival-true",0],[4.506591796875,"ival-sqrt",0],[0.173583984375,"exact",0],[0.47412109375,"adjust",2000],[5.1884765625,"ival-sqrt",400]],"outcomes":[[37.542236328125,1,"valid",228],[6.221923828125,2,"valid",24],[0.251220703125,0,"valid",4]],"time":54.325927734375,"type":"localize"},{"count":[[4,25]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","(sqrt.f64 x)","(/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))"]],"memory":[[-5831200,2194528]],"outputs":[["(sqrt (/ 1 x))","(/ (+ (sqrt x) (* -1 x)) x)","(/ (+ (sqrt x) (* x (- (* 1/2 x) 1))) x)","(/ (+ (sqrt x) (* x (- (* x (+ 1/2 (* -3/8 x))) 1))) x)","(sqrt x)","1","(+ 1 (* -1/2 x))","(+ 1 (* x (- (* 3/8 x) 1/2)))","(+ 1 (* x (- (* x (+ 3/8 (* -5/16 x))) 1/2)))","(* 1/2 (sqrt (/ 1 (pow x 3))))","(/ (- (* -1/2 (sqrt (/ 1 x))) (* -1/2 (sqrt x))) (pow x 2))","(/ (- (* 1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (/ 1 x))))) (pow x 2))","(/ (- (* -1/2 (* (sqrt (/ 1 (pow x 5))) (+ 1 (* 1/2 x)))) (+ (* -1/2 (sqrt x)) (+ (* -1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 x)))))) (pow x 2))","(+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 3)))))","(+ (sqrt (/ 1 x)) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 (pow x 5))))))","(+ (sqrt (/ 1 x)) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (+ (* -1/2 (* (sqrt (/ 1 (pow x 7))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 (pow x 5)))))))","(- (sqrt (/ 1 x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 5))))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(- (+ (sqrt (/ 1 x)) (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* -1/2 (sqrt x))) (pow x 3)))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (+ (* 1/2 (sqrt (/ 1 (pow x 5)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(+ (* -1 (/ (+ (* -1/2 (sqrt x)) (* 1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2))))))) (pow x 3))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))"]],"series":[[2.921875,"((- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ 1 (sqrt x)) (sqrt x) (/ 1 (sqrt (+ x 1))))","x","-inf"],[2.677978515625,"((- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ 1 (sqrt x)) (sqrt x) (/ 1 (sqrt (+ x 1))))","x","inf"],[1.169189453125,"((- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ 1 (sqrt x)) (sqrt x) (/ 1 (sqrt (+ x 1))))","x","0"]],"time":7.2421875,"type":"series"},{"count":[[25,25]],"egraph":[[0,8247,344,0.126040453],[3,3341,373,0.030481676],[2,930,383,0.010346706],[1,303,408,0.002482969],[0,114,457,0.000951963]],"inputs":[["(sqrt (/ 1 x))","(/ (+ (sqrt x) (* -1 x)) x)","(/ (+ (sqrt x) (* x (- (* 1/2 x) 1))) x)","(/ (+ (sqrt x) (* x (- (* x (+ 1/2 (* -3/8 x))) 1))) x)","(sqrt x)","1","(+ 1 (* -1/2 x))","(+ 1 (* x (- (* 3/8 x) 1/2)))","(+ 1 (* x (- (* x (+ 3/8 (* -5/16 x))) 1/2)))","(* 1/2 (sqrt (/ 1 (pow x 3))))","(/ (- (* -1/2 (sqrt (/ 1 x))) (* -1/2 (sqrt x))) (pow x 2))","(/ (- (* 1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (/ 1 x))))) (pow x 2))","(/ (- (* -1/2 (* (sqrt (/ 1 (pow x 5))) (+ 1 (* 1/2 x)))) (+ (* -1/2 (sqrt x)) (+ (* -1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 x)))))) (pow x 2))","(+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 3)))))","(+ (sqrt (/ 1 x)) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 (pow x 5))))))","(+ (sqrt (/ 1 x)) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (+ (* -1/2 (* (sqrt (/ 1 (pow x 7))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 (pow x 5)))))))","(- (sqrt (/ 1 x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 5))))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(- (+ (sqrt (/ 1 x)) (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* -1/2 (sqrt x))) (pow x 3)))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (+ (* 1/2 (sqrt (/ 1 (pow x 5)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(+ (* -1 (/ (+ (* -1/2 (sqrt x)) (* 1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2))))))) (pow x 3))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))"]],"memory":[[12402768,55984272]],"method":["egg-herbie"],"outputs":[["(sqrt (/ 1 x))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/ (+ (sqrt x) (* -1 x)) x)","(/.f64 (-.f64 (sqrt.f64 x) x) x)","(/ (+ (sqrt x) (* x (- (* 1/2 x) 1))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x (sqrt.f64 x)) x)","(/ (+ (sqrt x) (* x (- (* x (+ 1/2 (* -3/8 x))) 1))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -3/8 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x (sqrt.f64 x)) x)","(sqrt x)","(sqrt.f64 x)","1","#s(literal 1 binary64)","(+ 1 (* -1/2 x))","(fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64))","(+ 1 (* x (- (* 3/8 x) 1/2)))","(fma.f64 (fma.f64 #s(literal 3/8 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (- (* x (+ 3/8 (* -5/16 x))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -5/16 binary64) x #s(literal 3/8 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))","(* 1/2 (sqrt (/ 1 (pow x 3))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))","(/ (- (* -1/2 (sqrt (/ 1 x))) (* -1/2 (sqrt x))) (pow x 2))","(*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(/ (- (* 1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (/ 1 x))))) (pow x 2))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x)))) (*.f64 x x))","(/ (- (* -1/2 (* (sqrt (/ 1 (pow x 5))) (+ 1 (* 1/2 x)))) (+ (* -1/2 (sqrt x)) (+ (* -1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 x)))))) (pow x 2))","(/.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 x x))","(+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 3)))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(+ (sqrt (/ 1 x)) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 (pow x 5))))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(+ (sqrt (/ 1 x)) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (+ (* -1/2 (* (sqrt (/ 1 (pow x 7))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 (pow x 5)))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(- (sqrt (/ 1 x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(- (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(fma.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64)))","(- (+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 5))))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(fma.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))))","(- (+ (sqrt (/ 1 x)) (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* -1/2 (sqrt x))) (pow x 3)))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(fma.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/2 binary64) (-.f64 (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal -1 binary64) (*.f64 #s(literal 1/4 binary64) x)) (sqrt.f64 x)) (pow.f64 x #s(literal 3 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(sqrt.f64 x)","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (+ (* 1/2 (sqrt (/ 1 (pow x 5)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))","(+ (* -1 (/ (+ (* -1/2 (sqrt x)) (* 1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2))))))) (pow x 3))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(neg.f64 (fma.f64 #s(literal -1/2 binary64) (-.f64 (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal -1 binary64) (*.f64 #s(literal 1/4 binary64) x)) (sqrt.f64 x)) (pow.f64 x #s(literal 3 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))"]],"stop":[["iter limit",1],["node limit",1]],"time":294.455810546875,"type":"simplify"},{"count":[[4,229]],"egraph":[[0,8443,19,0.056862908],[3,6723,19,0.03359791],[2,565,19,0.020414605],[1,66,19,0.002111895],[0,14,23,0.00075442],[0,8,23,0.000113749]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","(sqrt.f64 x)","(/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))"]],"memory":[[-403072,43123936]],"outputs":[["(*.f64 (/.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x)) (sqrt.f64 (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x)) (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (hypot.f64 (sqrt.f64 x) x))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (pow.f64 x #s(literal -3/2 binary64)))) (+.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))) (neg.f64 (hypot.f64 (sqrt.f64 x) x)))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -1 binary64) (hypot.f64 (sqrt.f64 x) x))) #s(literal 2 binary64)))) (-.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))) (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -1 binary64) (hypot.f64 (sqrt.f64 x) x))) #s(literal 3 binary64)) (pow.f64 x #s(literal -3 binary64)))) (fma.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -1 binary64) (hypot.f64 (sqrt.f64 x) x))) (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -1 binary64) (hypot.f64 (sqrt.f64 x) x))) (pow.f64 x #s(literal -1 binary64))) (pow.f64 x #s(literal -2 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(*.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))","(*.f64 (+.f64 (pow.f64 x #s(literal -1/4 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/4 binary64))) (-.f64 (pow.f64 x #s(literal -1/4 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/4 binary64))))","(*.f64 (/.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))) #s(literal 1 binary64)) (/.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))))","(*.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))))","(*.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))))","(*.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(*.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (/.f64 #s(literal -1 binary64) (hypot.f64 (sqrt.f64 x) x)))","(*.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))) (*.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (pow.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64))))","(*.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))) (/.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))))","(*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) (/.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))))","(*.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(*.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(*.f64 #s(literal -1 binary64) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))))","(*.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(*.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) #s(literal -1 binary64))","(/.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (neg.f64 (sqrt.f64 x))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (/.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)))","(/.f64 (/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x))","(/.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal 1 binary64)) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (pow.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64))) (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (pow.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (hypot.f64 (sqrt.f64 x) x) #s(literal -2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (pow.f64 x #s(literal -2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (pow.f64 x #s(literal -3/2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (sqrt.f64 x) #s(literal -9 binary64)) (pow.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -9 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (hypot.f64 (sqrt.f64 x) x) #s(literal -3 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (pow.f64 x #s(literal -3 binary64))))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x)))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)) (neg.f64 (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x))) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))) (neg.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))))) (neg.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (neg.f64 (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (sqrt.f64 x))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal 1 binary64)) (hypot.f64 (sqrt.f64 x) x))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))) (*.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))))) (+.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))) (*.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))))) (+.f64 (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x)) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x))) (*.f64 (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x)) (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x)))) (+.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x)) (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 x #s(literal -1 binary64))) (-.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (pow.f64 x #s(literal -1/2 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))) (fma.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))) (*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) (fma.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) (*.f64 (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x)) #s(literal 3 binary64)) (pow.f64 (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x)) #s(literal 3 binary64))) (fma.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x)) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x)) (fma.f64 (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x)) (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x)) (*.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x)) (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x))))))","(/.f64 (neg.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (hypot.f64 (sqrt.f64 x) x))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal 1 binary64)) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 x #s(literal -1 binary64))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (hypot.f64 (sqrt.f64 x) x) #s(literal -2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (pow.f64 x #s(literal -2 binary64))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (pow.f64 x #s(literal -3/2 binary64))) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (sqrt.f64 x) #s(literal -9 binary64)) (pow.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (hypot.f64 (sqrt.f64 x) x) #s(literal -3 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (pow.f64 x #s(literal -3 binary64))) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal -1 binary64)) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x)))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 x #s(literal -1/2 binary64))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (*.f64 (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (neg.f64 (sqrt.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (neg.f64 (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (*.f64 (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (sqrt.f64 x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 x #s(literal -1/2 binary64))) (*.f64 (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))) (*.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) (*.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) (*.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))) (*.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x)) (*.f64 (hypot.f64 (sqrt.f64 x) x) (sqrt.f64 x))) (*.f64 (hypot.f64 (sqrt.f64 x) x) (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (+.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (hypot.f64 (sqrt.f64 x) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (*.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))) (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (*.f64 (hypot.f64 (sqrt.f64 x) x) (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (-.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (*.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))) (+.f64 (+.f64 (pow.f64 (hypot.f64 (sqrt.f64 x) x) #s(literal -2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (pow.f64 x #s(literal -3/2 binary64)))))","(/.f64 (-.f64 (pow.f64 (sqrt.f64 x) #s(literal -9 binary64)) (pow.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -9 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) (+.f64 (+.f64 (pow.f64 (hypot.f64 (sqrt.f64 x) x) #s(literal -3 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (pow.f64 x #s(literal -3 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))) (neg.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (neg.f64 (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))","(/.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))) (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (hypot.f64 (sqrt.f64 x) x)))))","(/.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (hypot.f64 (sqrt.f64 x) x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))))","(/.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))))","(neg.f64 (/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (hypot.f64 (sqrt.f64 x) x)))","(neg.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (neg.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))))","(neg.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))) (neg.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(neg.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (neg.f64 (hypot.f64 (sqrt.f64 x) x))))","(neg.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))))","(neg.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -1 binary64) (hypot.f64 (sqrt.f64 x) x))) #s(literal 2 binary64)))) (-.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) (neg.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -1 binary64) (hypot.f64 (sqrt.f64 x) x))) #s(literal 3 binary64)) (pow.f64 x #s(literal -3 binary64)))) (fma.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -1 binary64) (hypot.f64 (sqrt.f64 x) x))) (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -1 binary64) (hypot.f64 (sqrt.f64 x) x))) (pow.f64 x #s(literal -1 binary64))) (pow.f64 x #s(literal -2 binary64))) (neg.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (hypot.f64 (sqrt.f64 x) x) (neg.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (pow.f64 x #s(literal -3/2 binary64)))) (+.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))) (neg.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))) (neg.f64 (hypot.f64 (sqrt.f64 x) x)) (neg.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (neg.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))))","(fma.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/4 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/4 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/4 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/4 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) (sqrt.f64 x)) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x))))","(fma.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) (sqrt.f64 x)) (neg.f64 (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x))))","(fma.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x))))","(fma.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (neg.f64 (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x))))","(fma.f64 (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 x #s(literal -3/4 binary64)) (/.f64 (pow.f64 x #s(literal -3/4 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) (neg.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/4 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/4 binary64)) (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/4 binary64))) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) (hypot.f64 (sqrt.f64 x) x)) (neg.f64 (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x))))","(fma.f64 (pow.f64 x #s(literal -1/4 binary64)) (pow.f64 x #s(literal -1/4 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) (neg.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))))","(fma.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (neg.f64 (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x))))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (neg.f64 (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x))))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) (neg.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x))))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))) (neg.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))) (neg.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))))","(fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) (neg.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(fma.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x)) (neg.f64 (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x))))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(-.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 0 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(-.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))))","(-.f64 (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))))","(-.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x)) (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x)))","(-.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(-.f64 #s(literal 0 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))","(-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))) #s(literal -1 binary64)))","(+.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))) (neg.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))))","(+.f64 (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) (neg.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(+.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x)) (neg.f64 (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x))))","(+.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (pow.f64 x #s(literal -1/2 binary64)))","(+.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) #s(literal -1 binary64))","(*.f64 (pow.f64 x #s(literal -1/4 binary64)) (pow.f64 x #s(literal -1/4 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(pow.f64 (pow.f64 x #s(literal -1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (sqrt.f64 x) #s(literal -1 binary64))","(pow.f64 x #s(literal -1/2 binary64))","(/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 1/4 binary64))) (pow.f64 x #s(literal 1/4 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)))","(/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","(neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(exp.f64 (*.f64 (*.f64 #s(literal -1/4 binary64) (log.f64 x)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 #s(literal -1/2 binary64) (log.f64 x)))","(*.f64 (pow.f64 x #s(literal 1/4 binary64)) (/.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 x) #s(literal 1 binary64))","(*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)))","(*.f64 #s(literal 1 binary64) (sqrt.f64 x))","(pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (sqrt.f64 x) #s(literal 1 binary64))","(pow.f64 (*.f64 x x) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64))","(pow.f64 x #s(literal 1/2 binary64))","(/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/4 binary64))) (pow.f64 x #s(literal -1/4 binary64)))","(/.f64 (sqrt.f64 x) #s(literal 1 binary64))","(/.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(neg.f64 (neg.f64 (sqrt.f64 x)))","(sqrt.f64 x)","(-.f64 #s(literal 0 binary64) (neg.f64 (sqrt.f64 x)))","(exp.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) (log.f64 x)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 x)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) #s(literal 1/4 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (log.f64 x)) #s(literal -1 binary64)))","(exp.f64 (log.f64 (sqrt.f64 x)))","(*.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (pow.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/4 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/4 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(pow.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))","(pow.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(exp.f64 (*.f64 (*.f64 #s(literal -1/4 binary64) (log1p.f64 x)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log1p.f64 x) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 #s(literal -1/2 binary64) (log1p.f64 x)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":234.35009765625,"type":"rewrite"},{"compiler":[[5943,730]],"memory":[[888240,23830080]],"time":34.9150390625,"type":"eval"},{"alts":[["(/.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x))","next",38.95719505659657,"binary64"],["(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","next",38.28600970279523,"binary64"],["(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","next",38.28763094302679,"binary64"],["(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","fresh",38.28372469302679,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","done",38.9638767072099,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (*.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (-.f64 x #s(literal 1 binary64)))))","fresh",60.11941393961133,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x)))) (*.f64 x x)))","fresh",10.217775398591668,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","next",9.87606342810841,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64)))","fresh",20.7860887823123,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","next",60.454488994623254,"binary64"]],"compiler":[[15,8],[20,12],[24,13],[24,13],[11,8],[17,12],[36,25],[25,18],[20,16],[16,12],[15,8],[20,12],[24,13],[24,13],[17,12],[36,25],[25,18],[20,16],[16,12]],"count":[[254,10]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[253,9],"picked":[1,1]}],"memory":[[-4158080,13606752]],"min-error":[[9.016106313770383,"binary64"]],"time":11.591064453125,"type":"prune"},{"egraph":[[0,8213,237,0.04948336],[5,7020,239,0.017591715],[4,3257,239,0.028126591],[3,862,239,0.012441411],[2,244,245,0.003049796],[1,100,255,0.000898405],[0,59,261,0.000540951],[0,35,281,0.000360021]],"inputs":[["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(/.f64 (/.f64 #s(literal -1/2 binary64) x) x)","(/.f64 #s(literal -1/2 binary64) x)","#s(literal -1/2 binary64)","x","(-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","(sqrt.f64 x)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(/.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x))","(/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(sqrt.f64 x)","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","(*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(-.f64 (+.f64 x #s(literal 1 binary64)) x)","(+.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","#s(literal -1 binary64)","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x)))","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(sqrt.f64 x)","(neg.f64 (sqrt.f64 x))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))","(-.f64 (+.f64 x #s(literal 1 binary64)) x)","(+.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))","(fma.f64 x x x)","#s(literal -1/2 binary64)","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(sqrt.f64 x)","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))"]],"locations":[["(+.f64 x #s(literal 1 binary64))","cost-diff",0],["(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","cost-diff",0],["(*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))","cost-diff",2],["(-.f64 (+.f64 x #s(literal 1 binary64)) x)","cost-diff",4],["(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","cost-diff",1],["(*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x)))","cost-diff",2],["(*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","cost-diff",2],["(-.f64 (+.f64 x #s(literal 1 binary64)) x)","cost-diff",4],["(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","cost-diff",0],["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","cost-diff",0],["(/.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x))","cost-diff",1],["(/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","cost-diff",3],["(/.f64 #s(literal 1 binary64) x)","cost-diff",0],["(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","cost-diff",0],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","cost-diff",0],["(/.f64 #s(literal -1/2 binary64) x)","cost-diff",0],["(/.f64 (/.f64 #s(literal -1/2 binary64) x) x)","cost-diff",0],["(*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","cost-diff",0],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","cost-diff",0]],"memory":[[-3713552,27195520]],"method":["egg-herbie"],"outputs":[["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x)))","(*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(*.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x))","(/.f64 (/.f64 #s(literal -1/2 binary64) x) x)","(/.f64 #s(literal -1/2 binary64) x)","#s(literal -1/2 binary64)","x","(-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","(sqrt.f64 x)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(/.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x))","(-.f64 (/.f64 (sqrt.f64 x) x) (/.f64 #s(literal 1 binary64) (sqrt.f64 (-.f64 x #s(literal -1 binary64)))))","(/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(-.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 x) (sqrt.f64 (-.f64 x #s(literal -1 binary64)))))","(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","(-.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x))","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(sqrt.f64 (-.f64 x #s(literal -1 binary64)))","(+.f64 x #s(literal 1 binary64))","(-.f64 x #s(literal -1 binary64))","x","#s(literal 1 binary64)","(sqrt.f64 x)","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","(/.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (-.f64 x #s(literal -1 binary64)))) (fma.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x) x))","(*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (sqrt.f64 (-.f64 x #s(literal -1 binary64))))","(-.f64 (+.f64 x #s(literal 1 binary64)) x)","#s(literal 1 binary64)","(+.f64 x #s(literal 1 binary64))","(-.f64 x #s(literal -1 binary64))","x","#s(literal 1 binary64)","(/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (sqrt.f64 (-.f64 x #s(literal -1 binary64))))","#s(literal -1 binary64)","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(sqrt.f64 (-.f64 x #s(literal -1 binary64)))","(*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x)))","(neg.f64 (fma.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x) x))","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(+.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x))","(sqrt.f64 x)","(neg.f64 (sqrt.f64 x))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (+.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x)))","(*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))","(pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))","(-.f64 (+.f64 x #s(literal 1 binary64)) x)","#s(literal 1 binary64)","(+.f64 x #s(literal 1 binary64))","(-.f64 x #s(literal -1 binary64))","x","#s(literal 1 binary64)","(pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))","(fma.f64 x x x)","#s(literal -1/2 binary64)","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(+.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x))","(sqrt.f64 x)","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(sqrt.f64 (-.f64 x #s(literal -1 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":279.283935546875,"type":"simplify"},{"compiler":[[268,33]],"locations":[["(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","accuracy",0.015625],["(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","accuracy",0.22332001953688402],["(pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))","accuracy",30.073374236205503],["(-.f64 (+.f64 x #s(literal 1 binary64)) x)","accuracy",60.3033164726817],["(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","accuracy",0.16796875],["(/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","accuracy",0.28125],["(*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x)))","accuracy",0.5],["(-.f64 (+.f64 x #s(literal 1 binary64)) x)","accuracy",60.3033164726817],["(sqrt.f64 x)","accuracy",0.0],["(/.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x))","accuracy",0.21941376953688402],["(/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","accuracy",0.33041000976844204],["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","accuracy",60.53734934116664],["(/.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","accuracy",0.16015625],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","accuracy",60.454488994623254],["(/.f64 (/.f64 #s(literal -1/2 binary64) x) x)","accuracy",0.15234375],["(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","accuracy",0.16015625],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","accuracy",0.6880836687748848],["(*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","accuracy",9.160637563770383]],"memory":[[384448,57374704]],"mixsample":[[0.530029296875,"ival-add",1200],[30.037353515625,"ival-div",0],[18.457763671875,"adjust",800],[4.3203125,"ival-div",400],[3.886962890625,"ival-sqrt",800],[0.204833984375,"ival-assert",0],[0.333251953125,"ival-div",1600],[10.23046875,"ival-sub",0],[0.003173828125,"ival-sub",400],[6.82177734375,"ival-sqrt",0],[31.048828125,"ival-pow",0],[1.6103515625,"adjust",2000],[7.03662109375,"ival-add",0],[0.06103515625,"ival-add",1600],[17.08935546875,"ival-mult",0],[0.393798828125,"ival-sqrt",1600],[0.13720703125,"ival-add",400],[0.315185546875,"ival-true",0],[0.51171875,"ival-add",800],[0.548828125,"exact",0],[1.6572265625,"ival-sqrt",400],[2.66796875,"ival-neg",0]],"outcomes":[[163.814453125,1,"valid",228],[25.04150390625,2,"valid",24],[1.18212890625,0,"valid",4]],"time":239.76904296875,"type":"localize"},{"count":[[22,120]],"inputs":[["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(/.f64 (/.f64 #s(literal -1/2 binary64) x) x)","(/.f64 #s(literal -1/2 binary64) x)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","(/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x))","(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(-.f64 (+.f64 x #s(literal 1 binary64)) x)","(*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x)))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","(*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(+.f64 x #s(literal 1 binary64))","(sqrt.f64 x)","(/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))"]],"memory":[[-305648,8962224]],"outputs":[["(sqrt (/ 1 x))","(/ (+ (sqrt x) (* -1 x)) x)","(/ (+ (sqrt x) (* x (- (* 1/2 x) 1))) x)","(/ (+ (sqrt x) (* x (- (* x (+ 1/2 (* -3/8 x))) 1))) x)","(* -1/2 (sqrt (/ 1 (pow x 5))))","(/ (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 3))","(/ -1/2 (pow x 2))","(/ -1/2 x)","(/ 1 x)","(- 1 (sqrt x))","(- (+ 1 (* x (+ 1/2 (* -1/2 (- 1 (sqrt x)))))) (sqrt x))","(- (+ 1 (* x (+ 1/2 (+ (* -1/2 (- 1 (sqrt x))) (* x (- (* 3/8 (- 1 (sqrt x))) 3/8)))))) (sqrt x))","(- (+ 1 (* x (+ 1/2 (+ (* -1/2 (- 1 (sqrt x))) (* x (- (+ (* 3/8 (- 1 (sqrt x))) (* x (+ 5/16 (* -5/16 (- 1 (sqrt x)))))) 3/8)))))) (sqrt x))","(* (sqrt (/ 1 x)) (- 1 (sqrt x)))","(/ (+ (* 1/2 (sqrt (pow x 3))) (* (sqrt x) (- 1 (sqrt x)))) x)","(/ (+ (* x (+ (* 1/2 (sqrt x)) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (- 1 (sqrt x)))) (* -1/8 (sqrt x)))))) (* (sqrt x) (- 1 (sqrt x)))) x)","(/ (+ (* x (+ (* 1/2 (sqrt x)) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (- 1 (sqrt x)))) (+ (* -1/8 (sqrt x)) (* x (+ (* -1/4 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt x)) (* 1/2 (* (sqrt (/ 1 x)) (- 1 (sqrt x)))))))))))) (* (sqrt x) (- 1 (sqrt x)))) x)","(- (+ 1 (* 1/2 x)) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* -1/8 x)))) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))) (sqrt x))","1","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* -1/8 x))))","(+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8)))))","-1","(- (* 1/2 x) 1)","(- (* x (+ 1/2 (* -3/8 x))) 1)","(- (* x (+ 1/2 (* x (- (* 5/16 x) 3/8)))) 1)","(* -1 (* (sqrt x) (+ 1 (sqrt x))))","(+ (* -1 (* (sqrt x) (+ 1 (sqrt x)))) (* -1/2 (sqrt (pow x 3))))","(+ (* -1 (* (sqrt x) (+ 1 (sqrt x)))) (* x (+ (* -1/2 (sqrt x)) (* 1/8 (sqrt (pow x 3))))))","(+ (* -1 (* (sqrt x) (+ 1 (sqrt x)))) (* x (+ (* -1/2 (sqrt x)) (* x (+ (* -1/16 (sqrt (pow x 3))) (* 1/8 (sqrt x)))))))","(* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))","(/ (+ (* -1/2 (* (sqrt (pow x 3)) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/ (+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3))))))))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/ (+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))) (+ (* x (+ (* -1 (* (sqrt x) (+ (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 2))) (+ (* 1/2 (/ (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))) (+ 1 (sqrt x)))) (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 3))))))) (+ (* 1/4 (* (sqrt (/ 1 x)) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* 1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x)))))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))))))))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/ (+ (sqrt x) (* -1/2 (sqrt (pow x 3)))) x)","(/ (+ (sqrt x) (* (pow x 2) (+ (* -1/2 (sqrt (/ 1 x))) (* 1/2 (sqrt x))))) x)","(/ (+ (sqrt x) (* (pow x 2) (+ (* -1/2 (sqrt (/ 1 x))) (* x (+ (* -1/2 (* (sqrt x) (+ 1 (* 1/4 (/ 1 x))))) (* 1/2 (sqrt (/ 1 x)))))))) x)","(+ 1 x)","(sqrt x)","(+ 1 (sqrt x))","(+ 1 (+ (sqrt x) (* 1/2 x)))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* -1/8 x)))))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))))","(* 1/2 (sqrt (/ 1 (pow x 3))))","(/ (- (* -1/2 (sqrt (/ 1 x))) (* -1/2 (sqrt x))) (pow x 2))","(/ (- (* 1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (/ 1 x))))) (pow x 2))","(/ (- (* -1/2 (* (sqrt (/ 1 (pow x 5))) (+ 1 (* 1/2 x)))) (+ (* -1/2 (sqrt x)) (+ (* -1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 x)))))) (pow x 2))","(/ (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))) x)","(/ 1/2 x)","(/ (+ 1/2 (* -1 (/ (+ (* 1/8 x) (* 1/4 x)) (pow x 2)))) x)","(/ (- (+ 1/2 (* 1/4 (/ 1 (pow x 2)))) (+ (/ 1/8 x) (/ 1/4 x))) x)","(/ (- (+ 1/2 (+ (* -1/4 (/ (+ 1 (* 1/4 x)) (pow x 3))) (* 3/8 (/ 1 (pow x 2))))) (+ (/ 1/8 x) (/ 1/4 x))) x)","(/ (+ (* -1/4 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 3/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) (pow x 2))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (+ (* -5/32 (sqrt (/ 1 (pow x 5)))) (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (+ (* 3/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))))) (pow x 2))","(* 1/2 (sqrt (/ 1 x)))","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x)))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* -5/128 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) x)","(* x (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3)))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))))","(* -1 (sqrt (/ 1 x)))","(+ (* -1 (sqrt (/ 1 x))) (* 1/2 (sqrt (/ 1 (pow x 3)))))","(+ (* -1 (sqrt (/ 1 x))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(+ (* -1 (sqrt (/ 1 x))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (* (sqrt (/ 1 (pow x 7))) (+ 1 (* 1/4 x)))))))","(* -2 x)","(* -1 (* (pow x 2) (+ (* 2 (/ 1 x)) (* 1/2 (/ 1 (pow x 2))))))","(* (pow x 2) (- (/ 1/8 (pow x 3)) (+ (* 2 (/ 1 x)) (* 1/2 (/ 1 (pow x 2))))))","(* (pow x 2) (- (* 1/8 (/ 1 (pow x 3))) (+ (/ 1/16 (pow x 4)) (+ (* 2 (/ 1 x)) (* 1/2 (/ 1 (pow x 2)))))))","(/ (- 1 (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 3/8 (pow x 2))) (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 3/8 (pow x 2))) (+ (* 1/2 (/ 1 x)) (* 5/16 (/ 1 (pow x 3))))) x)","x","(* x (+ 1 (/ 1 x)))","(* 2 (sqrt x))","(* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x))))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))))","(- (sqrt (/ 1 x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 5))))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(- (+ (sqrt (/ 1 x)) (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* -1/2 (sqrt x))) (pow x 3)))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* -1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(* -1 (/ (+ 1/2 (* -1 (/ (+ (* -1/4 (/ x (pow (sqrt -1) 2))) (* -1/8 (/ x (pow (sqrt -1) 2)))) (pow x 2)))) x))","(* -1 (/ (+ 1/2 (* -1 (/ (+ (* -1/4 (/ x (pow (sqrt -1) 2))) (+ (* -1/8 (/ x (pow (sqrt -1) 2))) (* 1/4 (/ 1 (pow (sqrt -1) 2))))) (pow x 2)))) x))","(* -1 (/ (- (+ 1/2 (* -1 (/ (- (* -1 (/ (+ (* 1/8 (/ (pow x 2) (pow (sqrt -1) 4))) (* 1/4 (/ (* x (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2))))) (pow (sqrt -1) 2)))) x)) (* -1/4 (/ x (pow (sqrt -1) 2)))) (pow x 3)))) (+ (/ -1/4 (* x (pow (sqrt -1) 2))) (/ -1/8 (* x (pow (sqrt -1) 2))))) x))","(/ (+ (* 1/4 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2))))) x)) (* -1/4 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/2 (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* 1/16 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 4))))) x)) (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))))) x)) (* -1/4 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)) (* 1/2 (sqrt x))) (pow x 2))","(* -1/2 (sqrt (/ 1 x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x)))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* -5/128 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 6)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))))) x))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (sqrt (/ 1 (pow x 3)))))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* 1/2 (sqrt x))) (pow x 3))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(* 2 (* x (pow (sqrt -1) 2)))","(* (pow x 2) (- (* 2 (/ (pow (sqrt -1) 2) x)) (* 1/2 (/ 1 (pow x 2)))))","(* (pow x 2) (+ (* -1 (/ (+ 1/2 (* 1/8 (/ 1 (* x (pow (sqrt -1) 2))))) (pow x 2))) (* 2 (/ (pow (sqrt -1) 2) x))))","(* (pow x 2) (- (* 2 (/ (pow (sqrt -1) 2) x)) (+ (* 1/8 (/ 1 (* (pow x 3) (pow (sqrt -1) 2)))) (+ (* 1/16 (/ 1 (* (pow x 4) (pow (sqrt -1) 4)))) (* 1/2 (/ 1 (pow x 2)))))))","(/ -1 x)","(* -1 (/ (- 1 (* 1/2 (/ 1 x))) x))","(* -1 (/ (+ 1 (* -1 (/ (- 1/2 (* 3/8 (/ 1 x))) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 3/8 (* 5/16 (/ 1 x))) x))) x))) x))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 3/16 (sqrt x))) x)) (* 1/4 (sqrt x))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/16 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 5/32 (sqrt x))) x)) (+ (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 3/16 (sqrt x)))) x)) (* 1/4 (sqrt x))) x)) (* 1/2 (sqrt x))) (pow x 2))","(* -2 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))))"]],"series":[[14.789794921875,"((- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (* (/ (/ -1/2 x) x) (- (sqrt (/ 1 x)) (sqrt x))) (/ (/ -1/2 x) x) (/ -1/2 x) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt (/ 1 x)) (/ 1 x) (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/ (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (sqrt x)) (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1)) (- (+ x 1) x) (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (/ (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x)))) (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/ (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (+ (sqrt x) (sqrt (+ x 1)))) (+ x 1) (sqrt x) (/ -1 (sqrt (+ x 1))) (pow (+ (* x x) x) -1/2) (+ (sqrt x) (sqrt (+ x 1))))","x","-inf"],[11.448974609375,"((- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (* (/ (/ -1/2 x) x) (- (sqrt (/ 1 x)) (sqrt x))) (/ (/ -1/2 x) x) (/ -1/2 x) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt (/ 1 x)) (/ 1 x) (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/ (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (sqrt x)) (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1)) (- (+ x 1) x) (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (/ (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x)))) (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/ (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (+ (sqrt x) (sqrt (+ x 1)))) (+ x 1) (sqrt x) (/ -1 (sqrt (+ x 1))) (pow (+ (* x x) x) -1/2) (+ (sqrt x) (sqrt (+ x 1))))","x","inf"],[6.432861328125,"((- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (* (/ (/ -1/2 x) x) (- (sqrt (/ 1 x)) (sqrt x))) (/ (/ -1/2 x) x) (/ -1/2 x) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt (/ 1 x)) (/ 1 x) (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/ (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (sqrt x)) (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1)) (- (+ x 1) x) (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (/ (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x)))) (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/ (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (+ (sqrt x) (sqrt (+ x 1)))) (+ x 1) (sqrt x) (/ -1 (sqrt (+ x 1))) (pow (+ (* x x) x) -1/2) (+ (sqrt x) (sqrt (+ x 1))))","x","0"]],"time":35.25390625,"type":"series"},{"count":[[120,119]],"egraph":[[0,8235,2045,0.12282937],[2,5435,2194,0.038480777],[1,1673,2216,0.019648101],[0,560,2618,0.005976808]],"inputs":[["(sqrt (/ 1 x))","(/ (+ (sqrt x) (* -1 x)) x)","(/ (+ (sqrt x) (* x (- (* 1/2 x) 1))) x)","(/ (+ (sqrt x) (* x (- (* x (+ 1/2 (* -3/8 x))) 1))) x)","(* -1/2 (sqrt (/ 1 (pow x 5))))","(/ (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 3))","(/ -1/2 (pow x 2))","(/ -1/2 x)","(/ 1 x)","(- 1 (sqrt x))","(- (+ 1 (* x (+ 1/2 (* -1/2 (- 1 (sqrt x)))))) (sqrt x))","(- (+ 1 (* x (+ 1/2 (+ (* -1/2 (- 1 (sqrt x))) (* x (- (* 3/8 (- 1 (sqrt x))) 3/8)))))) (sqrt x))","(- (+ 1 (* x (+ 1/2 (+ (* -1/2 (- 1 (sqrt x))) (* x (- (+ (* 3/8 (- 1 (sqrt x))) (* x (+ 5/16 (* -5/16 (- 1 (sqrt x)))))) 3/8)))))) (sqrt x))","(* (sqrt (/ 1 x)) (- 1 (sqrt x)))","(/ (+ (* 1/2 (sqrt (pow x 3))) (* (sqrt x) (- 1 (sqrt x)))) x)","(/ (+ (* x (+ (* 1/2 (sqrt x)) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (- 1 (sqrt x)))) (* -1/8 (sqrt x)))))) (* (sqrt x) (- 1 (sqrt x)))) x)","(/ (+ (* x (+ (* 1/2 (sqrt x)) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (- 1 (sqrt x)))) (+ (* -1/8 (sqrt x)) (* x (+ (* -1/4 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt x)) (* 1/2 (* (sqrt (/ 1 x)) (- 1 (sqrt x)))))))))))) (* (sqrt x) (- 1 (sqrt x)))) x)","(- (+ 1 (* 1/2 x)) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* -1/8 x)))) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))) (sqrt x))","1","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* -1/8 x))))","(+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8)))))","-1","(- (* 1/2 x) 1)","(- (* x (+ 1/2 (* -3/8 x))) 1)","(- (* x (+ 1/2 (* x (- (* 5/16 x) 3/8)))) 1)","(* -1 (* (sqrt x) (+ 1 (sqrt x))))","(+ (* -1 (* (sqrt x) (+ 1 (sqrt x)))) (* -1/2 (sqrt (pow x 3))))","(+ (* -1 (* (sqrt x) (+ 1 (sqrt x)))) (* x (+ (* -1/2 (sqrt x)) (* 1/8 (sqrt (pow x 3))))))","(+ (* -1 (* (sqrt x) (+ 1 (sqrt x)))) (* x (+ (* -1/2 (sqrt x)) (* x (+ (* -1/16 (sqrt (pow x 3))) (* 1/8 (sqrt x)))))))","(* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))","(/ (+ (* -1/2 (* (sqrt (pow x 3)) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/ (+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3))))))))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/ (+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))) (+ (* x (+ (* -1 (* (sqrt x) (+ (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 2))) (+ (* 1/2 (/ (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))) (+ 1 (sqrt x)))) (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 3))))))) (+ (* 1/4 (* (sqrt (/ 1 x)) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* 1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x)))))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))))))))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/ (+ (sqrt x) (* -1/2 (sqrt (pow x 3)))) x)","(/ (+ (sqrt x) (* (pow x 2) (+ (* -1/2 (sqrt (/ 1 x))) (* 1/2 (sqrt x))))) x)","(/ (+ (sqrt x) (* (pow x 2) (+ (* -1/2 (sqrt (/ 1 x))) (* x (+ (* -1/2 (* (sqrt x) (+ 1 (* 1/4 (/ 1 x))))) (* 1/2 (sqrt (/ 1 x)))))))) x)","(+ 1 x)","(sqrt x)","(+ 1 (sqrt x))","(+ 1 (+ (sqrt x) (* 1/2 x)))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* -1/8 x)))))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))))","(* 1/2 (sqrt (/ 1 (pow x 3))))","(/ (- (* -1/2 (sqrt (/ 1 x))) (* -1/2 (sqrt x))) (pow x 2))","(/ (- (* 1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (/ 1 x))))) (pow x 2))","(/ (- (* -1/2 (* (sqrt (/ 1 (pow x 5))) (+ 1 (* 1/2 x)))) (+ (* -1/2 (sqrt x)) (+ (* -1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 x)))))) (pow x 2))","(/ (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))) x)","(/ 1/2 x)","(/ (+ 1/2 (* -1 (/ (+ (* 1/8 x) (* 1/4 x)) (pow x 2)))) x)","(/ (- (+ 1/2 (* 1/4 (/ 1 (pow x 2)))) (+ (/ 1/8 x) (/ 1/4 x))) x)","(/ (- (+ 1/2 (+ (* -1/4 (/ (+ 1 (* 1/4 x)) (pow x 3))) (* 3/8 (/ 1 (pow x 2))))) (+ (/ 1/8 x) (/ 1/4 x))) x)","(/ (+ (* -1/4 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 3/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) (pow x 2))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (+ (* -5/32 (sqrt (/ 1 (pow x 5)))) (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (+ (* 3/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))))) (pow x 2))","(* 1/2 (sqrt (/ 1 x)))","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x)))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* -5/128 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) x)","(* x (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3)))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))))","(* -1 (sqrt (/ 1 x)))","(+ (* -1 (sqrt (/ 1 x))) (* 1/2 (sqrt (/ 1 (pow x 3)))))","(+ (* -1 (sqrt (/ 1 x))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(+ (* -1 (sqrt (/ 1 x))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (* (sqrt (/ 1 (pow x 7))) (+ 1 (* 1/4 x)))))))","(* -2 x)","(* -1 (* (pow x 2) (+ (* 2 (/ 1 x)) (* 1/2 (/ 1 (pow x 2))))))","(* (pow x 2) (- (/ 1/8 (pow x 3)) (+ (* 2 (/ 1 x)) (* 1/2 (/ 1 (pow x 2))))))","(* (pow x 2) (- (* 1/8 (/ 1 (pow x 3))) (+ (/ 1/16 (pow x 4)) (+ (* 2 (/ 1 x)) (* 1/2 (/ 1 (pow x 2)))))))","(/ (- 1 (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 3/8 (pow x 2))) (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 3/8 (pow x 2))) (+ (* 1/2 (/ 1 x)) (* 5/16 (/ 1 (pow x 3))))) x)","x","(* x (+ 1 (/ 1 x)))","(* 2 (sqrt x))","(* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x))))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))))","(- (sqrt (/ 1 x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 5))))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(- (+ (sqrt (/ 1 x)) (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* -1/2 (sqrt x))) (pow x 3)))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* -1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(* -1 (/ (+ 1/2 (* -1 (/ (+ (* -1/4 (/ x (pow (sqrt -1) 2))) (* -1/8 (/ x (pow (sqrt -1) 2)))) (pow x 2)))) x))","(* -1 (/ (+ 1/2 (* -1 (/ (+ (* -1/4 (/ x (pow (sqrt -1) 2))) (+ (* -1/8 (/ x (pow (sqrt -1) 2))) (* 1/4 (/ 1 (pow (sqrt -1) 2))))) (pow x 2)))) x))","(* -1 (/ (- (+ 1/2 (* -1 (/ (- (* -1 (/ (+ (* 1/8 (/ (pow x 2) (pow (sqrt -1) 4))) (* 1/4 (/ (* x (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2))))) (pow (sqrt -1) 2)))) x)) (* -1/4 (/ x (pow (sqrt -1) 2)))) (pow x 3)))) (+ (/ -1/4 (* x (pow (sqrt -1) 2))) (/ -1/8 (* x (pow (sqrt -1) 2))))) x))","(/ (+ (* 1/4 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2))))) x)) (* -1/4 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/2 (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* 1/16 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 4))))) x)) (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))))) x)) (* -1/4 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)) (* 1/2 (sqrt x))) (pow x 2))","(* -1/2 (sqrt (/ 1 x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x)))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* -5/128 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 6)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))))) x))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (sqrt (/ 1 (pow x 3)))))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* 1/2 (sqrt x))) (pow x 3))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(* 2 (* x (pow (sqrt -1) 2)))","(* (pow x 2) (- (* 2 (/ (pow (sqrt -1) 2) x)) (* 1/2 (/ 1 (pow x 2)))))","(* (pow x 2) (+ (* -1 (/ (+ 1/2 (* 1/8 (/ 1 (* x (pow (sqrt -1) 2))))) (pow x 2))) (* 2 (/ (pow (sqrt -1) 2) x))))","(* (pow x 2) (- (* 2 (/ (pow (sqrt -1) 2) x)) (+ (* 1/8 (/ 1 (* (pow x 3) (pow (sqrt -1) 2)))) (+ (* 1/16 (/ 1 (* (pow x 4) (pow (sqrt -1) 4)))) (* 1/2 (/ 1 (pow x 2)))))))","(/ -1 x)","(* -1 (/ (- 1 (* 1/2 (/ 1 x))) x))","(* -1 (/ (+ 1 (* -1 (/ (- 1/2 (* 3/8 (/ 1 x))) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 3/8 (* 5/16 (/ 1 x))) x))) x))) x))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 3/16 (sqrt x))) x)) (* 1/4 (sqrt x))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/16 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 5/32 (sqrt x))) x)) (+ (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 3/16 (sqrt x)))) x)) (* 1/4 (sqrt x))) x)) (* 1/2 (sqrt x))) (pow x 2))","(* -2 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))))"]],"memory":[[2084752,48810512]],"method":["egg-herbie"],"outputs":[["(sqrt (/ 1 x))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/ (+ (sqrt x) (* -1 x)) x)","(/.f64 (-.f64 (sqrt.f64 x) x) x)","(/ (+ (sqrt x) (* x (- (* 1/2 x) 1))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x (sqrt.f64 x)) x)","(/ (+ (sqrt x) (* x (- (* x (+ 1/2 (* -3/8 x))) 1))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -3/8 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x (sqrt.f64 x)) x)","(* -1/2 (sqrt (/ 1 (pow x 5))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/2 binary64))","(/ (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 3))","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/ -1/2 (pow x 2))","(/.f64 (/.f64 #s(literal -1/2 binary64) x) x)","(/ -1/2 x)","(/.f64 #s(literal -1/2 binary64) x)","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(- 1 (sqrt x))","(-.f64 #s(literal 1 binary64) (sqrt.f64 x))","(- (+ 1 (* x (+ 1/2 (* -1/2 (- 1 (sqrt x)))))) (sqrt x))","(fma.f64 (fma.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) #s(literal -1/2 binary64) #s(literal 1/2 binary64)) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(- (+ 1 (* x (+ 1/2 (+ (* -1/2 (- 1 (sqrt x))) (* x (- (* 3/8 (- 1 (sqrt x))) 3/8)))))) (sqrt x))","(fma.f64 (fma.f64 (fma.f64 #s(literal 3/8 binary64) (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) #s(literal -3/8 binary64)) x (fma.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) #s(literal -1/2 binary64) #s(literal 1/2 binary64))) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(- (+ 1 (* x (+ 1/2 (+ (* -1/2 (- 1 (sqrt x))) (* x (- (+ (* 3/8 (- 1 (sqrt x))) (* x (+ 5/16 (* -5/16 (- 1 (sqrt x)))))) 3/8)))))) (sqrt x))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -5/16 binary64) (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) #s(literal 5/16 binary64)) x (fma.f64 #s(literal 3/8 binary64) (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) #s(literal -3/8 binary64))) x (fma.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) #s(literal -1/2 binary64) #s(literal 1/2 binary64))) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(* (sqrt (/ 1 x)) (- 1 (sqrt x)))","(*.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(/ (+ (* 1/2 (sqrt (pow x 3))) (* (sqrt x) (- 1 (sqrt x)))) x)","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (-.f64 (sqrt.f64 x) x)) x)","(/ (+ (* x (+ (* 1/2 (sqrt x)) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (- 1 (sqrt x)))) (* -1/8 (sqrt x)))))) (* (sqrt x) (- 1 (sqrt x)))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 x) (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) #s(literal -1/2 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x (-.f64 (sqrt.f64 x) x)) x)","(/ (+ (* x (+ (* 1/2 (sqrt x)) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (- 1 (sqrt x)))) (+ (* -1/8 (sqrt x)) (* x (+ (* -1/4 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt x)) (* 1/2 (* (sqrt (/ 1 x)) (- 1 (sqrt x)))))))))))) (* (sqrt x) (- 1 (sqrt x)))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 #s(literal 1 binary64) (sqrt.f64 x))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/16 binary64) (sqrt.f64 x)))) x (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 x) (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) #s(literal -1/2 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))) x (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x (-.f64 (sqrt.f64 x) x)) x)","(- (+ 1 (* 1/2 x)) (sqrt x))","(fma.f64 #s(literal 1/2 binary64) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(- (+ 1 (* x (+ 1/2 (* -1/8 x)))) (sqrt x))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/2 binary64)) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(- (+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))) (sqrt x))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/16 binary64) x #s(literal -1/8 binary64)) x #s(literal 1/2 binary64)) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","1","#s(literal 1 binary64)","(+ 1 (* 1/2 x))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/2 (* -1/8 x))))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/16 binary64) x #s(literal -1/8 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","-1","#s(literal -1 binary64)","(- (* 1/2 x) 1)","(fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))","(- (* x (+ 1/2 (* -3/8 x))) 1)","(fma.f64 (fma.f64 #s(literal -3/8 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(- (* x (+ 1/2 (* x (- (* 5/16 x) 3/8)))) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal 5/16 binary64) x #s(literal -3/8 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(* -1 (* (sqrt x) (+ 1 (sqrt x))))","(neg.f64 (+.f64 (sqrt.f64 x) x))","(+ (* -1 (* (sqrt x) (+ 1 (sqrt x)))) (* -1/2 (sqrt (pow x 3))))","(fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal -1/2 binary64) (neg.f64 (+.f64 (sqrt.f64 x) x)))","(+ (* -1 (* (sqrt x) (+ 1 (sqrt x)))) (* x (+ (* -1/2 (sqrt x)) (* 1/8 (sqrt (pow x 3))))))","(fma.f64 (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) x (neg.f64 (+.f64 (sqrt.f64 x) x)))","(+ (* -1 (* (sqrt x) (+ 1 (sqrt x)))) (* x (+ (* -1/2 (sqrt x)) (* x (+ (* -1/16 (sqrt (pow x 3))) (* 1/8 (sqrt x)))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/16 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal 1/8 binary64) (sqrt.f64 x))) x (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) x (neg.f64 (+.f64 (sqrt.f64 x) x)))","(* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))","(/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))","(/ (+ (* -1/2 (* (sqrt (pow x 3)) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/.f64 (fma.f64 (/.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal -1/2 binary64) (/.f64 (sqrt.f64 x) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))) x)","(/ (+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3))))))))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64))) (/.f64 #s(literal 1/8 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (sqrt.f64 x) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) #s(literal -1/2 binary64))) x (/.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) x (/.f64 (sqrt.f64 x) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))) x)","(/ (+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))) (+ (* x (+ (* -1 (* (sqrt x) (+ (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 2))) (+ (* 1/2 (/ (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))) (+ 1 (sqrt x)))) (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 3))))))) (+ (* 1/4 (* (sqrt (/ 1 x)) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* 1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x)))))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))))))))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (neg.f64 (sqrt.f64 x)) (+.f64 (fma.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64))) (/.f64 #s(literal 1/8 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) #s(literal 1/2 binary64) (/.f64 #s(literal 1/16 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64)))) (/.f64 #s(literal 1/16 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (fma.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal 1/4 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) #s(literal 1/2 binary64)))) x (fma.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64))) (/.f64 #s(literal 1/8 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (sqrt.f64 x) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) #s(literal -1/2 binary64)))) x (/.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) x (/.f64 (sqrt.f64 x) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))) x)","(/ (+ (sqrt x) (* -1/2 (sqrt (pow x 3)))) x)","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal -1/2 binary64) (sqrt.f64 x)) x)","(/ (+ (sqrt x) (* (pow x 2) (+ (* -1/2 (sqrt (/ 1 x))) (* 1/2 (sqrt x))))) x)","(/.f64 (fma.f64 (*.f64 (*.f64 x x) #s(literal -1/2 binary64)) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (sqrt.f64 x)) x)","(/ (+ (sqrt x) (* (pow x 2) (+ (* -1/2 (sqrt (/ 1 x))) (* x (+ (* -1/2 (* (sqrt x) (+ 1 (* 1/4 (/ 1 x))))) (* 1/2 (sqrt (/ 1 x)))))))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 1/4 binary64) x) #s(literal -1/2 binary64)) (sqrt.f64 x))) x (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 x x) (sqrt.f64 x)) x)","(+ 1 x)","(+.f64 x #s(literal 1 binary64))","(sqrt x)","(sqrt.f64 x)","(+ 1 (sqrt x))","(+.f64 (sqrt.f64 x) #s(literal 1 binary64))","(+ 1 (+ (sqrt x) (* 1/2 x)))","(fma.f64 #s(literal 1/2 binary64) x (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* -1/8 x)))))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/2 binary64)) x (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/16 binary64) x #s(literal -1/8 binary64)) x #s(literal 1/2 binary64)) x (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))","(* 1/2 (sqrt (/ 1 (pow x 3))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))","(/ (- (* -1/2 (sqrt (/ 1 x))) (* -1/2 (sqrt x))) (pow x 2))","(*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 x x)))","(/ (- (* 1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (/ 1 x))))) (pow x 2))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal -1/2 binary64))) (*.f64 x x))","(/ (- (* -1/2 (* (sqrt (/ 1 (pow x 5))) (+ 1 (* 1/2 x)))) (+ (* -1/2 (sqrt x)) (+ (* -1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 x)))))) (pow x 2))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (fma.f64 #s(literal -1/2 binary64) (+.f64 (sqrt.f64 x) (*.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))) (*.f64 x x))","(/ (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))) x)","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/2 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x)","(/ 1/2 x)","(/.f64 #s(literal 1/2 binary64) x)","(/ (+ 1/2 (* -1 (/ (+ (* 1/8 x) (* 1/4 x)) (pow x 2)))) x)","(/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)","(/ (- (+ 1/2 (* 1/4 (/ 1 (pow x 2)))) (+ (/ 1/8 x) (/ 1/4 x))) x)","(/.f64 (-.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) x) x) #s(literal 1/2 binary64)) (+.f64 (/.f64 #s(literal 1/8 binary64) x) (/.f64 #s(literal 1/4 binary64) x))) x)","(/ (- (+ 1/2 (+ (* -1/4 (/ (+ 1 (* 1/4 x)) (pow x 3))) (* 3/8 (/ 1 (pow x 2))))) (+ (/ 1/8 x) (/ 1/4 x))) x)","(/.f64 (-.f64 (fma.f64 (/.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal -1/4 binary64) (+.f64 (/.f64 #s(literal 3/8 binary64) (*.f64 x x)) #s(literal 1/2 binary64))) (+.f64 (/.f64 #s(literal 1/8 binary64) x) (/.f64 #s(literal 1/4 binary64) x))) x)","(/ (+ (* -1/4 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) (pow x 2))","(/.f64 (fma.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 3/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) (pow x 2))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -3/8 binary64) (fma.f64 #s(literal 3/16 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) (*.f64 x x))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (+ (* -5/32 (sqrt (/ 1 (pow x 5)))) (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (+ (* 3/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))))) (pow x 2))","(/.f64 (fma.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal -5/32 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/4 binary64) (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))))) (*.f64 x x))","(* 1/2 (sqrt (/ 1 x)))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x)))) x)","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* -5/128 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) x)","(/.f64 (fma.f64 #s(literal -5/128 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))) x)","(* x (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3)))))))","(*.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x)","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))))","(*.f64 (+.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(* -1 (sqrt (/ 1 x)))","(neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(+ (* -1 (sqrt (/ 1 x))) (* 1/2 (sqrt (/ 1 (pow x 3)))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(+ (* -1 (sqrt (/ 1 x))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(-.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/2 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(+ (* -1 (sqrt (/ 1 x))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (* (sqrt (/ 1 (pow x 7))) (+ 1 (* 1/4 x)))))))","(-.f64 (fma.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/2 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(* -2 x)","(*.f64 #s(literal -2 binary64) x)","(* -1 (* (pow x 2) (+ (* 2 (/ 1 x)) (* 1/2 (/ 1 (pow x 2))))))","(neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x) #s(literal 1/2 binary64)))","(* (pow x 2) (- (/ 1/8 (pow x 3)) (+ (* 2 (/ 1 x)) (* 1/2 (/ 1 (pow x 2))))))","(fma.f64 (/.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 x x) (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x) #s(literal 1/2 binary64))))","(* (pow x 2) (- (* 1/8 (/ 1 (pow x 3))) (+ (/ 1/16 (pow x 4)) (+ (* 2 (/ 1 x)) (* 1/2 (/ 1 (pow x 2)))))))","(fma.f64 (*.f64 x x) (-.f64 (/.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x) #s(literal 1/2 binary64))))","(/ (- 1 (* 1/2 (/ 1 x))) x)","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)","(/ (- (+ 1 (/ 3/8 (pow x 2))) (* 1/2 (/ 1 x))) x)","(/.f64 (-.f64 (+.f64 (/.f64 #s(literal 3/8 binary64) (*.f64 x x)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x)) x)","(/ (- (+ 1 (/ 3/8 (pow x 2))) (+ (* 1/2 (/ 1 x)) (* 5/16 (/ 1 (pow x 3))))) x)","(/.f64 (-.f64 (-.f64 (+.f64 (/.f64 #s(literal 3/8 binary64) (*.f64 x x)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x)) (/.f64 #s(literal 5/16 binary64) (pow.f64 x #s(literal 3 binary64)))) x)","x","(* x (+ 1 (/ 1 x)))","(+.f64 x #s(literal 1 binary64))","(* 2 (sqrt x))","(*.f64 #s(literal 2 binary64) (sqrt.f64 x))","(* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x)","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x))))))","(*.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))) x)","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) #s(literal 1/16 binary64) (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))) x)","(- (sqrt (/ 1 x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(- (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (+.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(- (+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 5))))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(+.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(- (+ (sqrt (/ 1 x)) (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* -1/2 (sqrt x))) (pow x 3)))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(+.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/2 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 x #s(literal -1 binary64)) #s(literal -1/4 binary64) #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x))) (pow.f64 x #s(literal 3 binary64)))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(* -1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))","(* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x))","(*.f64 (/.f64 (neg.f64 (+.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) x) #s(literal -1/2 binary64))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(* -1 (/ (+ 1/2 (* -1 (/ (+ (* -1/4 (/ x (pow (sqrt -1) 2))) (* -1/8 (/ x (pow (sqrt -1) 2)))) (pow x 2)))) x))","(/.f64 (fma.f64 (/.f64 (/.f64 x #s(literal -1 binary64)) (*.f64 x x)) #s(literal 3/8 binary64) #s(literal 1/2 binary64)) (neg.f64 x))","(* -1 (/ (+ 1/2 (* -1 (/ (+ (* -1/4 (/ x (pow (sqrt -1) 2))) (+ (* -1/8 (/ x (pow (sqrt -1) 2))) (* 1/4 (/ 1 (pow (sqrt -1) 2))))) (pow x 2)))) x))","(/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (/.f64 (fma.f64 (/.f64 x #s(literal -1 binary64)) #s(literal -3/8 binary64) #s(literal -1/4 binary64)) x) x)) (neg.f64 x))","(* -1 (/ (- (+ 1/2 (* -1 (/ (- (* -1 (/ (+ (* 1/8 (/ (pow x 2) (pow (sqrt -1) 4))) (* 1/4 (/ (* x (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2))))) (pow (sqrt -1) 2)))) x)) (* -1/4 (/ x (pow (sqrt -1) 2)))) (pow x 3)))) (+ (/ -1/4 (* x (pow (sqrt -1) 2))) (/ -1/8 (* x (pow (sqrt -1) 2))))) x))","(/.f64 (-.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 #s(literal -1/4 binary64) x (/.f64 (fma.f64 (/.f64 (*.f64 (fma.f64 (/.f64 x #s(literal -1 binary64)) #s(literal -1/4 binary64) #s(literal 1 binary64)) x) #s(literal -1 binary64)) #s(literal 1/4 binary64) (/.f64 (*.f64 (*.f64 #s(literal 1/8 binary64) x) x) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64)))) (neg.f64 x))) (pow.f64 x #s(literal 3 binary64)))) (+.f64 (/.f64 #s(literal 1/8 binary64) x) (/.f64 #s(literal 1/4 binary64) x))) (neg.f64 x))","(/ (+ (* 1/4 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) (pow x 2))","(/.f64 (fma.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2))))) x)) (* -1/4 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/4 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal 3/16 binary64) (sqrt.f64 x))) (neg.f64 x))) (neg.f64 x))) (*.f64 x x))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/2 (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* 1/16 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 4))))) x)) (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))))) x)) (* -1/4 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/4 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (fma.f64 #s(literal 3/16 binary64) (sqrt.f64 x) (/.f64 (fma.f64 (/.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) #s(literal 1/16 binary64) (*.f64 #s(literal 5/32 binary64) (sqrt.f64 x))) (neg.f64 x)))) (neg.f64 x))) (neg.f64 x))) (*.f64 x x))","(* -1/2 (sqrt (/ 1 x)))","(*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(/.f64 (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (neg.f64 x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x)))) x))","(/.f64 (fma.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) #s(literal 1/16 binary64) (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) (neg.f64 x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* -5/128 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 6)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))))) x))","(/.f64 (fma.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 6 binary64))) #s(literal -5/128 binary64) (fma.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) #s(literal 1/16 binary64) (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))) (neg.f64 x))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(sqrt.f64 x)","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(*.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(*.f64 (fma.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) #s(literal 1/16 binary64) (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))) (neg.f64 x))","(* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (sqrt (/ 1 (pow x 3)))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* 1/2 (sqrt x))) (pow x 3))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/2 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 x #s(literal -1 binary64)) #s(literal -1/4 binary64) #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x))) (pow.f64 x #s(literal 3 binary64))))))","(* 2 (* x (pow (sqrt -1) 2)))","(*.f64 #s(literal -2 binary64) x)","(* (pow x 2) (- (* 2 (/ (pow (sqrt -1) 2) x)) (* 1/2 (/ 1 (pow x 2)))))","(*.f64 (-.f64 (/.f64 #s(literal -2 binary64) x) (/.f64 #s(literal 1/2 binary64) (*.f64 x x))) (*.f64 x x))","(* (pow x 2) (+ (* -1 (/ (+ 1/2 (* 1/8 (/ 1 (* x (pow (sqrt -1) 2))))) (pow x 2))) (* 2 (/ (pow (sqrt -1) 2) x))))","(*.f64 (-.f64 (/.f64 #s(literal -2 binary64) x) (/.f64 (/.f64 (+.f64 (/.f64 #s(literal -1/8 binary64) x) #s(literal 1/2 binary64)) x) x)) (*.f64 x x))","(* (pow x 2) (- (* 2 (/ (pow (sqrt -1) 2) x)) (+ (* 1/8 (/ 1 (* (pow x 3) (pow (sqrt -1) 2)))) (+ (* 1/16 (/ 1 (* (pow x 4) (pow (sqrt -1) 4)))) (* 1/2 (/ 1 (pow x 2)))))))","(*.f64 (-.f64 (/.f64 #s(literal -2 binary64) x) (+.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (pow.f64 x #s(literal 4 binary64))) (/.f64 #s(literal 1/2 binary64) (*.f64 x x))) (/.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal 3 binary64))))) (*.f64 x x))","(/ -1 x)","(/.f64 #s(literal -1 binary64) x)","(* -1 (/ (- 1 (* 1/2 (/ 1 x))) x))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1/2 binary64) x) #s(literal -1 binary64)) x)","(* -1 (/ (+ 1 (* -1 (/ (- 1/2 (* 3/8 (/ 1 x))) x))) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) (neg.f64 x))","(* -1 (/ (+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 3/8 (* 5/16 (/ 1 x))) x))) x))) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 3/8 binary64) (/.f64 #s(literal 5/16 binary64) x)) x)) x)) (neg.f64 x))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 3/16 (sqrt x))) x)) (* 1/4 (sqrt x))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/4 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal 3/16 binary64) (sqrt.f64 x))) (neg.f64 x))) (neg.f64 x))) (*.f64 x x))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/16 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 5/32 (sqrt x))) x)) (+ (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 3/16 (sqrt x)))) x)) (* 1/4 (sqrt x))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/4 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (fma.f64 #s(literal 3/16 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/16 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal 5/32 binary64) (sqrt.f64 x))) (neg.f64 x)))) (neg.f64 x))) (neg.f64 x))) (*.f64 x x))","(* -2 (* (sqrt x) (pow (sqrt -1) 2)))","(*.f64 #s(literal 2 binary64) (sqrt.f64 x))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(*.f64 (fma.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))) (neg.f64 x))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(*.f64 (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64)))) (neg.f64 x))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))))","(*.f64 (fma.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) #s(literal 1/16 binary64) (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))))) (neg.f64 x))"]],"stop":[["iter limit",1],["node limit",1]],"time":321.751953125,"type":"simplify"},{"count":[[22,1477]],"egraph":[[0,8666,166,0.087202499],[2,2095,167,0.031920956],[1,246,167,0.007580691],[0,59,201,0.001822401],[0,35,215,0.000373599]],"inputs":[["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(/.f64 (/.f64 #s(literal -1/2 binary64) x) x)","(/.f64 #s(literal -1/2 binary64) x)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","(/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x))","(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(-.f64 (+.f64 x #s(literal 1 binary64)) x)","(*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x)))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","(*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(+.f64 x #s(literal 1 binary64))","(sqrt.f64 x)","(/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))"]],"memory":[[-11266672,84424176]],"outputs":[["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x)))","(*.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) x)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x))","(*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)))","(*.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) x))","(*.f64 (/.f64 #s(literal -1/2 binary64) x) (*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x))))","(pow.f64 (/.f64 x (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) x))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) x) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x))) (neg.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x))) (neg.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 #s(literal 1/2 binary64) x))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal -1/2 binary64))) (neg.f64 (*.f64 x x)))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal 1 binary64))) (neg.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x))))","(/.f64 (neg.f64 (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (pow.f64 x #s(literal -1 binary64)) x))) (neg.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))))) (neg.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) x)))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) x) (/.f64 #s(literal 1/2 binary64) x))) (neg.f64 (*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) x) (/.f64 #s(literal -1/2 binary64) x))) (neg.f64 (*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)) (*.f64 x x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64))) (neg.f64 (*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (/.f64 #s(literal 1/2 binary64) x))) (neg.f64 (*.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (/.f64 #s(literal -1/2 binary64) x))) (neg.f64 (*.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)) (*.f64 x x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) x) (-.f64 (pow.f64 x #s(literal -1 binary64)) x))) (neg.f64 (*.f64 (neg.f64 x) (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) x) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))))) (neg.f64 (*.f64 (neg.f64 x) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x))) (neg.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)))) (neg.f64 (*.f64 x x)))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)))) (neg.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) x) (-.f64 (pow.f64 x #s(literal -1 binary64)) x))) (neg.f64 (*.f64 x (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) x) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))))) (neg.f64 (*.f64 x (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 x #s(literal -1 binary64)) x))) (neg.f64 (*.f64 (*.f64 x x) (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))))) (neg.f64 (*.f64 (*.f64 x x) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal -1 binary64)) x))) (neg.f64 (*.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x)) (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))))) (neg.f64 (*.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) x) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x)) (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x))) (neg.f64 x))","(/.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x))) (*.f64 x x))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x))) (/.f64 x (/.f64 #s(literal -1/2 binary64) x)))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 #s(literal 1/2 binary64) x)) (neg.f64 x))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal -1/2 binary64)) (*.f64 x x))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal 1 binary64)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x)))","(/.f64 (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (pow.f64 x #s(literal -1 binary64)) x)) (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)))","(/.f64 (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) x))) (neg.f64 x))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) x) (/.f64 #s(literal 1/2 binary64) x)) (*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)) (neg.f64 x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) x) (/.f64 #s(literal -1/2 binary64) x)) (*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)) x))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal -1/2 binary64)) (*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)) (*.f64 x x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)) (*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (/.f64 #s(literal 1/2 binary64) x)) (*.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)) (neg.f64 x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (/.f64 #s(literal -1/2 binary64) x)) (*.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)) x))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) #s(literal -1/2 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)) (*.f64 x x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) x) (-.f64 (pow.f64 x #s(literal -1 binary64)) x)) (*.f64 (neg.f64 x) (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x))))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) x) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (*.f64 (neg.f64 x) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64))))","(/.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) x) (-.f64 (pow.f64 x #s(literal -1 binary64)) x)) (*.f64 x (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x))))","(/.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) x) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (*.f64 x (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 x #s(literal -1 binary64)) x)) (*.f64 (*.f64 x x) (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x))))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (*.f64 (*.f64 x x) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal -1 binary64)) x)) (*.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x)) (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (*.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64))))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) x)) x)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) x)))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x)))","(/.f64 #s(literal 1 binary64) (/.f64 x (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) x))))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (*.f64 (neg.f64 (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x)))","(fma.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (neg.f64 (sqrt.f64 x))))","(+.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x)) (*.f64 (neg.f64 (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x)))","(+.f64 (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (pow.f64 x #s(literal -1/2 binary64))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (neg.f64 (sqrt.f64 x))))","(*.f64 (pow.f64 (/.f64 x #s(literal 1/2 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) x))","(*.f64 (/.f64 #s(literal -1/2 binary64) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal -1/2 binary64) (pow.f64 x #s(literal -2 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x))","(pow.f64 (/.f64 (*.f64 x x) #s(literal -1/2 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal -1 binary64))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) x)","(/.f64 (neg.f64 (pow.f64 x #s(literal -1 binary64))) (neg.f64 (*.f64 x #s(literal -2 binary64))))","(/.f64 (/.f64 #s(literal 1/2 binary64) x) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 (/.f64 #s(literal 1/2 binary64) x) (neg.f64 x))","(/.f64 #s(literal 1/2 binary64) (neg.f64 (*.f64 x x)))","(/.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 x) x))","(/.f64 #s(literal 1/2 binary64) (*.f64 x (neg.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 x x) #s(literal -1/2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x))))","(/.f64 #s(literal -1 binary64) (*.f64 (*.f64 x #s(literal -2 binary64)) (neg.f64 x)))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x #s(literal -2 binary64)))","(/.f64 (/.f64 #s(literal -1/2 binary64) x) (neg.f64 (neg.f64 x)))","(/.f64 (/.f64 #s(literal -1/2 binary64) x) x)","(/.f64 #s(literal -1/2 binary64) (neg.f64 (neg.f64 (*.f64 x x))))","(/.f64 #s(literal -1/2 binary64) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 #s(literal -1/2 binary64) (neg.f64 (*.f64 x (neg.f64 x))))","(/.f64 #s(literal -1/2 binary64) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (*.f64 x #s(literal -2 binary64)) (neg.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) #s(literal -1/2 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 x (/.f64 #s(literal -1/2 binary64) x)))","(neg.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) x))","(exp.f64 (*.f64 (log.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x))) #s(literal -1 binary64)))","(*.f64 #s(literal 1/2 binary64) (/.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64))","(*.f64 #s(literal -1/2 binary64) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1/2 binary64) x))","(pow.f64 (/.f64 (*.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 x #s(literal -2 binary64)) #s(literal -1 binary64))","(/.f64 #s(literal 1/2 binary64) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 #s(literal 1/2 binary64) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 x #s(literal -2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 x #s(literal -2 binary64))))","(/.f64 #s(literal -1/2 binary64) (neg.f64 (neg.f64 x)))","(/.f64 #s(literal -1/2 binary64) x)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 x #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 x #s(literal -2 binary64)))","(neg.f64 (/.f64 #s(literal 1/2 binary64) x))","(exp.f64 (*.f64 (log.f64 (*.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/4 binary64)) (pow.f64 x #s(literal -1/4 binary64)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal -1 binary64) x)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1/2 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(pow.f64 (pow.f64 x #s(literal -1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64))","(pow.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (*.f64 x x) #s(literal -1/4 binary64))","(pow.f64 (sqrt.f64 x) #s(literal -1 binary64))","(pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64))","(pow.f64 x #s(literal -1/2 binary64))","(/.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (neg.f64 (sqrt.f64 (neg.f64 x))))","(/.f64 (sqrt.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1/2 binary64)))) (sqrt.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (sqrt.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64))) (sqrt.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (sqrt.f64 (sqrt.f64 x)))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x))))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x)))))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (neg.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 (neg.f64 x))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","(neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(sqrt.f64 (pow.f64 x #s(literal -1 binary64)))","(fabs.f64 (pow.f64 x #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 #s(literal -1/2 binary64) (log.f64 x)))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -2 binary64)) (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) #s(literal 2 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)))","(pow.f64 (neg.f64 (neg.f64 x)) #s(literal -1 binary64))","(pow.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (*.f64 x x) #s(literal -1/2 binary64))","(pow.f64 (sqrt.f64 x) #s(literal -2 binary64))","(pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))","(pow.f64 x #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1/2 binary64)))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 (pow.f64 x #s(literal -1/2 binary64))) (neg.f64 (sqrt.f64 x)))","(/.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1/2 binary64))) (neg.f64 (sqrt.f64 x)))","(/.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (neg.f64 (sqrt.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 #s(literal -1 binary64) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(/.f64 #s(literal -1 binary64) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 x))","(/.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x))))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 x)))","(/.f64 #s(literal 1 binary64) x)","(neg.f64 (/.f64 #s(literal -1 binary64) x))","(sqrt.f64 (pow.f64 x #s(literal -2 binary64)))","(fabs.f64 (pow.f64 x #s(literal -1 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (log.f64 x)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 x #s(literal -2 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 x)) #s(literal -2 binary64)))","(exp.f64 (neg.f64 (log.f64 x)))","(*.f64 (pow.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal -1 binary64)) (pow.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal 1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))))","(pow.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) (neg.f64 (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (/.f64 x (+.f64 x #s(literal 1 binary64))))) (neg.f64 (+.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))) #s(literal 3/2 binary64)))) (neg.f64 (+.f64 #s(literal 1 binary64) (+.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))) (*.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64)))))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) (hypot.f64 (sqrt.f64 x) x))) (neg.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64))) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal 1 binary64))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)) (*.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 x (+.f64 x #s(literal 1 binary64)))) (+.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))) #s(literal 3/2 binary64))) (+.f64 #s(literal 1 binary64) (+.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))) (*.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal 1 binary64)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (*.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) (hypot.f64 (sqrt.f64 x) x)) (+.f64 x #s(literal 1 binary64)))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64))))","(/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)))","(neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64)))))))","(-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64)))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))))","(*.f64 (pow.f64 (/.f64 (sqrt.f64 x) (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(*.f64 (pow.f64 (/.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)))) #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (/.f64 (sqrt.f64 x) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal -1 binary64)) (pow.f64 (/.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (-.f64 x (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(*.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)))) (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 x))))","(*.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 x))) (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(*.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)) (-.f64 (+.f64 x #s(literal 1 binary64)) x))","(*.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (pow.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)) (pow.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)) (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)))","(*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)) (pow.f64 (pow.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(*.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64)))))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 (*.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(*.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (pow.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(*.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (/.f64 #s(literal -1 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (/.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))))","(*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(*.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))))","(*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(pow.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (hypot.f64 (sqrt.f64 x) x) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)) (sqrt.f64 x)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (/.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x)))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (/.f64 #s(literal -1 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (pow.f64 x #s(literal -1/2 binary64)))) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (pow.f64 x #s(literal -1/2 binary64)))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))) (neg.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))) (neg.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64))) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))) (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))))) (neg.f64 (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))))","(/.f64 (neg.f64 (*.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (neg.f64 (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (neg.f64 (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64))) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal 1 binary64))) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal 1 binary64))) (neg.f64 (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))) (neg.f64 (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))) (neg.f64 (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64)))) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (-.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x)))) (neg.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (pow.f64 x #s(literal -1/2 binary64))) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) (*.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (*.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))) (*.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x)) (*.f64 (hypot.f64 (sqrt.f64 x) x) (sqrt.f64 x))) (fma.f64 x x x))","(/.f64 (-.f64 (sqrt.f64 (neg.f64 x)) (*.f64 (sqrt.f64 (neg.f64 x)) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64)))))) (*.f64 (sqrt.f64 (neg.f64 x)) (sqrt.f64 x)))","(/.f64 (-.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64)))))) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(/.f64 (-.f64 (sqrt.f64 x) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64)))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (sqrt.f64 x)))","(/.f64 (-.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64)))))) x)","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (neg.f64 x)) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (sqrt.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (+.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (sqrt.f64 x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (neg.f64 x)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (sqrt.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (+.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (sqrt.f64 x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (neg.f64 x)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 x)) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (sqrt.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 x)) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (+.f64 (sqrt.f64 x) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (sqrt.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 x)) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (sqrt.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 x)) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (+.f64 (sqrt.f64 x) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (sqrt.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 x)) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 x)) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (+.f64 (sqrt.f64 x) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x)))","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64)) (sqrt.f64 x))","(/.f64 (/.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64)) (sqrt.f64 x))","(/.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (/.f64 #s(literal -1 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (pow.f64 x #s(literal -1/2 binary64))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (pow.f64 x #s(literal -1/2 binary64))) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))) (+.f64 (+.f64 x #s(literal 1 binary64)) x))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 (*.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64)) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)) (neg.f64 (sqrt.f64 x)))","(/.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64)) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64)) (sqrt.f64 x))","(/.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (neg.f64 (neg.f64 (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (neg.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(/.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (neg.f64 (*.f64 (hypot.f64 (sqrt.f64 x) x) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 (*.f64 (hypot.f64 (sqrt.f64 x) x) (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x))) (neg.f64 (*.f64 (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (neg.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))) (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 (*.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x))))","(/.f64 (*.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64)) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","(/.f64 (*.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x)))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal 1 binary64)) (hypot.f64 (sqrt.f64 x) x))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (neg.f64 (sqrt.f64 x)))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (*.f64 (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (*.f64 (hypot.f64 (sqrt.f64 x) x) (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))) (+.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))))","(/.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))) (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64)))))) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64)))))) (neg.f64 (sqrt.f64 x)))","(/.f64 (*.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (neg.f64 (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))","(/.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(/.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (hypot.f64 (sqrt.f64 x) x) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)) (sqrt.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)) (neg.f64 (sqrt.f64 x))))","(/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (hypot.f64 (sqrt.f64 x) x) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) (sqrt.f64 x))","(/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (hypot.f64 (sqrt.f64 x) x))","(/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)) (neg.f64 (sqrt.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (hypot.f64 (sqrt.f64 x) x) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)) (sqrt.f64 x)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(neg.f64 (/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (sqrt.f64 x)))","(neg.f64 (/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64)))))) (sqrt.f64 x)))","(neg.f64 (/.f64 (*.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(neg.f64 (/.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(neg.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(fma.f64 (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 x #s(literal -1/4 binary64)) (pow.f64 x #s(literal -1/4 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))))","(-.f64 (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64)))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64)))))","(-.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x)) (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x)))","(-.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 (/.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))) x)))","(-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (pow.f64 x #s(literal -1/2 binary64)))","(+.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(*.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(*.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)))) (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))","(*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x))) (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))))","(/.f64 (-.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (*.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) x)) (*.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))) (*.f64 (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (pow.f64 x #s(literal 3/2 binary64)))) (*.f64 (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))) (*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64)) (*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 x #s(literal -1/2 binary64))) (*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal -1/2 binary64))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (*.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (neg.f64 (sqrt.f64 x)))) (*.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64)) (*.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (sqrt.f64 x))) (*.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 x #s(literal -1/2 binary64))) (*.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (pow.f64 x #s(literal -1/2 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)) (*.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)))) #s(literal 1 binary64))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (pow.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1/2 binary64))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 x)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal -1/2 binary64))) #s(literal 1 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(/.f64 (-.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 x)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (sqrt.f64 x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3/2 binary64))) (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x)))) (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x)))) (sqrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3/2 binary64))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x)))) (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x)))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3/2 binary64))) #s(literal -1 binary64) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x)))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x)))) #s(literal -1 binary64)))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3/2 binary64))) #s(literal 1 binary64) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x)))) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x)))) #s(literal 1 binary64)))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x)))) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (neg.f64 x) (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 x)) (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 x)) (sqrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (neg.f64 x) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (*.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 x)) (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 x)) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (fma.f64 (neg.f64 x) #s(literal -1 binary64) (*.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 x)) #s(literal -1 binary64)))","(/.f64 (fma.f64 (neg.f64 x) #s(literal 1 binary64) (*.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 x)) #s(literal 1 binary64)))","(/.f64 (fma.f64 (neg.f64 x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (*.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 x)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x)))) (*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3/2 binary64))))) (*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x))))))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (+.f64 #s(literal 0 binary64) (sqrt.f64 x)) (*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (neg.f64 x))) (*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (+.f64 #s(literal 0 binary64) (sqrt.f64 x))))","(/.f64 (fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x)))) (*.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3/2 binary64))))) (*.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x))))))","(/.f64 (fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 #s(literal 0 binary64) (sqrt.f64 x)) (*.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (neg.f64 x))) (*.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (+.f64 #s(literal 0 binary64) (sqrt.f64 x))))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x)))) (*.f64 #s(literal -1 binary64) (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3/2 binary64))))) (*.f64 #s(literal -1 binary64) (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x))))))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 #s(literal 0 binary64) (sqrt.f64 x)) (*.f64 #s(literal -1 binary64) (neg.f64 x))) (*.f64 #s(literal -1 binary64) (+.f64 #s(literal 0 binary64) (sqrt.f64 x))))","(/.f64 (fma.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x)))) (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3/2 binary64))))) (*.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x))))))","(/.f64 (fma.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (+.f64 #s(literal 0 binary64) (sqrt.f64 x)) (*.f64 #s(literal 1 binary64) (neg.f64 x))) (*.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x)))) (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3/2 binary64))))) (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (sqrt.f64 x)) (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (neg.f64 x))) (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 #s(literal 0 binary64) (sqrt.f64 x))))","(/.f64 (-.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (+.f64 (+.f64 x #s(literal 1 binary64)) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (*.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (+.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (+.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))))))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (*.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (-.f64 (+.f64 x #s(literal 1 binary64)) x))))","(/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))))","(/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal 1 binary64))","(/.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)))","(fma.f64 (sqrt.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64)))","(fma.f64 (sqrt.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64)))","(fma.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)) #s(literal 1/2 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)) #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64)))","(fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64)))","(fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64)))","(fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64)))","(fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(fma.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64)))","(fma.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 x) #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(fma.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64)))","(fma.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))","(-.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal 0 binary64)) (sqrt.f64 x))","(-.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (/.f64 x (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(-.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))))","(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","(+.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64)))","(+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))","(*.f64 (sqrt.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(*.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x))))","(*.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(pow.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))","(pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (sqrt.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (sqrt.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (neg.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64))","(/.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x (neg.f64 x)))))","(/.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(fabs.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(exp.f64 (*.f64 (log1p.f64 x) #s(literal 1/2 binary64)))","(*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(pow.f64 (/.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 x x (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 x (-.f64 #s(literal 1 binary64) x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)))) (neg.f64 (neg.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 (+.f64 x #s(literal 1 binary64)) x)) (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 x x))) (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (+.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))) (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 x))) (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) x) x)) (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 x #s(literal -1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (-.f64 x #s(literal 1 binary64))) (neg.f64 x))) (*.f64 (neg.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64)) (*.f64 (neg.f64 (-.f64 x #s(literal 1 binary64))) x)) (*.f64 (neg.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64))) (*.f64 (neg.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (neg.f64 x))) (*.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) x)) (*.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 x #s(literal -1 binary64))) (*.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 x))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) x)) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x (neg.f64 x))) (neg.f64 x))) (*.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x (neg.f64 x))) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x (neg.f64 x))) x)) (*.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x (neg.f64 x))) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x (neg.f64 x))) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x (neg.f64 x))) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (neg.f64 x))) (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) x)) (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))) (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal -1 binary64) (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (neg.f64 x))) (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) x)) (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal -1 binary64) (*.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 x))) (*.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) x)) (*.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))) (*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64) (fma.f64 x x x)) (+.f64 x #s(literal 1 binary64)))","(/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 x #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64))) (*.f64 (+.f64 x #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64) (*.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x x)) (neg.f64 x))) (*.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal -1 binary64)))","(/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64) (*.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x x)) x)) (*.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal 1 binary64)))","(/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 x #s(literal -1 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x x)) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (fma.f64 (neg.f64 x) (+.f64 x #s(literal 1 binary64)) (*.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (*.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (neg.f64 x) (+.f64 #s(literal 1 binary64) (fma.f64 x x x)) (*.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (*.f64 #s(literal -1 binary64) (+.f64 #s(literal 1 binary64) (fma.f64 x x x))))","(/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) x (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (+.f64 x #s(literal 1 binary64)))","(/.f64 (fma.f64 x (+.f64 #s(literal 1 binary64) (fma.f64 x x x)) (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (*.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (fma.f64 x x x))))","(/.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (*.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (fma.f64 x x x)) (*.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (*.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (fma.f64 x x x))))","(/.f64 (-.f64 (*.f64 x x) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (-.f64 x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x))) (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x))) (neg.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 x x) (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (-.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x)))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (+.f64 (+.f64 x #s(literal 1 binary64)) x))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 x x) (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x)))))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 x))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 x))","(fma.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(fma.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 x))","(fma.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(fma.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (neg.f64 x))","(fma.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(fma.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 x))","(fma.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 x)) (-.f64 #s(literal 1 binary64) x))","(fma.f64 #s(literal -1 binary64) x (+.f64 x #s(literal 1 binary64)))","(fma.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 x))","(fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64) (neg.f64 x))","(fma.f64 (sqrt.f64 x) (pow.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)) #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(fma.f64 (sqrt.f64 x) (pow.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)) #s(literal 1 binary64)) (neg.f64 x))","(fma.f64 (sqrt.f64 x) (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(fma.f64 (sqrt.f64 x) (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)) (neg.f64 x))","(fma.f64 (sqrt.f64 x) (sqrt.f64 x) (-.f64 #s(literal 1 binary64) x))","(fma.f64 x #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x))","(fma.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(fma.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)) (neg.f64 x))","(fma.f64 #s(literal 1 binary64) x (-.f64 #s(literal 1 binary64) x))","(-.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 (+.f64 x #s(literal 1 binary64)) x)) (/.f64 (*.f64 x x) (+.f64 (+.f64 x #s(literal 1 binary64)) x)))","(-.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(-.f64 (+.f64 x #s(literal 1 binary64)) x)","(+.f64 (-.f64 #s(literal 1 binary64) x) x)","(+.f64 (neg.f64 x) (+.f64 x #s(literal 1 binary64)))","(+.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(+.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))","(+.f64 x (-.f64 #s(literal 1 binary64) x))","(+.f64 #s(literal 1 binary64) (-.f64 x x))","(+.f64 #s(literal 1 binary64) (+.f64 x (neg.f64 x)))","(*.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (+.f64 x #s(literal 1 binary64)) x))","(*.f64 #s(literal -1 binary64) (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(pow.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x))) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)))) (neg.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)))) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (+.f64 (+.f64 x #s(literal 1 binary64)) x))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (+.f64 (+.f64 x #s(literal 1 binary64)) x))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)))) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 (+.f64 x #s(literal 1 binary64)) x))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) #s(literal -1 binary64))) (neg.f64 (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (neg.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (neg.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x))) (+.f64 (+.f64 x #s(literal 1 binary64)) x))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (+.f64 (+.f64 x #s(literal 1 binary64)) x))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (+.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x))) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (+.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)))))","(/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x))))","(fma.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) x (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(fma.f64 x (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(+.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(+.f64 (*.f64 x (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 x)))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) x) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)) (sqrt.f64 x))","(*.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (sqrt.f64 x))","(*.f64 (neg.f64 (sqrt.f64 x)) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(*.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (neg.f64 (sqrt.f64 x)))","(*.f64 #s(literal -1 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))","(/.f64 (neg.f64 (*.f64 (-.f64 x (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))) (neg.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) (neg.f64 (sqrt.f64 x)))) (neg.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (-.f64 x (+.f64 x #s(literal 1 binary64))))) (neg.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))))) (neg.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (*.f64 (-.f64 x (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) (neg.f64 (sqrt.f64 x))) (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (-.f64 x (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)))) (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))","(neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x))","(fma.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(fma.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))))","(fma.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))))","(-.f64 #s(literal 0 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))","(+.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(+.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))))","(+.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))))","(+.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(*.f64 (pow.f64 (/.f64 (sqrt.f64 x) (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(*.f64 (pow.f64 (/.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)))) #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (/.f64 (sqrt.f64 x) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal -1 binary64)) (pow.f64 (/.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (-.f64 x (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(*.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)))) (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 x))))","(*.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 x))) (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(*.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)) (-.f64 (+.f64 x #s(literal 1 binary64)) x))","(*.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (pow.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)) (pow.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)) (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)))","(*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)) (pow.f64 (pow.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(*.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64)))))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 (*.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(*.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (pow.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(*.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (/.f64 #s(literal -1 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (/.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))))","(*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(*.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))))","(*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(pow.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (hypot.f64 (sqrt.f64 x) x) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)) (sqrt.f64 x)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (/.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x)))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (/.f64 #s(literal -1 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (pow.f64 x #s(literal -1/2 binary64)))) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (pow.f64 x #s(literal -1/2 binary64)))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))) (neg.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))) (neg.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64))) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))) (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))))) (neg.f64 (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))))","(/.f64 (neg.f64 (*.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (neg.f64 (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (neg.f64 (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64))) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal 1 binary64))) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal 1 binary64))) (neg.f64 (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))) (neg.f64 (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))) (neg.f64 (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64)))) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (-.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x)))) (neg.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (pow.f64 x #s(literal -1/2 binary64))) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) (*.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (*.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))) (*.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x)) (*.f64 (hypot.f64 (sqrt.f64 x) x) (sqrt.f64 x))) (fma.f64 x x x))","(/.f64 (-.f64 (sqrt.f64 (neg.f64 x)) (*.f64 (sqrt.f64 (neg.f64 x)) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64)))))) (*.f64 (sqrt.f64 (neg.f64 x)) (sqrt.f64 x)))","(/.f64 (-.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64)))))) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(/.f64 (-.f64 (sqrt.f64 x) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64)))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (sqrt.f64 x)))","(/.f64 (-.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64)))))) x)","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (neg.f64 x)) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (sqrt.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (+.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (sqrt.f64 x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (neg.f64 x)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (sqrt.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (+.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (sqrt.f64 x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (neg.f64 x)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 x)) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (sqrt.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 x)) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (+.f64 (sqrt.f64 x) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (sqrt.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 x)) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (sqrt.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 x)) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (+.f64 (sqrt.f64 x) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (sqrt.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 x)) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 x)) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (+.f64 (sqrt.f64 x) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x)))","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64)) (sqrt.f64 x))","(/.f64 (/.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64)) (sqrt.f64 x))","(/.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (/.f64 #s(literal -1 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (pow.f64 x #s(literal -1/2 binary64))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (pow.f64 x #s(literal -1/2 binary64))) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))) (+.f64 (+.f64 x #s(literal 1 binary64)) x))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 (*.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64)) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)) (neg.f64 (sqrt.f64 x)))","(/.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64)) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64)) (sqrt.f64 x))","(/.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (neg.f64 (neg.f64 (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (neg.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(/.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (neg.f64 (*.f64 (hypot.f64 (sqrt.f64 x) x) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 (*.f64 (hypot.f64 (sqrt.f64 x) x) (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x))) (neg.f64 (*.f64 (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (neg.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))) (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 (*.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x))))","(/.f64 (*.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64)) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","(/.f64 (*.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x)))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal 1 binary64)) (hypot.f64 (sqrt.f64 x) x))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (neg.f64 (sqrt.f64 x)))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (*.f64 (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (*.f64 (hypot.f64 (sqrt.f64 x) x) (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))) (+.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))))","(/.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))) (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64)))))) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64)))))) (neg.f64 (sqrt.f64 x)))","(/.f64 (*.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (neg.f64 (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))","(/.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(/.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (hypot.f64 (sqrt.f64 x) x) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)) (sqrt.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)) (neg.f64 (sqrt.f64 x))))","(/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (hypot.f64 (sqrt.f64 x) x) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) (sqrt.f64 x))","(/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (hypot.f64 (sqrt.f64 x) x))","(/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)) (neg.f64 (sqrt.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (hypot.f64 (sqrt.f64 x) x) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)) (sqrt.f64 x)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(neg.f64 (/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (sqrt.f64 x)))","(neg.f64 (/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64)))))) (sqrt.f64 x)))","(neg.f64 (/.f64 (*.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(neg.f64 (/.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(neg.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(fma.f64 (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 x #s(literal -1/4 binary64)) (pow.f64 x #s(literal -1/4 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))))","(-.f64 (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64)))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64)))))","(-.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x)) (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x)))","(-.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 (/.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))) x)))","(-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (pow.f64 x #s(literal -1/2 binary64)))","(+.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(*.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (fma.f64 x x x) #s(literal -1/4 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1/4 binary64)))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/4 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x))","(*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))","(/.f64 (neg.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)))) (neg.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))) (neg.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))) (neg.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x))) (+.f64 (+.f64 x #s(literal 1 binary64)) x))","(/.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (+.f64 (+.f64 x #s(literal 1 binary64)) x))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(fma.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (+.f64 x #s(literal 1 binary64)) (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (neg.f64 x)))","(fma.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) x (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (+.f64 x #s(literal 1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (*.f64 (neg.f64 x) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))))","(fma.f64 x (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))))","(+.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (*.f64 (neg.f64 x) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))))","(+.f64 (*.f64 x (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))))","(+.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (+.f64 x #s(literal 1 binary64))) (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (neg.f64 x)))","(+.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) x) (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (pow.f64 (/.f64 (sqrt.f64 x) (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(*.f64 (pow.f64 (/.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)))) #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (/.f64 (sqrt.f64 x) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal -1 binary64)) (pow.f64 (/.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (-.f64 x (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(*.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)))) (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 x))))","(*.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 x))) (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(*.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)) (-.f64 (+.f64 x #s(literal 1 binary64)) x))","(*.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (pow.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)) (pow.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)) (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)))","(*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)) (pow.f64 (pow.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(*.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64)))))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 (*.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(*.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (pow.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(*.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (/.f64 #s(literal -1 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (/.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))))","(*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(*.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))))","(*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(pow.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (hypot.f64 (sqrt.f64 x) x) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)) (sqrt.f64 x)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (/.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x)))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (/.f64 #s(literal -1 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (pow.f64 x #s(literal -1/2 binary64)))) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (pow.f64 x #s(literal -1/2 binary64)))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))) (neg.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))) (neg.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64))) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))) (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))))) (neg.f64 (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))))","(/.f64 (neg.f64 (*.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (neg.f64 (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (neg.f64 (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64))) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal 1 binary64))) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal 1 binary64))) (neg.f64 (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))) (neg.f64 (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))) (neg.f64 (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64)))) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (-.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x)))) (neg.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (pow.f64 x #s(literal -1/2 binary64))) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) (*.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (*.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))) (*.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x)) (*.f64 (hypot.f64 (sqrt.f64 x) x) (sqrt.f64 x))) (fma.f64 x x x))","(/.f64 (-.f64 (sqrt.f64 (neg.f64 x)) (*.f64 (sqrt.f64 (neg.f64 x)) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64)))))) (*.f64 (sqrt.f64 (neg.f64 x)) (sqrt.f64 x)))","(/.f64 (-.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64)))))) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(/.f64 (-.f64 (sqrt.f64 x) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64)))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (sqrt.f64 x)))","(/.f64 (-.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64)))))) x)","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (neg.f64 x)) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (sqrt.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (+.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (sqrt.f64 x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (neg.f64 x)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (sqrt.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (+.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (sqrt.f64 x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (neg.f64 x)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 x)) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (sqrt.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 x)) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (+.f64 (sqrt.f64 x) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (sqrt.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 x)) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (sqrt.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 x)) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (+.f64 (sqrt.f64 x) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (sqrt.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 x)) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 x)) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (+.f64 (sqrt.f64 x) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x)))","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64)) (sqrt.f64 x))","(/.f64 (/.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64)) (sqrt.f64 x))","(/.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (/.f64 #s(literal -1 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (pow.f64 x #s(literal -1/2 binary64))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (pow.f64 x #s(literal -1/2 binary64))) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))) (+.f64 (+.f64 x #s(literal 1 binary64)) x))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 (*.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64)) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)) (neg.f64 (sqrt.f64 x)))","(/.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64)) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64)) (sqrt.f64 x))","(/.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (neg.f64 (neg.f64 (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (neg.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(/.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (neg.f64 (*.f64 (hypot.f64 (sqrt.f64 x) x) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 (*.f64 (hypot.f64 (sqrt.f64 x) x) (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x))) (neg.f64 (*.f64 (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (neg.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))) (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 (*.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x))))","(/.f64 (*.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64)) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","(/.f64 (*.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x)))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal 1 binary64)) (hypot.f64 (sqrt.f64 x) x))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (neg.f64 (sqrt.f64 x)))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (*.f64 (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (*.f64 (hypot.f64 (sqrt.f64 x) x) (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))) (+.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))))","(/.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))) (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64)))))) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64)))))) (neg.f64 (sqrt.f64 x)))","(/.f64 (*.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (neg.f64 (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))","(/.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(/.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (hypot.f64 (sqrt.f64 x) x) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)) (sqrt.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)) (neg.f64 (sqrt.f64 x))))","(/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (hypot.f64 (sqrt.f64 x) x) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) (sqrt.f64 x))","(/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (hypot.f64 (sqrt.f64 x) x))","(/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)) (neg.f64 (sqrt.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (hypot.f64 (sqrt.f64 x) x) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)) (sqrt.f64 x)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(neg.f64 (/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (sqrt.f64 x)))","(neg.f64 (/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64)))))) (sqrt.f64 x)))","(neg.f64 (/.f64 (*.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(neg.f64 (/.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(neg.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(fma.f64 (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 x #s(literal -1/4 binary64)) (pow.f64 x #s(literal -1/4 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))))","(-.f64 (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64)))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64)))))","(-.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x)) (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x)))","(-.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 (/.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))) x)))","(-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (pow.f64 x #s(literal -1/2 binary64)))","(+.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (sqrt.f64 x) (pow.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)) #s(literal 1 binary64)))","(*.f64 (sqrt.f64 x) (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)))","(*.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(pow.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal 2 binary64))","(pow.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))","(pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 (neg.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (neg.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (sqrt.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 2 binary64))) (sqrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 (sqrt.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64))) (sqrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x (neg.f64 x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (fma.f64 x x (neg.f64 x))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(fma.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))","(fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))","(fma.f64 x #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) x #s(literal 1 binary64))","(sqrt.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fabs.f64 (+.f64 x #s(literal 1 binary64)))","(hypot.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (hypot.f64 (sqrt.f64 x) x))","(hypot.f64 (hypot.f64 (sqrt.f64 x) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(hypot.f64 (hypot.f64 (sqrt.f64 x) x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(hypot.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x))","(exp.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal 1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)))","(exp.f64 (log1p.f64 x))","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) x)","(*.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 x)))","(*.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (sqrt.f64 x))","(pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 x) #s(literal 1 binary64))","(pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64))","(pow.f64 x #s(literal 1/2 binary64))","(/.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))","(/.f64 (sqrt.f64 (neg.f64 x)) (sqrt.f64 #s(literal -1 binary64)))","(/.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 x #s(literal -1/2 binary64))))","(/.f64 (sqrt.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(sqrt.f64 x)","(fabs.f64 (sqrt.f64 x))","(exp.f64 (log.f64 (sqrt.f64 x)))","(*.f64 #s(literal -1 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(pow.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (neg.f64 x)) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/4 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/4 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))","(pow.f64 (exp.f64 #s(literal -1/2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x)))","(pow.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64))","(pow.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) #s(literal -1/4 binary64))","(pow.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (hypot.f64 (sqrt.f64 x) x) #s(literal -1 binary64))","(pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))","(/.f64 (neg.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64))) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (pow.f64 x #s(literal -1/2 binary64))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (sqrt.f64 x))","(/.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (hypot.f64 (sqrt.f64 x) x)))","(/.f64 #s(literal -1 binary64) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (sqrt.f64 x))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (sqrt.f64 x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 #s(literal 1 binary64) (hypot.f64 (sqrt.f64 x) x))","(neg.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x)))","(sqrt.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64))))","(exp.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (log.f64 x)) (*.f64 (log1p.f64 x) #s(literal 1/2 binary64))))","(exp.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (log1p.f64 x)) (log.f64 (sqrt.f64 x))))","(exp.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1/4 binary64) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1/4 binary64))))","(exp.f64 (fma.f64 #s(literal -1/2 binary64) (log.f64 x) (*.f64 #s(literal -1/2 binary64) (log1p.f64 x))))","(exp.f64 (fma.f64 #s(literal -1/2 binary64) (log1p.f64 x) (*.f64 #s(literal -1/2 binary64) (log.f64 x))))","(exp.f64 (*.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1/4 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) #s(literal -1/4 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/4 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (hypot.f64 (sqrt.f64 x) x)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1/2 binary64)))","(*.f64 (-.f64 x (+.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) (pow.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 x (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 x (+.f64 x #s(literal 1 binary64))))) (neg.f64 (neg.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))))","(/.f64 (-.f64 (*.f64 x (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64)))) (*.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64) (*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))) (*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64) (*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64) (*.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (neg.f64 (sqrt.f64 x)))) (*.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)))","(/.f64 (fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64) (*.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (sqrt.f64 x))) (*.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal 1 binary64)))","(/.f64 (fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (pow.f64 x #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64) (*.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)))) #s(literal 1 binary64))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal 1 binary64) (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64) (*.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 x)))) #s(literal -1 binary64))","(/.f64 (fma.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(/.f64 (+.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 x)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (+.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (sqrt.f64 x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (*.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))))) (*.f64 #s(literal -1 binary64) (sqrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (*.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))) (*.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64) (*.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) #s(literal 1 binary64))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 x)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))))) (*.f64 #s(literal 1 binary64) (sqrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (*.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))) (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 x) (*.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) #s(literal -1 binary64))","(/.f64 (+.f64 (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64)))) #s(literal 1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(/.f64 (fma.f64 #s(literal 1 binary64) (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))))) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (+.f64 #s(literal -1 binary64) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(/.f64 (+.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (pow.f64 x #s(literal -1/2 binary64)))","(/.f64 (neg.f64 (-.f64 x (+.f64 x #s(literal 1 binary64)))) (neg.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)))) (neg.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 x (hypot.f64 (sqrt.f64 x) x)))))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)))) (neg.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))","(/.f64 (-.f64 x (+.f64 x #s(literal 1 binary64))) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) (+.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 x (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64))","(/.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 x (+.f64 x #s(literal 1 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))))))","(/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 x (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)))))","(fma.f64 (sqrt.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x))) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(fma.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x))","(fma.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 1/4 binary64)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64) (sqrt.f64 x))","(fma.f64 (sqrt.f64 x) #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(fma.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","(fma.f64 #s(literal 1 binary64) (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(-.f64 (/.f64 x (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (/.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":322.093017578125,"type":"rewrite"},{"compiler":[[56436,6118]],"memory":[[16568016,178619760]],"time":288.781982421875,"type":"eval"},{"alts":[["(/.f64 (/.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x))","fresh",38.28763094302679,"binary64"],["(/.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (sqrt.f64 x))","fresh",38.28763094302679,"binary64"],["(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 x (+.f64 x #s(literal 1 binary64)))) (+.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64)))))) (sqrt.f64 x))","fresh",38.8871361057328,"binary64"],["(/.f64 (-.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64)))))) x)","fresh",38.95071814898687,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) (sqrt.f64 x))","fresh",38.90995773050666,"binary64"],["(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (fma.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x)))))","fresh",38.27981844302679,"binary64"],["(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x) #s(literal 1/2 binary64)))))","fresh",38.65560932403838,"binary64"],["(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) (-.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","next",0.4842340332848187,"binary64"],["(/.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) (sqrt.f64 x))","fresh",0.6512078935683543,"binary64"],["(/.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 #s(literal 1/2 binary64) x)) (sqrt.f64 x))","fresh",0.9401967629804395,"binary64"],["(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 3/8 binary64) (*.f64 x x)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","fresh",0.5197607400622466,"binary64"],["(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","fresh",0.641810079145315,"binary64"],["(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","next",1.0879995669577636,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","done",38.9638767072099,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))))","next",10.545330379537651,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) x)) x))","fresh",1.0282990411392232,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal -1/2 binary64)) (*.f64 x x)))","fresh",10.503982869769194,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) x) (-.f64 (pow.f64 x #s(literal -1 binary64)) x)) (*.f64 x (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)))))","fresh",1.4508427131405646,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 x)))","next",60.454488994623254,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x))))","fresh",9.909309308344469,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","done",9.87606342810841,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","fresh",10.529702271115536,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) x)))","next",1.0094112528153005,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 x x))))","fresh",10.480543815760962,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","done",60.454488994623254,"binary64"]],"compiler":[[21,10],[21,10],[19,10],[14,9],[11,8],[27,13],[34,23],[24,14],[23,15],[19,12],[35,24],[29,20],[30,20],[11,8],[24,17],[24,17],[24,17],[30,21],[16,12],[24,17],[25,18],[25,18],[24,17],[25,18],[16,12],[21,10],[21,10],[19,10],[14,9],[11,8],[27,13],[34,23],[24,14],[23,15],[19,12],[35,24],[29,20],[30,20],[24,17],[24,17],[24,17],[30,21],[16,12],[24,17],[25,18],[24,17],[25,18]],"count":[[2002,25]],"kept":[{"done":[1,1],"fresh":[4,0],"new":[1992,22],"picked":[5,2]}],"memory":[[-7452688,85782640]],"min-error":[[0.0,"binary64"]],"time":50.758056640625,"type":"prune"},{"egraph":[[0,8244,263,0.046658532],[6,7347,271,0.020168701],[5,3853,274,0.028724452],[4,1799,275,0.017424133],[3,689,275,0.008104237],[2,243,288,0.002218006],[1,124,288,0.000876652],[0,64,288,0.000635389],[0,40,318,0.000433754]],"inputs":[["(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) (-.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","(*.f64 (+.f64 #s(literal 1 binary64) (-.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(+.f64 #s(literal 1 binary64) (-.f64 x x))","#s(literal 1 binary64)","(-.f64 x x)","x","(/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","#s(literal -1 binary64)","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x)))","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(sqrt.f64 x)","(neg.f64 (sqrt.f64 x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","#s(literal 1 binary64)","(sqrt.f64 x)","x","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) x)))","(*.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) x))","(/.f64 #s(literal -1/2 binary64) x)","#s(literal -1/2 binary64)","x","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) x)","(/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x))","(-.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","(sqrt.f64 x)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x)))","(/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x))","(-.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(sqrt.f64 x)","(/.f64 x (/.f64 #s(literal -1/2 binary64) x))","(/.f64 #s(literal -1/2 binary64) x)","#s(literal -1/2 binary64)","(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","#s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x)))","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(sqrt.f64 x)","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(neg.f64 (sqrt.f64 x))"]],"locations":[["#s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","cost-diff",0],["(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","cost-diff",0],["(neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","cost-diff",1],["(*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x)))","cost-diff",2],["(-.f64 #s(literal 1 binary64) x)","cost-diff",0],["(/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x))","cost-diff",0],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))))","cost-diff",0],["(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x)))","cost-diff",3],["(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) x)","cost-diff",0],["(/.f64 #s(literal -1/2 binary64) x)","cost-diff",0],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) x)))","cost-diff",0],["(*.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) x))","cost-diff",3],["(sqrt.f64 x)","cost-diff",0],["(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","cost-diff",0],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 x)))","cost-diff",0],["(-.f64 x x)","cost-diff",2],["(+.f64 #s(literal 1 binary64) (-.f64 x x))","cost-diff",2],["(*.f64 (+.f64 #s(literal 1 binary64) (-.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","cost-diff",2],["(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) (-.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","cost-diff",2]],"memory":[[2653696,24718432]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) (-.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","(/.f64 #s(literal 1 binary64) (fma.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) x (*.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x))))","(*.f64 (+.f64 #s(literal 1 binary64) (-.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(+.f64 #s(literal 1 binary64) (-.f64 x x))","#s(literal 1 binary64)","#s(literal 1 binary64)","(-.f64 x x)","#s(literal 0 binary64)","x","(/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","#s(literal -1 binary64)","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x)))","(neg.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) x))","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(sqrt.f64 x)","(neg.f64 (sqrt.f64 x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (sqrt.f64 x) x))","(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","(/.f64 (sqrt.f64 x) x)","#s(literal 1 binary64)","(sqrt.f64 x)","x","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1/2 binary64)) (pow.f64 (sqrt.f64 x) #s(literal 5 binary64))))","(*.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) x))","(/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1/2 binary64)) (pow.f64 (sqrt.f64 x) #s(literal 5 binary64)))","(/.f64 #s(literal -1/2 binary64) x)","#s(literal -1/2 binary64)","x","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) x)","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) (sqrt.f64 x))","(/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x))","(-.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","(sqrt.f64 x)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1/2 binary64)) (pow.f64 (sqrt.f64 x) #s(literal 5 binary64))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x)))","(/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1/2 binary64)) (pow.f64 (sqrt.f64 x) #s(literal 5 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x))","(-.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(sqrt.f64 x)","(/.f64 x (/.f64 #s(literal -1/2 binary64) x))","(/.f64 #s(literal -1/2 binary64) x)","#s(literal -1/2 binary64)","(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (neg.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) x)))","#s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","#s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(/.f64 #s(literal -1 binary64) (sqrt.f64 x))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 (sqrt.f64 x) x)","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x)))","(neg.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) x))","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(sqrt.f64 x)","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(neg.f64 (sqrt.f64 x))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":192.98291015625,"type":"simplify"},{"compiler":[[277,33]],"locations":[["(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","accuracy",0.16015625],["(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","accuracy",0.16796875],["(*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x)))","accuracy",0.5],["#s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","accuracy",0.7120264499942669],["(/.f64 x (/.f64 #s(literal -1/2 binary64) x))","accuracy",0.1484375],["(/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x))","accuracy",0.48046875],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))))","accuracy",0.6880836687748848],["(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x)))","accuracy",9.796366397009066],["(*.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) x))","accuracy",0.22265625],["(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) x)","accuracy",0.25390625],["(/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x))","accuracy",0.48046875],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) x)))","accuracy",0.6880836687748848],["(sqrt.f64 x)","accuracy",0.0],["(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","accuracy",0.28515625],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 x)))","accuracy",60.454488994623254],["(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","accuracy",0.015625],["(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) (-.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","accuracy",0.16796875],["(/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","accuracy",0.28125],["(*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x)))","accuracy",0.5]],"memory":[[-3691888,57508192]],"mixsample":[[0.9560546875,"ival-add",1200],[17.306640625,"adjust",800],[39.447998046875,"ival-div",0],[3.77587890625,"ival-div",400],[0.195068359375,"ival-assert",0],[0.435546875,"ival-div",1600],[9.33740234375,"ival-sub",0],[7.417724609375,"ival-sqrt",0],[1.55419921875,"adjust",2000],[6.091552734375,"ival-add",0],[0.086181640625,"ival-add",1600],[44.05810546875,"ival-mult",0],[0.50146484375,"ival-sqrt",1600],[0.28125,"ival-add",400],[0.34716796875,"ival-true",0],[0.547607421875,"exact",0],[0.887939453125,"ival-add",800],[4.82861328125,"ival-sqrt",400],[4.161376953125,"ival-neg",0]],"outcomes":[[172.59912109375,1,"valid",228],[23.093994140625,2,"valid",24],[0.98291015625,0,"valid",4]],"time":243.714111328125,"type":"localize"},{"count":[[23,80]],"inputs":[["(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) (-.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","(*.f64 (+.f64 #s(literal 1 binary64) (-.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(+.f64 #s(literal 1 binary64) (-.f64 x x))","(-.f64 x x)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","(sqrt.f64 x)","(*.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) x)))","(/.f64 #s(literal -1/2 binary64) x)","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) x)","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))))","(/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x))","(-.f64 #s(literal 1 binary64) x)","(*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x)))","(neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","#s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 x (/.f64 #s(literal -1/2 binary64) x))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))"]],"memory":[[-1759520,5899472]],"outputs":[["(* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))","(/ (+ (* -1/2 (* (sqrt (pow x 3)) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/ (+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3))))))))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/ (+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))) (+ (* x (+ (* -1 (* (sqrt x) (+ (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 2))) (+ (* 1/2 (/ (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))) (+ 1 (sqrt x)))) (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 3))))))) (+ (* 1/4 (* (sqrt (/ 1 x)) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* 1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x)))))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))))))))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","-1","(- (* 1/2 x) 1)","(- (* x (+ 1/2 (* -3/8 x))) 1)","(- (* x (+ 1/2 (* x (- (* 5/16 x) 3/8)))) 1)","1","0","(sqrt (/ 1 x))","(/ (+ (sqrt x) (* -1 x)) x)","(/ (+ (sqrt x) (* x (- (* 1/2 x) 1))) x)","(/ (+ (sqrt x) (* x (- (* x (+ 1/2 (* -3/8 x))) 1))) x)","(sqrt x)","(* -1/2 (sqrt (/ 1 (pow x 5))))","(/ (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 3))","(/ -1/2 x)","(sqrt (/ 1 (pow x 3)))","(/ (+ (sqrt x) (* -1 (sqrt (pow x 3)))) (pow x 2))","(/ (+ (sqrt x) (* -1 (sqrt (pow x 3)))) x)","(+ 1 (* -1 x))","(* -1 (* (sqrt x) (+ 1 (sqrt x))))","(+ (* -1 (* (sqrt x) (+ 1 (sqrt x)))) (* -1/2 (sqrt (pow x 3))))","(+ (* -1 (* (sqrt x) (+ 1 (sqrt x)))) (* x (+ (* -1/2 (sqrt x)) (* 1/8 (sqrt (pow x 3))))))","(+ (* -1 (* (sqrt x) (+ 1 (sqrt x)))) (* x (+ (* -1/2 (sqrt x)) (* x (+ (* -1/16 (sqrt (pow x 3))) (* 1/8 (sqrt x)))))))","(* -1 (sqrt (/ 1 x)))","(+ 1 (sqrt x))","(+ 1 (+ (sqrt x) (* 1/2 x)))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* -1/8 x)))))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))))","(* -2 (pow x 2))","(* 1/2 (sqrt (/ 1 (pow x 3))))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 3/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) (pow x 2))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (+ (* -5/32 (sqrt (/ 1 (pow x 5)))) (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (+ (* 3/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))))) (pow x 2))","(+ (* -1 (sqrt (/ 1 x))) (* 1/2 (sqrt (/ 1 (pow x 3)))))","(+ (* -1 (sqrt (/ 1 x))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(+ (* -1 (sqrt (/ 1 x))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (* (sqrt (/ 1 (pow x 7))) (+ 1 (* 1/4 x)))))))","(/ (- (* -1/2 (sqrt (/ 1 x))) (* -1/2 (sqrt x))) (pow x 2))","(/ (- (* 1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (/ 1 x))))) (pow x 2))","(/ (- (* -1/2 (* (sqrt (/ 1 (pow x 5))) (+ 1 (* 1/2 x)))) (+ (* -1/2 (sqrt x)) (+ (* -1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 x)))))) (pow x 2))","(/ (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))) x)","(+ (sqrt (/ 1 (pow x 3))) (* -1 (sqrt (/ 1 x))))","(* -1 (sqrt x))","(* x (+ (sqrt (/ 1 (pow x 3))) (* -1 (sqrt (/ 1 x)))))","(* -1 x)","(* x (- (/ 1 x) 1))","(* -2 x)","(* -1 (* (pow x 2) (+ (* 2 (/ 1 x)) (* 1/2 (/ 1 (pow x 2))))))","(* (pow x 2) (- (/ 1/8 (pow x 3)) (+ (* 2 (/ 1 x)) (* 1/2 (/ 1 (pow x 2))))))","(* (pow x 2) (- (* 1/8 (/ 1 (pow x 3))) (+ (/ 1/16 (pow x 4)) (+ (* 2 (/ 1 x)) (* 1/2 (/ 1 (pow x 2)))))))","(* 2 (sqrt x))","(* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x))))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))))","(/ (+ (* 1/4 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2))))) x)) (* -1/4 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/2 (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* 1/16 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 4))))) x)) (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))))) x)) (* -1/4 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)) (* 1/2 (sqrt x))) (pow x 2))","(* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (sqrt (/ 1 (pow x 3)))))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* 1/2 (sqrt x))) (pow x 3))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(- (sqrt (/ 1 x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 5))))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(- (+ (sqrt (/ 1 x)) (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* -1/2 (sqrt x))) (pow x 3)))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (/ (+ (* -1/2 (sqrt (/ 1 x))) (* 1/2 (sqrt (/ 1 (pow x 3))))) x))","(* -1 (* x (+ (sqrt (/ 1 x)) (* -1 (sqrt (/ 1 (pow x 3)))))))","(* -1 (* x (- 1 (/ 1 x))))","(* 2 (* x (pow (sqrt -1) 2)))","(* (pow x 2) (- (* 2 (/ (pow (sqrt -1) 2) x)) (* 1/2 (/ 1 (pow x 2)))))","(* (pow x 2) (+ (* -1 (/ (+ 1/2 (* 1/8 (/ 1 (* x (pow (sqrt -1) 2))))) (pow x 2))) (* 2 (/ (pow (sqrt -1) 2) x))))","(* (pow x 2) (- (* 2 (/ (pow (sqrt -1) 2) x)) (+ (* 1/8 (/ 1 (* (pow x 3) (pow (sqrt -1) 2)))) (+ (* 1/16 (/ 1 (* (pow x 4) (pow (sqrt -1) 4)))) (* 1/2 (/ 1 (pow x 2)))))))","(* -2 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))"]],"series":[[4.43603515625,"((/ (* (+ 1 (- x x)) (/ -1 (sqrt (+ x 1)))) (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x)))) (* (+ 1 (- x x)) (/ -1 (sqrt (+ x 1)))) (+ 1 (- x x)) (- x x) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ 1 (sqrt x)) (sqrt x) (* (/ -1/2 x) (/ (/ (- 1 x) (sqrt x)) x)) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ -1/2 x) (/ (/ (- 1 x) (sqrt x)) x) (/ (/ (- 1 x) (sqrt x)) (/ x (/ -1/2 x))) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ (- 1 x) (sqrt x)) (- 1 x) (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (neg (sqrt (/ 1 x))) (/ (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x)))) (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/ -1 (sqrt (+ x 1))) (+ (sqrt x) (sqrt (+ x 1))) (/ x (/ -1/2 x)) (sqrt (/ 1 x)))","x","-inf"],[4.165771484375,"((/ (* (+ 1 (- x x)) (/ -1 (sqrt (+ x 1)))) (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x)))) (* (+ 1 (- x x)) (/ -1 (sqrt (+ x 1)))) (+ 1 (- x x)) (- x x) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ 1 (sqrt x)) (sqrt x) (* (/ -1/2 x) (/ (/ (- 1 x) (sqrt x)) x)) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ -1/2 x) (/ (/ (- 1 x) (sqrt x)) x) (/ (/ (- 1 x) (sqrt x)) (/ x (/ -1/2 x))) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ (- 1 x) (sqrt x)) (- 1 x) (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (neg (sqrt (/ 1 x))) (/ (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x)))) (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/ -1 (sqrt (+ x 1))) (+ (sqrt x) (sqrt (+ x 1))) (/ x (/ -1/2 x)) (sqrt (/ 1 x)))","x","inf"],[2.64599609375,"((/ (* (+ 1 (- x x)) (/ -1 (sqrt (+ x 1)))) (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x)))) (* (+ 1 (- x x)) (/ -1 (sqrt (+ x 1)))) (+ 1 (- x x)) (- x x) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ 1 (sqrt x)) (sqrt x) (* (/ -1/2 x) (/ (/ (- 1 x) (sqrt x)) x)) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ -1/2 x) (/ (/ (- 1 x) (sqrt x)) x) (/ (/ (- 1 x) (sqrt x)) (/ x (/ -1/2 x))) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ (- 1 x) (sqrt x)) (- 1 x) (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (neg (sqrt (/ 1 x))) (/ (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x)))) (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/ -1 (sqrt (+ x 1))) (+ (sqrt x) (sqrt (+ x 1))) (/ x (/ -1/2 x)) (sqrt (/ 1 x)))","x","0"]],"time":13.616943359375,"type":"series"},{"count":[[80,80]],"egraph":[[0,8336,1213,0.126292465],[2,3284,1291,0.040618383],[1,1003,1346,0.011968078],[0,346,1598,0.00342424]],"inputs":[["(* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))","(/ (+ (* -1/2 (* (sqrt (pow x 3)) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/ (+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3))))))))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/ (+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))) (+ (* x (+ (* -1 (* (sqrt x) (+ (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 2))) (+ (* 1/2 (/ (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))) (+ 1 (sqrt x)))) (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 3))))))) (+ (* 1/4 (* (sqrt (/ 1 x)) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* 1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x)))))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))))))))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","-1","(- (* 1/2 x) 1)","(- (* x (+ 1/2 (* -3/8 x))) 1)","(- (* x (+ 1/2 (* x (- (* 5/16 x) 3/8)))) 1)","1","0","(sqrt (/ 1 x))","(/ (+ (sqrt x) (* -1 x)) x)","(/ (+ (sqrt x) (* x (- (* 1/2 x) 1))) x)","(/ (+ (sqrt x) (* x (- (* x (+ 1/2 (* -3/8 x))) 1))) x)","(sqrt x)","(* -1/2 (sqrt (/ 1 (pow x 5))))","(/ (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 3))","(/ -1/2 x)","(sqrt (/ 1 (pow x 3)))","(/ (+ (sqrt x) (* -1 (sqrt (pow x 3)))) (pow x 2))","(/ (+ (sqrt x) (* -1 (sqrt (pow x 3)))) x)","(+ 1 (* -1 x))","(* -1 (* (sqrt x) (+ 1 (sqrt x))))","(+ (* -1 (* (sqrt x) (+ 1 (sqrt x)))) (* -1/2 (sqrt (pow x 3))))","(+ (* -1 (* (sqrt x) (+ 1 (sqrt x)))) (* x (+ (* -1/2 (sqrt x)) (* 1/8 (sqrt (pow x 3))))))","(+ (* -1 (* (sqrt x) (+ 1 (sqrt x)))) (* x (+ (* -1/2 (sqrt x)) (* x (+ (* -1/16 (sqrt (pow x 3))) (* 1/8 (sqrt x)))))))","(* -1 (sqrt (/ 1 x)))","(+ 1 (sqrt x))","(+ 1 (+ (sqrt x) (* 1/2 x)))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* -1/8 x)))))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))))","(* -2 (pow x 2))","(* 1/2 (sqrt (/ 1 (pow x 3))))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 3/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) (pow x 2))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (+ (* -5/32 (sqrt (/ 1 (pow x 5)))) (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (+ (* 3/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))))) (pow x 2))","(+ (* -1 (sqrt (/ 1 x))) (* 1/2 (sqrt (/ 1 (pow x 3)))))","(+ (* -1 (sqrt (/ 1 x))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(+ (* -1 (sqrt (/ 1 x))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (* (sqrt (/ 1 (pow x 7))) (+ 1 (* 1/4 x)))))))","(/ (- (* -1/2 (sqrt (/ 1 x))) (* -1/2 (sqrt x))) (pow x 2))","(/ (- (* 1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (/ 1 x))))) (pow x 2))","(/ (- (* -1/2 (* (sqrt (/ 1 (pow x 5))) (+ 1 (* 1/2 x)))) (+ (* -1/2 (sqrt x)) (+ (* -1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 x)))))) (pow x 2))","(/ (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))) x)","(+ (sqrt (/ 1 (pow x 3))) (* -1 (sqrt (/ 1 x))))","(* -1 (sqrt x))","(* x (+ (sqrt (/ 1 (pow x 3))) (* -1 (sqrt (/ 1 x)))))","(* -1 x)","(* x (- (/ 1 x) 1))","(* -2 x)","(* -1 (* (pow x 2) (+ (* 2 (/ 1 x)) (* 1/2 (/ 1 (pow x 2))))))","(* (pow x 2) (- (/ 1/8 (pow x 3)) (+ (* 2 (/ 1 x)) (* 1/2 (/ 1 (pow x 2))))))","(* (pow x 2) (- (* 1/8 (/ 1 (pow x 3))) (+ (/ 1/16 (pow x 4)) (+ (* 2 (/ 1 x)) (* 1/2 (/ 1 (pow x 2)))))))","(* 2 (sqrt x))","(* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x))))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))))","(/ (+ (* 1/4 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2))))) x)) (* -1/4 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/2 (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* 1/16 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 4))))) x)) (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))))) x)) (* -1/4 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)) (* 1/2 (sqrt x))) (pow x 2))","(* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (sqrt (/ 1 (pow x 3)))))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* 1/2 (sqrt x))) (pow x 3))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(- (sqrt (/ 1 x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 5))))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(- (+ (sqrt (/ 1 x)) (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* -1/2 (sqrt x))) (pow x 3)))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (/ (+ (* -1/2 (sqrt (/ 1 x))) (* 1/2 (sqrt (/ 1 (pow x 3))))) x))","(* -1 (* x (+ (sqrt (/ 1 x)) (* -1 (sqrt (/ 1 (pow x 3)))))))","(* -1 (* x (- 1 (/ 1 x))))","(* 2 (* x (pow (sqrt -1) 2)))","(* (pow x 2) (- (* 2 (/ (pow (sqrt -1) 2) x)) (* 1/2 (/ 1 (pow x 2)))))","(* (pow x 2) (+ (* -1 (/ (+ 1/2 (* 1/8 (/ 1 (* x (pow (sqrt -1) 2))))) (pow x 2))) (* 2 (/ (pow (sqrt -1) 2) x))))","(* (pow x 2) (- (* 2 (/ (pow (sqrt -1) 2) x)) (+ (* 1/8 (/ 1 (* (pow x 3) (pow (sqrt -1) 2)))) (+ (* 1/16 (/ 1 (* (pow x 4) (pow (sqrt -1) 4)))) (* 1/2 (/ 1 (pow x 2)))))))","(* -2 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))"]],"memory":[[6122928,52868336]],"method":["egg-herbie"],"outputs":[["(* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))","(/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))","(/ (+ (* -1/2 (* (sqrt (pow x 3)) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64))) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (/.f64 (sqrt.f64 x) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))) x)","(/ (+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3))))))))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/.f64 (fma.f64 (fma.f64 (*.f64 x (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))) #s(literal -1/2 binary64) (*.f64 (sqrt.f64 x) (fma.f64 x (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64))) (/.f64 #s(literal 1/8 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 #s(literal -1/2 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))))) x (/.f64 (sqrt.f64 x) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))) x)","(/ (+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))) (+ (* x (+ (* -1 (* (sqrt x) (+ (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 2))) (+ (* 1/2 (/ (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))) (+ 1 (sqrt x)))) (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 3))))))) (+ (* 1/4 (* (sqrt (/ 1 x)) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* 1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x)))))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))))))))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 (neg.f64 (sqrt.f64 x)) (+.f64 (+.f64 (/.f64 #s(literal 1/16 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64))) (/.f64 #s(literal 1/16 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 (+.f64 (/.f64 #s(literal 1/8 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64))) (/.f64 #s(literal 1/16 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (+.f64 (/.f64 #s(literal 1/2 binary64) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) (/.f64 #s(literal 1/4 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))))) x)) x (*.f64 (sqrt.f64 x) (fma.f64 x (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64))) (/.f64 #s(literal 1/8 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 #s(literal -1/2 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))))) x (/.f64 (sqrt.f64 x) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))) x)","-1","#s(literal -1 binary64)","(- (* 1/2 x) 1)","(fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))","(- (* x (+ 1/2 (* -3/8 x))) 1)","(fma.f64 (fma.f64 #s(literal -3/8 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(- (* x (+ 1/2 (* x (- (* 5/16 x) 3/8)))) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal 5/16 binary64) x #s(literal -3/8 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","1","#s(literal 1 binary64)","0","#s(literal 0 binary64)","(sqrt (/ 1 x))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/ (+ (sqrt x) (* -1 x)) x)","(/.f64 (-.f64 (sqrt.f64 x) x) x)","(/ (+ (sqrt x) (* x (- (* 1/2 x) 1))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x (sqrt.f64 x)) x)","(/ (+ (sqrt x) (* x (- (* x (+ 1/2 (* -3/8 x))) 1))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -3/8 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x (sqrt.f64 x)) x)","(sqrt x)","(sqrt.f64 x)","(* -1/2 (sqrt (/ 1 (pow x 5))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/2 binary64))","(/ (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 3))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/ -1/2 x)","(/.f64 #s(literal -1/2 binary64) x)","(sqrt (/ 1 (pow x 3)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(/ (+ (sqrt x) (* -1 (sqrt (pow x 3)))) (pow x 2))","(/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (pow.f64 x #s(literal 3 binary64)))) (*.f64 x x))","(/ (+ (sqrt x) (* -1 (sqrt (pow x 3)))) x)","(/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (pow.f64 x #s(literal 3 binary64)))) x)","(+ 1 (* -1 x))","(-.f64 #s(literal 1 binary64) x)","(* -1 (* (sqrt x) (+ 1 (sqrt x))))","(neg.f64 (+.f64 (sqrt.f64 x) x))","(+ (* -1 (* (sqrt x) (+ 1 (sqrt x)))) (* -1/2 (sqrt (pow x 3))))","(fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal -1/2 binary64) (neg.f64 (+.f64 (sqrt.f64 x) x)))","(+ (* -1 (* (sqrt x) (+ 1 (sqrt x)))) (* x (+ (* -1/2 (sqrt x)) (* 1/8 (sqrt (pow x 3))))))","(fma.f64 (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) x (neg.f64 (+.f64 (sqrt.f64 x) x)))","(+ (* -1 (* (sqrt x) (+ 1 (sqrt x)))) (* x (+ (* -1/2 (sqrt x)) (* x (+ (* -1/16 (sqrt (pow x 3))) (* 1/8 (sqrt x)))))))","(fma.f64 (fma.f64 (*.f64 x #s(literal -1/16 binary64)) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 (sqrt.f64 x) (fma.f64 x #s(literal 1/8 binary64) #s(literal -1/2 binary64)))) x (neg.f64 (+.f64 (sqrt.f64 x) x)))","(* -1 (sqrt (/ 1 x)))","(neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(+ 1 (sqrt x))","(+.f64 (sqrt.f64 x) #s(literal 1 binary64))","(+ 1 (+ (sqrt x) (* 1/2 x)))","(fma.f64 #s(literal 1/2 binary64) x (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* -1/8 x)))))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/2 binary64)) x (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/16 binary64) x #s(literal -1/8 binary64)) x #s(literal 1/2 binary64)) x (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))","(* -2 (pow x 2))","(*.f64 (*.f64 #s(literal -2 binary64) x) x)","(* 1/2 (sqrt (/ 1 (pow x 3))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) (pow x 2))","(/.f64 (fma.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 3/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) (pow x 2))","(/.f64 (fma.f64 #s(literal 3/16 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -3/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) (*.f64 x x))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (+ (* -5/32 (sqrt (/ 1 (pow x 5)))) (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (+ (* 3/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))))) (pow x 2))","(/.f64 (fma.f64 #s(literal -5/32 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -3/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/4 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))) (*.f64 x x))","(+ (* -1 (sqrt (/ 1 x))) (* 1/2 (sqrt (/ 1 (pow x 3)))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(+ (* -1 (sqrt (/ 1 x))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(fma.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(+ (* -1 (sqrt (/ 1 x))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (* (sqrt (/ 1 (pow x 7))) (+ 1 (* 1/4 x)))))))","(-.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/2 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(/ (- (* -1/2 (sqrt (/ 1 x))) (* -1/2 (sqrt x))) (pow x 2))","(*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(/ (- (* 1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (/ 1 x))))) (pow x 2))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 x x))","(/ (- (* -1/2 (* (sqrt (/ 1 (pow x 5))) (+ 1 (* 1/2 x)))) (+ (* -1/2 (sqrt x)) (+ (* -1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 x)))))) (pow x 2))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (-.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (+.f64 (sqrt.f64 x) (*.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 x x))","(/ (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))) x)","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/2 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x)","(+ (sqrt (/ 1 (pow x 3))) (* -1 (sqrt (/ 1 x))))","(-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(* -1 (sqrt x))","(neg.f64 (sqrt.f64 x))","(* x (+ (sqrt (/ 1 (pow x 3))) (* -1 (sqrt (/ 1 x)))))","(*.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(* -1 x)","(neg.f64 x)","(* x (- (/ 1 x) 1))","(-.f64 #s(literal 1 binary64) x)","(* -2 x)","(*.f64 #s(literal -2 binary64) x)","(* -1 (* (pow x 2) (+ (* 2 (/ 1 x)) (* 1/2 (/ 1 (pow x 2))))))","(fma.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x) #s(literal -1/2 binary64))","(* (pow x 2) (- (/ 1/8 (pow x 3)) (+ (* 2 (/ 1 x)) (* 1/2 (/ 1 (pow x 2))))))","(fma.f64 (-.f64 (/.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 2 binary64) x)) (*.f64 x x) #s(literal -1/2 binary64))","(* (pow x 2) (- (* 1/8 (/ 1 (pow x 3))) (+ (/ 1/16 (pow x 4)) (+ (* 2 (/ 1 x)) (* 1/2 (/ 1 (pow x 2)))))))","(fma.f64 (-.f64 (/.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 x x) (fma.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x) #s(literal -1/2 binary64)))","(* 2 (sqrt x))","(*.f64 #s(literal 2 binary64) (sqrt.f64 x))","(* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x)","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x))))))","(*.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))) x)","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) #s(literal 1/16 binary64) (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))) x)","(/ (+ (* 1/4 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) (pow x 2))","(/.f64 (fma.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2))))) x)) (* -1/4 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/4 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal 3/16 binary64) (sqrt.f64 x))) (neg.f64 x))) (neg.f64 x))) (*.f64 x x))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/2 (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* 1/16 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 4))))) x)) (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))))) x)) (* -1/4 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal -1/4 binary64) (sqrt.f64 x) (/.f64 (neg.f64 (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (fma.f64 #s(literal 3/16 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 5/32 binary64) (sqrt.f64 x) (*.f64 (/.f64 #s(literal 1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))))) (neg.f64 x))))) (neg.f64 x))) x)) (*.f64 x x))","(* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (sqrt (/ 1 (pow x 3)))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(fma.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* 1/2 (sqrt x))) (pow x 3))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) (neg.f64 x) #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x))) (pow.f64 x #s(literal 3 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(- (sqrt (/ 1 x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(- (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(- (+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 5))))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(fma.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(- (+ (sqrt (/ 1 x)) (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* -1/2 (sqrt x))) (pow x 3)))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) (neg.f64 x) #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x))) (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(sqrt.f64 x)","(* -1 (/ (+ (* -1/2 (sqrt (/ 1 x))) (* 1/2 (sqrt (/ 1 (pow x 3))))) x))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (neg.f64 x))","(* -1 (* x (+ (sqrt (/ 1 x)) (* -1 (sqrt (/ 1 (pow x 3)))))))","(*.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(* -1 (* x (- 1 (/ 1 x))))","(-.f64 #s(literal 1 binary64) x)","(* 2 (* x (pow (sqrt -1) 2)))","(*.f64 #s(literal -2 binary64) x)","(* (pow x 2) (- (* 2 (/ (pow (sqrt -1) 2) x)) (* 1/2 (/ 1 (pow x 2)))))","(fma.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x) #s(literal -1/2 binary64))","(* (pow x 2) (+ (* -1 (/ (+ 1/2 (* 1/8 (/ 1 (* x (pow (sqrt -1) 2))))) (pow x 2))) (* 2 (/ (pow (sqrt -1) 2) x))))","(*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (+.f64 (/.f64 (+.f64 (/.f64 #s(literal -1/8 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 2 binary64))) (*.f64 x x))","(* (pow x 2) (- (* 2 (/ (pow (sqrt -1) 2) x)) (+ (* 1/8 (/ 1 (* (pow x 3) (pow (sqrt -1) 2)))) (+ (* 1/16 (/ 1 (* (pow x 4) (pow (sqrt -1) 4)))) (* 1/2 (/ 1 (pow x 2)))))))","(fma.f64 (*.f64 (/.f64 #s(literal -2 binary64) x) x) x (fma.f64 (neg.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (pow.f64 x #s(literal 4 binary64))) (/.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal 3 binary64))))) (*.f64 x x) #s(literal -1/2 binary64)))","(* -2 (* (sqrt x) (pow (sqrt -1) 2)))","(*.f64 #s(literal 2 binary64) (sqrt.f64 x))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(*.f64 (fma.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))) (neg.f64 x))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/8 binary64) (fma.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64)))) (neg.f64 x))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/8 binary64) (fma.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))))) (neg.f64 x))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))"]],"stop":[["iter limit",1],["node limit",1]],"time":312.43701171875,"type":"simplify"},{"count":[[23,953]],"egraph":[[0,8280,180,0.0750213],[2,1886,180,0.028447507],[1,275,188,0.007096429],[0,64,214,0.002936155],[0,40,244,0.000384842]],"inputs":[["(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) (-.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","(*.f64 (+.f64 #s(literal 1 binary64) (-.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(+.f64 #s(literal 1 binary64) (-.f64 x x))","(-.f64 x x)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","(sqrt.f64 x)","(*.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) x)))","(/.f64 #s(literal -1/2 binary64) x)","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) x)","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))))","(/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x))","(-.f64 #s(literal 1 binary64) x)","(*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x)))","(neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","#s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 x (/.f64 #s(literal -1/2 binary64) x))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))"]],"memory":[[-16676464,63739216]],"outputs":[["(*.f64 (pow.f64 (/.f64 (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (/.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 x))))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))))","(*.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 x x x)) (pow.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (neg.f64 (sqrt.f64 x))) (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(*.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (/.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(*.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal 1 binary64))","(*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (neg.f64 (sqrt.f64 x))))","(*.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (neg.f64 (sqrt.f64 x)))))","(*.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(pow.f64 (*.f64 (hypot.f64 (sqrt.f64 x) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64))","(pow.f64 (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (hypot.f64 (sqrt.f64 x) x)) #s(literal -1 binary64))","(pow.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 x x x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (hypot.f64 (sqrt.f64 x) x) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64))","(pow.f64 (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) (fma.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) (*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)))) (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)))) (fma.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x)) #s(literal 3 binary64)) (pow.f64 (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x)) #s(literal 3 binary64))) (fma.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x)) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x)) (fma.f64 (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x)) (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x)) (*.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x)) (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x))))))","(/.f64 (fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) #s(literal -1 binary64) (pow.f64 x #s(literal -3/2 binary64))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1/2 binary64))))))","(/.f64 (neg.f64 (/.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (neg.f64 (sqrt.f64 x))))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))))) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 x x x)))) (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (neg.f64 (neg.f64 (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64)))) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (-.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x)))) (neg.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (neg.f64 (sqrt.f64 x)))) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (neg.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) (*.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (*.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (+.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))) (*.f64 (+.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x)) (*.f64 (hypot.f64 (sqrt.f64 x) x) (sqrt.f64 x))) (fma.f64 x x x))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (fma.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (neg.f64 x)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (sqrt.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (fma.f64 (sqrt.f64 x) #s(literal -1 binary64) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (sqrt.f64 x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (neg.f64 x)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (fma.f64 (sqrt.f64 x) #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (hypot.f64 (sqrt.f64 x) x))","(/.f64 (fma.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 x)) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 x)) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (+.f64 (sqrt.f64 x) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x)))","(/.f64 (/.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) #s(literal -1 binary64)) (sqrt.f64 x))","(/.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal -1 binary64) (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (neg.f64 (sqrt.f64 x)))) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 x x x))) (neg.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))))","(/.f64 (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 x x x))) (neg.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (neg.f64 (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) (neg.f64 (sqrt.f64 x)))","(/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 x x x)) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))))","(/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 x x x)) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(/.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (neg.f64 (sqrt.f64 x))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))) (+.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))))))","(/.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))) (+.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (hypot.f64 (sqrt.f64 x) x))","(/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x)))","(/.f64 (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 x x x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (hypot.f64 (sqrt.f64 x) x) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))))","(/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 x x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (hypot.f64 (sqrt.f64 x) x) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(neg.f64 (/.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) (sqrt.f64 x)))","(neg.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(fma.f64 (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(fma.f64 (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(fma.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(fma.f64 (pow.f64 x #s(literal -1/4 binary64)) (pow.f64 x #s(literal -1/4 binary64)) (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal -1 binary64) x)) (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1/2 binary64)) (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64) (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(fma.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1/2 binary64)))","(-.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))))","(-.f64 (/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (/.f64 (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(-.f64 (/.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (/.f64 (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(-.f64 (/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (/.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (neg.f64 (sqrt.f64 x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(-.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))))","(-.f64 (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)))))","(-.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x)) (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x)))","(-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(+.f64 (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64))","(*.f64 (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(pow.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal 0 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)))","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/4 binary64)) (pow.f64 x #s(literal -1/4 binary64)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal -1 binary64) x)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(pow.f64 (pow.f64 x #s(literal -1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64))","(pow.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (*.f64 x x) #s(literal -1/4 binary64))","(pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64))","(pow.f64 (sqrt.f64 x) #s(literal -1 binary64))","(pow.f64 x #s(literal -1/2 binary64))","(/.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (neg.f64 (sqrt.f64 (neg.f64 x))))","(/.f64 (sqrt.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (sqrt.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (sqrt.f64 (sqrt.f64 x)))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x)))))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x))))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (neg.f64 x)))","(/.f64 (neg.f64 x) (neg.f64 (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 x))","(/.f64 (sqrt.f64 x) x)","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)))","(/.f64 x (pow.f64 x #s(literal 3/2 binary64)))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 (neg.f64 x))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","(neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(sqrt.f64 (/.f64 x (*.f64 x x)))","(sqrt.f64 (pow.f64 x #s(literal -1 binary64)))","(fabs.f64 (pow.f64 x #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 #s(literal -1/2 binary64) (log.f64 x)))","(*.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 x)))","(*.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 x) #s(literal 1 binary64))","(*.f64 x (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 #s(literal 1 binary64) (sqrt.f64 x))","(pow.f64 (*.f64 (*.f64 x x) (pow.f64 x #s(literal -1 binary64))) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64))","(pow.f64 (sqrt.f64 x) #s(literal 1 binary64))","(pow.f64 x #s(literal 1/2 binary64))","(/.f64 (neg.f64 (neg.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))","(/.f64 (sqrt.f64 (neg.f64 x)) (sqrt.f64 #s(literal -1 binary64)))","(/.f64 (neg.f64 x) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))","(/.f64 (sqrt.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(/.f64 x (sqrt.f64 x))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(sqrt.f64 (/.f64 (*.f64 x x) x))","(sqrt.f64 (*.f64 (*.f64 x x) (pow.f64 x #s(literal -1 binary64))))","(sqrt.f64 x)","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (sqrt.f64 x))) (/.f64 x (neg.f64 (sqrt.f64 x))))","(-.f64 #s(literal 0 binary64) (/.f64 (sqrt.f64 x) #s(literal -1 binary64)))","(fabs.f64 (sqrt.f64 x))","(exp.f64 (log.f64 (sqrt.f64 x)))","(*.f64 (pow.f64 (/.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x)) (neg.f64 (-.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 (pow.f64 (/.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x)) (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal -2 binary64) x) (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 x #s(literal -3/2 binary64)))","(*.f64 (pow.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 (/.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (neg.f64 x)) (/.f64 #s(literal 1/2 binary64) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 #s(literal -2 binary64) x)) (pow.f64 x #s(literal -3/2 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -2 binary64) x)))","(*.f64 (/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x))) (pow.f64 (/.f64 x (/.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (/.f64 (*.f64 #s(literal -2 binary64) x) (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -3/2 binary64))) (/.f64 #s(literal -1/2 binary64) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x))","(*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))))","(*.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x)))","(*.f64 (/.f64 #s(literal -1/2 binary64) x) (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -3/2 binary64))))","(*.f64 #s(literal -1/2 binary64) (-.f64 (/.f64 (pow.f64 x #s(literal -3/2 binary64)) x) (pow.f64 x #s(literal -3/2 binary64))))","(*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (*.f64 x x)))","(*.f64 #s(literal -1/2 binary64) (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -3/2 binary64)))))","(*.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (pow.f64 x #s(literal 5/2 binary64))))","(pow.f64 (/.f64 (*.f64 x x) (/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64))) (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) x) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal 3/2 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 #s(literal -2 binary64) x)) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 (sqrt.f64 x) (-.f64 #s(literal 1 binary64) x)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) x) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal 3/2 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))) #s(literal 3 binary64)) (pow.f64 (/.f64 (sqrt.f64 x) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))) (fma.f64 (/.f64 (sqrt.f64 x) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))) (/.f64 (sqrt.f64 x) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))) (*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))) (/.f64 (sqrt.f64 x) (/.f64 x (/.f64 #s(literal -1/2 binary64) x)))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x)) #s(literal 3 binary64)) (pow.f64 (/.f64 x (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64)))) #s(literal 3 binary64))) (fma.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x)) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x)) (fma.f64 (/.f64 x (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64)))) (/.f64 x (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64)))) (*.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x)) (/.f64 x (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64))))))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 x (/.f64 #s(literal -1/2 binary64) x)))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x))) (/.f64 #s(literal -1/2 binary64) x))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 #s(literal -1/2 binary64) x))) (neg.f64 (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x)) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -3/2 binary64))))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -3/2 binary64))) #s(literal 1/2 binary64))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -3/2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 #s(literal -2 binary64) x)))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x))))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) x) (-.f64 #s(literal 1 binary64) x))) (neg.f64 (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (neg.f64 (/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))) (neg.f64 (neg.f64 (*.f64 x x))))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x))) #s(literal 1/2 binary64))) (neg.f64 (*.f64 x x)))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x))) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))) (/.f64 x (/.f64 #s(literal -1/2 binary64) x)))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal 1/2 binary64))) (neg.f64 (*.f64 x (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64))) (neg.f64 (pow.f64 x #s(literal 5/2 binary64))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x))))) (neg.f64 (*.f64 x x)))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)))) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x))))) (neg.f64 (*.f64 x (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x))))) (/.f64 x (/.f64 #s(literal -1/2 binary64) x)))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 #s(literal 1 binary64) x))) (neg.f64 (*.f64 (neg.f64 x) (pow.f64 x #s(literal 3/2 binary64)))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x))) (neg.f64 (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64)))))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal 1 binary64))) (/.f64 x (/.f64 #s(literal 1/2 binary64) x)))","(/.f64 (neg.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) (neg.f64 (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (*.f64 #s(literal -2 binary64) x))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) (neg.f64 (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64)))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 #s(literal 1 binary64) x))) (neg.f64 (pow.f64 x #s(literal 5/2 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -3/2 binary64)))) (neg.f64 (*.f64 #s(literal -2 binary64) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))) (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64)))) (*.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64)))) (*.f64 (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64))) x)) (*.f64 (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64)))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))) (sqrt.f64 x))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x))) (/.f64 #s(literal -1/2 binary64) x)) (neg.f64 x))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 #s(literal -1/2 binary64) x)) (pow.f64 x #s(literal 3/2 binary64)))","(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x)) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x)) (neg.f64 (sqrt.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x)) (sqrt.f64 x))","(/.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -3/2 binary64)))) (neg.f64 x))","(/.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -3/2 binary64))) #s(literal 1/2 binary64)) (neg.f64 x))","(/.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -3/2 binary64))) #s(literal 1 binary64)) (*.f64 #s(literal -2 binary64) x))","(/.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x)))) (neg.f64 x))","(/.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(/.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) x) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal 3/2 binary64)))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (*.f64 (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64))) (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64))) (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 x))","(/.f64 (neg.f64 (/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (neg.f64 (*.f64 x x)))","(/.f64 (neg.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x)) (neg.f64 (/.f64 (sqrt.f64 x) (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))) (neg.f64 (*.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x)) (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))) (neg.f64 (neg.f64 (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64))))))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x))) #s(literal 1/2 binary64)) (*.f64 x x))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x))) #s(literal -1/2 binary64)) (*.f64 (neg.f64 x) x))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64)) (/.f64 x (/.f64 #s(literal 1/2 binary64) x)))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal 1/2 binary64)) (*.f64 x (neg.f64 x)))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal 1 binary64)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (neg.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (pow.f64 x #s(literal 5/2 binary64)))","(/.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x)))) (*.f64 x x))","(/.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x))) (*.f64 (neg.f64 x) x))","(/.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x)))) (*.f64 x (neg.f64 x)))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x)))) (/.f64 x (/.f64 #s(literal 1/2 binary64) x)))","(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (*.f64 #s(literal -2 binary64) x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 #s(literal 1 binary64) x)) (*.f64 (neg.f64 x) (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal 5/2 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal 3/2 binary64))) x)","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64))) (+.f64 x #s(literal 1 binary64))))","(/.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (/.f64 (sqrt.f64 x) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64))) (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x)) (*.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x)) (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x)) (neg.f64 (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64)))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x))) (/.f64 x (/.f64 #s(literal 1/2 binary64) x)))","(/.f64 (/.f64 #s(literal 1/2 binary64) x) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 (/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 x x))","(/.f64 #s(literal 1/2 binary64) (neg.f64 (*.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) x)))","(/.f64 #s(literal 1/2 binary64) (neg.f64 (*.f64 x (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(/.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (neg.f64 x)))","(/.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 x) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -3/2 binary64))) (*.f64 #s(literal -2 binary64) x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x)))","(/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (/.f64 #s(literal -1/2 binary64) x) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(/.f64 #s(literal -1/2 binary64) (neg.f64 (*.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (neg.f64 x))))","(/.f64 #s(literal -1/2 binary64) (neg.f64 (*.f64 (neg.f64 x) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(/.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) x))","(/.f64 #s(literal -1/2 binary64) (*.f64 x (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 x x) (/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64))) (-.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) x) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal 3/2 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 #s(literal -2 binary64) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (-.f64 #s(literal 1 binary64) x)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) x) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal 3/2 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) x) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal 3/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) (/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) x) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal 3/2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 #s(literal -2 binary64) x)))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 (sqrt.f64 x) (-.f64 #s(literal 1 binary64) x)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) x) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal 3/2 binary64))))","(neg.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 x (/.f64 #s(literal 1/2 binary64) x))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64))) (+.f64 x #s(literal 1 binary64)))) (/.f64 (*.f64 x x) (*.f64 (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64))) (+.f64 x #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64))) (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64))) (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x)) (neg.f64 (sqrt.f64 x)))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x)) (neg.f64 (sqrt.f64 x)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64))))) (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64))))))","(-.f64 (/.f64 #s(literal 0 binary64) (/.f64 x (/.f64 #s(literal 1/2 binary64) x))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 x (/.f64 #s(literal 1/2 binary64) x))))","(-.f64 (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal -2 binary64) x)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -2 binary64) x)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64)))) (/.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64)))))","(-.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64)))) (/.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64)))))","(-.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))) (/.f64 (sqrt.f64 x) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))))","(-.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x)) (/.f64 x (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64)))))","(exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) x) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal 3/2 binary64)))) #s(literal -1 binary64)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (pow.f64 x #s(literal 5/2 binary64))))","(*.f64 #s(literal 1/2 binary64) (/.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64))","(*.f64 #s(literal -1/2 binary64) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1/2 binary64) x))","(pow.f64 (/.f64 (*.f64 #s(literal -2 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 #s(literal -2 binary64) x) #s(literal -1 binary64))","(pow.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64))","(/.f64 #s(literal 1/2 binary64) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 #s(literal 1/2 binary64) (neg.f64 x))","(/.f64 #s(literal -1/2 binary64) (neg.f64 (neg.f64 x)))","(/.f64 #s(literal -1/2 binary64) x)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) x) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 #s(literal -2 binary64) x)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 #s(literal -2 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal -2 binary64) x) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) x))","(neg.f64 (/.f64 #s(literal 1/2 binary64) x))","(exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -2 binary64) x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (neg.f64 (-.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 (pow.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x))) (/.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -3/2 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -3/2 binary64))))","(pow.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 (sqrt.f64 x) (-.f64 #s(literal 1 binary64) x)) x) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (sqrt.f64 x) #s(literal -9 binary64)) (pow.f64 x #s(literal -3/2 binary64))) (+.f64 (pow.f64 x #s(literal -3 binary64)) (+.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal -1 binary64))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x)) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))) (neg.f64 (neg.f64 (pow.f64 x #s(literal 3/2 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))) (neg.f64 (*.f64 (sqrt.f64 x) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) (neg.f64 (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) x) (pow.f64 x #s(literal 3/2 binary64))) (*.f64 x x))","(/.f64 (-.f64 (neg.f64 (pow.f64 x #s(literal 3/2 binary64))) (*.f64 (neg.f64 (pow.f64 x #s(literal 3/2 binary64))) x)) (*.f64 (neg.f64 (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (-.f64 (pow.f64 x #s(literal 3/2 binary64)) (pow.f64 x #s(literal 5/2 binary64))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -1 binary64))) (sqrt.f64 x))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (neg.f64 (pow.f64 x #s(literal -1 binary64))) (neg.f64 (/.f64 (sqrt.f64 x) (-.f64 #s(literal 1 binary64) x))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) (sqrt.f64 x))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))) (neg.f64 (neg.f64 (pow.f64 x #s(literal 3/2 binary64)))))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal 1 binary64)) x)","(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 x)))","(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)) (neg.f64 (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (*.f64 (sqrt.f64 x) (neg.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (pow.f64 x #s(literal 3/2 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x)) (neg.f64 (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x))) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x))) (neg.f64 x))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (sqrt.f64 x) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (neg.f64 (neg.f64 x)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) x)","(/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3/2 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (-.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (-.f64 #s(literal 1 binary64) x)) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 #s(literal -1 binary64) (*.f64 (/.f64 (sqrt.f64 x) (-.f64 #s(literal 1 binary64) x)) (neg.f64 x)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (-.f64 #s(literal 1 binary64) x)) (neg.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 (sqrt.f64 x) (-.f64 #s(literal 1 binary64) x)) x))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(neg.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (neg.f64 x)))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 x #s(literal 1 binary64)))) (/.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 x #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (pow.f64 x #s(literal 3/2 binary64)))) (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (pow.f64 x #s(literal 3/2 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (neg.f64 x)))","(-.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 (neg.f64 x))) (/.f64 (sqrt.f64 x) (neg.f64 (neg.f64 x))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (/.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))) (pow.f64 x #s(literal 3/2 binary64))))","(-.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (/.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 3/2 binary64))))","(-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x)) (neg.f64 (-.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 (pow.f64 (/.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x)) (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal -2 binary64) x) (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 x #s(literal -3/2 binary64)))","(*.f64 (pow.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 (/.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (neg.f64 x)) (/.f64 #s(literal 1/2 binary64) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 #s(literal -2 binary64) x)) (pow.f64 x #s(literal -3/2 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -2 binary64) x)))","(*.f64 (/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x))) (pow.f64 (/.f64 x (/.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (/.f64 (*.f64 #s(literal -2 binary64) x) (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -3/2 binary64))) (/.f64 #s(literal -1/2 binary64) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x))","(*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))))","(*.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x)))","(*.f64 (/.f64 #s(literal -1/2 binary64) x) (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -3/2 binary64))))","(*.f64 #s(literal -1/2 binary64) (-.f64 (/.f64 (pow.f64 x #s(literal -3/2 binary64)) x) (pow.f64 x #s(literal -3/2 binary64))))","(*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (*.f64 x x)))","(*.f64 #s(literal -1/2 binary64) (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -3/2 binary64)))))","(*.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (pow.f64 x #s(literal 5/2 binary64))))","(pow.f64 (/.f64 (*.f64 x x) (/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64))) (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) x) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal 3/2 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 #s(literal -2 binary64) x)) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 (sqrt.f64 x) (-.f64 #s(literal 1 binary64) x)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) x) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal 3/2 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))) #s(literal 3 binary64)) (pow.f64 (/.f64 (sqrt.f64 x) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))) (fma.f64 (/.f64 (sqrt.f64 x) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))) (/.f64 (sqrt.f64 x) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))) (*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))) (/.f64 (sqrt.f64 x) (/.f64 x (/.f64 #s(literal -1/2 binary64) x)))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x)) #s(literal 3 binary64)) (pow.f64 (/.f64 x (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64)))) #s(literal 3 binary64))) (fma.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x)) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x)) (fma.f64 (/.f64 x (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64)))) (/.f64 x (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64)))) (*.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x)) (/.f64 x (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64))))))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 x (/.f64 #s(literal -1/2 binary64) x)))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x))) (/.f64 #s(literal -1/2 binary64) x))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 #s(literal -1/2 binary64) x))) (neg.f64 (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x)) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -3/2 binary64))))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -3/2 binary64))) #s(literal 1/2 binary64))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -3/2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 #s(literal -2 binary64) x)))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x))))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) x) (-.f64 #s(literal 1 binary64) x))) (neg.f64 (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (neg.f64 (/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))) (neg.f64 (neg.f64 (*.f64 x x))))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x))) #s(literal 1/2 binary64))) (neg.f64 (*.f64 x x)))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x))) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))) (/.f64 x (/.f64 #s(literal -1/2 binary64) x)))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal 1/2 binary64))) (neg.f64 (*.f64 x (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64))) (neg.f64 (pow.f64 x #s(literal 5/2 binary64))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x))))) (neg.f64 (*.f64 x x)))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)))) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x))))) (neg.f64 (*.f64 x (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x))))) (/.f64 x (/.f64 #s(literal -1/2 binary64) x)))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 #s(literal 1 binary64) x))) (neg.f64 (*.f64 (neg.f64 x) (pow.f64 x #s(literal 3/2 binary64)))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x))) (neg.f64 (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64)))))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal 1 binary64))) (/.f64 x (/.f64 #s(literal 1/2 binary64) x)))","(/.f64 (neg.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) (neg.f64 (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (*.f64 #s(literal -2 binary64) x))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) (neg.f64 (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64)))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 #s(literal 1 binary64) x))) (neg.f64 (pow.f64 x #s(literal 5/2 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -3/2 binary64)))) (neg.f64 (*.f64 #s(literal -2 binary64) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))) (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64)))) (*.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64)))) (*.f64 (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64))) x)) (*.f64 (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64)))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))) (sqrt.f64 x))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x))) (/.f64 #s(literal -1/2 binary64) x)) (neg.f64 x))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 #s(literal -1/2 binary64) x)) (pow.f64 x #s(literal 3/2 binary64)))","(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x)) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x)) (neg.f64 (sqrt.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x)) (sqrt.f64 x))","(/.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -3/2 binary64)))) (neg.f64 x))","(/.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -3/2 binary64))) #s(literal 1/2 binary64)) (neg.f64 x))","(/.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -3/2 binary64))) #s(literal 1 binary64)) (*.f64 #s(literal -2 binary64) x))","(/.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x)))) (neg.f64 x))","(/.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(/.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) x) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal 3/2 binary64)))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (*.f64 (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64))) (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64))) (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 x))","(/.f64 (neg.f64 (/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (neg.f64 (*.f64 x x)))","(/.f64 (neg.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x)) (neg.f64 (/.f64 (sqrt.f64 x) (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))) (neg.f64 (*.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x)) (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))) (neg.f64 (neg.f64 (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64))))))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x))) #s(literal 1/2 binary64)) (*.f64 x x))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x))) #s(literal -1/2 binary64)) (*.f64 (neg.f64 x) x))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64)) (/.f64 x (/.f64 #s(literal 1/2 binary64) x)))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal 1/2 binary64)) (*.f64 x (neg.f64 x)))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal 1 binary64)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (neg.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (pow.f64 x #s(literal 5/2 binary64)))","(/.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x)))) (*.f64 x x))","(/.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x))) (*.f64 (neg.f64 x) x))","(/.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x)))) (*.f64 x (neg.f64 x)))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x)))) (/.f64 x (/.f64 #s(literal 1/2 binary64) x)))","(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (*.f64 #s(literal -2 binary64) x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 #s(literal 1 binary64) x)) (*.f64 (neg.f64 x) (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal 5/2 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal 3/2 binary64))) x)","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64))) (+.f64 x #s(literal 1 binary64))))","(/.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (/.f64 (sqrt.f64 x) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64))) (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x)) (*.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x)) (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x)) (neg.f64 (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64)))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x))) (/.f64 x (/.f64 #s(literal 1/2 binary64) x)))","(/.f64 (/.f64 #s(literal 1/2 binary64) x) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 (/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 x x))","(/.f64 #s(literal 1/2 binary64) (neg.f64 (*.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) x)))","(/.f64 #s(literal 1/2 binary64) (neg.f64 (*.f64 x (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(/.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (neg.f64 x)))","(/.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 x) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -3/2 binary64))) (*.f64 #s(literal -2 binary64) x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x)))","(/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (/.f64 #s(literal -1/2 binary64) x) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(/.f64 #s(literal -1/2 binary64) (neg.f64 (*.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (neg.f64 x))))","(/.f64 #s(literal -1/2 binary64) (neg.f64 (*.f64 (neg.f64 x) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(/.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) x))","(/.f64 #s(literal -1/2 binary64) (*.f64 x (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 x x) (/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64))) (-.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) x) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal 3/2 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 #s(literal -2 binary64) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (-.f64 #s(literal 1 binary64) x)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) x) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal 3/2 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) x) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal 3/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) (/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) x) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal 3/2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 #s(literal -2 binary64) x)))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 (sqrt.f64 x) (-.f64 #s(literal 1 binary64) x)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) x) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal 3/2 binary64))))","(neg.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 x (/.f64 #s(literal 1/2 binary64) x))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64))) (+.f64 x #s(literal 1 binary64)))) (/.f64 (*.f64 x x) (*.f64 (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64))) (+.f64 x #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64))) (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64))) (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x)) (neg.f64 (sqrt.f64 x)))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x)) (neg.f64 (sqrt.f64 x)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64))))) (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64))))))","(-.f64 (/.f64 #s(literal 0 binary64) (/.f64 x (/.f64 #s(literal 1/2 binary64) x))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 x (/.f64 #s(literal 1/2 binary64) x))))","(-.f64 (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal -2 binary64) x)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -2 binary64) x)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64)))) (/.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64)))))","(-.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64)))) (/.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64)))))","(-.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))) (/.f64 (sqrt.f64 x) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))))","(-.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x)) (/.f64 x (*.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 3/2 binary64)))))","(exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) x) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal 3/2 binary64)))) #s(literal -1 binary64)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (pow.f64 x #s(literal 5/2 binary64))))","(*.f64 (pow.f64 (/.f64 (sqrt.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (sqrt.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (-.f64 #s(literal 1 binary64) x))","(*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)))","(pow.f64 (/.f64 (/.f64 (sqrt.f64 x) (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (sqrt.f64 x) (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (pow.f64 x #s(literal 3/2 binary64)))) (+.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 x (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 x))))))","(/.f64 (neg.f64 (/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 x #s(literal -1/2 binary64)))) (neg.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 x #s(literal -1/2 binary64)))) (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) x)) (neg.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 x (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x))))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64))) (neg.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) (sqrt.f64 x))))","(/.f64 (neg.f64 (-.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (pow.f64 x #s(literal 3/2 binary64))))) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x))))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 x) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 x))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x)))) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 (neg.f64 x)) (neg.f64 x))) (*.f64 (sqrt.f64 (neg.f64 x)) (neg.f64 (sqrt.f64 x))))","(/.f64 (-.f64 (sqrt.f64 (neg.f64 x)) (*.f64 (sqrt.f64 (neg.f64 x)) x)) (*.f64 (sqrt.f64 (neg.f64 x)) (sqrt.f64 x)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 x #s(literal -1/2 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (pow.f64 x #s(literal -1/2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x))) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 x))) x)","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (pow.f64 x #s(literal -1/2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 x))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (neg.f64 x))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (neg.f64 (sqrt.f64 x))))","(/.f64 (-.f64 (sqrt.f64 x) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) x)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (sqrt.f64 x)))","(/.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (pow.f64 x #s(literal -1/2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (neg.f64 x))) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))))","(/.f64 (-.f64 #s(literal -1 binary64) (neg.f64 x)) (neg.f64 (sqrt.f64 x)))","(/.f64 (/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (sqrt.f64 x))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 x #s(literal -1/2 binary64))) (+.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 x #s(literal -1/2 binary64))) (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) x) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x)))","(/.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (+.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 x (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (*.f64 (sqrt.f64 x) (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (*.f64 (sqrt.f64 x) (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (neg.f64 (sqrt.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (sqrt.f64 x))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 (sqrt.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) (neg.f64 (sqrt.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) (sqrt.f64 x)))","(/.f64 (-.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (pow.f64 x #s(literal 3/2 binary64)))) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(/.f64 (-.f64 (sqrt.f64 x) (pow.f64 x #s(literal 3/2 binary64))) x)","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 (sqrt.f64 x) (+.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 (sqrt.f64 x) (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (pow.f64 x #s(literal -1/2 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (sqrt.f64 x) (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (sqrt.f64 x) (-.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (sqrt.f64 x) (-.f64 #s(literal 1 binary64) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (sqrt.f64 x) (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 x) (-.f64 #s(literal 1 binary64) x)))","(neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x))))","(fma.f64 (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (pow.f64 x #s(literal -1/4 binary64)) (pow.f64 x #s(literal -1/4 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal -1 binary64) x)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64) (neg.f64 (sqrt.f64 x)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (neg.f64 (sqrt.f64 x)))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 x)))","(-.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x))) (/.f64 x (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x))))","(-.f64 (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 x (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x))))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 x (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x))))))","(-.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x))) (/.f64 (neg.f64 (pow.f64 x #s(literal 3/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 x) (+.f64 x #s(literal 1 binary64)))) (/.f64 (*.f64 x x) (*.f64 (sqrt.f64 x) (+.f64 x #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 x) (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (sqrt.f64 x) (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (sqrt.f64 x)) (/.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))) (sqrt.f64 x)))","(-.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (sqrt.f64 x)) (/.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (sqrt.f64 x))) (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x))))","(-.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) x))","(-.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x))","(exp.f64 (*.f64 (log.f64 (/.f64 (sqrt.f64 x) (-.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)))","(+.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (pow.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))) (*.f64 (pow.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)))))))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (fma.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))) (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))) (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) #s(literal 1 binary64)))))","(/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (neg.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 (*.f64 (neg.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (neg.f64 (neg.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))) (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 x #s(literal 1 binary64))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (+.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 x x))) (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 x x))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 x x))) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (+.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (-.f64 #s(literal 1 binary64) (neg.f64 x))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) (*.f64 #s(literal 1 binary64) (neg.f64 x))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (neg.f64 x)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 x #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) (*.f64 #s(literal 1 binary64) (neg.f64 x)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (neg.f64 x))) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (neg.f64 x))))","(-.f64 (pow.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))))","(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))))","(-.f64 #s(literal 1 binary64) x)","(+.f64 (neg.f64 x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (neg.f64 x))","(*.f64 (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)) (sqrt.f64 x))","(*.f64 (neg.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (sqrt.f64 x))","(*.f64 (neg.f64 (sqrt.f64 x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x)))","(*.f64 #s(literal -1 binary64) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x)))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x)) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x)) (*.f64 #s(literal 0 binary64) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))) #s(literal 3 binary64)) (pow.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))) #s(literal 3 binary64))) (fma.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))) (-.f64 (*.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x)))) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x)))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))) #s(literal 3 binary64)) (pow.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))) #s(literal 3 binary64))) (fma.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))) (-.f64 (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))) (*.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal 3 binary64))) (fma.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)) (-.f64 (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal 3 binary64)) (pow.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)) #s(literal 3 binary64))) (fma.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x))))))","(/.f64 (neg.f64 (*.f64 (-.f64 x (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))) (neg.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) (neg.f64 (sqrt.f64 x)))) (neg.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (-.f64 x (+.f64 x #s(literal 1 binary64))))) (neg.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))))) (neg.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (*.f64 (-.f64 x (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) (neg.f64 (sqrt.f64 x))) (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (-.f64 x (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)))) (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))","(neg.f64 (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x)))","(fma.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(fma.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))))","(fma.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))))","(-.f64 #s(literal 0 binary64) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x)))","(+.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))))","(+.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))))","(+.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(+.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(pow.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))))))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -3/2 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -1/2 binary64)))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -1 binary64))) (+.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -1/2 binary64))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -3/2 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -1/2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 #s(literal -1 binary64) (sqrt.f64 x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 x)))","(neg.f64 (pow.f64 x #s(literal -1/2 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -1/2 binary64)))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -1/2 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -1/2 binary64)))))) (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -1/2 binary64)))))))","(-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(+.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (*.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(*.f64 (*.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (neg.f64 (sqrt.f64 x))) (pow.f64 (pow.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (neg.f64 (sqrt.f64 x))) #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))))","(*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (pow.f64 (/.f64 (neg.f64 (sqrt.f64 x)) #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))) #s(literal -1 binary64)))","(*.f64 (neg.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))) (pow.f64 (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x)) #s(literal -1 binary64)))","(*.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (neg.f64 (sqrt.f64 x))))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (neg.f64 (sqrt.f64 x))) #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))))","(pow.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (*.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (/.f64 (neg.f64 (sqrt.f64 x)) #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (/.f64 (neg.f64 (sqrt.f64 x)) #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (*.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (neg.f64 (sqrt.f64 x)))) (neg.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x)))","(/.f64 (neg.f64 (neg.f64 (*.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x)))","(/.f64 (/.f64 (*.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64)) (sqrt.f64 x))","(/.f64 (/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (neg.f64 (sqrt.f64 x))) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 (neg.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))))) (*.f64 (neg.f64 (sqrt.f64 x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (*.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x)))","(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (*.f64 (neg.f64 (sqrt.f64 x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (*.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (/.f64 (neg.f64 (sqrt.f64 x)) #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (/.f64 (neg.f64 (sqrt.f64 x)) #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (/.f64 (neg.f64 (sqrt.f64 x)) #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))))))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (sqrt.f64 x)) (*.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (/.f64 (neg.f64 (sqrt.f64 x)) #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (/.f64 (neg.f64 (sqrt.f64 x)) #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))))))","(neg.f64 (/.f64 (*.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (sqrt.f64 x)))","(neg.f64 (/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x))) (/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x))))","(exp.f64 (*.f64 (log.f64 (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (/.f64 (neg.f64 (sqrt.f64 x)) #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))))) #s(literal -1 binary64)))","#s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64))","(*.f64 (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(pow.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal 0 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)))","(*.f64 (-.f64 x (+.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) (pow.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 x (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(pow.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64))","(pow.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal 1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 x (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal 3 binary64)) (pow.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal 3 binary64))) (fma.f64 (/.f64 x (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (/.f64 x (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (fma.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (/.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (/.f64 x (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (/.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 x (+.f64 x #s(literal 1 binary64))))) (neg.f64 (neg.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))))","(/.f64 (-.f64 (*.f64 x (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64)))) (*.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (*.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))))) (*.f64 #s(literal -1 binary64) (sqrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (*.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))) (*.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64) (*.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) #s(literal 1 binary64))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 x)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))))) (*.f64 #s(literal 1 binary64) (sqrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (*.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))) (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (fma.f64 (sqrt.f64 x) #s(literal -1 binary64) (*.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) #s(literal -1 binary64))","(/.f64 (fma.f64 (sqrt.f64 x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(/.f64 (fma.f64 #s(literal 1 binary64) (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))))) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (+.f64 #s(literal -1 binary64) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(/.f64 (+.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (pow.f64 x #s(literal -1/2 binary64)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64) (*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))) (*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64) (*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64) (*.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (neg.f64 (sqrt.f64 x)))) (*.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)))","(/.f64 (fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64) (*.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (sqrt.f64 x))) (*.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal 1 binary64)))","(/.f64 (fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (pow.f64 x #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64) (*.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)))) #s(literal 1 binary64))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal 1 binary64) (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(/.f64 (fma.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64) (*.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 x)))) #s(literal -1 binary64))","(/.f64 (fma.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(/.f64 (+.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 x)))) (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(/.f64 (+.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (sqrt.f64 x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(/.f64 (neg.f64 (-.f64 x (+.f64 x #s(literal 1 binary64)))) (neg.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)))) (neg.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 x (hypot.f64 (sqrt.f64 x) x)))))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)))) (neg.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (neg.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))","(/.f64 (-.f64 x (+.f64 x #s(literal 1 binary64))) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) (+.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 x (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 x (+.f64 x #s(literal 1 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 x (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)))))","(/.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) (sqrt.f64 x))","(fma.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 1/4 binary64)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 x))","(fma.f64 (sqrt.f64 x) #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(fma.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64) (sqrt.f64 x))","(fma.f64 x (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(fma.f64 #s(literal 1 binary64) (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(fma.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","(-.f64 (/.f64 (/.f64 x (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64)) (/.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64)))","(-.f64 (/.f64 x (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (/.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal -1 binary64)))","(*.f64 (/.f64 x #s(literal 1/2 binary64)) (neg.f64 x))","(*.f64 #s(literal -2 binary64) (pow.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal -2 binary64) x) x)","(*.f64 (neg.f64 x) (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal -1 binary64)))","(*.f64 x (*.f64 #s(literal -2 binary64) x))","(*.f64 #s(literal 1 binary64) (/.f64 x (/.f64 #s(literal -1/2 binary64) x)))","(pow.f64 (/.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) #s(literal -1 binary64))","(pow.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x)) #s(literal 1 binary64))","(/.f64 (neg.f64 (neg.f64 (neg.f64 x))) (/.f64 #s(literal 1/2 binary64) x))","(/.f64 (neg.f64 (*.f64 x x)) #s(literal 1/2 binary64))","(/.f64 (neg.f64 (*.f64 #s(literal -2 binary64) x)) (neg.f64 (pow.f64 x #s(literal -1 binary64))))","(/.f64 (neg.f64 (neg.f64 x)) (/.f64 #s(literal -1/2 binary64) x))","(/.f64 (*.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal -1 binary64)))","(/.f64 (neg.f64 x) (/.f64 #s(literal 1/2 binary64) x))","(/.f64 (*.f64 x x) #s(literal -1/2 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x)))","(/.f64 x (/.f64 #s(literal -1/2 binary64) x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x))","(neg.f64 (/.f64 x (/.f64 #s(literal 1/2 binary64) x)))","(-.f64 (/.f64 #s(literal 0 binary64) (/.f64 #s(literal 1/2 binary64) x)) (/.f64 x (/.f64 #s(literal 1/2 binary64) x)))","(exp.f64 (*.f64 (log.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x)) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/4 binary64)) (pow.f64 x #s(literal -1/4 binary64)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal -1 binary64) x)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(pow.f64 (pow.f64 x #s(literal -1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64))","(pow.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (*.f64 x x) #s(literal -1/4 binary64))","(pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64))","(pow.f64 (sqrt.f64 x) #s(literal -1 binary64))","(pow.f64 x #s(literal -1/2 binary64))","(/.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (neg.f64 (sqrt.f64 (neg.f64 x))))","(/.f64 (sqrt.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (sqrt.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (sqrt.f64 (sqrt.f64 x)))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x)))))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x))))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (neg.f64 x)))","(/.f64 (neg.f64 x) (neg.f64 (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 x))","(/.f64 (sqrt.f64 x) x)","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)))","(/.f64 x (pow.f64 x #s(literal 3/2 binary64)))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 (neg.f64 x))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","(neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(sqrt.f64 (/.f64 x (*.f64 x x)))","(sqrt.f64 (pow.f64 x #s(literal -1 binary64)))","(fabs.f64 (pow.f64 x #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 #s(literal -1/2 binary64) (log.f64 x)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":324.09912109375,"type":"rewrite"},{"compiler":[[38973,3922]],"memory":[[12186720,111414576]],"time":320.73681640625,"type":"eval"},{"alts":[["(/.f64 (/.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x))","fresh",38.28763094302679,"binary64"],["(/.f64 (-.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64)))))) x)","fresh",38.95071814898687,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) (sqrt.f64 x))","fresh",38.90995773050666,"binary64"],["(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (fma.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x)))))","fresh",38.27981844302679,"binary64"],["(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) (-.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x) #s(literal -1/2 binary64))))","next",10.210262307325973,"binary64"],["(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) (-.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))","fresh",0.9053592596773627,"binary64"],["(/.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) (sqrt.f64 x))","next",0.6512078935683543,"binary64"],["(/.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 #s(literal 1/2 binary64) x)) (sqrt.f64 x))","fresh",0.9401967629804395,"binary64"],["(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","next",0.641810079145315,"binary64"],["(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))","next",0.9239022742433152,"binary64"],["(/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","fresh",1.3091667997755756,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","done",38.9638767072099,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (*.f64 (*.f64 #s(literal -2 binary64) x) x)))","fresh",10.503982869769194,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (sqrt.f64 x) x))","next",60.454488994623254,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(approx (/ (- 1 x) (sqrt x)) (neg.f64 (sqrt.f64 x))) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))))","fresh",10.55067868102082,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 x)))","done",60.454488994623254,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) x)))","fresh",1.3563931760783292,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 #s(approx (/ (- 1 x) (sqrt x)) (neg.f64 (sqrt.f64 x))) x)))","fresh",0.9862035608255033,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 x (*.f64 x x))))","fresh",39.22287024206551,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","done",60.454488994623254,"binary64"]],"compiler":[[21,10],[14,9],[11,8],[27,13],[33,23],[28,20],[23,15],[19,12],[29,20],[34,21],[18,11],[11,8],[24,17],[16,11],[28,18],[16,12],[24,17],[28,18],[18,12],[16,12],[21,10],[14,9],[11,8],[27,13],[33,23],[28,20],[23,15],[19,12],[29,20],[34,21],[18,11],[24,17],[16,11],[28,18],[24,17],[28,18],[18,12]],"count":[[1290,20]],"kept":[{"done":[3,2],"fresh":[17,7],"new":[1265,10],"picked":[5,1]}],"memory":[[-9624640,55654384]],"min-error":[[0.0,"binary64"]],"time":48.609130859375,"type":"prune"},{"egraph":[[0,8459,290,0.052522025],[7,5609,299,0.029717899],[6,3546,299,0.028059716],[5,1010,299,0.021501973],[4,578,299,0.006837238],[3,360,299,0.004749873],[2,227,312,0.002965277],[1,152,312,0.001547843],[0,90,322,0.001209181],[0,57,360,0.000614665]],"inputs":[["(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","#s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)","(-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x))","#s(literal 1 binary64)","(/.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","x","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(sqrt.f64 x)","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (sqrt.f64 x) x))","(/.f64 (sqrt.f64 x) x)","(sqrt.f64 x)","x","(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))","#s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x))","(*.f64 #s(literal -2 binary64) x)","#s(literal -2 binary64)","(/.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) (sqrt.f64 x))","#s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))","(/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)","(-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x))","#s(literal 1/2 binary64)","(/.f64 #s(literal 3/8 binary64) x)","#s(literal 3/8 binary64)","x","(sqrt.f64 x)","(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) (-.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x) #s(literal -1/2 binary64))))","(*.f64 (+.f64 #s(literal 1 binary64) (-.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(+.f64 #s(literal 1 binary64) (-.f64 x x))","#s(literal 1 binary64)","(-.f64 x x)","x","(/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","#s(literal -1 binary64)","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","#s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x) #s(literal -1/2 binary64)))","(fma.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x) #s(literal -1/2 binary64))","(/.f64 #s(literal -2 binary64) x)","#s(literal -2 binary64)","(*.f64 x x)","#s(literal -1/2 binary64)"]],"locations":[["(-.f64 x x)","cost-diff",2],["(+.f64 #s(literal 1 binary64) (-.f64 x x))","cost-diff",2],["(*.f64 (+.f64 #s(literal 1 binary64) (-.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","cost-diff",2],["(fma.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x) #s(literal -1/2 binary64))","cost-diff",4],["(-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x))","cost-diff",0],["(/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)","cost-diff",0],["#s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))","cost-diff",0],["(/.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) (sqrt.f64 x))","cost-diff",0],["(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","cost-diff",0],["(neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","cost-diff",0],["#s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","cost-diff",0],["(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))","cost-diff",0],["(sqrt.f64 x)","cost-diff",0],["(/.f64 (sqrt.f64 x) x)","cost-diff",0],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (sqrt.f64 x) x))","cost-diff",0],["(-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x))","cost-diff",0],["(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)","cost-diff",0],["#s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x))","cost-diff",0],["(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","cost-diff",0]],"memory":[[5296928,26857296]],"method":["egg-herbie"],"outputs":[["(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) (+.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x)))","#s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)","(-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x))","#s(literal 1 binary64)","(/.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","x","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(+.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x))","(sqrt.f64 x)","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(sqrt.f64 (-.f64 x #s(literal -1 binary64)))","(+.f64 x #s(literal 1 binary64))","(-.f64 x #s(literal -1 binary64))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (sqrt.f64 x) x))","(/.f64 (sqrt.f64 x) x)","(sqrt.f64 x)","x","(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))","#s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x))","(*.f64 #s(literal -2 binary64) x)","#s(literal -2 binary64)","(/.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) (sqrt.f64 x))","#s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))","(/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)","(-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x))","#s(literal 1/2 binary64)","(/.f64 #s(literal 3/8 binary64) x)","#s(literal 3/8 binary64)","x","(sqrt.f64 x)","(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) (-.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x) #s(literal -1/2 binary64))))","(/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (-.f64 x #s(literal -1 binary64)))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))))","(*.f64 (+.f64 #s(literal 1 binary64) (-.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (sqrt.f64 (-.f64 x #s(literal -1 binary64))))","(+.f64 #s(literal 1 binary64) (-.f64 x x))","#s(literal 1 binary64)","#s(literal 1 binary64)","(-.f64 x x)","#s(literal 0 binary64)","x","(/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (sqrt.f64 (-.f64 x #s(literal -1 binary64))))","#s(literal -1 binary64)","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(sqrt.f64 (-.f64 x #s(literal -1 binary64)))","(+.f64 x #s(literal 1 binary64))","(-.f64 x #s(literal -1 binary64))","#s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x) #s(literal -1/2 binary64)))","#s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64)))","(fma.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x) #s(literal -1/2 binary64))","(fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))","(/.f64 #s(literal -2 binary64) x)","#s(literal -2 binary64)","(*.f64 x x)","#s(literal -1/2 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":221.27490234375,"type":"simplify"},{"compiler":[[288,48]],"locations":[["(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) (-.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x) #s(literal -1/2 binary64))))","accuracy",0.16796875],["(/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","accuracy",0.28125],["#s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x) #s(literal -1/2 binary64)))","accuracy",0.38355429083141496],["(fma.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x) #s(literal -1/2 binary64))","accuracy",30.156220942812944],["(sqrt.f64 x)","accuracy",0.0],["(/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)","accuracy",0.01171875],["(/.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) (sqrt.f64 x))","accuracy",0.21941376953688402],["#s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))","accuracy",0.4354961653278986],["(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","accuracy",0.16015625],["(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))","accuracy",0.16796875],["#s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x))","accuracy",0.6857851510134952],["#s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","accuracy",0.7120264499942669],["(sqrt.f64 x)","accuracy",0.0],["(/.f64 (sqrt.f64 x) x)","accuracy",0.2578125],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (sqrt.f64 x) x))","accuracy",60.454488994623254],["(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)","accuracy",0.00390625],["(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","accuracy",0.015625],["(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","accuracy",0.22332001953688402],["#s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x))","accuracy",0.42403004272010936]],"memory":[[2370560,69358720]],"mixsample":[[0.803955078125,"ival-add",1200],[38.485595703125,"ival-div",0],[22.4326171875,"adjust",800],[3.084716796875,"ival-div",400],[2.793701171875,"ival-sqrt",800],[0.14013671875,"ival-assert",0],[0.30712890625,"ival-div",1600],[11.025390625,"ival-sub",0],[0.00390625,"ival-sub",400],[5.34765625,"ival-sqrt",0],[29.781005859375,"ival-pow",0],[2.119384765625,"adjust",2000],[10.18505859375,"ival-add",0],[0.082275390625,"ival-add",1600],[19.388671875,"ival-mult",0],[0.392578125,"ival-sqrt",1600],[0.178955078125,"ival-add",400],[0.25439453125,"ival-true",0],[0.7236328125,"ival-add",800],[0.809814453125,"exact",0],[1.153076171875,"ival-sqrt",400],[4.509765625,"ival-neg",0]],"outcomes":[[199.796875,1,"valid",228],[25.28857421875,2,"valid",24],[1.26806640625,0,"valid",4]],"time":271.276123046875,"type":"localize"},{"count":[[24,108]],"inputs":[["(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","#s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)","(-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (sqrt.f64 x) x))","(/.f64 (sqrt.f64 x) x)","(sqrt.f64 x)","(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))","#s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) (sqrt.f64 x))","#s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))","(/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)","(-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x))","(fma.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x) #s(literal -1/2 binary64))","(*.f64 (+.f64 #s(literal 1 binary64) (-.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(+.f64 #s(literal 1 binary64) (-.f64 x x))","(-.f64 x x)","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","#s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x))","#s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x) #s(literal -1/2 binary64)))","(/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) (-.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x) #s(literal -1/2 binary64))))"]],"memory":[[-9348544,4874432]],"outputs":[["(* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))","(/ (+ (* -1/2 (* (sqrt (pow x 3)) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/ (+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3))))))))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/ (+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))) (+ (* x (+ (* -1 (* (sqrt x) (+ (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 2))) (+ (* 1/2 (/ (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))) (+ 1 (sqrt x)))) (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 3))))))) (+ (* 1/4 (* (sqrt (/ 1 x)) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* 1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x)))))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))))))))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(sqrt (/ 1 x))","(/ (+ (sqrt x) (* -1/2 (sqrt (pow x 3)))) x)","(/ (+ (sqrt x) (* (pow x 2) (+ (* -1/2 (sqrt (/ 1 x))) (* 1/2 (sqrt x))))) x)","(/ (+ (sqrt x) (* (pow x 2) (+ (* -1/2 (sqrt (/ 1 x))) (* x (+ (* -1/2 (* (sqrt x) (+ 1 (* 1/4 (/ 1 x))))) (* 1/2 (sqrt (/ 1 x)))))))) x)","(/ -1/2 (pow x 2))","(/ (- x 1/2) (pow x 2))","(/ -1/2 x)","(/ (- x 1/2) x)","(/ (+ (sqrt x) (* -1 x)) x)","(/ (+ (sqrt x) (* x (- (* 1/2 x) 1))) x)","(/ (+ (sqrt x) (* x (- (* x (+ 1/2 (* -3/8 x))) 1))) x)","(sqrt x)","-1","(- (* 1/2 x) 1)","(- (* x (+ 1/2 (* -3/8 x))) 1)","(- (* x (+ 1/2 (* x (- (* 5/16 x) 3/8)))) 1)","(* -1 (sqrt (/ 1 x)))","(* (sqrt (/ 1 x)) (- 1 (sqrt x)))","(/ (+ (* 1/2 (sqrt (pow x 3))) (* (sqrt x) (- 1 (sqrt x)))) x)","(/ (+ (* x (+ (* 1/2 (sqrt x)) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (- 1 (sqrt x)))) (* -1/8 (sqrt x)))))) (* (sqrt x) (- 1 (sqrt x)))) x)","(/ (+ (* x (+ (* 1/2 (sqrt x)) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (- 1 (sqrt x)))) (+ (* -1/8 (sqrt x)) (* x (+ (* -1/4 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt x)) (* 1/2 (* (sqrt (/ 1 x)) (- 1 (sqrt x)))))))))))) (* (sqrt x) (- 1 (sqrt x)))) x)","(- 1 (sqrt x))","(- (+ 1 (* x (+ 1/2 (* -1/2 (- 1 (sqrt x)))))) (sqrt x))","(- (+ 1 (* x (+ 1/2 (+ (* -1/2 (- 1 (sqrt x))) (* x (- (* 3/8 (- 1 (sqrt x))) 3/8)))))) (sqrt x))","(- (+ 1 (* x (+ 1/2 (+ (* -1/2 (- 1 (sqrt x))) (* x (- (+ (* 3/8 (- 1 (sqrt x))) (* x (+ 5/16 (* -5/16 (- 1 (sqrt x)))))) 3/8)))))) (sqrt x))","(/ -3/8 (pow x 2))","(/ (- (* 1/2 x) 3/8) (pow x 2))","(/ -3/8 x)","(/ (- (* 1/2 x) 3/8) x)","-1/2","(- (* -2 x) 1/2)","1","0","(+ 1 (sqrt x))","(+ 1 (+ (sqrt x) (* 1/2 x)))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* -1/8 x)))))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))))","(* -1 (* (sqrt x) (+ 1 (sqrt x))))","(+ (* -1 (* (sqrt x) (+ 1 (sqrt x)))) (* -1/2 (sqrt (pow x 3))))","(+ (* -1 (* (sqrt x) (+ 1 (sqrt x)))) (* x (+ (* -1/2 (sqrt x)) (* 1/8 (sqrt (pow x 3))))))","(+ (* -1 (* (sqrt x) (+ 1 (sqrt x)))) (* x (+ (* -1/2 (sqrt x)) (* x (+ (* -1/16 (sqrt (pow x 3))) (* 1/8 (sqrt x)))))))","(* 1/2 (sqrt (/ 1 (pow x 3))))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 3/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) (pow x 2))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (+ (* -5/32 (sqrt (/ 1 (pow x 5)))) (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (+ (* 3/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))))) (pow x 2))","(/ 1 x)","(/ (- 1 (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 3/8 (pow x 2))) (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 3/8 (pow x 2))) (+ (* 1/2 (/ 1 x)) (* 5/16 (/ 1 (pow x 3))))) x)","(- 1 (* 1/2 (/ 1 x)))","(/ (- (* -1/2 (sqrt (/ 1 x))) (* -1/2 (sqrt x))) (pow x 2))","(/ (- (* 1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (/ 1 x))))) (pow x 2))","(/ (- (* -1/2 (* (sqrt (/ 1 (pow x 5))) (+ 1 (* 1/2 x)))) (+ (* -1/2 (sqrt x)) (+ (* -1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 x)))))) (pow x 2))","(+ (* -1 (sqrt (/ 1 x))) (* 1/2 (sqrt (/ 1 (pow x 3)))))","(+ (* -1 (sqrt (/ 1 x))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(+ (* -1 (sqrt (/ 1 x))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (* (sqrt (/ 1 (pow x 7))) (+ 1 (* 1/4 x)))))))","(/ 1/2 x)","(/ (+ 1/2 (* -1 (/ (+ (* 1/8 x) (* 1/4 x)) (pow x 2)))) x)","(/ (- (+ 1/2 (* 1/4 (/ 1 (pow x 2)))) (+ (/ 1/8 x) (/ 1/4 x))) x)","(/ (- (+ 1/2 (+ (* -1/4 (/ (+ 1 (* 1/4 x)) (pow x 3))) (* 3/8 (/ 1 (pow x 2))))) (+ (/ 1/8 x) (/ 1/4 x))) x)","(/ (- 1/2 (* 3/8 (/ 1 x))) x)","1/2","(- 1/2 (* 3/8 (/ 1 x)))","(* -2 x)","(* -1 (* x (+ 2 (* 1/2 (/ 1 x)))))","(* 2 (sqrt x))","(* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x))))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))))","(* -1 (* (pow x 2) (+ (* 2 (/ 1 x)) (* 1/2 (/ 1 (pow x 2))))))","(* (pow x 2) (- (/ 1/8 (pow x 3)) (+ (* 2 (/ 1 x)) (* 1/2 (/ 1 (pow x 2))))))","(* (pow x 2) (- (* 1/8 (/ 1 (pow x 3))) (+ (/ 1/16 (pow x 4)) (+ (* 2 (/ 1 x)) (* 1/2 (/ 1 (pow x 2)))))))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 3/16 (sqrt x))) x)) (* 1/4 (sqrt x))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/16 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 5/32 (sqrt x))) x)) (+ (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 3/16 (sqrt x)))) x)) (* 1/4 (sqrt x))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/ -1 x)","(* -1 (/ (- 1 (* 1/2 (/ 1 x))) x))","(* -1 (/ (+ 1 (* -1 (/ (- 1/2 (* 3/8 (/ 1 x))) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 3/8 (* 5/16 (/ 1 x))) x))) x))) x))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))","(- (sqrt (/ 1 x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 5))))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(- (+ (sqrt (/ 1 x)) (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* -1/2 (sqrt x))) (pow x 3)))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(/ (+ (* 1/4 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2))))) x)) (* -1/4 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/2 (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* 1/16 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 4))))) x)) (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))))) x)) (* -1/4 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)) (* 1/2 (sqrt x))) (pow x 2))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (sqrt (/ 1 (pow x 3)))))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* 1/2 (sqrt x))) (pow x 3))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(* -1 (/ (+ 1/2 (* -1 (/ (+ (* -1/4 (/ x (pow (sqrt -1) 2))) (* -1/8 (/ x (pow (sqrt -1) 2)))) (pow x 2)))) x))","(* -1 (/ (+ 1/2 (* -1 (/ (+ (* -1/4 (/ x (pow (sqrt -1) 2))) (+ (* -1/8 (/ x (pow (sqrt -1) 2))) (* 1/4 (/ 1 (pow (sqrt -1) 2))))) (pow x 2)))) x))","(* -1 (/ (- (+ 1/2 (* -1 (/ (- (* -1 (/ (+ (* 1/8 (/ (pow x 2) (pow (sqrt -1) 4))) (* 1/4 (/ (* x (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2))))) (pow (sqrt -1) 2)))) x)) (* -1/4 (/ x (pow (sqrt -1) 2)))) (pow x 3)))) (+ (/ -1/4 (* x (pow (sqrt -1) 2))) (/ -1/8 (* x (pow (sqrt -1) 2))))) x))","(* -1 (/ (- (* 3/8 (/ 1 x)) 1/2) x))","(* -2 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))))","(* 2 (* x (pow (sqrt -1) 2)))","(* (pow x 2) (- (* 2 (/ (pow (sqrt -1) 2) x)) (* 1/2 (/ 1 (pow x 2)))))","(* (pow x 2) (+ (* -1 (/ (+ 1/2 (* 1/8 (/ 1 (* x (pow (sqrt -1) 2))))) (pow x 2))) (* 2 (/ (pow (sqrt -1) 2) x))))","(* (pow x 2) (- (* 2 (/ (pow (sqrt -1) 2) x)) (+ (* 1/8 (/ 1 (* (pow x 3) (pow (sqrt -1) 2)))) (+ (* 1/16 (/ 1 (* (pow x 4) (pow (sqrt -1) 4)))) (* 1/2 (/ 1 (pow x 2)))))))"]],"series":[[6.52197265625,"((/ (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (+ (sqrt x) (sqrt (+ x 1)))) (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/ (- 1 (/ 1/2 x)) x) (- 1 (/ 1/2 x)) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ (sqrt x) x) (sqrt x) (/ (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x)))) (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg (sqrt (/ 1 x))) (sqrt (/ 1 x)) (/ (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (sqrt x)) (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/ (- 1/2 (/ 3/8 x)) x) (- 1/2 (/ 3/8 x)) (+ (* (/ -2 x) (* x x)) -1/2) (* (+ 1 (- x x)) (/ -1 (sqrt (+ x 1)))) (+ 1 (- x x)) (- x x) (+ (sqrt x) (sqrt (+ x 1))) (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (/ -1 (sqrt (+ x 1))) (/ (* (+ 1 (- x x)) (/ -1 (sqrt (+ x 1)))) (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x)))))","x","-inf"],[2.3359375,"((/ (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (+ (sqrt x) (sqrt (+ x 1)))) (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/ (- 1 (/ 1/2 x)) x) (- 1 (/ 1/2 x)) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ (sqrt x) x) (sqrt x) (/ (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x)))) (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg (sqrt (/ 1 x))) (sqrt (/ 1 x)) (/ (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (sqrt x)) (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/ (- 1/2 (/ 3/8 x)) x) (- 1/2 (/ 3/8 x)) (+ (* (/ -2 x) (* x x)) -1/2) (* (+ 1 (- x x)) (/ -1 (sqrt (+ x 1)))) (+ 1 (- x x)) (- x x) (+ (sqrt x) (sqrt (+ x 1))) (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (/ -1 (sqrt (+ x 1))) (/ (* (+ 1 (- x x)) (/ -1 (sqrt (+ x 1)))) (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x)))))","x","inf"],[2.488037109375,"((/ (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (+ (sqrt x) (sqrt (+ x 1)))) (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/ (- 1 (/ 1/2 x)) x) (- 1 (/ 1/2 x)) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ (sqrt x) x) (sqrt x) (/ (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x)))) (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg (sqrt (/ 1 x))) (sqrt (/ 1 x)) (/ (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (sqrt x)) (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/ (- 1/2 (/ 3/8 x)) x) (- 1/2 (/ 3/8 x)) (+ (* (/ -2 x) (* x x)) -1/2) (* (+ 1 (- x x)) (/ -1 (sqrt (+ x 1)))) (+ 1 (- x x)) (- x x) (+ (sqrt x) (sqrt (+ x 1))) (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (/ -1 (sqrt (+ x 1))) (/ (* (+ 1 (- x x)) (/ -1 (sqrt (+ x 1)))) (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x)))))","x","0"]],"time":13.677001953125,"type":"series"},{"count":[[108,108]],"egraph":[[0,8361,1703,0.117415624],[2,5008,1819,0.026648892],[1,1532,1833,0.018521245],[0,513,2143,0.005146669]],"inputs":[["(* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))","(/ (+ (* -1/2 (* (sqrt (pow x 3)) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/ (+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3))))))))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/ (+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))) (+ (* x (+ (* -1 (* (sqrt x) (+ (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 2))) (+ (* 1/2 (/ (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))) (+ 1 (sqrt x)))) (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 3))))))) (+ (* 1/4 (* (sqrt (/ 1 x)) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* 1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x)))))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))))))))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(sqrt (/ 1 x))","(/ (+ (sqrt x) (* -1/2 (sqrt (pow x 3)))) x)","(/ (+ (sqrt x) (* (pow x 2) (+ (* -1/2 (sqrt (/ 1 x))) (* 1/2 (sqrt x))))) x)","(/ (+ (sqrt x) (* (pow x 2) (+ (* -1/2 (sqrt (/ 1 x))) (* x (+ (* -1/2 (* (sqrt x) (+ 1 (* 1/4 (/ 1 x))))) (* 1/2 (sqrt (/ 1 x)))))))) x)","(/ -1/2 (pow x 2))","(/ (- x 1/2) (pow x 2))","(/ -1/2 x)","(/ (- x 1/2) x)","(/ (+ (sqrt x) (* -1 x)) x)","(/ (+ (sqrt x) (* x (- (* 1/2 x) 1))) x)","(/ (+ (sqrt x) (* x (- (* x (+ 1/2 (* -3/8 x))) 1))) x)","(sqrt x)","-1","(- (* 1/2 x) 1)","(- (* x (+ 1/2 (* -3/8 x))) 1)","(- (* x (+ 1/2 (* x (- (* 5/16 x) 3/8)))) 1)","(* -1 (sqrt (/ 1 x)))","(* (sqrt (/ 1 x)) (- 1 (sqrt x)))","(/ (+ (* 1/2 (sqrt (pow x 3))) (* (sqrt x) (- 1 (sqrt x)))) x)","(/ (+ (* x (+ (* 1/2 (sqrt x)) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (- 1 (sqrt x)))) (* -1/8 (sqrt x)))))) (* (sqrt x) (- 1 (sqrt x)))) x)","(/ (+ (* x (+ (* 1/2 (sqrt x)) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (- 1 (sqrt x)))) (+ (* -1/8 (sqrt x)) (* x (+ (* -1/4 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt x)) (* 1/2 (* (sqrt (/ 1 x)) (- 1 (sqrt x)))))))))))) (* (sqrt x) (- 1 (sqrt x)))) x)","(- 1 (sqrt x))","(- (+ 1 (* x (+ 1/2 (* -1/2 (- 1 (sqrt x)))))) (sqrt x))","(- (+ 1 (* x (+ 1/2 (+ (* -1/2 (- 1 (sqrt x))) (* x (- (* 3/8 (- 1 (sqrt x))) 3/8)))))) (sqrt x))","(- (+ 1 (* x (+ 1/2 (+ (* -1/2 (- 1 (sqrt x))) (* x (- (+ (* 3/8 (- 1 (sqrt x))) (* x (+ 5/16 (* -5/16 (- 1 (sqrt x)))))) 3/8)))))) (sqrt x))","(/ -3/8 (pow x 2))","(/ (- (* 1/2 x) 3/8) (pow x 2))","(/ -3/8 x)","(/ (- (* 1/2 x) 3/8) x)","-1/2","(- (* -2 x) 1/2)","1","0","(+ 1 (sqrt x))","(+ 1 (+ (sqrt x) (* 1/2 x)))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* -1/8 x)))))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))))","(* -1 (* (sqrt x) (+ 1 (sqrt x))))","(+ (* -1 (* (sqrt x) (+ 1 (sqrt x)))) (* -1/2 (sqrt (pow x 3))))","(+ (* -1 (* (sqrt x) (+ 1 (sqrt x)))) (* x (+ (* -1/2 (sqrt x)) (* 1/8 (sqrt (pow x 3))))))","(+ (* -1 (* (sqrt x) (+ 1 (sqrt x)))) (* x (+ (* -1/2 (sqrt x)) (* x (+ (* -1/16 (sqrt (pow x 3))) (* 1/8 (sqrt x)))))))","(* 1/2 (sqrt (/ 1 (pow x 3))))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 3/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) (pow x 2))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (+ (* -5/32 (sqrt (/ 1 (pow x 5)))) (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (+ (* 3/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))))) (pow x 2))","(/ 1 x)","(/ (- 1 (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 3/8 (pow x 2))) (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 3/8 (pow x 2))) (+ (* 1/2 (/ 1 x)) (* 5/16 (/ 1 (pow x 3))))) x)","(- 1 (* 1/2 (/ 1 x)))","(/ (- (* -1/2 (sqrt (/ 1 x))) (* -1/2 (sqrt x))) (pow x 2))","(/ (- (* 1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (/ 1 x))))) (pow x 2))","(/ (- (* -1/2 (* (sqrt (/ 1 (pow x 5))) (+ 1 (* 1/2 x)))) (+ (* -1/2 (sqrt x)) (+ (* -1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 x)))))) (pow x 2))","(+ (* -1 (sqrt (/ 1 x))) (* 1/2 (sqrt (/ 1 (pow x 3)))))","(+ (* -1 (sqrt (/ 1 x))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(+ (* -1 (sqrt (/ 1 x))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (* (sqrt (/ 1 (pow x 7))) (+ 1 (* 1/4 x)))))))","(/ 1/2 x)","(/ (+ 1/2 (* -1 (/ (+ (* 1/8 x) (* 1/4 x)) (pow x 2)))) x)","(/ (- (+ 1/2 (* 1/4 (/ 1 (pow x 2)))) (+ (/ 1/8 x) (/ 1/4 x))) x)","(/ (- (+ 1/2 (+ (* -1/4 (/ (+ 1 (* 1/4 x)) (pow x 3))) (* 3/8 (/ 1 (pow x 2))))) (+ (/ 1/8 x) (/ 1/4 x))) x)","(/ (- 1/2 (* 3/8 (/ 1 x))) x)","1/2","(- 1/2 (* 3/8 (/ 1 x)))","(* -2 x)","(* -1 (* x (+ 2 (* 1/2 (/ 1 x)))))","(* 2 (sqrt x))","(* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x))))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))))","(* -1 (* (pow x 2) (+ (* 2 (/ 1 x)) (* 1/2 (/ 1 (pow x 2))))))","(* (pow x 2) (- (/ 1/8 (pow x 3)) (+ (* 2 (/ 1 x)) (* 1/2 (/ 1 (pow x 2))))))","(* (pow x 2) (- (* 1/8 (/ 1 (pow x 3))) (+ (/ 1/16 (pow x 4)) (+ (* 2 (/ 1 x)) (* 1/2 (/ 1 (pow x 2)))))))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 3/16 (sqrt x))) x)) (* 1/4 (sqrt x))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/16 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 5/32 (sqrt x))) x)) (+ (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 3/16 (sqrt x)))) x)) (* 1/4 (sqrt x))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/ -1 x)","(* -1 (/ (- 1 (* 1/2 (/ 1 x))) x))","(* -1 (/ (+ 1 (* -1 (/ (- 1/2 (* 3/8 (/ 1 x))) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 3/8 (* 5/16 (/ 1 x))) x))) x))) x))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))","(- (sqrt (/ 1 x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 5))))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(- (+ (sqrt (/ 1 x)) (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* -1/2 (sqrt x))) (pow x 3)))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(/ (+ (* 1/4 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2))))) x)) (* -1/4 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/2 (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* 1/16 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 4))))) x)) (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))))) x)) (* -1/4 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)) (* 1/2 (sqrt x))) (pow x 2))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (sqrt (/ 1 (pow x 3)))))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* 1/2 (sqrt x))) (pow x 3))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(* -1 (/ (+ 1/2 (* -1 (/ (+ (* -1/4 (/ x (pow (sqrt -1) 2))) (* -1/8 (/ x (pow (sqrt -1) 2)))) (pow x 2)))) x))","(* -1 (/ (+ 1/2 (* -1 (/ (+ (* -1/4 (/ x (pow (sqrt -1) 2))) (+ (* -1/8 (/ x (pow (sqrt -1) 2))) (* 1/4 (/ 1 (pow (sqrt -1) 2))))) (pow x 2)))) x))","(* -1 (/ (- (+ 1/2 (* -1 (/ (- (* -1 (/ (+ (* 1/8 (/ (pow x 2) (pow (sqrt -1) 4))) (* 1/4 (/ (* x (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2))))) (pow (sqrt -1) 2)))) x)) (* -1/4 (/ x (pow (sqrt -1) 2)))) (pow x 3)))) (+ (/ -1/4 (* x (pow (sqrt -1) 2))) (/ -1/8 (* x (pow (sqrt -1) 2))))) x))","(* -1 (/ (- (* 3/8 (/ 1 x)) 1/2) x))","(* -2 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))))","(* 2 (* x (pow (sqrt -1) 2)))","(* (pow x 2) (- (* 2 (/ (pow (sqrt -1) 2) x)) (* 1/2 (/ 1 (pow x 2)))))","(* (pow x 2) (+ (* -1 (/ (+ 1/2 (* 1/8 (/ 1 (* x (pow (sqrt -1) 2))))) (pow x 2))) (* 2 (/ (pow (sqrt -1) 2) x))))","(* (pow x 2) (- (* 2 (/ (pow (sqrt -1) 2) x)) (+ (* 1/8 (/ 1 (* (pow x 3) (pow (sqrt -1) 2)))) (+ (* 1/16 (/ 1 (* (pow x 4) (pow (sqrt -1) 4)))) (* 1/2 (/ 1 (pow x 2)))))))"]],"memory":[[8531200,48114592]],"method":["egg-herbie"],"outputs":[["(* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))","(/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))","(/ (+ (* -1/2 (* (sqrt (pow x 3)) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/.f64 (fma.f64 (/.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal -1/2 binary64) (/.f64 (sqrt.f64 x) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))) x)","(/ (+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3))))))))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64))) (/.f64 #s(literal 1/8 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (sqrt.f64 x) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) #s(literal -1/2 binary64))) x (/.f64 (*.f64 (sqrt.f64 x) #s(literal -1/2 binary64)) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) x (/.f64 (sqrt.f64 x) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))) x)","(/ (+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))) (+ (* x (+ (* -1 (* (sqrt x) (+ (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 2))) (+ (* 1/2 (/ (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))) (+ 1 (sqrt x)))) (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 3))))))) (+ (* 1/4 (* (sqrt (/ 1 x)) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* 1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x)))))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))))))))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (neg.f64 (sqrt.f64 x)) (+.f64 (fma.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64))) (/.f64 #s(literal 1/8 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) #s(literal 1/2 binary64) (/.f64 #s(literal 1/16 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64)))) (/.f64 #s(literal 1/16 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (fma.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal 1/4 binary64) (*.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))))) x (fma.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64))) (/.f64 #s(literal 1/8 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (sqrt.f64 x) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) #s(literal -1/2 binary64)))) x (/.f64 (*.f64 (sqrt.f64 x) #s(literal -1/2 binary64)) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) x (/.f64 (sqrt.f64 x) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))) x)","(sqrt (/ 1 x))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/ (+ (sqrt x) (* -1/2 (sqrt (pow x 3)))) x)","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal -1/2 binary64) (sqrt.f64 x)) x)","(/ (+ (sqrt x) (* (pow x 2) (+ (* -1/2 (sqrt (/ 1 x))) (* 1/2 (sqrt x))))) x)","(/.f64 (fma.f64 (*.f64 (*.f64 x x) #s(literal -1/2 binary64)) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (sqrt.f64 x)) x)","(/ (+ (sqrt x) (* (pow x 2) (+ (* -1/2 (sqrt (/ 1 x))) (* x (+ (* -1/2 (* (sqrt x) (+ 1 (* 1/4 (/ 1 x))))) (* 1/2 (sqrt (/ 1 x)))))))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal -1/2 binary64) #s(literal -1/2 binary64)) (sqrt.f64 x))) x (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/2 binary64))) (*.f64 x x) (sqrt.f64 x)) x)","(/ -1/2 (pow x 2))","(/.f64 #s(literal -1/2 binary64) (*.f64 x x))","(/ (- x 1/2) (pow x 2))","(/.f64 (/.f64 (-.f64 x #s(literal 1/2 binary64)) x) x)","(/ -1/2 x)","(/.f64 #s(literal -1/2 binary64) x)","(/ (- x 1/2) x)","(/.f64 (-.f64 x #s(literal 1/2 binary64)) x)","(/ (+ (sqrt x) (* -1 x)) x)","(/.f64 (-.f64 (sqrt.f64 x) x) x)","(/ (+ (sqrt x) (* x (- (* 1/2 x) 1))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x (sqrt.f64 x)) x)","(/ (+ (sqrt x) (* x (- (* x (+ 1/2 (* -3/8 x))) 1))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -3/8 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x (sqrt.f64 x)) x)","(sqrt x)","(sqrt.f64 x)","-1","#s(literal -1 binary64)","(- (* 1/2 x) 1)","(fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))","(- (* x (+ 1/2 (* -3/8 x))) 1)","(fma.f64 (fma.f64 #s(literal -3/8 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(- (* x (+ 1/2 (* x (- (* 5/16 x) 3/8)))) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal 5/16 binary64) x #s(literal -3/8 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(* -1 (sqrt (/ 1 x)))","(neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(* (sqrt (/ 1 x)) (- 1 (sqrt x)))","(*.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(/ (+ (* 1/2 (sqrt (pow x 3))) (* (sqrt x) (- 1 (sqrt x)))) x)","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (-.f64 (sqrt.f64 x) x)) x)","(/ (+ (* x (+ (* 1/2 (sqrt x)) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (- 1 (sqrt x)))) (* -1/8 (sqrt x)))))) (* (sqrt x) (- 1 (sqrt x)))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) #s(literal -1/2 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x (-.f64 (sqrt.f64 x) x)) x)","(/ (+ (* x (+ (* 1/2 (sqrt x)) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (- 1 (sqrt x)))) (+ (* -1/8 (sqrt x)) (* x (+ (* -1/4 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt x)) (* 1/2 (* (sqrt (/ 1 x)) (- 1 (sqrt x)))))))))))) (* (sqrt x) (- 1 (sqrt x)))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 #s(literal 1 binary64) (sqrt.f64 x))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/16 binary64) (sqrt.f64 x)))) x (fma.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) #s(literal -1/2 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) x (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x (-.f64 (sqrt.f64 x) x)) x)","(- 1 (sqrt x))","(-.f64 #s(literal 1 binary64) (sqrt.f64 x))","(- (+ 1 (* x (+ 1/2 (* -1/2 (- 1 (sqrt x)))))) (sqrt x))","(fma.f64 (fma.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) #s(literal -1/2 binary64) #s(literal 1/2 binary64)) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(- (+ 1 (* x (+ 1/2 (+ (* -1/2 (- 1 (sqrt x))) (* x (- (* 3/8 (- 1 (sqrt x))) 3/8)))))) (sqrt x))","(fma.f64 (fma.f64 (fma.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) #s(literal 3/8 binary64) #s(literal -3/8 binary64)) x (fma.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) #s(literal -1/2 binary64) #s(literal 1/2 binary64))) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(- (+ 1 (* x (+ 1/2 (+ (* -1/2 (- 1 (sqrt x))) (* x (- (+ (* 3/8 (- 1 (sqrt x))) (* x (+ 5/16 (* -5/16 (- 1 (sqrt x)))))) 3/8)))))) (sqrt x))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -5/16 binary64) (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) #s(literal 5/16 binary64)) x (fma.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) #s(literal 3/8 binary64) #s(literal -3/8 binary64))) x (fma.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) #s(literal -1/2 binary64) #s(literal 1/2 binary64))) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(/ -3/8 (pow x 2))","(/.f64 #s(literal -3/8 binary64) (*.f64 x x))","(/ (- (* 1/2 x) 3/8) (pow x 2))","(/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)","(/ -3/8 x)","(/.f64 #s(literal -3/8 binary64) x)","(/ (- (* 1/2 x) 3/8) x)","(-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x))","-1/2","#s(literal -1/2 binary64)","(- (* -2 x) 1/2)","(fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))","1","#s(literal 1 binary64)","0","#s(literal 0 binary64)","(+ 1 (sqrt x))","(+.f64 (sqrt.f64 x) #s(literal 1 binary64))","(+ 1 (+ (sqrt x) (* 1/2 x)))","(fma.f64 #s(literal 1/2 binary64) x (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* -1/8 x)))))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/2 binary64)) x (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/16 binary64) x #s(literal -1/8 binary64)) x #s(literal 1/2 binary64)) x (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))","(* -1 (* (sqrt x) (+ 1 (sqrt x))))","(neg.f64 (+.f64 (sqrt.f64 x) x))","(+ (* -1 (* (sqrt x) (+ 1 (sqrt x)))) (* -1/2 (sqrt (pow x 3))))","(fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal -1/2 binary64) (neg.f64 (+.f64 (sqrt.f64 x) x)))","(+ (* -1 (* (sqrt x) (+ 1 (sqrt x)))) (* x (+ (* -1/2 (sqrt x)) (* 1/8 (sqrt (pow x 3))))))","(fma.f64 (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 (sqrt.f64 x) #s(literal -1/2 binary64))) x (neg.f64 (+.f64 (sqrt.f64 x) x)))","(+ (* -1 (* (sqrt x) (+ 1 (sqrt x)))) (* x (+ (* -1/2 (sqrt x)) (* x (+ (* -1/16 (sqrt (pow x 3))) (* 1/8 (sqrt x)))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/16 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal 1/8 binary64) (sqrt.f64 x))) x (*.f64 (sqrt.f64 x) #s(literal -1/2 binary64))) x (neg.f64 (+.f64 (sqrt.f64 x) x)))","(* 1/2 (sqrt (/ 1 (pow x 3))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) (pow x 2))","(/.f64 (fma.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 3/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) (pow x 2))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -3/8 binary64) (fma.f64 #s(literal 3/16 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) (*.f64 x x))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (+ (* -5/32 (sqrt (/ 1 (pow x 5)))) (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (+ (* 3/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))))) (pow x 2))","(/.f64 (fma.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -5/32 binary64) (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/4 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))))) (*.f64 x x))","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ (- 1 (* 1/2 (/ 1 x))) x)","(/.f64 (/.f64 (-.f64 x #s(literal 1/2 binary64)) x) x)","(/ (- (+ 1 (/ 3/8 (pow x 2))) (* 1/2 (/ 1 x))) x)","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x)","(/ (- (+ 1 (/ 3/8 (pow x 2))) (+ (* 1/2 (/ 1 x)) (* 5/16 (/ 1 (pow x 3))))) x)","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) (/.f64 #s(literal 5/16 binary64) (pow.f64 x #s(literal 3 binary64)))) x)","(- 1 (* 1/2 (/ 1 x)))","(/.f64 (-.f64 x #s(literal 1/2 binary64)) x)","(/ (- (* -1/2 (sqrt (/ 1 x))) (* -1/2 (sqrt x))) (pow x 2))","(*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 x x)))","(/ (- (* 1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (/ 1 x))))) (pow x 2))","(/.f64 (-.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 x x))","(/ (- (* -1/2 (* (sqrt (/ 1 (pow x 5))) (+ 1 (* 1/2 x)))) (+ (* -1/2 (sqrt x)) (+ (* -1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 x)))))) (pow x 2))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (fma.f64 #s(literal -1/2 binary64) (+.f64 (sqrt.f64 x) (*.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))) (*.f64 x x))","(+ (* -1 (sqrt (/ 1 x))) (* 1/2 (sqrt (/ 1 (pow x 3)))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(+ (* -1 (sqrt (/ 1 x))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))","(+ (* -1 (sqrt (/ 1 x))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (* (sqrt (/ 1 (pow x 7))) (+ 1 (* 1/4 x)))))))","(-.f64 (fma.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/2 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(/ 1/2 x)","(/.f64 #s(literal 1/2 binary64) x)","(/ (+ 1/2 (* -1 (/ (+ (* 1/8 x) (* 1/4 x)) (pow x 2)))) x)","(/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)","(/ (- (+ 1/2 (* 1/4 (/ 1 (pow x 2)))) (+ (/ 1/8 x) (/ 1/4 x))) x)","(/.f64 (-.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) x) x) #s(literal 1/2 binary64)) (+.f64 (/.f64 #s(literal 1/8 binary64) x) (/.f64 #s(literal 1/4 binary64) x))) x)","(/ (- (+ 1/2 (+ (* -1/4 (/ (+ 1 (* 1/4 x)) (pow x 3))) (* 3/8 (/ 1 (pow x 2))))) (+ (/ 1/8 x) (/ 1/4 x))) x)","(/.f64 (-.f64 (fma.f64 (/.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal -1/4 binary64) (+.f64 (/.f64 #s(literal 3/8 binary64) (*.f64 x x)) #s(literal 1/2 binary64))) (+.f64 (/.f64 #s(literal 1/8 binary64) x) (/.f64 #s(literal 1/4 binary64) x))) x)","(/ (- 1/2 (* 3/8 (/ 1 x))) x)","(/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)","1/2","#s(literal 1/2 binary64)","(- 1/2 (* 3/8 (/ 1 x)))","(-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x))","(* -2 x)","(*.f64 #s(literal -2 binary64) x)","(* -1 (* x (+ 2 (* 1/2 (/ 1 x)))))","(fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))","(* 2 (sqrt x))","(*.f64 #s(literal 2 binary64) (sqrt.f64 x))","(* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x)","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))) x)","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))) x)","(* -1 (* (pow x 2) (+ (* 2 (/ 1 x)) (* 1/2 (/ 1 (pow x 2))))))","(neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x) #s(literal 1/2 binary64)))","(* (pow x 2) (- (/ 1/8 (pow x 3)) (+ (* 2 (/ 1 x)) (* 1/2 (/ 1 (pow x 2))))))","(fma.f64 (/.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 x x) (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x) #s(literal 1/2 binary64))))","(* (pow x 2) (- (* 1/8 (/ 1 (pow x 3))) (+ (/ 1/16 (pow x 4)) (+ (* 2 (/ 1 x)) (* 1/2 (/ 1 (pow x 2)))))))","(fma.f64 (-.f64 (/.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 x x) (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x) #s(literal 1/2 binary64))))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 3/16 (sqrt x))) x)) (* 1/4 (sqrt x))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/4 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal 3/16 binary64) (sqrt.f64 x))) (neg.f64 x))) (neg.f64 x))) (*.f64 x x))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/16 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 5/32 (sqrt x))) x)) (+ (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 3/16 (sqrt x)))) x)) (* 1/4 (sqrt x))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/4 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (fma.f64 #s(literal 3/16 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/16 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal 5/32 binary64) (sqrt.f64 x))) (neg.f64 x)))) (neg.f64 x))) (neg.f64 x))) (*.f64 x x))","(/ -1 x)","(/.f64 #s(literal -1 binary64) x)","(* -1 (/ (- 1 (* 1/2 (/ 1 x))) x))","(/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x)","(* -1 (/ (+ 1 (* -1 (/ (- 1/2 (* 3/8 (/ 1 x))) x))) x))","(/.f64 (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal -1 binary64)) x)","(* -1 (/ (+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 3/8 (* 5/16 (/ 1 x))) x))) x))) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 3/8 binary64) (/.f64 #s(literal 5/16 binary64) x)) x)) x)) (neg.f64 x))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))","(/.f64 (/.f64 (-.f64 x #s(literal 1/2 binary64)) x) x)","(- (sqrt (/ 1 x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(- (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (+.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(- (+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 5))))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(+.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(- (+ (sqrt (/ 1 x)) (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* -1/2 (sqrt x))) (pow x 3)))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(+.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/2 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 x #s(literal -1 binary64)) #s(literal -1/4 binary64) #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x))) (pow.f64 x #s(literal 3 binary64)))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(sqrt.f64 x)","(/ (+ (* 1/4 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) (pow x 2))","(/.f64 (fma.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2))))) x)) (* -1/4 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/4 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal 3/16 binary64) (sqrt.f64 x))) (neg.f64 x))) (neg.f64 x))) (*.f64 x x))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/2 (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* 1/16 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 4))))) x)) (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))))) x)) (* -1/4 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/4 binary64) (sqrt.f64 x) (/.f64 (-.f64 (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal 3/16 binary64) (sqrt.f64 x))) (/.f64 (fma.f64 (/.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) #s(literal 1/16 binary64) (*.f64 #s(literal 5/32 binary64) (sqrt.f64 x))) x)) (neg.f64 x))) (neg.f64 x))) (*.f64 x x))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (sqrt (/ 1 (pow x 3)))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* 1/2 (sqrt x))) (pow x 3))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/2 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 x #s(literal -1 binary64)) #s(literal -1/4 binary64) #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x))) (pow.f64 x #s(literal 3 binary64))))))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(* -1 (/ (+ 1/2 (* -1 (/ (+ (* -1/4 (/ x (pow (sqrt -1) 2))) (* -1/8 (/ x (pow (sqrt -1) 2)))) (pow x 2)))) x))","(/.f64 (fma.f64 (/.f64 (/.f64 x #s(literal -1 binary64)) (*.f64 x x)) #s(literal 3/8 binary64) #s(literal 1/2 binary64)) (neg.f64 x))","(* -1 (/ (+ 1/2 (* -1 (/ (+ (* -1/4 (/ x (pow (sqrt -1) 2))) (+ (* -1/8 (/ x (pow (sqrt -1) 2))) (* 1/4 (/ 1 (pow (sqrt -1) 2))))) (pow x 2)))) x))","(/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (/.f64 (fma.f64 (/.f64 x #s(literal -1 binary64)) #s(literal -3/8 binary64) #s(literal -1/4 binary64)) x) x)) (neg.f64 x))","(* -1 (/ (- (+ 1/2 (* -1 (/ (- (* -1 (/ (+ (* 1/8 (/ (pow x 2) (pow (sqrt -1) 4))) (* 1/4 (/ (* x (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2))))) (pow (sqrt -1) 2)))) x)) (* -1/4 (/ x (pow (sqrt -1) 2)))) (pow x 3)))) (+ (/ -1/4 (* x (pow (sqrt -1) 2))) (/ -1/8 (* x (pow (sqrt -1) 2))))) x))","(/.f64 (-.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 #s(literal -1/4 binary64) x (/.f64 (fma.f64 (/.f64 (*.f64 (fma.f64 (/.f64 x #s(literal -1 binary64)) #s(literal -1/4 binary64) #s(literal 1 binary64)) x) #s(literal -1 binary64)) #s(literal 1/4 binary64) (/.f64 (*.f64 (*.f64 #s(literal 1/8 binary64) x) x) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64)))) (neg.f64 x))) (pow.f64 x #s(literal 3 binary64)))) (+.f64 (/.f64 #s(literal 1/8 binary64) x) (/.f64 #s(literal 1/4 binary64) x))) (neg.f64 x))","(* -1 (/ (- (* 3/8 (/ 1 x)) 1/2) x))","(/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)","(* -2 (* (sqrt x) (pow (sqrt -1) 2)))","(*.f64 #s(literal 2 binary64) (sqrt.f64 x))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (neg.f64 x))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))) (neg.f64 x))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))))","(*.f64 (fma.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))) (neg.f64 x))","(* 2 (* x (pow (sqrt -1) 2)))","(*.f64 #s(literal -2 binary64) x)","(* (pow x 2) (- (* 2 (/ (pow (sqrt -1) 2) x)) (* 1/2 (/ 1 (pow x 2)))))","(*.f64 (-.f64 (/.f64 #s(literal -2 binary64) x) (/.f64 (/.f64 #s(literal 1/2 binary64) x) x)) (*.f64 x x))","(* (pow x 2) (+ (* -1 (/ (+ 1/2 (* 1/8 (/ 1 (* x (pow (sqrt -1) 2))))) (pow x 2))) (* 2 (/ (pow (sqrt -1) 2) x))))","(*.f64 (-.f64 (/.f64 #s(literal -2 binary64) x) (/.f64 (/.f64 (+.f64 (/.f64 #s(literal -1/8 binary64) x) #s(literal 1/2 binary64)) x) x)) (*.f64 x x))","(* (pow x 2) (- (* 2 (/ (pow (sqrt -1) 2) x)) (+ (* 1/8 (/ 1 (* (pow x 3) (pow (sqrt -1) 2)))) (+ (* 1/16 (/ 1 (* (pow x 4) (pow (sqrt -1) 4)))) (* 1/2 (/ 1 (pow x 2)))))))","(*.f64 (-.f64 (/.f64 #s(literal -2 binary64) x) (+.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (pow.f64 x #s(literal 4 binary64))) (/.f64 (/.f64 #s(literal 1/2 binary64) x) x)) (/.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal 3 binary64))))) (*.f64 x x))"]],"stop":[["iter limit",1],["node limit",1]],"time":273.218017578125,"type":"simplify"},{"count":[[24,615]],"egraph":[[0,8586,221,0.100673934],[2,2420,234,0.12127147],[1,377,243,0.0087125],[0,90,271,0.002779473],[0,57,309,0.00044232]],"inputs":[["(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","#s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)","(-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (sqrt.f64 x) x))","(/.f64 (sqrt.f64 x) x)","(sqrt.f64 x)","(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))","#s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) (sqrt.f64 x))","#s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))","(/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)","(-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x))","(fma.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x) #s(literal -1/2 binary64))","(*.f64 (+.f64 #s(literal 1 binary64) (-.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(+.f64 #s(literal 1 binary64) (-.f64 x x))","(-.f64 x x)","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","#s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x))","#s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x) #s(literal -1/2 binary64)))","(/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) (-.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x) #s(literal -1/2 binary64))))"]],"memory":[[-5027376,52866544]],"outputs":[["(*.f64 (/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) (-.f64 x (+.f64 #s(literal 1 binary64) x))) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))) (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (hypot.f64 (sqrt.f64 x) x)))","(*.f64 (neg.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x))) (neg.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(*.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (pow.f64 (pow.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)))","(*.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(*.f64 #s(literal 1 binary64) (*.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x))))","(pow.f64 (/.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) #s(literal 1 binary64))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x))))) (neg.f64 (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))))","(/.f64 (*.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) #s(literal 1 binary64)) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(/.f64 (neg.f64 (neg.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)))) (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(/.f64 (neg.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)))))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x))))","(neg.f64 (/.f64 (neg.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x))) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(neg.f64 (/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))) (/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(exp.f64 (*.f64 (log.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)))) #s(literal -1 binary64)))","#s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x))","(*.f64 (pow.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (+.f64 #s(literal -1 binary64) (/.f64 #s(literal 1/2 binary64) x)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)))","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x))","(pow.f64 (/.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64))) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal 1/2 binary64) x) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -3 binary64)) (/.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) x) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal 1/2 binary64) x) x))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (/.f64 #s(literal 1/2 binary64) x)))) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (neg.f64 x) (*.f64 (neg.f64 x) (/.f64 #s(literal 1/2 binary64) x)))) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 (neg.f64 (-.f64 x (*.f64 x (/.f64 #s(literal 1/2 binary64) x)))) (neg.f64 (*.f64 x x)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (neg.f64 x)) (*.f64 (neg.f64 (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) x))) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) x) (*.f64 (neg.f64 (sqrt.f64 x)) (/.f64 #s(literal 1/2 binary64) x))) (neg.f64 (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (*.f64 x x)) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (*.f64 x (neg.f64 x))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (*.f64 x (neg.f64 x))))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 x (/.f64 #s(literal 1/2 binary64) x))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (/.f64 x (/.f64 #s(literal 1/2 binary64) x))))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (*.f64 x (*.f64 x #s(literal 2 binary64)))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (*.f64 x (*.f64 x #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 x)) (*.f64 (sqrt.f64 x) (/.f64 #s(literal -1/2 binary64) x))) (*.f64 (sqrt.f64 x) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) x) (*.f64 (sqrt.f64 x) (/.f64 #s(literal 1/2 binary64) x))) (pow.f64 x #s(literal 3/2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (*.f64 x x)) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64))) (*.f64 (sqrt.f64 x) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (*.f64 x (neg.f64 x))) (*.f64 (sqrt.f64 x) #s(literal -1/2 binary64))) (*.f64 (sqrt.f64 x) (*.f64 x (neg.f64 x))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 x (/.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (/.f64 x (/.f64 #s(literal 1/2 binary64) x))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (*.f64 x (*.f64 x #s(literal 2 binary64)))) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (*.f64 x (*.f64 x #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 x)) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) x))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)) (neg.f64 x)))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)) (/.f64 #s(literal 1/2 binary64) x))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)) x))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x x)) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)) #s(literal 1/2 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x (neg.f64 x))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)) #s(literal -1/2 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)) (*.f64 x (neg.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (/.f64 x (/.f64 #s(literal 1/2 binary64) x))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)) (/.f64 x (/.f64 #s(literal 1/2 binary64) x))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x (*.f64 x #s(literal 2 binary64)))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)) (*.f64 x (*.f64 x #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 x)) (*.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))) (/.f64 #s(literal -1/2 binary64) x))) (*.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))) (neg.f64 x)))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))) (/.f64 #s(literal 1/2 binary64) x))) (*.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))) x))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x x)) (*.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x (neg.f64 x))) (*.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))) #s(literal -1/2 binary64))) (*.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))) (*.f64 x (neg.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (/.f64 x (/.f64 #s(literal 1/2 binary64) x))) (*.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))) (/.f64 x (/.f64 #s(literal 1/2 binary64) x))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x (*.f64 x #s(literal 2 binary64)))) (*.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))) (*.f64 x (*.f64 x #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 x)) (*.f64 (neg.f64 x) (/.f64 #s(literal -1/2 binary64) x))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x x)) (*.f64 (neg.f64 x) #s(literal 1/2 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x (neg.f64 x))) (*.f64 (neg.f64 x) #s(literal -1/2 binary64))) (*.f64 (neg.f64 x) (*.f64 x (neg.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (/.f64 x (/.f64 #s(literal 1/2 binary64) x))) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) (/.f64 x (/.f64 #s(literal 1/2 binary64) x))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x (*.f64 x #s(literal 2 binary64)))) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) (*.f64 x (*.f64 x #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (neg.f64 (neg.f64 x)) (/.f64 #s(literal -1/2 binary64) x))) (*.f64 (neg.f64 (neg.f64 x)) (neg.f64 x)))","(/.f64 (-.f64 x (*.f64 (neg.f64 (neg.f64 x)) (/.f64 #s(literal 1/2 binary64) x))) (*.f64 (neg.f64 (neg.f64 x)) x))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (neg.f64 (neg.f64 x)) #s(literal 1/2 binary64))) (*.f64 (neg.f64 (neg.f64 x)) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x (neg.f64 x))) (*.f64 (neg.f64 (neg.f64 x)) #s(literal -1/2 binary64))) (*.f64 (neg.f64 (neg.f64 x)) (*.f64 x (neg.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 x (/.f64 #s(literal 1/2 binary64) x))) (*.f64 (neg.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 x)) (/.f64 x (/.f64 #s(literal 1/2 binary64) x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x (*.f64 x #s(literal 2 binary64)))) (*.f64 (neg.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 x)) (*.f64 x (*.f64 x #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 x (/.f64 #s(literal -1/2 binary64) x))) (*.f64 x (neg.f64 x)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 x #s(literal 1/2 binary64))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x (neg.f64 x))) (*.f64 x #s(literal -1/2 binary64))) (*.f64 x (*.f64 x (neg.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 x (/.f64 #s(literal 1/2 binary64) x))) x) (*.f64 x (/.f64 x (/.f64 #s(literal 1/2 binary64) x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x (*.f64 x #s(literal 2 binary64)))) x) (*.f64 x (*.f64 x (*.f64 x #s(literal 2 binary64)))))","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(literal -1/2 binary64) x)) (neg.f64 x))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -1 binary64))) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64))) (pow.f64 x #s(literal -1 binary64))) (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64)) x)","(/.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) x) #s(literal 2 binary64))) (+.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal 1/2 binary64) x) x)))","(/.f64 (-.f64 (pow.f64 x #s(literal -3 binary64)) (/.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 6 binary64)))) (+.f64 (pow.f64 x #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) x) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal 1/2 binary64) x) x)))))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (/.f64 #s(literal 1/2 binary64) x))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)))) (neg.f64 (*.f64 x (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64)))) (neg.f64 (*.f64 x (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) (neg.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) #s(literal 1 binary64)) x))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (neg.f64 x) (/.f64 #s(literal 1/2 binary64) x))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 x (*.f64 x (/.f64 #s(literal 1/2 binary64) x))) (*.f64 x x))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64))) (*.f64 x (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64))) (*.f64 x (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (+.f64 #s(literal -1 binary64) (/.f64 #s(literal 1/2 binary64) x)) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 x (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x))))","(neg.f64 (/.f64 (+.f64 #s(literal -1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x))","(neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) (neg.f64 x)))","(fma.f64 (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -2 binary64)) (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -2 binary64)) (neg.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) x)))","(fma.f64 (/.f64 (neg.f64 (sqrt.f64 x)) x) (/.f64 (neg.f64 (sqrt.f64 x)) x) (neg.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) x)))","(fma.f64 (/.f64 (sqrt.f64 x) (neg.f64 x)) (/.f64 (sqrt.f64 x) (neg.f64 x)) (neg.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) x)))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) x (neg.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (neg.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) x)))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) x)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64) (neg.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) x)))","(fma.f64 #s(literal -1 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (neg.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) x)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) x)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (sqrt.f64 x) (neg.f64 x)) #s(literal 2 binary64)) (neg.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) x)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) #s(literal 2 binary64)) (neg.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) x)))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)) (neg.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) x)))","(fma.f64 x (pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 2 binary64)) (neg.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) x)))","(fma.f64 x (pow.f64 x #s(literal -2 binary64)) (neg.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) x)))","(-.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (+.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal 1/2 binary64) x) x))) (/.f64 (pow.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) x) #s(literal 2 binary64)) (+.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal 1/2 binary64) x) x))))","(-.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (+.f64 (pow.f64 x #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) x) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal 1/2 binary64) x) x))))) (/.f64 (/.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 6 binary64))) (+.f64 (pow.f64 x #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) x) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal 1/2 binary64) x) x))))))","(-.f64 (/.f64 (neg.f64 x) (*.f64 (neg.f64 x) x)) (/.f64 (*.f64 (neg.f64 x) (/.f64 #s(literal 1/2 binary64) x)) (*.f64 (neg.f64 x) x)))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)))) (/.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (*.f64 x (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64)) (*.f64 x (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64)) x) (/.f64 (/.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64))) x))","(-.f64 (/.f64 (pow.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) x) (/.f64 (/.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64)) (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) #s(literal 1 binary64))) x))","(-.f64 (/.f64 x (*.f64 x x)) (/.f64 (*.f64 x (/.f64 #s(literal 1/2 binary64) x)) (*.f64 x x)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) (neg.f64 x)))","(-.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal 1/2 binary64) x) x))","(exp.f64 (*.f64 (log.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)))) #s(literal -1 binary64)))","(+.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) x)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64))) (pow.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64))) (*.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)))) (*.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64)))) (*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) #s(literal 1 binary64)) (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal -1/2 binary64) x))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1/2 binary64) x))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (/.f64 #s(literal -1/2 binary64) x)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64))) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1/2 binary64) x)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64)))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64))","(fma.f64 #s(literal 1/2 binary64) (neg.f64 (pow.f64 x #s(literal -1 binary64))) #s(literal 1 binary64))","(fma.f64 #s(literal -1/2 binary64) (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (/.f64 #s(literal -1/2 binary64) x))) (/.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (/.f64 #s(literal -1/2 binary64) x))))","(-.f64 (pow.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64))))","(-.f64 (pow.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64)) (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x))","(+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (/.f64 #s(literal -1/2 binary64) x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/4 binary64)) (pow.f64 x #s(literal -1/4 binary64)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal -1 binary64) x)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1/2 binary64)))","(*.f64 (neg.f64 (sqrt.f64 x)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (sqrt.f64 x))","(*.f64 #s(literal -1 binary64) (/.f64 (sqrt.f64 x) (neg.f64 x)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 (sqrt.f64 x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(pow.f64 (pow.f64 x #s(literal -1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64))","(pow.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (*.f64 x x) #s(literal -1/4 binary64))","(pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64))","(pow.f64 (sqrt.f64 x) #s(literal -1 binary64))","(pow.f64 x #s(literal -1/2 binary64))","(/.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (neg.f64 (sqrt.f64 (neg.f64 x))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 x)))) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 x)) (*.f64 (neg.f64 x) (sqrt.f64 x))) (*.f64 x x))","(/.f64 (sqrt.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (sqrt.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (sqrt.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (neg.f64 (neg.f64 x)))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x))))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x)))))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (neg.f64 x)))","(/.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)))","(/.f64 (sqrt.f64 x) x)","(/.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 (neg.f64 x))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","(neg.f64 (/.f64 (neg.f64 (sqrt.f64 x)) x))","(neg.f64 (/.f64 (sqrt.f64 x) (neg.f64 x)))","(neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(sqrt.f64 (/.f64 x (*.f64 x x)))","(sqrt.f64 (pow.f64 x #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (/.f64 (sqrt.f64 x) (neg.f64 x)))","(fabs.f64 (pow.f64 x #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 #s(literal -1/2 binary64) (log.f64 x)))","(*.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 x)))","(*.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (sqrt.f64 x))","(*.f64 x (pow.f64 x #s(literal -1/2 binary64)))","(pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64))","(pow.f64 (sqrt.f64 x) #s(literal 1 binary64))","(pow.f64 x #s(literal 1/2 binary64))","(/.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))","(/.f64 (neg.f64 (neg.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (sqrt.f64 (neg.f64 x)) (sqrt.f64 #s(literal -1 binary64)))","(/.f64 (neg.f64 x) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(/.f64 (sqrt.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(/.f64 x (sqrt.f64 x))","(sqrt.f64 x)","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (sqrt.f64 x))) (/.f64 x (neg.f64 (sqrt.f64 x))))","(-.f64 #s(literal 0 binary64) (/.f64 (sqrt.f64 x) #s(literal -1 binary64)))","(fabs.f64 (sqrt.f64 x))","(exp.f64 (log.f64 (sqrt.f64 x)))","(*.f64 (pow.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)) #s(literal -1 binary64)) #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))))","(*.f64 (neg.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))) (pow.f64 (neg.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x))) #s(literal -1 binary64)))","(*.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (pow.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x))))","(pow.f64 (/.f64 (/.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)) #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)) #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) #s(literal 1 binary64))) (neg.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))))) (neg.f64 (neg.f64 (neg.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x))))))","(/.f64 (*.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) #s(literal 1 binary64)) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))","(/.f64 (neg.f64 (neg.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))))) (neg.f64 (neg.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))))","(/.f64 (neg.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))) (neg.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x))))","(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)) #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)) #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)) #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)) #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)) #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))))","(neg.f64 (/.f64 (neg.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x))))","(neg.f64 (/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (neg.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))) (/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (neg.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))))","(exp.f64 (*.f64 (log.f64 (/.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)) #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))))) #s(literal -1 binary64)))","#s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(pow.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -3/2 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -1/2 binary64)))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -1 binary64))) (+.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -1/2 binary64))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -3/2 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -1/2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 #s(literal -1 binary64) (sqrt.f64 x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 x)))","(neg.f64 (pow.f64 x #s(literal -1/2 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -1/2 binary64)))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -1/2 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -1/2 binary64)))))) (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -1/2 binary64)))))))","(-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(+.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/4 binary64)) (pow.f64 x #s(literal -1/4 binary64)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal -1 binary64) x)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1/2 binary64)))","(*.f64 (neg.f64 (sqrt.f64 x)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (sqrt.f64 x))","(*.f64 #s(literal -1 binary64) (/.f64 (sqrt.f64 x) (neg.f64 x)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 (sqrt.f64 x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(pow.f64 (pow.f64 x #s(literal -1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64))","(pow.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (*.f64 x x) #s(literal -1/4 binary64))","(pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64))","(pow.f64 (sqrt.f64 x) #s(literal -1 binary64))","(pow.f64 x #s(literal -1/2 binary64))","(/.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (neg.f64 (sqrt.f64 (neg.f64 x))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 x)))) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 x)) (*.f64 (neg.f64 x) (sqrt.f64 x))) (*.f64 x x))","(/.f64 (sqrt.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (sqrt.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (sqrt.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (neg.f64 (neg.f64 x)))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x))))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x)))))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (neg.f64 x)))","(/.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)))","(/.f64 (sqrt.f64 x) x)","(/.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 (neg.f64 x))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","(neg.f64 (/.f64 (neg.f64 (sqrt.f64 x)) x))","(neg.f64 (/.f64 (sqrt.f64 x) (neg.f64 x)))","(neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(sqrt.f64 (/.f64 x (*.f64 x x)))","(sqrt.f64 (pow.f64 x #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (/.f64 (sqrt.f64 x) (neg.f64 x)))","(fabs.f64 (pow.f64 x #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 #s(literal -1/2 binary64) (log.f64 x)))","(*.f64 (*.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (neg.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (pow.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) (sqrt.f64 x)))","(pow.f64 (/.f64 (/.f64 (sqrt.f64 x) #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (sqrt.f64 x) #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (neg.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (*.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) #s(literal -1 binary64))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))))) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (/.f64 (neg.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))) #s(literal -1 binary64)) (sqrt.f64 x))","(/.f64 (*.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) #s(literal -1 binary64)) (neg.f64 (sqrt.f64 x)))","(/.f64 (*.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) #s(literal 1 binary64)) (sqrt.f64 x))","(/.f64 (neg.f64 (neg.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))) (neg.f64 (sqrt.f64 x)))","(/.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) (sqrt.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (sqrt.f64 x) #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (sqrt.f64 x) #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (sqrt.f64 x) #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (sqrt.f64 x) #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 x) #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))))","(neg.f64 (/.f64 (neg.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))) (sqrt.f64 x)))","(neg.f64 (/.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) (neg.f64 (sqrt.f64 x))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (sqrt.f64 x))) (/.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) (neg.f64 (sqrt.f64 x))))","(exp.f64 (*.f64 (log.f64 (/.f64 (sqrt.f64 x) #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)))) #s(literal -1 binary64)))","#s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))","(*.f64 (pow.f64 (/.f64 x (-.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (-.f64 #s(literal 1/8 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (/.f64 #s(literal 3/8 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/4 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))","(pow.f64 (/.f64 (/.f64 x (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 x (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1/8 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 3 binary64))) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (fma.f64 (/.f64 #s(literal 3/8 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/4 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) #s(literal -1 binary64))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (pow.f64 (/.f64 (/.f64 #s(literal 3/8 binary64) x) x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 (/.f64 #s(literal 3/8 binary64) x) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64)) (/.f64 #s(literal 27/512 binary64) (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/4 binary64) (+.f64 (pow.f64 (/.f64 (/.f64 #s(literal 3/8 binary64) x) x) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 (/.f64 #s(literal 3/8 binary64) x) x))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)))) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 2 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1/8 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 (/.f64 #s(literal 3/8 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/4 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1/8 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (/.f64 #s(literal 3/8 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/4 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 x (/.f64 #s(literal 3/8 binary64) x)))) (neg.f64 (*.f64 x x)))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 (neg.f64 x) (/.f64 #s(literal 3/8 binary64) x)))) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 (neg.f64 (-.f64 x (*.f64 (*.f64 x #s(literal 2 binary64)) (/.f64 #s(literal 3/8 binary64) x)))) (neg.f64 (*.f64 (*.f64 x #s(literal 2 binary64)) x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 x)) (*.f64 (neg.f64 (*.f64 x #s(literal 2 binary64))) (/.f64 #s(literal -3/8 binary64) x))) (*.f64 (neg.f64 (*.f64 x #s(literal 2 binary64))) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x (neg.f64 x))) (*.f64 (neg.f64 (*.f64 x #s(literal 2 binary64))) #s(literal -3/8 binary64))) (*.f64 (neg.f64 (*.f64 x #s(literal 2 binary64))) (*.f64 x (neg.f64 x))))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (neg.f64 (*.f64 x #s(literal 2 binary64))) (/.f64 #s(literal 3/8 binary64) x))) (*.f64 (neg.f64 (*.f64 x #s(literal 2 binary64))) x))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x x)) (*.f64 (neg.f64 (*.f64 x #s(literal 2 binary64))) #s(literal 3/8 binary64))) (*.f64 (neg.f64 (*.f64 x #s(literal 2 binary64))) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (/.f64 x (/.f64 #s(literal 3/8 binary64) x))) (*.f64 (neg.f64 (*.f64 x #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (*.f64 x #s(literal 2 binary64))) (/.f64 x (/.f64 #s(literal 3/8 binary64) x))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x (*.f64 x #s(literal 8/3 binary64)))) (*.f64 (neg.f64 (*.f64 x #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (*.f64 x #s(literal 2 binary64))) (*.f64 x (*.f64 x #s(literal 8/3 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 x)) (*.f64 (neg.f64 (neg.f64 x)) (/.f64 #s(literal -3/8 binary64) x))) (*.f64 (neg.f64 (neg.f64 x)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 x (neg.f64 x))) (*.f64 (neg.f64 (neg.f64 x)) #s(literal -3/8 binary64))) (*.f64 (neg.f64 (neg.f64 x)) (*.f64 x (neg.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 (neg.f64 (neg.f64 x)) (/.f64 #s(literal 3/8 binary64) x))) (*.f64 (neg.f64 (neg.f64 x)) x))","(/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 x x)) (*.f64 (neg.f64 (neg.f64 x)) #s(literal 3/8 binary64))) (*.f64 (neg.f64 (neg.f64 x)) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 x (/.f64 #s(literal 3/8 binary64) x))) (*.f64 (neg.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 x)) (/.f64 x (/.f64 #s(literal 3/8 binary64) x))))","(/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 x (*.f64 x #s(literal 8/3 binary64)))) (*.f64 (neg.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 x)) (*.f64 x (*.f64 x #s(literal 8/3 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 x)) (*.f64 x (/.f64 #s(literal -3/8 binary64) x))) (*.f64 x (neg.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 x (neg.f64 x))) (*.f64 x #s(literal -3/8 binary64))) (*.f64 x (*.f64 x (neg.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 x x)) (*.f64 x #s(literal 3/8 binary64))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 x (/.f64 #s(literal 3/8 binary64) x))) x) (*.f64 x (/.f64 x (/.f64 #s(literal 3/8 binary64) x))))","(/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 x (*.f64 x #s(literal 8/3 binary64)))) x) (*.f64 x (*.f64 x (*.f64 x #s(literal 8/3 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 x)) (*.f64 (neg.f64 x) (/.f64 #s(literal -3/8 binary64) x))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 x (neg.f64 x))) (*.f64 (neg.f64 x) #s(literal -3/8 binary64))) (*.f64 (neg.f64 x) (*.f64 x (neg.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 x x)) (*.f64 (neg.f64 x) #s(literal 3/8 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 x (/.f64 #s(literal 3/8 binary64) x))) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) (/.f64 x (/.f64 #s(literal 3/8 binary64) x))))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 x (*.f64 x #s(literal 8/3 binary64)))) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) (*.f64 x (*.f64 x #s(literal 8/3 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (/.f64 (*.f64 x #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -3/8 binary64) x))) (*.f64 (/.f64 (*.f64 x #s(literal 2 binary64)) #s(literal 1 binary64)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x (neg.f64 x))) (*.f64 (/.f64 (*.f64 x #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -3/8 binary64))) (*.f64 (/.f64 (*.f64 x #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 x (neg.f64 x))))","(/.f64 (-.f64 x (*.f64 (/.f64 (*.f64 x #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 3/8 binary64) x))) (*.f64 (/.f64 (*.f64 x #s(literal 2 binary64)) #s(literal 1 binary64)) x))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (/.f64 (*.f64 x #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal 3/8 binary64))) (*.f64 (/.f64 (*.f64 x #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 x (/.f64 #s(literal 3/8 binary64) x))) (*.f64 (/.f64 (*.f64 x #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 x #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 x (/.f64 #s(literal 3/8 binary64) x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x (*.f64 x #s(literal 8/3 binary64)))) (*.f64 (/.f64 (*.f64 x #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 x #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 x (*.f64 x #s(literal 8/3 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (*.f64 x #s(literal 2 binary64)) (/.f64 #s(literal -3/8 binary64) x))) (*.f64 (*.f64 x #s(literal 2 binary64)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x (neg.f64 x))) (*.f64 (*.f64 x #s(literal 2 binary64)) #s(literal -3/8 binary64))) (*.f64 (*.f64 x #s(literal 2 binary64)) (*.f64 x (neg.f64 x))))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x #s(literal 2 binary64)) #s(literal 3/8 binary64))) (*.f64 (*.f64 x #s(literal 2 binary64)) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 x (/.f64 #s(literal 3/8 binary64) x))) (*.f64 (*.f64 x #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 x #s(literal 2 binary64)) (/.f64 x (/.f64 #s(literal 3/8 binary64) x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x (*.f64 x #s(literal 8/3 binary64)))) (*.f64 (*.f64 x #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 x #s(literal 2 binary64)) (*.f64 x (*.f64 x #s(literal 8/3 binary64)))))","(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(literal -3/8 binary64) x)) (neg.f64 x))","(/.f64 (*.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -1 binary64))) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1/8 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 3 binary64))) (pow.f64 x #s(literal -1 binary64))) (fma.f64 (/.f64 #s(literal 3/8 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/4 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (*.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) #s(literal 1 binary64)) x)","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (pow.f64 (/.f64 (/.f64 #s(literal 3/8 binary64) x) x) #s(literal 2 binary64))) (+.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 (/.f64 #s(literal 3/8 binary64) x) x)))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64)) (/.f64 #s(literal 27/512 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/4 binary64) (+.f64 (pow.f64 (/.f64 (/.f64 #s(literal 3/8 binary64) x) x) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 (/.f64 #s(literal 3/8 binary64) x) x)))))","(/.f64 (neg.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 2 binary64)))) (neg.f64 (*.f64 x (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/8 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 3 binary64)))) (neg.f64 (*.f64 x (fma.f64 (/.f64 #s(literal 3/8 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/4 binary64)))))","(/.f64 (*.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) (neg.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) x))","(/.f64 (*.f64 (-.f64 #s(literal 1/8 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (/.f64 #s(literal 3/8 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/4 binary64)) (neg.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1/8 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (/.f64 #s(literal 3/8 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/4 binary64)) x))","(/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 x (/.f64 #s(literal 3/8 binary64) x))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 (neg.f64 x) (/.f64 #s(literal 3/8 binary64) x))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 x (*.f64 (*.f64 x #s(literal 2 binary64)) (/.f64 #s(literal 3/8 binary64) x))) (*.f64 (*.f64 x #s(literal 2 binary64)) x))","(/.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 2 binary64))) (*.f64 x (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64))))","(/.f64 (-.f64 #s(literal 1/8 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 3 binary64))) (*.f64 x (fma.f64 (/.f64 #s(literal 3/8 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/4 binary64))))","(/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) (neg.f64 x))","(/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 x (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 x (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 x (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x))))","(neg.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))","(neg.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) (neg.f64 x)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64) (neg.f64 (/.f64 (/.f64 #s(literal 3/8 binary64) x) x)))","(fma.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64) (neg.f64 (/.f64 (/.f64 #s(literal 3/8 binary64) x) x)))","(fma.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)) (neg.f64 (/.f64 (/.f64 #s(literal 3/8 binary64) x) x)))","(fma.f64 #s(literal -1/2 binary64) (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (/.f64 #s(literal 3/8 binary64) x) x)))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x) (neg.f64 (/.f64 (/.f64 #s(literal 3/8 binary64) x) x)))","(-.f64 (/.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (+.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 (/.f64 #s(literal 3/8 binary64) x) x))) (/.f64 (pow.f64 (/.f64 (/.f64 #s(literal 3/8 binary64) x) x) #s(literal 2 binary64)) (+.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 (/.f64 #s(literal 3/8 binary64) x) x))))","(-.f64 (/.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/4 binary64) (+.f64 (pow.f64 (/.f64 (/.f64 #s(literal 3/8 binary64) x) x) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 (/.f64 #s(literal 3/8 binary64) x) x))))) (/.f64 (/.f64 #s(literal 27/512 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/4 binary64) (+.f64 (pow.f64 (/.f64 (/.f64 #s(literal 3/8 binary64) x) x) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 (/.f64 #s(literal 3/8 binary64) x) x))))))","(-.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 x x)) (/.f64 (*.f64 x (/.f64 #s(literal 3/8 binary64) x)) (*.f64 x x)))","(-.f64 (/.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 (neg.f64 x) x)) (/.f64 (*.f64 (neg.f64 x) (/.f64 #s(literal 3/8 binary64) x)) (*.f64 (neg.f64 x) x)))","(-.f64 (/.f64 x (*.f64 (*.f64 x #s(literal 2 binary64)) x)) (/.f64 (*.f64 (*.f64 x #s(literal 2 binary64)) (/.f64 #s(literal 3/8 binary64) x)) (*.f64 (*.f64 x #s(literal 2 binary64)) x)))","(-.f64 (/.f64 #s(literal 1/4 binary64) (*.f64 x (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)))) (/.f64 (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 2 binary64)) (*.f64 x (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)))))","(-.f64 (/.f64 #s(literal 1/8 binary64) (*.f64 x (fma.f64 (/.f64 #s(literal 3/8 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/4 binary64)))) (/.f64 (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 3 binary64)) (*.f64 x (fma.f64 (/.f64 #s(literal 3/8 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/4 binary64)))))","(-.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64))) x) (/.f64 (/.f64 (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 2 binary64)) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64))) x))","(-.f64 (/.f64 (/.f64 #s(literal 1/8 binary64) (fma.f64 (/.f64 #s(literal 3/8 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/4 binary64))) x) (/.f64 (/.f64 (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 3 binary64)) (fma.f64 (/.f64 #s(literal 3/8 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/4 binary64))) x))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) (neg.f64 x)))","(-.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 (/.f64 #s(literal 3/8 binary64) x) x))","(exp.f64 (*.f64 (log.f64 (/.f64 x (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)))) #s(literal -1 binary64)))","(+.f64 (/.f64 #s(literal 1/2 binary64) x) (neg.f64 (/.f64 (/.f64 #s(literal 3/8 binary64) x) x)))","(*.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 2 binary64))) (pow.f64 (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1/8 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (/.f64 #s(literal 3/8 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/4 binary64)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) (-.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (/.f64 #s(literal 3/8 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/4 binary64)) (-.f64 #s(literal 1/8 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1/8 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (/.f64 #s(literal 3/8 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/4 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64))) (*.f64 (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 2 binary64)))) (*.f64 (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1/8 binary64) (fma.f64 (/.f64 #s(literal 3/8 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/4 binary64))) (*.f64 (fma.f64 (/.f64 #s(literal 3/8 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/4 binary64)) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 3 binary64)))) (*.f64 (fma.f64 (/.f64 #s(literal 3/8 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/4 binary64)) (fma.f64 (/.f64 #s(literal 3/8 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/4 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal -3/8 binary64) x))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/8 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) (/.f64 #s(literal -3/8 binary64) x))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/8 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (/.f64 #s(literal 3/8 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/4 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 2 binary64))) (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal -3/8 binary64) x)))","(/.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 2 binary64))) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)))","(/.f64 (-.f64 #s(literal 1/8 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 3 binary64))) (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) (/.f64 #s(literal -3/8 binary64) x)))))","(/.f64 (-.f64 #s(literal 1/8 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal 3/8 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/4 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) (-.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (/.f64 #s(literal 3/8 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/4 binary64)) (-.f64 #s(literal 1/8 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) (-.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 #s(literal 3/8 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/4 binary64)) (-.f64 #s(literal 1/8 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 3 binary64)))))","(fma.f64 #s(literal -3/8 binary64) (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64))","(fma.f64 #s(literal 3/8 binary64) (neg.f64 (pow.f64 x #s(literal -1 binary64))) #s(literal 1/2 binary64))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64))","(-.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal -3/8 binary64) x))) (/.f64 (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 2 binary64)) (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal -3/8 binary64) x))))","(-.f64 (/.f64 #s(literal 1/4 binary64) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64))) (/.f64 (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 2 binary64)) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64))))","(-.f64 (/.f64 #s(literal 1/8 binary64) (fma.f64 (/.f64 #s(literal 3/8 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/4 binary64))) (/.f64 (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 3 binary64)) (fma.f64 (/.f64 #s(literal 3/8 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/4 binary64))))","(-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x))","(+.f64 (/.f64 #s(literal -3/8 binary64) x) #s(literal 1/2 binary64))","(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal -3/8 binary64) x))","(*.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) #s(literal -1/4 binary64)) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64)) (pow.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal -2 binary64) x) #s(literal -1/2 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal -2 binary64) x #s(literal 1/2 binary64)) (fma.f64 #s(literal 4 binary64) (*.f64 x x) #s(literal -1/4 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal -2 binary64) x) #s(literal -1/2 binary64)))) (fma.f64 #s(literal -8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 4 binary64) (*.f64 x x)))) (neg.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 #s(literal -2 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) #s(literal -1/4 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal -2 binary64) x #s(literal 1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal -2 binary64) x) #s(literal -1/2 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 4 binary64) (*.f64 x x)) (fma.f64 #s(literal -2 binary64) x #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal -2 binary64) x #s(literal 1/2 binary64)) #s(literal 1/4 binary64))) (*.f64 (fma.f64 #s(literal -2 binary64) x #s(literal 1/2 binary64)) (fma.f64 #s(literal -2 binary64) x #s(literal 1/2 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 4 binary64) (*.f64 x x))) (-.f64 #s(literal -1/2 binary64) (*.f64 #s(literal -2 binary64) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) #s(literal -1/4 binary64))) (neg.f64 (fma.f64 #s(literal -2 binary64) x #s(literal 1/2 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal -8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64))) (neg.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 #s(literal 4 binary64) (*.f64 x x)) (*.f64 (*.f64 #s(literal -2 binary64) x) #s(literal -1/2 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64))) (neg.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal -2 binary64) x) #s(literal -1/2 binary64))))))","(/.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) #s(literal -1/4 binary64)) (fma.f64 #s(literal -2 binary64) x #s(literal 1/2 binary64)))","(/.f64 (fma.f64 #s(literal -8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64)) (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 #s(literal 4 binary64) (*.f64 x x)) (*.f64 (*.f64 #s(literal -2 binary64) x) #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 #s(literal -8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64)) (fma.f64 #s(literal 4 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal -2 binary64) x) #s(literal -1/2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal -2 binary64) x #s(literal 1/2 binary64)) (fma.f64 #s(literal 4 binary64) (*.f64 x x) #s(literal -1/4 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal -2 binary64) x) #s(literal -1/2 binary64)))) (fma.f64 #s(literal -8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -2 binary64) x #s(literal 1/2 binary64)) (fma.f64 #s(literal 4 binary64) (*.f64 x x) #s(literal -1/4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal -2 binary64) x) #s(literal -1/2 binary64)))) (fma.f64 #s(literal -8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64))))","(fma.f64 (*.f64 (*.f64 #s(literal -2 binary64) x) x) (pow.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64))","(fma.f64 (*.f64 x x) (/.f64 #s(literal -2 binary64) x) #s(literal -1/2 binary64))","(fma.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x) #s(literal -1/2 binary64))","(fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))","(fma.f64 x #s(literal -2 binary64) #s(literal -1/2 binary64))","(-.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal -1/2 binary64) (*.f64 #s(literal -2 binary64) x))) (/.f64 (*.f64 #s(literal 4 binary64) (*.f64 x x)) (-.f64 #s(literal -1/2 binary64) (*.f64 #s(literal -2 binary64) x))))","(-.f64 (/.f64 (*.f64 #s(literal 4 binary64) (*.f64 x x)) (fma.f64 #s(literal -2 binary64) x #s(literal 1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal -2 binary64) x #s(literal 1/2 binary64))))","(+.f64 (*.f64 #s(literal -2 binary64) x) #s(literal -1/2 binary64))","(+.f64 #s(literal -1/2 binary64) (*.f64 #s(literal -2 binary64) x))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(pow.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(neg.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) #s(literal -1 binary64)))","#s(literal 1 binary64)","#s(literal 0 binary64)","(*.f64 (-.f64 x (+.f64 #s(literal 1 binary64) x)) (pow.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) (pow.f64 (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (hypot.f64 (sqrt.f64 x) x)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (-.f64 x (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (hypot.f64 (sqrt.f64 x) x)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(pow.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal -1 binary64))","(pow.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal 1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 x (+.f64 #s(literal 1 binary64) x)))) (neg.f64 (neg.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (hypot.f64 (sqrt.f64 x) x)))))","(/.f64 (-.f64 (*.f64 x (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (*.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (+.f64 #s(literal 1 binary64) x))) (*.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (-.f64 x (+.f64 #s(literal 1 binary64) x))) (neg.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))) (neg.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 x (hypot.f64 (sqrt.f64 x) x)))))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))) (neg.f64 (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (-.f64 x (+.f64 #s(literal 1 binary64) x)) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) (+.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 x (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (hypot.f64 (sqrt.f64 x) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (-.f64 x (+.f64 #s(literal 1 binary64) x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (hypot.f64 (sqrt.f64 x) x)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (-.f64 x (+.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (hypot.f64 (sqrt.f64 x) x)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))))","(/.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)) (sqrt.f64 x))","(fma.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 1/4 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64) (sqrt.f64 x))","(fma.f64 (sqrt.f64 x) #s(literal 1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(fma.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))","(fma.f64 #s(literal 1 binary64) (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(fma.f64 x (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(-.f64 (/.f64 x (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","#s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x))","#s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(pow.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(neg.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64)))) #s(literal 1 binary64))","(*.f64 (pow.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (pow.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64)))))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (pow.f64 (neg.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64)))))","(pow.f64 (*.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64)))) #s(literal -1 binary64))","(pow.f64 (*.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (pow.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))) #s(literal -1 binary64)))) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (pow.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))) #s(literal -1 binary64))) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (*.f64 #s(literal -1 binary64) (pow.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))) #s(literal -1 binary64))) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(/.f64 (pow.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))) #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (neg.f64 (neg.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))))))","(/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))))))","(/.f64 #s(literal -1 binary64) (*.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(/.f64 #s(literal -1 binary64) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64)))))","(/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (neg.f64 (neg.f64 (neg.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64)))))))","(/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (neg.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))))))","(/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (*.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(neg.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (neg.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64)))))) (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64)))) (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))))) (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64)))))","(exp.f64 (*.f64 (log.f64 (*.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))) #s(literal -1 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":375.7490234375,"type":"rewrite"},{"compiler":[[24085,2761]],"memory":[[946064,66079216]],"time":167.475830078125,"type":"eval"},{"alts":[["(/.f64 (/.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x))","fresh",38.28763094302679,"binary64"],["(/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))))","fresh",0.6023533812118186,"binary64"],["(/.f64 (-.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64)))))) x)","fresh",38.95071814898687,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) (sqrt.f64 x))","fresh",38.90995773050666,"binary64"],["(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (fma.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x)))))","fresh",38.27981844302679,"binary64"],["(/.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 #s(approx (- 1/2 (/ 3/8 x)) #s(literal 1/2 binary64)) x)) (sqrt.f64 x))","fresh",0.9401967629804395,"binary64"],["(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))","fresh",0.9473392560024059,"binary64"],["(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))","done",0.9239022742433152,"binary64"],["(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) #s(literal -1 binary64)) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))","fresh",59.02435629871413,"binary64"],["(/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","fresh",1.3091667997755756,"binary64"],["(/.f64 #s(literal -1 binary64) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64)))))","fresh",1.44099620631323,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","done",38.9638767072099,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (*.f64 (*.f64 #s(literal -2 binary64) x) x)))","fresh",10.503982869769194,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(approx (/ (- 1 x) (sqrt x)) (neg.f64 (sqrt.f64 x))) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))))","fresh",10.55067868102082,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 #s(approx (/ (- 1 x) (sqrt x)) (neg.f64 (sqrt.f64 x))) x)))","fresh",0.9862035608255033,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 x (*.f64 x x))))","fresh",39.22287024206551,"binary64"]],"compiler":[[1116,216],[21,10],[23,18],[14,9],[11,8],[27,13],[25,17],[33,20],[34,21],[30,18],[18,11],[23,18],[11,8],[24,17],[28,18],[28,18],[18,12]],"count":[[726,16]],"kept":[{"done":[3,1],"fresh":[12,9],"new":[706,5],"picked":[5,1]}],"memory":[[2842752,37148176]],"min-error":[[0.0,"binary64"]],"time":27.30908203125,"type":"prune"},{"accuracy":[0.4842340332848187],"baseline":[0.4842340332848187],"branch":[["x",0.4842340332848186,1,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))",0.4842340332848187,1,"binary64"]],"compiler":[[1,1],[11,8]],"count":[[47,1]],"inputs":[["(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) #s(literal -1 binary64)) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (sqrt.f64 x) x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 x (*.f64 x x))))","(/.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 #s(literal 1/2 binary64) x)) (sqrt.f64 x))","(/.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 #s(approx (- 1/2 (/ 3/8 x)) #s(literal 1/2 binary64)) x)) (sqrt.f64 x))","(/.f64 #s(literal -1 binary64) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64)))))","(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 #s(approx (/ (- 1 x) (sqrt x)) (neg.f64 (sqrt.f64 x))) x)))","(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))","(/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(approx (/ (- 1 x) (sqrt x)) (neg.f64 (sqrt.f64 x))) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal -1/2 binary64)) (*.f64 x x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (*.f64 (*.f64 #s(literal -2 binary64) x) x)))","(/.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) (sqrt.f64 x))","(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) (sqrt.f64 x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) x)) x))","(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) (-.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 x x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64)))))) x)","(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) (-.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x) #s(literal -1/2 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (*.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x) #s(literal 1/2 binary64)))))","(/.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x))","(/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 x (+.f64 x #s(literal 1 binary64)))) (+.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64)))))) (sqrt.f64 x))","(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 3/8 binary64) (*.f64 x x)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (sqrt.f64 x))","(/.f64 (/.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x))","(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) (-.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (fma.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x)))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64)))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) x) (-.f64 (pow.f64 x #s(literal -1 binary64)) x)) (*.f64 x (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x)))) (*.f64 x x)))"]],"memory":[[5538752,13091216]],"oracle":[61.26279955416333],"outputs":[["(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) (-.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))"]],"repr":["binary64"],"time":27.697998046875,"times":[[11.712890625,"x"],[12.35498046875,"(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))"]],"type":"regimes"},{"accuracy":[0.5197607400622466],"baseline":[0.5197607400622466],"branch":[["x",0.5197607400622466,1,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))",0.5197607400622466,1,"binary64"]],"compiler":[[1,1],[11,8]],"count":[[39,1]],"inputs":[["(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) #s(literal -1 binary64)) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (sqrt.f64 x) x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 x (*.f64 x x))))","(/.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 #s(literal 1/2 binary64) x)) (sqrt.f64 x))","(/.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 #s(approx (- 1/2 (/ 3/8 x)) #s(literal 1/2 binary64)) x)) (sqrt.f64 x))","(/.f64 #s(literal -1 binary64) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64)))))","(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 #s(approx (/ (- 1 x) (sqrt x)) (neg.f64 (sqrt.f64 x))) x)))","(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))","(/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(approx (/ (- 1 x) (sqrt x)) (neg.f64 (sqrt.f64 x))) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal -1/2 binary64)) (*.f64 x x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (*.f64 (*.f64 #s(literal -2 binary64) x) x)))","(/.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) (sqrt.f64 x))","(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) (sqrt.f64 x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) x)) x))","(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) (-.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 x x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64)))))) x)","(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) (-.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x) #s(literal -1/2 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (*.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x) #s(literal 1/2 binary64)))))","(/.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x))","(/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 x (+.f64 x #s(literal 1 binary64)))) (+.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64)))))) (sqrt.f64 x))","(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 3/8 binary64) (*.f64 x x)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (sqrt.f64 x))","(/.f64 (/.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x))"]],"memory":[[-5023264,11253856]],"oracle":[61.26279955416333],"outputs":[["(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 3/8 binary64) (*.f64 x x)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))"]],"repr":["binary64"],"time":20.43798828125,"times":[[10.006103515625,"x"],[7.781982421875,"(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))"]],"type":"regimes"},{"accuracy":[0.6023533812118186],"baseline":[0.6023533812118186],"branch":[["x",0.6023533812118186,1,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))",0.6023533812118186,1,"binary64"]],"compiler":[[1,1],[11,8]],"count":[[36,1]],"inputs":[["(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) #s(literal -1 binary64)) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (sqrt.f64 x) x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 x (*.f64 x x))))","(/.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 #s(literal 1/2 binary64) x)) (sqrt.f64 x))","(/.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 #s(approx (- 1/2 (/ 3/8 x)) #s(literal 1/2 binary64)) x)) (sqrt.f64 x))","(/.f64 #s(literal -1 binary64) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64)))))","(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 #s(approx (/ (- 1 x) (sqrt x)) (neg.f64 (sqrt.f64 x))) x)))","(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))","(/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(approx (/ (- 1 x) (sqrt x)) (neg.f64 (sqrt.f64 x))) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal -1/2 binary64)) (*.f64 x x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (*.f64 (*.f64 #s(literal -2 binary64) x) x)))","(/.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) (sqrt.f64 x))","(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))))) (sqrt.f64 x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) x)) x))","(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) (-.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 x x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64)))))) x)","(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) (-.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x) #s(literal -1/2 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (*.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x) #s(literal 1/2 binary64)))))","(/.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x))","(/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 x (+.f64 x #s(literal 1 binary64)))) (+.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 x #s(literal 1 binary64)))))) (sqrt.f64 x))","(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))"]],"memory":[[1490496,10567136]],"oracle":[61.26279955416333],"outputs":[["(/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))))"]],"repr":["binary64"],"time":19.158935546875,"times":[[10.424072265625,"x"],[6.490234375,"(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))"]],"type":"regimes"},{"accuracy":[0.9239022742433152],"baseline":[0.9239022742433152],"branch":[["x",0.9239022742433151,1,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))",0.9239022742433152,1,"binary64"]],"compiler":[[1,1],[11,8]],"count":[[11,1]],"inputs":[["(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) #s(literal -1 binary64)) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (sqrt.f64 x) x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 x (*.f64 x x))))","(/.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 #s(literal 1/2 binary64) x)) (sqrt.f64 x))","(/.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 #s(approx (- 1/2 (/ 3/8 x)) #s(literal 1/2 binary64)) x)) (sqrt.f64 x))","(/.f64 #s(literal -1 binary64) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64)))))","(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 #s(approx (/ (- 1 x) (sqrt x)) (neg.f64 (sqrt.f64 x))) x)))","(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))"]],"memory":[[-3115872,5062368]],"oracle":[60.454488994623254],"outputs":[["(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))"]],"repr":["binary64"],"time":10.943115234375,"times":[[5.43603515625,"x"],[4.213134765625,"(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))"]],"type":"regimes"},{"accuracy":[0.9401967629804395],"baseline":[0.9401967629804395],"branch":[["x",0.9401967629804396,1,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))",0.9401967629804395,1,"binary64"]],"compiler":[[1,1],[11,8]],"count":[[10,1]],"inputs":[["(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) #s(literal -1 binary64)) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (sqrt.f64 x) x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 x (*.f64 x x))))","(/.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 #s(literal 1/2 binary64) x)) (sqrt.f64 x))","(/.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 #s(approx (- 1/2 (/ 3/8 x)) #s(literal 1/2 binary64)) x)) (sqrt.f64 x))","(/.f64 #s(literal -1 binary64) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64)))))","(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 #s(approx (/ (- 1 x) (sqrt x)) (neg.f64 (sqrt.f64 x))) x)))"]],"memory":[[4701856,4701856]],"oracle":[60.454488994623254],"outputs":[["(/.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 #s(literal 1/2 binary64) x)) (sqrt.f64 x))"]],"repr":["binary64"],"time":8.5849609375,"times":[[3.9951171875,"x"],[3.380859375,"(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))"]],"type":"regimes"},{"accuracy":[39.22287024206552],"baseline":[39.22287024206551],"branch":[["x",39.222870242065525,1,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))",39.22287024206552,1,"binary64"]],"compiler":[[1,1],[11,8]],"count":[[5,1]],"inputs":[["(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) #s(literal -1 binary64)) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (sqrt.f64 x) x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 x (*.f64 x x))))"]],"memory":[[-4601904,3643248]],"oracle":[60.454488994623254],"outputs":[["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 x (*.f64 x x))))"]],"repr":["binary64"],"time":5.29296875,"times":[[2.778076171875,"x"],[1.782958984375,"(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))"]],"type":"regimes"},{"accuracy":[59.02435629871414],"baseline":[59.02435629871413],"branch":[["x",59.02435629871417,1,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))",59.02435629871414,1,"binary64"]],"compiler":[[1,1],[11,8]],"count":[[4,1]],"inputs":[["(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) #s(literal -1 binary64)) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (sqrt.f64 x) x))"]],"link":["."],"memory":[[3449408,3449408]],"name":["2isqrt (example 3.6)"],"oracle":[60.454488994623254],"outputs":[["(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) #s(literal -1 binary64)) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))"]],"repr":["binary64"],"time":3.909912109375,"times":[[1.72607421875,"x"],[1.5849609375,"(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))"]],"type":"regimes"},{"egraph":[[5,6675,153,0.052000873],[4,822,153,0.022929852],[3,379,153,0.004594778],[2,186,166,0.001996208],[1,101,176,0.001342077],[0,64,181,0.000956174]],"inputs":[["(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) (-.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 3/8 binary64) (*.f64 x x)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))))","(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))","(/.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 #s(literal 1/2 binary64) x)) (sqrt.f64 x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 x (*.f64 x x))))","(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) #s(literal -1 binary64)) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))"]],"memory":[[-6109312,14576592]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) (-.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","(/.f64 (/.f64 (neg.f64 #s(literal -1 binary64)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x)))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 3/8 binary64) (*.f64 x x)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))))","(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))","(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg.f64 (sqrt.f64 (pow.f64 x #s(literal -1 binary64))))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))","(/.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 #s(literal 1/2 binary64) x)) (sqrt.f64 x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 x (*.f64 x x))))","(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) #s(literal -1 binary64)) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))"]],"stop":[["node limit",1]],"time":118.402099609375,"type":"simplify"},{"compiler":[[177,64],[17,13],[22,16],[17,12],[11,8],[16,12],[16,12],[4,4],[6,5],[11,8],[22,16],[17,12],[11,8],[87,28],[0,1],[48,17],[11,8],[21,15],[48,17],[11,8]],"egraph":[[0,8586,221,0.069778343],[2,2420,234,0.034465303],[1,377,243,0.008766336],[0,90,271,0.003024671],[0,57,309,0.000497562],[0,8666,166,0.07049024],[2,2095,167,0.030629393],[1,246,167,0.006819003],[0,59,201,0.001878474],[0,35,215,0.000432665],[0,8235,2045,0.094955255],[2,5435,2194,0.025861618],[1,1673,2216,0.018215502],[0,560,2618,0.005322535],[0,8336,1213,0.112611218],[2,3284,1291,0.032248985],[1,1003,1346,0.011867055],[0,346,1598,0.003527056],[0,8247,344,0.127032699],[3,3341,373,0.039206178],[2,930,383,0.013368674],[1,303,408,0.002627544],[0,114,457,0.001045818],[0,8280,180,0.082321007],[2,1886,180,0.035831261],[1,275,188,0.007900493],[0,64,214,0.003228358],[0,40,244,0.000387848],[0,8443,19,0.068105512],[3,6723,19,0.048224155],[2,565,19,0.022188449],[1,66,19,0.002836107],[0,14,23,0.001107606],[0,8,23,0.000109548],[0,8361,1703,0.111368009],[2,5008,1819,0.030866282],[1,1532,1833,0.018238381],[0,513,2143,0.005410064]],"memory":[[2933568,11198064]],"stop":[["fuel",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1]],"time":2717.660888671875,"type":"soundness"},{"compiler":[[177,64],[177,64],[9,7],[9,7],[11,8],[11,8]],"memory":[[-580832,32423616]],"remove-preprocessing":[[],[],[],[],[],[],[],[]],"time":113.463134765625,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.010986328125,"type":"end"}]